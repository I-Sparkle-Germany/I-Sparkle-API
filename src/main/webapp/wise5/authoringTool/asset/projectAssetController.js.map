{"version":3,"sources":["projectAssetController.es6"],"names":["ProjectAssetController","$filter","$mdDialog","$rootScope","$state","$stateParams","$scope","$timeout","ConfigService","ProjectAssetService","UtilService","$translate","projectId","projectAssets","projectAssetTotalSizeMax","projectAssetUsagePercentage","totalUnusedFilesSize","unusedFilesPercentage","popup","nodeId","componentId","target","targetObject","assetSortBy","assetMessage","$watch","totalFileSize","sortAssets","calculateAssetUsage","then","setTotalUnusedFilesSize","sortBy","files","sort","sortAssetsAToZ","reverse","sortAssetsSmallToLarge","a","b","aFileName","fileName","toLowerCase","bFileName","result","aFileSize","fileSize","bFileSize","assetItem","message","answer","confirm","deleteAssetItem","newProjectAssets","downloadAssetItem","assetFullURL","getFullAssetItemURL","appropriateFileSize","parent","angular","element","document","body","title","htmlContent","ok","show","params","$broadcast","uploadAssets","uploadAssetsResults","length","uploadedAssetsFilenames","r","uploadAssetsResult","data","push","config","file","name","assetFilenames","join","$event","selectedAssetItem","assetsDirectoryPath","getProjectAssetsDirectoryPath","absolutePath","previewAssetURL","assetIsImage","assetIsVideo","isImage","isVideo","$","load","hide","go","$inject"],"mappings":"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","file":"projectAssetController.js","sourcesContent":["'use strict';\n\nclass ProjectAssetController {\n\n    constructor($filter,\n                $mdDialog,\n                $rootScope,\n                $state,\n                $stateParams,\n                $scope,\n                $timeout,\n                ConfigService,\n                ProjectAssetService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.ProjectAssetService = ProjectAssetService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n\n        this.projectId = this.$stateParams.projectId;\n        this.projectAssets = ProjectAssetService.projectAssets;\n        this.projectAssetTotalSizeMax = ProjectAssetService.projectAssetTotalSizeMax;\n        this.projectAssetUsagePercentage = ProjectAssetService.projectAssetUsagePercentage;\n\n        // the amount of space the unused files use\n        this.totalUnusedFilesSize = 0;\n\n        /*\n         * the amount of space the unused files use as a percentage of the\n         * total amount of allowed space for the project\n         */\n        this.unusedFilesPercentage = 0;\n\n        // whether the asset page is being displayed in a popup\n        this.popup = false;\n        this.projectId = null;\n        this.nodeId = null;\n        this.componentId = null;\n        this.target = null;\n        this.targetObject = null;\n\n        if (this.$stateParams != null) {\n            if (this.$stateParams.popup) {\n                // this asset page is being displayed in a popup\n                this.popup = true;\n            }\n\n            if (this.$stateParams.projectId) {\n                // get the project id that opened this popup\n                this.projectId = this.$stateParams.projectId;\n            }\n\n            if (this.$stateParams.nodeId) {\n                // get the node id that opened this popup\n                this.nodeId = this.$stateParams.nodeId;\n            }\n\n            if (this.$stateParams.componentId) {\n                // get the component id that opened this popup\n                this.componentId = this.$stateParams.componentId;\n            }\n\n            if (this.$stateParams.target) {\n                // get the target to put the asset in\n                this.target = this.$stateParams.target;\n            }\n\n            if (this.$stateParams.targetObject) {\n                // get the target object to put the asset in\n                this.targetObject = this.$stateParams.targetObject;\n            }\n        }\n\n        this.assetSortBy = \"aToZ\";  // initially sort assets alphabetically\n        this.assetMessage = \"\";\n\n        this.$scope.$watch(\n            () => {\n                return this.projectAssets;\n            },\n            () => {\n                this.projectAssetUsagePercentage = this.projectAssets.totalFileSize / this.projectAssetTotalSizeMax * 100;\n                this.sortAssets(this.assetSortBy);  // make sure the assets are sorted by current sort field\n            }\n        );\n\n        // When user changes sort assets by\n        this.$scope.$watch(\n            () => {\n                return this.assetSortBy;\n            },\n            () => {\n                this.sortAssets(this.assetSortBy);\n            }\n        );\n\n        // calculate whether the assets are used in the project\n        this.ProjectAssetService.calculateAssetUsage().then((totalUnusedFilesSize) => {\n            // set the total unused files size\n            this.setTotalUnusedFilesSize(totalUnusedFilesSize);\n        });\n    }\n\n    sortAssets(sortBy) {\n        if (sortBy === \"aToZ\") {\n            this.projectAssets.files.sort(this.sortAssetsAToZ);\n        } else if (sortBy === \"zToA\") {\n            let files = this.projectAssets.files;\n            this.projectAssets.files = files.sort(this.sortAssetsAToZ).reverse();\n        } else if (sortBy === \"smallToLarge\") {\n            this.projectAssets.files.sort(this.sortAssetsSmallToLarge);\n        } else if (sortBy === \"largeToSmall\") {\n            let files = this.projectAssets.files;\n            this.projectAssets.files = files.sort(this.sortAssetsSmallToLarge).reverse();\n        }\n    };\n\n    sortAssetsAToZ(a, b) {\n        var aFileName = a.fileName.toLowerCase();\n        var bFileName = b.fileName.toLowerCase();\n        var result = 0;\n\n        if (aFileName < bFileName) {\n            result = -1;\n        } else if (aFileName > bFileName) {\n            result = 1;\n        }\n        return result;\n    };\n\n    sortAssetsSmallToLarge(a, b) {\n        var aFileSize = a.fileSize;\n        var bFileSize = b.fileSize;\n        var result = 0;\n\n        if (aFileSize < bFileSize) {\n            result = -1;\n        } else if (aFileSize > bFileSize) {\n            result = 1;\n        }\n        return result;\n    }\n\n    /**\n     * Delete an asset from the project\n     * @param assetItem the asset to delete\n     */\n    deleteAsset(assetItem) {\n\n        // ask the user if they are sure they want to delete the file\n        var message = this.$translate(\"areYouSureYouWantToDeleteThisFile\") + \"\\n\\n\" + assetItem.fileName;\n        var answer = confirm(message);\n\n        if (answer) {\n            // the user answered yes to delete the file\n            this.ProjectAssetService.deleteAssetItem(assetItem).then((newProjectAssets) => {\n                this.projectAssets = this.ProjectAssetService.projectAssets;\n\n                // calculate whether the assets are used in the project\n                this.ProjectAssetService.calculateAssetUsage().then((totalUnusedFilesSize) => {\n                    // set the total unused files size\n                    this.setTotalUnusedFilesSize(totalUnusedFilesSize);\n                });\n            });\n        }\n    }\n\n    /**\n     * Download an asset\n     */\n    downloadAsset(assetItem) {\n        this.ProjectAssetService.downloadAssetItem(assetItem);\n    }\n\n    /**\n     * Show asset image in a popup dialog and give author an option to delete it.\n     */\n    viewAsset(assetItem) {\n        // Append dialog to document.body\n        let assetFullURL = this.ProjectAssetService.getFullAssetItemURL(assetItem);\n        let appropriateFileSize = this.$filter('appropriateSizeText')(assetItem.fileSize);\n        let confirm = this.$mdDialog.confirm()\n            .parent(angular.element(document.body))\n            .title(assetItem.fileName + \" (\" + appropriateFileSize + \")\")\n            .htmlContent(\"<img src=\\\"\" + assetFullURL + \"\\\" />\")\n            .ok(this.$translate('CLOSE'))\n        this.$mdDialog.show(confirm).then(() => {\n            // Author wants to simply close the dialog\n        }, () => {\n            // Author wants to simply close the dialog\n        });\n    }\n\n    /**\n     * The user has chosen an asset to use\n     * @param assetItem the asset the user chose\n     */\n    chooseAsset(assetItem) {\n        // fire the event to notify listeners that an asset was selected\n        var params = {\n            assetItem: assetItem,\n            projectId: this.projectId,\n            nodeId: this.nodeId,\n            componentId: this.componentId,\n            target: this.target,\n            targetObject: this.targetObject\n        };\n        this.$rootScope.$broadcast('assetSelected', params);\n    }\n\n    uploadAssetItems(files) {\n        this.ProjectAssetService.uploadAssets(files).then((uploadAssetsResults) => {\n            if (uploadAssetsResults && uploadAssetsResults.length > 0) {\n                let uploadedAssetsFilenames = [];\n                for (var r = 0; r < uploadAssetsResults.length; r++) {\n                    let uploadAssetsResult = uploadAssetsResults[r];\n                    if (typeof uploadAssetsResult.data === 'string') {\n                        // there was an error uploading this file, so don't add\n                    } else {\n                        uploadedAssetsFilenames.push(uploadAssetsResult.config.file.name);\n                    }\n                }\n                if (uploadedAssetsFilenames.length > 0) {\n                    // show a confirmation message for 7 seconds\n                    this.assetMessage = this.$translate('assetUploadSuccessful', { assetFilenames: uploadedAssetsFilenames.join(\", \") });\n                    this.$timeout(() => {\n                        this.assetMessage = \"\";\n                    }, 7000);\n                }\n            }\n            this.projectAssets = this.ProjectAssetService.projectAssets;\n\n            // calculate whether the assets are used in the project\n            this.ProjectAssetService.calculateAssetUsage().then((totalUnusedFilesSize) => {\n                // set the total unused files size\n                this.setTotalUnusedFilesSize(totalUnusedFilesSize);\n            });\n        });\n    }\n\n    /**\n     * Preview an asset in the right panel\n     * @param $event The event that caused the asset to be previewed. This will\n     * either be a mouseover or click event.\n     * @param assetItem the asset item to preview\n     */\n    previewAsset($event, assetItem) {\n        if (assetItem != null) {\n            this.selectedAssetItem = assetItem;\n\n            // get the file name\n            var fileName = assetItem.fileName;\n\n            // get the project assets directory path\n            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n\n            // get the absolute path to the asset file\n            var absolutePath = assetsDirectoryPath + '/' + fileName;\n\n            // set the url of the asset so we can preview it\n            this.previewAssetURL = absolutePath;\n\n            // clear these flags\n            this.assetIsImage = false;\n            this.assetIsVideo = false;\n\n            if (this.UtilService.isImage(fileName)) {\n                // the asset in an image\n                this.assetIsImage = true;\n            } else if(this.UtilService.isVideo(fileName)) {\n                // the asset is a video\n                this.assetIsVideo = true;\n                $('video').load();\n            }\n        }\n    }\n\n    /**\n     * Close the asset view\n     */\n    exit() {\n        if (this.popup) {\n            // this asset view was opened in a popup\n            this.$mdDialog.hide();\n        } else {\n            // this asset view was opened as a page\n            this.$state.go('root.project', {projectId: this.projectId});\n        }\n    }\n\n    /**\n     * Set the total amount of space the unused files use\n     * @param totalUnusedFilesSize the total amount of space the unused files\n     * use\n     */\n    setTotalUnusedFilesSize(totalUnusedFilesSize) {\n\n        // set the total amount of space the unused files use\n        this.totalUnusedFilesSize = totalUnusedFilesSize;\n\n        /*\n         * calculate the amount of space the unused files use as a\n         * percentage of the total amount of allowed space for the project\n         */\n        this.unusedFilesPercentage = this.totalUnusedFilesSize / this.projectAssetTotalSizeMax * 100;\n    }\n}\n\nProjectAssetController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$state',\n    '$stateParams',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'ProjectAssetService',\n    'UtilService'\n];\n\nexport default ProjectAssetController;\n"]}