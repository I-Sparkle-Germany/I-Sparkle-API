{"version":3,"sources":["authoringToolProjectService.es6"],"names":["AuthoringToolProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","projectId","project","id","notifyProjectBeginURL","getConfigParam","httpParams","method","url","then","result","otherAuthors","data","resolve","reject","getProjectId","notifyProjectEndURL","nodeId","componentId","component","getComponentByNodeIdAndComponentId","componentType","type","componentService","get","getPossibleTransitionCriteria","copyProjectURL","headers","params","$","param","projectJSONString","commitMessage","registerNewProjectURL","JSON","parse","e","Error","commitProjectURL","components","getComponentsByNodeId","c","length","tempComponent","title","newGroupId","getNextAvailableGroupId","newGroup","startId","ids","newNodeId","getNextAvailableNodeId","newNode","constraints","transitionLogic","transitions","showSaveButton","showSubmitButton","nodeIds","newNodes","n","nodeIdToCopy","copyNode","createNodeInside","createNodeAfter","parseProject","push","selectedNodes","fromProjectId","toProjectId","nodeIdToInsertInsideOrAfter","importStepsURL","steps","angular","toJson","inactiveNodes","getInactiveNodes","newNodeIds","selectedNode","tempNode","makeCopyOfJSONObject","isNodeIdUsed","nextAvailableNodeId","tempComponents","isComponentIdUsed","newComponentId","getUnusedComponentId","isGroupNode","node","addInactiveNode","setIdToNode","setIdToElement","isInactive","addInactiveNodeInsertInside","addNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","insertNodeAfterInGroups","insertNodeAfterInTransitions","oldToGroupIds","transitionsFromGroup","getTransitionsByFromNodeId","transitionFromGroup","toNodeId","to","fromGroupId","newToGroupId","updateTransitionsForInsertingGroup","$inject"],"mappings":"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","file":"authoringToolProjectService.js","sourcesContent":["'use strict';\nimport ProjectService from '../services/projectService';\n\nclass AuthoringToolProjectService extends ProjectService {\n  constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n    super($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService);\n  }\n\n\n  /**\n   * Notifies others that the specified project is being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectBegin(projectId = null) {\n    if (projectId == null) {\n      if (this.project != null) {\n        projectId = this.project.id;\n      } else {\n        return;\n      }\n    }\n    let notifyProjectBeginURL = this.ConfigService\n      .getConfigParam('notifyProjectBeginURL') + projectId;\n    let httpParams = {\n      method: \"POST\",\n      url: notifyProjectBeginURL\n    };\n\n    return this.$http(httpParams).then((result) => {\n      let otherAuthors = result.data;\n      return otherAuthors;\n    });\n  }\n\n  /**\n   * Notifies others that the specified project is being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectEnd(projectId = null) {\n    return this.$q((resolve, reject) => {\n      if (projectId == null) {\n        if (this.project != null) {\n          projectId = this.ConfigService.getProjectId();\n        } else {\n          resolve();\n        }\n      }\n      let notifyProjectEndURL = this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId;\n      let httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = notifyProjectEndURL;\n\n      this.$http(httpParams).then(() => {\n        resolve();\n      })\n    });\n  }\n\n  /**\n   * Returns all possible transition criteria for the specified node and component.\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      let componentType = component.type;\n      let componentService = this.$injector.get(componentType + 'Service');\n      if (componentService.getPossibleTransitionCriteria) {\n        return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n      } else {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Copies the project with the specified id and returns a new project id if the project is\n   * successfully copied\n   */\n  copyProject(projectId) {\n    const copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n    if (copyProjectURL == null) {\n      return null;\n    }\n\n    const httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = copyProjectURL + \"/\" + projectId;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    const params = {};\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      const projectId = result.data;\n      return projectId;\n    });\n  };\n\n  /**\n   * Registers a new project having the projectJSON content with the server.\n   * Returns a new project Id if the project is successfully registered.\n   * Returns null if Config.registerNewProjectURL is undefined.\n   * Throws an error if projectJSONString is invalid JSON string\n   */\n  registerNewProject(projectJSONString, commitMessage) {\n    const registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n    if (registerNewProjectURL == null) {\n      return null;\n    }\n\n    try {\n      // Try parsing the JSON string and throw an error if there's an issue parsing it.\n      JSON.parse(projectJSONString);\n    } catch (e) {\n      throw new Error(\"Invalid projectJSONString.\");\n    }\n\n    if (!commitMessage) {\n      commitMessage = \"\";\n    }\n\n    const httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = registerNewProjectURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    const params = {};\n    params.commitMessage = commitMessage;\n    params.projectJSONString = projectJSONString;\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      const projectId = result.data;\n      return projectId;\n    });\n  };\n\n  /**\n   * Retrieves and returns the project's commit history.\n   */\n  getCommitHistory() {\n    const commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n    return this.$http({\n      url: commitProjectURL,\n      method: 'GET'\n    }).then((result) => {\n      return result.data;\n    });\n  };\n\n  /**\n   * Replace a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param component the new component\n   */\n  replaceComponent(nodeId, componentId, component) {\n    if (nodeId != null && componentId != null && component != null) {\n      const components = this.getComponentsByNodeId(nodeId);\n      if (components != null) {\n        for (let c = 0; c < components.length; c++) {\n          const tempComponent = components[c];\n          if (tempComponent != null) {\n            if (tempComponent.id === componentId) {\n              components[c] = component;\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Create a new group\n   * @param title the title of the group\n   * @returns the group object\n   */\n  createGroup(title) {\n    const newGroupId = this.getNextAvailableGroupId();\n    const newGroup = {};\n    newGroup.id = newGroupId;\n    newGroup.type = 'group';\n    newGroup.title = title;\n    newGroup.startId = '';\n    newGroup.ids = [];\n    return newGroup;\n  };\n\n  /**\n   * Create a new node\n   * @param title the title of the node\n   * @returns the node object\n   */\n  createNode(title) {\n    const newNodeId = this.getNextAvailableNodeId();\n    const newNode = {};\n    newNode.id = newNodeId;\n    newNode.title = title;\n    newNode.type = 'node';\n    newNode.constraints = [];\n    newNode.transitionLogic = {};\n    newNode.transitionLogic.transitions = [];\n    newNode.showSaveButton = false;\n    newNode.showSubmitButton = false;\n    newNode.components = [];\n    return newNode;\n  };\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesInside(nodeIds, nodeId) {\n    const newNodes = [];\n    for (let n = 0; n < nodeIds.length; n++) {\n      const nodeIdToCopy = nodeIds[n];\n      const newNode = this.copyNode(nodeIdToCopy);\n      const newNodeId = newNode.id;\n\n      if (n == 0) {\n        // this is the first node we are copying so we will insert it\n        // into the beginning of the group\n        this.createNodeInside(newNode, nodeId);\n      } else {\n        // this is not the first node we are copying so we will insert\n        // it after the node we previously inserted\n        this.createNodeAfter(newNode, nodeId);\n      }\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n    return newNodes;\n  }\n\n  /**\n   * Copy the nodes into the project\n   * @param selectedNodes the nodes to import\n   * @param fromProjectId copy the nodes from this project\n   * @param toProjectId copy the nodes into this project\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter) {\n    const importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n    const httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = importStepsURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    const params = {};\n    params.steps = angular.toJson(selectedNodes);\n    params.fromProjectId = fromProjectId;\n    params.toProjectId = toProjectId;\n    httpParams.data = $.param(params);\n\n    /*\n     * Make the request to import the steps. This will copy the asset files\n     * and change file names if necessary. If an asset file with the same\n     * name exists in both projects we will check if their content is the\n     * same. If the content is the same we don't need to copy the file. If\n     * the content is different, we need to make a copy of the file with a\n     * new name and change all the references in the steps to use the new\n     * name.\n     */\n    return this.$http(httpParams).then((result) => {\n      selectedNodes = result.data;\n\n      const inactiveNodes = this.getInactiveNodes();\n      const newNodes = [];\n      const newNodeIds = [];\n\n      for (let selectedNode of selectedNodes) {\n        if (selectedNode != null) {\n          // make a copy of the node so that we don't modify the source\n          const tempNode = this.UtilService.makeCopyOfJSONObject(selectedNode);\n\n          // check if the node id is already being used in the current project\n          if (this.isNodeIdUsed(tempNode.id)) {\n            // the node id is already being used in the current project\n\n            // get the next available node id\n            const nextAvailableNodeId = this.getNextAvailableNodeId(newNodeIds);\n\n            // change the node id of the node we are importing\n            tempNode.id = nextAvailableNodeId;\n          }\n\n          // get the components in the node\n          const tempComponents = tempNode.components;\n\n          if (tempComponents != null) {\n            for (let tempComponent of tempComponents) {\n              if (tempComponent != null) {\n                if (this.isComponentIdUsed(tempComponent.id)) {\n                  // we are already using the component id so we will need to change it\n\n                  const newComponentId = this.getUnusedComponentId();\n                  tempComponent.id = newComponentId;\n                }\n              }\n            }\n          }\n\n          // clear the constraints\n          tempNode.constraints = [];\n\n          // add the new node and new node id to our arrays\n          newNodes.push(tempNode);\n          newNodeIds.push(tempNode.id);\n        }\n      }\n\n      if (nodeIdToInsertInsideOrAfter == null) {\n        /*\n         * the place to put the new node has not been specified so we\n         * will place it in the inactive steps section\n         */\n\n        /*\n         * Insert the node after the last inactive node. If there\n         * are no inactive nodes it will just be placed in the\n         * inactive nodes section. In the latter case we do this by\n         * setting nodeIdToInsertInsideOrAfter to 'inactiveSteps'.\n         */\n        if (inactiveNodes != null && inactiveNodes.length > 0) {\n          nodeIdToInsertInsideOrAfter = inactiveNodes[inactiveNodes.length - 1];\n        } else {\n          nodeIdToInsertInsideOrAfter = 'inactiveSteps';\n        }\n      }\n\n      for (let newNode of newNodes) {\n        if (this.isGroupNode(nodeIdToInsertInsideOrAfter)) {\n          // we want to make the new step the first step in the given activity\n          this.createNodeInside(newNode, nodeIdToInsertInsideOrAfter);\n        } else {\n          // we want to place the new step after the given step\n          this.createNodeAfter(newNode, nodeIdToInsertInsideOrAfter);\n        }\n\n        /*\n         * Update the nodeIdToInsertInsideOrAfter so that when we are\n         * importing multiple steps, the steps get placed in the correct\n         * order.\n         *\n         * Example\n         * We are importing nodeA and nodeB and want to place them after\n         * nodeX. Therefore we want the order to be\n         *\n         * nodeX\n         * nodeA\n         * nodeB\n         *\n         * This means after we add nodeA, we must update\n         * nodeIdToInsertInsideOrAfter to be nodeA so that when we add\n         * nodeB, it will be placed after nodeA.\n         */\n        nodeIdToInsertInsideOrAfter = newNode.id;\n      }\n      return newNodes;\n    });\n  }\n\n  /**\n   * Create a node inside the group\n   * @param node the new node\n   * @param nodeId the node id of the group to create the node in\n   */\n  createNodeInside(node, nodeId) {\n    if (nodeId == 'inactiveNodes') {\n      this.addInactiveNode(node);\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else if (nodeId == 'inactiveGroups') {\n      this.addInactiveNode(node);\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      this.setIdToNode(node.id, node);\n      if (this.isInactive(nodeId)) {\n        // we are creating an inactive node\n        this.addInactiveNodeInsertInside(node, nodeId);\n      } else {\n        // we are creating an active node\n        this.addNode(node);\n        this.insertNodeInsideInTransitions(node.id, nodeId);\n        this.insertNodeInsideInGroups(node.id, nodeId);\n      }\n    }\n  }\n\n  /**\n   * Create a node after the given node id\n   * @param node the new node\n   * @param nodeId the node to add after\n   */\n  createNodeAfter(node, nodeId) {\n    if (this.isInactive(nodeId)) {\n      // we are adding the node after a node that is inactive\n\n      this.addInactiveNode(node, nodeId);\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      // we are adding the node after a node that is active\n\n      this.addNode(node);\n      this.setIdToNode(node.id, node);\n      this.insertNodeAfterInGroups(node.id, nodeId);\n      this.insertNodeAfterInTransitions(node, nodeId);\n    }\n\n    if (this.isGroupNode(node.id)) {\n      /*\n       * we are creating a group node so we will update/create the\n       * transitions that traverse from the previous group to this group\n       */\n      // TODO geoffreykwan oldToGroupIds is declared here and below. Refactor\n      var oldToGroupIds = [];\n\n      const transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n      if (transitionsFromGroup != null) {\n        /*\n         * loop through all the transitions that come out of the previous group\n         * and get the node ids that the group transitions to\n         */\n        for (let transitionFromGroup of transitionsFromGroup) {\n          if (transitionFromGroup != null) {\n            const toNodeId = transitionFromGroup.to;\n            if (toNodeId != null) {\n              oldToGroupIds.push(toNodeId);\n            }\n          }\n        }\n      }\n\n      const fromGroupId = nodeId;\n      // TODO geoffreykwan oldToGroupIds is declared here and above. Refactor\n      var oldToGroupIds = oldToGroupIds;\n      const newToGroupId = node.id;\n\n      /*\n       * make the transitions point to the new group and make the new\n       * group transition to the old group\n       */\n      this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n    }\n  }\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesAfter(nodeIds, nodeId) {\n    const newNodes = [];\n    for (let nodeIdToCopy of nodeIds) {\n      const newNode = this.copyNode(nodeIdToCopy);\n      const newNodeId = newNode.id;\n      this.createNodeAfter(newNode, nodeId);\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n    return newNodes;\n  }\n}\n\nAuthoringToolProjectService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'UtilService'\n];\n\nexport default AuthoringToolProjectService;\n"]}