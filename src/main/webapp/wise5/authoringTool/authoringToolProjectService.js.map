{"version":3,"sources":["authoringToolProjectService.es6"],"names":["AuthoringToolProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","$translate","projectId","project","id","httpParams","method","url","getConfigParam","then","result","otherAuthors","data","resolve","reject","getProjectId","nodeId","componentId","component","getComponentByNodeIdAndComponentId","componentType","type","componentService","get","getPossibleTransitionCriteria","copyProjectURL","headers","$","param","projectJSONString","commitMessage","registerNewProjectURL","JSON","parse","e","Error","commitProjectURL","components","getComponentsByNodeId","c","length","tempComponent","title","getNextAvailableGroupId","startId","ids","getNextAvailableNodeId","constraints","transitionLogic","transitions","showSaveButton","showSubmitButton","nodeIds","newNodes","n","nodeIdToCopy","newNode","copyNode","newNodeId","createNodeInside","createNodeAfter","parseProject","push","selectedNodes","fromProjectId","toProjectId","nodeIdToInsertInsideOrAfter","steps","angular","toJson","inactiveNodes","getInactiveNodes","newNodeIds","selectedNode","tempNode","makeCopyOfJSONObject","isNodeIdUsed","nextAvailableNodeId","tempComponents","isComponentIdUsed","newComponentId","getUnusedComponentId","isGroupNode","node","addInactiveNode","setIdToNode","setIdToElement","isInactive","addInactiveNodeInsertInside","addNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","insertNodeAfterInGroups","insertNodeAfterInTransitions","oldToGroupIds","transitionsFromGroup","getTransitionsByFromNodeId","transitionFromGroup","toNodeId","to","fromGroupId","newToGroupId","updateTransitionsForInsertingGroup","inactiveNode","nodes","field","value","getNodeById","fromNodeId","transition","nodeIdAfter","orderedItems","idToOrder","foundNodeId","item","tempNodeId","$key","targetNodeId","makeThisNodeNotVisibleConstraint","getNextAvailableConstraintIdForNodeId","action","targetId","removalConditional","removalCriteria","name","params","makeThisNodeNotVisitableConstraint","all","html","rubric","getTransitionLogicByFromNodeId","criteria","singleCriteria","howToChooseAmongAvailablePaths","flattenedNodeIds","getFlattenedProjectAsNodeIds","indexOfNodeId","indexOf","indexOfPreviousNodeId","scriptFilename","script","numberOfRubrics","getNumberOfRubricsByNodeId","componentIds","insertAfterComponentId","newComponents","newComponentIds","newComponent","copyComponent","insertPosition","getComponentPositionByNodeIdAndComponentId","splice","componentIdsToSkip","importProjectId","currentComponents","nodeIdToBranchPathLetter","i","idToNode","service","componentUsesSaveButton","nodeRemoved","activeNodes","a","activeNode","removeChildNodesFromActiveNodes","childId","removeNodeFromActiveNodes","nodeIdToInsertAfter","isActive","clearTransitionsFromNode","isNodeIdToInsertAfterNotSpecified","insertNodeAtBeginingOfInactiveNodes","insertNodeAfterSpecifiedNode","inactiveGroupNodes","addGroupChildNodesToInactive","inactiveStepNodes","parentGroup","getParentGroup","nodeIdToInsertInside","removeNodeFromInactiveNodes","childIds","childNode","inactiveNodesIndex","inactiveStepNodesIndex","inactiveGroups","getInactiveGroupNodes","added","inactiveGroup","$inject"],"mappings":"AAAA;;;;;;;;AACA;;;;;;;;;;;;IAEMA,2B;;;AACJ,uCAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,SAA5B,EAAuCC,EAAvC,EAA2CC,UAA3C,EAAuDC,aAAvD,EAAsEC,WAAtE,EAAmF;AAAA;;AAAA,qJAC3EN,OAD2E,EAClEC,KADkE,EAC3DC,SAD2D,EAChDC,EADgD,EAC5CC,UAD4C,EAChCC,aADgC,EACjBC,WADiB;AAElF;;AAED;;;;;;;4CAGwB;AACtB,aAAO;AACL,iBAAS,CACP;AACE,gBAAM,QADR;AAEE,kBAAQ,OAFV;AAGE,mBAAS,QAHX;AAIE,qBAAW,QAJb;AAKE,iBAAO,CACL,QADK;AALT,SADO,EAUP;AACE,gBAAM,QADR;AAEE,kBAAQ,OAFV;AAGE,mBAAS,KAAKC,UAAL,CAAgB,gBAAhB,CAHX;AAIE,qBAAW,EAJb;AAKE,iBAAO,EALT;AAOE,mBAAS;AACP,uBAAW;AACT,uBAAS,SADA;AAET,sBAAQ,MAFC;AAGT,yBAAW,gBAHF;AAIT,0BAAY;AAJH;AADJ;AAPX,SAVO,CADJ;AA4BL,uBAAe,EA5BV;AA6BL,wBAAgB,QA7BX;AA8BL,uBAAe,QA9BV;AA+BL,0BAAkB,QA/Bb;AAgCL,kBAAU;AACR,sBAAY;AADJ,SAhCL;AAmCL,oBAAY;AACV,mBAAS;AADC,SAnCP;AAsCL,oBAAY;AACV,qBAAW,KADD;AAEV,mBAAS,KAAKA,UAAL,CAAgB,UAAhB,CAFC;AAGV,0BAAgB,IAHN;AAIV,uBAAa;AACX,oBAAQ;AACN,sBAAQ,MADF;AAEN,yBAAW,IAFL;AAGN,4BAAc,IAHR;AAIN,+BAAiB,IAJX;AAKN,gCAAkB,IALZ;AAMN,sCAAwB,IANlB;AAON,wCAA0B,KAPpB;AAQN,uBAAS;AACP,4BAAY,KAAKA,UAAL,CAAgB,gBAAhB,CADL;AAEP,0BAAU,KAAKA,UAAL,CAAgB,iBAAhB,CAFH;AAGP,wBAAQ,KAAKA,UAAL,CAAgB,OAAhB,CAHD;AAIP,wBAAQ,MAJD;AAKP,yBAAS;AALF;AARH,aADG;AAiBX,wBAAY;AACV,sBAAQ,UADE;AAEV,yBAAW,KAFD;AAGV,4BAAc,IAHJ;AAIV,gCAAkB,IAJR;AAKV,sCAAwB,IALd;AAMV,uBAAS;AACP,4BAAY,KAAKA,UAAL,CAAgB,qBAAhB,CADL;AAEP,0BAAU,KAAKA,UAAL,CAAgB,sBAAhB,CAFH;AAGP,wBAAQ,KAAKA,UAAL,CAAgB,WAAhB,CAHD;AAIP,wBAAQ,WAJD;AAKP,yBAAS;AALF;AANC,aAjBD;AA+BX,sBAAU;AACR,yBAAW,KADH;AAER,uBAAS;AACP,4BAAY,KAAKA,UAAL,CAAgB,kBAAhB,CADL;AAEP,0BAAU,KAAKA,UAAL,CAAgB,mBAAhB,CAFH;AAGP,wBAAQ,KAAKA,UAAL,CAAgB,QAAhB,CAHD;AAIP,wBAAQ,YAJD;AAKP,yBAAS;AALF,eAFD;AASR,uBAAS,CACP;AACE,4BAAY,aADd;AAEE,yBAAS,KAAKA,UAAL,CAAgB,cAAhB,CAFX;AAGE,+BAAe,KAAKA,UAAL,CAAgB,oBAAhB,CAHjB;AAIE,0BAAU,KAAKA,UAAL,CAAgB,eAAhB,CAJZ;AAKE,2BAAW,KAAKA,UAAL,CAAgB,gBAAhB;AALb,eADO;AATD;AA/BC;AAJH,SAtCP;AA8FL,yBAAiB;AA9FZ,OAAP;AAgGD;;AAED;;;;;;;+CAI2C;AAAA,UAAlBC,SAAkB,uEAAN,IAAM;;AACzC,UAAIA,aAAa,IAAjB,EAAuB;AACrB,YAAI,KAAKC,OAAL,IAAgB,IAApB,EAA0B;AACxBD,sBAAY,KAAKC,OAAL,CAAaC,EAAzB;AACD,SAFD,MAEO;AACL;AACD;AACF;;AAED,UAAMC,aAAa;AACjBC,gBAAQ,MADS;AAEjBC,aAAK,KAAKR,aAAL,CAAmBS,cAAnB,CAAkC,uBAAlC,IAA6DN;AAFjD,OAAnB;;AAKA,aAAO,KAAKP,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC7C,YAAIC,eAAeD,OAAOE,IAA1B;AACA,eAAOD,YAAP;AACD,OAHM,CAAP;AAID;;AAED;;;;;;;6CAIyC;AAAA;;AAAA,UAAlBT,SAAkB,uEAAN,IAAM;;AACvC,aAAO,KAAKL,EAAL,CAAQ,UAACgB,OAAD,EAAUC,MAAV,EAAqB;AAClC,YAAIZ,aAAa,IAAjB,EAAuB;AACrB,cAAI,OAAKC,OAAL,IAAgB,IAApB,EAA0B;AACxBD,wBAAY,OAAKH,aAAL,CAAmBgB,YAAnB,EAAZ;AACD,WAFD,MAEO;AACLF;AACD;AACF;AACD,YAAMR,aAAa;AACjBC,kBAAQ,MADS;AAEjBC,eAAK,OAAKR,aAAL,CAAmBS,cAAnB,CAAkC,qBAAlC,IAA2DN;AAF/C,SAAnB;AAIA,eAAKP,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,YAAM;AAChCI;AACD,SAFD;AAGD,OAfM,CAAP;AAgBD;;AAED;;;;;;kDAG8BG,M,EAAQC,W,EAAa;AACjD,UAAIC,YAAY,KAAKC,kCAAL,CAAwCH,MAAxC,EAAgDC,WAAhD,CAAhB;AACA,UAAIC,aAAa,IAAjB,EAAuB;AACrB,YAAIE,gBAAgBF,UAAUG,IAA9B;AACA,YAAIC,mBAAmB,KAAK1B,SAAL,CAAe2B,GAAf,CAAmBH,gBAAgB,SAAnC,CAAvB;AACA,YAAIE,iBAAiBE,6BAArB,EAAoD;AAClD,iBAAOF,iBAAiBE,6BAAjB,CAA+CR,MAA/C,EAAuDC,WAAvD,EAAoEC,SAApE,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,EAAP;AACD;AACF,OARD,MAQO;AACL,eAAO,EAAP;AACD;AACF;;;;;AAED;;;;gCAIYhB,S,EAAW;AACrB,UAAMuB,iBAAiB,KAAK1B,aAAL,CAAmBS,cAAnB,CAAkC,gBAAlC,CAAvB;AACA,UAAIiB,kBAAkB,IAAtB,EAA4B;AAC1B,eAAO,IAAP;AACD;;AAED,UAAMpB,aAAa;AACjBC,gBAAQ,MADS;AAEjBC,aAAKkB,iBAAiB,GAAjB,GAAuBvB,SAFX;AAGjBwB,iBAAU,EAAC,gBAAgB,mCAAjB,EAHO;AAIjBd,cAAMe,EAAEC,KAAF,CAAQ,EAAR;AAJW,OAAnB;;AAOA,aAAO,KAAKjC,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC7C,eAAOA,OAAOE,IAAd,CAD6C,CACxB;AACtB,OAFM,CAAP;AAGD;;;;;AAED;;;;;;uCAMmBiB,iB,EAAuC;AAAA,UAApBC,aAAoB,uEAAJ,EAAI;;AACxD,UAAMC,wBAAwB,KAAKhC,aAAL,CAAmBS,cAAnB,CAAkC,uBAAlC,CAA9B;AACA,UAAIuB,yBAAyB,IAA7B,EAAmC;AACjC,eAAO,IAAP;AACD;;AAED,UAAI;AACFC,aAAKC,KAAL,CAAWJ,iBAAX;AACD,OAFD,CAEE,OAAOK,CAAP,EAAU;AACV,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,UAAM9B,aAAa;AACjBC,gBAAQ,MADS;AAEjBC,aAAKwB,qBAFY;AAGjBL,iBAAS,EAAC,gBAAgB,mCAAjB,EAHQ;AAIjBd,cAAMe,EAAEC,KAAF,CAAQ;AACZE,yBAAeA,aADH;AAEZD,6BAAmBA;AAFP,SAAR;AAJW,OAAnB;;AAUA,aAAO,KAAKlC,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC7C,YAAMR,YAAYQ,OAAOE,IAAzB;AACA,eAAOV,SAAP;AACD,OAHM,CAAP;AAID;;;;;AAED;;;uCAGmB;AACjB,UAAMkC,mBAAmB,KAAKrC,aAAL,CAAmBS,cAAnB,CAAkC,kBAAlC,CAAzB;AACA,aAAO,KAAKb,KAAL,CAAW;AAChBY,aAAK6B,gBADW;AAEhB9B,gBAAQ;AAFQ,OAAX,EAGJG,IAHI,CAGC,UAACC,MAAD,EAAY;AAClB,eAAOA,OAAOE,IAAd;AACD,OALM,CAAP;AAMD;;;;;AAED;;;;;;qCAMiBI,M,EAAQC,W,EAAaC,S,EAAW;AAC/C,UAAIF,UAAU,IAAV,IAAkBC,eAAe,IAAjC,IAAyCC,aAAa,IAA1D,EAAgE;AAC9D,YAAMmB,aAAa,KAAKC,qBAAL,CAA2BtB,MAA3B,CAAnB;AACA,YAAIqB,cAAc,IAAlB,EAAwB;AACtB,eAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,WAAWG,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,gBAAME,gBAAgBJ,WAAWE,CAAX,CAAtB;AACA,gBAAIE,iBAAiB,IAArB,EAA2B;AACzB,kBAAIA,cAAcrC,EAAd,KAAqBa,WAAzB,EAAsC;AACpCoB,2BAAWE,CAAX,IAAgBrB,SAAhB;AACA;AACD;AACF;AACF;AACF;AACF;AACF;;;;;AAED;;;;;gCAKYwB,K,EAAO;AACjB,aAAO;AACLtC,YAAI,KAAKuC,uBAAL,EADC;AAELtB,cAAM,OAFD;AAGLqB,eAAOA,KAHF;AAILE,iBAAS,EAJJ;AAKLC,aAAK;AALA,OAAP;AAOD;;;;;AAED;;;;;+BAKWH,K,EAAO;AAChB,aAAO;AACLtC,YAAI,KAAK0C,sBAAL,EADC;AAELJ,eAAOA,KAFF;AAGLrB,cAAM,MAHD;AAIL0B,qBAAa,EAJR;AAKLC,yBAAiB;AACfC,uBAAa;AADE,SALZ;AAQLC,wBAAgB,KARX;AASLC,0BAAkB,KATb;AAULd,oBAAY;AAVP,OAAP;AAYD;;;;;AAED;;;;;oCAKgBe,O,EAASpC,M,EAAQ;AAC/B,UAAMqC,WAAW,EAAjB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,QAAQZ,MAA5B,EAAoCc,GAApC,EAAyC;AACvC,YAAMC,eAAeH,QAAQE,CAAR,CAArB;AACA,YAAME,UAAU,KAAKC,QAAL,CAAcF,YAAd,CAAhB;AACA,YAAMG,YAAYF,QAAQpD,EAA1B;;AAEA,YAAIkD,KAAK,CAAT,EAAY;AACV;AACA;AACA,eAAKK,gBAAL,CAAsBH,OAAtB,EAA+BxC,MAA/B;AACD,SAJD,MAIO;AACL;AACA;AACA,eAAK4C,eAAL,CAAqBJ,OAArB,EAA8BxC,MAA9B;AACD;;AAED;AACAA,iBAAS0C,SAAT;AACA,aAAKG,YAAL,GAjBuC,CAiBjB;;AAEtBR,iBAASS,IAAT,CAAcN,OAAd;AACD;AACD,aAAOH,QAAP;AACD;;AAED;;;;;;;;;;;;8BASUU,a,EAAeC,a,EAAeC,W,EAAaC,2B,EAA6B;AAAA;;AAChF,UAAM7D,aAAa;AACjBC,gBAAQ,MADS;AAEjBC,aAAK,KAAKR,aAAL,CAAmBS,cAAnB,CAAkC,gBAAlC,CAFY;AAGjBkB,iBAAS,EAAC,gBAAgB,mCAAjB,EAHQ;AAIjBd,cAAMe,EAAEC,KAAF,CAAQ;AACZuC,iBAAOC,QAAQC,MAAR,CAAeN,aAAf,CADK;AAEZC,yBAAeA,aAFH;AAGZC,uBAAaA;AAHD,SAAR;AAJW,OAAnB;;AAWA;;;;;;;;;AASA,aAAO,KAAKtE,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC7CqD,wBAAgBrD,OAAOE,IAAvB;;AAEA,YAAM0D,gBAAgB,OAAKC,gBAAL,EAAtB;AACA,YAAMlB,WAAW,EAAjB;AACA,YAAMmB,aAAa,EAAnB;;AAL6C;AAAA;AAAA;;AAAA;AAO7C,+BAAyBT,aAAzB,8HAAwC;AAAA,gBAA/BU,YAA+B;;AACtC,gBAAIA,gBAAgB,IAApB,EAA0B;AACxB;AACA,kBAAMC,WAAW,OAAK1E,WAAL,CAAiB2E,oBAAjB,CAAsCF,YAAtC,CAAjB;;AAEA;AACA,kBAAI,OAAKG,YAAL,CAAkBF,SAAStE,EAA3B,CAAJ,EAAoC;AAClC;;AAEA;AACA,oBAAMyE,sBAAsB,OAAK/B,sBAAL,CAA4B0B,UAA5B,CAA5B;;AAEA;AACAE,yBAAStE,EAAT,GAAcyE,mBAAd;AACD;;AAED;AACA,kBAAMC,iBAAiBJ,SAASrC,UAAhC;;AAEA,kBAAIyC,kBAAkB,IAAtB,EAA4B;AAAA;AAAA;AAAA;;AAAA;AAC1B,wCAA0BA,cAA1B,mIAA0C;AAAA,wBAAjCrC,aAAiC;;AACxC,wBAAIA,iBAAiB,IAArB,EAA2B;AACzB,0BAAI,OAAKsC,iBAAL,CAAuBtC,cAAcrC,EAArC,CAAJ,EAA8C;AAC5C;;AAEA,4BAAM4E,iBAAiB,OAAKC,oBAAL,EAAvB;AACAxC,sCAAcrC,EAAd,GAAmB4E,cAAnB;AACD;AACF;AACF;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3B;;AAED;AACAN,uBAAS3B,WAAT,GAAuB,EAAvB;;AAEA;AACAM,uBAASS,IAAT,CAAcY,QAAd;AACAF,yBAAWV,IAAX,CAAgBY,SAAStE,EAAzB;AACD;AACF;AA9C4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgD7C,YAAI8D,+BAA+B,IAAnC,EAAyC;AACvC;;;;;AAKA;;;;;;AAMA,cAAII,iBAAiB,IAAjB,IAAyBA,cAAc9B,MAAd,GAAuB,CAApD,EAAuD;AACrD0B,0CAA8BI,cAAcA,cAAc9B,MAAd,GAAuB,CAArC,CAA9B;AACD,WAFD,MAEO;AACL0B,0CAA8B,eAA9B;AACD;AACF;;AAjE4C;AAAA;AAAA;;AAAA;AAmE7C,gCAAoBb,QAApB,mIAA8B;AAAA,gBAArBG,OAAqB;;AAC5B,gBAAI,OAAK0B,WAAL,CAAiBhB,2BAAjB,CAAJ,EAAmD;AACjD;AACA,qBAAKP,gBAAL,CAAsBH,OAAtB,EAA+BU,2BAA/B;AACD,aAHD,MAGO;AACL;AACA,qBAAKN,eAAL,CAAqBJ,OAArB,EAA8BU,2BAA9B;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBAA,0CAA8BV,QAAQpD,EAAtC;AACD;AA9F4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+F7C,eAAOiD,QAAP;AACD,OAhGM,CAAP;AAiGD;;AAED;;;;;;;;qCAKiB8B,I,EAAMnE,M,EAAQ;AAC7B,UAAIA,UAAU,eAAV,IAA6BA,UAAU,gBAA3C,EAA6D;AAC3D,aAAKoE,eAAL,CAAqBD,IAArB;AACA,aAAKE,WAAL,CAAiBF,KAAK/E,EAAtB,EAA0B+E,IAA1B;AACA,aAAKG,cAAL,CAAoBH,KAAK/E,EAAzB,EAA6B+E,IAA7B;AACD,OAJD,MAIO;AACL,aAAKE,WAAL,CAAiBF,KAAK/E,EAAtB,EAA0B+E,IAA1B;AACA,YAAI,KAAKI,UAAL,CAAgBvE,MAAhB,CAAJ,EAA6B;AAC3B;AACA,eAAKwE,2BAAL,CAAiCL,IAAjC,EAAuCnE,MAAvC;AACD,SAHD,MAGO;AACL;AACA,eAAKyE,OAAL,CAAaN,IAAb;AACA,eAAKO,6BAAL,CAAmCP,KAAK/E,EAAxC,EAA4CY,MAA5C;AACA,eAAK2E,wBAAL,CAA8BR,KAAK/E,EAAnC,EAAuCY,MAAvC;AACD;AACF;AACF;;AAED;;;;;;;;oCAKgBmE,I,EAAMnE,M,EAAQ;AAC5B,UAAI,KAAKuE,UAAL,CAAgBvE,MAAhB,CAAJ,EAA6B;AAC3B;;AAEA,aAAKoE,eAAL,CAAqBD,IAArB,EAA2BnE,MAA3B;AACA,aAAKqE,WAAL,CAAiBF,KAAK/E,EAAtB,EAA0B+E,IAA1B;AACA,aAAKG,cAAL,CAAoBH,KAAK/E,EAAzB,EAA6B+E,IAA7B;AACD,OAND,MAMO;AACL;;AAEA,aAAKM,OAAL,CAAaN,IAAb;AACA,aAAKE,WAAL,CAAiBF,KAAK/E,EAAtB,EAA0B+E,IAA1B;AACA,aAAKS,uBAAL,CAA6BT,KAAK/E,EAAlC,EAAsCY,MAAtC;AACA,aAAK6E,4BAAL,CAAkCV,IAAlC,EAAwCnE,MAAxC;AACD;;AAED,UAAI,KAAKkE,WAAL,CAAiBC,KAAK/E,EAAtB,CAAJ,EAA+B;AAC7B;;;;AAIA;AACA,YAAI0F,gBAAgB,EAApB;;AAEA,YAAMC,uBAAuB,KAAKC,0BAAL,CAAgChF,MAAhC,CAA7B;AACA,YAAI+E,wBAAwB,IAA5B,EAAkC;AAChC;;;;AADgC;AAAA;AAAA;;AAAA;AAKhC,kCAAgCA,oBAAhC,mIAAsD;AAAA,kBAA7CE,mBAA6C;;AACpD,kBAAIA,uBAAuB,IAA3B,EAAiC;AAC/B,oBAAMC,WAAWD,oBAAoBE,EAArC;AACA,oBAAID,YAAY,IAAhB,EAAsB;AACpBJ,gCAAchC,IAAd,CAAmBoC,QAAnB;AACD;AACF;AACF;AAZ+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAajC;;AAED,YAAME,cAAcpF,MAApB;AACA;AACA,YAAI8E,gBAAgBA,aAApB;AACA,YAAMO,eAAelB,KAAK/E,EAA1B;;AAEA;;;;AAIA,aAAKkG,kCAAL,CAAwCF,WAAxC,EAAqDN,aAArD,EAAoEO,YAApE;AACD;AACF;;AAED;;;;;;;;mCAKejD,O,EAASpC,M,EAAQ;AAC9B,UAAMqC,WAAW,EAAjB;AAD8B;AAAA;AAAA;;AAAA;AAE9B,8BAAyBD,OAAzB,mIAAkC;AAAA,cAAzBG,YAAyB;;AAChC,cAAMC,UAAU,KAAKC,QAAL,CAAcF,YAAd,CAAhB;AACA,cAAMG,YAAYF,QAAQpD,EAA1B;AACA,eAAKwD,eAAL,CAAqBJ,OAArB,EAA8BxC,MAA9B;;AAEA;AACAA,mBAAS0C,SAAT;AACA,eAAKG,YAAL,GAPgC,CAOV;;AAEtBR,mBAASS,IAAT,CAAcN,OAAd;AACD;AAZ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa9B,aAAOH,QAAP;AACD;;AAED;;;;;;;;+BAKWrC,M,EAAQ;AACjB,UAAIA,UAAU,IAAV,IAAkB,KAAKb,OAAL,CAAamE,aAAb,IAA8B,IAApD,EAA0D;AAAA;AAAA;AAAA;;AAAA;AACxD,gCAAyB,KAAKnE,OAAL,CAAamE,aAAtC,mIAAqD;AAAA,gBAA5CiC,YAA4C;;AACnD,gBAAIA,gBAAgB,IAApB,EAA0B;AACxB,kBAAIvF,WAAWuF,aAAanG,EAA5B,EAAgC;AAC9B,uBAAO,IAAP;AACD;AACF;AACF;AAPuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQzD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;iCAKaY,M,EAAQ;AAAA;AAAA;AAAA;;AAAA;AACnB,8BAAiB,KAAKb,OAAL,CAAaqG,KAA9B,mIAAqC;AAAA,cAA5BrB,IAA4B;;AACnC,cAAIA,QAAQ,IAAZ,EAAkB;AAChB,gBAAInE,WAAWmE,KAAK/E,EAApB,EAAwB;AACtB,qBAAO,IAAP;AACD;AACF;AACF;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AASnB,8BAAiB,KAAKD,OAAL,CAAamE,aAA9B,mIAA6C;AAAA,cAApCa,KAAoC;;AAC3C,cAAIA,SAAQ,IAAZ,EAAkB;AAChB,gBAAInE,WAAWmE,MAAK/E,EAApB,EAAwB;AACtB,qBAAO,IAAP;AACD;AACF;AACF;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBnB,aAAO,KAAP;AACD;;AAED;;;;;;4CAGwBY,M,EAAQyF,K,EAAOC,K,EAAO;AAC5C,UAAI1F,UAAU,IAAV,IAAkByF,SAAS,IAA/B,EAAqC;AACnC,YAAMtB,OAAO,KAAKwB,WAAL,CAAiB3F,MAAjB,CAAb;AACA,YAAImE,QAAQ,IAAZ,EAAkB;AAChB,cAAMnC,kBAAkBmC,KAAKnC,eAA7B;AACA,cAAIA,mBAAmB,IAAvB,EAA6B;AAC3BA,4BAAgByD,KAAhB,IAAyBC,KAAzB;AACD;AACF;AACF;AACF;;AAED;;;;;;;;kCAKcE,U,EAAYV,Q,EAAU;AAClC,UAAMf,OAAO,KAAKwB,WAAL,CAAiBC,UAAjB,CAAb;AACA,UAAIzB,QAAQ,IAAZ,EAAkB;AAChB,YAAMnC,kBAAkBmC,KAAKnC,eAA7B;AACA,YAAIA,mBAAmB,IAAvB,EAA6B;AAC3B,cAAIC,cAAcD,gBAAgBC,WAAlC;AACA,cAAIA,eAAe,IAAf,IAAuBA,YAAYT,MAAZ,IAAsB,CAAjD,EAAoD;AAClDQ,4BAAgBC,WAAhB,GAA8B,EAA9B;AACA,gBAAM4D,aAAa,EAAnB;AACA7D,4BAAgBC,WAAhB,CAA4Ba,IAA5B,CAAiC+C,UAAjC;AACA5D,0BAAcD,gBAAgBC,WAA9B;AACD;;AAED,cAAIA,eAAe,IAAf,IAAuBA,YAAYT,MAAZ,GAAqB,CAAhD,EAAmD;AACjD;AACA,gBAAMqE,cAAa5D,YAAY,CAAZ,CAAnB;AACA,gBAAI4D,eAAc,IAAlB,EAAwB;AACtBA,0BAAWV,EAAX,GAAgBD,QAAhB;AACD;AACF;AACF;AACF;AACF;;AAED;;;;;;;;mCAKelF,M,EAAQ;AACrB,UAAI8F,cAAc,IAAlB;;AAEA;AACA,UAAMC,eAAe,KAAKrH,OAAL,CAAa,SAAb,EAAwB,KAAKA,OAAL,CAAa,SAAb,EAAwB,KAAKsH,SAA7B,CAAxB,EAAiE,OAAjE,CAArB;;AAEA,UAAID,gBAAgB,IAApB,EAA0B;AACxB,YAAIE,cAAc,KAAlB;AADwB;AAAA;AAAA;;AAAA;AAExB,gCAAiBF,YAAjB,mIAA+B;AAAA,gBAAtBG,IAAsB;;AAC7B,gBAAIA,QAAQ,IAAZ,EAAkB;AAChB,kBAAMC,aAAaD,KAAKE,IAAxB;;AAEA;AACA,kBAAIH,WAAJ,EAAiB;AACf;;;;AAIAH,8BAAcK,UAAd;AACA;AACD,eAPD,MAOO;AACL,oBAAInG,UAAUmG,UAAd,EAA0B;AACxB;AACAF,gCAAc,IAAd;AACD;AACF;AACF;AACF;AArBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBzB;AACD,aAAOH,WAAP;AACD;;AAED;;;;;;;;;kDAM8BO,Y,EAAcT,U,EAAYV,Q,EAAU;AAChE,UAAImB,gBAAgB,IAApB,EAA0B;AACxB,YAAMlC,OAAO,KAAKwB,WAAL,CAAiBU,YAAjB,CAAb;;AAEA,YAAIlC,QAAQ,IAAZ,EAAkB;AAChB;;;;AAIA,cAAMmC,mCAAmC;AACvClH,gBAAI,KAAKmH,qCAAL,CAA2CF,YAA3C,CADmC;AAEvCG,oBAAQ,wBAF+B;AAGvCC,sBAAUJ,YAH6B;AAIvCK,gCAAoB,KAJmB;AAKvCC,6BAAiB,CAAC;AAChBC,oBAAM,iBADU;AAEhBC,sBAAQ;AACNjB,4BAAYA,UADN;AAENV,0BAAUA;AAFJ;AAFQ,aAAD;AALsB,WAAzC;AAaAf,eAAKpC,WAAL,CAAiBe,IAAjB,CAAsBwD,gCAAtB;;AAEA;;;;AAIA,cAAMQ,qCAAqC;AACzC1H,gBAAI,KAAKmH,qCAAL,CAA2CF,YAA3C,CADqC;AAEzCG,oBAAQ,0BAFiC;AAGzCC,sBAAUJ,YAH+B;AAIzCK,gCAAoBK,GAJqB;AAKzCJ,6BAAiB,CAAC;AAChBC,oBAAM,iBADU;AAEhBC,sBAAQ;AACNjB,4BAAYA,UADN;AAENV,0BAAUA;AAFJ;AAFQ,aAAD;AALwB,WAA3C;AAaAf,eAAKpC,WAAL,CAAiBe,IAAjB,CAAsBgE,kCAAtB;AACD;AACF;AACF;;AAED;;;;;;qCAGiBE,I,EAAM;AACrB,WAAK7H,OAAL,CAAa8H,MAAb,GAAsBD,IAAtB;AACD;;AAED;;;;;;;;2CAKuBhH,M,EAAQ;AAC7B,UAAIiC,cAAc,KAAK+C,0BAAL,CAAgChF,MAAhC,CAAlB;AACA,UAAIiC,eAAe,IAAnB,EAAyB;AACvB,eAAOA,YAAYT,MAAnB;AACD;AACD,aAAO,CAAP;AACD;;AAED;;;;;;;;;;iDAO6BxB,M,EAAQ;AACnC,UAAIgC,kBAAkB,KAAKkF,8BAAL,CAAoClH,MAApC,CAAtB;AACA,UAAIiC,cAAcD,gBAAgBC,WAAlC;;AAEA;AAJmC;AAAA;AAAA;;AAAA;AAKnC,+BAAuBA,WAAvB,wIAAoC;AAAA,cAA3B4D,UAA2B;;AAClC,cAAIA,WAAWsB,QAAX,IAAuB,IAAvB,IAA+BtB,WAAWsB,QAAX,CAAoB3F,MAApB,GAA6B,CAAhE,EAAmE;AAAA;AAAA;AAAA;;AAAA;AACjE,qCAA2BqE,WAAWsB,QAAtC,wIAAgD;AAAA,oBAAvCC,cAAuC;;AAC9C,oBAAIA,eAAeR,IAAf,IAAuB,cAA3B,EAA2C;AACzC,yBAAO,iBAAP;AACD,iBAFD,MAEO,IAAIQ,eAAeR,IAAf,IAAuB,OAA3B,EAAoC;AACzC,yBAAO,OAAP;AACD;AACF;AAPgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlE;AACF;;AAED;;;;AAjBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBnC,UAAI5E,gBAAgBqF,8BAAhB,IAAkD,aAAtD,EAAqE;AACnE,eAAO,cAAP;AACD,OAFD,MAEO,IAAIrF,gBAAgBqF,8BAAhB,IAAkD,QAAtD,EAAgE;AACrE,eAAO,mBAAP;AACD;AACF;;AAED;;;;;;;;sCAKkBrH,M,EAAQ;AACxB,UAAMsH,mBAAmB,KAAKC,4BAAL,EAAzB;AACA,UAAID,oBAAoB,IAAxB,EAA8B;AAC5B,YAAME,gBAAgBF,iBAAiBG,OAAjB,CAAyBzH,MAAzB,CAAtB;AACA,YAAIwH,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,cAAME,wBAAwBF,gBAAgB,CAA9C;AACA,iBAAOF,iBAAiBI,qBAAjB,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;6CAIyBC,c,EAAgB;AACvC,WAAKxI,OAAL,CAAayI,MAAb,GAAsBD,cAAtB;AACD;;AAED;;;;;;+CAG2B;AACzB,UAAI,KAAKxI,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAayI,MAAb,IAAuB,IAAnD,EAAyD;AACvD,eAAO,KAAKzI,OAAL,CAAayI,MAApB;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;kCAKc5H,M,EAAQ;AACpB,UAAI6H,kBAAkB,KAAKC,0BAAL,CAAgC9H,MAAhC,CAAtB;AACA,UAAI6H,kBAAkB,CAAtB,EAAyB;AACvB,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;;;2CAQuB7H,M,EAAQ+H,Y,EAAcC,sB,EAAwB;AACnE,UAAM7D,OAAO,KAAKwB,WAAL,CAAiB3F,MAAjB,CAAb;AACA,UAAMiI,gBAAgB,EAAtB;AACA,UAAMC,kBAAkB,EAAxB;AAHmE;AAAA;AAAA;;AAAA;AAInE,+BAAwBH,YAAxB,wIAAsC;AAAA,cAA7B9H,WAA6B;;AACpC,cAAMkI,gBACJ,KAAKC,aAAL,CAAmBpI,MAAnB,EAA2BC,WAA3B,EAAwCiI,eAAxC,CADF;AAEAD,wBAAcnF,IAAd,CAAmBqF,aAAnB;AACAD,0BAAgBpF,IAAhB,CAAqBqF,cAAa/I,EAAlC;AACD;AATkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWnE,UAAMiC,aAAa8C,KAAK9C,UAAxB;AACA,UAAIA,cAAc,IAAlB,EAAwB;AACtB,YAAIgH,iBAAiB,CAArB;AACA,YAAIL,0BAA0B,IAA9B,EAAoC;AAClC;AACAK,2BAAiB,CAAjB;AACD,SAHD,MAGO;AACL;AACAA,2BAAiB,KAAKC,0CAAL,CAAgDtI,MAAhD,EAAwDgI,sBAAxD,IAAkF,CAAnG;AACD;;AARqB;AAAA;AAAA;;AAAA;AAUtB,iCAAyBC,aAAzB,wIAAwC;AAAA,gBAA/BE,YAA+B;;AACtC9G,uBAAWkH,MAAX,CAAkBF,cAAlB,EAAkC,CAAlC,EAAqCF,YAArC;;AAEA;;;;AAIAE,8BAAkB,CAAlB;AACD;AAlBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBvB;AACD,aAAOJ,aAAP;AACD;;AAED;;;;;;;;;;;kCAQcjI,M,EAAQC,W,EAAauI,kB,EAAoB;AACrD,UAAMtI,YAAY,KAAKC,kCAAL,CAAwCH,MAAxC,EAAgDC,WAAhD,CAAlB;AACA,UAAMkI,eAAe,KAAKnJ,WAAL,CAAiB2E,oBAAjB,CAAsCzD,SAAtC,CAArB;AACA,UAAM8D,iBAAiB,KAAKC,oBAAL,CAA0BuE,kBAA1B,CAAvB;AACAL,mBAAa/I,EAAb,GAAkB4E,cAAlB;AACA,aAAOmE,YAAP;AACD;;AAED;;;;;;;;;;;;;qCAUiB9G,U,EAAYoH,e,EAAiBzI,M,EAAQgI,sB,EAAwB;AAAA;;AAC5E,UAAIC,gBAAgB,EAApB;AACA,UAAMC,kBAAkB,EAAxB;;AAEA;;;;AAJ4E;AAAA;AAAA;;AAAA;AAQ5E,+BAAsB7G,UAAtB,wIAAkC;AAAA,cAAzBnB,SAAyB;;AAChC,cAAIA,aAAa,IAAjB,EAAuB;AACrB,gBAAMiI,eAAe,KAAKnJ,WAAL,CAAiB2E,oBAAjB,CAAsCzD,SAAtC,CAArB;AACA,gBAAI8D,iBAAiBmE,aAAa/I,EAAlC;;AAEA,gBAAI,KAAK2E,iBAAL,CAAuBC,cAAvB,CAAJ,EAA4C;AAC1C;AACAA,+BAAiB,KAAKC,oBAAL,CAA0BiE,eAA1B,CAAjB;AACAC,2BAAa/I,EAAb,GAAkB4E,cAAlB;AACD;;AAEDiE,0BAAcnF,IAAd,CAAmBqF,YAAnB;AACAD,4BAAgBpF,IAAhB,CAAqBkB,cAArB;AACD;AACF;AAtB2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwB5E,UAAM3E,aAAa;AACjBC,gBAAQ,MADS;AAEjBC,aAAK,KAAKR,aAAL,CAAmBS,cAAnB,CAAkC,gBAAlC,CAFY;AAGjBkB,iBAAS,EAAC,gBAAgB,mCAAjB,EAHQ;AAIjBd,cAAMe,EAAEC,KAAF,CAAQ;AACZuC,iBAAOC,QAAQC,MAAR,CAAe4E,aAAf,CADK;AAEZjF,yBAAeyF,eAFH;AAGZxF,uBAAc,KAAKlE,aAAL,CAAmBS,cAAnB,CAAkC,WAAlC;AAHF,SAAR;AAJW,OAAnB;;AAWA;;;;;;;;;AASA,aAAO,KAAKb,KAAL,CAAWU,UAAX,EAAuBI,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC7CuI,wBAAgBvI,OAAOE,IAAvB;AACA,YAAMuE,OAAO,OAAKwB,WAAL,CAAiB3F,MAAjB,CAAb;AACA,YAAM0I,oBAAoBvE,KAAK9C,UAA/B;AACA,YAAIgH,iBAAiB,CAArB;;AAEA,YAAIL,0BAA0B,IAA9B,EAAoC;AAClC;AACAK,2BAAiB,CAAjB;AACD,SAHD,MAGO;AACL;AACAA,2BAAiB,OAAKC,0CAAL,CAAgDtI,MAAhD,EAAwDgI,sBAAxD,IAAkF,CAAnG;AACD;;AAZ4C;AAAA;AAAA;;AAAA;AAc7C,iCAAyBC,aAAzB,wIAAwC;AAAA,gBAA/BE,YAA+B;;AACtC;AACAO,8BAAkBH,MAAlB,CAAyBF,cAAzB,EAAyC,CAAzC,EAA4CF,YAA5C;;AAEA;;;;AAIAE,8BAAkB,CAAlB;AACD;AAvB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwB7C,eAAOJ,aAAP;AACD,OAzBM,CAAP;AA0BD;;AAED;;;;;;;;;wCAMoBjI,M,EAAQ;AAC1B,aAAO,KAAK2I,wBAAL,CAA8B3I,MAA9B,CAAP;AACD;;AAED;;;;;;;;;4BAMQA,M,EAAQmE,I,EAAM;AACpB,UAAInE,UAAU,IAAV,IAAkBmE,QAAQ,IAA9B,EAAoC;AAClC,aAAK,IAAI7B,IAAI,CAAb,EAAgBA,IAAI,KAAKnD,OAAL,CAAaqG,KAAb,CAAmBhE,MAAvC,EAA+Cc,GAA/C,EAAoD;AAClD,cAAIoB,WAAW,KAAKvE,OAAL,CAAaqG,KAAb,CAAmBlD,CAAnB,CAAf;AACA,cAAIoB,YAAY,IAAZ,IAAoBA,SAAStE,EAAT,IAAeY,MAAvC,EAA+C;AAC7C,iBAAKb,OAAL,CAAaqG,KAAb,CAAmBlD,CAAnB,IAAwB6B,IAAxB;AACD;AACF;;AAED,aAAK,IAAIyE,IAAI,CAAb,EAAgBA,IAAI,KAAKzJ,OAAL,CAAamE,aAAb,CAA2B9B,MAA/C,EAAuDoH,GAAvD,EAA4D;AAC1D,cAAIlF,YAAW,KAAKvE,OAAL,CAAamE,aAAb,CAA2BsF,CAA3B,CAAf;AACA,cAAIlF,aAAY,IAAZ,IAAoBA,UAAStE,EAAT,IAAeY,MAAvC,EAA+C;AAC7C,iBAAKb,OAAL,CAAamE,aAAb,CAA2BsF,CAA3B,IAAgCzE,IAAhC;AACD;AACF;AACD,aAAK0E,QAAL,CAAc7I,MAAd,IAAwBmE,IAAxB;AACD;AACF;;AAED;;;;;;;kCAIc;AACZ,aAAO,KAAK0E,QAAZ;AACD;;AAED;;;;;;;qDAIiC1E,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACrC,+BAAsBA,KAAK9C,UAA3B,wIAAuC;AAAA,cAA9BnB,SAA8B;;AACrC,cAAM4I,UAAU,KAAKlK,SAAL,CAAe2B,GAAf,CAAmBL,UAAUG,IAAV,GAAiB,SAApC,CAAhB;AACA,cAAIyI,QAAQC,uBAAR,EAAJ,EAAuC;AACrC7I,sBAAUgC,cAAV,GAA2B,IAA3B;AACD;AACF;AANoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtC;;AAED;;;;;;;sDAIkCiC,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACtC,+BAAsBA,KAAK9C,UAA3B,wIAAuC;AAAA,cAA9BnB,SAA8B;;AACrC,cAAM4I,UAAU,KAAKlK,SAAL,CAAe2B,GAAf,CAAmBL,UAAUG,IAAV,GAAiB,SAApC,CAAhB;AACA,cAAIyI,QAAQC,uBAAR,EAAJ,EAAuC;AACrC7I,sBAAUgC,cAAV,GAA2B,KAA3B;AACD;AACF;AANqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvC;;AAED;;;;;;;;;8CAM0BlC,M,EAAQ;AAChC,UAAIgJ,cAAc,IAAlB;AACA,UAAMC,cAAc,KAAK9J,OAAL,CAAaqG,KAAjC;AACA,WAAK,IAAI0D,IAAI,CAAb,EAAgBA,IAAID,YAAYzH,MAAhC,EAAwC0H,GAAxC,EAA6C;AAC3C,YAAMC,aAAaF,YAAYC,CAAZ,CAAnB;AACA,YAAIC,WAAW/J,EAAX,KAAkBY,MAAtB,EAA8B;AAC5BiJ,sBAAYV,MAAZ,CAAmBW,CAAnB,EAAsB,CAAtB;AACAF,wBAAcG,UAAd;AACA,cAAIA,WAAW9I,IAAX,IAAmB,OAAvB,EAAgC;AAC9B,iBAAK+I,+BAAL,CAAqCD,UAArC;AACD;AACD;AACD;AACF;AACD,aAAOH,WAAP;AACD;;AAED;;;;;;;oDAIgC7E,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACpC,+BAAoBA,KAAKtC,GAAzB,wIAA8B;AAAA,cAArBwH,OAAqB;;AAC5B,eAAKC,yBAAL,CAA+BD,OAA/B;AACD;AAHmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrC;;AAED;;;;;;;;mCAKelF,I,EAAMoF,mB,EAAqB;AACxC,UAAI,KAAKC,QAAL,CAAcrF,KAAK/E,EAAnB,CAAJ,EAA4B;AAC1B,aAAKkK,yBAAL,CAA+BnF,KAAK/E,EAApC;AACA,aAAKgF,eAAL,CAAqBD,IAArB,EAA2BoF,mBAA3B;AACD;AACF;;AAED;;;;;;;;oCAKgBpF,I,EAAMoF,mB,EAAqB;AACzC,WAAKE,wBAAL,CAA8BtF,IAA9B;;AAEA,UAAI,KAAKuF,iCAAL,CAAuCH,mBAAvC,CAAJ,EAAiE;AAC/D,aAAKI,mCAAL,CAAyCxF,IAAzC;AACD,OAFD,MAEO;AACL,aAAKyF,4BAAL,CAAkCzF,IAAlC,EAAwCoF,mBAAxC;AACD;;AAED,UAAIpF,KAAK9D,IAAL,IAAa,OAAjB,EAA0B;AACxB,aAAKwJ,kBAAL,CAAwB/G,IAAxB,CAA6BqB,KAAK/E,EAAlC;AACA,aAAK0K,4BAAL,CAAkC3F,IAAlC;AACD,OAHD,MAGO;AACL,aAAK4F,iBAAL,CAAuBjH,IAAvB,CAA4BqB,KAAK/E,EAAjC;AACD;AACF;;;6CAEwB+E,I,EAAM;AAC7B,UAAIA,KAAKnC,eAAL,IAAwB,IAA5B,EAAkC;AAChCmC,aAAKnC,eAAL,CAAqBC,WAArB,GAAmC,EAAnC;AACD;AACF;;;wDAEmCkC,I,EAAM;AACxC,UAAMb,gBAAgB,KAAKC,gBAAL,EAAtB;AACAD,oBAAciF,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BpE,IAA3B;AACD;;;iDAE4BA,I,EAAMoF,mB,EAAqB;AACtD,UAAMjG,gBAAgB,KAAKC,gBAAL,EAAtB;AACA,WAAK,IAAIqF,IAAI,CAAb,EAAgBA,IAAItF,cAAc9B,MAAlC,EAA0CoH,GAA1C,EAA+C;AAC7C,YAAItF,cAAcsF,CAAd,EAAiBxJ,EAAjB,KAAwBmK,mBAA5B,EAAiD;AAC/C,cAAIS,cAAc,KAAKC,cAAL,CAAoBV,mBAApB,CAAlB;AACA,cAAIS,eAAe,IAAnB,EAAyB;AACvB,iBAAKpF,uBAAL,CAA6BT,KAAK/E,EAAlC,EAAsCmK,mBAAtC;AACA,iBAAK1E,4BAAL,CAAkCV,IAAlC,EAAwCoF,mBAAxC;AACD;AACDjG,wBAAciF,MAAd,CAAqBK,IAAI,CAAzB,EAA4B,CAA5B,EAA+BzE,IAA/B;AACD;AACF;AACF;;;sDAEiCoF,mB,EAAqB;AACrD,aAAOA,uBAAuB,IAAvB,IACHA,wBAAwB,eADrB,IAEHA,wBAAwB,eAFrB,IAGHA,wBAAwB,gBAH5B;AAID;;AAED;;;;;;;;yDAKqCpF,I,EAAM+F,oB,EAAsB;AAC/D,WAAKZ,yBAAL,CAA+BnF,KAAK/E,EAApC;AACA,WAAKoF,2BAAL,CAAiCL,IAAjC,EAAuC+F,oBAAvC;AACD;;AAED;;;;;;;;2DAKuC/F,I,EAAM+F,oB,EAAsB;AACjE,WAAKC,2BAAL,CAAiChG,KAAK/E,EAAtC;;AAEA,UAAI,KAAK8E,WAAL,CAAiBC,KAAK/E,EAAtB,CAAJ,EAA+B;AAC7B;;;;AAIA,YAAIgL,WAAWjG,KAAKtC,GAApB;AAL6B;AAAA;AAAA;;AAAA;AAM7B,iCAAoBuI,QAApB,wIAA8B;AAAA,gBAArBf,OAAqB;;AAC5B,gBAAIgB,YAAY,KAAK1E,WAAL,CAAiB0D,OAAjB,CAAhB;AACA,gBAAIiB,qBAAqB,KAAKnL,OAAL,CAAamE,aAAb,CAA2BmE,OAA3B,CAAmC4C,SAAnC,CAAzB;AACA,gBAAIC,sBAAsB,CAAC,CAA3B,EAA8B;AAC5B,mBAAKnL,OAAL,CAAamE,aAAb,CAA2BiF,MAA3B,CAAkC+B,kBAAlC,EAAsD,CAAtD;AACD;AACD,gBAAIC,yBAAyB,KAAKR,iBAAL,CAAuBtC,OAAvB,CAA+B4C,SAA/B,CAA7B;AACA,gBAAIE,0BAA0B,CAAC,CAA/B,EAAkC;AAChC,mBAAKR,iBAAL,CAAuBxB,MAAvB,CAA8BgC,sBAA9B,EAAsD,CAAtD;AACD;AACF;AAhB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB9B;;AAED;AACA,WAAK/F,2BAAL,CAAiCL,IAAjC,EAAuC+F,oBAAvC;AACD;;AAED;;;;;;;;gDAK4B/F,I,EAAM+F,oB,EAAsB;AACtD,UAAI/F,QAAQ,IAAZ,EAAkB;AAChB,YAAMb,gBAAgB,KAAKnE,OAAL,CAAamE,aAAnC;AACA,YAAMkH,iBAAiB,KAAKC,qBAAL,EAAvB;;AAEA,YAAInH,iBAAiB,IAArB,EAA2B;AACzB;AACA,cAAIa,KAAKnC,eAAL,IAAwB,IAA5B,EAAkC;AAChCmC,iBAAKnC,eAAL,CAAqBC,WAArB,GAAmC,EAAnC;AACD;;AAED,cAAIiI,wBAAwB,IAAxB,IAAgCA,yBAAyB,eAAzD,IAA4EA,yBAAyB,eAArG,IAAwHA,yBAAyB,gBAArJ,EAAuK;AACrK;AACA5G,0BAAciF,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BpE,IAA3B;AACD,WAHD,MAGO;AACL;;AAEA,gBAAIuG,QAAQ,KAAZ;AAHK;AAAA;AAAA;;AAAA;AAIL,qCAA0BF,cAA1B,wIAA0C;AAAA,oBAAjCG,aAAiC;;AACxC,oBAAIT,wBAAwBS,cAAcvL,EAA1C,EAA8C;AAC5C;AACA,uBAAKsF,6BAAL,CAAmCP,KAAK/E,EAAxC,EAA4C8K,oBAA5C;AACA,uBAAKvF,wBAAL,CAA8BR,KAAK/E,EAAnC,EAAuC8K,oBAAvC;;AAEA;;;;;;AAMA,uBAAK,IAAItB,IAAI,CAAb,EAAgBA,IAAItF,cAAc9B,MAAlC,EAA0CoH,GAA1C,EAA+C;AAC7C,wBAAIrD,eAAejC,cAAcsF,CAAd,CAAnB;AACA,wBAAIsB,wBAAwB3E,aAAanG,EAAzC,EAA6C;AAC3CkE,oCAAciF,MAAd,CAAqBK,IAAI,CAAzB,EAA4B,CAA5B,EAA+BzE,IAA/B;AACAuG,8BAAQ,IAAR;AACD;AACF;AACF;AACF;AAxBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BL,gBAAI,CAACA,KAAL,EAAY;AACV;;;;AAIApH,4BAAcR,IAAd,CAAmBqB,IAAnB;AACD;AACF;;AAED,cAAIA,KAAK9D,IAAL,IAAa,OAAjB,EAA0B;AACxB,iBAAKwJ,kBAAL,CAAwB/G,IAAxB,CAA6BqB,KAAK/E,EAAlC;AACA,iBAAK0K,4BAAL,CAAkC3F,IAAlC;AACD,WAHD,MAGO;AACL,iBAAK4F,iBAAL,CAAuBjH,IAAvB,CAA4BqB,KAAK/E,EAAjC;AACD;AACF;AACF;AACF;;;;;;AAGHX,4BAA4BmM,OAA5B,GAAsC,CACpC,SADoC,EAEpC,OAFoC,EAGpC,WAHoC,EAIpC,IAJoC,EAKpC,YALoC,EAMpC,eANoC,EAOpC,aAPoC,CAAtC;;kBAUenM,2B","file":"authoringToolProjectService.js","sourcesContent":["'use strict';\nimport ProjectService from '../services/projectService';\n\nclass AuthoringToolProjectService extends ProjectService {\n  constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n    super($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService);\n  }\n\n  /**\n   * Returns a project template for new projects\n   */\n  getNewProjectTemplate() {\n    return {\n      \"nodes\": [\n        {\n          \"id\": \"group0\",\n          \"type\": \"group\",\n          \"title\": \"Master\",\n          \"startId\": \"group1\",\n          \"ids\": [\n            \"group1\"\n          ]\n        },\n        {\n          \"id\": \"group1\",\n          \"type\": \"group\",\n          \"title\": this.$translate('FIRST_ACTIVITY'),\n          \"startId\": \"\",\n          \"ids\": [\n          ],\n          \"icons\": {\n            \"default\": {\n              \"color\": \"#2196F3\",\n              \"type\": \"font\",\n              \"fontSet\": \"material-icons\",\n              \"fontName\": \"info\"\n            }\n          }\n        }\n      ],\n      \"constraints\": [],\n      \"startGroupId\": \"group0\",\n      \"startNodeId\": \"group0\",\n      \"navigationMode\": \"guided\",\n      \"layout\": {\n        \"template\": \"starmap|leftNav|rightNav\"\n      },\n      \"metadata\": {\n        \"title\": \"\"\n      },\n      \"notebook\": {\n        \"enabled\": false,\n        \"label\": this.$translate('NOTEBOOK'),\n        \"enableAddNew\": true,\n        \"itemTypes\": {\n          \"note\": {\n            \"type\": \"note\",\n            \"enabled\": true,\n            \"enableLink\": true,\n            \"enableAddNote\": true,\n            \"enableClipping\": true,\n            \"enableStudentUploads\": true,\n            \"requireTextOnEveryNote\": false,\n            \"label\": {\n              \"singular\": this.$translate('NOTE_LOWERCASE'),\n              \"plural\": this.$translate('NOTES_LOWERCASE'),\n              \"link\": this.$translate('NOTES'),\n              \"icon\": \"note\",\n              \"color\": \"#1565C0\"\n            }\n          },\n          \"question\": {\n            \"type\": \"question\",\n            \"enabled\": false,\n            \"enableLink\": true,\n            \"enableClipping\": true,\n            \"enableStudentUploads\": true,\n            \"label\": {\n              \"singular\": this.$translate('QUESTION_LOWER_CASE'),\n              \"plural\": this.$translate('QUESTIONS_LOWER_CASE'),\n              \"link\": this.$translate('QUESTIONS'),\n              \"icon\": \"live_help\",\n              \"color\": \"#F57C00\"\n            }\n          },\n          \"report\": {\n            \"enabled\": false,\n            \"label\": {\n              \"singular\": this.$translate('REPORT_LOWERCASE'),\n              \"plural\": this.$translate('REPORTS_LOWERCASE'),\n              \"link\": this.$translate('REPORT'),\n              \"icon\": \"assignment\",\n              \"color\": \"#AD1457\"\n            },\n            \"notes\": [\n              {\n                \"reportId\": \"finalReport\",\n                \"title\": this.$translate('FINAL_REPORT'),\n                \"description\": this.$translate('REPORT_DESCRIPTION'),\n                \"prompt\": this.$translate('REPORT_PROMPT'),\n                \"content\": this.$translate('REPORT_CONTENT')\n              }\n            ]\n          }\n        }\n      },\n      \"inactiveNodes\": []\n    };\n  }\n\n  /**\n   * Notifies others that the specified project is being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectBegin(projectId = null) {\n    if (projectId == null) {\n      if (this.project != null) {\n        projectId = this.project.id;\n      } else {\n        return;\n      }\n    }\n\n    const httpParams = {\n      method: \"POST\",\n      url: this.ConfigService.getConfigParam('notifyProjectBeginURL') + projectId\n    };\n\n    return this.$http(httpParams).then((result) => {\n      let otherAuthors = result.data;\n      return otherAuthors;\n    });\n  }\n\n  /**\n   * Notifies others that the specified project is no longer being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectEnd(projectId = null) {\n    return this.$q((resolve, reject) => {\n      if (projectId == null) {\n        if (this.project != null) {\n          projectId = this.ConfigService.getProjectId();\n        } else {\n          resolve();\n        }\n      }\n      const httpParams = {\n        method: 'POST',\n        url: this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId\n      };\n      this.$http(httpParams).then(() => {\n        resolve();\n      })\n    });\n  }\n\n  /**\n   * Returns all possible transition criteria for the specified node and component.\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      let componentType = component.type;\n      let componentService = this.$injector.get(componentType + 'Service');\n      if (componentService.getPossibleTransitionCriteria) {\n        return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n      } else {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Copies the project with the specified id and returns\n   * a new project id if the project is successfully copied\n   */\n  copyProject(projectId) {\n    const copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n    if (copyProjectURL == null) {\n      return null;\n    }\n\n    const httpParams = {\n      method: 'POST',\n      url: copyProjectURL + \"/\" + projectId,\n      headers:  {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param({})\n    };\n\n    return this.$http(httpParams).then((result) => {\n      return result.data;  // project Id\n    });\n  };\n\n  /**\n   * Registers a new project having the projectJSON content with the server.\n   * Returns a new project Id if the project is successfully registered.\n   * Returns null if Config.registerNewProjectURL is undefined.\n   * Throws an error if projectJSONString is invalid JSON string\n   */\n  registerNewProject(projectJSONString, commitMessage = \"\") {\n    const registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n    if (registerNewProjectURL == null) {\n      return null;\n    }\n\n    try {\n      JSON.parse(projectJSONString);\n    } catch (e) {\n      throw new Error(\"Invalid projectJSONString.\");\n    }\n\n    const httpParams = {\n      method: 'POST',\n      url: registerNewProjectURL,\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param({\n        commitMessage: commitMessage,\n        projectJSONString: projectJSONString\n      })\n    };\n\n    return this.$http(httpParams).then((result) => {\n      const projectId = result.data;\n      return projectId;\n    });\n  };\n\n  /**\n   * Retrieves and returns the project's commit history.\n   */\n  getCommitHistory() {\n    const commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n    return this.$http({\n      url: commitProjectURL,\n      method: 'GET'\n    }).then((result) => {\n      return result.data;\n    });\n  };\n\n  /**\n   * Replace a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param component the new component\n   */\n  replaceComponent(nodeId, componentId, component) {\n    if (nodeId != null && componentId != null && component != null) {\n      const components = this.getComponentsByNodeId(nodeId);\n      if (components != null) {\n        for (let c = 0; c < components.length; c++) {\n          const tempComponent = components[c];\n          if (tempComponent != null) {\n            if (tempComponent.id === componentId) {\n              components[c] = component;\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Create a new group\n   * @param title the title of the group\n   * @returns the group object\n   */\n  createGroup(title) {\n    return {\n      id: this.getNextAvailableGroupId(),\n      type: 'group',\n      title: title,\n      startId: '',\n      ids: []\n    }\n  };\n\n  /**\n   * Create a new node\n   * @param title the title of the node\n   * @returns the node object\n   */\n  createNode(title) {\n    return {\n      id: this.getNextAvailableNodeId(),\n      title: title,\n      type: 'node',\n      constraints: [],\n      transitionLogic: {\n        transitions: []\n      },\n      showSaveButton: false,\n      showSubmitButton: false,\n      components: []\n    }\n  };\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesInside(nodeIds, nodeId) {\n    const newNodes = [];\n    for (let n = 0; n < nodeIds.length; n++) {\n      const nodeIdToCopy = nodeIds[n];\n      const newNode = this.copyNode(nodeIdToCopy);\n      const newNodeId = newNode.id;\n\n      if (n == 0) {\n        // this is the first node we are copying so we will insert it\n        // into the beginning of the group\n        this.createNodeInside(newNode, nodeId);\n      } else {\n        // this is not the first node we are copying so we will insert\n        // it after the node we previously inserted\n        this.createNodeAfter(newNode, nodeId);\n      }\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n    return newNodes;\n  }\n\n  /**\n   * Copy the nodes into the project\n   * @param selectedNodes the nodes to import\n   * @param fromProjectId copy the nodes from this project\n   * @param toProjectId copy the nodes into this project\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter) {\n    const httpParams = {\n      method: 'POST',\n      url: this.ConfigService.getConfigParam('importStepsURL'),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param({\n        steps: angular.toJson(selectedNodes),\n        fromProjectId: fromProjectId,\n        toProjectId: toProjectId\n      })\n    };\n\n    /*\n     * Make the request to import the steps. This will copy the asset files\n     * and change file names if necessary. If an asset file with the same\n     * name exists in both projects we will check if their content is the\n     * same. If the content is the same we don't need to copy the file. If\n     * the content is different, we need to make a copy of the file with a\n     * new name and change all the references in the steps to use the new\n     * name.\n     */\n    return this.$http(httpParams).then((result) => {\n      selectedNodes = result.data;\n\n      const inactiveNodes = this.getInactiveNodes();\n      const newNodes = [];\n      const newNodeIds = [];\n\n      for (let selectedNode of selectedNodes) {\n        if (selectedNode != null) {\n          // make a copy of the node so that we don't modify the source\n          const tempNode = this.UtilService.makeCopyOfJSONObject(selectedNode);\n\n          // check if the node id is already being used in the current project\n          if (this.isNodeIdUsed(tempNode.id)) {\n            // the node id is already being used in the current project\n\n            // get the next available node id\n            const nextAvailableNodeId = this.getNextAvailableNodeId(newNodeIds);\n\n            // change the node id of the node we are importing\n            tempNode.id = nextAvailableNodeId;\n          }\n\n          // get the components in the node\n          const tempComponents = tempNode.components;\n\n          if (tempComponents != null) {\n            for (let tempComponent of tempComponents) {\n              if (tempComponent != null) {\n                if (this.isComponentIdUsed(tempComponent.id)) {\n                  // we are already using the component id so we will need to change it\n\n                  const newComponentId = this.getUnusedComponentId();\n                  tempComponent.id = newComponentId;\n                }\n              }\n            }\n          }\n\n          // clear the constraints\n          tempNode.constraints = [];\n\n          // add the new node and new node id to our arrays\n          newNodes.push(tempNode);\n          newNodeIds.push(tempNode.id);\n        }\n      }\n\n      if (nodeIdToInsertInsideOrAfter == null) {\n        /*\n         * the place to put the new node has not been specified so we\n         * will place it in the inactive steps section\n         */\n\n        /*\n         * Insert the node after the last inactive node. If there\n         * are no inactive nodes it will just be placed in the\n         * inactive nodes section. In the latter case we do this by\n         * setting nodeIdToInsertInsideOrAfter to 'inactiveSteps'.\n         */\n        if (inactiveNodes != null && inactiveNodes.length > 0) {\n          nodeIdToInsertInsideOrAfter = inactiveNodes[inactiveNodes.length - 1];\n        } else {\n          nodeIdToInsertInsideOrAfter = 'inactiveSteps';\n        }\n      }\n\n      for (let newNode of newNodes) {\n        if (this.isGroupNode(nodeIdToInsertInsideOrAfter)) {\n          // we want to make the new step the first step in the given activity\n          this.createNodeInside(newNode, nodeIdToInsertInsideOrAfter);\n        } else {\n          // we want to place the new step after the given step\n          this.createNodeAfter(newNode, nodeIdToInsertInsideOrAfter);\n        }\n\n        /*\n         * Update the nodeIdToInsertInsideOrAfter so that when we are\n         * importing multiple steps, the steps get placed in the correct\n         * order.\n         *\n         * Example\n         * We are importing nodeA and nodeB and want to place them after\n         * nodeX. Therefore we want the order to be\n         *\n         * nodeX\n         * nodeA\n         * nodeB\n         *\n         * This means after we add nodeA, we must update\n         * nodeIdToInsertInsideOrAfter to be nodeA so that when we add\n         * nodeB, it will be placed after nodeA.\n         */\n        nodeIdToInsertInsideOrAfter = newNode.id;\n      }\n      return newNodes;\n    });\n  }\n\n  /**\n   * Create a node inside the group\n   * @param node the new node\n   * @param nodeId the node id of the group to create the node in\n   */\n  createNodeInside(node, nodeId) {\n    if (nodeId == 'inactiveNodes' || nodeId == 'inactiveGroups') {\n      this.addInactiveNode(node);\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      this.setIdToNode(node.id, node);\n      if (this.isInactive(nodeId)) {\n        // we are creating an inactive node\n        this.addInactiveNodeInsertInside(node, nodeId);\n      } else {\n        // we are creating an active node\n        this.addNode(node);\n        this.insertNodeInsideInTransitions(node.id, nodeId);\n        this.insertNodeInsideInGroups(node.id, nodeId);\n      }\n    }\n  }\n\n  /**\n   * Create a node after the given node id\n   * @param node the new node\n   * @param nodeId the node to add after\n   */\n  createNodeAfter(node, nodeId) {\n    if (this.isInactive(nodeId)) {\n      // we are adding the node after a node that is inactive\n\n      this.addInactiveNode(node, nodeId);\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      // we are adding the node after a node that is active\n\n      this.addNode(node);\n      this.setIdToNode(node.id, node);\n      this.insertNodeAfterInGroups(node.id, nodeId);\n      this.insertNodeAfterInTransitions(node, nodeId);\n    }\n\n    if (this.isGroupNode(node.id)) {\n      /*\n       * we are creating a group node so we will update/create the\n       * transitions that traverse from the previous group to this group\n       */\n      // TODO geoffreykwan oldToGroupIds is declared here and below. Refactor\n      var oldToGroupIds = [];\n\n      const transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n      if (transitionsFromGroup != null) {\n        /*\n         * loop through all the transitions that come out of the previous group\n         * and get the node ids that the group transitions to\n         */\n        for (let transitionFromGroup of transitionsFromGroup) {\n          if (transitionFromGroup != null) {\n            const toNodeId = transitionFromGroup.to;\n            if (toNodeId != null) {\n              oldToGroupIds.push(toNodeId);\n            }\n          }\n        }\n      }\n\n      const fromGroupId = nodeId;\n      // TODO geoffreykwan oldToGroupIds is declared here and above. Refactor\n      var oldToGroupIds = oldToGroupIds;\n      const newToGroupId = node.id;\n\n      /*\n       * make the transitions point to the new group and make the new\n       * group transition to the old group\n       */\n      this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n    }\n  }\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesAfter(nodeIds, nodeId) {\n    const newNodes = [];\n    for (let nodeIdToCopy of nodeIds) {\n      const newNode = this.copyNode(nodeIdToCopy);\n      const newNodeId = newNode.id;\n      this.createNodeAfter(newNode, nodeId);\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n    return newNodes;\n  }\n\n  /**\n   * Check if a node is inactive. At the moment only step nodes can be\n   * inactive.\n   * @param nodeId the node id of the step\n   */\n  isInactive(nodeId) {\n    if (nodeId != null && this.project.inactiveNodes != null) {\n      for (let inactiveNode of this.project.inactiveNodes) {\n        if (inactiveNode != null) {\n          if (nodeId === inactiveNode.id) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a node id is already being used in the project\n   * @param nodeId check if this node id is already being used in the project\n   * @return whether the node id is already being used in the project\n   */\n  isNodeIdUsed(nodeId) {\n    for (let node of this.project.nodes) {\n      if (node != null) {\n        if (nodeId === node.id) {\n          return true;\n        }\n      }\n    }\n\n    for (let node of this.project.inactiveNodes) {\n      if (node != null) {\n        if (nodeId === node.id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set a field in the transition logic of a node\n   */\n  setTransitionLogicField(nodeId, field, value) {\n    if (nodeId != null && field != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        const transitionLogic = node.transitionLogic;\n        if (transitionLogic != null) {\n          transitionLogic[field] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the transition to value of a node\n   * @param fromNodeId the from node\n   * @param toNodeId the to node\n   */\n  setTransition(fromNodeId, toNodeId) {\n    const node = this.getNodeById(fromNodeId);\n    if (node != null) {\n      const transitionLogic = node.transitionLogic;\n      if (transitionLogic != null) {\n        let transitions = transitionLogic.transitions;\n        if (transitions == null || transitions.length == 0) {\n          transitionLogic.transitions = [];\n          const transition = {};\n          transitionLogic.transitions.push(transition);\n          transitions = transitionLogic.transitions;\n        }\n\n        if (transitions != null && transitions.length > 0) {\n          // get the first transition. we will assume there is only one transition.\n          const transition = transitions[0];\n          if (transition != null) {\n            transition.to = toNodeId;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the node id that comes after a given node id\n   * @param nodeId get the node id that comes after this node id\n   * @param the node id that comes after the one that is passed in as a parameter\n   */\n  getNodeIdAfter(nodeId) {\n    let nodeIdAfter = null;\n\n    // get an array of ordered items. each item represents a node\n    const orderedItems = this.$filter('orderBy')(this.$filter('toArray')(this.idToOrder), 'order');\n\n    if (orderedItems != null) {\n      let foundNodeId = false;\n      for (let item of orderedItems) {\n        if (item != null) {\n          const tempNodeId = item.$key;\n\n          // check if we have found the node id that was passed in as a parameter\n          if (foundNodeId) {\n            /*\n             * we have previously found the node id that was passed in which means\n             * the current temp node id is the one that comes after it\n             */\n            nodeIdAfter = tempNodeId;\n            break;\n          } else {\n            if (nodeId == tempNodeId) {\n              // we have found the node id that was passed in as a parameter\n              foundNodeId = true;\n            }\n          }\n        }\n      }\n    }\n    return nodeIdAfter;\n  }\n\n  /**\n   * Add branch path taken constraints to the node\n   * @param targetNodeId the node to add the constraints to\n   * @param fromNodeId the from node id of the branch path taken constraint\n   * @param toNodeId the to node id of the branch path taken constraint\n   */\n  addBranchPathTakenConstraints(targetNodeId, fromNodeId, toNodeId) {\n    if (targetNodeId != null) {\n      const node = this.getNodeById(targetNodeId);\n\n      if (node != null) {\n        /*\n         * create the constraint that makes the node not visible until\n         * the given branch path is taken\n         */\n        const makeThisNodeNotVisibleConstraint = {\n          id: this.getNextAvailableConstraintIdForNodeId(targetNodeId),\n          action: 'makeThisNodeNotVisible',\n          targetId: targetNodeId,\n          removalConditional: 'all',\n          removalCriteria: [{\n            name: 'branchPathTaken',\n            params: {\n              fromNodeId: fromNodeId,\n              toNodeId: toNodeId\n            }\n          }]\n        };\n        node.constraints.push(makeThisNodeNotVisibleConstraint);\n\n        /*\n         * create the constraint that makes the node not visitable until\n         * the given branch path is taken\n         */\n        const makeThisNodeNotVisitableConstraint = {\n          id: this.getNextAvailableConstraintIdForNodeId(targetNodeId),\n          action: 'makeThisNodeNotVisitable',\n          targetId: targetNodeId,\n          removalConditional: all,\n          removalCriteria: [{\n            name: 'branchPathTaken',\n            params: {\n              fromNodeId: fromNodeId,\n              toNodeId: toNodeId\n            }\n          }]\n        };\n        node.constraints.push(makeThisNodeNotVisitableConstraint);\n      }\n    }\n  }\n\n  /**\n   * Set the project level rubric\n   */\n  setProjectRubric(html) {\n    this.project.rubric = html;\n  }\n\n  /**\n   * Get the number of branch paths. This is assuming the node is a branch point.\n   * @param nodeId The node id of the branch point node.\n   * @return The number of branch paths for this branch point.\n   */\n  getNumberOfBranchPaths(nodeId) {\n    let transitions = this.getTransitionsByFromNodeId(nodeId);\n    if (transitions != null) {\n      return transitions.length;\n    }\n    return 0;\n  }\n\n  /**\n   * If this step is a branch point, we will return the criteria that is used\n   * to determine which path the student gets assigned to.\n   * @param nodeId The node id of the branch point.\n   * @returns A human readable string containing the criteria of how students\n   * are assigned branch paths on this branch point.\n   */\n  getBranchCriteriaDescription(nodeId) {\n    let transitionLogic = this.getTransitionLogicByFromNodeId(nodeId);\n    let transitions = transitionLogic.transitions;\n\n    // Loop through the transitions to try to find a transition criteria\n    for (let transition of transitions) {\n      if (transition.criteria != null && transition.criteria.length > 0) {\n        for (let singleCriteria of transition.criteria) {\n          if (singleCriteria.name == 'choiceChosen') {\n            return 'multiple choice';\n          } else if (singleCriteria.name == 'score') {\n            return 'score';\n          }\n        }\n      }\n    }\n\n    /*\n     * None of the transitions had a specific criteria so the branching is just\n     * based on the howToChooseAmongAvailablePaths field.\n     */\n    if (transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n      return 'workgroup ID';\n    } else if (transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n      return 'random assignment';\n    }\n  }\n\n  /**\n   * Get the previous node\n   * @param nodeId get the node id that comes before this one\n   * @return the node id that comes before\n   */\n  getPreviousNodeId(nodeId) {\n    const flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n    if (flattenedNodeIds != null) {\n      const indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n      if (indexOfNodeId != -1) {\n        const indexOfPreviousNodeId = indexOfNodeId - 1;\n        return flattenedNodeIds[indexOfPreviousNodeId];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set the project script filename\n   * @param script the script filename\n   */\n  setProjectScriptFilename(scriptFilename) {\n    this.project.script = scriptFilename;\n  }\n\n  /**\n   * Get the project script filename\n   */\n  getProjectScriptFilename() {\n    if (this.project != null && this.project.script != null) {\n      return this.project.script;\n    }\n    return null;\n  }\n\n  /**\n   * Check if a node has rubrics.\n   * @param nodeId The node id of the node.\n   * @return Whether the node has rubrics authored on it.\n   */\n  nodeHasRubric(nodeId) {\n    let numberOfRubrics = this.getNumberOfRubricsByNodeId(nodeId);\n    if (numberOfRubrics > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Copy a component and insert it into the step\n   * @param nodeId we are copying a component in this node\n   * @param componentIds the components to copy\n   * @param insertAfterComponentId Which component to place the new components\n   * after. If this is null, we will put the new components at the beginning.\n   * @return an array of the new components\n   */\n  copyComponentAndInsert(nodeId, componentIds, insertAfterComponentId) {\n    const node = this.getNodeById(nodeId);\n    const newComponents = [];\n    const newComponentIds = [];\n    for (let componentId of componentIds) {\n      const newComponent =\n        this.copyComponent(nodeId, componentId, newComponentIds);\n      newComponents.push(newComponent);\n      newComponentIds.push(newComponent.id);\n    }\n\n    const components = node.components;\n    if (components != null) {\n      let insertPosition = 0;\n      if (insertAfterComponentId == null) {\n        // place the new components at the beginning\n        insertPosition = 0;\n      } else {\n        // place the new components after the specified component id\n        insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n      }\n\n      for (let newComponent of newComponents) {\n        components.splice(insertPosition, 0, newComponent);\n\n        /*\n         * increment the insert position for cases when we have multiple\n         * new components\n         */\n        insertPosition += 1;\n      }\n    }\n    return newComponents;\n  }\n\n  /**\n   * Copy a component\n   * @param nodeId the node id\n   * @param componentId the compnent id\n   * @param componentIdsToSkip component ids that we can't use for our new\n   * component\n   * @return a new component object\n   */\n  copyComponent(nodeId, componentId, componentIdsToSkip) {\n    const component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    const newComponent = this.UtilService.makeCopyOfJSONObject(component);\n    const newComponentId = this.getUnusedComponentId(componentIdsToSkip);\n    newComponent.id = newComponentId;\n    return newComponent;\n  }\n\n  /**\n   * Import components from a project. Also import asset files that are\n   * referenced in any of those components.\n   * @param components an array of component objects that we are importing\n   * @param importProjectId the id of the project we are importing from\n   * @param nodeId the node we are adding the components to\n   * @param insertAfterComponentId insert the components after this component\n   * id\n   * @return an array of the new components\n   */\n  importComponents(components, importProjectId, nodeId, insertAfterComponentId) {\n    let newComponents = [];\n    const newComponentIds = [];\n\n    /*\n     * loop through all the components and make sure their ids are not\n     * already used in the project\n     */\n    for (let component of components) {\n      if (component != null) {\n        const newComponent = this.UtilService.makeCopyOfJSONObject(component);\n        let newComponentId = newComponent.id;\n\n        if (this.isComponentIdUsed(newComponentId)) {\n          // component id is already used so we will find a new component id\n          newComponentId = this.getUnusedComponentId(newComponentIds);\n          newComponent.id = newComponentId;\n        }\n\n        newComponents.push(newComponent);\n        newComponentIds.push(newComponentId);\n      }\n    }\n\n    const httpParams = {\n      method: 'POST',\n      url: this.ConfigService.getConfigParam('importStepsURL'),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param({\n        steps: angular.toJson(newComponents),\n        fromProjectId: importProjectId,\n        toProjectId:  this.ConfigService.getConfigParam('projectId'),\n      })\n    };\n\n    /*\n     * Make the request to import the components. This will copy the asset files\n     * and change file names if necessary. If an asset file with the same\n     * name exists in both projects we will check if their content is the\n     * same. If the content is the same we don't need to copy the file. If\n     * the content is different, we need to make a copy of the file with a\n     * new name and change all the references in the steps to use the new\n     * name.\n     */\n    return this.$http(httpParams).then((result) => {\n      newComponents = result.data;\n      const node = this.getNodeById(nodeId);\n      const currentComponents = node.components;\n      let insertPosition = 0;\n\n      if (insertAfterComponentId == null) {\n        // place the new components at the beginning\n        insertPosition = 0;\n      } else {\n        // place the new components after the specified component id\n        insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n      }\n\n      for (let newComponent of newComponents) {\n        // insert the new component\n        currentComponents.splice(insertPosition, 0, newComponent);\n\n        /*\n         * increment the insert position for cases when we have multiple\n         * new components\n         */\n        insertPosition += 1;\n      }\n      return newComponents;\n    });\n  }\n\n  /**\n   * Get the branch path letter\n   * @param nodeId get the branch path letter for this node if it is in a\n   * branch\n   * @return the branch path letter for the node if it is in a branch\n   */\n  getBranchPathLetter(nodeId) {\n    return this.nodeIdToBranchPathLetter[nodeId];\n  }\n\n  /**\n   * Set the node into the project by replacing the existing node with the\n   * given node id\n   * @param nodeId the node id of the node\n   * @param node the node object\n   */\n  setNode(nodeId, node) {\n    if (nodeId != null && node != null) {\n      for (let n = 0; n < this.project.nodes.length; n++) {\n        let tempNode = this.project.nodes[n];\n        if (tempNode != null && tempNode.id == nodeId) {\n          this.project.nodes[n] = node;\n        }\n      }\n\n      for (let i = 0; i < this.project.inactiveNodes.length; i++) {\n        let tempNode = this.project.inactiveNodes[i];\n        if (tempNode != null && tempNode.id == nodeId) {\n          this.project.inactiveNodes[i] = node;\n        }\n      }\n      this.idToNode[nodeId] = node;\n    }\n  }\n\n  /**\n   * Get the id to node mappings.\n   * @return An object the keys as node ids and the values as nodes.\n   */\n  getIdToNode() {\n    return this.idToNode;\n  }\n\n  /**\n   * Turn on the save button in all the components in the step\n   * @param node the node\n   */\n  turnOnSaveButtonForAllComponents(node) {\n    for (let component of node.components) {\n      const service = this.$injector.get(component.type + 'Service');\n      if (service.componentUsesSaveButton()) {\n        component.showSaveButton = true;\n      }\n    }\n  }\n\n  /**\n   * Turn off the submit button in all the components in the step\n   * @param node the node\n   */\n  turnOffSaveButtonForAllComponents(node) {\n    for (let component of node.components) {\n      const service = this.$injector.get(component.type + 'Service');\n      if (service.componentUsesSaveButton()) {\n        component.showSaveButton = false;\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the active nodes.\n   * If the node is a group node, also remove its children.\n   * @param nodeId the node to remove\n   * @returns the node that was removed\n   */\n  removeNodeFromActiveNodes(nodeId) {\n    let nodeRemoved = null;\n    const activeNodes = this.project.nodes;\n    for (let a = 0; a < activeNodes.length; a++) {\n      const activeNode = activeNodes[a];\n      if (activeNode.id === nodeId) {\n        activeNodes.splice(a, 1);\n        nodeRemoved = activeNode;\n        if (activeNode.type == 'group') {\n          this.removeChildNodesFromActiveNodes(activeNode);\n        }\n        break;\n      }\n    }\n    return nodeRemoved;\n  }\n\n  /**\n   * Move the child nodes of a group from the active nodes.\n   * @param node The group node.\n   */\n  removeChildNodesFromActiveNodes(node) {\n    for (let childId of node.ids) {\n      this.removeNodeFromActiveNodes(childId);\n    }\n  }\n\n  /**\n   * Move an active node to the inactive nodes array.\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  moveToInactive(node, nodeIdToInsertAfter) {\n    if (this.isActive(node.id)) {\n      this.removeNodeFromActiveNodes(node.id);\n      this.addInactiveNode(node, nodeIdToInsertAfter);\n    }\n  }\n\n  /**\n   * Add the node to the inactive nodes array.\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  addInactiveNode(node, nodeIdToInsertAfter) {\n    this.clearTransitionsFromNode(node);\n\n    if (this.isNodeIdToInsertAfterNotSpecified(nodeIdToInsertAfter)) {\n      this.insertNodeAtBeginingOfInactiveNodes(node);\n    } else {\n      this.insertNodeAfterSpecifiedNode(node, nodeIdToInsertAfter);\n    }\n\n    if (node.type == 'group') {\n      this.inactiveGroupNodes.push(node.id);\n      this.addGroupChildNodesToInactive(node);\n    } else {\n      this.inactiveStepNodes.push(node.id);\n    }\n  }\n\n  clearTransitionsFromNode(node) {\n    if (node.transitionLogic != null) {\n      node.transitionLogic.transitions = [];\n    }\n  }\n\n  insertNodeAtBeginingOfInactiveNodes(node) {\n    const inactiveNodes = this.getInactiveNodes();\n    inactiveNodes.splice(0, 0, node);\n  }\n\n  insertNodeAfterSpecifiedNode(node, nodeIdToInsertAfter) {\n    const inactiveNodes = this.getInactiveNodes();\n    for (let i = 0; i < inactiveNodes.length; i++) {\n      if (inactiveNodes[i].id === nodeIdToInsertAfter) {\n        let parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n        if (parentGroup != null) {\n          this.insertNodeAfterInGroups(node.id, nodeIdToInsertAfter);\n          this.insertNodeAfterInTransitions(node, nodeIdToInsertAfter);\n        }\n        inactiveNodes.splice(i + 1, 0, node);\n      }\n    }\n  }\n\n  isNodeIdToInsertAfterNotSpecified(nodeIdToInsertAfter) {\n    return nodeIdToInsertAfter == null ||\n        nodeIdToInsertAfter === 'inactiveNodes' ||\n        nodeIdToInsertAfter === 'inactiveSteps' ||\n        nodeIdToInsertAfter === 'inactiveGroups';\n  }\n\n  /**\n   * Move the node from active to inside an inactive group\n   * @param node the node to move\n   * @param nodeIdToInsertInside place the node inside this\n   */\n  moveFromActiveToInactiveInsertInside(node, nodeIdToInsertInside) {\n    this.removeNodeFromActiveNodes(node.id);\n    this.addInactiveNodeInsertInside(node, nodeIdToInsertInside);\n  }\n\n  /**\n   * Move the node from inactive to inside an inactive group\n   * @param node the node to move\n   * @param nodeIdToInsertInside place the node inside this\n   */\n  moveFromInactiveToInactiveInsertInside(node, nodeIdToInsertInside) {\n    this.removeNodeFromInactiveNodes(node.id);\n\n    if (this.isGroupNode(node.id)) {\n      /*\n       * remove the group's child nodes from our data structures so that we can\n       * add them back in later\n       */\n      let childIds = node.ids;\n      for (let childId of childIds) {\n        let childNode = this.getNodeById(childId);\n        let inactiveNodesIndex = this.project.inactiveNodes.indexOf(childNode);\n        if (inactiveNodesIndex != -1) {\n          this.project.inactiveNodes.splice(inactiveNodesIndex, 1);\n        }\n        let inactiveStepNodesIndex = this.inactiveStepNodes.indexOf(childNode);\n        if (inactiveStepNodesIndex != -1) {\n          this.inactiveStepNodes.splice(inactiveStepNodesIndex, 1);\n        }\n      }\n    }\n\n    // add the node to the inactive array\n    this.addInactiveNodeInsertInside(node, nodeIdToInsertInside);\n  }\n\n  /**\n   * Add the node to the inactive nodes array\n   * @param node the node to move\n   * @param nodeIdToInsertInside place the node inside this group\n   */\n  addInactiveNodeInsertInside(node, nodeIdToInsertInside) {\n    if (node != null) {\n      const inactiveNodes = this.project.inactiveNodes;\n      const inactiveGroups = this.getInactiveGroupNodes();\n\n      if (inactiveNodes != null) {\n        // clear the transitions from this node\n        if (node.transitionLogic != null) {\n          node.transitionLogic.transitions = [];\n        }\n\n        if (nodeIdToInsertInside == null || nodeIdToInsertInside === 'inactiveNodes' || nodeIdToInsertInside === 'inactiveSteps' || nodeIdToInsertInside === 'inactiveGroups') {\n          // put the node at the beginning of the inactive steps\n          inactiveNodes.splice(0, 0, node);\n        } else {\n          // put the node after one of the inactive nodes\n\n          let added = false;\n          for (let inactiveGroup of inactiveGroups) {\n            if (nodeIdToInsertInside == inactiveGroup.id) {\n              // we have found the group we want to insert into\n              this.insertNodeInsideInTransitions(node.id, nodeIdToInsertInside);\n              this.insertNodeInsideInGroups(node.id, nodeIdToInsertInside);\n\n              /*\n               * Loop through the inactive nodes array which contains all\n               * inactive groups and inactive nodes in a flattened array.\n               * Find the inactive group and place the node right after it\n               * for the sake of keeping things organized.\n               */\n              for (let i = 0; i < inactiveNodes.length; i++) {\n                let inactiveNode = inactiveNodes[i];\n                if (nodeIdToInsertInside == inactiveNode.id) {\n                  inactiveNodes.splice(i + 1, 0, node);\n                  added = true;\n                }\n              }\n            }\n          }\n\n          if (!added) {\n            /*\n             * we haven't added the node yet so we will just add it\n             * to the end of the array\n             */\n            inactiveNodes.push(node);\n          }\n        }\n\n        if (node.type == 'group') {\n          this.inactiveGroupNodes.push(node.id);\n          this.addGroupChildNodesToInactive(node);\n        } else {\n          this.inactiveStepNodes.push(node.id);\n        }\n      }\n    }\n  }\n}\n\nAuthoringToolProjectService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'UtilService'\n];\n\nexport default AuthoringToolProjectService;\n"]}