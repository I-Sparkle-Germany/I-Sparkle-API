{"version":3,"sources":["stepTools.es6"],"names":["StepToolsController","$scope","$state","ConfigService","NodeService","ProjectService","TeacherDataService","$mdSidenav","projectId","getProjectId","nodeId","getCurrentNodeId","idToOrder","updateModel","$on","event","args","setCurrentNodeByNodeId","go","prevId","nextId","isGroupNode","getPrevNodeId","getNextNodeId","then","text","getNodePositionAndTitleByNodeId","goToPrevNode","goToNextNode","$inject","StepTools","bindings","showPosition","template","controller"],"mappings":"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","file":"stepTools.js","sourcesContent":["\"use strict\";\n\nclass StepToolsController {\n    constructor($scope,\n                $state,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                TeacherDataService,\n                $mdSidenav) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        // get the project id\n        this.projectId = this.ConfigService.getProjectId();\n\n        // set the current node to be selected in the drop down\n        this.nodeId = this.TeacherDataService.getCurrentNodeId();\n\n        // service objects and utility functions\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // update the current node id, previous node id, and next node id\n        this.updateModel();\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            /*\n             * the current node has changed so we will update the\n             * current node id, previous node id, and next node id\n             */\n            this.updateModel();\n        });\n\n        this.$scope.$on('projectChanged', (event, args) => {\n            /*\n             * the project has changed most likely because the author has\n             * added, deleted, or moved a step\n             */\n\n            // update the idToOrder mappings\n            this.idToOrder = this.ProjectService.idToOrder;\n\n            // update the current node id, previous node id, and next node id\n            this.updateModel();\n        })\n    }\n\n    /**\n     * The user has selected a new node\n     */\n    nodeIdChanged() {\n        // remember the new current node\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        // go to the authoring view for the node\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId: this.nodeId});\n    }\n\n    /**\n     * update the current node id, previous node id, and next node id\n     */\n    updateModel() {\n\n        // get the current node\n        var nodeId = this.TeacherDataService.getCurrentNodeId();\n\n        // set the current node to be selected in the drop down\n        this.nodeId = nodeId;\n\n        if (nodeId == null) {\n            // the node id is null which means we are at the project level\n\n            // set the previous and next node ids to null\n            this.prevId = null;\n            this.nextId = null;\n        } else {\n            /*\n             * the node id is not null which means the current node is a group\n             * or node\n             */\n\n            if (!this.ProjectService.isGroupNode(nodeId)) {\n                // the node is a step\n\n                // set the previous node id\n                this.prevId = this.NodeService.getPrevNodeId(this.nodeId);\n\n                // set the next node id\n                this.nextId = null;\n                this.NodeService.getNextNodeId(this.nodeId).then((nodeId) => {\n                    this.nextId = nodeId;\n                });\n            }\n        }\n    }\n\n    /*\n     * Get the text for the selected node\n     */\n    getSelectedText() {\n\n        // default to show this text if this.nodeId is null\n        var text = 'Select a step';\n\n        if (this.nodeId != null) {\n            // get the step number and title\n            text = this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId);\n        }\n\n        return text;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId the node id\n     * @return the step number and title\n     * example\n     * \"1.4: Explore photosynthesis\"\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    }\n\n    /**\n     * Check if a node is a group node\n     * @param nodeId the node id\n     * @return whether a node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    }\n\n    /**\n     * Go to the previous node\n     */\n    goToPrevNode() {\n\n        /*\n         * Tell the NodeService to go to the previous node. This will set\n         * the new current node id into the TeacherDataService.\n         */\n        this.NodeService.goToPrevNode();\n\n        // set the current node to be selected in the drop down\n        var nodeId = this.TeacherDataService.getCurrentNodeId();\n        this.nodeId = nodeId;\n\n        // go to the authoring view for the node\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId: this.nodeId});\n    }\n\n    /**\n     * Go to the next node\n     */\n    goToNextNode() {\n\n        /*\n         * Tell the NodeService to get the next node. This will return a promise\n         * that will return the next node id.\n         */\n        this.NodeService.goToNextNode().then((nodeId) => {\n\n            // set the current node to be selected in the drop down\n            this.nodeId = nodeId;\n\n            // go to the authoring view for the node\n            this.$state.go('root.project.node', {projectId: this.projectId, nodeId: this.nodeId});\n        });\n    }\n}\n\nStepToolsController.$inject = [\n    '$scope',\n    '$state',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'TeacherDataService',\n    '$mdSidenav'\n];\n\nconst StepTools = {\n    bindings: {\n        showPosition: '<'\n    },\n    template:\n        `<div layout=\"row\" layout-align=\"center center\">\n            <node-icon node-id=\"$ctrl.nodeId\" size=\"18\"></node-icon>\n            <md-select id=\"stepSelectMenu\" md-theme=\"default\" class=\"node-select md-subhead\"\n                       aria-label=\"{{ 'selectAStep' | translate }}\"\n                       ng-model=\"$ctrl.nodeId\"\n                       ng-change=\"$ctrl.nodeIdChanged()\"\n                       md-selected-text=\"$ctrl.getSelectedText()\">\n                <md-option ng-repeat=\"item in $ctrl.idToOrder | toArray | orderBy : 'order'\"\n                           ng-if=\"item.order !== 0\"\n                           value=\"{{ item.$key }}\"\n                           ng-class=\"{'node-select-option--node': !$ctrl.isGroupNode(item.$key)}\">\n                    <div layout=\"row\" layout-align=\"start center\">\n                        <node-icon node-id=\"item.$key\" size=\"18\" custom-class=\"'node-select__icon'\"></node-icon>\n                        <span class=\"node-select__text\">{{ $ctrl.getNodePositionAndTitleByNodeId(item.$key) }}</span>\n                    </div>\n                </md-option>\n            </md-select>\n            <span flex></span>\n            <md-button aria-label=\"{{'previousStep' | translate }}\" class=\"md-icon-button node-nav\"\n                       ng-disabled=\"!$ctrl.prevId\" ng-click=\"$ctrl.goToPrevNode()\">\n                <md-icon> arrow_back </md-icon>\n            </md-button>\n            <md-button aria-label=\"{{ 'nextStep' | translate }}\" class=\"md-icon-button node-nav\"\n                       ng-disabled=\"!$ctrl.nextId\" ng-click=\"$ctrl.goToNextNode()\" style=\"margin-right: 15px\">\n                <md-icon> arrow_forward </md-icon>\n            </md-button>\n        </div>`,\n    controller: StepToolsController\n};\n\nexport default StepTools;\n"]}