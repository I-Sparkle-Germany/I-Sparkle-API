{"version":3,"sources":["projectInfoController.es6"],"names":["ProjectInfoController","$filter","$mdDialog","$rootScope","$state","$stateParams","$scope","$timeout","ConfigService","ProjectService","UtilService","$translate","metadata","getProjectMetadata","metadataAuthoring","getConfigParam","processMetadataAuthoring","fields","f","length","field","metadataField","key","type","choicesMapping","choices","c","choice","userCheckedThisMetadataField","metadataFieldChoiceIndex","metadataFieldChoice","choiceText","userLocale","getLocale","i18nMapping","i18n","i18nMappingContainingChoiceTextArray","Object","values","filter","onei18nMapping","indexOf","i18nMappingContainingChoiceText","getMetadataChoiceText","checkedChoices","checked","push","save","saveProject","$inject"],"mappings":"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","file":"projectInfoController.js","sourcesContent":["'use strict';\n\nclass ProjectInfoController {\n\n    constructor($filter,\n                $mdDialog,\n                $rootScope,\n                $state,\n                $stateParams,\n                $scope,\n                $timeout,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n\n        // process metadata\n        this.metadata = this.ProjectService.getProjectMetadata();\n        this.metadataAuthoring = this.ConfigService.getConfigParam(\"projectMetadataSettings\");\n        this.processMetadataAuthoring();\n\n    };\n\n    processMetadataAuthoring() {\n\n        let metadataAuthoring = this.metadataAuthoring;\n\n        if (metadataAuthoring != null) {\n\n            let fields = metadataAuthoring.fields;\n\n            for (let f = 0; f < fields.length; f++) {\n                let field = fields[f];\n\n                if (field != null) {\n                    let metadataField = this.metadata[field.key];\n\n                    if (field.type == 'checkbox') {\n                        field.choicesMapping = {};\n                        if (metadataField != null) {\n                            let choices = field.choices;\n\n                            if (choices != null) {\n                                for (let c = 0; c < choices.length; c++) {\n                                    let choice = choices[c];\n\n                                    if (choice != null) {\n                                        // check if user has checked this metadata field\n                                        let userCheckedThisMetadataField = false;\n                                        for (let metadataFieldChoiceIndex = 0; metadataFieldChoiceIndex < metadataField.length; metadataFieldChoiceIndex++) {\n                                            let metadataFieldChoice = metadataField[metadataFieldChoiceIndex];\n                                            if (metadataFieldChoice != null && metadataFieldChoice == choice) {\n                                                userCheckedThisMetadataField = true;\n                                                break;\n                                            }\n                                        }\n                                        if (userCheckedThisMetadataField) {\n                                            field.choicesMapping[choice] = true;\n                                        } else {\n                                            field.choicesMapping[choice] = false;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else if (field.type == 'radio') {\n\n                    }\n                }\n            }\n        }\n    };\n\n\n    // returns the choice text that is appropriate for user's locale\n    getMetadataChoiceText(choice) {\n        let choiceText = choice;\n\n        // see if there is choice text in this user's locale\n        let userLocale = this.ConfigService.getLocale();  // user's locale\n        let i18nMapping = this.metadataAuthoring.i18n; // texts in other languages\n        let i18nMappingContainingChoiceTextArray = Object.values(i18nMapping).filter(function (onei18nMapping) {\n            return Object.values(onei18nMapping).indexOf(choice) != -1;\n        });\n        if (i18nMappingContainingChoiceTextArray != null && i18nMappingContainingChoiceTextArray.length > 0) {\n            let i18nMappingContainingChoiceText = i18nMappingContainingChoiceTextArray[0]; // shouldn't be more than one, but if so, use the first one we find\n            if (i18nMappingContainingChoiceText[userLocale] != null) {\n                choiceText = i18nMappingContainingChoiceText[userLocale];\n            }\n        }\n        return choiceText;\n    };\n\n    metadataChoiceIsChecked(metadataField, choice) {\n        return this.getMetadataChoiceText(this.metadata[metadataField.key]) == this.getMetadataChoiceText(choice);\n    };\n\n    metadataCheckboxClicked(metadataField, choice) {\n\n        let checkedChoices = [];\n\n        let choices = metadataField.choices;\n        for (let c = 0; c < choices.length; c++) {\n            let choice = choices[c];\n\n            let checked = metadataField.choicesMapping[choice];\n\n            if (checked) {\n                checkedChoices.push(this.getMetadataChoiceText(choice));\n            }\n        }\n\n        this.metadata[metadataField.key] = checkedChoices;\n\n        this.save();\n    };\n\n    metadataRadioClicked(metadataField, choice) {\n        this.metadata[metadataField.key] = this.getMetadataChoiceText(choice);\n\n        this.save();\n    };\n\n    save() {\n        this.ProjectService.saveProject(); // save the project\n    }\n\n}\n\nProjectInfoController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$state',\n    '$stateParams',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default ProjectInfoController;\n"]}