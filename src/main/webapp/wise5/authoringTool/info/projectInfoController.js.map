{"version":3,"sources":["projectInfoController.es6"],"names":["ProjectInfoController","$filter","$mdDialog","$rootScope","$state","$stateParams","$scope","$timeout","ConfigService","ProjectService","UtilService","$translate","metadata","getProjectMetadata","metadataAuthoring","getConfigParam","projectIcons","projectIcon","isEditingProjectIcon","isShowProjectIcon","isShowProjectIconError","isShowProjectIconLoading","loadProjectIcon","processMetadata","registerListeners","$on","event","args","target","setCustomProjectIcon","assetItem","fileName","hide","fields","field","processMetadataAuthoringField","type","processMetadataAuthoringFieldCheckbox","metadataField","key","choices","choicesMapping","choice","hasUserCheckedThisMetadataField","userHasCheckedThisMetadataField","metadataFieldChoice","choiceText","userLocale","getLocale","i18nMapping","i18n","i18nMappingContainingChoiceTextArray","Object","values","filter","onei18nMapping","indexOf","length","i18nMappingContainingChoiceText","getMetadataChoiceText","checkedChoices","isChoiceChecked","push","saveProject","getFeaturedProjectIcons","then","featuredProjectIcons","setFeaturedProjectIcon","showProjectIcon","closeEditProjectIconMode","params","isPopup","$broadcast","showProjectIconLoading","loadProjectIconAfterTimeout","Date","getTime","image","Image","onerror","showProjectIconError","onload","src","$inject"],"mappings":"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","file":"projectInfoController.js","sourcesContent":["'use strict';\n\nclass ProjectInfoController {\n\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $state,\n      $stateParams,\n      $scope,\n      $timeout,\n      ConfigService,\n      ProjectService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$scope = $scope;\n    this.$timeout = $timeout;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.metadata = this.ProjectService.getProjectMetadata();\n    this.metadataAuthoring = this.ConfigService.getConfigParam('projectMetadataSettings');\n    this.projectIcons = [];\n    this.projectIcon = '';\n    this.isEditingProjectIcon = false;\n    this.isShowProjectIcon = false;\n    this.isShowProjectIconError = false;\n    this.isShowProjectIconLoading = false;\n    this.loadProjectIcon();\n    this.processMetadata();\n    this.registerListeners();\n  }\n\n  registerListeners() {\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args.target === 'projectIcon') {\n        this.setCustomProjectIcon(args.assetItem.fileName);\n        this.$mdDialog.hide();\n      }\n    });\n  }\n\n  processMetadata() {\n    if (this.metadataAuthoring != null) {\n      for (let field of this.metadataAuthoring.fields) {\n        this.processMetadataAuthoringField(field);\n      }\n    }\n  }\n\n  processMetadataAuthoringField(field) {\n    if (field != null) {\n      if (field.type === 'checkbox') {\n        this.processMetadataAuthoringFieldCheckbox(field);\n      } else if (field.type === 'radio') {\n        // do nothing. Radio buttons work automatically\n      }\n    }\n  }\n\n  processMetadataAuthoringFieldCheckbox(field) {\n    let metadataField = this.metadata[field.key];\n    if (metadataField != null && field.choices != null) {\n      field.choicesMapping = {};\n      for (let choice of field.choices) {\n        if (choice != null) {\n          field.choicesMapping[choice] =\n              this.hasUserCheckedThisMetadataField(metadataField, choice);\n        }\n      }\n    }\n  }\n\n  hasUserCheckedThisMetadataField(metadataField, choice) {\n    let userHasCheckedThisMetadataField = false;\n    for (let metadataFieldChoice of metadataField) {\n      if (metadataFieldChoice != null && metadataFieldChoice == choice) {\n        userHasCheckedThisMetadataField = true;\n        break;\n      }\n    }\n    return userHasCheckedThisMetadataField;\n  }\n\n  // returns the choice text that is appropriate for user's locale\n  getMetadataChoiceText(choice) {\n    let choiceText = choice;\n    let userLocale = this.ConfigService.getLocale();\n    let i18nMapping = this.metadataAuthoring.i18n;\n    let i18nMappingContainingChoiceTextArray =\n        Object.values(i18nMapping).filter((onei18nMapping) => {\n          return Object.values(onei18nMapping).indexOf(choice) != -1;\n        });\n    if (i18nMappingContainingChoiceTextArray != null &&\n        i18nMappingContainingChoiceTextArray.length > 0) {\n      // shouldn't be more than one, but if so, use the first one we find\n      let i18nMappingContainingChoiceText =\n          i18nMappingContainingChoiceTextArray[0];\n      if (i18nMappingContainingChoiceText[userLocale] != null) {\n        choiceText = i18nMappingContainingChoiceText[userLocale];\n      }\n    }\n    return choiceText;\n  }\n\n  metadataChoiceIsChecked(metadataField, choice) {\n    return this.getMetadataChoiceText(this.metadata[metadataField.key])\n        == this.getMetadataChoiceText(choice);\n  }\n\n  metadataCheckboxClicked(metadataField, choice) {\n    let checkedChoices = [];\n    let choices = metadataField.choices;\n    for (let choice of choices) {\n      let isChoiceChecked = metadataField.choicesMapping[choice];\n      if (isChoiceChecked) {\n        checkedChoices.push(this.getMetadataChoiceText(choice));\n      }\n    }\n    this.metadata[metadataField.key] = checkedChoices;\n    this.ProjectService.saveProject();\n  }\n\n  metadataRadioClicked(metadataField, choice) {\n    this.metadata[metadataField.key] = this.getMetadataChoiceText(choice);\n    this.ProjectService.saveProject();\n  }\n\n  getFeaturedProjectIcons() {\n    this.ProjectService.getFeaturedProjectIcons().then((featuredProjectIcons) => {\n      this.projectIcons = featuredProjectIcons;\n    });\n  }\n\n  setFeaturedProjectIcon(projectIcon) {\n    this.ProjectService.setFeaturedProjectIcon(projectIcon).then(() => {\n      this.projectIcon = 'wise5/authoringTool/projectIcons/' + projectIcon;\n      this.showProjectIcon();\n      this.closeEditProjectIconMode();\n    });\n  }\n\n  chooseCustomProjectIcon() {\n    const params = {\n      isPopup: true,\n      target: 'projectIcon'\n    };\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  setCustomProjectIcon(projectIcon) {\n    this.showProjectIconLoading();\n    this.ProjectService.setCustomProjectIcon(projectIcon).then(() => {\n      this.loadProjectIconAfterTimeout();\n    });\n  }\n\n  /*\n   * Load the project_thumb.png after a timeout to allow time for the image to be updated on the server\n   * and browser. This is to prevent the browser from displaying the previous project_thumb.png.\n   */\n  loadProjectIconAfterTimeout() {\n    this.$timeout(() => {\n      this.loadProjectIcon();\n      this.closeEditProjectIconMode();\n    }, 3000);\n  }\n\n  loadProjectIcon() {\n    this.projectIcon = this.ConfigService.getConfigParam('projectBaseURL') + 'assets/project_thumb.png?timestamp=' + new Date().getTime();\n    const image = new Image();\n    image.onerror = () => {\n      this.showProjectIconError();\n    };\n    image.onload = () => {\n      this.showProjectIcon();\n    };\n    image.src = this.projectIcon;\n  }\n\n  toggleEditProjectIconMode() {\n    this.isEditingProjectIcon = !this.isEditingProjectIcon;\n    if (this.isEditingProjectIcon) {\n      this.getFeaturedProjectIcons();\n    }\n  }\n\n  closeEditProjectIconMode() {\n    this.isEditingProjectIcon = false;\n  }\n\n  showProjectIcon() {\n    this.isShowProjectIcon = true;\n    this.isShowProjectIconError = false;\n    this.isShowProjectIconLoading = false;\n  }\n\n  showProjectIconError() {\n    this.isShowProjectIcon = false;\n    this.isShowProjectIconError = true;\n    this.isShowProjectIconLoading = false;\n  }\n\n  showProjectIconLoading() {\n    this.isShowProjectIcon = false;\n    this.isShowProjectIconError = false;\n    this.isShowProjectIconLoading = true;\n  }\n\n  save() {\n    this.ProjectService.saveProject();\n  }\n}\n\nProjectInfoController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$state',\n    '$stateParams',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default ProjectInfoController;\n"]}