{"version":3,"sources":["authoringToolMainController.es6"],"names":["AuthoringToolMainController","$anchorScroll","$filter","$rootScope","$state","$timeout","ConfigService","ProjectService","TeacherDataService","$translate","projects","getConfigParam","sharedProjects","showCreateProjectView","$on","saveEvent","projectId","p","length","project","id","sp","sharedProject","getProjectByProjectId","projectName","name","projectRunId","runId","projectInfo","message","answer","confirm","copyProject","then","configURL","window","retrieveConfig","componentElement","$","originalBackgroundColor","css","exportProjectURL","getWISEBaseURL","location","href","getNewProjectTemplate","createGroupTitleInput","document","getElementById","focus","projectTitle","metadata","title","alert","projectJSONString","angular","toJson","commitMessage","Date","getTime","registerNewProject","go","data","constraints","previewProjectURL","open","wiseBaseURL","teacherHomePageURL","eventName","category","context","nodeId","componentId","componentType","$inject"],"mappings":"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","file":"authoringToolMainController.js","sourcesContent":["'use strict';\n\nclass AuthoringToolMainController {\n\n    constructor($anchorScroll,\n                $filter,\n                $rootScope,\n                $state,\n                $timeout,\n                ConfigService,\n                ProjectService,\n                TeacherDataService) {\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        // get list of projects owned by this user and shared with this\n        this.projects = this.ConfigService.getConfigParam(\"projects\");\n        this.sharedProjects = this.ConfigService.getConfigParam(\"sharedProjects\");\n\n        this.showCreateProjectView = false;\n\n        this.$rootScope.$on('goHome', () => {\n            // save the go to teacher home event to the server\n            this.saveEvent('goToTeacherHome', 'Navigation', null, null);\n        });\n\n        this.$rootScope.$on('logOut', () => {\n            // save the log out event to the server\n            this.saveEvent('logOut', 'Navigation', null, null);\n        });\n    }\n\n    /**\n     * Get a project by project id\n     * @param projectId the project id\n     * @return the project object that just contains the name and id and run id\n     * if it is associated with a run\n     */\n    getProjectByProjectId(projectId) {\n\n        // loop through all my projects\n        for (var p = 0; p < this.projects.length; p++) {\n            var project = this.projects[p];\n\n            if (project != null) {\n                if (project.id == projectId) {\n                    // we have found the project we want\n                    return project;\n                }\n            }\n        }\n\n        // loop through all the shared projects\n        for (var sp = 0; sp < this.sharedProjects.length; sp++) {\n            var sharedProject = this.sharedProjects[sp];\n\n            if (sharedProject != null) {\n                if (sharedProject.id == projectId) {\n                    // we have found the project we want\n                    return sharedProject;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Copy a project\n     * @param projectId the project to copy\n     */\n    copyProject(projectId) {\n\n        // get the project info\n        var project = this.getProjectByProjectId(projectId);\n\n        // get the project name\n        var projectName = project.name;\n\n        // get the project run id if any\n        var projectRunId = project.runId;\n\n        // get the project info that we will display in the confirm message\n        var projectInfo = projectId + ' ' + projectName;\n\n        if (projectRunId != null) {\n            // add the run id to the info\n            projectInfo += ' (Run ID: ' + projectRunId + ')';\n        }\n\n        /*\n         * the message that we will use to confirm that the author wants to copy\n         * the project\n         */\n        var message = this.$translate('areYouSureYouWantToCopyThisProject') + '\\n\\n' + projectInfo;\n\n        var answer = confirm(message);\n\n        if (answer) {\n            // the author answered yes they want to copy\n\n            // copy the project\n            this.ProjectService.copyProject(projectId).then((projectId) => {\n\n                // save the project copied event to the server\n                this.saveEvent('projectCopied', 'Authoring', null, projectId);\n\n                // refresh the project list\n                var configURL = window.configURL;\n                this.ConfigService.retrieveConfig(configURL).then(() => {\n                    this.projects = this.ConfigService.getConfigParam(\"projects\");\n\n                    // scroll to the top of the page\n                    this.$anchorScroll('top');\n\n                    // briefly highlight the new project to draw attention to it\n                    this.$timeout(() => {\n\n                        // get the component UI element\n                        let componentElement = $(\"#\" + projectId);\n\n                        // save the original background color\n                        let originalBackgroundColor = componentElement.css(\"backgroundColor\");\n\n                        // highlight the background briefly to draw attention to it\n                        componentElement.css(\"background-color\", \"#FFFF9C\");\n\n                        /*\n                         * Use a timeout before starting to transition back to\n                         * the original background color. For some reason the\n                         * element won't get highlighted in the first place\n                         * unless this timeout is used.\n                         */\n                        this.$timeout(() => {\n                            // slowly fade back to original background color\n                            componentElement.css({\n                                'transition': 'background-color 3s ease-in-out',\n                                'background-color': originalBackgroundColor\n                            });\n\n                            /*\n                             * remove these styling fields after we perform\n                             * the fade otherwise the regular mouseover\n                             * background color change will not work\n                             */\n                            this.$timeout(() => {\n                                componentElement.css({\n                                    'transition': '',\n                                    'background-color': ''\n                                });\n                            }, 3000);\n                        });\n                    });\n                });\n            });\n        }\n    }\n\n    /**\n     * Download a project as a zip file\n     * @param projectId the project id\n     */\n    downloadProject(projectId) {\n\n        // save the project downloaded event to the server\n        this.saveEvent('projectDownloaded', 'Authoring', null, projectId);\n\n        // make a request to download the project as a zip file\n        let exportProjectURL = this.ConfigService.getWISEBaseURL() + \"/project/export/\" + projectId;\n        window.location.href = exportProjectURL;\n    }\n\n    /**\n     * The create new project button was clicked\n     */\n    createNewProjectButtonClicked() {\n        // generate a project template for the new project\n        this.project = this.ProjectService.getNewProjectTemplate();\n\n        // show the view where the author enters the title for the new project\n        this.showCreateProjectView = true;\n\n        /*\n         * we are showing the create project view so we will give focus to the\n         * newProjectTitle input element\n         */\n        this.$timeout(() => {\n            var createGroupTitleInput = document.getElementById('newProjectTitle');\n\n            if (createGroupTitleInput != null) {\n                createGroupTitleInput.focus();\n            }\n        });\n    }\n\n    /**\n     * Create a new project\n     */\n    registerNewProject() {\n\n        // get the project title the author has entered\n        var projectTitle = this.project.metadata.title;\n\n        if (projectTitle == null || projectTitle == '') {\n            // the author has not entered a project title\n            alert(this.$translate('pleaseEnterAProjectTitleForYourNewProject'));\n        } else {\n            // the author has entered a project title\n\n            // get the project json string\n            var projectJSONString = angular.toJson(this.project, 4);\n            var commitMessage = this.$translate('projectCreatedOn') + new Date().getTime();\n\n            // create the new project on the server\n            this.ProjectService.registerNewProject(projectJSONString, commitMessage).then((projectId) => {\n                // hide the create project view\n                this.showCreateProjectView = false;\n\n                // save the project created event to the server\n                this.saveEvent('projectCreated', 'Authoring', null, projectId);\n\n                // open the new project in the authoring tool\n                this.$state.go('root.project', {projectId: projectId});\n            });\n        }\n    }\n\n    /**\n     * Cancel the create new project\n     */\n    cancelRegisterNewProject() {\n        // clear the project template\n        this.project = null;\n\n        // hide the create project view\n        this.showCreateProjectView = false;\n    }\n\n    /**\n     * Open a project in the authoring tool\n     * @param projectId the project id to open\n     */\n    openProject(projectId) {\n        this.$state.go('root.project', {projectId:projectId});\n    }\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject(projectId) {\n\n        var data = {};\n        data.constraints = true;\n\n        // save the project previewed event\n        this.saveEvent('projectPreviewed', 'Authoring', data, projectId);\n\n        let previewProjectURL = this.ConfigService.getWISEBaseURL() + \"/project/\" + projectId;\n        window.open(previewProjectURL);\n    }\n\n    /**\n     * Go to the teacher home\n     */\n    goHome() {\n\n        // send the user to the teacher home page\n        let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        let teacherHomePageURL = wiseBaseURL + '/teacher';\n        window.location = teacherHomePageURL;\n    }\n\n    /**\n     * Save an Authoring Tool event\n     * @param eventName the name of the event\n     * @param category the category of the event\n     * example 'Navigation' or 'Authoring'\n     */\n    saveEvent(eventName, category, data, projectId) {\n\n        let context = 'AuthoringTool';\n        let nodeId = null;\n        let componentId = null;\n        let componentType = null;\n\n        if (data == null) {\n            data = {};\n        }\n\n        // save the event to the server\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, eventName, data, projectId);\n    }\n};\n\nAuthoringToolMainController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService'\n];\n\nexport default AuthoringToolMainController;\n"]}