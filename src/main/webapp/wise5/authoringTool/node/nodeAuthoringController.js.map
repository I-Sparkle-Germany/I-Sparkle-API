{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$location","$filter","$scope","$state","$stateParams","$timeout","ConfigService","ProjectService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","summernoteRubricOptions","height","disableDragAndDrop","summernoteRubricHTML","replaceAssetPaths","rubric","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","c","criterion","name","createBranchNodeId","createBranchComponentId","componentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","n","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","go","alert","angular","equals","result","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","nodeTransition","newTransitionCriteria","authoringViewNodeChanged","transitionIndex","criteriaIndex","index","indexOf","splice","createComponent","hash","moveComponentUp","moveComponentDown","answer","deleteComponent","pop","r","singleRemovalCriteria","singleTransitionCriteria","component","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraints","constraint","constraintId","id","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","action","targetId","removalConditional","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","transitionCriteria","view","showConstraints","showEditButtons","showRubric","showCreateBranch","showRubricButton","removeBranch","bp","removeBranchPath","b","setTransitionLogicField","createBranchUpdateTransitions","createBranchUpdateChoiceChosenIds","type","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraints","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","message","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","$inject"],"mappings":"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","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n    constructor($anchorScroll,\n                $location,\n                $filter,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$filter = $filter;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = this.$filter('translate');\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.showEditTransitions = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"scoreChanged\", \"studentDataChanged\"];\n        this.canChangePathOptions = [null, true, false];\n        this.createBranchBranches = [];\n\n        // the available constraint actions\n        this.constraintActions = [\n            {\n                value: \"makeThisNodeNotVisible\",\n                text: this.$translate('makeThisNodeNotVisible')\n            },\n            {\n                value: \"makeThisNodeNotVisitable\",\n                text: this.$translate('makeThisNodeNotVisitable')\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisible\",\n                text: this.$translate('makeAllNodesAfterThisNotVisible')\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisitable\",\n                text: this.$translate('makeAllNodesAfterThisNotVisitable')\n            },\n            {\n                value: \"makeAllOtherNodesNotVisible\",\n                text: this.$translate('makeAllOtherNodesNotVisible')\n            },\n            {\n                value: \"makeAllOtherNodesNotVisitable\",\n                text: this.$translate('makeAllOtherNodesNotVisitable')\n            }\n        ];\n\n        // the available removal conditionals\n        this.removalConditionals = [\n            {\n                value: \"any\",\n                text: this.$translate('any')\n            },\n            {\n                value: \"all\",\n                text: this.$translate('all')\n            }\n        ];\n\n        // the available removal criteria\n        this.removalCriteria = [\n            {\n                value: \"isCompleted\",\n                text: this.$translate('isCompleted'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"score\",\n                text: this.$translate('SCORE'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"scores\",\n                        text: this.$translate('scoresParens')\n                    }\n                ]\n            },\n            {\n                value: \"branchPathTaken\",\n                text: this.$translate('branchPathTaken'),\n                params: [\n                    {\n                        value: \"fromNodeId\",\n                        text: this.$translate('fromNodeID')\n                    },\n                    {\n                        value: \"toNodeId\",\n                        text: this.$translate('toNodeID')\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: this.$translate('choices')\n                    }\n                ]\n            },\n            {\n                value: \"isCorrect\",\n                text: this.$translate('IS_CORRECT'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    }\n                ]\n            },\n            {\n                value: \"isVisible\",\n                text: this.$translate('isVisible'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isVisitable\",\n                text: this.$translate('isVisitable'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isVisited\",\n                text: this.$translate('isVisited'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isPlanningActivityCompleted\",\n                text: this.$translate('isPlanningActivityCompleted')\n            }\n        ];\n\n        // available transitionCriterias\n        this.transitionCriterias = [\n            {\n                value: \"score\",\n                text: this.$translate('SCORE'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"scores\",\n                        text: this.$translate('scoresParens')\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: this.$translate('choices')\n                    }\n                ]\n            }\n        ];\n\n        this.branchCriteria = [\n            {\n                value: \"workgroupId\",\n                text: this.$translate('WORKGROUP_ID')\n            },\n            {\n                value: \"score\",\n                text: this.$translate('SCORE')\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen')\n            },\n            {\n                value: \"random\",\n                text: this.$translate('random')\n            }\n        ];\n\n        // the array of component types that can be created\n        this.componentTypes = [\n            {componentType: 'AudioOscillator', componentName: 'Audio Oscillator'},\n            {componentType: 'ConceptMap', componentName: 'Concept Map'},\n            {componentType: 'Discussion', componentName: 'Discussion'},\n            {componentType: 'Draw', componentName: 'Draw'},\n            {componentType: 'Embedded', componentName: 'Embedded'},\n            {componentType: 'Graph', componentName: 'Graph'},\n            {componentType: 'HTML', componentName: 'HTML'},\n            {componentType: 'Label', componentName: 'Label'},\n            {componentType: 'Match', componentName: 'Match'},\n            {componentType: 'MultipleChoice', componentName: 'Multiple Choice'},\n            {componentType: 'OpenResponse', componentName: 'Open Response'},\n            {componentType: 'OutsideURL', componentName: 'Outside URL'},\n            {componentType: 'Table', componentName: 'Table'}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the step number e.g. 1.3\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        // populate the branch authoring if any\n        this.populateBranchAuthoring();\n\n        // create the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\n\n        // set the summernote rubric options\n        this.summernoteRubricOptions = {\n            height: 300,\n            disableDragAndDrop: true\n        }\n\n        /*\n         * inject the asset paths into the rubric html and set the summernote\n         * rubric html\n         */\n        this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.node.rubric);\n    }\n\n    /**\n     * Populate the branch authoring\n     */\n    populateBranchAuthoring() {\n        if (this.node.transitionLogic != null) {\n\n            // get the number of branches\n            if (this.node.transitionLogic.transitions != null) {\n                this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\n            } else {\n                this.createBranchNumberOfBranches = 0;\n            }\n\n            // loop through all the transitions\n            for (var t = 0; t < this.node.transitionLogic.transitions.length; t++) {\n                var transition = this.node.transitionLogic.transitions[t];\n\n                if (transition != null) {\n\n                    // create a branch object to hold all the related information for that branch\n                    var branch = {};\n\n                    // set the branch number for display purposes\n                    branch.number = t + 1;\n\n                    /*\n                     * set the mapping of all the ids to order for use when choosing which items are\n                     * in the branch path\n                     */\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n                    // an array that will hold all the checked items in the branch path\n                    branch.checkedItemsInBranchPath = [];\n\n                    // set the transition into the branch so we can access it easily later\n                    branch.transition = transition;\n\n                    // add the branch to the array of branches\n                    this.createBranchBranches.push(branch);\n\n                    // get the transition criteria\n                    var criteria = transition.criteria;\n\n                    if (criteria != null) {\n\n                        // loop through all the criterion\n                        for (var c = 0; c < criteria.length; c++) {\n\n                            // get a criterion\n                            var criterion = criteria[c];\n\n                            if (criterion != null) {\n                                var name = criterion.name;\n                                var params = criterion.params;\n\n                                if (params != null) {\n                                    // get the node id and component id params if any\n                                    this.createBranchNodeId = params.nodeId;\n                                    this.createBranchComponentId = params.componentId;\n                                }\n\n                                if (name == 'score') {\n                                    // this is a score criteria\n\n                                    // set the branch criterion to score\n                                    this.createBranchCriterion = 'score';\n\n                                    if (params != null && params.scores != null) {\n                                        // set the scores into the branch object\n                                        branch.scores = params.scores;\n                                    }\n                                } else if (name == 'choiceChosen') {\n                                    // this is a choice chosen criteria\n\n                                    // set the branch criterion to choise chosen\n                                    this.createBranchCriterion = 'choiceChosen';\n\n                                    if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\n                                        // set the choice id into the branch object\n                                        branch.choiceId = params.choiceIds[0];\n                                    }\n\n                                    // get the choices from the component\n                                    var choices = this.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\n\n                                    if (choices != null) {\n                                        // set the choices into the branch object\n                                        branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // get the node ids in the branch path\n                    var nodeIdsInBranch = this.ProjectService.getNodeIdsInBranch(this.nodeId, transition.to);\n\n                    // loop through all the node ids in the branch path\n                    for (var n = 0; n < nodeIdsInBranch.length; n++) {\n\n                        // get a node id in the branch path\n                        var nodeId = nodeIdsInBranch[n];\n\n                        // get the item\n                        var item = branch.items[nodeId];\n\n                        if (item != null) {\n                            // make the item checked\n                            item.checked = true;\n\n                            // add the item to the array of checked items in this branch path\n                            branch.checkedItemsInBranchPath.push(item);\n                        }\n                    }\n\n                    // set the node ids in branch array into the branch object\n                    branch.nodeIdsInBranch = nodeIdsInBranch;\n\n                    if (nodeIdsInBranch.length > 0) {\n\n                        // get the last node id in the branch path\n                        var lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n                        if (lastNodeIdInBranch != null) {\n\n                            var transitionsFromLastNode = this.ProjectService.getTransitionsByFromNodeId(lastNodeIdInBranch);\n\n                            if (transitionsFromLastNode != null && transitionsFromLastNode.length > 0) {\n                                var transition = transitionsFromLastNode[0];\n\n                                if (transition != null) {\n                                    this.createBranchMergePointNodeId = transition.to;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (this.createBranchCriterion == null) {\n                /*\n                 * we have not been able to determine the branch criterion yet\n                 * so we will look at the howToChooseAmongAvailablePaths field\n                 */\n                if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n                    // set the branch criterion to workgroup id\n                    this.createBranchCriterion = 'workgroupId';\n                } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n                    // set the branch criterion to random\n                    this.createBranchCriterion = 'random';\n                }\n            }\n        }\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Launch VLE with this current step as the initial step without constraints\n     */\n    previewStepWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        // perform any node cleanup if necessary\n        //let commitMessage = \"Made changes to Step.\";\n        //this.ProjectService.saveProject(commitMessage);\n\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n        this.$state.go('root.project', {projectId: this.projectId});\n    };\n\n    /**\n     * Display an error saving during advanced authoring, most-likely due to malformed JSON\n     */\n    showSaveErrorAdvancedAuthoring() {\n        alert(this.$translate('saveErrorAdvancedAuthoring'));\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            let result = confirm(this.$translate('confirmUndo'));\n\n            if (result) {\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                // save the project\n                this.ProjectService.saveProject();\n\n                // close the node authoring view\n                this.close();\n            }\n\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Add a new transition for this node.\n     */\n    addNewTransition() {\n        if (this.node.transitionLogic.transitions == null) {\n            this.node.transitionLogic.transitions = [];\n        }\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        if (nodeTransitions.length > 0) {\n            // If this node already has transitions, copy the last one.\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n            let newTransition = {\n                \"to\": lastNodeTransition.to\n            };\n            nodeTransitions.push(newTransition);\n        } else {\n            // Otherwise set the new transition to the current nodeId\n            let newTransition = {\n                \"to\": this.nodeId\n            };\n            nodeTransitions.push(newTransition);\n        }\n    }\n\n    /**\n     * Add a new transition criteria for the specified transition.\n     */\n    addNewTransitionCriteria(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        for (var n = 0; n < nodeTransitions.length; n++) {\n            let nodeTransition = nodeTransitions[n];\n            if (nodeTransition == transition) {\n                if (nodeTransition.criteria == null) {\n                    nodeTransition.criteria = [];\n                }\n                let newTransitionCriteria = {\n                    \"name\":\"\",\n                    \"params\": {\n                        \"nodeId\": \"\",\n                        \"componentId\": \"\"\n                    }\n                };\n                nodeTransition.criteria.push(newTransitionCriteria);\n            }\n        }\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Author chose/updated a transition criteria, which is saved in this.selectedTransitionCriteria.\n     * The original transitionCriteria is passed in as originalTransitionCriteria parameter.\n     * @param originalTransitionCriteria\n     */\n    transitionCriteriaChanged(transitionIndex, criteriaIndex, newTransitionCriteria) {\n        this.node.transitionLogic.transitions[transitionIndex].criteria[criteriaIndex] = newTransitionCriteria;\n    }\n\n    /**\n     * Deletes the specified transition from this node\n     */\n    deleteTransition(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n\n        let index = nodeTransitions.indexOf(transition);\n        if (index > -1) {\n            nodeTransitions.splice(index, 1);\n        }\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n\n    /**\n     * Save transitions for this node\n     */\n    saveTransitions() {\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showEditTransitions = false;\n    }\n\n    /**\n     * Create a component in this node\n     */\n    createComponent() {\n\n        // create a component and add it to this node\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // Scroll to the bottom of the page where the new component was added\n        this.$timeout(() => {\n            this.$location.hash('bottom');\n            this.$anchorScroll();\n        });\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        // ask the user to confirm the delete\n        let answer = confirm(this.$translate('confirmDeleteComponent'));\n\n        if (answer) {\n            // the user confirmed yes\n\n            // delete the component from the node\n            this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n            // save the project\n            this.ProjectService.saveProject();\n        }\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            alert(this.$translate('noUndoAvailable'));\n\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            // ask the user to confirm the delete\n            let result = confirm(this.$translate('confirmUndoLastChange'));\n\n            if (result) {\n                // perform any node cleanup if necessary\n                this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n                // get the previous version of the node\n                var nodeCopy = this.undoStack.pop();\n\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                // get the node\n                this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                // get the components in the node\n                this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n\n        }\n    }\n\n    /**\n     * Get the removal criteria params for a removal criteria name\n     * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n     * @return the params for the given removal criteria name\n     */\n    getRemovalCriteriaParamsByName(name) {\n        var params = [];\n\n        if (name != null) {\n\n            // loop through all the available removal criteria\n            for (var r = 0; r < this.removalCriteria.length; r++) {\n\n                // get a single removal criteria\n                var singleRemovalCriteria = this.removalCriteria[r];\n\n                if (singleRemovalCriteria != null) {\n\n                    if (singleRemovalCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleRemovalCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * Get the transition criteria params for a transition criteria name\n     * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n     * @return the params for the given transition criteria name\n     */\n    getTransitionCriteriaParamsByName(name) {\n        let params = [];\n\n        if (name != null) {\n\n            // loop through all the available transition criteria\n            for (let t = 0; t < this.transitionCriterias.length; t++) {\n\n                // get a single transition criteria\n                let singleTransitionCriteria = this.transitionCriterias[t];\n\n                if (singleTransitionCriteria != null) {\n\n                    if (singleTransitionCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleTransitionCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * Get the choices of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choices from the component\n     */\n    getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n\n        var choices = [];\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null && component.choices != null) {\n            // get the choices\n            choices = component.choices;\n        }\n\n        return choices;\n    }\n\n    /**\n     * Get the choice type of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choice type e.g. 'radio' or 'checkbox'\n     */\n    getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n\n        var choiceType = null;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null && component.choiceType != null) {\n            // get the choice type\n            choiceType = component.choiceType;\n        }\n\n        return choiceType;\n    }\n\n    /**\n     * Get the next available constraint id for a node\n     * @param nodeId the node id\n     * @return a constraint id that hasn't been used yet\n     */\n    getNewNodeConstraintId(nodeId) {\n\n        var newNodeConstraintId = null;\n\n        var usedConstraintIds = [];\n\n        // get the node content\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the constraints\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n\n                    // get a constraint\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the id of the constraint\n                        var constraintId = constraint.id;\n\n                        // add the constraint id to the array of used constraint ids\n                        usedConstraintIds.push(constraintId);\n                    }\n                }\n            }\n        }\n\n        // counter used for finding a constraint id that hasn't been used yet\n        var constraintCounter = 1;\n\n        // loop until we have found an unused constraint id\n        while (newNodeConstraintId == null) {\n\n            // create a potential constraint id\n            var potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n\n            // check if the constraint id has been used already\n            if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n                // the constraint id has not been used so we can use it\n                newNodeConstraintId = potentialNewNodeConstraintId;\n            } else {\n                /*\n                 * the constraint id has been used so we will increment the\n                 * counter to try another contraint id\n                 */\n                constraintCounter++;\n            }\n        }\n\n        return newNodeConstraintId;\n    }\n\n    /**\n     * Add a constraint\n     */\n    addConstraint() {\n\n        // get a new constraint id\n        var newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n\n        // create the constraint object\n        var constraint = {};\n        constraint.id = newNodeConstraintId;\n        constraint.action = null;\n        constraint.targetId = this.nodeId;\n        constraint.removalConditional = \"all\";\n        constraint.removalCriteria = [];\n\n        // create a removal criteria\n        var removalCriteria = {};\n        removalCriteria.name = \"\";\n        removalCriteria.params = {};\n\n        // add the removal criteria to the constraint\n        constraint.removalCriteria.push(removalCriteria);\n\n        // create the constraints array if it does not exist\n        if (this.node.constraints == null) {\n            this.node.constraints = [];\n        }\n\n        // add the constraint to the node\n        this.node.constraints.push(constraint);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a constraint\n     * @param constraintIndex delete the constraint at the index\n     */\n    deleteConstraint(constraintIndex) {\n\n        if (constraintIndex != null) {\n            // get the node content\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // get the constraints\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // remove the constraint at the given index\n                    constraints.splice(constraintIndex, 1);\n                }\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Add a removal criteria\n     * @param constraint add the removal criteria to this constraint\n     */\n    addRemovalCriteria(constraint) {\n\n        if (constraint != null) {\n\n            // create the removal criteria\n            var removalCriteria = {};\n            removalCriteria.name = \"\";\n            removalCriteria.params = {};\n\n            // add the removal criteria to the constraint\n            constraint.removalCriteria.push(removalCriteria);\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a removal criteria from a constraint\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n        if (constraint != null) {\n\n            // get all the removal criteria\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n                // remove the single removal criteria\n                removalCriteria.splice(removalCriteriaIndex, 1);\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a transition criteria from a transition\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n        if (transition != null) {\n\n            // get all the transition criteria\n            var transitionCriterias = transition.criteria;\n\n            if (transitionCriterias != null) {\n                // remove the single transition criteria\n                transitionCriterias.splice(transitionCriteriaIndex, 1);\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist\n     */\n    removalCriteriaNameChanged(criteria) {\n\n        if (criteria != null) {\n            // clear the params\n            criteria.params = {};\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist\n     */\n    transitionCriteriaNameChanged(transitionCriteria) {\n\n        if (transitionCriteria != null) {\n            // clear the params\n            transitionCriteria.params = {};\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A button to author a specific view of the node was clicked\n     * @param view the view name\n     */\n    nodeAuthoringViewButtonClicked(view) {\n\n        if (view == 'addComponent') {\n            // toggle the add component view and hide all the other views\n            this.showCreateComponent = !this.showCreateComponent;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n        } else if (view == 'editTransitions') {\n            // toggle the edit transitions view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = !this.showEditTransitions;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubricButton = false;\n            this.showCreateBranch = false;\n        } else if (view == 'editConstraints') {\n            // toggle the edit constraints view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = !this.showConstraints;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n        } else if (view == 'editButtons') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = !this.showEditButtons;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n        } else if (view == 'editRubric') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = !this.showRubric;\n            this.showCreateBranch = false;\n        } else if (view == 'createBranch') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = !this.showCreateBranch;\n        }\n    }\n\n    /**\n     * The author has changed the number of branch paths\n     */\n    createBranchNumberOfBranchesChanged() {\n\n        if (this.createBranchNumberOfBranches == 0) {\n            // the author has set the number of branch paths to 0 which is not allowed\n            alert(this.$translate('errorYouCantHave0BranchPaths'));\n\n            // revert the number of branch paths value\n            this.createBranchNumberOfBranches = this.createBranchBranches.length;\n        } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\n            /*\n             * the author is reducing the number of branches so we want to\n             * confirm they want to do so\n             */\n            var answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:createBranchNumberOfBranches}));\n\n            if (answer) {\n                // they answered yes\n\n                if (this.createBranchNumberOfBranches == 1) {\n                    /*\n                     * the author has removed all the branch paths so we will\n                     * remove the branch\n                     */\n                    this.removeBranch();\n                } else {\n                    /*\n                     * the author is reducing the number of branch paths but\n                     * not removing all of them\n                     */\n\n                    // loop through all the branch paths\n                    for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n                        if (bp >= this.createBranchNumberOfBranches) {\n                            // this is a branch we want to remove\n                            var branch = this.createBranchBranches[bp];\n                            this.removeBranchPath(branch);\n\n                            /*\n                             * decrement the counter back one because we have\n                             * just removed a branch path\n                             */\n                            bp--;\n                        }\n                    }\n                }\n            } else {\n                // they answered no so we will revert the number of branches value\n                this.createBranchNumberOfBranches = this.createBranchBranches.length;\n            }\n        } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\n            // the author is increasing the number of branches\n\n            // loop for the number of branches and create new branches objects\n            for (var b = 0; b < this.createBranchNumberOfBranches; b++) {\n\n                if (b >= this.createBranchBranches.length) {\n                    /*\n                     * we do not have a branch object for this branch number so\n                     * we will create it\n                     */\n\n                    // create the branch object\n                    var branch = {};\n\n                    // set the branch number\n                    branch.number = b + 1;\n\n                    /*\n                     * set the mapping of all the ids to order for use when choosing which items are\n                     * in the branch path\n                     */\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n                    // add the branch to the array of branches\n                    this.createBranchBranches.push(branch);\n\n                    // create a transition to represent the branch\n                    var transition = {};\n\n                    if (this.createBranchCriterion == 'score') {\n                        // the branch is based on score\n\n                        // create a score criterion\n                        var criterion = {};\n                        criterion.name = this.createBranchCriterion;\n                        criterion.params = {};\n                        criterion.params.scores = [];\n\n                        if (this.createBranchNodeId != null) {\n                            // set the node for which to look for the score\n                            criterion.params.nodeId = this.createBranchNodeId;\n                        }\n\n                        if (this.createBranchComponentId != null) {\n                            // set the component for which to look for the score\n                            criterion.params.componentId = this.createBranchComponentId;\n                        }\n\n                        transition.criteria = [];\n                        transition.criteria.push(criterion);\n                    } else if (this.createBranchCriterion == 'choiceChosen') {\n                        // the branch is based on choice chosen\n                        var criterion = {};\n                        criterion.name = this.createBranchCriterion;\n                        criterion.params = {};\n                        criterion.params.choiceIds = [];\n\n                        if (this.createBranchNodeId != null) {\n                            // set the node for which to look for the score\n                            criterion.params.nodeId = this.createBranchNodeId;\n                        }\n\n                        if (this.createBranchComponentId != null) {\n                            // set the component for which to look for the score\n                            criterion.params.componentId = this.createBranchComponentId;\n                        }\n\n                        transition.criteria = [];\n                        transition.criteria.push(criterion);\n                    } else if (this.createBranchCriterion == 'workgroupId') {\n                        // workgroup id branching does not require a transition criterion\n                    } else if (this.createBranchCriterion == 'random') {\n                        // random branching does not require a transition criterion\n                    }\n\n                    // add the transition\n                    this.node.transitionLogic.transitions.push(transition);\n\n                    // save a reference to the transition in the branch\n                    branch.transition = transition;\n                }\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The branch criterion has changed\n     */\n    createBranchCriterionChanged() {\n\n        if (this.createBranchCriterion != null) {\n\n            // get this node id\n            var nodeId = this.node.id;\n\n            if (this.createBranchCriterion == 'workgroupId') {\n                // the branch is based on workgroup id\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'score') {\n                // the branch is based on score\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'score');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'choiceChosen') {\n                // the branch is based on choice chosen\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'choiceChosen');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'random') {\n                // the branch is based on random assignment\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            }\n        }\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The create branch node id has changed\n     */\n    createBranchNodeIdChanged() {\n\n        this.createBranchComponentId = null;\n\n        // get the selected node\n        var node = this.ProjectService.getNodeById(this.createBranchNodeId);\n\n        if (node != null) {\n\n            // get the components of the selected node\n            var components = node.components;\n\n            if (components != null) {\n                if (components.length == 1) {\n                    /*\n                     * there is only one component in the node so we will\n                     * automatically select it in the drop down\n                     */\n                    var component = components[0];\n                    this.createBranchComponentId = component.id;\n                }\n            }\n        }\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The create branch component id has changed\n     */\n    createBranchComponentIdChanged() {\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    createBranchUpdateTransitions() {\n\n        // loop through all the branches\n        for (var b = 0; b < this.createBranchBranches.length; b++) {\n\n            // get a branch object\n            var branch = this.createBranchBranches[b];\n\n            if (branch != null) {\n\n                // get the transition corresponding to the branch\n                var transition = branch.transition;\n\n                if (transition != null) {\n\n                    if (this.createBranchCriterion == 'choiceChosen') {\n                        // we are branching based on choice chosen\n\n                        // clear the criteria array\n                        transition.criteria = [];\n\n                        // create a new choice chosen criterion\n                        var criterion = {};\n                        criterion.name = 'choiceChosen';\n                        criterion.params = {};\n                        criterion.params.nodeId = this.createBranchNodeId;\n                        criterion.params.componentId = this.createBranchComponentId;\n                        criterion.params.choiceIds = [];\n\n                        // add the criterion to the array of criteria\n                        transition.criteria.push(criterion);\n\n                        /*\n                         * clear the choice id. we will set the choice id in\n                         * the branch object when we call createBranchUpdateChoiceChosenIds()\n                         */\n                        branch.choiceId = null;\n\n                        /*\n                         * clear the scores since we don't need it in choice\n                         * chosen branching\n                         */\n                        branch.scores = null;\n                    } else if (this.createBranchCriterion == 'score') {\n                        // we are branching based on score\n\n                        // clear the criteria array\n                        transition.criteria = [];\n\n                        // create a new score criterion\n                        var criterion = {};\n                        criterion.name = 'score';\n                        criterion.params = {};\n                        criterion.params.nodeId = this.createBranchNodeId;\n                        criterion.params.componentId = this.createBranchComponentId;\n                        criterion.params.scores = [];\n\n                        // re-use scores if available\n\n                        // add the criterion to the array of criteria\n                        transition.criteria.push(criterion);\n\n                        /*\n                         * clear the choice id since we don't need it in score\n                         * branching\n                         */\n                        branch.choiceId = null;\n\n                        // set the scores into the branch object\n                        branch.scores = criterion.params.scores;\n                    } else if (this.createBranchCriterion == 'workgroupId') {\n                        // we are branching based on workgroup id\n\n                        /*\n                         * remove the criteria array since it is not used for\n                         * branching based on workgroup id\n                         */\n                        delete transition['criteria'];\n\n                        // clear the node id and component id\n                        this.createBranchNodeId = null;\n                        this.createBranchComponentId = null;\n\n                        /*\n                         * clear the choice id and scores fields since we don't\n                         * need them in workgroup id branching\n                         */\n                        branch.choiceId = null;\n                        branch.scores = null;\n                    } else if (this.createBranchCriterion == 'random') {\n                        // we are branching based on random assignment\n\n                        /*\n                         * remove the criteria array since it is not used for\n                         * branching based on random assignment\n                         */\n                        delete transition['criteria'];\n\n                        // clear the node id and component id\n                        this.createBranchNodeId = null;\n                        this.createBranchComponentId = null;\n\n                        /*\n                         * clear the choice id and scores fields since we don't\n                         * need them in random branching\n                         */\n                        branch.choiceId = null;\n                        branch.scores = null;\n                    }\n                }\n            }\n        }\n\n        if (this.createBranchCriterion == 'choiceChosen') {\n            /*\n             * the branching is based on choice chosen so we will populate the\n             * choice ids\n             */\n            this.createBranchUpdateChoiceChosenIds();\n        }\n    }\n\n    /**\n     * Automatically populate the selected choices if the branch is based on\n     * choice chosen and the selected component is a multiple choice component\n     */\n    createBranchUpdateChoiceChosenIds() {\n\n        // get the node id and component id\n        var nodeId = this.createBranchNodeId;\n        var componentId = this.createBranchComponentId;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n            if (component.type == 'MultipleChoice') {\n                // the component is a multiple choice component\n\n                // get the choices from the component\n                var choices = component.choices;\n\n                if (choices != null) {\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n\n                            // get the fields of the choice\n                            var id = choice.id;\n                            var text = choice.text;\n                            var feedback = choice.feedback;\n                            var isCorrect = choice.isCorrect;\n\n                            // get the branch that corresponds to the choice\n                            var branch = this.createBranchBranches[c];\n\n                            if (branch != null) {\n                                // get the choice for this branch\n                                branch.choiceId = id;\n\n                                // make a copy of the choices from the component\n                                branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n\n                                // get the transition corresponding to the branch\n                                var transition = branch.transition;\n\n                                if (transition != null) {\n\n                                    /*\n                                     * get the first transition criterion. we will assume\n                                     * there is only one transition criterion\n                                     */\n                                    var criterion = transition.criteria[0];\n\n                                    if (criterion != null) {\n\n                                        // get the params\n                                        var params = criterion.params;\n\n                                        if (params != null) {\n\n                                            // set the node id and component id\n                                            params.nodeId = nodeId;\n                                            params.componentId = componentId;\n\n                                            if (this.createBranchCriterion == 'choiceChosen') {\n                                                // set the choice id\n                                                params.choiceIds = [];\n                                                params.choiceIds.push(id);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * A step was clicked in the create branch authoring view\n     * @param branch the branch path\n     * @param item the step that was clicked\n     */\n    createBranchStepClicked(branch, item) {\n\n        // get all the steps in order\n        var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\n\n        // an array that will hold the items that were checked\n        branch.checkedItemsInBranchPath = [];\n        var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n        // an array that will hold the node ids that were checked\n        branch.nodeIdsInBranch = [];\n\n        // used to hold the previously checked node id\n        var previousCheckedNodeId = null;\n\n        // the node id after the node that was clicked\n        var nodeIdAfter = null;\n\n        /*\n         * loop through all the items in order and set the transitions so that\n         * the steps in a branch path transition to one after the other\n         */\n        for (var i = 0; i < orderedItems.length; i++) {\n            var orderedItem = orderedItems[i];\n\n            if (orderedItem != null && orderedItem.checked) {\n                // the item is checked\n\n                if (previousCheckedNodeId != null) {\n                    // make the previous node id point to the current item\n                    var previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n                    if (previousCheckedNode != null) {\n\n                        // get the transition logic\n                        var transitionLogic = previousCheckedNode.transitionLogic;\n\n                        if (transitionLogic != null) {\n\n                            if (transitionLogic.transitions != null) {\n\n                                // clear the transitions\n                                transitionLogic.transitions = [];\n\n                                // create a new transition object to the current item\n                                var transition = {};\n                                transition.to = orderedItem.$key;\n\n                                // add the transition\n                                transitionLogic.transitions.push(transition);\n                            }\n                        }\n                    }\n                }\n\n                // add the item to the checked items array\n                checkedItemsInBranchPath.push(orderedItem);\n\n                // add the node id to the array of node ids in the branch path\n                branch.nodeIdsInBranch.push(orderedItem.$key);\n\n                // remember the previously checked node id\n                previousCheckedNodeId = orderedItem.$key;\n            }\n\n            // get the previous ordered item (checked or unchecked)\n            var previousOrderedItem = orderedItems[i - 1];\n\n            if (previousOrderedItem != null) {\n                if (previousOrderedItem.$key == item.$key) {\n                    /*\n                     * the previous item was the node that was checked/unchecked\n                     * so we will remember this item because it is the node\n                     * that comes after the node that was checked/unchecked\n                     */\n                    nodeIdAfter = orderedItem.$key;\n                }\n            }\n        }\n\n        if (this.createBranchMergePointNodeId != null) {\n            /*\n             * the merge point is specified so we will make the last checked\n             * node in this branch path point to the merge point\n             */\n\n            /*\n             * this is the last node in the branch path so we will make it\n             * transition to the merge point\n             */\n            var node = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    if (transitionLogic.transitions != null) {\n\n                        // clear the transitions\n                        transitionLogic.transitions = [];\n\n                        // make a transition to the merge point\n                        var transition = {};\n                        transition.to = this.createBranchMergePointNodeId;\n\n                        // add the transition\n                        transitionLogic.transitions.push(transition);\n                    }\n                }\n            }\n        }\n\n        // get the branch number\n        var branchNumber = branch.number;\n\n        // get the node id that was clicked\n        var nodeId = item.$key;\n\n        // get the transition that corresponds to the branch\n        var transition = this.node.transitionLogic.transitions[branchNumber - 1];\n\n        var firstNodeId = null;\n\n        /*\n         * update the branch point transition in case the first step in the\n         * branch path has changed\n         */\n        if (transition != null) {\n\n            if (checkedItemsInBranchPath.length == 0) {\n                // there are no steps in the path\n                transition.to = null;\n            } else {\n                // get the first step in the path\n                var firstCheckedItem = checkedItemsInBranchPath[0];\n\n                if (firstCheckedItem != null) {\n                    // set the branch point transition to the first step in the path\n                    firstNodeId = firstCheckedItem.$key;\n                    transition.to = firstNodeId;\n                }\n            }\n        }\n\n        // get the node that was clicked\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // remove all branch path taken constraints from the node\n            this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n            if (item.checked) {\n                // the item was checked so we will add the branch path taken constraints to it\n\n                /*\n                 * the branch path taken constraints will be from this node to\n                 * the first node in the branch path\n                 */\n                var fromNodeId = this.nodeId;\n                var toNodeId = firstNodeId;\n\n                // add the branch path taken constraints\n                this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\n            } else {\n                /*\n                 * the item was unchecked so we will change its transition to\n                 * point to the node that comes right after it\n                 */\n                this.ProjectService.setTransition(nodeId, nodeIdAfter);\n            }\n        }\n\n        /*\n         * update the constraints of other steps in the branch path if necessary.\n         * loop through all theh checked items in the path\n         */\n        for (var n = 0; n < checkedItemsInBranchPath.length; n++) {\n\n            // get a checked item in the branch path\n            var item = checkedItemsInBranchPath[n];\n            var itemNodeId = item.$key;\n\n            // remove all branch path taken constraints from the node\n            this.ProjectService.removeBranchPathTakenNodeConstraints(itemNodeId);\n\n            /*\n             * the branch path taken constraints will be from this node to\n             * the first node in the branch path\n             */\n            var fromNodeId = this.nodeId;\n            var toNodeId = firstNodeId;\n\n            // add the branch path taken constraints\n            this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The score for a path has changed in the branch authoring\n     * @param branch the branch for which the score has changed\n     */\n    createBranchScoreChanged(branch) {\n\n        if (branch != null) {\n\n            // get the transition of the branch\n            var transition = branch.transition;\n\n            if (transition != null) {\n\n                // get the scores\n                var scores = branch.scores;\n\n                if (scores != null) {\n\n                    // get the criteria\n                    var criteria = transition.criteria;\n\n                    if (criteria != null) {\n\n                        // get the first criteria. we will assume there is only one criteria\n                        var criterion = criteria[0];\n\n                        if (criterion != null) {\n\n                            // get the params of the criterion\n                            var params = criterion.params;\n\n                            if (params != null) {\n\n                                // update the scores into the params\n                                params.scores = scores;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The merge point has changed in the branch authoring\n     */\n    createBranchMergePointNodeIdChanged() {\n\n        // get the merge point node id\n        var createBranchMergePointNodeId = this.createBranchMergePointNodeId;\n\n        var branches = this.createBranchBranches;\n\n        // loop through all the branches\n        for (var b = 0; b < branches.length; b++) {\n            var branch = branches[b];\n\n            if (branch != null) {\n\n                // get the node ids in the branch path\n                var nodeIdsInBranch = branch.nodeIdsInBranch;\n\n                if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\n\n                    // get the last node id in the branch path\n                    var lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n                    if (lastNodeIdInBranchPath != null) {\n\n                        // get the last node in the branch path\n                        var lastNodeInBranchPath = this.ProjectService.getNodeById(lastNodeIdInBranchPath);\n\n                        if (lastNodeInBranchPath != null) {\n\n                            // get the transition logic of the last node\n                            var transitionLogic = lastNodeInBranchPath.transitionLogic;\n\n                            if (transitionLogic != null) {\n\n                                if (transitionLogic.transitions != null) {\n\n                                    // clear the transitions\n                                    transitionLogic.transitions = [];\n\n                                    // make a new transition to the merge point\n                                    var transition = {};\n                                    transition.to = createBranchMergePointNodeId;\n\n                                    // add the transition\n                                    transitionLogic.transitions.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The remove branch button was clicked\n     */\n    removeBranchButtonClicked() {\n\n        // ask the user if they are sure they want to remove the branch\n        var message = this.$translate('areYouSureYouWantToRemoveTheBranch');\n        var answer = confirm(message);\n\n        if (answer) {\n            // the user answered yes so we will remove the branch\n            this.removeBranch();\n        }\n    }\n\n    /**\n     * Remove the branch from the step by removing all the branch paths\n     */\n    removeBranch() {\n\n        // loop through all the branch paths\n        for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n            // remove a branch path\n            var branchPath = this.createBranchBranches[bp];\n            this.removeBranchPath(branchPath);\n\n            /*\n             * shift the counter back one because we have just removed a branch\n             * path\n             */\n            bp--;\n        }\n\n        // get the node id of this node (which is the branch point)\n        var nodeId = this.node.id;\n\n        // get the node id that comes after this node\n        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n\n        /*\n         * update the transition of this step to point to the next step\n         * in the project. this may be different than the next step\n         * if it was still the branch point.\n         */\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n\n        // clear the transition logic fields\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\n\n        // clear the branch authoring fields\n        this.createBranchNumberOfBranches = 1;\n        this.createBranchCriterion = null;\n        this.createBranchNodeId = null;\n        this.createBranchComponentId = null;\n        this.createBranchMergePointNodeId = null;\n\n        /*\n         * branch paths are determined by the transitions. since there is now\n         * just one transition, we will create a single branch object to\n         * represent it.\n         */\n\n        // create a branch object to hold all the related information for that branch\n        var branch = {};\n\n        // set the branch number for display purposes\n        branch.number = 1;\n\n        /*\n         * set the mapping of all the ids to order for use when choosing which items are\n         * in the branch path\n         */\n        branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n        // an array that will hold all the checked items in the branch path\n        branch.checkedItemsInBranchPath = [];\n\n        var transition = null;\n\n        // get the transition from the node\n        var transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions != null && transitions.length > 0) {\n            transition = transitions[0];\n        }\n\n        // set the transition into the branch so we can access it easily later\n        branch.transition = transition;\n\n        // add the branch to the array of branches\n        this.createBranchBranches.push(branch);\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Remove a branch path by removing all the branch path taken constraints\n     * from the steps in the branch path, resetting the transitions in the\n     * steps in the branch path, and removing the transition corresponding to\n     * the branch path in this branch point node.\n     * @param branch the branch object\n     */\n    removeBranchPath(branch) {\n\n        if (branch != null) {\n\n            // get the checked items in the branch path\n            var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n            if (checkedItemsInBranchPath != null) {\n\n                // loop through all the checked items in the branch path\n                for (var i = 0; i < checkedItemsInBranchPath.length; i++) {\n\n                    // get an item in the branch path\n                    var checkedItem = checkedItemsInBranchPath[i];\n\n                    if (checkedItem != null) {\n\n                        // get the node id of the checked item\n                        var nodeId = checkedItem.$key;\n\n                        // remove the branchPathTaken constraints from the step\n                        this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n                        /*\n                         * update the transition of the step to point to the next step\n                         * in the project. this may be different than the next step\n                         * if it was still in the branch path.\n                         */\n                        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n                        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n                    }\n                }\n            }\n\n            // get the index of the branch path\n            var branchPathIndex = this.createBranchBranches.indexOf(branch);\n\n            // remove the branch path\n            this.createBranchBranches.splice(branchPathIndex, 1);\n\n            // remove the transition the corresponds to the branch path\n            this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\n        }\n    }\n\n    /**\n     * The author has changed the step rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the step rubric\n        this.node.rubric = html;\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n};\n\nNodeAuthoringController.$inject = [\n    '$anchorScroll',\n    '$location',\n    '$filter',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default NodeAuthoringController;\n"]}