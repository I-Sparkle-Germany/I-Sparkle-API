{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$location","$scope","$state","$stateParams","$timeout","$translate","ConfigService","ProjectService","UtilService","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","componentTypes","componentType","componentName","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","previewProjectURL","getConfigParam","previewStepURL","window","open","commitMessage","saveProject","$broadcast","nodeToExit","go","then","saveErrorAdvancedAuthoringMsg","alert","angular","equals","confirmUndo","result","confirm","replaceNode","close","transitionLogic","transitions","nodeTransitions","length","lastNodeTransition","newTransition","to","push","transition","n","nodeTransition","criteria","newTransitionCriteria","authoringViewNodeChanged","transitionIndex","criteriaIndex","index","indexOf","splice","createComponent","hash","componentId","moveComponentUp","moveComponentDown","confirmDeleteComponent","answer","deleteComponent","noUndoAvailable","confirmUndoLastChange","pop","name","r","singleRemovalCriteria","t","singleTransitionCriteria","choices","component","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraints","c","constraint","constraintId","id","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","action","targetId","removalConditional","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","transitionCriteria","view","showConstraints","showEditButtons","$inject"],"mappings":"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","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n    constructor($anchorScroll,\n                $location,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                $translate,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.showEditTransitions = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"scoreChanged\", \"studentDataChanged\"];\n        this.canChangePathOptions = [null, true, false];\n        \n        // the available constraint actions\n        this.constraintActions = [\n            {\n                value: \"makeThisNodeNotVisible\",\n                text: \"Make this node not visible\"\n            },\n            {\n                value: \"makeThisNodeNotVisitable\",\n                text: \"Make this node not visitable\"\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisible\",\n                text: \"Make all nodes after this not visible\"\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisitable\",\n                text: \"Make all nodes after this not visitable\"\n            },\n            {\n                value: \"makeAllOtherNodesNotVisible\",\n                text: \"Make all other nodes not visible\"\n            },\n            {\n                value: \"makeAllOtherNodesNotVisitable\",\n                text: \"Make all other nodes not visitable\"\n            }\n        ];\n        \n        // the available removal conditionals\n        this.removalConditionals = [\n            {\n                value: \"any\",\n                text: \"Any\"\n            },\n            {\n                value: \"all\",\n                text: \"All\"\n            }\n        ];\n        \n        // the available removal criteria\n        this.removalCriteria = [\n            {\n                value: \"isCompleted\",\n                text: \"Is Completed\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    }\n                ]\n            },\n            {\n                value: \"score\",\n                text: \"Score\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    },\n                    {\n                        value: \"componentId\",\n                        text: \"Component Id\"\n                    },\n                    {\n                        value: \"scores\",\n                        text: \"Score(s)\"\n                    }\n                ]\n            },\n            {\n                value: \"branchPathTaken\",\n                text: \"Branch Path Taken\",\n                params: [\n                    {\n                        value: \"fromNodeId\",\n                        text: \"From Node Id\"\n                    },\n                    {\n                        value: \"toNodeId\",\n                        text: \"To Node Id\"\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: \"Choice Chosen\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    },\n                    {\n                        value: \"componentId\",\n                        text: \"Component Id\"\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: \"Choices\"\n                    }\n                ]\n            },\n            {\n                value: \"isCorrect\",\n                text: \"Is Correct\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    },\n                    {\n                        value: \"componentId\",\n                        text: \"Component Id\"\n                    }\n                ]\n            },\n            {\n                value: \"isVisible\",\n                text: \"Is Visible\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    }\n                ]\n            },\n            {\n                value: \"isVisitable\",\n                text: \"Is Visitable\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    }\n                ]\n            },\n            {\n                value: \"isVisited\",\n                text: \"Is Visited\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    }\n                ]\n            },\n            {\n                value: \"isPlanningActivityCompleted\",\n                text: \"Is Planning Activity Completed\"\n            }\n        ];\n\n        // available transitionCriterias\n        this.transitionCriterias = [\n            {\n                value: \"score\",\n                text: \"Score\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    },\n                    {\n                        value: \"componentId\",\n                        text: \"Component Id\"\n                    },\n                    {\n                        value: \"scores\",\n                        text: \"Score(s)\"\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: \"Choice Chosen\",\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: \"Node Id\"\n                    },\n                    {\n                        value: \"componentId\",\n                        text: \"Component Id\"\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: \"Choices\"\n                    }\n                ]\n            }\n        ];\n\n        // the array of component types that can be created\n        this.componentTypes = [\n            {componentType: 'AudioOscillator', componentName: 'Audio Oscillator'},\n            {componentType: 'ConceptMap', componentName: 'Concept Map'},\n            {componentType: 'Discussion', componentName: 'Discussion'},\n            {componentType: 'Draw', componentName: 'Draw'},\n            {componentType: 'Embedded', componentName: 'Embedded'},\n            {componentType: 'Graph', componentName: 'Graph'},\n            {componentType: 'HTML', componentName: 'HTML'},\n            {componentType: 'Label', componentName: 'Label'},\n            {componentType: 'Match', componentName: 'Match'},\n            {componentType: 'MultipleChoice', componentName: 'Multiple Choice'},\n            {componentType: 'OpenResponse', componentName: 'Open Response'},\n            {componentType: 'OutsideURL', componentName: 'Outside URL'},\n            {componentType: 'Table', componentName: 'Table'}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the step number e.g. 1.3\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n    \n    /**\n     * Launch VLE with this current step as the initial step without constraints\n     */\n    previewStepWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        // perform any node cleanup if necessary\n        let commitMessage = \"Made changes to Step.\";\n        this.ProjectService.saveProject(commitMessage);\n\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n        \n        this.$state.go('root.project', {projectId: this.projectId});\n    };\n\n    /**\n     * Display an error saving during advanced authoring, most-likely due to malformed JSON\n     */\n    showSaveErrorAdvancedAuthoring() {\n        this.$translate('saveErrorAdvancedAuthoring').then((saveErrorAdvancedAuthoringMsg) => {\n            alert(saveErrorAdvancedAuthoringMsg);\n        });\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            this.$translate('confirmUndo').then((confirmUndo) => {\n                var result = confirm(confirmUndo);\n\n                if (result) {\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n\n                    // close the node authoring view\n                    this.close();\n                }\n            });\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Add a new transition for this node.\n     */\n    addNewTransition() {\n        if (this.node.transitionLogic.transitions == null) {\n            this.node.transitionLogic.transitions = [];\n        }\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        if (nodeTransitions.length > 0) {\n            // If this node already has transitions, copy the last one.\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n            let newTransition = {\n                \"to\": lastNodeTransition.to\n            };\n            nodeTransitions.push(newTransition);\n        } else {\n            // Otherwise set the new transition to the current nodeId\n            let newTransition = {\n                \"to\": this.nodeId\n            };\n            nodeTransitions.push(newTransition);\n        }\n    }\n\n    /**\n     * Add a new transition for the specified transition.\n     */\n    addNewTransitionCriteria(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        for (var n = 0; n < nodeTransitions.length; n++) {\n            let nodeTransition = nodeTransitions[n];\n            if (nodeTransition == transition) {\n                if (nodeTransition.criteria == null) {\n                    nodeTransition.criteria = [];\n                }\n                let newTransitionCriteria = {\n                    \"name\":\"\",\n                    \"params\": {\n                        \"nodeId\": \"\",\n                        \"componentId\": \"\"\n                    }\n                };\n                nodeTransition.criteria.push(newTransitionCriteria);\n            }\n        }\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Author chose/updated a transition criteria, which is saved in this.selectedTransitionCriteria.\n     * The original transitionCriteria is passed in as originalTransitionCriteria parameter.\n     * @param originalTransitionCriteria\n     */\n    transitionCriteriaChanged(transitionIndex, criteriaIndex, newTransitionCriteria) {\n        this.node.transitionLogic.transitions[transitionIndex].criteria[criteriaIndex] = newTransitionCriteria;\n    }\n\n    /**\n     * Deletes the specified transition from this node\n     */\n    deleteTransition(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n\n        let index = nodeTransitions.indexOf(transition);\n        if (index > -1) {\n            nodeTransitions.splice(index, 1);\n        }\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n\n    /**\n     * Save transitions for this node\n     */\n    saveTransitions() {\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showEditTransitions = false;\n    }\n\n    /**\n     * Create a component in this node\n     */\n    createComponent() {\n\n        // create a component and add it to this node\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // Scroll to the bottom of the page where the new component was added\n        this.$timeout(() => {\n            this.$location.hash('bottom');\n            this.$anchorScroll();\n        });\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        this.$translate('confirmDeleteComponent').then((confirmDeleteComponent) => {\n\n            // ask the user to confirm the delete\n            var answer = confirm(confirmDeleteComponent);\n\n            if (answer) {\n                // the user confirmed yes\n\n                // delete the component from the node\n                this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n        });\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            this.$translate('noUndoAvailable').then((noUndoAvailable) => {\n                alert(noUndoAvailable);\n            });\n\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            this.$translate('confirmUndoLastChange').then((confirmUndoLastChange) => {\n\n                // ask the user to confirm the delete\n                var result = confirm(confirmUndoLastChange);\n\n                if (result) {\n                    // perform any node cleanup if necessary\n                    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n                    \n                    // get the previous version of the node\n                    var nodeCopy = this.undoStack.pop();\n\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                    // get the node\n                    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                    // get the components in the node\n                    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n                }\n            });\n        }\n    }\n    \n    /**\n     * Get the removal criteria params for a removal criteria name\n     * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n     * @return the params for the given removal criteria name\n     */\n    getRemovalCriteriaParamsByName(name) {\n        var params = [];\n        \n        if (name != null) {\n            \n            // loop through all the available removal criteria\n            for (var r = 0; r < this.removalCriteria.length; r++) {\n                \n                // get a single removal criteria\n                var singleRemovalCriteria = this.removalCriteria[r];\n                \n                if (singleRemovalCriteria != null) {\n                    \n                    if (singleRemovalCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleRemovalCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return params;\n    }\n\n    /**\n     * Get the transition criteria params for a transition criteria name\n     * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n     * @return the params for the given transition criteria name\n     */\n    getTransitionCriteriaParamsByName(name) {\n        let params = [];\n\n        if (name != null) {\n\n            // loop through all the available transition criteria\n            for (let t = 0; t < this.transitionCriterias.length; t++) {\n\n                // get a single transition criteria\n                let singleTransitionCriteria = this.transitionCriterias[t];\n\n                if (singleTransitionCriteria != null) {\n\n                    if (singleTransitionCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleTransitionCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return params;\n    }\n    \n    /**\n     * Get the choices of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choices from the component\n     */\n    getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n        \n        var choices = [];\n        \n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        \n        if (component != null && component.choices != null) {\n            // get the choices\n            choices = component.choices;\n        }\n        \n        return choices;\n    }\n    \n    /**\n     * Get the choice type of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choice type e.g. 'radio' or 'checkbox'\n     */\n    getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n        \n        var choiceType = null;\n        \n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        \n        if (component != null && component.choiceType != null) {\n            // get the choice type\n            choiceType = component.choiceType;\n        }\n        \n        return choiceType;\n    }\n    \n    /**\n     * Get the next available constraint id for a node\n     * @param nodeId the node id\n     * @return a constraint id that hasn't been used yet\n     */\n    getNewNodeConstraintId(nodeId) {\n        \n        var newNodeConstraintId = null;\n        \n        var usedConstraintIds = [];\n        \n        // get the node content\n        var node = this.ProjectService.getNodeById(nodeId);\n        \n        if (node != null) {\n            \n            // get the constraints\n            var constraints = node.constraints;\n            \n            if (constraints != null) {\n                \n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n                    \n                    // get a constraint\n                    var constraint = constraints[c];\n                    \n                    if (constraint != null) {\n                        \n                        // get the id of the constraint\n                        var constraintId = constraint.id;\n                        \n                        // add the constraint id to the array of used constraint ids\n                        usedConstraintIds.push(constraintId);\n                    }\n                }\n            }\n        }\n        \n        // counter used for finding a constraint id that hasn't been used yet\n        var constraintCounter = 1;\n        \n        // loop until we have found an unused constraint id\n        while (newNodeConstraintId == null) {\n            \n            // create a potential constraint id\n            var potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n            \n            // check if the constraint id has been used already\n            if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n                // the constraint id has not been used so we can use it\n                newNodeConstraintId = potentialNewNodeConstraintId;\n            } else {\n                /*\n                 * the constraint id has been used so we will increment the \n                 * counter to try another contraint id\n                 */\n                constraintCounter++;\n            }\n        }\n        \n        return newNodeConstraintId;\n    }\n    \n    /**\n     * Add a constraint\n     */\n    addConstraint() {\n        \n        // get a new constraint id\n        var newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n        \n        // create the constraint object\n        var constraint = {};\n        constraint.id = newNodeConstraintId;\n        constraint.action = null;\n        constraint.targetId = this.nodeId;\n        constraint.removalConditional = \"all\";\n        constraint.removalCriteria = [];\n        \n        // create a removal criteria\n        var removalCriteria = {};\n        removalCriteria.name = \"\";\n        removalCriteria.params = {};\n        \n        // add the removal criteria to the constraint\n        constraint.removalCriteria.push(removalCriteria);\n        \n        // create the constraints array if it does not exist\n        if (this.node.constraints == null) {\n            this.node.constraints = [];\n        }\n        \n        // add the constraint to the node\n        this.node.constraints.push(constraint);\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n    \n    /**\n     * Delete a constraint\n     * @param constraintIndex delete the constraint at the index\n     */\n    deleteConstraint(constraintIndex) {\n        \n        if (constraintIndex != null) {\n            // get the node content\n            var node = this.ProjectService.getNodeById(this.nodeId);\n            \n            if (node != null) {\n                \n                // get the constraints\n                var constraints = node.constraints;\n                \n                if (constraints != null) {\n                    \n                    // remove the constraint at the given index\n                    constraints.splice(constraintIndex, 1);\n                }\n            }\n        }\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n    \n    /**\n     * Add a removal criteria\n     * @param constraint add the removal criteria to this constraint\n     */\n    addRemovalCriteria(constraint) {\n        \n        if (constraint != null) {\n            \n            // create the removal criteria\n            var removalCriteria = {};\n            removalCriteria.name = \"\";\n            removalCriteria.params = {};\n            \n            // add the removal criteria to the constraint\n            constraint.removalCriteria.push(removalCriteria);\n        }\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n    \n    /**\n     * Delete a removal criteria from a constraint\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n        if (constraint != null) {\n            \n            // get all the removal criteria\n            var removalCriteria = constraint.removalCriteria;\n            \n            if (removalCriteria != null) {\n                // remove the single removal criteria\n                removalCriteria.splice(removalCriteriaIndex, 1);\n            }\n        }\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a transition criteria from a transition\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n        if (transition != null) {\n\n            // get all the transition criteria\n            var transitionCriterias = transition.criteria;\n\n            if (transitionCriterias != null) {\n                // remove the single transition criteria\n                transitionCriterias.splice(transitionCriteriaIndex, 1);\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n    \n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist\n     */\n    removalCriteriaNameChanged(criteria) {\n        \n        if (criteria != null) {\n            // clear the params\n            criteria.params = {};\n        }\n        \n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist\n     */\n    transitionCriteriaNameChanged(transitionCriteria) {\n\n        if (transitionCriteria != null) {\n            // clear the params\n            transitionCriteria.params = {};\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A button to author a specific view of the node was clicked\n     * @param view the view name\n     */\n    nodeAuthoringViewButtonClicked(view) {\n        \n        if (view == 'addComponent') {\n            // toggle the add component view and hide all the other views\n            this.showCreateComponent = !this.showCreateComponent;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n        } else if (view == 'editTransitions') {\n            // toggle the edit transitions view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = !this.showEditTransitions;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n        } else if (view == 'editConstraints') {\n            // toggle the edit constraints view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = !this.showConstraints;\n            this.showEditButtons = false;\n        } else if (view == 'editButtons') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = !this.showEditButtons;\n        }\n    }\n};\n\nNodeAuthoringController.$inject = ['$anchorScroll', '$location', '$scope', '$state', '$stateParams', '$timeout', '$translate', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default NodeAuthoringController;\n"]}