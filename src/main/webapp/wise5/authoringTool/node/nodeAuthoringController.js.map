{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$filter","$injector","$location","$mdDialog","$scope","$state","$stateParams","$timeout","ConfigService","NodeService","ProjectService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","getComponentTypeLabel","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","summernoteRubricHTML","replaceAssetPaths","rubric","$on","event","args","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showSubmitButton","showSaveButton","turnOnSaveButtonInComponents","id","doesAnyComponentShowSubmitButton","turnOffSaveButtonInComponents","authoringViewNodeChanged","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","c","criterion","name","createBranchNodeId","createBranchComponentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","n","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","go","alert","angular","equals","result","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","whenToChoosePath","canChangePath","maxPathsVisitable","nodeTransition","newTransitionCriteria","transitionCriteria","index","indexOf","splice","createComponent","hash","moveComponentUp","moveComponentDown","answer","deleteComponent","doesAnyComponentHaveWork","hideAllComponentSaveButtons","component","type","service","get","componentUsesSaveButton","pop","r","singleRemovalCriteria","singleTransitionCriteria","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraints","constraint","constraintId","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","action","targetId","removalConditional","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","getRemovalCriteriaParamsByName","p","paramObject","view","showConstraints","showEditButtons","showRubric","showCreateBranch","showRubricButton","prevNodeId","getPreviousNodeId","thereIsNoPreviousStep","nextNodeId","getNextNodeId","thereIsNoNextStep","removeBranch","bp","removeBranchPath","createBranchCriterionChanged","b","setTransitionLogicField","createBranchUpdateTransitions","createBranchUpdateChoiceChosenIds","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraints","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","calculateNodeNumbers","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","message","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","$inject"],"mappings":"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","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\r\n\r\nclass NodeAuthoringController {\r\n\r\n    constructor($anchorScroll,\r\n                $filter,\r\n                $injector,\r\n                $location,\r\n                $mdDialog,\r\n                $scope,\r\n                $state,\r\n                $stateParams,\r\n                $timeout,\r\n                ConfigService,\r\n                NodeService,\r\n                ProjectService,\r\n                UtilService) {\r\n\r\n        this.$anchorScroll = $anchorScroll;\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$location = $location;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.$stateParams = $stateParams;\r\n        this.$timeout = $timeout;\r\n        this.$translate = this.$filter('translate');\r\n        this.ConfigService = ConfigService;\r\n        this.NodeService = NodeService;\r\n        this.ProjectService = ProjectService;\r\n        this.UtilService = UtilService;\r\n        this.$translate = this.$filter('translate');\r\n        this.projectId = $stateParams.projectId;\r\n        this.nodeId = $stateParams.nodeId;\r\n        this.showCreateComponent = false;\r\n        this.showEditTransitions = false;\r\n        this.selectedComponent = null;\r\n        this.nodeCopy = null;\r\n        this.undoStack = [];\r\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\r\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"scoreChanged\", \"studentDataChanged\"];\r\n        this.canChangePathOptions = [null, true, false];\r\n        this.createBranchBranches = [];\r\n\r\n        // the available constraint actions\r\n        this.constraintActions = [\r\n            {\r\n                value: \"\",\r\n                text: this.$translate('pleaseChooseAnAction')\r\n            },\r\n            {\r\n                value: \"makeAllNodesAfterThisNotVisitable\",\r\n                text: this.$translate('makeAllNodesAfterThisNotVisitable')\r\n            },\r\n            {\r\n                value: \"makeAllNodesAfterThisNotVisible\",\r\n                text: this.$translate('makeAllNodesAfterThisNotVisible')\r\n            },\r\n            {\r\n                value: \"makeAllOtherNodesNotVisitable\",\r\n                text: this.$translate('makeAllOtherNodesNotVisitable')\r\n            },\r\n            {\r\n                value: \"makeAllOtherNodesNotVisible\",\r\n                text: this.$translate('makeAllOtherNodesNotVisible')\r\n            },\r\n            {\r\n                value: \"makeThisNodeNotVisitable\",\r\n                text: this.$translate('makeThisNodeNotVisitable')\r\n            },\r\n            {\r\n                value: \"makeThisNodeNotVisible\",\r\n                text: this.$translate('makeThisNodeNotVisible')\r\n            }\r\n        ];\r\n\r\n        // the available removal conditionals\r\n        this.removalConditionals = [\r\n            {\r\n                value: \"all\",\r\n                text: this.$translate('all')\r\n            },\r\n            {\r\n                value: \"any\",\r\n                text: this.$translate('any')\r\n            }\r\n        ];\r\n\r\n        // the available removal criteria\r\n        this.removalCriteria = [\r\n            {\r\n                value: \"\",\r\n                text: this.$translate('pleaseChooseARemovalCriteria')\r\n            },\r\n            {\r\n                value: \"isCompleted\",\r\n                text: this.$translate('isCompleted'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"score\",\r\n                text: this.$translate('SCORE'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    },\r\n                    {\r\n                        value: \"scores\",\r\n                        text: this.$translate('scoresParens')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"branchPathTaken\",\r\n                text: this.$translate('branchPathTaken'),\r\n                params: [\r\n                    {\r\n                        value: \"fromNodeId\",\r\n                        text: this.$translate('fromNodeID')\r\n                    },\r\n                    {\r\n                        value: \"toNodeId\",\r\n                        text: this.$translate('toNodeID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"choiceChosen\",\r\n                text: this.$translate('choiceChosen'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    },\r\n                    {\r\n                        value: \"choiceIds\",\r\n                        text: this.$translate('choices')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"isCorrect\",\r\n                text: this.$translate('IS_CORRECT'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"usedXSubmits\",\r\n                text: this.$translate('usedXSubmits'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    },\r\n                    {\r\n                        value: \"requiredSubmitCount\",\r\n                        text: this.$translate('requiredSubmitCount')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"isVisible\",\r\n                text: this.$translate('isVisible'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"isVisitable\",\r\n                text: this.$translate('isVisitable'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"isVisited\",\r\n                text: this.$translate('isVisited'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"isPlanningActivityCompleted\",\r\n                text: this.$translate('isPlanningActivityCompleted')\r\n            }\r\n        ];\r\n\r\n        // available transitionCriterias\r\n        this.transitionCriterias = [\r\n            {\r\n                value: \"score\",\r\n                text: this.$translate('SCORE'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    },\r\n                    {\r\n                        value: \"scores\",\r\n                        text: this.$translate('scoresParens')\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                value: \"choiceChosen\",\r\n                text: this.$translate('choiceChosen'),\r\n                params: [\r\n                    {\r\n                        value: \"nodeId\",\r\n                        text: this.$translate('nodeID')\r\n                    },\r\n                    {\r\n                        value: \"componentId\",\r\n                        text: this.$translate('componentID')\r\n                    },\r\n                    {\r\n                        value: \"choiceIds\",\r\n                        text: this.$translate('choices')\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        this.branchCriteria = [\r\n            {\r\n                value: \"workgroupId\",\r\n                text: this.$translate('WORKGROUP_ID')\r\n            },\r\n            {\r\n                value: \"score\",\r\n                text: this.$translate('SCORE')\r\n            },\r\n            {\r\n                value: \"choiceChosen\",\r\n                text: this.$translate('choiceChosen')\r\n            },\r\n            {\r\n                value: \"random\",\r\n                text: this.$translate('random')\r\n            }\r\n        ];\r\n\r\n        // the array of component types that can be created\r\n        // TODO: automate by looping through active component types for this WISE instance\r\n        this.componentTypes = [\r\n            {componentType: 'AudioOscillator', componentName: this.UtilService.getComponentTypeLabel('AudioOscillator')},\r\n            {componentType: 'ConceptMap', componentName: this.UtilService.getComponentTypeLabel('ConceptMap')},\r\n            {componentType: 'Discussion', componentName: this.UtilService.getComponentTypeLabel('Discussion')},\r\n            {componentType: 'Draw', componentName: this.UtilService.getComponentTypeLabel('Draw')},\r\n            {componentType: 'Embedded', componentName: this.UtilService.getComponentTypeLabel('Embedded')},\r\n            {componentType: 'Graph', componentName: this.UtilService.getComponentTypeLabel('Graph')},\r\n            {componentType: 'HTML', componentName: this.UtilService.getComponentTypeLabel('HTML')},\r\n            {componentType: 'Label', componentName: this.UtilService.getComponentTypeLabel('Label')},\r\n            {componentType: 'Match', componentName: this.UtilService.getComponentTypeLabel('Match')},\r\n            {componentType: 'MultipleChoice', componentName: this.UtilService.getComponentTypeLabel('MultipleChoice')},\r\n            {componentType: 'OpenResponse', componentName: this.UtilService.getComponentTypeLabel('OpenResponse')},\r\n            {componentType: 'OutsideURL', componentName: this.UtilService.getComponentTypeLabel('OutsideURL')},\r\n            {componentType: 'Table', componentName: this.UtilService.getComponentTypeLabel('Table')}\r\n        ];\r\n\r\n        // set the drop down to the first item\r\n        this.selectedComponent = this.componentTypes[0].componentType;\r\n\r\n        // get the node\r\n        this.node = this.ProjectService.getNodeById(this.nodeId);\r\n\r\n        // get the step number e.g. 1.3\r\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\r\n\r\n        // get the components in the node\r\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\r\n\r\n        /*\r\n         * remember a copy of the node at the beginning of this node authoring\r\n         * session in case we need to roll back if the user decides to\r\n         * cancel/revert all the changes.\r\n         */\r\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\r\n\r\n        /*\r\n         * remember the current version of the node. this will be updated each\r\n         * time the user makes a change.\r\n         */\r\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\r\n\r\n        // populate the branch authoring if any\r\n        this.populateBranchAuthoring();\r\n\r\n        // create the summernote rubric element id\r\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\r\n\r\n        // the tooltip text for the insert WISE asset button\r\n        var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n        /*\r\n         * create the custom button for inserting WISE assets into\r\n         * summernote\r\n         */\r\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, null, 'rubric', insertAssetString);\r\n\r\n        /*\r\n         * the options that specifies the tools to display in the\r\n         * summernote prompt\r\n         */\r\n        this.summernoteRubricOptions = {\r\n            toolbar: [\r\n                ['style', ['style']],\r\n                ['font', ['bold', 'underline', 'clear']],\r\n                ['fontname', ['fontname']],\r\n                ['fontsize', ['fontsize']],\r\n                ['color', ['color']],\r\n                ['para', ['ul', 'ol', 'paragraph']],\r\n                ['table', ['table']],\r\n                ['insert', ['link', 'video']],\r\n                ['view', ['fullscreen', 'codeview', 'help']],\r\n                ['customButton', ['insertAssetButton']]\r\n            ],\r\n            height: 300,\r\n            disableDragAndDrop: true,\r\n            buttons: {\r\n                insertAssetButton: InsertAssetButton\r\n            }\r\n        };\r\n\r\n        /*\r\n         * inject the asset paths into the rubric html and set the summernote\r\n         * rubric html\r\n         */\r\n        this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.node.rubric);\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == null) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n\r\n        this.$scope.$on('componentShowSubmitButtonValueChanged', (event, args) => {\r\n            var nodeId = args.nodeId;\r\n            var componentId = args.componentId;\r\n            var showSubmitButton = args.showSubmitButton;\r\n\r\n            if (showSubmitButton) {\r\n                /*\r\n                 * a component is showing their submit button so we will hide\r\n                 * the step save button and submit buttons\r\n                 */\r\n\r\n                this.node.showSaveButton = false;\r\n                this.node.showSubmitButton = false;\r\n\r\n                // turn on the save buttons for all components in this step\r\n                this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\r\n            } else {\r\n                /*\r\n                 * a component is hiding their submit button so we may need\r\n                 * to show the step save button\r\n                 */\r\n\r\n                if (this.ProjectService.doesAnyComponentShowSubmitButton(this.node.id)) {\r\n                    /*\r\n                     * there is at least one component in the step that is showing\r\n                     * their submit button so we will show the save button on\r\n                     * all the components\r\n                     */\r\n\r\n                    // turn on the save buttons for all components in this step\r\n                    this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\r\n                } else {\r\n                    /*\r\n                     * no components in this step show their submit button so we\r\n                     * will show the step save button\r\n                     */\r\n                    this.node.showSaveButton = true;\r\n                    this.node.showSubmitButton = false;\r\n\r\n                    // turn off the save buttons for all the components\r\n                    this.ProjectService.turnOffSaveButtonInComponents(this.node.id);\r\n                }\r\n            }\r\n\r\n            // save changes\r\n            this.authoringViewNodeChanged();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Populate the branch authoring\r\n     */\r\n    populateBranchAuthoring() {\r\n        if (this.node.transitionLogic != null) {\r\n\r\n            // get the number of branches\r\n            if (this.node.transitionLogic.transitions != null) {\r\n                this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\r\n            } else {\r\n                this.createBranchNumberOfBranches = 0;\r\n            }\r\n\r\n            // loop through all the transitions\r\n            for (var t = 0; t < this.node.transitionLogic.transitions.length; t++) {\r\n                var transition = this.node.transitionLogic.transitions[t];\r\n\r\n                if (transition != null) {\r\n\r\n                    // create a branch object to hold all the related information for that branch\r\n                    var branch = {};\r\n\r\n                    // set the branch number for display purposes\r\n                    branch.number = t + 1;\r\n\r\n                    /*\r\n                     * set the mapping of all the ids to order for use when choosing which items are\r\n                     * in the branch path\r\n                     */\r\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\r\n\r\n                    // an array that will hold all the checked items in the branch path\r\n                    branch.checkedItemsInBranchPath = [];\r\n\r\n                    // set the transition into the branch so we can access it easily later\r\n                    branch.transition = transition;\r\n\r\n                    // add the branch to the array of branches\r\n                    this.createBranchBranches.push(branch);\r\n\r\n                    // get the transition criteria\r\n                    var criteria = transition.criteria;\r\n\r\n                    if (criteria != null) {\r\n\r\n                        // loop through all the criterion\r\n                        for (var c = 0; c < criteria.length; c++) {\r\n\r\n                            // get a criterion\r\n                            var criterion = criteria[c];\r\n\r\n                            if (criterion != null) {\r\n                                var name = criterion.name;\r\n                                var params = criterion.params;\r\n\r\n                                if (params != null) {\r\n                                    // get the node id and component id params if any\r\n                                    this.createBranchNodeId = params.nodeId;\r\n                                    this.createBranchComponentId = params.componentId;\r\n                                }\r\n\r\n                                if (name == 'score') {\r\n                                    // this is a score criteria\r\n\r\n                                    // set the branch criterion to score\r\n                                    this.createBranchCriterion = 'score';\r\n\r\n                                    if (params != null && params.scores != null) {\r\n                                        // set the scores into the branch object\r\n                                        branch.scores = params.scores;\r\n                                    }\r\n                                } else if (name == 'choiceChosen') {\r\n                                    // this is a choice chosen criteria\r\n\r\n                                    // set the branch criterion to choice chosen\r\n                                    this.createBranchCriterion = 'choiceChosen';\r\n\r\n                                    if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\r\n                                        // set the choice id into the branch object\r\n                                        branch.choiceId = params.choiceIds[0];\r\n                                    }\r\n\r\n                                    // get the choices from the component\r\n                                    var choices = this.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\r\n\r\n                                    if (choices != null) {\r\n                                        // set the choices into the branch object\r\n                                        branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // get the node ids in the branch path\r\n                    var nodeIdsInBranch = this.ProjectService.getNodeIdsInBranch(this.nodeId, transition.to);\r\n\r\n                    // loop through all the node ids in the branch path\r\n                    for (var n = 0; n < nodeIdsInBranch.length; n++) {\r\n\r\n                        // get a node id in the branch path\r\n                        var nodeId = nodeIdsInBranch[n];\r\n\r\n                        // get the item\r\n                        var item = branch.items[nodeId];\r\n\r\n                        if (item != null) {\r\n                            // make the item checked\r\n                            item.checked = true;\r\n\r\n                            // add the item to the array of checked items in this branch path\r\n                            branch.checkedItemsInBranchPath.push(item);\r\n                        }\r\n                    }\r\n\r\n                    // set the node ids in branch array into the branch object\r\n                    branch.nodeIdsInBranch = nodeIdsInBranch;\r\n\r\n                    if (nodeIdsInBranch.length > 0) {\r\n\r\n                        // get the last node id in the branch path\r\n                        var lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\r\n\r\n                        if (lastNodeIdInBranch != null) {\r\n\r\n                            var transitionsFromLastNode = this.ProjectService.getTransitionsByFromNodeId(lastNodeIdInBranch);\r\n\r\n                            if (transitionsFromLastNode != null && transitionsFromLastNode.length > 0) {\r\n                                var transition = transitionsFromLastNode[0];\r\n\r\n                                if (transition != null) {\r\n                                    this.createBranchMergePointNodeId = transition.to;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.createBranchCriterion == null) {\r\n                /*\r\n                 * we have not been able to determine the branch criterion yet\r\n                 * so we will look at the howToChooseAmongAvailablePaths field\r\n                 */\r\n                if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\r\n                    // set the branch criterion to workgroup id\r\n                    this.createBranchCriterion = 'workgroupId';\r\n                } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\r\n                    // set the branch criterion to random\r\n                    this.createBranchCriterion = 'random';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch VLE with this current step as the initial step\r\n     */\r\n    previewStep() {\r\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\r\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\r\n        window.open(previewStepURL);\r\n    };\r\n\r\n    /**\r\n     * Launch VLE with this current step as the initial step without constraints\r\n     */\r\n    previewStepWithoutConstraints() {\r\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\r\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\r\n        window.open(previewStepURL);\r\n    };\r\n\r\n    /**\r\n     * Close the node authoring view\r\n     */\r\n    close() {\r\n        // perform any node cleanup if necessary\r\n        //let commitMessage = \"Made changes to Step.\";\r\n        //this.ProjectService.saveProject(commitMessage);\r\n\r\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\r\n\r\n        this.$state.go('root.project', {projectId: this.projectId});\r\n    };\r\n\r\n    /**\r\n     * Display an error saving during advanced authoring, most-likely due to malformed JSON\r\n     */\r\n    showSaveErrorAdvancedAuthoring() {\r\n        alert(this.$translate('saveErrorAdvancedAuthoring'));\r\n    };\r\n\r\n    /**\r\n     * The author has clicked the cancel button which will revert all\r\n     * the recent changes since they opened the node.\r\n     */\r\n    cancel() {\r\n\r\n        // check if the user has made any changes\r\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\r\n            // the user has made changes\r\n\r\n            let result = confirm(this.$translate('confirmUndo'));\r\n\r\n            if (result) {\r\n                // revert the node back to the previous version\r\n                this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\r\n\r\n                // save the project\r\n                this.ProjectService.saveProject();\r\n\r\n                // close the node authoring view\r\n                this.close();\r\n            }\r\n\r\n        } else {\r\n            // the user has not made any changes\r\n\r\n            //close the node authoring view\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new transition for this node.\r\n     */\r\n    addNewTransition() {\r\n        if (this.node.transitionLogic.transitions == null) {\r\n            this.node.transitionLogic.transitions = [];\r\n        }\r\n        let nodeTransitions = this.node.transitionLogic.transitions;\r\n        if (nodeTransitions.length > 0) {\r\n            // If this node already has transitions, copy the last one.\r\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\r\n            let newTransition = {\r\n                \"to\": lastNodeTransition.to\r\n            };\r\n            nodeTransitions.push(newTransition);\r\n        } else {\r\n            // Otherwise set the new transition to the current nodeId\r\n            let newTransition = {\r\n                \"to\": this.nodeId\r\n            };\r\n            nodeTransitions.push(newTransition);\r\n        }\r\n\r\n        if (nodeTransitions.length > 1) {\r\n            /*\r\n             * there is more than one transition so we will set default values\r\n             * for the transition logic parameters if they haven't already been\r\n             * set\r\n             */\r\n\r\n            if (this.node.transitionLogic.howToChooseAmongAvailablePaths == null) {\r\n                this.node.transitionLogic.howToChooseAmongAvailablePaths = 'workgroupId';\r\n            }\r\n\r\n            if (this.node.transitionLogic.whenToChoosePath == null) {\r\n                this.node.transitionLogic.whenToChoosePath = 'enterNode';\r\n            }\r\n\r\n            if (this.node.transitionLogic.canChangePath == null) {\r\n                this.node.transitionLogic.canChangePath = false;\r\n            }\r\n\r\n            if (this.node.transitionLogic.maxPathsVisitable == null) {\r\n                this.node.transitionLogic.maxPathsVisitable = 1;\r\n            }\r\n        }\r\n\r\n        // save changes\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a new transition criteria for the specified transition.\r\n     */\r\n    addNewTransitionCriteria(transition) {\r\n        let nodeTransitions = this.node.transitionLogic.transitions;\r\n        for (var n = 0; n < nodeTransitions.length; n++) {\r\n            let nodeTransition = nodeTransitions[n];\r\n            if (nodeTransition == transition) {\r\n                if (nodeTransition.criteria == null) {\r\n                    nodeTransition.criteria = [];\r\n                }\r\n                let newTransitionCriteria = {\r\n                    \"name\":\"\",\r\n                    \"params\": {\r\n                        \"nodeId\": \"\",\r\n                        \"componentId\": \"\"\r\n                    }\r\n                };\r\n                nodeTransition.criteria.push(newTransitionCriteria);\r\n            }\r\n        }\r\n        // save changes\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The transition criteria node id changed so we will update the params\r\n     * accordingly.\r\n     * @param transitionCriteria the transition criteria object that changed\r\n     */\r\n    transitionCriteriaNodeIdChanged(transitionCriteria) {\r\n\r\n        if (transitionCriteria!= null && transitionCriteria.params != null) {\r\n            // remember the node id\r\n            var nodeId = transitionCriteria.params.nodeId;\r\n\r\n            // clear the params\r\n            transitionCriteria.params = {};\r\n\r\n            if (nodeId != null) {\r\n                // set the node id back into the params\r\n                transitionCriteria.params.nodeId = nodeId;\r\n            }\r\n        }\r\n\r\n        // save the node\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The transition criteria component id changed so we will update the params\r\n     * accordingly.\r\n     * @param transitionCriteria the transition criteria object that changed\r\n     */\r\n    transitionCriteriaComponentIdChanged(transitionCriteria) {\r\n\r\n        if (transitionCriteria!= null && transitionCriteria.params != null) {\r\n\r\n            // remember the node id and component id\r\n            var nodeId = transitionCriteria.params.nodeId;\r\n            var componentId = transitionCriteria.params.componentId;\r\n\r\n            // clear the params\r\n            transitionCriteria.params = {};\r\n\r\n            if (nodeId != null) {\r\n                // set the node id back into the params\r\n                transitionCriteria.params.nodeId = nodeId;\r\n            }\r\n\r\n            if (componentId != null) {\r\n                // set the component id back into the params\r\n                transitionCriteria.params.componentId = componentId;\r\n            }\r\n        }\r\n\r\n        // save the node\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * Deletes the specified transition from this node\r\n     */\r\n    deleteTransition(transition) {\r\n        let nodeTransitions = this.node.transitionLogic.transitions;\r\n\r\n        let index = nodeTransitions.indexOf(transition);\r\n        if (index > -1) {\r\n            nodeTransitions.splice(index, 1);\r\n        }\r\n\r\n        if (nodeTransitions.length <= 1) {\r\n            /*\r\n             * there is zero or one transition so we will clear the parameters\r\n             * below since they only apply when there are multiple transitions\r\n             */\r\n            this.node.transitionLogic.howToChooseAmongAvailablePaths = null;\r\n            this.node.transitionLogic.whenToChoosePath = null;\r\n            this.node.transitionLogic.canChangePath = null;\r\n            this.node.transitionLogic.maxPathsVisitable = null;\r\n        }\r\n\r\n        // save changes\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n\r\n    /**\r\n     * Save transitions for this node\r\n     */\r\n    saveTransitions() {\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n\r\n        // hide the create component elements\r\n        this.showEditTransitions = false;\r\n    }\r\n\r\n    /**\r\n     * Create a component in this node\r\n     */\r\n    createComponent() {\r\n\r\n        // create a component and add it to this node\r\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n\r\n        // hide the create component elements\r\n        this.showCreateComponent = false;\r\n\r\n        // Scroll to the bottom of the page where the new component was added\r\n        this.$timeout(() => {\r\n            this.$location.hash('bottom');\r\n            this.$anchorScroll();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Move a component up within this node\r\n     * @param componentId the component id\r\n     */\r\n    moveComponentUp(componentId) {\r\n\r\n        // move the component up within the node\r\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Move a component up within this node\r\n     * @param componentId the component id\r\n     */\r\n    moveComponentDown(componentId) {\r\n\r\n        // move the component down within the node\r\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Delete the component from this node\r\n     * @param componentId the component id\r\n     */\r\n    deleteComponent(componentId) {\r\n\r\n        // ask the user to confirm the delete\r\n        let answer = confirm(this.$translate('confirmDeleteComponent'));\r\n\r\n        if (answer) {\r\n            // the user confirmed yes\r\n\r\n            // delete the component from the node\r\n            this.ProjectService.deleteComponent(this.nodeId, componentId);\r\n\r\n            if (this.ProjectService.doesAnyComponentShowSubmitButton(this.nodeId)) {\r\n                /*\r\n                 * there is a component in this step that is showing their\r\n                 * submit button\r\n                 */\r\n            } else {\r\n                /*\r\n                 * there is no component in this step that is showing their\r\n                 * submit button\r\n                 */\r\n\r\n                if (this.ProjectService.doesAnyComponentHaveWork(this.nodeId)) {\r\n                    /*\r\n                     * there is a component that generates work so we will show\r\n                     * the step save button\r\n                     */\r\n                    this.node.showSaveButton = true;\r\n                    this.node.showSubmitButton = false;\r\n\r\n                    // hide the save button in all the components\r\n                    this.hideAllComponentSaveButtons();\r\n                } else {\r\n                    /*\r\n                     * there are no components in the step that generates work\r\n                     * so we will not show the step save button\r\n                     */\r\n                    this.node.showSaveButton = false;\r\n                    this.node.showSubmitButton = false;\r\n                }\r\n            }\r\n\r\n            // save the project\r\n            this.ProjectService.saveProject();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the save button in all the components\r\n     */\r\n    hideAllComponentSaveButtons() {\r\n\r\n        var components = this.components;\r\n\r\n        if (components != null) {\r\n\r\n            // loop through all the components\r\n            for (var c = 0; c < components.length; c++) {\r\n                var component = components[c];\r\n\r\n                if (component != null) {\r\n                    var componentType = component.type;\r\n\r\n                    // get the service for the component type\r\n                    var service = this.$injector.get(componentType + 'Service');\r\n\r\n                    if (service != null) {\r\n                        if (service.componentUsesSaveButton()) {\r\n                            /*\r\n                             * this component uses a save button so we will hide\r\n                             * it\r\n                             */\r\n                            component.showSaveButton = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The node has changed in the authoring view\r\n     */\r\n    authoringViewNodeChanged() {\r\n        // put the previous version of the node on to the undo stack\r\n        this.undoStack.push(this.currentNodeCopy);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n\r\n        // update the current node copy\r\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\r\n    }\r\n\r\n    /**\r\n     * Undo the last change by reverting the node to the previous version\r\n     */\r\n    undo() {\r\n\r\n        if (this.undoStack.length === 0) {\r\n            // the undo stack is empty so there are no changes to undo\r\n            alert(this.$translate('noUndoAvailable'));\r\n\r\n        } else if (this.undoStack.length > 0) {\r\n            // the undo stack has elements\r\n\r\n            // ask the user to confirm the delete\r\n            let result = confirm(this.$translate('confirmUndoLastChange'));\r\n\r\n            if (result) {\r\n                // perform any node cleanup if necessary\r\n                this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\r\n\r\n                // get the previous version of the node\r\n                var nodeCopy = this.undoStack.pop();\r\n\r\n                // revert the node back to the previous version\r\n                this.ProjectService.replaceNode(this.nodeId, nodeCopy);\r\n\r\n                // get the node\r\n                this.node = this.ProjectService.getNodeById(this.nodeId);\r\n\r\n                // get the components in the node\r\n                this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\r\n\r\n                // save the project\r\n                this.ProjectService.saveProject();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the removal criteria params for a removal criteria name\r\n     * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\r\n     * @return the params for the given removal criteria name\r\n     */\r\n    getRemovalCriteriaParamsByName(name) {\r\n        var params = [];\r\n\r\n        if (name != null) {\r\n\r\n            // loop through all the available removal criteria\r\n            for (var r = 0; r < this.removalCriteria.length; r++) {\r\n\r\n                // get a single removal criteria\r\n                var singleRemovalCriteria = this.removalCriteria[r];\r\n\r\n                if (singleRemovalCriteria != null) {\r\n\r\n                    if (singleRemovalCriteria.value == name) {\r\n                        /*\r\n                         * we have found the removal criteria we are looking for\r\n                         * so we will get its params\r\n                         */\r\n                        params = singleRemovalCriteria.params;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    /**\r\n     * Get the transition criteria params for a transition criteria name\r\n     * @param name a transition criteria name e.g.  'score', 'choiceChosen'\r\n     * @return the params for the given transition criteria name\r\n     */\r\n    getTransitionCriteriaParamsByName(name) {\r\n        let params = [];\r\n\r\n        if (name != null) {\r\n\r\n            // loop through all the available transition criteria\r\n            for (let t = 0; t < this.transitionCriterias.length; t++) {\r\n\r\n                // get a single transition criteria\r\n                let singleTransitionCriteria = this.transitionCriterias[t];\r\n\r\n                if (singleTransitionCriteria != null) {\r\n\r\n                    if (singleTransitionCriteria.value == name) {\r\n                        /*\r\n                         * we have found the removal criteria we are looking for\r\n                         * so we will get its params\r\n                         */\r\n                        params = singleTransitionCriteria.params;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    /**\r\n     * Get the choices of a component\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @return the choices from the component\r\n     */\r\n    getChoicesByNodeIdAndComponentId(nodeId, componentId) {\r\n\r\n        var choices = [];\r\n\r\n        // get the component\r\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n        if (component != null && component.choices != null) {\r\n            // get the choices\r\n            choices = component.choices;\r\n        }\r\n\r\n        return choices;\r\n    }\r\n\r\n    /**\r\n     * Get the choice type of a component\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @return the choice type e.g. 'radio' or 'checkbox'\r\n     */\r\n    getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\r\n\r\n        var choiceType = null;\r\n\r\n        // get the component\r\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n        if (component != null && component.choiceType != null) {\r\n            // get the choice type\r\n            choiceType = component.choiceType;\r\n        }\r\n\r\n        return choiceType;\r\n    }\r\n\r\n    /**\r\n     * Get the next available constraint id for a node\r\n     * @param nodeId the node id\r\n     * @return a constraint id that hasn't been used yet\r\n     */\r\n    getNewNodeConstraintId(nodeId) {\r\n\r\n        var newNodeConstraintId = null;\r\n\r\n        var usedConstraintIds = [];\r\n\r\n        // get the node content\r\n        var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n        if (node != null) {\r\n\r\n            // get the constraints\r\n            var constraints = node.constraints;\r\n\r\n            if (constraints != null) {\r\n\r\n                // loop through all the constraints\r\n                for (var c = 0; c < constraints.length; c++) {\r\n\r\n                    // get a constraint\r\n                    var constraint = constraints[c];\r\n\r\n                    if (constraint != null) {\r\n\r\n                        // get the id of the constraint\r\n                        var constraintId = constraint.id;\r\n\r\n                        // add the constraint id to the array of used constraint ids\r\n                        usedConstraintIds.push(constraintId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // counter used for finding a constraint id that hasn't been used yet\r\n        var constraintCounter = 1;\r\n\r\n        // loop until we have found an unused constraint id\r\n        while (newNodeConstraintId == null) {\r\n\r\n            // create a potential constraint id\r\n            var potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\r\n\r\n            // check if the constraint id has been used already\r\n            if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\r\n                // the constraint id has not been used so we can use it\r\n                newNodeConstraintId = potentialNewNodeConstraintId;\r\n            } else {\r\n                /*\r\n                 * the constraint id has been used so we will increment the\r\n                 * counter to try another contraint id\r\n                 */\r\n                constraintCounter++;\r\n            }\r\n        }\r\n\r\n        return newNodeConstraintId;\r\n    }\r\n\r\n    /**\r\n     * Add a constraint\r\n     */\r\n    addConstraint() {\r\n\r\n        // get a new constraint id\r\n        var newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\r\n\r\n        // create the constraint object\r\n        var constraint = {};\r\n        constraint.id = newNodeConstraintId;\r\n        constraint.action = \"\";\r\n        constraint.targetId = this.nodeId;\r\n        constraint.removalConditional = \"all\";\r\n        constraint.removalCriteria = [];\r\n\r\n        // create a removal criteria\r\n        var removalCriteria = {};\r\n        removalCriteria.name = \"\";\r\n        removalCriteria.params = {};\r\n\r\n        // add the removal criteria to the constraint\r\n        constraint.removalCriteria.push(removalCriteria);\r\n\r\n        // create the constraints array if it does not exist\r\n        if (this.node.constraints == null) {\r\n            this.node.constraints = [];\r\n        }\r\n\r\n        // add the constraint to the node\r\n        this.node.constraints.push(constraint);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Delete a constraint\r\n     * @param constraintIndex delete the constraint at the index\r\n     */\r\n    deleteConstraint(constraintIndex) {\r\n\r\n        if (constraintIndex != null) {\r\n            // get the node content\r\n            var node = this.ProjectService.getNodeById(this.nodeId);\r\n\r\n            if (node != null) {\r\n\r\n                // get the constraints\r\n                var constraints = node.constraints;\r\n\r\n                if (constraints != null) {\r\n\r\n                    // remove the constraint at the given index\r\n                    constraints.splice(constraintIndex, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Add a removal criteria\r\n     * @param constraint add the removal criteria to this constraint\r\n     */\r\n    addRemovalCriteria(constraint) {\r\n\r\n        if (constraint != null) {\r\n\r\n            // create the removal criteria\r\n            var removalCriteria = {};\r\n            removalCriteria.name = \"\";\r\n            removalCriteria.params = {};\r\n\r\n            // add the removal criteria to the constraint\r\n            constraint.removalCriteria.push(removalCriteria);\r\n        }\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Delete a removal criteria from a constraint\r\n     * @param constraint remove the removal criteria from this constraint\r\n     * @param removalCriteriaIndex the index of the removal criteria to remove\r\n     */\r\n    deleteRemovalCriteria(constraint, removalCriteriaIndex) {\r\n        if (constraint != null) {\r\n\r\n            // get all the removal criteria\r\n            var removalCriteria = constraint.removalCriteria;\r\n\r\n            if (removalCriteria != null) {\r\n                // remove the single removal criteria\r\n                removalCriteria.splice(removalCriteriaIndex, 1);\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Delete a transition criteria from a transition\r\n     * @param constraint remove the removal criteria from this constraint\r\n     * @param removalCriteriaIndex the index of the removal criteria to remove\r\n     */\r\n    deleteTransitionCriteria(transition, transitionCriteriaIndex) {\r\n        if (transition != null) {\r\n\r\n            // get all the transition criteria\r\n            var transitionCriterias = transition.criteria;\r\n\r\n            if (transitionCriterias != null) {\r\n                // remove the single transition criteria\r\n                transitionCriterias.splice(transitionCriteriaIndex, 1);\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * A removal criteria name has changed so we will clear the params so\r\n     * that the params from the previous removal criteria name do not persist\r\n     */\r\n    removalCriteriaNameChanged(criteria) {\r\n\r\n        if (criteria != null) {\r\n            // clear the params\r\n            criteria.params = {};\r\n\r\n            // get the params for the given criteria name\r\n            var params = this.getRemovalCriteriaParamsByName(criteria.name);\r\n\r\n            if (params != null) {\r\n\r\n                // loop through all the params\r\n                for (var p = 0; p < params.length; p++) {\r\n                    var paramObject = params[p];\r\n\r\n                    if (paramObject != null) {\r\n                        var value = paramObject.value;\r\n\r\n                        // intialize the param value\r\n                        criteria.params[value] = '';\r\n\r\n                        if (value == 'nodeId') {\r\n                            // default the node id param to this node\r\n                            criteria.params[value] = this.nodeId;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * A removal criteria name has changed so we will clear the params so\r\n     * that the params from the previous removal criteria name do not persist.\r\n     * @param transitionCriteria the transition criteria object\r\n     */\r\n    transitionCriteriaNameChanged(transitionCriteria) {\r\n\r\n        if (transitionCriteria != null) {\r\n\r\n            var nodeId = null;\r\n            var componentId = null;\r\n\r\n            if (transitionCriteria.params != null) {\r\n                // remember the node id and component id\r\n                nodeId = transitionCriteria.params.nodeId;\r\n                componentId = transitionCriteria.params.componentId;\r\n            }\r\n\r\n            // clear the params\r\n            transitionCriteria.params = {};\r\n\r\n            if (nodeId != null) {\r\n                // set the node id back into the params\r\n                transitionCriteria.params.nodeId = nodeId;\r\n            }\r\n\r\n            if (componentId != null) {\r\n                // set the component id back into the params\r\n                transitionCriteria.params.componentId = componentId;\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * A button to author a specific view of the node was clicked\r\n     * @param view the view name\r\n     */\r\n    nodeAuthoringViewButtonClicked(view) {\r\n\r\n        if (view == 'addComponent') {\r\n            // toggle the add component view and hide all the other views\r\n            this.showCreateComponent = !this.showCreateComponent;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = false;\r\n        } else if (view == 'editTransitions') {\r\n            // toggle the edit transitions view and hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = !this.showEditTransitions;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubricButton = false;\r\n            this.showCreateBranch = false;\r\n        } else if (view == 'editConstraints') {\r\n            // toggle the edit constraints view and hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = !this.showConstraints;\r\n            this.showEditButtons = false;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = false;\r\n        } else if (view == 'editButtons') {\r\n            // toggle the edit buttons view and hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = !this.showEditButtons;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = false;\r\n        } else if (view == 'editRubric') {\r\n            // toggle the edit buttons view and hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubric = !this.showRubric;\r\n            this.showCreateBranch = false;\r\n        } else if (view == 'createBranch') {\r\n            // toggle the edit buttons view and hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = !this.showCreateBranch;\r\n        } else if (view == 'previousNode') {\r\n            // hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = false;\r\n\r\n            // get the previous node id\r\n            var prevNodeId = this.ProjectService.getPreviousNodeId(this.nodeId);\r\n\r\n            if (prevNodeId != null) {\r\n                // there is a previous node id so we will go to it\r\n                this.$state.go('root.project.node', {projectId: this.projectId, nodeId:prevNodeId});\r\n            } else {\r\n                // there is no previous node id so we will display a message\r\n                var thereIsNoPreviousStep = this.$translate('thereIsNoPreviousStep');\r\n                alert(thereIsNoPreviousStep);\r\n            }\r\n        } else if (view == 'nextNode') {\r\n            // hide all the other views\r\n            this.showCreateComponent = false;\r\n            this.showEditTransitions = false;\r\n            this.showConstraints = false;\r\n            this.showEditButtons = false;\r\n            this.showRubric = false;\r\n            this.showCreateBranch = false;\r\n\r\n            // get the next node id\r\n            var nextNodeId = this.ProjectService.getNextNodeId(this.nodeId);\r\n\r\n            if (nextNodeId != null) {\r\n                // there is a next node id so we will go to it\r\n                this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nextNodeId});\r\n            } else {\r\n                // there is no next node id so we will display a message\r\n                var thereIsNoNextStep = this.$translate('thereIsNoNextStep');\r\n                alert(thereIsNoNextStep);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The author has changed the number of branch paths\r\n     */\r\n    createBranchNumberOfBranchesChanged() {\r\n\r\n        if (this.createBranchNumberOfBranches == 0) {\r\n            // the author has set the number of branch paths to 0 which is not allowed\r\n            alert(this.$translate('errorYouCantHave0BranchPaths'));\r\n\r\n            // revert the number of branch paths value\r\n            this.createBranchNumberOfBranches = this.createBranchBranches.length;\r\n        } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\r\n            /*\r\n             * the author is reducing the number of branches so we want to\r\n             * confirm they want to do so\r\n             */\r\n            var answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:this.createBranchNumberOfBranches}));\r\n\r\n            if (answer) {\r\n                // they answered yes\r\n\r\n                if (this.createBranchNumberOfBranches == 1) {\r\n                    /*\r\n                     * the author has removed all the branch paths so we will\r\n                     * remove the branch\r\n                     */\r\n                    this.removeBranch();\r\n                } else {\r\n                    /*\r\n                     * the author is reducing the number of branch paths but\r\n                     * not removing all of them\r\n                     */\r\n\r\n                    // loop through all the branch paths\r\n                    for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\r\n\r\n                        if (bp >= this.createBranchNumberOfBranches) {\r\n                            // this is a branch we want to remove\r\n                            var branch = this.createBranchBranches[bp];\r\n                            this.removeBranchPath(branch);\r\n\r\n                            /*\r\n                             * decrement the counter back one because we have\r\n                             * just removed a branch path\r\n                             */\r\n                            bp--;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // they answered no so we will revert the number of branches value\r\n                this.createBranchNumberOfBranches = this.createBranchBranches.length;\r\n            }\r\n        } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\r\n            // the author is increasing the number of branches\r\n\r\n            if (this.createBranchCriterion == null) {\r\n                /*\r\n                 * we will default the branching to be based on workgroup id\r\n                 * since that is what our researchers use most often\r\n                 */\r\n                this.createBranchCriterion = 'workgroupId';\r\n                this.createBranchCriterionChanged();\r\n            }\r\n\r\n            // loop for the number of branches and create new branches objects\r\n            for (var b = 0; b < this.createBranchNumberOfBranches; b++) {\r\n\r\n                if (b >= this.createBranchBranches.length) {\r\n                    /*\r\n                     * we do not have a branch object for this branch number so\r\n                     * we will create it\r\n                     */\r\n\r\n                    // create the branch object\r\n                    var branch = {};\r\n\r\n                    // set the branch number\r\n                    branch.number = b + 1;\r\n\r\n                    /*\r\n                     * set the mapping of all the ids to order for use when choosing which items are\r\n                     * in the branch path\r\n                     */\r\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\r\n\r\n                    // add the branch to the array of branches\r\n                    this.createBranchBranches.push(branch);\r\n\r\n                    // create a transition to represent the branch\r\n                    var transition = {};\r\n\r\n                    if (this.createBranchCriterion == 'score') {\r\n                        // the branch is based on score\r\n\r\n                        // create a score criterion\r\n                        var criterion = {};\r\n                        criterion.name = this.createBranchCriterion;\r\n                        criterion.params = {};\r\n                        criterion.params.scores = [];\r\n\r\n                        if (this.createBranchNodeId != null) {\r\n                            // set the node for which to look for the score\r\n                            criterion.params.nodeId = this.createBranchNodeId;\r\n                        }\r\n\r\n                        if (this.createBranchComponentId != null) {\r\n                            // set the component for which to look for the score\r\n                            criterion.params.componentId = this.createBranchComponentId;\r\n                        }\r\n\r\n                        transition.criteria = [];\r\n                        transition.criteria.push(criterion);\r\n                    } else if (this.createBranchCriterion == 'choiceChosen') {\r\n                        // the branch is based on choice chosen\r\n                        var criterion = {};\r\n                        criterion.name = this.createBranchCriterion;\r\n                        criterion.params = {};\r\n                        criterion.params.choiceIds = [];\r\n\r\n                        if (this.createBranchNodeId != null) {\r\n                            // set the node for which to look for the score\r\n                            criterion.params.nodeId = this.createBranchNodeId;\r\n                        }\r\n\r\n                        if (this.createBranchComponentId != null) {\r\n                            // set the component for which to look for the score\r\n                            criterion.params.componentId = this.createBranchComponentId;\r\n                        }\r\n\r\n                        transition.criteria = [];\r\n                        transition.criteria.push(criterion);\r\n                    } else if (this.createBranchCriterion == 'workgroupId') {\r\n                        // workgroup id branching does not require a transition criterion\r\n                    } else if (this.createBranchCriterion == 'random') {\r\n                        // random branching does not require a transition criterion\r\n                    }\r\n\r\n                    // add the transition\r\n                    this.node.transitionLogic.transitions.push(transition);\r\n\r\n                    // save a reference to the transition in the branch\r\n                    branch.transition = transition;\r\n                }\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The branch criterion has changed\r\n     */\r\n    createBranchCriterionChanged() {\r\n\r\n        if (this.createBranchCriterion != null) {\r\n\r\n            // get this node id\r\n            var nodeId = this.node.id;\r\n\r\n            if (this.createBranchCriterion == 'workgroupId') {\r\n                // the branch is based on workgroup id\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\r\n            } else if (this.createBranchCriterion == 'score') {\r\n                // the branch is based on score\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\r\n            } else if (this.createBranchCriterion == 'choiceChosen') {\r\n                // the branch is based on choice chosen\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\r\n            } else if (this.createBranchCriterion == 'random') {\r\n                // the branch is based on random assignment\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\r\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\r\n            }\r\n        }\r\n\r\n        /*\r\n         * update the transitions so that they have the necessary parameter\r\n         * fields for the given branch criterion\r\n         */\r\n        this.createBranchUpdateTransitions();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The create branch node id has changed\r\n     */\r\n    createBranchNodeIdChanged() {\r\n\r\n        this.createBranchComponentId = null;\r\n\r\n        // get the selected node\r\n        var node = this.ProjectService.getNodeById(this.createBranchNodeId);\r\n\r\n        if (node != null) {\r\n\r\n            // get the components of the selected node\r\n            var components = node.components;\r\n\r\n            if (components != null) {\r\n                if (components.length == 1) {\r\n                    /*\r\n                     * there is only one component in the node so we will\r\n                     * automatically select it in the drop down\r\n                     */\r\n                    var component = components[0];\r\n                    this.createBranchComponentId = component.id;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * update the transitions so that they have the necessary parameter\r\n         * fields for the given branch criterion\r\n         */\r\n        this.createBranchUpdateTransitions();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The create branch component id has changed\r\n     */\r\n    createBranchComponentIdChanged() {\r\n\r\n        /*\r\n         * update the transitions so that they have the necessary parameter\r\n         * fields for the given branch criterion\r\n         */\r\n        this.createBranchUpdateTransitions();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * Update the transitions so that they have the necessary parameter\r\n     * fields for the given branch criterion\r\n     */\r\n    createBranchUpdateTransitions() {\r\n\r\n        // loop through all the branches\r\n        for (var b = 0; b < this.createBranchBranches.length; b++) {\r\n\r\n            // get a branch object\r\n            var branch = this.createBranchBranches[b];\r\n\r\n            if (branch != null) {\r\n\r\n                // get the transition corresponding to the branch\r\n                var transition = branch.transition;\r\n\r\n                if (transition != null) {\r\n\r\n                    if (this.createBranchCriterion == 'choiceChosen') {\r\n                        // we are branching based on choice chosen\r\n\r\n                        // clear the criteria array\r\n                        transition.criteria = [];\r\n\r\n                        // create a new choice chosen criterion\r\n                        var criterion = {};\r\n                        criterion.name = 'choiceChosen';\r\n                        criterion.params = {};\r\n                        criterion.params.nodeId = this.createBranchNodeId;\r\n                        criterion.params.componentId = this.createBranchComponentId;\r\n                        criterion.params.choiceIds = [];\r\n\r\n                        // add the criterion to the array of criteria\r\n                        transition.criteria.push(criterion);\r\n\r\n                        /*\r\n                         * clear the choice id. we will set the choice id in\r\n                         * the branch object when we call createBranchUpdateChoiceChosenIds()\r\n                         */\r\n                        branch.choiceId = null;\r\n\r\n                        /*\r\n                         * clear the scores since we don't need it in choice\r\n                         * chosen branching\r\n                         */\r\n                        branch.scores = null;\r\n                    } else if (this.createBranchCriterion == 'score') {\r\n                        // we are branching based on score\r\n\r\n                        // clear the criteria array\r\n                        transition.criteria = [];\r\n\r\n                        // create a new score criterion\r\n                        var criterion = {};\r\n                        criterion.name = 'score';\r\n                        criterion.params = {};\r\n                        criterion.params.nodeId = this.createBranchNodeId;\r\n                        criterion.params.componentId = this.createBranchComponentId;\r\n                        criterion.params.scores = [];\r\n\r\n                        // re-use scores if available\r\n\r\n                        // add the criterion to the array of criteria\r\n                        transition.criteria.push(criterion);\r\n\r\n                        /*\r\n                         * clear the choice id since we don't need it in score\r\n                         * branching\r\n                         */\r\n                        branch.choiceId = null;\r\n\r\n                        // set the scores into the branch object\r\n                        branch.scores = criterion.params.scores;\r\n                    } else if (this.createBranchCriterion == 'workgroupId') {\r\n                        // we are branching based on workgroup id\r\n\r\n                        /*\r\n                         * remove the criteria array since it is not used for\r\n                         * branching based on workgroup id\r\n                         */\r\n                        delete transition['criteria'];\r\n\r\n                        // clear the node id and component id\r\n                        this.createBranchNodeId = null;\r\n                        this.createBranchComponentId = null;\r\n\r\n                        /*\r\n                         * clear the choice id and scores fields since we don't\r\n                         * need them in workgroup id branching\r\n                         */\r\n                        branch.choiceId = null;\r\n                        branch.scores = null;\r\n                    } else if (this.createBranchCriterion == 'random') {\r\n                        // we are branching based on random assignment\r\n\r\n                        /*\r\n                         * remove the criteria array since it is not used for\r\n                         * branching based on random assignment\r\n                         */\r\n                        delete transition['criteria'];\r\n\r\n                        // clear the node id and component id\r\n                        this.createBranchNodeId = null;\r\n                        this.createBranchComponentId = null;\r\n\r\n                        /*\r\n                         * clear the choice id and scores fields since we don't\r\n                         * need them in random branching\r\n                         */\r\n                        branch.choiceId = null;\r\n                        branch.scores = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.createBranchCriterion == 'choiceChosen') {\r\n            /*\r\n             * the branching is based on choice chosen so we will populate the\r\n             * choice ids\r\n             */\r\n            this.createBranchUpdateChoiceChosenIds();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically populate the selected choices if the branch is based on\r\n     * choice chosen and the selected component is a multiple choice component\r\n     */\r\n    createBranchUpdateChoiceChosenIds() {\r\n\r\n        // get the node id and component id\r\n        var nodeId = this.createBranchNodeId;\r\n        var componentId = this.createBranchComponentId;\r\n\r\n        // get the component\r\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n        if (component != null) {\r\n            if (component.type == 'MultipleChoice') {\r\n                // the component is a multiple choice component\r\n\r\n                // get the choices from the component\r\n                var choices = component.choices;\r\n\r\n                if (choices != null) {\r\n\r\n                    // loop through all the choices\r\n                    for (var c = 0; c < choices.length; c++) {\r\n                        var choice = choices[c];\r\n\r\n                        if (choice != null) {\r\n\r\n                            // get the fields of the choice\r\n                            var id = choice.id;\r\n                            var text = choice.text;\r\n                            var feedback = choice.feedback;\r\n                            var isCorrect = choice.isCorrect;\r\n\r\n                            // get the branch that corresponds to the choice\r\n                            var branch = this.createBranchBranches[c];\r\n\r\n                            if (branch != null) {\r\n                                // get the choice for this branch\r\n                                branch.choiceId = id;\r\n\r\n                                // make a copy of the choices from the component\r\n                                branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\r\n\r\n                                // get the transition corresponding to the branch\r\n                                var transition = branch.transition;\r\n\r\n                                if (transition != null) {\r\n\r\n                                    /*\r\n                                     * get the first transition criterion. we will assume\r\n                                     * there is only one transition criterion\r\n                                     */\r\n                                    var criterion = transition.criteria[0];\r\n\r\n                                    if (criterion != null) {\r\n\r\n                                        // get the params\r\n                                        var params = criterion.params;\r\n\r\n                                        if (params != null) {\r\n\r\n                                            // set the node id and component id\r\n                                            params.nodeId = nodeId;\r\n                                            params.componentId = componentId;\r\n\r\n                                            if (this.createBranchCriterion == 'choiceChosen') {\r\n                                                // set the choice id\r\n                                                params.choiceIds = [];\r\n                                                params.choiceIds.push(id);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A step was clicked in the create branch authoring view\r\n     * @param branch the branch path\r\n     * @param item the step that was clicked\r\n     */\r\n    createBranchStepClicked(branch, item) {\r\n\r\n        // get all the steps in order\r\n        var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\r\n\r\n        // an array that will hold the items that were checked\r\n        branch.checkedItemsInBranchPath = [];\r\n        var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\r\n\r\n        // an array that will hold the node ids that were checked\r\n        branch.nodeIdsInBranch = [];\r\n\r\n        // used to hold the previously checked node id\r\n        var previousCheckedNodeId = null;\r\n\r\n        // the node id after the node that was clicked\r\n        var nodeIdAfter = null;\r\n\r\n        /*\r\n         * loop through all the items in order and set the transitions so that\r\n         * the steps in a branch path transition to one after the other\r\n         */\r\n        for (var i = 0; i < orderedItems.length; i++) {\r\n            var orderedItem = orderedItems[i];\r\n\r\n            if (orderedItem != null && orderedItem.checked) {\r\n                // the item is checked\r\n\r\n                if (previousCheckedNodeId != null) {\r\n                    // make the previous node id point to the current item\r\n                    var previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\r\n\r\n                    if (previousCheckedNode != null) {\r\n\r\n                        // get the transition logic\r\n                        var transitionLogic = previousCheckedNode.transitionLogic;\r\n\r\n                        if (transitionLogic != null) {\r\n\r\n                            if (transitionLogic.transitions != null) {\r\n\r\n                                // clear the transitions\r\n                                transitionLogic.transitions = [];\r\n\r\n                                // create a new transition object to the current item\r\n                                var transition = {};\r\n                                transition.to = orderedItem.$key;\r\n\r\n                                // add the transition\r\n                                transitionLogic.transitions.push(transition);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // add the item to the checked items array\r\n                checkedItemsInBranchPath.push(orderedItem);\r\n\r\n                // add the node id to the array of node ids in the branch path\r\n                branch.nodeIdsInBranch.push(orderedItem.$key);\r\n\r\n                // remember the previously checked node id\r\n                previousCheckedNodeId = orderedItem.$key;\r\n            }\r\n\r\n            // get the previous ordered item (checked or unchecked)\r\n            var previousOrderedItem = orderedItems[i - 1];\r\n\r\n            if (previousOrderedItem != null) {\r\n                if (previousOrderedItem.$key == item.$key) {\r\n                    /*\r\n                     * the previous item was the node that was checked/unchecked\r\n                     * so we will remember this item because it is the node\r\n                     * that comes after the node that was checked/unchecked\r\n                     */\r\n                    nodeIdAfter = orderedItem.$key;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.createBranchMergePointNodeId != null) {\r\n            /*\r\n             * the merge point is specified so we will make the last checked\r\n             * node in this branch path point to the merge point\r\n             */\r\n\r\n            /*\r\n             * this is the last node in the branch path so we will make it\r\n             * transition to the merge point\r\n             */\r\n            var node = this.ProjectService.getNodeById(previousCheckedNodeId);\r\n\r\n            if (node != null) {\r\n                var transitionLogic = node.transitionLogic;\r\n\r\n                if (transitionLogic != null) {\r\n                    if (transitionLogic.transitions != null) {\r\n\r\n                        // clear the transitions\r\n                        transitionLogic.transitions = [];\r\n\r\n                        // make a transition to the merge point\r\n                        var transition = {};\r\n                        transition.to = this.createBranchMergePointNodeId;\r\n\r\n                        // add the transition\r\n                        transitionLogic.transitions.push(transition);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // get the branch number\r\n        var branchNumber = branch.number;\r\n\r\n        // get the node id that was clicked\r\n        var nodeId = item.$key;\r\n\r\n        // get the transition that corresponds to the branch\r\n        var transition = this.node.transitionLogic.transitions[branchNumber - 1];\r\n\r\n        var firstNodeId = null;\r\n\r\n        /*\r\n         * update the branch point transition in case the first step in the\r\n         * branch path has changed\r\n         */\r\n        if (transition != null) {\r\n\r\n            if (checkedItemsInBranchPath.length == 0) {\r\n                // there are no steps in the path\r\n                transition.to = null;\r\n            } else {\r\n                // get the first step in the path\r\n                var firstCheckedItem = checkedItemsInBranchPath[0];\r\n\r\n                if (firstCheckedItem != null) {\r\n                    // set the branch point transition to the first step in the path\r\n                    firstNodeId = firstCheckedItem.$key;\r\n                    transition.to = firstNodeId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // get the node that was clicked\r\n        var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n        if (node != null) {\r\n\r\n            // remove all branch path taken constraints from the node\r\n            this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\r\n\r\n            if (item.checked) {\r\n                // the item was checked so we will add the branch path taken constraints to it\r\n\r\n                /*\r\n                 * the branch path taken constraints will be from this node to\r\n                 * the first node in the branch path\r\n                 */\r\n                var fromNodeId = this.nodeId;\r\n                var toNodeId = firstNodeId;\r\n\r\n                // add the branch path taken constraints\r\n                this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\r\n            } else {\r\n                /*\r\n                 * the item was unchecked so we will change its transition to\r\n                 * point to the node that comes right after it\r\n                 */\r\n                this.ProjectService.setTransition(nodeId, nodeIdAfter);\r\n            }\r\n        }\r\n\r\n        /*\r\n         * update the constraints of other steps in the branch path if necessary.\r\n         * loop through all theh checked items in the path\r\n         */\r\n        for (var n = 0; n < checkedItemsInBranchPath.length; n++) {\r\n\r\n            // get a checked item in the branch path\r\n            var item = checkedItemsInBranchPath[n];\r\n            var itemNodeId = item.$key;\r\n\r\n            // remove all branch path taken constraints from the node\r\n            this.ProjectService.removeBranchPathTakenNodeConstraints(itemNodeId);\r\n\r\n            /*\r\n             * the branch path taken constraints will be from this node to\r\n             * the first node in the branch path\r\n             */\r\n            var fromNodeId = this.nodeId;\r\n            var toNodeId = firstNodeId;\r\n\r\n            // add the branch path taken constraints\r\n            this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\r\n        }\r\n\r\n        /*\r\n         * update the node numbers now that a step has been added to a branch path\r\n         * e.g. if this is a branching step that is called\r\n         * 1.5 B View the Potential Energy\r\n         * then the node number is 1.5 B\r\n         */\r\n        this.ProjectService.calculateNodeNumbers();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The score for a path has changed in the branch authoring\r\n     * @param branch the branch for which the score has changed\r\n     */\r\n    createBranchScoreChanged(branch) {\r\n\r\n        if (branch != null) {\r\n\r\n            // get the transition of the branch\r\n            var transition = branch.transition;\r\n\r\n            if (transition != null) {\r\n\r\n                // get the scores\r\n                var scores = branch.scores;\r\n\r\n                if (scores != null) {\r\n\r\n                    // get the criteria\r\n                    var criteria = transition.criteria;\r\n\r\n                    if (criteria != null) {\r\n\r\n                        // get the first criteria. we will assume there is only one criteria\r\n                        var criterion = criteria[0];\r\n\r\n                        if (criterion != null) {\r\n\r\n                            // get the params of the criterion\r\n                            var params = criterion.params;\r\n\r\n                            if (params != null) {\r\n\r\n                                // update the scores into the params\r\n                                params.scores = scores;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The merge point has changed in the branch authoring\r\n     */\r\n    createBranchMergePointNodeIdChanged() {\r\n\r\n        // get the merge point node id\r\n        var createBranchMergePointNodeId = this.createBranchMergePointNodeId;\r\n\r\n        var branches = this.createBranchBranches;\r\n\r\n        // loop through all the branches\r\n        for (var b = 0; b < branches.length; b++) {\r\n            var branch = branches[b];\r\n\r\n            if (branch != null) {\r\n\r\n                // get the node ids in the branch path\r\n                var nodeIdsInBranch = branch.nodeIdsInBranch;\r\n\r\n                if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\r\n\r\n                    // get the last node id in the branch path\r\n                    var lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\r\n\r\n                    if (lastNodeIdInBranchPath != null) {\r\n\r\n                        // get the last node in the branch path\r\n                        var lastNodeInBranchPath = this.ProjectService.getNodeById(lastNodeIdInBranchPath);\r\n\r\n                        if (lastNodeInBranchPath != null) {\r\n\r\n                            // get the transition logic of the last node\r\n                            var transitionLogic = lastNodeInBranchPath.transitionLogic;\r\n\r\n                            if (transitionLogic != null) {\r\n\r\n                                if (transitionLogic.transitions != null) {\r\n\r\n                                    // clear the transitions\r\n                                    transitionLogic.transitions = [];\r\n\r\n                                    // make a new transition to the merge point\r\n                                    var transition = {};\r\n                                    transition.to = createBranchMergePointNodeId;\r\n\r\n                                    // add the transition\r\n                                    transitionLogic.transitions.push(transition);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * calculate the node numbers\r\n         * e.g. if the step is called\r\n         * 1.5 View the Potential Energy\r\n         * then the node number is 1.5\r\n         */\r\n        this.ProjectService.calculateNodeNumbers();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * The remove branch button was clicked\r\n     */\r\n    removeBranchButtonClicked() {\r\n\r\n        // ask the user if they are sure they want to remove the branch\r\n        var message = this.$translate('areYouSureYouWantToRemoveTheBranch');\r\n        var answer = confirm(message);\r\n\r\n        if (answer) {\r\n            // the user answered yes so we will remove the branch\r\n            this.removeBranch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the branch from the step by removing all the branch paths\r\n     */\r\n    removeBranch() {\r\n\r\n        // loop through all the branch paths\r\n        for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\r\n\r\n            // remove a branch path\r\n            var branchPath = this.createBranchBranches[bp];\r\n            this.removeBranchPath(branchPath);\r\n\r\n            /*\r\n             * shift the counter back one because we have just removed a branch\r\n             * path\r\n             */\r\n            bp--;\r\n        }\r\n\r\n        // get the node id of this node (which is the branch point)\r\n        var nodeId = this.node.id;\r\n\r\n        // get the node id that comes after this node\r\n        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\r\n\r\n        /*\r\n         * update the transition of this step to point to the next step\r\n         * in the project. this may be different than the next step\r\n         * if it was still the branch point.\r\n         */\r\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\r\n\r\n        // clear the transition logic fields\r\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\r\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\r\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\r\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\r\n\r\n        // clear the branch authoring fields\r\n        this.createBranchNumberOfBranches = 1;\r\n        this.createBranchCriterion = null;\r\n        this.createBranchNodeId = null;\r\n        this.createBranchComponentId = null;\r\n        this.createBranchMergePointNodeId = null;\r\n\r\n        /*\r\n         * branch paths are determined by the transitions. since there is now\r\n         * just one transition, we will create a single branch object to\r\n         * represent it.\r\n         */\r\n\r\n        // create a branch object to hold all the related information for that branch\r\n        var branch = {};\r\n\r\n        // set the branch number for display purposes\r\n        branch.number = 1;\r\n\r\n        /*\r\n         * set the mapping of all the ids to order for use when choosing which items are\r\n         * in the branch path\r\n         */\r\n        branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\r\n\r\n        // an array that will hold all the checked items in the branch path\r\n        branch.checkedItemsInBranchPath = [];\r\n\r\n        var transition = null;\r\n\r\n        // get the transition from the node\r\n        var transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\r\n\r\n        if (transitions != null && transitions.length > 0) {\r\n            transition = transitions[0];\r\n        }\r\n\r\n        // set the transition into the branch so we can access it easily later\r\n        branch.transition = transition;\r\n\r\n        // add the branch to the array of branches\r\n        this.createBranchBranches.push(branch);\r\n\r\n        /*\r\n         * calculate the node numbers\r\n         * e.g. if the step is called\r\n         * 1.5 View the Potential Energy\r\n         * then the node number is 1.5\r\n         */\r\n        this.ProjectService.calculateNodeNumbers();\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n\r\n    /**\r\n     * Remove a branch path by removing all the branch path taken constraints\r\n     * from the steps in the branch path, resetting the transitions in the\r\n     * steps in the branch path, and removing the transition corresponding to\r\n     * the branch path in this branch point node.\r\n     * @param branch the branch object\r\n     */\r\n    removeBranchPath(branch) {\r\n\r\n        if (branch != null) {\r\n\r\n            // get the checked items in the branch path\r\n            var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\r\n\r\n            if (checkedItemsInBranchPath != null) {\r\n\r\n                // loop through all the checked items in the branch path\r\n                for (var i = 0; i < checkedItemsInBranchPath.length; i++) {\r\n\r\n                    // get an item in the branch path\r\n                    var checkedItem = checkedItemsInBranchPath[i];\r\n\r\n                    if (checkedItem != null) {\r\n\r\n                        // get the node id of the checked item\r\n                        var nodeId = checkedItem.$key;\r\n\r\n                        // remove the branchPathTaken constraints from the step\r\n                        this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\r\n\r\n                        /*\r\n                         * update the transition of the step to point to the next step\r\n                         * in the project. this may be different than the next step\r\n                         * if it was still in the branch path.\r\n                         */\r\n                        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\r\n                        this.ProjectService.setTransition(nodeId, nodeIdAfter);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // get the index of the branch path\r\n            var branchPathIndex = this.createBranchBranches.indexOf(branch);\r\n\r\n            // remove the branch path\r\n            this.createBranchBranches.splice(branchPathIndex, 1);\r\n\r\n            // remove the transition the corresponds to the branch path\r\n            this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The author has changed the step rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the step rubric\r\n        this.node.rubric = html;\r\n\r\n        // save the project\r\n        this.authoringViewNodeChanged();\r\n    }\r\n};\r\n\r\nNodeAuthoringController.$inject = [\r\n    '$anchorScroll',\r\n    '$filter',\r\n    '$injector',\r\n    '$location',\r\n    '$mdDialog',\r\n    '$scope',\r\n    '$state',\r\n    '$stateParams',\r\n    '$timeout',\r\n    'ConfigService',\r\n    'NodeService',\r\n    'ProjectService',\r\n    'UtilService'\r\n];\r\n\r\nexport default NodeAuthoringController;\r\n"]}