{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$filter","$injector","$location","$mdDialog","$rootScope","$scope","$state","$stateParams","$timeout","ConfigService","NodeService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","showComponents","showStepButtons","showComponentAuthoringViews","componentsToChecked","setCurrentNodeByNodeId","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","getComponentTypeLabel","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","insertAssetString","insertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","summernoteRubricHTML","replaceAssetPaths","rubric","$on","event","args","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showSubmitButton","showSaveButton","turnOnSaveButtonInComponents","id","doesAnyComponentShowSubmitButton","turnOffSaveButtonInComponents","authoringViewNodeChanged","scrollToTopOfPage","data","getNodePositionAndTitleByNodeId","isGroupNode","saveEvent","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","criterion","name","createBranchNodeId","createBranchComponentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","setCurrentNode","go","alert","angular","equals","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","whenToChoosePath","canChangePath","maxPathsVisitable","n","nodeTransition","newTransitionCriteria","transitionCriteria","index","indexOf","splice","nodeAuthoringViewButtonClicked","turnOnAddComponentMode","turnOffMoveComponentMode","turnOnInsertComponentMode","hideComponentAuthoring","deleteComponent","checkIfNeedToShowNodeSaveOrNodeSubmitButtons","component","type","service","get","componentUsesSaveButton","parseProject","pop","singleRemovalCriteria","singleTransitionCriteria","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraints","nodeConstraints","constraint","constraintId","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","getRemovalCriteriaParamsByName","paramObject","view","showConstraints","showEditButtons","showRubric","showCreateBranch","showAdvanced","showImportView","showJSON","saveAndParseJSON","showRubricButton","prevNodeId","getPreviousNodeId","thereIsNoPreviousStep","nextNodeId","getNextNodeId","thereIsNoNextStep","authoringNodeContentJSONString","toJson","answer","removeBranch","bp","removeBranchPath","createBranchCriterionChanged","b","setTransitionLogicField","createBranchUpdateTransitions","selectedNode","createBranchUpdateChoiceChosenIds","createBranchUpdateChoiceChosenIdsHelper","c","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraints","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","calculateNodeNumbers","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","insertComponentMode","addComponentMode","moveComponentMode","copyComponentMode","importComponentMode","selectedComponents","componentIds","componentNumberAndType","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProjectId","importProject","turnOnImportComponentMode","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","then","turnOffAddComponentMode","turnOnMoveComponentMode","turnOnCopyComponentMode","confirmMessage","selectedComponentNumbersAndTypes","getSelectedComponentNumbersAndTypes","selectedComponentNumberAndType","getSelectedComponentIds","getComponentObjectsForEventData","clearComponentsToChecked","turnOffInsertComponentMode","showComponentAuthoring","doesAnyComponentHaveWork","hideAllComponentSaveButtons","handleAddComponent","handleMoveComponent","handleCopyComponent","handleImportComponent","newComponents","newComponent","createComponent","highlightNewComponentsAndThenShowComponentAuthoring","selectedComponentIds","moveComponent","componentsCopied","copyComponentAndInsert","componentCopied","fromComponentId","toComponentId","turnOffCopyComponentMode","importComponents","turnOffImportComponentMode","retrieveProjectAssets","componentElement","componentOriginalBackgroundColor","css","animate","scrollTop","prop","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","nodes","getSelectedComponentsToImport","componentsInNode","insertAfterComponentId","getComponentObjectsForImportEventData","componentsImported","componentImported","newComponentId","eventName","category","context","componentObjects","tempComponent","parseInt","updatedNode","fromJson","setNode","$inject"],"mappings":"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","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n  constructor(\n      $anchorScroll,\n      $filter,\n      $injector,\n      $location,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      $state,\n      $stateParams,\n      $timeout,\n      ConfigService,\n      NodeService,\n      ProjectAssetService,\n      ProjectService,\n      TeacherDataService,\n      UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$location = $location;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.projectId = $stateParams.projectId;\n    this.nodeId = $stateParams.nodeId;\n    this.showCreateComponent = false;\n    this.showEditTransitions = false;\n    this.selectedComponent = null;\n    this.nodeCopy = null;\n    this.undoStack = [];\n    this.howToChooseAmongAvailablePathsOptions =\n        [null, 'random', 'workgroupId', 'firstAvailable', 'lastAvailable'];\n    this.whenToChoosePathOptions =\n        [null, 'enterNode', 'exitNode', 'scoreChanged', 'studentDataChanged'];\n    this.canChangePathOptions = [null, true, false];\n    this.createBranchBranches = [];\n    this.showComponents = true;\n    this.showStepButtons = true;\n    this.showComponentAuthoringViews = true;\n\n    // mapping from component id to whether the component checkbox is checked\n    this.componentsToChecked = {};\n\n    this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n    // the available constraint actions\n    this.constraintActions = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseAnAction')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisitable\",\n        text: this.$translate('makeAllNodesAfterThisNotVisitable')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisible\",\n        text: this.$translate('makeAllNodesAfterThisNotVisible')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisitable\",\n        text: this.$translate('makeAllOtherNodesNotVisitable')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisible\",\n        text: this.$translate('makeAllOtherNodesNotVisible')\n      },\n      {\n        value: \"makeThisNodeNotVisitable\",\n        text: this.$translate('makeThisNodeNotVisitable')\n      },\n      {\n        value: \"makeThisNodeNotVisible\",\n        text: this.$translate('makeThisNodeNotVisible')\n      }\n    ];\n\n    // the available removal conditionals\n    this.removalConditionals = [\n      {\n        value: \"all\",\n        text: this.$translate('all')\n      },\n      {\n        value: \"any\",\n        text: this.$translate('any')\n      }\n    ];\n\n    // the available removal criteria\n    this.removalCriteria = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseARemovalCriteria')\n      },\n      {\n        value: \"isCompleted\",\n        text: this.$translate('isCompleted'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"branchPathTaken\",\n        text: this.$translate('branchPathTaken'),\n        params: [\n          {\n            value: \"fromNodeId\",\n            text: this.$translate('fromNodeID')\n          },\n          {\n            value: \"toNodeId\",\n            text: this.$translate('toNodeID')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      },\n      {\n        value: \"isCorrect\",\n        text: this.$translate('IS_CORRECT'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          }\n        ]\n      },\n      {\n        value: \"usedXSubmits\",\n        text: this.$translate('usedXSubmits'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"requiredSubmitCount\",\n            text: this.$translate('requiredSubmitCount')\n          }\n        ]\n      },\n      {\n        value: \"isVisible\",\n        text: this.$translate('isVisible'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isVisitable\",\n        text: this.$translate('isVisitable'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isVisited\",\n        text: this.$translate('isVisited'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isPlanningActivityCompleted\",\n        text: this.$translate('isPlanningActivityCompleted')\n      }\n    ];\n\n    // available transitionCriterias\n    this.transitionCriterias = [\n      {\n        value: \"score\",\n        text: this.$translate('SCORE'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      }\n    ];\n\n    this.branchCriteria = [\n      {\n        value: \"workgroupId\",\n        text: this.$translate('WORKGROUP_ID')\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE')\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen')\n      },\n      {\n        value: \"random\",\n        text: this.$translate('random')\n      }\n    ];\n\n    // the array of component types that can be created\n    // TODO: automate by looping through active component types for this WISE instance\n    this.componentTypes = [\n      {componentType: 'Animation', componentName: this.UtilService.getComponentTypeLabel('Animation')},\n      {componentType: 'AudioOscillator', componentName: this.UtilService.getComponentTypeLabel('AudioOscillator')},\n      {componentType: 'ConceptMap', componentName: this.UtilService.getComponentTypeLabel('ConceptMap')},\n      {componentType: 'Discussion', componentName: this.UtilService.getComponentTypeLabel('Discussion')},\n      {componentType: 'Draw', componentName: this.UtilService.getComponentTypeLabel('Draw')},\n      {componentType: 'Embedded', componentName: this.UtilService.getComponentTypeLabel('Embedded')},\n      {componentType: 'Graph', componentName: this.UtilService.getComponentTypeLabel('Graph')},\n      {componentType: 'HTML', componentName: this.UtilService.getComponentTypeLabel('HTML')},\n      {componentType: 'Label', componentName: this.UtilService.getComponentTypeLabel('Label')},\n      {componentType: 'Match', componentName: this.UtilService.getComponentTypeLabel('Match')},\n      {componentType: 'MultipleChoice', componentName: this.UtilService.getComponentTypeLabel('MultipleChoice')},\n      {componentType: 'OpenResponse', componentName: this.UtilService.getComponentTypeLabel('OpenResponse')},\n      {componentType: 'OutsideURL', componentName: this.UtilService.getComponentTypeLabel('OutsideURL')},\n      {componentType: 'Table', componentName: this.UtilService.getComponentTypeLabel('Table')}\n    ];\n\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n    // get the step number e.g. 1.3\n    this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n    // get the components in the node\n    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n    /*\n     * remember a copy of the node at the beginning of this node authoring\n     * session in case we need to roll back if the user decides to\n     * cancel/revert all the changes.\n     */\n    this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    /*\n     * remember the current version of the node. this will be updated each\n     * time the user makes a change.\n     */\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    // populate the branch authoring if any\n    this.populateBranchAuthoring();\n\n    // create the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\n\n    // the tooltip text for the insert WISE asset button\n    let insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    let insertAssetButton = this.UtilService.createInsertAssetButton(\n        this, null, this.nodeId, null, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: insertAssetButton\n      }\n    };\n\n    /*\n     * inject the asset paths into the rubric html and set the summernote\n     * rubric html\n     */\n    this.summernoteRubricHTML =\n        this.ProjectService.replaceAssetPaths(this.node.rubric);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     * TODO refactor too many nesting\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == null) {\n          // the asset was selected for this component\n          if (args.assetItem != null && args.assetItem.fileName != null) {\n            let fileName = args.assetItem.fileName;\n            /*\n             * get the assets directory path\n             * e.g.\n             * /wise/curriculum/3/\n             */\n            let assetsDirectoryPath =\n                this.ConfigService.getProjectAssetsDirectoryPath();\n            let fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n            if (args.target == 'rubric') {\n              // the target is the summernote rubric element\n              let summernoteId = 'summernoteRubric_' + this.nodeId;\n\n              if (this.UtilService.isImage(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // add the image html\n                $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n              } else if (this.UtilService.isVideo(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // insert the video element\n                let videoElement = document.createElement('video');\n                videoElement.controls = 'true';\n                videoElement.innerHTML =\n                    '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                $('#' + summernoteId).summernote('insertNode', videoElement);\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    this.$scope.$on('componentShowSubmitButtonValueChanged', (event, args) => {\n      let nodeId = args.nodeId;\n      let componentId = args.componentId;\n      let showSubmitButton = args.showSubmitButton;\n      if (showSubmitButton) {\n        /*\n         * a component is showing their submit button so we will hide\n         * the step save button and submit buttons\n         */\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n\n        // turn on the save buttons for all components in this step\n        this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n      } else {\n        /*\n         * a component is hiding their submit button so we may need\n         * to show the step save button\n         */\n        if (this.ProjectService.doesAnyComponentShowSubmitButton(this.node.id)) {\n          /*\n           * there is at least one component in the step that is showing\n           * their submit button so we will show the save button on\n           * all the components\n           */\n\n          // turn on the save buttons for all components in this step\n          this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n        } else {\n          /*\n           * no components in this step show their submit button so we\n           * will show the step save button\n           */\n          this.node.showSaveButton = true;\n          this.node.showSubmitButton = false;\n\n          // turn off the save buttons for all the components\n          this.ProjectService.turnOffSaveButtonInComponents(this.node.id);\n        }\n      }\n\n      // save changes\n      this.authoringViewNodeChanged();\n    });\n\n    this.scrollToTopOfPage();\n\n    let data = {\n      \"title\": this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId)\n    };\n\n    if (this.ProjectService.isGroupNode(this.nodeId)) {\n      this.saveEvent('activityViewOpened', 'Navigation', data);\n    } else {\n      this.saveEvent('stepViewOpened', 'Navigation', data);\n    }\n  }\n\n  /**\n   * Populate the branch authoring\n   * TODO refactor too much nesting\n   */\n  populateBranchAuthoring() {\n    if (this.node.transitionLogic != null) {\n      // clear the create branch branches so we can populate them again\n      this.createBranchBranches = [];\n\n      // get the number of branches\n      if (this.node.transitionLogic.transitions != null) {\n        this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\n      } else {\n        this.createBranchNumberOfBranches = 0;\n      }\n\n      for (let t = 0; t < this.node.transitionLogic.transitions.length; t++) {\n        let transition = this.node.transitionLogic.transitions[t];\n\n        if (transition != null) {\n\n          // create a branch object to hold all the related information for that branch\n          let branch = {};\n\n          // set the branch number for display purposes\n          branch.number = t + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // an array that will hold all the checked items in the branch path\n          branch.checkedItemsInBranchPath = [];\n\n          // set the transition into the branch so we can access it easily later\n          branch.transition = transition;\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // get the transition criteria\n          let criteria = transition.criteria;\n\n          if (criteria != null) {\n            for (let criterion of criteria) {\n              if (criterion != null) {\n                let name = criterion.name;\n                let params = criterion.params;\n\n                if (params != null) {\n                  // get the node id and component id params if any\n                  this.createBranchNodeId = params.nodeId;\n                  this.createBranchComponentId = params.componentId;\n                }\n\n                if (name == 'score') {\n                  // this is a score criteria\n\n                  // set the branch criterion to score\n                  this.createBranchCriterion = 'score';\n\n                  if (params != null && params.scores != null) {\n                    // set the scores into the branch object\n                    branch.scores = params.scores;\n                  }\n                } else if (name == 'choiceChosen') {\n                  // this is a choice chosen criteria\n\n                  // set the branch criterion to choice chosen\n                  this.createBranchCriterion = 'choiceChosen';\n\n                  if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\n                    // set the choice id into the branch object\n                    branch.choiceId = params.choiceIds[0];\n                  }\n\n                  // get the choices from the component\n                  let choices = this.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\n\n                  if (choices != null) {\n                    // set the choices into the branch object\n                    branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n                  }\n                }\n              }\n            }\n          }\n\n          // get the node ids in the branch path\n          let nodeIdsInBranch = this.ProjectService\n              .getNodeIdsInBranch(this.nodeId, transition.to);\n          for (let nodeId of nodeIdsInBranch) {\n            let item = branch.items[nodeId];\n            if (item != null) {\n              // make the item checked\n              item.checked = true;\n\n              // add the item to the array of checked items in this branch path\n              branch.checkedItemsInBranchPath.push(item);\n            }\n          }\n\n          // set the node ids in branch array into the branch object\n          branch.nodeIdsInBranch = nodeIdsInBranch;\n\n          if (nodeIdsInBranch.length > 0) {\n            // get the last node id in the branch path\n            let lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n            if (lastNodeIdInBranch != null) {\n              let transitionsFromLastNode = this.ProjectService\n                  .getTransitionsByFromNodeId(lastNodeIdInBranch);\n              if (transitionsFromLastNode != null &&\n                  transitionsFromLastNode.length > 0) {\n                let transition = transitionsFromLastNode[0];\n                if (transition != null) {\n                  this.createBranchMergePointNodeId = transition.to;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (this.createBranchCriterion == null) {\n        /*\n         * we have not been able to determine the branch criterion yet\n         * so we will look at the howToChooseAmongAvailablePaths field\n         */\n        if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n          // set the branch criterion to workgroup id\n          this.createBranchCriterion = 'workgroupId';\n        } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n          // set the branch criterion to random\n          this.createBranchCriterion = 'random';\n        }\n      }\n    }\n  }\n\n  /**\n   * Launch VLE with this current step as the initial step\n   */\n  previewStep() {\n    let data = { \"constraints\": true };\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Launch VLE with this current step as the initial step without constraints\n   */\n  previewStepWithoutConstraints() {\n    let data = { \"constraints\": false };\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '?constraints=false' + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Close the node authoring view\n   */\n  close() {\n    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n    this.TeacherDataService.setCurrentNode(null);\n    this.$state.go('root.project', {projectId: this.projectId});\n    this.scrollToTopOfPage();\n  };\n\n  /**\n   * Display an error saving during advanced authoring, most-likely due to malformed JSON\n   */\n  showSaveErrorAdvancedAuthoring() {\n    alert(this.$translate('saveErrorAdvancedAuthoring'));\n  };\n\n  /**\n   * The author has clicked the cancel button which will revert all\n   * the recent changes since they opened the node.\n   */\n  cancel() {\n    // check if the user has made any changes\n    if (!angular.equals(this.node, this.originalNodeCopy)) {\n      // the user has made changes\n      if (confirm(this.$translate('confirmUndo'))) {\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n        this.ProjectService.saveProject();\n        this.close();\n      }\n    } else {\n      // the user has not made any changes, so close the node authoring view\n      this.close();\n    }\n  }\n\n  /**\n   * Add a new transition for this node.\n   */\n  addNewTransition() {\n    if (this.node.transitionLogic.transitions == null) {\n      this.node.transitionLogic.transitions = [];\n    }\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    if (nodeTransitions.length > 0) {\n      // If this node already has transitions, copy the last one.\n      let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n      let newTransition = {\n        \"to\": lastNodeTransition.to\n      };\n      nodeTransitions.push(newTransition);\n    } else {\n      // Otherwise set the new transition to the current nodeId\n      let newTransition = {\n        \"to\": this.nodeId\n      };\n      nodeTransitions.push(newTransition);\n    }\n\n    if (nodeTransitions.length > 1) {\n      /*\n       * there is more than one transition so we will set default values\n       * for the transition logic parameters if they haven't already been\n       * set\n       */\n      if (this.node.transitionLogic.howToChooseAmongAvailablePaths == null) {\n        this.node.transitionLogic.howToChooseAmongAvailablePaths = 'workgroupId';\n      }\n\n      if (this.node.transitionLogic.whenToChoosePath == null) {\n        this.node.transitionLogic.whenToChoosePath = 'enterNode';\n      }\n\n      if (this.node.transitionLogic.canChangePath == null) {\n        this.node.transitionLogic.canChangePath = false;\n      }\n\n      if (this.node.transitionLogic.maxPathsVisitable == null) {\n        this.node.transitionLogic.maxPathsVisitable = 1;\n      }\n    }\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Add a new transition criteria for the specified transition.\n   */\n  addNewTransitionCriteria(transition) {\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    for (let n = 0; n < nodeTransitions.length; n++) {\n      let nodeTransition = nodeTransitions[n];\n      if (nodeTransition == transition) {\n        if (nodeTransition.criteria == null) {\n          nodeTransition.criteria = [];\n        }\n        let newTransitionCriteria = {\n          \"name\":\"\",\n          \"params\": {\n            \"nodeId\": \"\",\n            \"componentId\": \"\"\n          }\n        };\n        nodeTransition.criteria.push(newTransitionCriteria);\n      }\n    }\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria node id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaNodeIdChanged(transitionCriteria) {\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n      // remember the node id\n      let nodeId = transitionCriteria.params.nodeId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria component id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaComponentIdChanged(transitionCriteria) {\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n      // remember the node id and component id\n      let nodeId = transitionCriteria.params.nodeId;\n      let componentId = transitionCriteria.params.componentId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Deletes the specified transition from this node\n   */\n  deleteTransition(transition) {\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    let index = nodeTransitions.indexOf(transition);\n    if (index > -1) {\n      nodeTransitions.splice(index, 1);\n    }\n\n    if (nodeTransitions.length <= 1) {\n      /*\n       * there is zero or one transition so we will clear the parameters\n       * below since they only apply when there are multiple transitions\n       */\n      this.node.transitionLogic.howToChooseAmongAvailablePaths = null;\n      this.node.transitionLogic.whenToChoosePath = null;\n      this.node.transitionLogic.canChangePath = null;\n      this.node.transitionLogic.maxPathsVisitable = null;\n    }\n\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n\n  /**\n   * Save transitions for this node\n   */\n  saveTransitions() {\n    this.ProjectService.saveProject();\n    this.showEditTransitions = false;\n  }\n\n  /**\n   * The add component button was clicked\n   */\n  addComponentButtonClicked() {\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n\n    // show the add component UI elements\n    this.nodeAuthoringViewButtonClicked('addComponent');\n\n    // turn on add component mode\n    this.turnOnAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode();\n\n    // hide the component authoring\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * Delete the component from this node\n   * @param componentId the component id\n   */\n  deleteComponent(componentId) {\n    if (confirm(this.$translate('confirmDeleteComponent'))) {\n      // delete the component from the node\n      this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n      // check if we need to show the node save or node submit buttons\n      this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * Hide the save button in all the components\n   * TODO refactor too much nesting\n   */\n  hideAllComponentSaveButtons() {\n    let components = this.components;\n    if (components != null) {\n      for (let component of components) {\n        if (component != null) {\n          let componentType = component.type;\n\n          // get the service for the component type\n          let service = this.$injector.get(componentType + 'Service');\n          if (service != null) {\n            if (service.componentUsesSaveButton()) {\n              /*\n               * this component uses a save button so we will hide\n               * it\n               */\n              component.showSaveButton = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The node has changed in the authoring view\n   */\n  authoringViewNodeChanged() {\n    // put the previous version of the node on to the undo stack\n    this.undoStack.push(this.currentNodeCopy);\n\n    // update the current node copy\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    // refresh the project\n    this.ProjectService.parseProject();\n    this.items = this.ProjectService.idToOrder;\n\n    return this.ProjectService.saveProject();\n  }\n\n  /**\n   * Undo the last change by reverting the node to the previous version\n   */\n  undo() {\n    if (this.undoStack.length === 0) {\n      // the undo stack is empty so there are no changes to undo\n      alert(this.$translate('noUndoAvailable'));\n    } else if (this.undoStack.length > 0) {\n      // the undo stack has elements\n\n      if (confirm(this.$translate('confirmUndoLastChange'))) {\n        // perform any node cleanup if necessary\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n        // get the previous version of the node\n        let nodeCopy = this.undoStack.pop();\n\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n        this.ProjectService.saveProject();\n      }\n\n    }\n  }\n\n  /**\n   * Get the removal criteria params for a removal criteria name\n   * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n   * @return the params for the given removal criteria name\n   */\n  getRemovalCriteriaParamsByName(name) {\n    let params = [];\n    if (name != null) {\n      for (let singleRemovalCriteria of this.removalCriteria) {\n        if (singleRemovalCriteria != null) {\n          if (singleRemovalCriteria.value == name) {\n            /*\n             * we have found the removal criteria we are looking for\n             * so we will get its params\n             */\n            params = singleRemovalCriteria.params;\n            break;\n          }\n        }\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Get the transition criteria params for a transition criteria name\n   * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n   * @return the params for the given transition criteria name\n   */\n  getTransitionCriteriaParamsByName(name) {\n    let params = [];\n    if (name != null) {\n      for (let singleTransitionCriteria of this.transitionCriterias) {\n        if (singleTransitionCriteria != null &&\n            singleTransitionCriteria.value == name) {\n          /*\n           * we have found the removal criteria we are looking for\n           * so we will get its params\n           */\n          params = singleTransitionCriteria.params;\n          break;\n        }\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Get the choices of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choices from the component\n   */\n  getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n    let choices = [];\n    let component = this.ProjectService\n        .getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null && component.choices != null) {\n      choices = component.choices;\n    }\n    return choices;\n  }\n\n  /**\n   * Get the choice type of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choice type e.g. 'radio' or 'checkbox'\n   */\n  getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n    let choiceType = null;\n    let component = this.ProjectService\n        .getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null && component.choiceType != null) {\n      choiceType = component.choiceType;\n    }\n    return choiceType;\n  }\n\n  /**\n   * Get the next available constraint id for a node\n   * @param nodeId the node id\n   * @return a constraint id that hasn't been used yet\n   */\n  getNewNodeConstraintId(nodeId) {\n    let newNodeConstraintId = null;\n    let usedConstraintIds = [];\n    let node = this.ProjectService.getNodeById(nodeId);\n    if (node != null && node.constraints != null) {\n      let nodeConstraints = node.constraints;\n      for (let constraint of nodeConstraints) {\n        if (constraint != null) {\n          let constraintId = constraint.id;\n          usedConstraintIds.push(constraintId);\n        }\n      }\n    }\n\n    // counter used for finding a constraint id that hasn't been used yet\n    let constraintCounter = 1;\n\n    // loop until we have found an unused constraint id\n    while (newNodeConstraintId == null) {\n      // create a potential constraint id\n      let potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n\n      // check if the constraint id has been used already\n      if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n        // the constraint id has not been used so we can use it\n        newNodeConstraintId = potentialNewNodeConstraintId;\n      } else {\n        /*\n         * the constraint id has been used so we will increment the\n         * counter to try another contraint id\n         */\n        constraintCounter++;\n      }\n    }\n    return newNodeConstraintId;\n  }\n\n  /**\n   * Add a constraint\n   */\n  addConstraint() {\n    // get a new constraint id\n    let newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n\n    // create the constraint object\n    let constraint = {\n      \"id\": newNodeConstraintId,\n      \"action\": '',\n      \"targetId\": this.nodeId,\n      \"removalConditional\": 'all',\n      \"removalCriteria\": []\n    };\n\n    // create a removal criteria\n    let removalCriteria = {\n      \"name\": '',\n      \"params\": {}\n    };\n\n    // add the removal criteria to the constraint\n    constraint.removalCriteria.push(removalCriteria);\n\n    // create the constraints array if it does not exist\n    if (this.node.constraints == null) {\n      this.node.constraints = [];\n    }\n    this.node.constraints.push(constraint);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a constraint\n   * @param constraintIndex delete the constraint at the index\n   */\n  deleteConstraint(constraintIndex) {\n    if (constraintIndex != null) {\n      let node = this.ProjectService.getNodeById(this.nodeId);\n      if (node != null) {\n        let constraints = node.constraints;\n        if (constraints != null) {\n          // remove the constraint at the given index\n          constraints.splice(constraintIndex, 1);\n        }\n      }\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Add a removal criteria\n   * @param constraint add the removal criteria to this constraint\n   */\n  addRemovalCriteria(constraint) {\n    if (constraint != null) {\n      // create the removal criteria\n      let removalCriteria = {\n        \"name\": '',\n        \"params\": {}\n      };\n      // add the removal criteria to the constraint\n      constraint.removalCriteria.push(removalCriteria);\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a removal criteria from a constraint\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n    if (constraint != null) {\n      // get all the removal criteria\n      let removalCriteria = constraint.removalCriteria;\n      if (removalCriteria != null) {\n        // remove the single removal criteria\n        removalCriteria.splice(removalCriteriaIndex, 1);\n      }\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a transition criteria from a transition\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n    if (transition != null) {\n      // get all the transition criteria\n      let transitionCriterias = transition.criteria;\n      if (transitionCriterias != null) {\n        // remove the single transition criteria\n        transitionCriterias.splice(transitionCriteriaIndex, 1);\n      }\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist\n   * TODO refactor too many nesting\n   */\n  removalCriteriaNameChanged(criteria) {\n    if (criteria != null) {\n      // clear the params\n      criteria.params = {};\n\n      // get the params for the given criteria name\n      let params = this.getRemovalCriteriaParamsByName(criteria.name);\n      if (params != null) {\n        for (let paramObject of params) {\n          if (paramObject != null) {\n            let value = paramObject.value;\n\n            // intialize the param value\n            criteria.params[value] = '';\n\n            if (value == 'nodeId') {\n              // default the node id param to this node\n              criteria.params[value] = this.nodeId;\n            }\n          }\n        }\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist.\n   * @param transitionCriteria the transition criteria object\n   */\n  transitionCriteriaNameChanged(transitionCriteria) {\n    if (transitionCriteria != null) {\n      let nodeId = null;\n      let componentId = null;\n\n      if (transitionCriteria.params != null) {\n        // remember the node id and component id\n        nodeId = transitionCriteria.params.nodeId;\n        componentId = transitionCriteria.params.componentId;\n      }\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A button to author a specific view of the node was clicked\n   * @param view the view name\n   */\n  nodeAuthoringViewButtonClicked(view) {\n    if (view == 'addComponent') {\n      // toggle the add component view and hide all the other views\n      this.showCreateComponent = !this.showCreateComponent;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'editTransitions') {\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit transitions view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = !this.showEditTransitions;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubricButton = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'editConstraints') {\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit constraints view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = !this.showConstraints;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'editButtons') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = !this.showEditButtons;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showJSON = false;\n    } else if (view == 'editRubric') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = !this.showRubric;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'createBranch') {\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = !this.showCreateBranch;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'previousNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n\n      let prevNodeId = this.ProjectService.getPreviousNodeId(this.nodeId);\n      if (prevNodeId != null) {\n        // there is a previous node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:prevNodeId});\n      } else {\n        // there is no previous node id so we will display a message\n        let thereIsNoPreviousStep = this.$translate('thereIsNoPreviousStep');\n        alert(thereIsNoPreviousStep);\n      }\n    } else if (view == 'nextNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n\n      let nextNodeId = this.ProjectService.getNextNodeId(this.nodeId);\n      if (nextNodeId != null) {\n        // there is a next node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nextNodeId});\n      } else {\n        // there is no next node id so we will display a message\n        let thereIsNoNextStep = this.$translate('thereIsNoNextStep');\n        alert(thereIsNoNextStep);\n      }\n    } else if (view == 'advanced') {\n      // toggle the advanced view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = !this.showAdvanced;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'copy') {\n      // toggle the copy view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'move') {\n      // toggle the move view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'import') {\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = !this.showImportView;\n      this.showStepButtons = false;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'showJSON') {\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n\n      this.authoringNodeContentJSONString = angular.toJson(this.node, 4);\n      this.showJSON = !this.showJSON;\n    } else {\n      // hide all the views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    }\n  }\n\n  /**\n   * The author has changed the number of branch paths\n   * TODO refactor long function\n   */\n  createBranchNumberOfBranchesChanged() {\n    if (this.createBranchNumberOfBranches == 0) {\n      // the author has set the number of branch paths to 0 which is not allowed\n      alert(this.$translate('errorYouCantHave0BranchPaths'));\n\n      // revert the number of branch paths value\n      this.createBranchNumberOfBranches = this.createBranchBranches.length;\n    } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\n      /*\n       * the author is reducing the number of branches so we want to\n       * confirm they want to do so\n       */\n      let answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:this.createBranchNumberOfBranches}));\n\n      if (answer) {\n        if (this.createBranchNumberOfBranches == 1) {\n          /*\n           * the author has removed all the branch paths so we will\n           * remove the branch\n           */\n          this.removeBranch();\n        } else {\n          /*\n           * the author is reducing the number of branch paths but\n           * not removing all of them\n           */\n          for (let bp = 0; bp < this.createBranchBranches.length; bp++) {\n            if (bp >= this.createBranchNumberOfBranches) {\n              // this is a branch we want to remove\n              let branch = this.createBranchBranches[bp];\n              this.removeBranchPath(branch);\n\n              /*\n               * decrement the counter back one because we have\n               * just removed a branch path\n               */\n              bp--;\n            }\n          }\n        }\n      } else {\n        // they answered no so we will revert the number of branches value\n        this.createBranchNumberOfBranches = this.createBranchBranches.length;\n      }\n    } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\n      // the author is increasing the number of branches\n      if (this.createBranchCriterion == null) {\n        /*\n         * we will default the branching to be based on workgroup id\n         * since that is what our researchers use most often\n         */\n        this.createBranchCriterion = 'workgroupId';\n        this.createBranchCriterionChanged();\n      }\n\n      // loop for the number of branches and create new branches objects\n      for (let b = 0; b < this.createBranchNumberOfBranches; b++) {\n        if (b >= this.createBranchBranches.length) {\n          /*\n           * we do not have a branch object for this branch number so\n           * we will create it\n           */\n\n          // create the branch object\n          let branch = {};\n\n          // set the branch number\n          branch.number = b + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // create a transition to represent the branch\n          let transition = {};\n\n          if (this.createBranchCriterion == 'score') {\n            // the branch is based on score\n\n            // create a score criterion\n            let criterion = {\n              \"name\": this.createBranchCriterion,\n              \"params\": {\n                \"scores\": []\n              }\n            };\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [criterion];\n          } else if (this.createBranchCriterion == 'choiceChosen') {\n            // the branch is based on choice chosen\n            let criterion = {};\n            criterion.name = this.createBranchCriterion;\n            criterion.params = {};\n            criterion.params.choiceIds = [];\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [criterion];\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // workgroup id branching does not require a transition criterion\n          } else if (this.createBranchCriterion == 'random') {\n            // random branching does not require a transition criterion\n          }\n\n          // add the transition\n          this.node.transitionLogic.transitions.push(transition);\n\n          // save a reference to the transition in the branch\n          branch.transition = transition;\n        }\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The branch criterion has changed\n   */\n  createBranchCriterionChanged() {\n    if (this.createBranchCriterion != null) {\n      let nodeId = this.node.id;\n      if (this.createBranchCriterion == 'workgroupId') {\n        // the branch is based on workgroup id\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'score') {\n        // the branch is based on score\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'choiceChosen') {\n        // the branch is based on choice chosen\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'random') {\n        // the branch is based on random assignment\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch node id has changed\n   */\n  createBranchNodeIdChanged() {\n    this.createBranchComponentId = null;\n    let selectedNode = this.ProjectService.getNodeById(this.createBranchNodeId);\n    if (selectedNode != null) {\n      let components = selectedNode.components;\n      if (components != null) {\n        if (components.length == 1) {\n          /*\n           * there is only one component in the node so we will\n           * automatically select it in the drop down\n           */\n          let component = components[0];\n          this.createBranchComponentId = component.id;\n        }\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch component id has changed\n   */\n  createBranchComponentIdChanged() {\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Update the transitions so that they have the necessary parameter\n   * fields for the given branch criterion\n   */\n  createBranchUpdateTransitions() {\n    for (let b = 0; b < this.createBranchBranches.length; b++) {\n      let branch = this.createBranchBranches[b];\n      if (branch != null) {\n        // get the transition corresponding to the branch\n        let transition = branch.transition;\n        if (transition != null) {\n          if (this.createBranchCriterion == 'choiceChosen') {\n            // we are branching based on choice chosen\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new choice chosen criterion\n            let criterion = {\n              \"name\": 'choiceChosen',\n              \"params\": {\n                \"nodeId\": this.createBranchNodeId,\n                \"componentId\": this.createBranchComponentId,\n                \"choiceIds\": []\n              }\n            };\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id. we will set the choice id in\n             * the branch object when we call createBranchUpdateChoiceChosenIds()\n             */\n            branch.choiceId = null;\n\n            /*\n             * clear the scores since we don't need it in choice\n             * chosen branching\n             */\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'score') {\n            // we are branching based on score\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new score criterion\n            let criterion = {\n              \"name\": 'score',\n              \"params\": {\n                \"nodeId\": this.createBranchNodeId,\n                \"componentId\": this.createBranchComponentId,\n                \"scores\": []\n              },\n            };\n\n            // re-use scores if available\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id since we don't need it in score\n             * branching\n             */\n            branch.choiceId = null;\n\n            // set the scores into the branch object\n            branch.scores = criterion.params.scores;\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // we are branching based on workgroup id\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on workgroup id\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in workgroup id branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'random') {\n            // we are branching based on random assignment\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on random assignment\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in random branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          }\n        }\n      }\n    }\n\n    if (this.createBranchCriterion == 'choiceChosen') {\n      /*\n       * the branching is based on choice chosen so we will populate the\n       * choice ids\n       */\n      this.createBranchUpdateChoiceChosenIds();\n    }\n  }\n\n  /**\n   * Automatically populate the selected choices if the branch is based on\n   * choice chosen and the selected component is a multiple choice component\n   * TODO refactor too many nesting\n   */\n  createBranchUpdateChoiceChosenIds() {\n    let nodeId = this.createBranchNodeId;\n    let componentId = this.createBranchComponentId;\n    let component = this.ProjectService\n        .getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      if (component.type == 'MultipleChoice') {\n        // populate the drop down with the choices\n        this.createBranchUpdateChoiceChosenIdsHelper(component);\n      }\n    }\n  }\n\n  /**\n   * We are creating a branch that is based on which choice the student chooses\n   * in a multiple choice component. We will populate the drop down with the\n   * choices.\n   * @param component we are branching based on the choice chosen in this\n   * component\n   */\n  createBranchUpdateChoiceChosenIdsHelper(component) {\n    // get the choices from the component\n    let choices = component.choices;\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (let c = 0; c < choices.length; c++) {\n        let choice = choices[c];\n        if (choice != null) {\n\n          // get the fields of the choice\n          let id = choice.id;\n          let text = choice.text;\n          let feedback = choice.feedback;\n          let isCorrect = choice.isCorrect;\n\n          // get the branch that corresponds to the choice\n          let branch = this.createBranchBranches[c];\n\n          if (branch != null) {\n            // get the choice for this branch\n            branch.choiceId = id;\n\n            // make a copy of the choices from the component\n            branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n\n            // get the transition corresponding to the branch\n            let transition = branch.transition;\n\n            if (transition != null) {\n\n              /*\n               * get the first transition criterion. we will assume\n               * there is only one transition criterion\n               */\n              let criterion = transition.criteria[0];\n\n              if (criterion != null) {\n\n                // get the params\n                let params = criterion.params;\n\n                if (params != null) {\n\n                  // set the node id and component id\n                  params.nodeId = nodeId;\n                  params.componentId = componentId;\n\n                  if (this.createBranchCriterion == 'choiceChosen') {\n                    // set the choice id\n                    params.choiceIds = [];\n                    params.choiceIds.push(id);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * A step was clicked in the create branch authoring view\n   * @param branch the branch path\n   * @param item the step that was clicked\n   * TODO refactor function too long\n   */\n  createBranchStepClicked(branch, item) {\n    // get all the steps in order\n    let orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\n\n    // an array that will hold the items that were checked\n    branch.checkedItemsInBranchPath = [];\n    let checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n    // an array that will hold the node ids that were checked\n    branch.nodeIdsInBranch = [];\n\n    // used to hold the previously checked node id\n    let previousCheckedNodeId = null;\n\n    // the node id after the node that was clicked\n    let nodeIdAfter = null;\n\n    /*\n     * loop through all the items in order and set the transitions so that\n     * the steps in a branch path transition to one after the other\n     */\n    for (var i = 0; i < orderedItems.length; i++) {\n      var orderedItem = orderedItems[i];\n      if (orderedItem != null && orderedItem.checked) {\n        if (previousCheckedNodeId != null) {\n          // make the previous node id point to the current item\n          let previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\n          if (previousCheckedNode != null) {\n            // get the transition logic\n            let transitionLogic = previousCheckedNode.transitionLogic;\n            if (transitionLogic != null) {\n              if (transitionLogic.transitions != null) {\n                // clear the transitions\n                transitionLogic.transitions = [];\n\n                // create a new transition object to the current item\n                let transition = {\n                  \"to\": orderedItem.$key\n                };\n                // add the transition\n                transitionLogic.transitions.push(transition);\n              }\n            }\n          }\n        }\n\n        // add the item to the checked items array\n        checkedItemsInBranchPath.push(orderedItem);\n\n        // add the node id to the array of node ids in the branch path\n        branch.nodeIdsInBranch.push(orderedItem.$key);\n\n        // remember the previously checked node id\n        previousCheckedNodeId = orderedItem.$key;\n      }\n\n      // get the previous ordered item (checked or unchecked)\n      let previousOrderedItem = orderedItems[i - 1];\n      if (previousOrderedItem != null) {\n        if (previousOrderedItem.$key == item.$key) {\n          /*\n           * the previous item was the node that was checked/unchecked\n           * so we will remember this item because it is the node\n           * that comes after the node that was checked/unchecked\n           */\n          nodeIdAfter = orderedItem.$key;\n        }\n      }\n    }\n\n    if (this.createBranchMergePointNodeId != null) {\n      /*\n       * the merge point is specified so we will make the last checked\n       * node in this branch path point to the merge point\n       */\n\n      /*\n       * this is the last node in the branch path so we will make it\n       * transition to the merge point\n       */\n      let node = this.ProjectService.getNodeById(previousCheckedNodeId);\n      if (node != null) {\n        let transitionLogic = node.transitionLogic;\n        if (transitionLogic != null) {\n          if (transitionLogic.transitions != null) {\n            // clear the transitions\n            transitionLogic.transitions = [];\n\n            // make a transition to the merge point\n            let transition = {};\n            transition.to = this.createBranchMergePointNodeId;\n\n            // add the transition\n            transitionLogic.transitions.push(transition);\n          }\n        }\n      }\n    }\n\n    // get the branch number\n    let branchNumber = branch.number;\n\n    // get the node id that was clicked\n    let nodeId = item.$key;\n\n    // get the transition that corresponds to the branch\n    let transition = this.node.transitionLogic.transitions[branchNumber - 1];\n\n    let firstNodeId = null;\n\n    /*\n     * update the branch point transition in case the first step in the\n     * branch path has changed\n     */\n    if (transition != null) {\n\n      if (checkedItemsInBranchPath.length == 0) {\n        // there are no steps in the path\n        transition.to = null;\n      } else {\n        // get the first step in the path\n        let firstCheckedItem = checkedItemsInBranchPath[0];\n\n        if (firstCheckedItem != null) {\n          // set the branch point transition to the first step in the path\n          firstNodeId = firstCheckedItem.$key;\n          transition.to = firstNodeId;\n        }\n      }\n    }\n\n    // get the node that was clicked\n    let node = this.ProjectService.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // remove all branch path taken constraints from the node\n      this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n      if (item.checked) {\n        // the item was checked so we will add the branch path taken constraints to it\n\n        /*\n         * the branch path taken constraints will be from this node to\n         * the first node in the branch path\n         */\n        let fromNodeId = this.nodeId;\n        let toNodeId = firstNodeId;\n\n        // add the branch path taken constraints\n        this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\n      } else {\n        /*\n         * the item was unchecked so we will change its transition to\n         * point to the node that comes right after it\n         */\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n      }\n    }\n\n    /*\n     * update the constraints of other steps in the branch path if necessary.\n     * loop through all theh checked items in the path\n     */\n    for (let item of checkedItemsInBranchPath) {\n      let itemNodeId = item.$key;\n\n      // remove all branch path taken constraints from the node\n      this.ProjectService.removeBranchPathTakenNodeConstraints(itemNodeId);\n\n      /*\n       * the branch path taken constraints will be from this node to\n       * the first node in the branch path\n       */\n      let fromNodeId = this.nodeId;\n      let toNodeId = firstNodeId;\n\n      // add the branch path taken constraints\n      this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\n    }\n\n    /*\n     * update the node numbers now that a step has been added to a branch path\n     * e.g. if this is a branching step that is called\n     * 1.5 B View the Potential Energy\n     * then the node number is 1.5 B\n     */\n    this.ProjectService.calculateNodeNumbers();\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The score for a path has changed in the branch authoring\n   * @param branch the branch for which the score has changed\n   * TODO refactor too many nesting\n   */\n  createBranchScoreChanged(branch) {\n    if (branch != null) {\n      let transition = branch.transition;\n      if (transition != null) {\n        let scores = branch.scores;\n        if (scores != null) {\n          let criteria = transition.criteria;\n          if (criteria != null) {\n            // get the first criteria. we will assume there is only one criteria\n            let criterion = criteria[0];\n            if (criterion != null) {\n              // get the params of the criterion\n              let params = criterion.params;\n              if (params != null) {\n                // update the scores into the params\n                params.scores = scores;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The merge point has changed in the branch authoring\n   * TODO refactor too many nesting\n   */\n  createBranchMergePointNodeIdChanged() {\n    // get the merge point node id\n    let createBranchMergePointNodeId = this.createBranchMergePointNodeId;\n    let branches = this.createBranchBranches;\n    for (let branch of branches) {\n      if (branch != null) {\n        // get the node ids in the branch path\n        let nodeIdsInBranch = branch.nodeIdsInBranch;\n        if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\n          // get the last node id in the branch path\n          let lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n          if (lastNodeIdInBranchPath != null) {\n            // get the last node in the branch path\n            let lastNodeInBranchPath =\n                this.ProjectService.getNodeById(lastNodeIdInBranchPath);\n            if (lastNodeInBranchPath != null) {\n              // get the transition logic of the last node\n              let transitionLogic = lastNodeInBranchPath.transitionLogic;\n              if (transitionLogic != null) {\n                if (transitionLogic.transitions != null) {\n                  // clear the transitions\n                  transitionLogic.transitions = [];\n\n                  // make a new transition to the merge point\n                  let transition = {\n                    \"to\": createBranchMergePointNodeId\n                  };\n                  // add the transition\n                  transitionLogic.transitions.push(transition);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Remove the branch after confirming with the user\n   */\n  removeBranchButtonClicked() {\n    if (confirm(this.$translate('areYouSureYouWantToRemoveTheBranch'))) {\n      this.removeBranch();\n    }\n  }\n\n  /**\n   * Remove the branch from the step by removing all the branch paths\n   */\n  removeBranch() {\n    for (let bp = 0; bp < this.createBranchBranches.length; bp++) {\n      // remove a branch path\n      let branchPath = this.createBranchBranches[bp];\n      this.removeBranchPath(branchPath);\n\n      /*\n       * shift the counter back one because we have just removed a branch\n       * path\n       */\n      bp--;\n    }\n\n    // get the node id of this node (which is the branch point)\n    let nodeId = this.node.id;\n\n    // get the node id that comes after this node\n    let nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n\n    /*\n     * update the transition of this step to point to the next step\n     * in the project. this may be different than the next step\n     * if it was still the branch point.\n     */\n    this.ProjectService.setTransition(nodeId, nodeIdAfter);\n\n    // clear the transition logic fields\n    this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\n\n    // clear the branch authoring fields\n    this.createBranchNumberOfBranches = 1;\n    this.createBranchCriterion = null;\n    this.createBranchNodeId = null;\n    this.createBranchComponentId = null;\n    this.createBranchMergePointNodeId = null;\n\n    /*\n     * branch paths are determined by the transitions. since there is now\n     * just one transition, we will create a single branch object to\n     * represent it.\n     */\n\n    // create a branch object to hold all the related information for that branch\n    let branch = {};\n\n    // set the branch number for display purposes\n    branch.number = 1;\n\n    /*\n     * set the mapping of all the ids to order for use when choosing which items are\n     * in the branch path\n     */\n    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n    // an array that will hold all the checked items in the branch path\n    branch.checkedItemsInBranchPath = [];\n\n    let transition = null;\n\n    // get the transition from the node\n    let transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\n\n    if (transitions != null && transitions.length > 0) {\n      transition = transitions[0];\n    }\n\n    // set the transition into the branch so we can access it easily later\n    branch.transition = transition;\n\n    // add the branch to the array of branches\n    this.createBranchBranches.push(branch);\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Remove a branch path by removing all the branch path taken constraints\n   * from the steps in the branch path, resetting the transitions in the\n   * steps in the branch path, and removing the transition corresponding to\n   * the branch path in this branch point node.\n   * @param branch the branch object\n   */\n  removeBranchPath(branch) {\n    if (branch != null && branch.checkedItemsInBranchPath != null) {\n      // get the checked items in the branch path\n      let checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n      for (let checkedItem of checkedItemsInBranchPath) {\n        if (checkedItem != null) {\n          // get the node id of the checked item\n          let nodeId = checkedItem.$key;\n\n          // remove the branchPathTaken constraints from the step\n          this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n          /*\n           * update the transition of the step to point to the next step\n           * in the project. this may be different than the next step\n           * if it was still in the branch path.\n           */\n          let nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n          this.ProjectService.setTransition(nodeId, nodeIdAfter);\n        }\n      }\n\n      // get the index of the branch path\n      let branchPathIndex = this.createBranchBranches.indexOf(branch);\n\n      // remove the branch path\n      this.createBranchBranches.splice(branchPathIndex, 1);\n\n      // remove the transition the corresponds to the branch path\n      this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\n    }\n  }\n\n  /**\n   * The author has changed the step rubric\n   */\n  summernoteRubricHTMLChanged() {\n    // get the summernote rubric html\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the step rubric\n    this.node.rubric = html;\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Show the component authoring views\n   */\n  showComponentAuthoring() {\n    this.showComponentAuthoringViews = true;\n  }\n\n  /**\n   * Hide the component authoring views so that the auther only sees\n   * the component numbers and component names\n   */\n  hideComponentAuthoring() {\n    this.showComponentAuthoringViews = false;\n  }\n\n  /**\n   * Show the insert buttons. This is used when choosing where to insert a\n   * component.\n   */\n  turnOnInsertComponentMode() {\n    this.insertComponentMode = true;\n  }\n\n  /**\n   * Hide the insert buttons.\n   */\n  turnOffInsertComponentMode() {\n    this.insertComponentMode = false;\n  }\n\n  /**\n   * Turn on the add component mode\n   */\n  turnOnAddComponentMode() {\n    this.addComponentMode = true;\n  }\n\n  /**\n   * Turn off the add component mode\n   */\n  turnOffAddComponentMode() {\n    this.addComponentMode = false;\n  }\n\n  /**\n   * Turn on the move component mode\n   */\n  turnOnMoveComponentMode() {\n    this.moveComponentMode = true;\n  }\n\n  /**\n   * Turn off the move component mode\n   */\n  turnOffMoveComponentMode() {\n    this.moveComponentMode = false;\n  }\n\n  /**\n   * Turn on the copy component mode\n   */\n  turnOnCopyComponentMode() {\n    this.copyComponentMode = true;\n  }\n\n  /**\n   * Turn off the copy component mode\n   */\n  turnOffCopyComponentMode() {\n    this.copyComponentMode = false;\n  }\n\n  /**\n   * Turn on the import component mode\n   */\n  turnOnImportComponentMode() {\n    this.importComponentMode = true;\n  }\n\n  /**\n   * Turn off the import component mode\n   */\n  turnOffImportComponentMode() {\n    this.importComponentMode = false;\n  }\n\n  /**\n   * Get the components that have been selected\n   * @return an array of component ids that have been selected\n   */\n  getSelectedComponentIds() {\n    let selectedComponents = [];\n    if (this.components != null) {\n      for (let component of this.components) {\n        if (component != null && component.id != null) {\n          // see if the component is checked\n          let checked = this.componentsToChecked[component.id];\n          if (checked) {\n            selectedComponents.push(component.id);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * Uncheck all the components\n   */\n  clearComponentsToChecked() {\n    /*\n     * clear the components to checked mappings so that all the component\n     * checkboxes are no longer checked\n     */\n    this.componentsToChecked = {};\n  }\n\n  /**\n   * Get the component numbers and component types that have been selected\n   * @return an array of strings\n   * example\n   * [\n   *   \"1. OpenResponse\",\n   *   \"3. MultipleChoice\"\n   * ]\n   */\n  getSelectedComponentNumbersAndTypes(componentIds) {\n    let selectedComponents = [];\n    if (this.components != null) {\n      for (let c = 0; c < this.components.length; c++) {\n        let component = this.components[c];\n        if (component != null && component.id != null) {\n          // see if the component is checked\n          let checked = this.componentsToChecked[component.id];\n          if (checked) {\n            // get the component number and type example \"1. OpenResponse\"\n            let componentNumberAndType = (c + 1) + '. ' + component.type;\n\n            // the component is checked\n            selectedComponents.push(componentNumberAndType);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * The import button was clicked to turn on the import view\n   */\n  importButtonClicked() {\n    // clear all the import project values\n    this.importProjectIdToOrder = {};\n    this.importProjectItems = [];\n    this.importMyProjectId = null;\n    this.importLibraryProjectId = null;\n    this.importProjectId = null;\n    this.importProject = null;\n\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('import');\n\n    if (this.showImportView) {\n      // turn on import mode\n      this.turnOnImportComponentMode();\n\n      if (this.myProjectsList == null) {\n        // populate the authorable projects drop down\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        // populate the library projects drop down\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The move component button was clicked\n   */\n  moveButtonClicked() {\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('move');\n\n    // turn off add component mode\n    this.turnOffAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOnMoveComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode()\n\n    // hide the component authoring\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * The copy component button was clicked\n   */\n  copyButtonClicked() {\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('copy');\n\n    // turn on the move component mode\n    this.turnOnCopyComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode();\n\n    // hide the component authoring views\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * The delete button was clicked\n   * TODO refactor too many nesting\n   */\n  deleteButtonClicked() {\n    this.scrollToTopOfPage();\n\n    /*\n     * hide all the component authoring so that the author only sees the\n     * component numbers and component types\n     */\n    this.hideComponentAuthoring();\n\n    /*\n     * Use a timeout to allow the effects of hideComponentAuthoring() to\n     * take effect. If we don't use a timeout, the user won't see any change\n     * in the UI.\n     */\n    this.$timeout(() => {\n      let confirmMessage = '';\n\n      // get the selected component numbers and types\n      let selectedComponentNumbersAndTypes = this.getSelectedComponentNumbersAndTypes();\n\n      if (selectedComponentNumbersAndTypes.length == 1) {\n        // there is one selected component\n        confirmMessage = 'Are you sure you want to delete this component?\\n';\n      } else if (selectedComponentNumbersAndTypes.length > 1) {\n        // there are multiple selected components\n        confirmMessage = 'Are you sure you want to delete these components?\\n';\n      }\n\n      // loop through all the selected components\n      for (let c = 0; c < selectedComponentNumbersAndTypes.length; c++) {\n\n        // get a component number and type\n        let selectedComponentNumberAndType = selectedComponentNumbersAndTypes[c];\n\n        // show the component number and type in the message\n        confirmMessage += '\\n' + selectedComponentNumberAndType;\n      }\n\n      // ask the user if they are sure they want to delete\n      if (confirm(confirmMessage)) {\n        let selectedComponents = this.getSelectedComponentIds();\n\n        // data saved in the component deleted event\n        let data = {\n          \"componentsDeleted\": this.getComponentObjectsForEventData(selectedComponents)\n        };\n\n        /*\n         * loop through all the selected component ids and delete the\n         * components\n         */\n        for (let componentId of selectedComponents) {\n          this.ProjectService.deleteComponent(this.nodeId, componentId);\n        }\n\n        this.saveEvent('componentDeleted', 'Authoring', data);\n\n        // check if we need to show the node save or node submit buttons\n        this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n        this.ProjectService.saveProject();\n      } else {\n        // uncheck the component check boxes\n        this.clearComponentsToChecked();\n      }\n\n      /*\n       * Wait a small amount of time before returning the UI back to the\n       * normal view. This allows the author to see the component number\n       * and type view a little longer so that they can see the change\n       * they just made before we switch back to the normal view.\n       */\n      this.$timeout(() => {\n        // turn off the insert component mode\n        this.turnOffInsertComponentMode();\n\n        // uncheck the component check boxes\n        this.clearComponentsToChecked();\n\n        // show the component authoring\n        this.showComponentAuthoring();\n      }, 2000);\n    });\n  }\n\n  /**\n   * The cancel insert button was clicked\n   */\n  cancelInsertClicked() {\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    this.turnOffAddComponentMode();\n    this.turnOffMoveComponentMode();\n    this.turnOffInsertComponentMode();\n    this.clearComponentsToChecked();\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Check if we need to show the node save or node submit buttons\n   */\n  checkIfNeedToShowNodeSaveOrNodeSubmitButtons() {\n    if (this.ProjectService.doesAnyComponentShowSubmitButton(this.nodeId)) {\n      /*\n       * there is a component in this step that is showing their\n       * submit button\n       */\n    } else {\n      /*\n       * there is no component in this step that is showing their\n       * submit button\n       */\n\n      if (this.ProjectService.doesAnyComponentHaveWork(this.nodeId)) {\n        /*\n         * there is a component that generates work so we will show\n         * the step save button\n         */\n        this.node.showSaveButton = true;\n        this.node.showSubmitButton = false;\n\n        // hide the save button in all the components\n        this.hideAllComponentSaveButtons();\n      } else {\n        /*\n         * there are no components in the step that generates work\n         * so we will not show the step save button\n         */\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n      }\n    }\n  }\n\n  /**\n   * Insert the component so it becomes the first component in the step\n   */\n  insertComponentAsFirst() {\n    if (this.addComponentMode) {\n      this.handleAddComponent();\n    } else if (this.moveComponentMode) {\n      this.handleMoveComponent();\n    } else if (this.copyComponentMode) {\n      this.handleCopyComponent();\n    } else if (this.importComponentMode) {\n      this.handleImportComponent();\n    }\n  }\n\n  /**\n   * Insert the component after the given component id.\n   * @param componentId insert the component after this given component id\n   */\n  insertComponentAfter(componentId) {\n    if (this.addComponentMode) {\n      this.handleAddComponent(componentId);\n    } else if (this.moveComponentMode) {\n      this.handleMoveComponent(componentId);\n    } else if (this.copyComponentMode) {\n      this.handleCopyComponent(componentId);\n    } else if (this.importComponentMode) {\n      this.handleImportComponent(componentId);\n    }\n  }\n\n  /**\n   * Add components to this step.\n   * @param componentId (optional) Add the components after this component id.\n   * If the componentId is not provided, we will put the components at the\n   * beginning of the step.\n   */\n  handleAddComponent(componentId) {\n    let newComponents = [];\n    // create a component and add it to this node\n    let newComponent = this.ProjectService\n        .createComponent(this.nodeId, this.selectedComponent, componentId);\n\n    let data = {\n      \"componentId\": newComponent.id,\n      \"componentType\": newComponent.type\n    };\n    this.saveEvent('componentCreated', 'Authoring', data);\n    newComponents.push(newComponent);\n    this.turnOffAddComponentMode();\n    this.ProjectService.saveProject();\n    this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n  }\n\n  /**\n   * Move components in this step.\n   * @param componentId (optional) Put the moved components after this component\n   * id. If the componentId is not provided, we will put the components at the\n   * beginning of the step.\n   */\n  handleMoveComponent(componentId) {\n    let newComponents = [];\n    let selectedComponentIds = this.getSelectedComponentIds();\n    if (selectedComponentIds != null && selectedComponentIds.indexOf(componentId) != -1) {\n      /*\n       * the author is trying to move a component and place it after\n       * itself which we will not allow\n       */\n      if (selectedComponentIds.length == 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n      } else if (selectedComponentIds.length > 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n      }\n    } else {\n      // data saved in the component moved event\n      let data = {\n        \"componentsMoved\": this.getComponentObjectsForEventData(selectedComponentIds)\n      };\n\n      // move the components to their new location\n      newComponents = this.ProjectService\n          .moveComponent(this.nodeId, selectedComponentIds, componentId);\n\n      this.saveEvent('componentMoved', 'Authoring', data);\n      this.turnOffMoveComponentMode();\n      this.ProjectService.saveProject();\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    }\n  }\n\n  /**\n   * Copy components in this step.\n   * @param componentId (optional) Put the copied components after this\n   * component id. If the componentId is not provided, we will put the\n   * components at the beginning of the step.\n   */\n  handleCopyComponent(componentId) {\n    let newComponents = [];\n    let selectedComponentIds = this.getSelectedComponentIds();\n\n    // data saved in the component copied event\n    let data = {};\n    let componentsCopied = this.getComponentObjectsForEventData(selectedComponentIds);\n\n    // copy the components to their new location\n    newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, componentId);\n\n    // get the information for all the components that were copied\n    for (let c = 0; c < componentsCopied.length; c++) {\n      let componentCopied = componentsCopied[c];\n      let newComponent = newComponents[c];\n\n      componentCopied.fromComponentId = componentCopied.componentId;\n      componentCopied.toComponentId = newComponent.id;\n      delete componentCopied.componentId;\n    }\n\n    data.componentsCopied = componentsCopied;\n    this.saveEvent('componentCopied', 'Authoring', data);\n    this.turnOffCopyComponentMode();\n    this.ProjectService.saveProject();\n    this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n  }\n\n  /**\n   * Import components into this step.\n   * @param componentId (optional) Put the imported components after this\n   * component id. If the componentId is not provided, we will put the\n   * components at the beginning of the step.\n   */\n  handleImportComponent(componentId) {\n    // import the selected components and insert them\n    this.importComponents(this.nodeId, componentId).then((newComponents) => {\n      this.turnOffImportComponentMode();\n      this.ProjectService.saveProject();\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n      /*\n       * refresh the project assets in case any of the imported\n       * components also imported assets\n       */\n      this.ProjectAssetService.retrieveProjectAssets();\n    });\n  }\n\n  /**\n   * Temporarily highlight the new components and then show the component\n   * authoring views. Used to bring user's attention to new changes.\n   * @param newComponents an array of the new components we have just added\n   */\n  highlightNewComponentsAndThenShowComponentAuthoring(newComponents) {\n    // use a timeout to allow the components time to show up in the UI\n    this.$timeout(() => {\n      if (newComponents != null) {\n        for (let newComponent of newComponents) {\n          if (newComponent != null) {\n            let componentElement = $('#' + newComponent.id);\n            let componentOriginalBackgroundColor = componentElement.css('backgroundColor');\n            componentElement.css('background-color', '#FFFF9C');\n\n            /*\n             * Use a timeout before starting to transition back to\n             * the original background color. For some reason the\n             * element won't get highlighted in the first place\n             * unless this timeout is used.\n             */\n            this.$timeout(() => {\n              // slowly fade back to original background color\n              componentElement.css({\n                'transition': 'background-color 2s ease-in-out',\n                'background-color': componentOriginalBackgroundColor\n              });\n            });\n          }\n        }\n      }\n\n      /*\n       * Wait a small amount of time before returning the UI back to the\n       * normal view. This allows the author to see the component number\n       * and type view a little longer so that they can see the change\n       * they just made before we switch back to the normal view.\n       */\n      this.$timeout(() => {\n        this.showComponentAuthoring();\n        this.turnOffInsertComponentMode();\n        this.showCreateComponent = false;\n        this.clearComponentsToChecked();\n\n        /*\n         * use a timeout to wait for the UI to update and then scroll\n         * to the first new component\n         */\n        this.$timeout(() => {\n          if (newComponents != null && newComponents.length > 0) {\n            // get the UI element of the first new component\n            let componentElement = $('#' + newComponents[0].id);\n\n            if (componentElement != null) {\n              // scroll to the first new component that we've added\n              $('#content').animate({\n                scrollTop: componentElement.prop('offsetTop') - 60\n              }, 1000);\n            }\n          }\n        });\n      }, 1000);\n    });\n  }\n\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n    // clear the select drop down for the library project\n    this.importLibraryProjectId = null;\n\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n    this.importProjectId = importProjectId;\n\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      // get the import project\n      this.ProjectService.retrieveProjectById(this.importProjectId)\n          .then((projectJSON) => {\n\n        // create the mapping of node id to order for the import project\n        this.importProjectIdToOrder = {};\n        this.importProject = projectJSON;\n\n        // calculate the node order of the import project\n        let result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = result.idToOrder;\n        this.importProjectItems = result.nodes;\n      });\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importComponentsButtonClicked() {\n    let selectedComponents = this.getSelectedComponentsToImport();\n    if (selectedComponents == null || selectedComponents.length == 0) {\n      // the author did not select any components to import\n      alert('Please select a component to import.');\n    } else {\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.turnOnInsertComponentMode();\n      this.hideComponentAuthoring();\n      this.scrollToTopOfPage();\n    }\n  }\n\n  /**\n   * Get the selected components to import\n   * @return an array of selected components\n   * TODO refactor too many nesting\n   */\n  getSelectedComponentsToImport() {\n    let selectedComponents = [];\n    for (let item of this.importProjectItems) {\n      if (item != null && item.node != null && item.node.components != null) {\n        let componentsInNode = item.node.components;\n        for (let component of componentsInNode) {\n          if (component != null && component.checked) {\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            selectedComponents.push(component);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * Get the components that were selected\n   * @param insertAfterComponentId (optional) Insert the components after this\n   * component id. If this is null, we will insert the components at the\n   * beginning of the step.\n   */\n  importComponents(nodeId, insertAfterComponentId) {\n    // data saved in the component imported event\n    let data = {\n      \"componentsImported\": this.getComponentObjectsForImportEventData()\n    };\n\n    let selectedComponents = this.getSelectedComponentsToImport();\n    for (let selectedComponent of selectedComponents) {\n      if (selectedComponent != null) {\n        // remove the checked field\n        delete selectedComponent.checked;\n      }\n    }\n\n    // insert the components into the project\n    return this.ProjectService.importComponents(selectedComponents,\n        this.importProjectId, nodeId, insertAfterComponentId)\n        .then((newComponents) => {\n      for (let c = 0; c < data.componentsImported.length; c++) {\n        let componentImported = data.componentsImported[c];\n        let newComponent = newComponents[c];\n        let newComponentId = newComponent.id;\n\n        /*\n        * set the toComponentId so the event knows what the new\n        * component id is\n        */\n        componentImported.toComponentId = newComponentId;\n      }\n\n      this.saveEvent('componentImported', 'Authoring', data);\n      return newComponents;\n    });\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n\n  /**\n   * Preview the import project in a new tab\n   */\n  previewImportProject() {\n    if (this.importProject != null) {\n      window.open(this.importProject.previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the step in a new tab\n   * @param node\n   */\n  previewImportNode(node) {\n    if (node != null) {\n      let nodeId = node.id;\n      let previewProjectURL = this.importProject.previewProjectURL;\n      let previewStepURL  = previewProjectURL + '#/vle/' + nodeId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Preview the component in a new tab\n   * @param node the node\n   * @param componentId the component id\n   */\n  previewImportComponent(node, componentId) {\n    if (node != null) {\n      let nodeId = node.id;\n      let previewProjectURL = this.importProject.previewProjectURL;\n      let previewStepURL  = previewProjectURL + '#/vle/' + nodeId + '/' + componentId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on a component type\n   * @param componentType the component type the author clicked\n   */\n  componentTypeClicked(componentType) {\n    this.selectedComponent = componentType;\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on the cancel button\n   */\n  cancelCreateComponentClicked() {\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    // turn on add component mode\n    this.turnOffAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // hide the insert buttons\n    this.turnOffInsertComponentMode()\n\n    // show the component authoring views\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Get the component type label\n   * @param componentType the component type\n   * @return the component type label\n   * example\n   * \"Open Response\"\n   */\n  getComponentTypeLabel(componentType) {\n    return this.UtilService.getComponentTypeLabel(componentType);\n  }\n\n  /**\n   * The author has clicked the back button\n   */\n  backButtonClicked() {\n    if (this.showImportView || this.showRubric || this.showAdvanced) {\n      if (this.showJSON) {\n        /*\n         * we are showing the JSON so we will check if it has changed\n         * and then save and parse the JSON\n         */\n        this.saveAndParseJSON();\n      }\n\n      // we are in the import view so we will go back to the node view\n      this.nodeAuthoringViewButtonClicked();\n    } else {\n      // we are in the node view so we will go back to the project view\n      this.close();\n    }\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n    let context = 'AuthoringTool';\n    let nodeId = this.nodeId;\n    let componentId = null;\n    let componentType = null;\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, eventName, data);\n  }\n\n  /**\n   * Get an array of objects that contain the component id and type\n   * @param componentIds an array of component ids\n   * @return an array of objects that contain the component id and type\n   * TODO refactor too many nesting\n   */\n  getComponentObjectsForEventData(componentIds) {\n    let componentObjects = [];\n    if (componentIds != null) {\n      for (let componentId of componentIds) {\n        if (componentId != null) {\n          // get the component\n          let component = this.ProjectService\n              .getComponentByNodeIdAndComponentId(this.nodeId, componentId);\n\n          if (component != null) {\n            // create an object with the component id and type\n            let tempComponent = {\n              \"componentId\": component.id,\n              \"type\": component.type\n            };\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n    return componentObjects;\n  }\n\n  /**\n   * Get an array of objects that contain the node id, component id and type\n   * @return an array of objects that contain the node id, component id and type\n   * TODO refactor too many nesting\n   */\n  getComponentObjectsForImportEventData() {\n    let componentObjects = [];\n    for (let item of this.importProjectItems) {\n      if (item != null && item.node != null && item.node.components != null) {\n        for (let component of item.node.components) {\n          if (component != null && component.checked) {\n            let tempComponent = {\n              \"fromProjectId\": parseInt(this.importProjectId),\n              \"fromNodeId\": item.node.id,\n              \"fromComponentId\": component.id,\n              \"type\": component.type\n            };\n\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n    return componentObjects;\n  }\n\n  /**\n   * Check if the JSON has changed and then save and parse the JSON\n   */\n  saveAndParseJSON() {\n    if (this.showJSON) {\n      /*\n       * We are showing the JSON so we will now check to see if the\n       * JSON changed. If the JSON changed we will save the node with\n       * new JSON.\n       */\n      if (this.authoringNodeContentJSONString != angular.toJson(this.node, 4)) {\n        // the JSON has been changed so we will update the node\n\n        // create the updated node object\n        let updatedNode = angular.fromJson(this.authoringNodeContentJSONString);\n\n        // set the updated node into the project\n        this.ProjectService.setNode(this.nodeId, updatedNode);\n\n        // set the updated node into this controller\n        this.node = updatedNode;\n\n        // set the components into this controller\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        // set the current node\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        // update the branch authoring fields into the controller\n        this.populateBranchAuthoring();\n\n        // save the project\n        this.authoringViewNodeChanged().then(() => {\n          this.$rootScope.$broadcast('parseProject');\n        });\n      }\n    }\n  }\n};\n\nNodeAuthoringController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'ConfigService',\n    'NodeService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default NodeAuthoringController;\n"]}