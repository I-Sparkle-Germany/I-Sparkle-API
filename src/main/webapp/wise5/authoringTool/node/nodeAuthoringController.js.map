{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$filter","$injector","$location","$mdDialog","$rootScope","$scope","$state","$stateParams","$timeout","ConfigService","NodeService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","showComponents","showStepButtons","showComponentAuthoringViews","componentsToChecked","setCurrentNodeByNodeId","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","getComponentTypeLabel","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","insertAssetString","insertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","summernoteRubricHTML","replaceAssetPaths","rubric","$on","event","args","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showSubmitButton","showSaveButton","turnOnSaveButtonInComponents","id","doesAnyComponentShowSubmitButton","turnOffSaveButtonInComponents","authoringViewNodeChanged","data","title","getNodePositionAndTitleByNodeId","isGroupNode","saveEvent","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","c","criterion","name","createBranchNodeId","createBranchComponentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","n","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","constraints","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","setCurrentNode","go","alert","angular","equals","result","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","whenToChoosePath","canChangePath","maxPathsVisitable","nodeTransition","newTransitionCriteria","transitionCriteria","index","indexOf","splice","nodeAuthoringViewButtonClicked","turnOnAddComponentMode","turnOffMoveComponentMode","turnOnInsertComponentMode","hideComponentAuthoring","moveComponentUp","moveComponentDown","answer","deleteComponent","checkIfNeedToShowNodeSaveOrNodeSubmitButtons","component","type","service","get","componentUsesSaveButton","pop","r","singleRemovalCriteria","singleTransitionCriteria","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraint","constraintId","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","action","targetId","removalConditional","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","getRemovalCriteriaParamsByName","p","paramObject","view","showConstraints","showEditButtons","showRubric","showCreateBranch","showAdvanced","showImportView","showJSON","saveAndParseJSON","showRubricButton","prevNodeId","getPreviousNodeId","thereIsNoPreviousStep","nextNodeId","getNextNodeId","thereIsNoNextStep","authoringNodeContentJSONString","toJson","removeBranch","bp","removeBranchPath","createBranchCriterionChanged","b","setTransitionLogicField","createBranchUpdateTransitions","createBranchUpdateChoiceChosenIds","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraints","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","calculateNodeNumbers","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","message","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","insertComponentMode","addComponentMode","moveComponentMode","copyComponentMode","importComponentMode","selectedComponents","componentIds","componentNumberAndType","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProjectId","importProject","turnOnImportComponentMode","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","then","turnOffAddComponentMode","turnOnMoveComponentMode","turnOnCopyComponentMode","confirmMessage","selectedComponentNumbersAndTypes","getSelectedComponentNumbersAndTypes","selectedComponentNumberAndType","getSelectedComponentIds","componentsDeleted","getComponentObjectsForEventData","clearComponentsToChecked","turnOffInsertComponentMode","showComponentAuthoring","doesAnyComponentHaveWork","hideAllComponentSaveButtons","newComponents","newComponent","createComponent","compoenntId","highlightNewComponentsAndThenShowComponentAuthoring","selectedComponentIds","componentsMoved","moveComponent","componentsCopied","copyComponentAndInsert","componentCopied","fromComponentId","toComponentId","turnOffCopyComponentMode","importComponents","turnOffImportComponentMode","retrieveProjectAssets","componentElement","originalBackgroundColor","css","animate","scrollTop","prop","showImportProject","retrieveProjectById","projectJSON","getNodeOrderOfProject","nodes","getSelectedComponentsToImport","insertAfterComponentId","componentsImported","getComponentObjectsForImportEventData","componentImported","newComponentId","eventName","category","context","componentObjects","tempComponent","fromProjectId","parseInt","updatedNode","fromJson","setNode","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,uB;AAEJ,mCAAYC,aAAZ,EACMC,OADN,EAEMC,SAFN,EAGMC,SAHN,EAIMC,SAJN,EAKMC,UALN,EAMMC,MANN,EAOMC,MAPN,EAQMC,YARN,EASMC,QATN,EAUMC,aAVN,EAWMC,WAXN,EAYMC,mBAZN,EAaMC,cAbN,EAcMC,kBAdN,EAeMC,WAfN,EAemB;AAAA;;AAAA;;AACjB,SAAKf,aAAL,GAAqBA,aAArB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKO,UAAL,GAAkB,KAAKf,OAAL,CAAa,WAAb,CAAlB;AACA,SAAKS,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKf,OAAL,CAAa,WAAb,CAAlB;AACA,SAAKgB,SAAL,GAAiBT,aAAaS,SAA9B;AACA,SAAKC,MAAL,GAAcV,aAAaU,MAA3B;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,qCAAL,GACI,CAAC,IAAD,EAAO,QAAP,EAAiB,aAAjB,EAAgC,gBAAhC,EAAkD,eAAlD,CADJ;AAEA,SAAKC,uBAAL,GACI,CAAC,IAAD,EAAO,WAAP,EAAoB,UAApB,EAAgC,cAAhC,EAAgD,oBAAhD,CADJ;AAEA,SAAKC,oBAAL,GAA4B,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAA5B;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,2BAAL,GAAmC,IAAnC;;AAEA;AACA,SAAKC,mBAAL,GAA2B,EAA3B;;AAEA,SAAKjB,kBAAL,CAAwBkB,sBAAxB,CAA+C,KAAKd,MAApD;;AAEA;AACA,SAAKe,iBAAL,GAAyB,CACvB;AACEC,aAAO,EADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,sBAAhB;AAFR,KADuB,EAKvB;AACEkB,aAAO,mCADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,mCAAhB;AAFR,KALuB,EASvB;AACEkB,aAAO,iCADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,iCAAhB;AAFR,KATuB,EAavB;AACEkB,aAAO,+BADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,+BAAhB;AAFR,KAbuB,EAiBvB;AACEkB,aAAO,6BADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,6BAAhB;AAFR,KAjBuB,EAqBvB;AACEkB,aAAO,0BADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,0BAAhB;AAFR,KArBuB,EAyBvB;AACEkB,aAAO,wBADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,wBAAhB;AAFR,KAzBuB,CAAzB;;AA+BA;AACA,SAAKoB,mBAAL,GAA2B,CACzB;AACEF,aAAO,KADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,KAAhB;AAFR,KADyB,EAKzB;AACEkB,aAAO,KADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,KAAhB;AAFR,KALyB,CAA3B;;AAWA;AACA,SAAKqB,eAAL,GAAuB,CACrB;AACEH,aAAO,EADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,8BAAhB;AAFR,KADqB,EAKrB;AACEkB,aAAO,aADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,aAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM;AAHV,KALqB,EAerB;AACEkB,aAAO,OADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,OAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM,EASN;AACEkB,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,cAAhB;AAFR,OATM;AAHV,KAfqB,EAiCrB;AACEkB,aAAO,iBADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,iBAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,YADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,YAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,UADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,UAAhB;AAFR,OALM;AAHV,KAjCqB,EA+CrB;AACEkB,aAAO,cADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,cAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM,EASN;AACEkB,eAAO,WADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,SAAhB;AAFR,OATM;AAHV,KA/CqB,EAiErB;AACEkB,aAAO,WADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,YAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM;AAHV,KAjEqB,EA+ErB;AACEkB,aAAO,cADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,cAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM,EASN;AACEkB,eAAO,qBADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,qBAAhB;AAFR,OATM;AAHV,KA/EqB,EAiGrB;AACEkB,aAAO,WADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,WAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM;AAHV,KAjGqB,EA2GrB;AACEkB,aAAO,aADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,aAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM;AAHV,KA3GqB,EAqHrB;AACEkB,aAAO,WADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,WAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM;AAHV,KArHqB,EA+HrB;AACEkB,aAAO,6BADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,6BAAhB;AAFR,KA/HqB,CAAvB;;AAqIA;AACA,SAAKuB,mBAAL,GAA2B,CACzB;AACEL,aAAO,OADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,OAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM,EASN;AACEkB,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,cAAhB;AAFR,OATM;AAHV,KADyB,EAmBzB;AACEkB,aAAO,cADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,cAAhB,CAFR;AAGEsB,cAAQ,CACN;AACEJ,eAAO,QADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,OADM,EAKN;AACEkB,eAAO,aADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,aAAhB;AAFR,OALM,EASN;AACEkB,eAAO,WADT;AAEEC,cAAM,KAAKnB,UAAL,CAAgB,SAAhB;AAFR,OATM;AAHV,KAnByB,CAA3B;;AAuCA,SAAKwB,cAAL,GAAsB,CACpB;AACEN,aAAO,aADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,cAAhB;AAFR,KADoB,EAKpB;AACEkB,aAAO,OADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,OAAhB;AAFR,KALoB,EASpB;AACEkB,aAAO,cADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,cAAhB;AAFR,KAToB,EAapB;AACEkB,aAAO,QADT;AAEEC,YAAM,KAAKnB,UAAL,CAAgB,QAAhB;AAFR,KAboB,CAAtB;;AAmBA;AACA;AACA,SAAKyB,cAAL,GAAsB,CACpB,EAACC,eAAe,WAAhB,EAA6BC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,WAAvC,CAA5C,EADoB,EAEpB,EAACF,eAAe,iBAAhB,EAAmCC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,iBAAvC,CAAlD,EAFoB,EAGpB,EAACF,eAAe,YAAhB,EAA8BC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,YAAvC,CAA7C,EAHoB,EAIpB,EAACF,eAAe,YAAhB,EAA8BC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,YAAvC,CAA7C,EAJoB,EAKpB,EAACF,eAAe,MAAhB,EAAwBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,MAAvC,CAAvC,EALoB,EAMpB,EAACF,eAAe,UAAhB,EAA4BC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,UAAvC,CAA3C,EANoB,EAOpB,EAACF,eAAe,OAAhB,EAAyBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,OAAvC,CAAxC,EAPoB,EAQpB,EAACF,eAAe,MAAhB,EAAwBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,MAAvC,CAAvC,EARoB,EASpB,EAACF,eAAe,OAAhB,EAAyBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,OAAvC,CAAxC,EAToB,EAUpB,EAACF,eAAe,OAAhB,EAAyBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,OAAvC,CAAxC,EAVoB,EAWpB,EAACF,eAAe,gBAAhB,EAAkCC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,gBAAvC,CAAjD,EAXoB,EAYpB,EAACF,eAAe,cAAhB,EAAgCC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,cAAvC,CAA/C,EAZoB,EAapB,EAACF,eAAe,YAAhB,EAA8BC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,YAAvC,CAA7C,EAboB,EAcpB,EAACF,eAAe,OAAhB,EAAyBC,eAAe,KAAK5B,WAAL,CAAiB6B,qBAAjB,CAAuC,OAAvC,CAAxC,EAdoB,CAAtB;;AAiBA;AACA,SAAKvB,iBAAL,GAAyB,KAAKoB,cAAL,CAAoB,CAApB,EAAuBC,aAAhD;AACA,SAAKG,IAAL,GAAY,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC,KAAK5B,MAArC,CAAZ;;AAEA;AACA,SAAK6B,YAAL,GAAoB,KAAKlC,cAAL,CAAoBmC,mBAApB,CAAwC,KAAK9B,MAA7C,CAApB;;AAEA;AACA,SAAK+B,UAAL,GAAkB,KAAKpC,cAAL,CAAoBqC,qBAApB,CAA0C,KAAKhC,MAA/C,CAAlB;;AAEA;;;;;AAKA,SAAKiC,gBAAL,GAAwB,KAAKpC,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKP,IAA3C,CAAxB;;AAEA;;;;AAIA,SAAKQ,eAAL,GAAuB,KAAKtC,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKP,IAA3C,CAAvB;;AAEA;AACA,SAAKS,uBAAL;;AAEA;AACA,SAAKC,kBAAL,GAA0B,sBAAsB,KAAKrC,MAArD;;AAEA;AACA,QAAIsC,oBAAoB,KAAKxC,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;;;;AAIA,QAAIyC,oBAAoB,KAAK1C,WAAL,CAAiB2C,uBAAjB,CAAyC,IAAzC,EAA+C,IAA/C,EAAqD,KAAKxC,MAA1D,EAAkE,IAAlE,EAAwE,QAAxE,EAAkFsC,iBAAlF,CAAxB;;AAEA;;;;AAIA,SAAKG,uBAAL,GAA+B;AAC7BC,eAAS,CACP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADO,EAEP,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFO,EAGP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHO,EAIP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJO,EAKP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALO,EAMP,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANO,EAOP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPO,EAQP,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARO,EASP,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATO,EAUP,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVO,CADoB;AAa7BC,cAAQ,GAbqB;AAc7BC,0BAAoB,IAdS;AAe7BC,eAAS;AACPN,2BAAmBA;AADZ;AAfoB,KAA/B;;AAoBA;;;;AAIA,SAAKO,oBAAL,GAA4B,KAAKnD,cAAL,CAAoBoD,iBAApB,CAAsC,KAAKpB,IAAL,CAAUqB,MAAhD,CAA5B;;AAEA;;;;AAIA,SAAK5D,MAAL,CAAY6D,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,UAAIA,QAAQ,IAAZ,EAAkB;AAChB;AACA,YAAIA,KAAKnD,MAAL,IAAe,MAAKA,MAApB,IAA8BmD,KAAKC,WAAL,IAAoB,IAAtD,EAA4D;AAC1D;AACA,cAAID,KAAKE,SAAL,IAAkB,IAAlB,IAA0BF,KAAKE,SAAL,CAAeC,QAAf,IAA2B,IAAzD,EAA+D;AAC7D,gBAAIA,WAAWH,KAAKE,SAAL,CAAeC,QAA9B;AACA;;;;;AAKA,gBAAIC,sBACA,MAAK/D,aAAL,CAAmBgE,6BAAnB,EADJ;AAEA,gBAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;;AAEA,gBAAII,eAAe,EAAnB;;AAEA,gBAAIP,KAAKQ,MAAL,IAAe,QAAnB,EAA6B;AAC3B;AACAD,6BAAe,sBAAsB,MAAK1D,MAA1C;AACD;;AAED,gBAAI0D,gBAAgB,EAApB,EAAwB;AACtB,kBAAI,MAAK7D,WAAL,CAAiB+D,OAAjB,CAAyBN,QAAzB,CAAJ,EAAwC;;AAEtC;;;;AAIAO,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACD,eAXD,MAWO,IAAI,MAAKzD,WAAL,CAAiBkE,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC7C;;;;AAIAO,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA,oBAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,6BAAaG,QAAb,GAAwB,MAAxB;AACAH,6BAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAI,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACD;AACF;AACF;AACF;AACF;;AAED;AACA,YAAK9E,SAAL,CAAemF,IAAf;AACD,KAxDD;;AA0DA,SAAKjF,MAAL,CAAY6D,GAAZ,CAAgB,uCAAhB,EAAyD,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxE,UAAInD,SAASmD,KAAKnD,MAAlB;AACA,UAAIoD,cAAcD,KAAKC,WAAvB;AACA,UAAIkB,mBAAmBnB,KAAKmB,gBAA5B;AACA,UAAIA,gBAAJ,EAAsB;AACpB;;;;;AAKA,cAAK3C,IAAL,CAAU4C,cAAV,GAA2B,KAA3B;AACA,cAAK5C,IAAL,CAAU2C,gBAAV,GAA6B,KAA7B;;AAEA;AACA,cAAK3E,cAAL,CAAoB6E,4BAApB,CAAiD,MAAK7C,IAAL,CAAU8C,EAA3D;AACD,OAXD,MAWO;AACL;;;;;AAKA,YAAI,MAAK9E,cAAL,CAAoB+E,gCAApB,CAAqD,MAAK/C,IAAL,CAAU8C,EAA/D,CAAJ,EAAwE;AACtE;;;;;;AAMA;AACA,gBAAK9E,cAAL,CAAoB6E,4BAApB,CAAiD,MAAK7C,IAAL,CAAU8C,EAA3D;AACD,SATD,MASO;AACL;;;;AAIA,gBAAK9C,IAAL,CAAU4C,cAAV,GAA2B,IAA3B;AACA,gBAAK5C,IAAL,CAAU2C,gBAAV,GAA6B,KAA7B;;AAEA;AACA,gBAAK3E,cAAL,CAAoBgF,6BAApB,CAAkD,MAAKhD,IAAL,CAAU8C,EAA5D;AACD;AACF;;AAED;AACA,YAAKG,wBAAL;AACD,KA7CD;;AA+CA;AACA,SAAK9F,aAAL,CAAmB,KAAnB;;AAEA,QAAI+F,OAAO,EAAX;AACAA,SAAKC,KAAL,GAAa,KAAKnF,cAAL,CAAoBoF,+BAApB,CAAoD,KAAK/E,MAAzD,CAAb;;AAEA,QAAI,KAAKL,cAAL,CAAoBqF,WAApB,CAAgC,KAAKhF,MAArC,CAAJ,EAAkD;AAChD;AACA,WAAKiF,SAAL,CAAe,oBAAf,EAAqC,YAArC,EAAmDJ,IAAnD;AACD,KAHD,MAGO;AACL;AACA,WAAKI,SAAL,CAAe,gBAAf,EAAiC,YAAjC,EAA+CJ,IAA/C;AACD;AACF;;AAED;;;;;;;8CAG0B;AACxB,UAAI,KAAKlD,IAAL,CAAUuD,eAAV,IAA6B,IAAjC,EAAuC;AACrC;AACA,aAAKzE,oBAAL,GAA4B,EAA5B;;AAEA;AACA,YAAI,KAAKkB,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,IAAyC,IAA7C,EAAmD;AACjD,eAAKC,4BAAL,GAAoC,KAAKzD,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsCE,MAA1E;AACD,SAFD,MAEO;AACL,eAAKD,4BAAL,GAAoC,CAApC;AACD;;AAED;AACA,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAK3D,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsCE,MAA1D,EAAkEC,GAAlE,EAAuE;AACrE,cAAIC,aAAa,KAAK5D,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsCG,CAAtC,CAAjB;;AAEA,cAAIC,cAAc,IAAlB,EAAwB;;AAEtB;AACA,gBAAIC,SAAS,EAAb;;AAEA;AACAA,mBAAOC,MAAP,GAAgBH,IAAI,CAApB;;AAEA;;;;AAIAE,mBAAOE,KAAP,GAAe,KAAK7F,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKvC,cAAL,CAAoBgG,SAA1D,CAAf;;AAEA;AACAH,mBAAOI,wBAAP,GAAkC,EAAlC;;AAEA;AACAJ,mBAAOD,UAAP,GAAoBA,UAApB;;AAEA;AACA,iBAAK9E,oBAAL,CAA0BoF,IAA1B,CAA+BL,MAA/B;;AAEA;AACA,gBAAIM,WAAWP,WAAWO,QAA1B;;AAEA,gBAAIA,YAAY,IAAhB,EAAsB;AACpB;AACA,mBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,SAAST,MAA7B,EAAqCU,GAArC,EAA0C;AACxC;AACA,oBAAIC,YAAYF,SAASC,CAAT,CAAhB;;AAEA,oBAAIC,aAAa,IAAjB,EAAuB;AACrB,sBAAIC,OAAOD,UAAUC,IAArB;AACA,sBAAI7E,SAAS4E,UAAU5E,MAAvB;;AAEA,sBAAIA,UAAU,IAAd,EAAoB;AAClB;AACA,yBAAK8E,kBAAL,GAA0B9E,OAAOpB,MAAjC;AACA,yBAAKmG,uBAAL,GAA+B/E,OAAOgC,WAAtC;AACD;;AAED,sBAAI6C,QAAQ,OAAZ,EAAqB;AACnB;;AAEA;AACA,yBAAKG,qBAAL,GAA6B,OAA7B;;AAEA,wBAAIhF,UAAU,IAAV,IAAkBA,OAAOiF,MAAP,IAAiB,IAAvC,EAA6C;AAC3C;AACAb,6BAAOa,MAAP,GAAgBjF,OAAOiF,MAAvB;AACD;AACF,mBAVD,MAUO,IAAIJ,QAAQ,cAAZ,EAA4B;AACjC;;AAEA;AACA,yBAAKG,qBAAL,GAA6B,cAA7B;;AAEA,wBAAIhF,UAAU,IAAV,IAAkBA,OAAOkF,SAAP,IAAoB,IAAtC,IAA8ClF,OAAOkF,SAAP,CAAiBjB,MAAjB,GAA0B,CAA5E,EAA+E;AAC7E;AACAG,6BAAOe,QAAP,GAAkBnF,OAAOkF,SAAP,CAAiB,CAAjB,CAAlB;AACD;;AAED;AACA,wBAAIE,UAAU,KAAKC,gCAAL,CAAsC,KAAKP,kBAA3C,EAA+D,KAAKC,uBAApE,CAAd;;AAEA,wBAAIK,WAAW,IAAf,EAAqB;AACnB;AACAhB,6BAAOgB,OAAP,GAAiB,KAAK3G,WAAL,CAAiBqC,oBAAjB,CAAsCsE,OAAtC,CAAjB;AACD;AACF;AACF;AACF;AACF;;AAED;AACA,gBAAIE,kBAAkB,KAAK/G,cAAL,CAAoBgH,kBAApB,CAAuC,KAAK3G,MAA5C,EAAoDuF,WAAWqB,EAA/D,CAAtB;;AAEA;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,gBAAgBrB,MAApC,EAA4CwB,GAA5C,EAAiD;;AAE/C;AACA,kBAAI7G,SAAS0G,gBAAgBG,CAAhB,CAAb;;AAEA;AACA,kBAAIC,OAAOtB,OAAOE,KAAP,CAAa1F,MAAb,CAAX;;AAEA,kBAAI8G,QAAQ,IAAZ,EAAkB;AAChB;AACAA,qBAAKC,OAAL,GAAe,IAAf;;AAEA;AACAvB,uBAAOI,wBAAP,CAAgCC,IAAhC,CAAqCiB,IAArC;AACD;AACF;;AAED;AACAtB,mBAAOkB,eAAP,GAAyBA,eAAzB;;AAEA,gBAAIA,gBAAgBrB,MAAhB,GAAyB,CAA7B,EAAgC;;AAE9B;AACA,kBAAI2B,qBAAqBN,gBAAgBA,gBAAgBrB,MAAhB,GAAyB,CAAzC,CAAzB;;AAEA,kBAAI2B,sBAAsB,IAA1B,EAAgC;;AAE9B,oBAAIC,0BAA0B,KAAKtH,cAAL,CAAoBuH,0BAApB,CAA+CF,kBAA/C,CAA9B;;AAEA,oBAAIC,2BAA2B,IAA3B,IAAmCA,wBAAwB5B,MAAxB,GAAiC,CAAxE,EAA2E;AACzE,sBAAIE,aAAa0B,wBAAwB,CAAxB,CAAjB;;AAEA,sBAAI1B,cAAc,IAAlB,EAAwB;AACtB,yBAAK4B,4BAAL,GAAoC5B,WAAWqB,EAA/C;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,YAAI,KAAKR,qBAAL,IAA8B,IAAlC,EAAwC;AACtC;;;;AAIA,cAAI,KAAKzE,IAAL,CAAUuD,eAAV,CAA0BkC,8BAA1B,IAA4D,aAAhE,EAA+E;AAC7E;AACA,iBAAKhB,qBAAL,GAA6B,aAA7B;AACD,WAHD,MAGO,IAAI,KAAKzE,IAAL,CAAUuD,eAAV,CAA0BkC,8BAA1B,IAA4D,QAAhE,EAA0E;AAC/E;AACA,iBAAKhB,qBAAL,GAA6B,QAA7B;AACD;AACF;AACF;AACF;;AAED;;;;;;kCAGc;;AAEZ,UAAIvB,OAAO,EAAX;AACAA,WAAKwC,WAAL,GAAmB,IAAnB;;AAEA;AACA,WAAKpC,SAAL,CAAe,eAAf,EAAgC,YAAhC,EAA8CJ,IAA9C;;AAEA,UAAIyC,oBAAoB,KAAK9H,aAAL,CAAmB+H,cAAnB,CAAkC,mBAAlC,CAAxB;AACA,UAAIC,iBAAkBF,oBAAoB,QAApB,GAA+B,KAAKtH,MAA1D;AACAyH,aAAOC,IAAP,CAAYF,cAAZ;AACD;;;;;AAED;;;oDAGgC;;AAE9B,UAAI3C,OAAO,EAAX;AACAA,WAAKwC,WAAL,GAAmB,KAAnB;;AAEA;AACA,WAAKpC,SAAL,CAAe,eAAf,EAAgC,YAAhC,EAA8CJ,IAA9C;;AAEA,UAAIyC,oBAAoB,KAAK9H,aAAL,CAAmB+H,cAAnB,CAAkC,mBAAlC,CAAxB;AACA,UAAIC,iBAAkBF,oBAAoB,oBAApB,GAA2C,QAA3C,GAAsD,KAAKtH,MAAjF;AACAyH,aAAOC,IAAP,CAAYF,cAAZ;AACD;;;;;AAED;;;4BAGQ;AACN;AACA;AACA;;AAEA,WAAKpI,MAAL,CAAYuI,UAAZ,CAAuB,UAAvB,EAAmC,EAACC,YAAY,KAAKjG,IAAlB,EAAnC;;AAEA,WAAK/B,kBAAL,CAAwBiI,cAAxB,CAAuC,IAAvC;;AAEA,WAAKxI,MAAL,CAAYyI,EAAZ,CAAe,cAAf,EAA+B,EAAC/H,WAAW,KAAKA,SAAjB,EAA/B;;AAEA;AACA,WAAKjB,aAAL,CAAmB,KAAnB;AACD;;;;;AAED;;;qDAGiC;AAC/BiJ,YAAM,KAAKjI,UAAL,CAAgB,4BAAhB,CAAN;AACD;;;;;AAED;;;;6BAIS;;AAEP;AACA,UAAI,CAACkI,QAAQC,MAAR,CAAe,KAAKtG,IAApB,EAA0B,KAAKM,gBAA/B,CAAL,EAAuD;AACrD;;AAEA,YAAIiG,SAASC,QAAQ,KAAKrI,UAAL,CAAgB,aAAhB,CAAR,CAAb;;AAEA,YAAIoI,MAAJ,EAAY;AACV;AACA,eAAKvI,cAAL,CAAoByI,WAApB,CAAgC,KAAKpI,MAArC,EAA6C,KAAKiC,gBAAlD;;AAEA;AACA,eAAKtC,cAAL,CAAoB0I,WAApB;;AAEA;AACA,eAAKC,KAAL;AACD;AAEF,OAhBD,MAgBO;AACL;;AAEA;AACA,aAAKA,KAAL;AACD;AACF;;AAED;;;;;;uCAGmB;AACjB,UAAI,KAAK3G,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,IAAyC,IAA7C,EAAmD;AACjD,aAAKxD,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,GAAwC,EAAxC;AACD;AACD,UAAIoD,kBAAkB,KAAK5G,IAAL,CAAUuD,eAAV,CAA0BC,WAAhD;AACA,UAAIoD,gBAAgBlD,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B;AACA,YAAImD,qBAAqBD,gBAAgBA,gBAAgBlD,MAAhB,GAAyB,CAAzC,CAAzB;AACA,YAAIoD,gBAAgB;AAClB,gBAAMD,mBAAmB5B;AADP,SAApB;AAGA2B,wBAAgB1C,IAAhB,CAAqB4C,aAArB;AACD,OAPD,MAOO;AACL;AACA,YAAIA,iBAAgB;AAClB,gBAAM,KAAKzI;AADO,SAApB;AAGAuI,wBAAgB1C,IAAhB,CAAqB4C,cAArB;AACD;;AAED,UAAIF,gBAAgBlD,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B;;;;;;AAMA,YAAI,KAAK1D,IAAL,CAAUuD,eAAV,CAA0BkC,8BAA1B,IAA4D,IAAhE,EAAsE;AACpE,eAAKzF,IAAL,CAAUuD,eAAV,CAA0BkC,8BAA1B,GAA2D,aAA3D;AACD;;AAED,YAAI,KAAKzF,IAAL,CAAUuD,eAAV,CAA0BwD,gBAA1B,IAA8C,IAAlD,EAAwD;AACtD,eAAK/G,IAAL,CAAUuD,eAAV,CAA0BwD,gBAA1B,GAA6C,WAA7C;AACD;;AAED,YAAI,KAAK/G,IAAL,CAAUuD,eAAV,CAA0ByD,aAA1B,IAA2C,IAA/C,EAAqD;AACnD,eAAKhH,IAAL,CAAUuD,eAAV,CAA0ByD,aAA1B,GAA0C,KAA1C;AACD;;AAED,YAAI,KAAKhH,IAAL,CAAUuD,eAAV,CAA0B0D,iBAA1B,IAA+C,IAAnD,EAAyD;AACvD,eAAKjH,IAAL,CAAUuD,eAAV,CAA0B0D,iBAA1B,GAA8C,CAA9C;AACD;AACF;;AAED;AACA,WAAKhE,wBAAL;AACD;;AAED;;;;;;6CAGyBW,U,EAAY;AACnC,UAAIgD,kBAAkB,KAAK5G,IAAL,CAAUuD,eAAV,CAA0BC,WAAhD;AACA,WAAK,IAAI0B,IAAI,CAAb,EAAgBA,IAAI0B,gBAAgBlD,MAApC,EAA4CwB,GAA5C,EAAiD;AAC/C,YAAIgC,iBAAiBN,gBAAgB1B,CAAhB,CAArB;AACA,YAAIgC,kBAAkBtD,UAAtB,EAAkC;AAChC,cAAIsD,eAAe/C,QAAf,IAA2B,IAA/B,EAAqC;AACnC+C,2BAAe/C,QAAf,GAA0B,EAA1B;AACD;AACD,cAAIgD,wBAAwB;AAC1B,oBAAO,EADmB;AAE1B,sBAAU;AACR,wBAAU,EADF;AAER,6BAAe;AAFP;AAFgB,WAA5B;AAOAD,yBAAe/C,QAAf,CAAwBD,IAAxB,CAA6BiD,qBAA7B;AACD;AACF;AACD;AACA,WAAKlE,wBAAL;AACD;;AAED;;;;;;;;oDAKgCmE,kB,EAAoB;;AAElD,UAAIA,sBAAqB,IAArB,IAA6BA,mBAAmB3H,MAAnB,IAA6B,IAA9D,EAAoE;AAClE;AACA,YAAIpB,SAAS+I,mBAAmB3H,MAAnB,CAA0BpB,MAAvC;;AAEA;AACA+I,2BAAmB3H,MAAnB,GAA4B,EAA5B;;AAEA,YAAIpB,UAAU,IAAd,EAAoB;AAClB;AACA+I,6BAAmB3H,MAAnB,CAA0BpB,MAA1B,GAAmCA,MAAnC;AACD;AACF;;AAED;AACA,WAAK4E,wBAAL;AACD;;AAED;;;;;;;;yDAKqCmE,kB,EAAoB;;AAEvD,UAAIA,sBAAqB,IAArB,IAA6BA,mBAAmB3H,MAAnB,IAA6B,IAA9D,EAAoE;;AAElE;AACA,YAAIpB,SAAS+I,mBAAmB3H,MAAnB,CAA0BpB,MAAvC;AACA,YAAIoD,cAAc2F,mBAAmB3H,MAAnB,CAA0BgC,WAA5C;;AAEA;AACA2F,2BAAmB3H,MAAnB,GAA4B,EAA5B;;AAEA,YAAIpB,UAAU,IAAd,EAAoB;AAClB;AACA+I,6BAAmB3H,MAAnB,CAA0BpB,MAA1B,GAAmCA,MAAnC;AACD;;AAED,YAAIoD,eAAe,IAAnB,EAAyB;AACvB;AACA2F,6BAAmB3H,MAAnB,CAA0BgC,WAA1B,GAAwCA,WAAxC;AACD;AACF;;AAED;AACA,WAAKwB,wBAAL;AACD;;AAED;;;;;;qCAGiBW,U,EAAY;AAC3B,UAAIgD,kBAAkB,KAAK5G,IAAL,CAAUuD,eAAV,CAA0BC,WAAhD;;AAEA,UAAI6D,QAAQT,gBAAgBU,OAAhB,CAAwB1D,UAAxB,CAAZ;AACA,UAAIyD,QAAQ,CAAC,CAAb,EAAgB;AACdT,wBAAgBW,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;;AAED,UAAIT,gBAAgBlD,MAAhB,IAA0B,CAA9B,EAAiC;AAC/B;;;;AAIA,aAAK1D,IAAL,CAAUuD,eAAV,CAA0BkC,8BAA1B,GAA2D,IAA3D;AACA,aAAKzF,IAAL,CAAUuD,eAAV,CAA0BwD,gBAA1B,GAA6C,IAA7C;AACA,aAAK/G,IAAL,CAAUuD,eAAV,CAA0ByD,aAA1B,GAA0C,IAA1C;AACA,aAAKhH,IAAL,CAAUuD,eAAV,CAA0B0D,iBAA1B,GAA8C,IAA9C;AACD;;AAED;AACA,WAAKhE,wBAAL;AACD;;AAGD;;;;;;sCAGkB;;AAEhB;AACA,WAAKjF,cAAL,CAAoB0I,WAApB;;AAEA;AACA,WAAKnI,mBAAL,GAA2B,KAA3B;AACD;;AAED;;;;;;gDAG4B;;AAE1B;AACA,WAAKC,iBAAL,GAAyB,KAAKoB,cAAL,CAAoB,CAApB,EAAuBC,aAAhD;;AAEA;AACA,WAAK2H,8BAAL,CAAoC,cAApC;;AAEA;AACA,WAAKC,sBAAL;;AAEA;AACA,WAAKC,wBAAL;;AAEA;AACA,WAAKC,yBAAL;;AAEA;AACA,WAAKC,sBAAL;AACD;;AAED;;;;;;;oCAIgBnG,W,EAAa;;AAE3B;AACA,WAAKzD,cAAL,CAAoB6J,eAApB,CAAoC,KAAKxJ,MAAzC,EAAiDoD,WAAjD;;AAEA;AACA,WAAKzD,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;sCAIkBjF,W,EAAa;;AAE7B;AACA,WAAKzD,cAAL,CAAoB8J,iBAApB,CAAsC,KAAKzJ,MAA3C,EAAmDoD,WAAnD;;AAEA;AACA,WAAKzD,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;oCAIgBjF,W,EAAa;;AAE3B;AACA,UAAIsG,SAASvB,QAAQ,KAAKrI,UAAL,CAAgB,wBAAhB,CAAR,CAAb;;AAEA,UAAI4J,MAAJ,EAAY;AACV;;AAEA;AACA,aAAK/J,cAAL,CAAoBgK,eAApB,CAAoC,KAAK3J,MAAzC,EAAiDoD,WAAjD;;AAEA;AACA,aAAKwG,4CAAL;;AAEA;AACA,aAAKjK,cAAL,CAAoB0I,WAApB;AACD;AACF;;AAED;;;;;;kDAG8B;;AAE5B,UAAItG,aAAa,KAAKA,UAAtB;;AAEA,UAAIA,cAAc,IAAlB,EAAwB;;AAEtB;AACA,aAAK,IAAIgE,IAAI,CAAb,EAAgBA,IAAIhE,WAAWsD,MAA/B,EAAuCU,GAAvC,EAA4C;AAC1C,cAAI8D,YAAY9H,WAAWgE,CAAX,CAAhB;;AAEA,cAAI8D,aAAa,IAAjB,EAAuB;AACrB,gBAAIrI,gBAAgBqI,UAAUC,IAA9B;;AAEA;AACA,gBAAIC,UAAU,KAAK/K,SAAL,CAAegL,GAAf,CAAmBxI,gBAAgB,SAAnC,CAAd;;AAEA,gBAAIuI,WAAW,IAAf,EAAqB;AACnB,kBAAIA,QAAQE,uBAAR,EAAJ,EAAuC;AACrC;;;;AAIAJ,0BAAUtF,cAAV,GAA2B,KAA3B;AACD;AACF;AACF;AACF;AACF;AACF;;AAED;;;;;;+CAG2B;AACzB;AACA,WAAKlE,SAAL,CAAewF,IAAf,CAAoB,KAAK1D,eAAzB;;AAEA;AACA,WAAKA,eAAL,GAAuB,KAAKtC,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKP,IAA3C,CAAvB;;AAEA;AACA,aAAO,KAAKhC,cAAL,CAAoB0I,WAApB,EAAP;AACD;;AAED;;;;;;2BAGO;;AAEL,UAAI,KAAKhI,SAAL,CAAegF,MAAf,KAA0B,CAA9B,EAAiC;AAC/B;AACA0C,cAAM,KAAKjI,UAAL,CAAgB,iBAAhB,CAAN;AAED,OAJD,MAIO,IAAI,KAAKO,SAAL,CAAegF,MAAf,GAAwB,CAA5B,EAA+B;AACpC;;AAEA;AACA,YAAI6C,SAASC,QAAQ,KAAKrI,UAAL,CAAgB,uBAAhB,CAAR,CAAb;;AAEA,YAAIoI,MAAJ,EAAY;AACV;AACA,eAAK9I,MAAL,CAAYuI,UAAZ,CAAuB,UAAvB,EAAmC,EAACC,YAAY,KAAKjG,IAAlB,EAAnC;;AAEA;AACA,cAAIvB,WAAW,KAAKC,SAAL,CAAe6J,GAAf,EAAf;;AAEA;AACA,eAAKvK,cAAL,CAAoByI,WAApB,CAAgC,KAAKpI,MAArC,EAA6CI,QAA7C;;AAEA;AACA,eAAKuB,IAAL,GAAY,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC,KAAK5B,MAArC,CAAZ;;AAEA;AACA,eAAK+B,UAAL,GAAkB,KAAKpC,cAAL,CAAoBqC,qBAApB,CAA0C,KAAKhC,MAA/C,CAAlB;;AAEA;AACA,eAAKL,cAAL,CAAoB0I,WAApB;AACD;AAEF;AACF;;AAED;;;;;;;;mDAK+BpC,I,EAAM;AACnC,UAAI7E,SAAS,EAAb;;AAEA,UAAI6E,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,aAAK,IAAIkE,IAAI,CAAb,EAAgBA,IAAI,KAAKhJ,eAAL,CAAqBkE,MAAzC,EAAiD8E,GAAjD,EAAsD;;AAEpD;AACA,cAAIC,wBAAwB,KAAKjJ,eAAL,CAAqBgJ,CAArB,CAA5B;;AAEA,cAAIC,yBAAyB,IAA7B,EAAmC;;AAEjC,gBAAIA,sBAAsBpJ,KAAtB,IAA+BiF,IAAnC,EAAyC;AACvC;;;;AAIA7E,uBAASgJ,sBAAsBhJ,MAA/B;AACA;AACD;AACF;AACF;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;;sDAKkC6E,I,EAAM;AACtC,UAAI7E,SAAS,EAAb;;AAEA,UAAI6E,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,aAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,mBAAL,CAAyBgE,MAA7C,EAAqDC,GAArD,EAA0D;;AAExD;AACA,cAAI+E,2BAA2B,KAAKhJ,mBAAL,CAAyBiE,CAAzB,CAA/B;;AAEA,cAAI+E,4BAA4B,IAAhC,EAAsC;;AAEpC,gBAAIA,yBAAyBrJ,KAAzB,IAAkCiF,IAAtC,EAA4C;AAC1C;;;;AAIA7E,uBAASiJ,yBAAyBjJ,MAAlC;AACA;AACD;AACF;AACF;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;;;qDAMiCpB,M,EAAQoD,W,EAAa;;AAEpD,UAAIoD,UAAU,EAAd;;AAEA;AACA,UAAIqD,YAAY,KAAKlK,cAAL,CAAoB2K,kCAApB,CAAuDtK,MAAvD,EAA+DoD,WAA/D,CAAhB;;AAEA,UAAIyG,aAAa,IAAb,IAAqBA,UAAUrD,OAAV,IAAqB,IAA9C,EAAoD;AAClD;AACAA,kBAAUqD,UAAUrD,OAApB;AACD;;AAED,aAAOA,OAAP;AACD;;AAED;;;;;;;;;wDAMoCxG,M,EAAQoD,W,EAAa;;AAEvD,UAAImH,aAAa,IAAjB;;AAEA;AACA,UAAIV,YAAY,KAAKlK,cAAL,CAAoB2K,kCAApB,CAAuDtK,MAAvD,EAA+DoD,WAA/D,CAAhB;;AAEA,UAAIyG,aAAa,IAAb,IAAqBA,UAAUU,UAAV,IAAwB,IAAjD,EAAuD;AACrD;AACAA,qBAAaV,UAAUU,UAAvB;AACD;;AAED,aAAOA,UAAP;AACD;;AAED;;;;;;;;2CAKuBvK,M,EAAQ;;AAE7B,UAAIwK,sBAAsB,IAA1B;;AAEA,UAAIC,oBAAoB,EAAxB;;AAEA;AACA,UAAI9I,OAAO,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC5B,MAAhC,CAAX;;AAEA,UAAI2B,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,YAAI0F,cAAc1F,KAAK0F,WAAvB;;AAEA,YAAIA,eAAe,IAAnB,EAAyB;;AAEvB;AACA,eAAK,IAAItB,IAAI,CAAb,EAAgBA,IAAIsB,YAAYhC,MAAhC,EAAwCU,GAAxC,EAA6C;;AAE3C;AACA,gBAAI2E,aAAarD,YAAYtB,CAAZ,CAAjB;;AAEA,gBAAI2E,cAAc,IAAlB,EAAwB;;AAEtB;AACA,kBAAIC,eAAeD,WAAWjG,EAA9B;;AAEA;AACAgG,gCAAkB5E,IAAlB,CAAuB8E,YAAvB;AACD;AACF;AACF;AACF;;AAED;AACA,UAAIC,oBAAoB,CAAxB;;AAEA;AACA,aAAOJ,uBAAuB,IAA9B,EAAoC;;AAElC;AACA,YAAIK,+BAA+B7K,SAAS,YAAT,GAAwB4K,iBAA3D;;AAEA;AACA,YAAIH,kBAAkBxB,OAAlB,CAA0B4B,4BAA1B,KAA2D,CAAC,CAAhE,EAAmE;AACjE;AACAL,gCAAsBK,4BAAtB;AACD,SAHD,MAGO;AACL;;;;AAIAD;AACD;AACF;;AAED,aAAOJ,mBAAP;AACD;;AAED;;;;;;oCAGgB;;AAEd;AACA,UAAIA,sBAAsB,KAAKM,sBAAL,CAA4B,KAAK9K,MAAjC,CAA1B;;AAEA;AACA,UAAI0K,aAAa,EAAjB;AACAA,iBAAWjG,EAAX,GAAgB+F,mBAAhB;AACAE,iBAAWK,MAAX,GAAoB,EAApB;AACAL,iBAAWM,QAAX,GAAsB,KAAKhL,MAA3B;AACA0K,iBAAWO,kBAAX,GAAgC,KAAhC;AACAP,iBAAWvJ,eAAX,GAA6B,EAA7B;;AAEA;AACA,UAAIA,kBAAkB,EAAtB;AACAA,sBAAgB8E,IAAhB,GAAuB,EAAvB;AACA9E,sBAAgBC,MAAhB,GAAyB,EAAzB;;AAEA;AACAsJ,iBAAWvJ,eAAX,CAA2B0E,IAA3B,CAAgC1E,eAAhC;;AAEA;AACA,UAAI,KAAKQ,IAAL,CAAU0F,WAAV,IAAyB,IAA7B,EAAmC;AACjC,aAAK1F,IAAL,CAAU0F,WAAV,GAAwB,EAAxB;AACD;;AAED;AACA,WAAK1F,IAAL,CAAU0F,WAAV,CAAsBxB,IAAtB,CAA2B6E,UAA3B;;AAEA;AACA,WAAK/K,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;qCAIiB6C,e,EAAiB;;AAEhC,UAAIA,mBAAmB,IAAvB,EAA6B;AAC3B;AACA,YAAIvJ,OAAO,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC,KAAK5B,MAArC,CAAX;;AAEA,YAAI2B,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,cAAI0F,cAAc1F,KAAK0F,WAAvB;;AAEA,cAAIA,eAAe,IAAnB,EAAyB;;AAEvB;AACAA,wBAAY6B,MAAZ,CAAmBgC,eAAnB,EAAoC,CAApC;AACD;AACF;AACF;;AAED;AACA,WAAKvL,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;uCAImBqC,U,EAAY;;AAE7B,UAAIA,cAAc,IAAlB,EAAwB;;AAEtB;AACA,YAAIvJ,kBAAkB,EAAtB;AACAA,wBAAgB8E,IAAhB,GAAuB,EAAvB;AACA9E,wBAAgBC,MAAhB,GAAyB,EAAzB;;AAEA;AACAsJ,mBAAWvJ,eAAX,CAA2B0E,IAA3B,CAAgC1E,eAAhC;AACD;;AAED;AACA,WAAKxB,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;;0CAKsBqC,U,EAAYS,oB,EAAsB;AACtD,UAAIT,cAAc,IAAlB,EAAwB;;AAEtB;AACA,YAAIvJ,kBAAkBuJ,WAAWvJ,eAAjC;;AAEA,YAAIA,mBAAmB,IAAvB,EAA6B;AAC3B;AACAA,0BAAgB+H,MAAhB,CAAuBiC,oBAAvB,EAA6C,CAA7C;AACD;AACF;;AAED;AACA,WAAKxL,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;;6CAKyB9C,U,EAAY6F,uB,EAAyB;AAC5D,UAAI7F,cAAc,IAAlB,EAAwB;;AAEtB;AACA,YAAIlE,sBAAsBkE,WAAWO,QAArC;;AAEA,YAAIzE,uBAAuB,IAA3B,EAAiC;AAC/B;AACAA,8BAAoB6H,MAApB,CAA2BkC,uBAA3B,EAAoD,CAApD;AACD;AACF;;AAED;AACA,WAAKzL,cAAL,CAAoB0I,WAApB;AACD;;AAED;;;;;;;+CAI2BvC,Q,EAAU;;AAEnC,UAAIA,YAAY,IAAhB,EAAsB;AACpB;AACAA,iBAAS1E,MAAT,GAAkB,EAAlB;;AAEA;AACA,YAAIA,SAAS,KAAKiK,8BAAL,CAAoCvF,SAASG,IAA7C,CAAb;;AAEA,YAAI7E,UAAU,IAAd,EAAoB;;AAElB;AACA,eAAK,IAAIkK,IAAI,CAAb,EAAgBA,IAAIlK,OAAOiE,MAA3B,EAAmCiG,GAAnC,EAAwC;AACtC,gBAAIC,cAAcnK,OAAOkK,CAAP,CAAlB;;AAEA,gBAAIC,eAAe,IAAnB,EAAyB;AACvB,kBAAIvK,QAAQuK,YAAYvK,KAAxB;;AAEA;AACA8E,uBAAS1E,MAAT,CAAgBJ,KAAhB,IAAyB,EAAzB;;AAEA,kBAAIA,SAAS,QAAb,EAAuB;AACrB;AACA8E,yBAAS1E,MAAT,CAAgBJ,KAAhB,IAAyB,KAAKhB,MAA9B;AACD;AACF;AACF;AACF;AACF;;AAGD;AACA,WAAK4E,wBAAL;AACD;;AAED;;;;;;;;kDAK8BmE,kB,EAAoB;;AAEhD,UAAIA,sBAAsB,IAA1B,EAAgC;;AAE9B,YAAI/I,SAAS,IAAb;AACA,YAAIoD,cAAc,IAAlB;;AAEA,YAAI2F,mBAAmB3H,MAAnB,IAA6B,IAAjC,EAAuC;AACrC;AACApB,mBAAS+I,mBAAmB3H,MAAnB,CAA0BpB,MAAnC;AACAoD,wBAAc2F,mBAAmB3H,MAAnB,CAA0BgC,WAAxC;AACD;;AAED;AACA2F,2BAAmB3H,MAAnB,GAA4B,EAA5B;;AAEA,YAAIpB,UAAU,IAAd,EAAoB;AAClB;AACA+I,6BAAmB3H,MAAnB,CAA0BpB,MAA1B,GAAmCA,MAAnC;AACD;;AAED,YAAIoD,eAAe,IAAnB,EAAyB;AACvB;AACA2F,6BAAmB3H,MAAnB,CAA0BgC,WAA1B,GAAwCA,WAAxC;AACD;AACF;;AAED;AACA,WAAKwB,wBAAL;AACD;;AAED;;;;;;;mDAI+B4G,I,EAAM;;AAEnC,UAAIA,QAAQ,cAAZ,EAA4B;AAC1B;AACA,aAAKvL,mBAAL,GAA2B,CAAC,KAAKA,mBAAjC;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,IAAvB;AACA,aAAKD,cAAL,GAAsB,IAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbD,MAaO,IAAIP,QAAQ,iBAAZ,EAA+B;;AAEpC;AACA,aAAKQ,gBAAL;;AAEA;AACA,aAAK/L,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,CAAC,KAAKA,mBAAjC;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKO,gBAAL,GAAwB,KAAxB;AACA,aAAKL,gBAAL,GAAwB,KAAxB;AACA;AACA,aAAKE,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAjBM,MAiBA,IAAIP,QAAQ,iBAAZ,EAA+B;;AAEpC;AACA,aAAKQ,gBAAL;;AAEA;AACA,aAAK/L,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,CAAC,KAAKA,eAA7B;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA;AACA,aAAKE,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAjBM,MAiBA,IAAIP,QAAQ,aAAZ,EAA2B;AAChC;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,CAAC,KAAKA,eAA7B;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKoL,QAAL,GAAgB,KAAhB;AACD,OAZM,MAYA,IAAIP,QAAQ,YAAZ,EAA0B;AAC/B;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,CAAC,KAAKA,UAAxB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbM,MAaA,IAAIP,QAAQ,cAAZ,EAA4B;;AAEjC;AACA,aAAKQ,gBAAL;;AAEA;AACA,aAAK/L,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;AACA;AACA,aAAKE,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAjBM,MAiBA,IAAIP,QAAQ,cAAZ,EAA4B;AACjC;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,YAAIG,aAAa,KAAKvM,cAAL,CAAoBwM,iBAApB,CAAsC,KAAKnM,MAA3C,CAAjB;;AAEA,YAAIkM,cAAc,IAAlB,EAAwB;AACtB;AACA,eAAK7M,MAAL,CAAYyI,EAAZ,CAAe,mBAAf,EAAoC,EAAC/H,WAAW,KAAKA,SAAjB,EAA4BC,QAAOkM,UAAnC,EAApC;AACD,SAHD,MAGO;AACL;AACA,cAAIE,wBAAwB,KAAKtM,UAAL,CAAgB,uBAAhB,CAA5B;AACAiI,gBAAMqE,qBAAN;AACD;AACF,OAvBM,MAuBA,IAAIZ,QAAQ,UAAZ,EAAwB;AAC7B;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,YAAIM,aAAa,KAAK1M,cAAL,CAAoB2M,aAApB,CAAkC,KAAKtM,MAAvC,CAAjB;;AAEA,YAAIqM,cAAc,IAAlB,EAAwB;AACtB;AACA,eAAKhN,MAAL,CAAYyI,EAAZ,CAAe,mBAAf,EAAoC,EAAC/H,WAAW,KAAKA,SAAjB,EAA4BC,QAAOqM,UAAnC,EAApC;AACD,SAHD,MAGO;AACL;AACA,cAAIE,oBAAoB,KAAKzM,UAAL,CAAgB,mBAAhB,CAAxB;AACAiI,gBAAMwE,iBAAN;AACD;AACF,OAvBM,MAuBA,IAAIf,QAAQ,UAAZ,EAAwB;AAC7B;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbM,MAaA,IAAIP,QAAQ,MAAZ,EAAoB;AACzB;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,IAAvB;AACA,aAAKD,cAAL,GAAsB,IAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbM,MAaA,IAAIP,QAAQ,MAAZ,EAAoB;AACzB;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,IAAvB;AACA,aAAKD,cAAL,GAAsB,IAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbM,MAaA,IAAIP,QAAQ,QAAZ,EAAsB;AAC3B;AACA,aAAKvL,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,CAAC,KAAKA,cAA5B;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,IAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD,OAbM,MAaA,IAAIP,QAAQ,UAAZ,EAAwB;;AAE7B;AACA,aAAKQ,gBAAL;;AAEA;AACA,aAAK/L,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA;AACA,aAAKE,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,KAAvB;AACA,aAAKD,cAAL,GAAsB,KAAtB;;AAEA,aAAK8L,8BAAL,GAAsCxE,QAAQyE,MAAR,CAAe,KAAK9K,IAApB,EAA0B,CAA1B,CAAtC;AACA,aAAKoK,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACD,OAnBM,MAmBA;AACL;AACA,aAAK9L,mBAAL,GAA2B,KAA3B;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKuL,eAAL,GAAuB,KAAvB;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKnL,eAAL,GAAuB,IAAvB;AACA,aAAKD,cAAL,GAAsB,IAAtB;AACA,aAAKqL,QAAL,GAAgB,KAAhB;AACD;AACF;;AAED;;;;;;0DAGsC;;AAEpC,UAAI,KAAK3G,4BAAL,IAAqC,CAAzC,EAA4C;AAC1C;AACA2C,cAAM,KAAKjI,UAAL,CAAgB,8BAAhB,CAAN;;AAEA;AACA,aAAKsF,4BAAL,GAAoC,KAAK3E,oBAAL,CAA0B4E,MAA9D;AACD,OAND,MAMO,IAAI,KAAKD,4BAAL,GAAoC,KAAK3E,oBAAL,CAA0B4E,MAAlE,EAA0E;AAC/E;;;;AAIA,YAAIqE,SAASvB,QAAQ,KAAKrI,UAAL,CAAgB,iDAAhB,EAAmE,EAACsF,8BAA6B,KAAKA,4BAAnC,EAAnE,CAAR,CAAb;;AAEA,YAAIsE,MAAJ,EAAY;AACV;;AAEA,cAAI,KAAKtE,4BAAL,IAAqC,CAAzC,EAA4C;AAC1C;;;;AAIA,iBAAKsH,YAAL;AACD,WAND,MAMO;AACL;;;;;AAKA;AACA,iBAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKlM,oBAAL,CAA0B4E,MAAhD,EAAwDsH,IAAxD,EAA8D;;AAE5D,kBAAIA,MAAM,KAAKvH,4BAAf,EAA6C;AAC3C;AACA,oBAAII,SAAS,KAAK/E,oBAAL,CAA0BkM,EAA1B,CAAb;AACA,qBAAKC,gBAAL,CAAsBpH,MAAtB;;AAEA;;;;AAIAmH;AACD;AACF;AACF;AACF,SA/BD,MA+BO;AACL;AACA,eAAKvH,4BAAL,GAAoC,KAAK3E,oBAAL,CAA0B4E,MAA9D;AACD;AACF,OA1CM,MA0CA,IAAI,KAAKD,4BAAL,GAAoC,KAAK3E,oBAAL,CAA0B4E,MAAlE,EAA0E;AAC/E;;AAEA,YAAI,KAAKe,qBAAL,IAA8B,IAAlC,EAAwC;AACtC;;;;AAIA,eAAKA,qBAAL,GAA6B,aAA7B;AACA,eAAKyG,4BAAL;AACD;;AAED;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAK1H,4BAAzB,EAAuD0H,GAAvD,EAA4D;;AAE1D,cAAIA,KAAK,KAAKrM,oBAAL,CAA0B4E,MAAnC,EAA2C;AACzC;;;;;AAKA;AACA,gBAAIG,SAAS,EAAb;;AAEA;AACAA,mBAAOC,MAAP,GAAgBqH,IAAI,CAApB;;AAEA;;;;AAIAtH,mBAAOE,KAAP,GAAe,KAAK7F,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKvC,cAAL,CAAoBgG,SAA1D,CAAf;;AAEA;AACA,iBAAKlF,oBAAL,CAA0BoF,IAA1B,CAA+BL,MAA/B;;AAEA;AACA,gBAAID,aAAa,EAAjB;;AAEA,gBAAI,KAAKa,qBAAL,IAA8B,OAAlC,EAA2C;AACzC;;AAEA;AACA,kBAAIJ,YAAY,EAAhB;AACAA,wBAAUC,IAAV,GAAiB,KAAKG,qBAAtB;AACAJ,wBAAU5E,MAAV,GAAmB,EAAnB;AACA4E,wBAAU5E,MAAV,CAAiBiF,MAAjB,GAA0B,EAA1B;;AAEA,kBAAI,KAAKH,kBAAL,IAA2B,IAA/B,EAAqC;AACnC;AACAF,0BAAU5E,MAAV,CAAiBpB,MAAjB,GAA0B,KAAKkG,kBAA/B;AACD;;AAED,kBAAI,KAAKC,uBAAL,IAAgC,IAApC,EAA0C;AACxC;AACAH,0BAAU5E,MAAV,CAAiBgC,WAAjB,GAA+B,KAAK+C,uBAApC;AACD;;AAEDZ,yBAAWO,QAAX,GAAsB,EAAtB;AACAP,yBAAWO,QAAX,CAAoBD,IAApB,CAAyBG,SAAzB;AACD,aArBD,MAqBO,IAAI,KAAKI,qBAAL,IAA8B,cAAlC,EAAkD;AACvD;AACA,kBAAIJ,YAAY,EAAhB;AACAA,wBAAUC,IAAV,GAAiB,KAAKG,qBAAtB;AACAJ,wBAAU5E,MAAV,GAAmB,EAAnB;AACA4E,wBAAU5E,MAAV,CAAiBkF,SAAjB,GAA6B,EAA7B;;AAEA,kBAAI,KAAKJ,kBAAL,IAA2B,IAA/B,EAAqC;AACnC;AACAF,0BAAU5E,MAAV,CAAiBpB,MAAjB,GAA0B,KAAKkG,kBAA/B;AACD;;AAED,kBAAI,KAAKC,uBAAL,IAAgC,IAApC,EAA0C;AACxC;AACAH,0BAAU5E,MAAV,CAAiBgC,WAAjB,GAA+B,KAAK+C,uBAApC;AACD;;AAEDZ,yBAAWO,QAAX,GAAsB,EAAtB;AACAP,yBAAWO,QAAX,CAAoBD,IAApB,CAAyBG,SAAzB;AACD,aAnBM,MAmBA,IAAI,KAAKI,qBAAL,IAA8B,aAAlC,EAAiD;AACtD;AACD,aAFM,MAEA,IAAI,KAAKA,qBAAL,IAA8B,QAAlC,EAA4C,CAElD;AADC;;;AAGF;AACA,iBAAKzE,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsCU,IAAtC,CAA2CN,UAA3C;;AAEA;AACAC,mBAAOD,UAAP,GAAoBA,UAApB;AACD;AACF;AACF;;AAED;AACA,WAAKX,wBAAL;AACD;;AAED;;;;;;mDAG+B;;AAE7B,UAAI,KAAKwB,qBAAL,IAA8B,IAAlC,EAAwC;;AAEtC;AACA,YAAIpG,SAAS,KAAK2B,IAAL,CAAU8C,EAAvB;;AAEA,YAAI,KAAK2B,qBAAL,IAA8B,aAAlC,EAAiD;AAC/C;AACA,eAAKzG,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,gCAApD,EAAsF,aAAtF;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,kBAApD,EAAwE,WAAxE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,eAApD,EAAqE,KAArE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,mBAApD,EAAyE,CAAzE;AACD,SAND,MAMO,IAAI,KAAKoG,qBAAL,IAA8B,OAAlC,EAA2C;AAChD;AACA,eAAKzG,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,gCAApD,EAAsF,QAAtF;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,kBAApD,EAAwE,oBAAxE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,eAApD,EAAqE,KAArE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,mBAApD,EAAyE,CAAzE;AACD,SANM,MAMA,IAAI,KAAKoG,qBAAL,IAA8B,cAAlC,EAAkD;AACvD;AACA,eAAKzG,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,gCAApD,EAAsF,QAAtF;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,kBAApD,EAAwE,oBAAxE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,eAApD,EAAqE,KAArE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,mBAApD,EAAyE,CAAzE;AACD,SANM,MAMA,IAAI,KAAKoG,qBAAL,IAA8B,QAAlC,EAA4C;AACjD;AACA,eAAKzG,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,gCAApD,EAAsF,QAAtF;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,kBAApD,EAAwE,WAAxE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,eAApD,EAAqE,KAArE;AACA,eAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,mBAApD,EAAyE,CAAzE;AACD;AACF;;AAED;;;;AAIA,WAAKgN,6BAAL;;AAEA;AACA,WAAKpI,wBAAL;AACD;;AAED;;;;;;gDAG4B;;AAE1B,WAAKuB,uBAAL,GAA+B,IAA/B;;AAEA;AACA,UAAIxE,OAAO,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC,KAAKsE,kBAArC,CAAX;;AAEA,UAAIvE,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,YAAII,aAAaJ,KAAKI,UAAtB;;AAEA,YAAIA,cAAc,IAAlB,EAAwB;AACtB,cAAIA,WAAWsD,MAAX,IAAqB,CAAzB,EAA4B;AAC1B;;;;AAIA,gBAAIwE,YAAY9H,WAAW,CAAX,CAAhB;AACA,iBAAKoE,uBAAL,GAA+B0D,UAAUpF,EAAzC;AACD;AACF;AACF;;AAED;;;;AAIA,WAAKuI,6BAAL;;AAEA;AACA,WAAKpI,wBAAL;AACD;;AAED;;;;;;qDAGiC;;AAE/B;;;;AAIA,WAAKoI,6BAAL;;AAEA;AACA,WAAKpI,wBAAL;AACD;;AAED;;;;;;;oDAIgC;;AAE9B;AACA,WAAK,IAAIkI,IAAI,CAAb,EAAgBA,IAAI,KAAKrM,oBAAL,CAA0B4E,MAA9C,EAAsDyH,GAAtD,EAA2D;;AAEzD;AACA,YAAItH,SAAS,KAAK/E,oBAAL,CAA0BqM,CAA1B,CAAb;;AAEA,YAAItH,UAAU,IAAd,EAAoB;;AAElB;AACA,cAAID,aAAaC,OAAOD,UAAxB;;AAEA,cAAIA,cAAc,IAAlB,EAAwB;;AAEtB,gBAAI,KAAKa,qBAAL,IAA8B,cAAlC,EAAkD;AAChD;;AAEA;AACAb,yBAAWO,QAAX,GAAsB,EAAtB;;AAEA;AACA,kBAAIE,YAAY,EAAhB;AACAA,wBAAUC,IAAV,GAAiB,cAAjB;AACAD,wBAAU5E,MAAV,GAAmB,EAAnB;AACA4E,wBAAU5E,MAAV,CAAiBpB,MAAjB,GAA0B,KAAKkG,kBAA/B;AACAF,wBAAU5E,MAAV,CAAiBgC,WAAjB,GAA+B,KAAK+C,uBAApC;AACAH,wBAAU5E,MAAV,CAAiBkF,SAAjB,GAA6B,EAA7B;;AAEA;AACAf,yBAAWO,QAAX,CAAoBD,IAApB,CAAyBG,SAAzB;;AAEA;;;;AAIAR,qBAAOe,QAAP,GAAkB,IAAlB;;AAEA;;;;AAIAf,qBAAOa,MAAP,GAAgB,IAAhB;AACD,aA5BD,MA4BO,IAAI,KAAKD,qBAAL,IAA8B,OAAlC,EAA2C;AAChD;;AAEA;AACAb,yBAAWO,QAAX,GAAsB,EAAtB;;AAEA;AACA,kBAAIE,YAAY,EAAhB;AACAA,wBAAUC,IAAV,GAAiB,OAAjB;AACAD,wBAAU5E,MAAV,GAAmB,EAAnB;AACA4E,wBAAU5E,MAAV,CAAiBpB,MAAjB,GAA0B,KAAKkG,kBAA/B;AACAF,wBAAU5E,MAAV,CAAiBgC,WAAjB,GAA+B,KAAK+C,uBAApC;AACAH,wBAAU5E,MAAV,CAAiBiF,MAAjB,GAA0B,EAA1B;;AAEA;;AAEA;AACAd,yBAAWO,QAAX,CAAoBD,IAApB,CAAyBG,SAAzB;;AAEA;;;;AAIAR,qBAAOe,QAAP,GAAkB,IAAlB;;AAEA;AACAf,qBAAOa,MAAP,GAAgBL,UAAU5E,MAAV,CAAiBiF,MAAjC;AACD,aA3BM,MA2BA,IAAI,KAAKD,qBAAL,IAA8B,aAAlC,EAAiD;AACtD;;AAEA;;;;AAIA,qBAAOb,WAAW,UAAX,CAAP;;AAEA;AACA,mBAAKW,kBAAL,GAA0B,IAA1B;AACA,mBAAKC,uBAAL,GAA+B,IAA/B;;AAEA;;;;AAIAX,qBAAOe,QAAP,GAAkB,IAAlB;AACAf,qBAAOa,MAAP,GAAgB,IAAhB;AACD,aAnBM,MAmBA,IAAI,KAAKD,qBAAL,IAA8B,QAAlC,EAA4C;AACjD;;AAEA;;;;AAIA,qBAAOb,WAAW,UAAX,CAAP;;AAEA;AACA,mBAAKW,kBAAL,GAA0B,IAA1B;AACA,mBAAKC,uBAAL,GAA+B,IAA/B;;AAEA;;;;AAIAX,qBAAOe,QAAP,GAAkB,IAAlB;AACAf,qBAAOa,MAAP,GAAgB,IAAhB;AACD;AACF;AACF;AACF;;AAED,UAAI,KAAKD,qBAAL,IAA8B,cAAlC,EAAkD;AAChD;;;;AAIA,aAAK6G,iCAAL;AACD;AACF;;AAED;;;;;;;wDAIoC;;AAElC;AACA,UAAIjN,SAAS,KAAKkG,kBAAlB;AACA,UAAI9C,cAAc,KAAK+C,uBAAvB;;AAEA;AACA,UAAI0D,YAAY,KAAKlK,cAAL,CAAoB2K,kCAApB,CAAuDtK,MAAvD,EAA+DoD,WAA/D,CAAhB;;AAEA,UAAIyG,aAAa,IAAjB,EAAuB;AACrB,YAAIA,UAAUC,IAAV,IAAkB,gBAAtB,EAAwC;AACtC;;AAEA;AACA,cAAItD,UAAUqD,UAAUrD,OAAxB;;AAEA,cAAIA,WAAW,IAAf,EAAqB;;AAEnB;AACA,iBAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAIS,QAAQnB,MAA5B,EAAoCU,GAApC,EAAyC;AACvC,kBAAImH,SAAS1G,QAAQT,CAAR,CAAb;;AAEA,kBAAImH,UAAU,IAAd,EAAoB;;AAElB;AACA,oBAAIzI,KAAKyI,OAAOzI,EAAhB;AACA,oBAAIxD,OAAOiM,OAAOjM,IAAlB;AACA,oBAAIkM,WAAWD,OAAOC,QAAtB;AACA,oBAAIC,YAAYF,OAAOE,SAAvB;;AAEA;AACA,oBAAI5H,SAAS,KAAK/E,oBAAL,CAA0BsF,CAA1B,CAAb;;AAEA,oBAAIP,UAAU,IAAd,EAAoB;AAClB;AACAA,yBAAOe,QAAP,GAAkB9B,EAAlB;;AAEA;AACAe,yBAAOgB,OAAP,GAAiB,KAAK3G,WAAL,CAAiBqC,oBAAjB,CAAsCsE,OAAtC,CAAjB;;AAEA;AACA,sBAAIjB,aAAaC,OAAOD,UAAxB;;AAEA,sBAAIA,cAAc,IAAlB,EAAwB;;AAEtB;;;;AAIA,wBAAIS,YAAYT,WAAWO,QAAX,CAAoB,CAApB,CAAhB;;AAEA,wBAAIE,aAAa,IAAjB,EAAuB;;AAErB;AACA,0BAAI5E,SAAS4E,UAAU5E,MAAvB;;AAEA,0BAAIA,UAAU,IAAd,EAAoB;;AAElB;AACAA,+BAAOpB,MAAP,GAAgBA,MAAhB;AACAoB,+BAAOgC,WAAP,GAAqBA,WAArB;;AAEA,4BAAI,KAAKgD,qBAAL,IAA8B,cAAlC,EAAkD;AAChD;AACAhF,iCAAOkF,SAAP,GAAmB,EAAnB;AACAlF,iCAAOkF,SAAP,CAAiBT,IAAjB,CAAsBpB,EAAtB;AACD;AACF;AACF;AACF;AACF;AACF;AACF;AACF;AACF;AACF;AACF;;AAED;;;;;;;;4CAKwBe,M,EAAQsB,I,EAAM;;AAEpC;AACA,UAAIuG,eAAe,KAAKtO,OAAL,CAAa,SAAb,EAAwB,KAAKA,OAAL,CAAa,SAAb,EAAwByG,OAAOE,KAA/B,CAAxB,EAA+D,OAA/D,CAAnB;;AAEA;AACAF,aAAOI,wBAAP,GAAkC,EAAlC;AACA,UAAIA,2BAA2BJ,OAAOI,wBAAtC;;AAEA;AACAJ,aAAOkB,eAAP,GAAyB,EAAzB;;AAEA;AACA,UAAI4G,wBAAwB,IAA5B;;AAEA;AACA,UAAIC,cAAc,IAAlB;;AAEA;;;;AAIA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,aAAahI,MAAjC,EAAyCmI,GAAzC,EAA8C;AAC5C,YAAIC,cAAcJ,aAAaG,CAAb,CAAlB;;AAEA,YAAIC,eAAe,IAAf,IAAuBA,YAAY1G,OAAvC,EAAgD;AAC9C;;AAEA,cAAIuG,yBAAyB,IAA7B,EAAmC;AACjC;AACA,gBAAII,sBAAsB,KAAK/N,cAAL,CAAoBiC,WAApB,CAAgC0L,qBAAhC,CAA1B;;AAEA,gBAAII,uBAAuB,IAA3B,EAAiC;;AAE/B;AACA,kBAAIxI,kBAAkBwI,oBAAoBxI,eAA1C;;AAEA,kBAAIA,mBAAmB,IAAvB,EAA6B;;AAE3B,oBAAIA,gBAAgBC,WAAhB,IAA+B,IAAnC,EAAyC;;AAEvC;AACAD,kCAAgBC,WAAhB,GAA8B,EAA9B;;AAEA;AACA,sBAAII,aAAa,EAAjB;AACAA,6BAAWqB,EAAX,GAAgB6G,YAAYE,IAA5B;;AAEA;AACAzI,kCAAgBC,WAAhB,CAA4BU,IAA5B,CAAiCN,UAAjC;AACD;AACF;AACF;AACF;;AAED;AACAK,mCAAyBC,IAAzB,CAA8B4H,WAA9B;;AAEA;AACAjI,iBAAOkB,eAAP,CAAuBb,IAAvB,CAA4B4H,YAAYE,IAAxC;;AAEA;AACAL,kCAAwBG,YAAYE,IAApC;AACD;;AAED;AACA,YAAIC,sBAAsBP,aAAaG,IAAI,CAAjB,CAA1B;;AAEA,YAAII,uBAAuB,IAA3B,EAAiC;AAC/B,cAAIA,oBAAoBD,IAApB,IAA4B7G,KAAK6G,IAArC,EAA2C;AACzC;;;;;AAKAJ,0BAAcE,YAAYE,IAA1B;AACD;AACF;AACF;;AAED,UAAI,KAAKxG,4BAAL,IAAqC,IAAzC,EAA+C;AAC7C;;;;;AAKA;;;;AAIA,YAAIxF,OAAO,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC0L,qBAAhC,CAAX;;AAEA,YAAI3L,QAAQ,IAAZ,EAAkB;AAChB,cAAIuD,kBAAkBvD,KAAKuD,eAA3B;;AAEA,cAAIA,mBAAmB,IAAvB,EAA6B;AAC3B,gBAAIA,gBAAgBC,WAAhB,IAA+B,IAAnC,EAAyC;;AAEvC;AACAD,8BAAgBC,WAAhB,GAA8B,EAA9B;;AAEA;AACA,kBAAII,aAAa,EAAjB;AACAA,yBAAWqB,EAAX,GAAgB,KAAKO,4BAArB;;AAEA;AACAjC,8BAAgBC,WAAhB,CAA4BU,IAA5B,CAAiCN,UAAjC;AACD;AACF;AACF;AACF;;AAED;AACA,UAAIsI,eAAerI,OAAOC,MAA1B;;AAEA;AACA,UAAIzF,SAAS8G,KAAK6G,IAAlB;;AAEA;AACA,UAAIpI,aAAa,KAAK5D,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsC0I,eAAe,CAArD,CAAjB;;AAEA,UAAIC,cAAc,IAAlB;;AAEA;;;;AAIA,UAAIvI,cAAc,IAAlB,EAAwB;;AAEtB,YAAIK,yBAAyBP,MAAzB,IAAmC,CAAvC,EAA0C;AACxC;AACAE,qBAAWqB,EAAX,GAAgB,IAAhB;AACD,SAHD,MAGO;AACL;AACA,cAAImH,mBAAmBnI,yBAAyB,CAAzB,CAAvB;;AAEA,cAAImI,oBAAoB,IAAxB,EAA8B;AAC5B;AACAD,0BAAcC,iBAAiBJ,IAA/B;AACApI,uBAAWqB,EAAX,GAAgBkH,WAAhB;AACD;AACF;AACF;;AAED;AACA,UAAInM,OAAO,KAAKhC,cAAL,CAAoBiC,WAApB,CAAgC5B,MAAhC,CAAX;;AAEA,UAAI2B,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,aAAKhC,cAAL,CAAoBqO,oCAApB,CAAyDhO,MAAzD;;AAEA,YAAI8G,KAAKC,OAAT,EAAkB;AAChB;;AAEA;;;;AAIA,cAAIkH,aAAa,KAAKjO,MAAtB;AACA,cAAIkO,WAAWJ,WAAf;;AAEA;AACA,eAAKnO,cAAL,CAAoBwO,6BAApB,CAAkDnO,MAAlD,EAA0DiO,UAA1D,EAAsEC,QAAtE;AACD,SAZD,MAYO;AACL;;;;AAIA,eAAKvO,cAAL,CAAoByO,aAApB,CAAkCpO,MAAlC,EAA0CuN,WAA1C;AACD;AACF;;AAED;;;;AAIA,WAAK,IAAI1G,IAAI,CAAb,EAAgBA,IAAIjB,yBAAyBP,MAA7C,EAAqDwB,GAArD,EAA0D;;AAExD;AACA,YAAIC,OAAOlB,yBAAyBiB,CAAzB,CAAX;AACA,YAAIwH,aAAavH,KAAK6G,IAAtB;;AAEA;AACA,aAAKhO,cAAL,CAAoBqO,oCAApB,CAAyDK,UAAzD;;AAEA;;;;AAIA,YAAIJ,aAAa,KAAKjO,MAAtB;AACA,YAAIkO,WAAWJ,WAAf;;AAEA;AACA,aAAKnO,cAAL,CAAoBwO,6BAApB,CAAkDE,UAAlD,EAA8DJ,UAA9D,EAA0EC,QAA1E;AACD;;AAED;;;;;;AAMA,WAAKvO,cAAL,CAAoB2O,oBAApB;;AAEA;AACA,WAAK1J,wBAAL;AACD;;AAED;;;;;;;6CAIyBY,M,EAAQ;;AAE/B,UAAIA,UAAU,IAAd,EAAoB;;AAElB;AACA,YAAID,aAAaC,OAAOD,UAAxB;;AAEA,YAAIA,cAAc,IAAlB,EAAwB;;AAEtB;AACA,cAAIc,SAASb,OAAOa,MAApB;;AAEA,cAAIA,UAAU,IAAd,EAAoB;;AAElB;AACA,gBAAIP,WAAWP,WAAWO,QAA1B;;AAEA,gBAAIA,YAAY,IAAhB,EAAsB;;AAEpB;AACA,kBAAIE,YAAYF,SAAS,CAAT,CAAhB;;AAEA,kBAAIE,aAAa,IAAjB,EAAuB;;AAErB;AACA,oBAAI5E,SAAS4E,UAAU5E,MAAvB;;AAEA,oBAAIA,UAAU,IAAd,EAAoB;;AAElB;AACAA,yBAAOiF,MAAP,GAAgBA,MAAhB;AACD;AACF;AACF;AACF;AACF;AACF;;AAED;AACA,WAAKzB,wBAAL;AACD;;AAED;;;;;;0DAGsC;;AAEpC;AACA,UAAIuC,+BAA+B,KAAKA,4BAAxC;;AAEA,UAAIoH,WAAW,KAAK9N,oBAApB;;AAEA;AACA,WAAK,IAAIqM,IAAI,CAAb,EAAgBA,IAAIyB,SAASlJ,MAA7B,EAAqCyH,GAArC,EAA0C;AACxC,YAAItH,SAAS+I,SAASzB,CAAT,CAAb;;AAEA,YAAItH,UAAU,IAAd,EAAoB;;AAElB;AACA,cAAIkB,kBAAkBlB,OAAOkB,eAA7B;;AAEA,cAAIA,mBAAmB,IAAnB,IAA2BA,gBAAgBrB,MAAhB,GAAyB,CAAxD,EAA2D;;AAEzD;AACA,gBAAImJ,yBAAyB9H,gBAAgBA,gBAAgBrB,MAAhB,GAAyB,CAAzC,CAA7B;;AAEA,gBAAImJ,0BAA0B,IAA9B,EAAoC;;AAElC;AACA,kBAAIC,uBAAuB,KAAK9O,cAAL,CAAoBiC,WAApB,CAAgC4M,sBAAhC,CAA3B;;AAEA,kBAAIC,wBAAwB,IAA5B,EAAkC;;AAEhC;AACA,oBAAIvJ,kBAAkBuJ,qBAAqBvJ,eAA3C;;AAEA,oBAAIA,mBAAmB,IAAvB,EAA6B;;AAE3B,sBAAIA,gBAAgBC,WAAhB,IAA+B,IAAnC,EAAyC;;AAEvC;AACAD,oCAAgBC,WAAhB,GAA8B,EAA9B;;AAEA;AACA,wBAAII,aAAa,EAAjB;AACAA,+BAAWqB,EAAX,GAAgBO,4BAAhB;;AAEA;AACAjC,oCAAgBC,WAAhB,CAA4BU,IAA5B,CAAiCN,UAAjC;AACD;AACF;AACF;AACF;AACF;AACF;AACF;;AAED;;;;;;AAMA,WAAK5F,cAAL,CAAoB2O,oBAApB;;AAEA;AACA,WAAK1J,wBAAL;AACD;;AAED;;;;;;gDAG4B;;AAE1B;AACA,UAAI8J,UAAU,KAAK5O,UAAL,CAAgB,oCAAhB,CAAd;AACA,UAAI4J,SAASvB,QAAQuG,OAAR,CAAb;;AAEA,UAAIhF,MAAJ,EAAY;AACV;AACA,aAAKgD,YAAL;AACD;AACF;;AAED;;;;;;mCAGe;;AAEb;AACA,WAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKlM,oBAAL,CAA0B4E,MAAhD,EAAwDsH,IAAxD,EAA8D;;AAE5D;AACA,YAAIgC,aAAa,KAAKlO,oBAAL,CAA0BkM,EAA1B,CAAjB;AACA,aAAKC,gBAAL,CAAsB+B,UAAtB;;AAEA;;;;AAIAhC;AACD;;AAED;AACA,UAAI3M,SAAS,KAAK2B,IAAL,CAAU8C,EAAvB;;AAEA;AACA,UAAI8I,cAAc,KAAK5N,cAAL,CAAoBiP,cAApB,CAAmC5O,MAAnC,CAAlB;;AAEA;;;;;AAKA,WAAKL,cAAL,CAAoByO,aAApB,CAAkCpO,MAAlC,EAA0CuN,WAA1C;;AAEA;AACA,WAAK5N,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,gCAApD,EAAsF,IAAtF;AACA,WAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,kBAApD,EAAwE,IAAxE;AACA,WAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,eAApD,EAAqE,IAArE;AACA,WAAKL,cAAL,CAAoBoN,uBAApB,CAA4C/M,MAA5C,EAAoD,mBAApD,EAAyE,IAAzE;;AAEA;AACA,WAAKoF,4BAAL,GAAoC,CAApC;AACA,WAAKgB,qBAAL,GAA6B,IAA7B;AACA,WAAKF,kBAAL,GAA0B,IAA1B;AACA,WAAKC,uBAAL,GAA+B,IAA/B;AACA,WAAKgB,4BAAL,GAAoC,IAApC;;AAEA;;;;;;AAMA;AACA,UAAI3B,SAAS,EAAb;;AAEA;AACAA,aAAOC,MAAP,GAAgB,CAAhB;;AAEA;;;;AAIAD,aAAOE,KAAP,GAAe,KAAK7F,WAAL,CAAiBqC,oBAAjB,CAAsC,KAAKvC,cAAL,CAAoBgG,SAA1D,CAAf;;AAEA;AACAH,aAAOI,wBAAP,GAAkC,EAAlC;;AAEA,UAAIL,aAAa,IAAjB;;AAEA;AACA,UAAIJ,cAAc,KAAKxF,cAAL,CAAoBuH,0BAApB,CAA+ClH,MAA/C,CAAlB;;AAEA,UAAImF,eAAe,IAAf,IAAuBA,YAAYE,MAAZ,GAAqB,CAAhD,EAAmD;AACjDE,qBAAaJ,YAAY,CAAZ,CAAb;AACD;;AAED;AACAK,aAAOD,UAAP,GAAoBA,UAApB;;AAEA;AACA,WAAK9E,oBAAL,CAA0BoF,IAA1B,CAA+BL,MAA/B;;AAEA;;;;;;AAMA,WAAK7F,cAAL,CAAoB2O,oBAApB;;AAEA;AACA,WAAK1J,wBAAL;AACD;;AAED;;;;;;;;;;qCAOiBY,M,EAAQ;;AAEvB,UAAIA,UAAU,IAAd,EAAoB;;AAElB;AACA,YAAII,2BAA2BJ,OAAOI,wBAAtC;;AAEA,YAAIA,4BAA4B,IAAhC,EAAsC;;AAEpC;AACA,eAAK,IAAI4H,IAAI,CAAb,EAAgBA,IAAI5H,yBAAyBP,MAA7C,EAAqDmI,GAArD,EAA0D;;AAExD;AACA,gBAAIqB,cAAcjJ,yBAAyB4H,CAAzB,CAAlB;;AAEA,gBAAIqB,eAAe,IAAnB,EAAyB;;AAEvB;AACA,kBAAI7O,SAAS6O,YAAYlB,IAAzB;;AAEA;AACA,mBAAKhO,cAAL,CAAoBqO,oCAApB,CAAyDhO,MAAzD;;AAEA;;;;;AAKA,kBAAIuN,cAAc,KAAK5N,cAAL,CAAoBiP,cAApB,CAAmC5O,MAAnC,CAAlB;AACA,mBAAKL,cAAL,CAAoByO,aAApB,CAAkCpO,MAAlC,EAA0CuN,WAA1C;AACD;AACF;AACF;;AAED;AACA,YAAIuB,kBAAkB,KAAKrO,oBAAL,CAA0BwI,OAA1B,CAAkCzD,MAAlC,CAAtB;;AAEA;AACA,aAAK/E,oBAAL,CAA0ByI,MAA1B,CAAiC4F,eAAjC,EAAkD,CAAlD;;AAEA;AACA,aAAKnN,IAAL,CAAUuD,eAAV,CAA0BC,WAA1B,CAAsC+D,MAAtC,CAA6C4F,eAA7C,EAA8D,CAA9D;AACD;AACF;;AAED;;;;;;kDAG8B;;AAE5B;AACA,UAAIC,OAAO,KAAKjM,oBAAhB;;AAEA;;;;;;;AAOAiM,aAAO,KAAKvP,aAAL,CAAmBwP,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,aAAO,KAAKlP,WAAL,CAAiBoP,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,WAAKpN,IAAL,CAAUqB,MAAV,GAAmB+L,IAAnB;;AAEA;AACA,WAAKnK,wBAAL;AACD;;AAED;;;;;;6CAGyB;AACvB,WAAKhE,2BAAL,GAAmC,IAAnC;AACD;;AAED;;;;;;;6CAIyB;AACvB,WAAKA,2BAAL,GAAmC,KAAnC;AACD;;AAED;;;;;;;gDAI4B;AAC1B,WAAKsO,mBAAL,GAA2B,IAA3B;AACD;;AAED;;;;;;iDAG6B;AAC3B,WAAKA,mBAAL,GAA2B,KAA3B;AACD;;AAED;;;;;;6CAGyB;AACvB,WAAKC,gBAAL,GAAwB,IAAxB;AACD;;AAED;;;;;;8CAG0B;AACxB,WAAKA,gBAAL,GAAwB,KAAxB;AACD;;AAED;;;;;;8CAG0B;AACxB,WAAKC,iBAAL,GAAyB,IAAzB;AACD;;AAED;;;;;;+CAG2B;AACzB,WAAKA,iBAAL,GAAyB,KAAzB;AACD;;AAED;;;;;;8CAG0B;AACxB,WAAKC,iBAAL,GAAyB,IAAzB;AACD;;AAED;;;;;;+CAG2B;AACzB,WAAKA,iBAAL,GAAyB,KAAzB;AACD;;AAED;;;;;;gDAG4B;AAC1B,WAAKC,mBAAL,GAA2B,IAA3B;AACD;;AAED;;;;;;iDAG6B;AAC3B,WAAKA,mBAAL,GAA2B,KAA3B;AACD;;AAED;;;;;;;8CAI0B;;AAExB,UAAIC,qBAAqB,EAAzB;;AAEA,UAAI,KAAKxN,UAAL,IAAmB,IAAvB,EAA6B;;AAE3B;AACA,aAAK,IAAIgE,IAAI,CAAb,EAAgBA,IAAI,KAAKhE,UAAL,CAAgBsD,MAApC,EAA4CU,GAA5C,EAAiD;AAC/C,cAAI8D,YAAY,KAAK9H,UAAL,CAAgBgE,CAAhB,CAAhB;;AAEA,cAAI8D,aAAa,IAAb,IAAqBA,UAAUpF,EAAV,IAAgB,IAAzC,EAA+C;;AAE7C;AACA,gBAAIsC,UAAU,KAAKlG,mBAAL,CAAyBgJ,UAAUpF,EAAnC,CAAd;;AAEA,gBAAIsC,OAAJ,EAAa;AACX;AACAwI,iCAAmB1J,IAAnB,CAAwBgE,UAAUpF,EAAlC;AACD;AACF;AACF;AACF;;AAED,aAAO8K,kBAAP;AACD;;AAED;;;;;;+CAG2B;AACzB;;;;AAIA,WAAK1O,mBAAL,GAA2B,EAA3B;AACD;;AAED;;;;;;;;;;;;wDASoC2O,Y,EAAc;;AAEhD,UAAID,qBAAqB,EAAzB;;AAEA,UAAI,KAAKxN,UAAL,IAAmB,IAAvB,EAA6B;;AAE3B;AACA,aAAK,IAAIgE,IAAI,CAAb,EAAgBA,IAAI,KAAKhE,UAAL,CAAgBsD,MAApC,EAA4CU,GAA5C,EAAiD;AAC/C,cAAI8D,YAAY,KAAK9H,UAAL,CAAgBgE,CAAhB,CAAhB;;AAEA,cAAI8D,aAAa,IAAb,IAAqBA,UAAUpF,EAAV,IAAgB,IAAzC,EAA+C;;AAE7C;AACA,gBAAIsC,UAAU,KAAKlG,mBAAL,CAAyBgJ,UAAUpF,EAAnC,CAAd;;AAEA,gBAAIsC,OAAJ,EAAa;;AAEX;AACA,kBAAI0I,yBAA0B1J,IAAI,CAAL,GAAU,IAAV,GAAiB8D,UAAUC,IAAxD;;AAEA;AACAyF,iCAAmB1J,IAAnB,CAAwB4J,sBAAxB;AACD;AACF;AACF;AACF;;AAED,aAAOF,kBAAP;AACD;;AAED;;;;;;0CAGsB;AAAA;;AAEpB;AACA,WAAKG,sBAAL,GAA8B,EAA9B;AACA,WAAKC,kBAAL,GAA0B,EAA1B;AACA,WAAKC,iBAAL,GAAyB,IAAzB;AACA,WAAKC,sBAAL,GAA8B,IAA9B;AACA,WAAKC,eAAL,GAAuB,IAAvB;AACA,WAAKC,aAAL,GAAqB,IAArB;;AAEA;AACA,WAAK5G,8BAAL,CAAoC,QAApC;;AAEA,UAAI,KAAK2C,cAAT,EAAyB;;AAEvB;AACA,aAAKkE,yBAAL;;AAEA,YAAI,KAAKC,cAAL,IAAuB,IAA3B,EAAiC;AAC/B;AACA,eAAKA,cAAL,GAAsB,KAAKzQ,aAAL,CAAmB0Q,qBAAnB,EAAtB;AACD;;AAED,YAAI,KAAKC,mBAAL,IAA4B,IAAhC,EAAsC;AACpC;AACA,eAAK3Q,aAAL,CAAmB4Q,kBAAnB,GAAwCC,IAAxC,CAA6C,UAACF,mBAAD,EAAyB;AACpE,mBAAKA,mBAAL,GAA2BA,mBAA3B;AACD,WAFD;AAGD;AACF;AACF;;AAED;;;;;;wCAGoB;;AAElB;AACA,WAAKhH,8BAAL,CAAoC,MAApC;;AAEA;AACA,WAAKmH,uBAAL;;AAEA;AACA,WAAKC,uBAAL;;AAEA;AACA,WAAKjH,yBAAL;;AAEA;AACA,WAAKC,sBAAL;AACD;;AAED;;;;;;wCAGoB;;AAElB;AACA,WAAKJ,8BAAL,CAAoC,MAApC;;AAEA;AACA,WAAKqH,uBAAL;;AAEA;AACA,WAAKlH,yBAAL;;AAEA;AACA,WAAKC,sBAAL;AACD;;AAED;;;;;;0CAGsB;AAAA;;AAEpB;AACA,WAAKzK,aAAL,CAAmB,KAAnB;;AAEA;;;;AAIA,WAAKyK,sBAAL;;AAEA;;;;;AAKA,WAAKhK,QAAL,CAAc,YAAM;AAClB,YAAIkR,iBAAiB,EAArB;;AAEA;AACA,YAAIC,mCAAmC,OAAKC,mCAAL,EAAvC;;AAEA,YAAID,iCAAiCrL,MAAjC,IAA2C,CAA/C,EAAkD;AAChD;AACAoL,2BAAiB,mDAAjB;AACD,SAHD,MAGO,IAAIC,iCAAiCrL,MAAjC,GAA0C,CAA9C,EAAiD;AACtD;AACAoL,2BAAiB,qDAAjB;AACD;;AAED;AACA,aAAK,IAAI1K,IAAI,CAAb,EAAgBA,IAAI2K,iCAAiCrL,MAArD,EAA6DU,GAA7D,EAAkE;;AAEhE;AACA,cAAI6K,iCAAiCF,iCAAiC3K,CAAjC,CAArC;;AAEA;AACA0K,4BAAkB,OAAOG,8BAAzB;AACD;;AAED;AACA,YAAIlH,SAASvB,QAAQsI,cAAR,CAAb;;AAEA,YAAI/G,MAAJ,EAAY;AACV;;AAEA;AACA,cAAI6F,qBAAqB,OAAKsB,uBAAL,EAAzB;;AAEA;AACA,cAAIhM,OAAO,EAAX;AACAA,eAAKiM,iBAAL,GAAyB,OAAKC,+BAAL,CAAqCxB,kBAArC,CAAzB;;AAEA;;;;AAIA,eAAK,IAAIxJ,IAAI,CAAb,EAAgBA,IAAIwJ,mBAAmBlK,MAAvC,EAA+CU,GAA/C,EAAoD;;AAElD;AACA,gBAAI3C,cAAcmM,mBAAmBxJ,CAAnB,CAAlB;;AAEA;AACA,mBAAKpG,cAAL,CAAoBgK,eAApB,CAAoC,OAAK3J,MAAzC,EAAiDoD,WAAjD;AACD;;AAED;AACA,iBAAK6B,SAAL,CAAe,kBAAf,EAAmC,WAAnC,EAAgDJ,IAAhD;;AAEA;AACA,iBAAK+E,4CAAL;;AAEA;AACA,iBAAKjK,cAAL,CAAoB0I,WAApB;AACD,SA/BD,MA+BO;AACL;;AAEA;AACA,iBAAK2I,wBAAL;AACD;;AAED;;;;;;AAMA,eAAKzR,QAAL,CAAc,YAAM;AAClB;AACA,iBAAK0R,0BAAL;;AAEA;AACA,iBAAKD,wBAAL;;AAEA;AACA,iBAAKE,sBAAL;AACD,SATD,EASG,IATH;AAUD,OAjFD;AAkFD;;AAED;;;;;;0CAGsB;;AAEpB;AACA,WAAK/H,8BAAL;;AAEA;AACA,WAAKmH,uBAAL;;AAEA;AACA,WAAKjH,wBAAL;;AAEA;AACA,WAAK4H,0BAAL;;AAEA;AACA,WAAKD,wBAAL;;AAEA;AACA,WAAKE,sBAAL;AACD;;AAED;;;;;;mEAG+C;;AAE7C,UAAI,KAAKvR,cAAL,CAAoB+E,gCAApB,CAAqD,KAAK1E,MAA1D,CAAJ,EAAuE;AACrE;;;;AAID,OALD,MAKO;AACL;;;;;AAKA,YAAI,KAAKL,cAAL,CAAoBwR,wBAApB,CAA6C,KAAKnR,MAAlD,CAAJ,EAA+D;AAC7D;;;;AAIA,eAAK2B,IAAL,CAAU4C,cAAV,GAA2B,IAA3B;AACA,eAAK5C,IAAL,CAAU2C,gBAAV,GAA6B,KAA7B;;AAEA;AACA,eAAK8M,2BAAL;AACD,SAVD,MAUO;AACL;;;;AAIA,eAAKzP,IAAL,CAAU4C,cAAV,GAA2B,KAA3B;AACA,eAAK5C,IAAL,CAAU2C,gBAAV,GAA6B,KAA7B;AACD;AACF;AACF;;AAED;;;;;;6CAGyB;AAAA;;AAEvB,UAAI+M,gBAAgB,EAApB;;AAEA,UAAI,KAAKlC,gBAAT,EAA2B;AACzB;AACA,YAAImC,eAAe,KAAK3R,cAAL,CAAoB4R,eAApB,CAAoC,KAAKvR,MAAzC,EAAiD,KAAKG,iBAAtD,EAAyE,IAAzE,CAAnB;;AAEA,YAAI0E,OAAO,EAAX;AACAA,aAAK2M,WAAL,GAAmBF,aAAa7M,EAAhC;AACAI,aAAKrD,aAAL,GAAqB8P,aAAaxH,IAAlC;;AAEA;AACA,aAAK7E,SAAL,CAAe,kBAAf,EAAmC,WAAnC,EAAgDJ,IAAhD;;AAEAwM,sBAAcxL,IAAd,CAAmByL,YAAnB;;AAEA;AACA,aAAKhB,uBAAL;;AAEA;AACA,aAAK3Q,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,aAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD,OAxBD,MAwBO,IAAI,KAAKjC,iBAAT,EAA4B;;AAEjC;AACA,YAAIsC,uBAAuB,KAAKb,uBAAL,EAA3B;;AAEA;AACA,YAAIhM,QAAO,EAAX;AACAA,cAAK8M,eAAL,GAAuB,KAAKZ,+BAAL,CAAqCW,oBAArC,CAAvB;;AAEA;AACAL,wBAAgB,KAAK1R,cAAL,CAAoBiS,aAApB,CAAkC,KAAK5R,MAAvC,EAA+C0R,oBAA/C,EAAqE,IAArE,CAAhB;;AAEA;AACA,aAAKzM,SAAL,CAAe,gBAAf,EAAiC,WAAjC,EAA8CJ,KAA9C;;AAEA;AACA,aAAKwE,wBAAL;;AAEA;AACA,aAAK1J,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,aAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD,OA1BM,MA0BA,IAAI,KAAKhC,iBAAT,EAA4B;;AAEjC;AACA,YAAIqC,wBAAuB,KAAKb,uBAAL,EAA3B;;AAEA;AACA,YAAIhM,SAAO,EAAX;AACA,YAAIgN,mBAAmB,KAAKd,+BAAL,CAAqCW,qBAArC,CAAvB;;AAEA;AACAL,wBAAgB,KAAK1R,cAAL,CAAoBmS,sBAApB,CAA2C,KAAK9R,MAAhD,EAAwD0R,qBAAxD,EAA8E,IAA9E,CAAhB;;AAEA;AACA,aAAK,IAAI3L,IAAI,CAAb,EAAgBA,IAAI8L,iBAAiBxM,MAArC,EAA6CU,GAA7C,EAAkD;AAChD,cAAIgM,kBAAkBF,iBAAiB9L,CAAjB,CAAtB;AACA,cAAIuL,gBAAeD,cAActL,CAAd,CAAnB;;AAEAgM,0BAAgBC,eAAhB,GAAkCD,gBAAgB3O,WAAlD;AACA2O,0BAAgBE,aAAhB,GAAgCX,cAAa7M,EAA7C;AACA,iBAAOsN,gBAAgB3O,WAAvB;AACD;;AAEDyB,eAAKgN,gBAAL,GAAwBA,gBAAxB;;AAEA;AACA,aAAK5M,SAAL,CAAe,iBAAf,EAAkC,WAAlC,EAA+CJ,MAA/C;;AAEA;AACA,aAAKqN,wBAAL;;AAEA;AACA,aAAKvS,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,aAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD,OAtCM,MAsCA,IAAI,KAAK/B,mBAAT,EAA8B;;AAEnC;AACA,aAAK6C,gBAAL,CAAsB,KAAKnS,MAA3B,EAAmCqQ,IAAnC,CAAwC,UAACgB,aAAD,EAAmB;;AAEzD;AACA,iBAAKe,0BAAL;;AAEA;AACA,iBAAKzS,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,iBAAKoJ,mDAAL,CAAyDJ,aAAzD;;AAEA;;;;AAIA,iBAAK3R,mBAAL,CAAyB2S,qBAAzB;AACD,SAnBD;AAoBD;AACF;;AAED;;;;;;;yCAIqBjP,W,EAAa;AAAA;;AAEhC,UAAIiO,gBAAgB,EAApB;;AAEA,UAAI,KAAKlC,gBAAT,EAA2B;AACzB;AACA,YAAImC,eAAe,KAAK3R,cAAL,CAAoB4R,eAApB,CAAoC,KAAKvR,MAAzC,EAAiD,KAAKG,iBAAtD,EAAyEiD,WAAzE,CAAnB;;AAEA,YAAIyB,OAAO,EAAX;AACAA,aAAKzB,WAAL,GAAmBkO,aAAa7M,EAAhC;AACAI,aAAKrD,aAAL,GAAqB8P,aAAaxH,IAAlC;;AAEA;AACA,aAAK7E,SAAL,CAAe,kBAAf,EAAmC,WAAnC,EAAgDJ,IAAhD;;AAEAwM,sBAAcxL,IAAd,CAAmByL,YAAnB;;AAEA;AACA,aAAKhB,uBAAL;;AAEA;AACA,aAAK3Q,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,aAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD,OAxBD,MAwBO,IAAI,KAAKjC,iBAAT,EAA4B;;AAEjC;AACA,YAAIsC,uBAAuB,KAAKb,uBAAL,EAA3B;;AAEA,YAAIa,wBAAwB,IAAxB,IAAgCA,qBAAqBzI,OAArB,CAA6B7F,WAA7B,KAA6C,CAAC,CAAlF,EAAqF;AACnF;;;;;AAKA,cAAIsO,qBAAqBrM,MAArB,IAA+B,CAAnC,EAAsC;AACpC0C,kBAAM,KAAKjI,UAAL,CAAgB,oDAAhB,CAAN;AACD,WAFD,MAEO,IAAI4R,qBAAqBrM,MAArB,GAA8B,CAAlC,EAAqC;AAC1C0C,kBAAM,KAAKjI,UAAL,CAAgB,qDAAhB,CAAN;AACD;AACF,SAXD,MAWO;;AAEL;AACA,cAAI+E,SAAO,EAAX;AACAA,iBAAK8M,eAAL,GAAuB,KAAKZ,+BAAL,CAAqCW,oBAArC,CAAvB;;AAEA;AACAL,0BAAgB,KAAK1R,cAAL,CAAoBiS,aAApB,CAAkC,KAAK5R,MAAvC,EAA+C0R,oBAA/C,EAAqEtO,WAArE,CAAhB;;AAEA;AACA,eAAK6B,SAAL,CAAe,gBAAf,EAAiC,WAAjC,EAA8CJ,MAA9C;;AAEA;AACA,eAAKwE,wBAAL;;AAEA;AACA,eAAK1J,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,eAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD;AACF,OAxCM,MAwCA,IAAI,KAAKhC,iBAAT,EAA4B;;AAEjC;AACA,YAAIqC,yBAAuB,KAAKb,uBAAL,EAA3B;;AAEA;AACA,YAAIhM,SAAO,EAAX;AACA,YAAIgN,mBAAmB,KAAKd,+BAAL,CAAqCW,sBAArC,CAAvB;;AAEA;AACAL,wBAAgB,KAAK1R,cAAL,CAAoBmS,sBAApB,CAA2C,KAAK9R,MAAhD,EAAwD0R,sBAAxD,EAA8EtO,WAA9E,CAAhB;;AAEA;AACA,aAAK,IAAI2C,IAAI,CAAb,EAAgBA,IAAI8L,iBAAiBxM,MAArC,EAA6CU,GAA7C,EAAkD;AAChD,cAAIgM,kBAAkBF,iBAAiB9L,CAAjB,CAAtB;AACA,cAAIuL,iBAAeD,cAActL,CAAd,CAAnB;;AAEAgM,0BAAgBC,eAAhB,GAAkCD,gBAAgB3O,WAAlD;AACA2O,0BAAgBE,aAAhB,GAAgCX,eAAa7M,EAA7C;AACA,iBAAOsN,gBAAgB3O,WAAvB;AACD;;AAEDyB,eAAKgN,gBAAL,GAAwBA,gBAAxB;;AAEA;AACA,aAAK5M,SAAL,CAAe,iBAAf,EAAkC,WAAlC,EAA+CJ,MAA/C;;AAEA;AACA,aAAKqN,wBAAL;;AAEA;AACA,aAAKvS,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,aAAKoJ,mDAAL,CAAyDJ,aAAzD;AACD,OAtCM,MAsCA,IAAI,KAAK/B,mBAAT,EAA8B;;AAEnC;AACA+B,wBAAgB,KAAKc,gBAAL,CAAsB,KAAKnS,MAA3B,EAAmCoD,WAAnC,EAAgDiN,IAAhD,CAAqD,UAACgB,aAAD,EAAmB;AACtF;AACA,iBAAKe,0BAAL;;AAEA;AACA,iBAAKzS,cAAL,CAAoB0I,WAApB;;AAEA;;;;AAIA,iBAAKoJ,mDAAL,CAAyDJ,aAAzD;;AAEA;;;;AAIA,iBAAK3R,mBAAL,CAAyB2S,qBAAzB;AACD,SAlBe,CAAhB;AAmBD;AACF;;AAED;;;;;;;;wEAKoDhB,a,EAAe;AAAA;;AAEjE;AACA,WAAK9R,QAAL,CAAc,YAAM;AAClB,YAAI8R,iBAAiB,IAArB,EAA2B;;AAEzB;AACA,eAAK,IAAIxK,IAAI,CAAb,EAAgBA,IAAIwK,cAAchM,MAAlC,EAA0CwB,GAA1C,EAA+C;AAC7C,gBAAIyK,eAAeD,cAAcxK,CAAd,CAAnB;;AAEA,gBAAIyK,gBAAgB,IAApB,EAA0B;AAAA;;AAExB;AACA,oBAAIgB,mBAAmBzO,EAAE,MAAMyN,aAAa7M,EAArB,CAAvB;;AAEA;AACA,oBAAI8N,0BAA0BD,iBAAiBE,GAAjB,CAAqB,iBAArB,CAA9B;;AAEA;AACAF,iCAAiBE,GAAjB,CAAqB,kBAArB,EAAyC,SAAzC;;AAEA;;;;;;AAMA,uBAAKjT,QAAL,CAAc,YAAM;AAClB;AACA+S,mCAAiBE,GAAjB,CAAqB;AACnB,kCAAc,iCADK;AAEnB,wCAAoBD;AAFD,mBAArB;AAID,iBAND;AAjBwB;AAwBzB;AACF;AACF;;AAED;;;;;;AAMA,eAAKhT,QAAL,CAAc,YAAM;AAClB;AACA,iBAAK2R,sBAAL;;AAEA;AACA,iBAAKD,0BAAL;;AAEA;AACA,iBAAKhR,mBAAL,GAA2B,KAA3B;;AAEA;AACA,iBAAK+Q,wBAAL;;AAEA;;;;AAIA,iBAAKzR,QAAL,CAAc,YAAM;;AAElB,gBAAI8R,iBAAiB,IAAjB,IAAyBA,cAAchM,MAAd,GAAuB,CAApD,EAAuD;;AAErD;AACA,kBAAIiN,mBAAmBzO,EAAE,MAAMwN,cAAc,CAAd,EAAiB5M,EAAzB,CAAvB;;AAEA,kBAAI6N,oBAAoB,IAAxB,EAA8B;AAC5B;AACAzO,kBAAE,UAAF,EAAc4O,OAAd,CAAsB;AACpBC,6BAAWJ,iBAAiBK,IAAjB,CAAsB,WAAtB,IAAqC;AAD5B,iBAAtB,EAEG,IAFH;AAGD;AACF;AACF,WAdD;AAeD,SAhCD,EAgCG,IAhCH;AAiCD,OA1ED;AA2ED;;AAGD;;;;;;;wCAIoB7C,e,EAAiB;;AAEnC;AACA,WAAKD,sBAAL,GAA8B,IAA9B;;AAEA;AACA,WAAK+C,iBAAL,CAAuB9C,eAAvB;AACD;;AAED;;;;;;;6CAIyBA,e,EAAiB;AACxC,WAAKF,iBAAL,GAAyB,IAAzB;;AAEA;AACA,WAAKgD,iBAAL,CAAuB9C,eAAvB;AACD;;AAED;;;;;;;sCAIkBA,e,EAAiB;AAAA;;AAEjC,WAAKA,eAAL,GAAuBA,eAAvB;;AAEA,UAAI,KAAKA,eAAL,IAAwB,IAA5B,EAAkC;AAChC;AACA,aAAKJ,sBAAL,GAA8B,EAA9B;AACA,aAAKC,kBAAL,GAA0B,EAA1B;AACA,aAAKC,iBAAL,GAAyB,IAAzB;AACA,aAAKC,sBAAL,GAA8B,IAA9B;AACA,aAAKC,eAAL,GAAuB,IAAvB;AACA,aAAKC,aAAL,GAAqB,IAArB;AACD,OARD,MAQO;AACL;AACA,aAAKpQ,cAAL,CAAoBkT,mBAApB,CAAwC,KAAK/C,eAA7C,EAA8DO,IAA9D,CAAmE,UAACyC,WAAD,EAAiB;;AAElF;AACA,iBAAKpD,sBAAL,GAA8B,EAA9B;AACA,iBAAKK,aAAL,GAAqB+C,WAArB;;AAEA;AACA,cAAI5K,SAAS,OAAKvI,cAAL,CAAoBoT,qBAApB,CAA0C,OAAKhD,aAA/C,CAAb;AACA,iBAAKL,sBAAL,GAA8BxH,OAAOvC,SAArC;AACA,iBAAKgK,kBAAL,GAA0BzH,OAAO8K,KAAjC;AACD,SAVD;AAWD;AACF;;AAED;;;;;;oDAGgC;;AAE9B;AACA,UAAIzD,qBAAqB,KAAK0D,6BAAL,EAAzB;;AAEA,UAAI1D,sBAAsB,IAAtB,IAA8BA,mBAAmBlK,MAAnB,IAA6B,CAA/D,EAAkE;AAChE;AACA0C,cAAM,sCAAN;AACD,OAHD,MAGO;;AAEL;;;;;AAKA,aAAK+D,cAAL,GAAsB,KAAtB;AACA,aAAKxC,yBAAL;AACA,aAAKC,sBAAL;;AAEA;AACA,aAAKzK,aAAL,CAAmB,KAAnB;AACD;AACF;;AAGD;;;;;;;oDAIgC;AAC9B,UAAIyQ,qBAAqB,EAAzB;;AAEA;AACA,WAAK,IAAI1I,IAAI,CAAb,EAAgBA,IAAI,KAAK8I,kBAAL,CAAwBtK,MAA5C,EAAoDwB,GAApD,EAAyD;AACvD,YAAIC,OAAO,KAAK6I,kBAAL,CAAwB9I,CAAxB,CAAX;;AAEA,YAAIC,QAAQ,IAAR,IAAgBA,KAAKnF,IAAL,IAAa,IAA7B,IAAqCmF,KAAKnF,IAAL,CAAUI,UAAV,IAAwB,IAAjE,EAAuE;;AAErE;AACA,cAAIA,aAAa+E,KAAKnF,IAAL,CAAUI,UAA3B;;AAEA;AACA,eAAK,IAAIgE,IAAI,CAAb,EAAgBA,IAAIhE,WAAWsD,MAA/B,EAAuCU,GAAvC,EAA4C;AAC1C,gBAAI8D,YAAY9H,WAAWgE,CAAX,CAAhB;;AAEA,gBAAI8D,aAAa,IAAb,IAAqBA,UAAU9C,OAAnC,EAA4C;AAC1C;;;;AAIAwI,iCAAmB1J,IAAnB,CAAwBgE,SAAxB;AACD;AACF;AACF;AACF;;AAED,aAAO0F,kBAAP;AACD;;AAED;;;;;;;;;qCAMiBvP,M,EAAQkT,sB,EAAwB;AAAA;;AAE/C;AACA,UAAIrO,OAAO,EAAX;AACAA,WAAKsO,kBAAL,GAA0B,KAAKC,qCAAL,EAA1B;;AAEA;AACA,UAAI7D,qBAAqB,KAAK0D,6BAAL,EAAzB;;AAEA;AACA,WAAK,IAAIlN,IAAI,CAAb,EAAgBA,IAAIwJ,mBAAmBlK,MAAvC,EAA+CU,GAA/C,EAAoD;AAClD,YAAI5F,oBAAoBoP,mBAAmBxJ,CAAnB,CAAxB;;AAEA,YAAI5F,qBAAqB,IAAzB,EAA+B;AAC7B;AACA,iBAAOA,kBAAkB4G,OAAzB;AACD;AACF;;AAED;AACC,aAAO,KAAKpH,cAAL,CAAoBwS,gBAApB,CAAqC5C,kBAArC,EAAyD,KAAKO,eAA9D,EAA+E9P,MAA/E,EAAuFkT,sBAAvF,EAA+G7C,IAA/G,CAAoH,UAACgB,aAAD,EAAmB;;AAE5I;AACA,aAAK,IAAItL,IAAI,CAAb,EAAgBA,IAAIlB,KAAKsO,kBAAL,CAAwB9N,MAA5C,EAAoDU,GAApD,EAAyD;AACvD,cAAIsN,oBAAoBxO,KAAKsO,kBAAL,CAAwBpN,CAAxB,CAAxB;AACA,cAAIuL,eAAeD,cAActL,CAAd,CAAnB;AACA,cAAIuN,iBAAiBhC,aAAa7M,EAAlC;;AAEA;;;;AAIA4O,4BAAkBpB,aAAlB,GAAkCqB,cAAlC;AACD;;AAED;AACA,eAAKrO,SAAL,CAAe,mBAAf,EAAoC,WAApC,EAAiDJ,IAAjD;;AAEA,eAAOwM,aAAP;AACD,OAnBM,CAAP;AAoBF;;AAED;;;;;;2CAGuB;;AAErB,UAAI,KAAKtB,aAAL,IAAsB,IAA1B,EAAgC;AAC9B;AACA,YAAIzI,oBAAoB,KAAKyI,aAAL,CAAmBzI,iBAA3C;;AAEA;AACAG,eAAOC,IAAP,CAAYJ,iBAAZ;AACD;AACF;;AAED;;;;;;;sCAIkB3F,I,EAAM;;AAEtB,UAAIA,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,YAAI3B,SAAS2B,KAAK8C,EAAlB;;AAEA;AACA,YAAI6C,oBAAoB,KAAKyI,aAAL,CAAmBzI,iBAA3C;;AAEA;AACA,YAAIE,iBAAkBF,oBAAoB,QAApB,GAA+BtH,MAArD;;AAEA;AACAyH,eAAOC,IAAP,CAAYF,cAAZ;AACD;AACF;;AAED;;;;;;;;2CAKuB7F,I,EAAMyB,W,EAAa;AACxC,UAAIzB,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,YAAI3B,SAAS2B,KAAK8C,EAAlB;;AAEA;AACA,YAAI6C,oBAAoB,KAAKyI,aAAL,CAAmBzI,iBAA3C;;AAEA;AACA,YAAIE,iBAAkBF,oBAAoB,QAApB,GAA+BtH,MAA/B,GAAwC,GAAxC,GAA8CoD,WAApE;;AAEA;AACAqE,eAAOC,IAAP,CAAYF,cAAZ;AACD;AACF;;AAED;;;;;;;;yCAKqBhG,a,EAAe;AAClC,WAAKrB,iBAAL,GAAyBqB,aAAzB;AACD;;AAED;;;;;;;mDAI+B;;AAE7B;AACA,WAAK2H,8BAAL;;AAEA;AACA,WAAKmH,uBAAL;;AAEA;AACA,WAAKjH,wBAAL;;AAEA;AACA,WAAK4H,0BAAL;;AAEA;AACA,WAAKC,sBAAL;AACD;;AAED;;;;;;;;;;0CAOsB1P,a,EAAe;AACnC,aAAO,KAAK3B,WAAL,CAAiB6B,qBAAjB,CAAuCF,aAAvC,CAAP;AACD;;AAED;;;;;;wCAGoB;;AAElB,UAAI,KAAKsK,cAAL,IAAuB,KAAKH,UAA5B,IAA0C,KAAKE,YAAnD,EAAiE;;AAE/D,YAAI,KAAKE,QAAT,EAAmB;AACjB;;;;AAIA,eAAKC,gBAAL;AACD;;AAED;AACA,aAAK7C,8BAAL;AACD,OAZD,MAYO;AACL;AACA,aAAKb,KAAL;AACD;AACF;;AAED;;;;;;;;;;;8BAQUiL,S,EAAWC,Q,EAAU3O,I,EAAM;;AAEnC,UAAI4O,UAAU,eAAd;AACA,UAAIzT,SAAS,KAAKA,MAAlB;AACA,UAAIoD,cAAc,IAAlB;AACA,UAAI5B,gBAAgB,IAApB;;AAEA,UAAIqD,QAAQ,IAAZ,EAAkB;AAChBA,eAAO,EAAP;AACD;;AAED;AACA,WAAKjF,kBAAL,CAAwBqF,SAAxB,CAAkCwO,OAAlC,EAA2CzT,MAA3C,EAAmDoD,WAAnD,EAAgE5B,aAAhE,EAA+EgS,QAA/E,EAAyFD,SAAzF,EAAoG1O,IAApG;AACD;;AAED;;;;;;;;oDAKgC2K,Y,EAAc;;AAE5C,UAAIkE,mBAAmB,EAAvB;;AAEA,UAAIlE,gBAAgB,IAApB,EAA0B;;AAExB;AACA,aAAK,IAAIzJ,IAAI,CAAb,EAAgBA,IAAIyJ,aAAanK,MAAjC,EAAyCU,GAAzC,EAA8C;AAC5C,cAAI3C,cAAcoM,aAAazJ,CAAb,CAAlB;;AAEA,cAAI3C,eAAe,IAAnB,EAAyB;;AAEvB;AACA,gBAAIyG,YAAY,KAAKlK,cAAL,CAAoB2K,kCAApB,CAAuD,KAAKtK,MAA5D,EAAoEoD,WAApE,CAAhB;;AAEA,gBAAIyG,aAAa,IAAjB,EAAuB;;AAErB;AACA,kBAAI8J,gBAAgB,EAApB;AACAA,4BAAcvQ,WAAd,GAA4ByG,UAAUpF,EAAtC;AACAkP,4BAAc7J,IAAd,GAAqBD,UAAUC,IAA/B;;AAEA4J,+BAAiB7N,IAAjB,CAAsB8N,aAAtB;AACD;AACF;AACF;AACF;;AAED,aAAOD,gBAAP;AACD;;AAED;;;;;;;4DAIwC;AACtC,UAAIA,mBAAmB,EAAvB;;AAEA;AACA,WAAK,IAAI7M,IAAI,CAAb,EAAgBA,IAAI,KAAK8I,kBAAL,CAAwBtK,MAA5C,EAAoDwB,GAApD,EAAyD;AACvD,YAAIC,OAAO,KAAK6I,kBAAL,CAAwB9I,CAAxB,CAAX;;AAEA,YAAIC,QAAQ,IAAR,IAAgBA,KAAKnF,IAAL,IAAa,IAA7B,IAAqCmF,KAAKnF,IAAL,CAAUI,UAAV,IAAwB,IAAjE,EAAuE;;AAErE;AACA,cAAIA,aAAa+E,KAAKnF,IAAL,CAAUI,UAA3B;;AAEA;AACA,eAAK,IAAIgE,IAAI,CAAb,EAAgBA,IAAIhE,WAAWsD,MAA/B,EAAuCU,GAAvC,EAA4C;AAC1C,gBAAI8D,YAAY9H,WAAWgE,CAAX,CAAhB;;AAEA,gBAAI8D,aAAa,IAAb,IAAqBA,UAAU9C,OAAnC,EAA4C;;AAE1C,kBAAI4M,gBAAgB,EAApB;AACAA,4BAAcC,aAAd,GAA8BC,SAAS,KAAK/D,eAAd,CAA9B;AACA6D,4BAAc1F,UAAd,GAA2BnH,KAAKnF,IAAL,CAAU8C,EAArC;AACAkP,4BAAc3B,eAAd,GAAgCnI,UAAUpF,EAA1C;AACAkP,4BAAc7J,IAAd,GAAqBD,UAAUC,IAA/B;;AAEA;;;;AAIA4J,+BAAiB7N,IAAjB,CAAsB8N,aAAtB;AACD;AACF;AACF;AACF;;AAED,aAAOD,gBAAP;AACD;;AAED;;;;;;uCAGmB;AAAA;;AAEjB,UAAI,KAAK3H,QAAT,EAAmB;AACjB;;;;;;AAMA,YAAI,KAAKS,8BAAL,IAAuCxE,QAAQyE,MAAR,CAAe,KAAK9K,IAApB,EAA0B,CAA1B,CAA3C,EAAyE;AACvE;;AAEA;AACA,cAAImS,cAAc9L,QAAQ+L,QAAR,CAAiB,KAAKvH,8BAAtB,CAAlB;;AAEA;AACA,eAAK7M,cAAL,CAAoBqU,OAApB,CAA4B,KAAKhU,MAAjC,EAAyC8T,WAAzC;;AAEA;AACA,eAAKnS,IAAL,GAAYmS,WAAZ;;AAEA;AACA,eAAK/R,UAAL,GAAkB,KAAKpC,cAAL,CAAoBqC,qBAApB,CAA0C,KAAKhC,MAA/C,CAAlB;;AAEA;AACA,eAAKJ,kBAAL,CAAwBkB,sBAAxB,CAA+C,KAAKd,MAApD;;AAEA;AACA,eAAKoC,uBAAL;;AAEA;AACA,eAAKwC,wBAAL,GAAgCyL,IAAhC,CAAqC,YAAM;AACzC,mBAAKlR,UAAL,CAAgBwI,UAAhB,CAA2B,cAA3B;AACD,WAFD;AAGD;AACF;AACF;;;;;;AACF;;AAED9I,wBAAwBoV,OAAxB,GAAkC,CAChC,eADgC,EAEhC,SAFgC,EAGhC,WAHgC,EAIhC,WAJgC,EAKhC,WALgC,EAMhC,YANgC,EAOhC,QAPgC,EAQhC,QARgC,EAShC,cATgC,EAUhC,UAVgC,EAWhC,eAXgC,EAYhC,aAZgC,EAahC,qBAbgC,EAchC,gBAdgC,EAehC,oBAfgC,EAgBhC,aAhBgC,CAAlC;;kBAmBepV,uB","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n  constructor($anchorScroll,\n        $filter,\n        $injector,\n        $location,\n        $mdDialog,\n        $rootScope,\n        $scope,\n        $state,\n        $stateParams,\n        $timeout,\n        ConfigService,\n        NodeService,\n        ProjectAssetService,\n        ProjectService,\n        TeacherDataService,\n        UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$location = $location;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.projectId = $stateParams.projectId;\n    this.nodeId = $stateParams.nodeId;\n    this.showCreateComponent = false;\n    this.showEditTransitions = false;\n    this.selectedComponent = null;\n    this.nodeCopy = null;\n    this.undoStack = [];\n    this.howToChooseAmongAvailablePathsOptions =\n        [null, 'random', 'workgroupId', 'firstAvailable', 'lastAvailable'];\n    this.whenToChoosePathOptions =\n        [null, 'enterNode', 'exitNode', 'scoreChanged', 'studentDataChanged'];\n    this.canChangePathOptions = [null, true, false];\n    this.createBranchBranches = [];\n    this.showComponents = true;\n    this.showStepButtons = true;\n    this.showComponentAuthoringViews = true;\n\n    // mapping from component id to whether the component checkbox is checked\n    this.componentsToChecked = {};\n\n    this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n    // the available constraint actions\n    this.constraintActions = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseAnAction')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisitable\",\n        text: this.$translate('makeAllNodesAfterThisNotVisitable')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisible\",\n        text: this.$translate('makeAllNodesAfterThisNotVisible')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisitable\",\n        text: this.$translate('makeAllOtherNodesNotVisitable')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisible\",\n        text: this.$translate('makeAllOtherNodesNotVisible')\n      },\n      {\n        value: \"makeThisNodeNotVisitable\",\n        text: this.$translate('makeThisNodeNotVisitable')\n      },\n      {\n        value: \"makeThisNodeNotVisible\",\n        text: this.$translate('makeThisNodeNotVisible')\n      }\n    ];\n\n    // the available removal conditionals\n    this.removalConditionals = [\n      {\n        value: \"all\",\n        text: this.$translate('all')\n      },\n      {\n        value: \"any\",\n        text: this.$translate('any')\n      }\n    ];\n\n    // the available removal criteria\n    this.removalCriteria = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseARemovalCriteria')\n      },\n      {\n        value: \"isCompleted\",\n        text: this.$translate('isCompleted'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"branchPathTaken\",\n        text: this.$translate('branchPathTaken'),\n        params: [\n          {\n            value: \"fromNodeId\",\n            text: this.$translate('fromNodeID')\n          },\n          {\n            value: \"toNodeId\",\n            text: this.$translate('toNodeID')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      },\n      {\n        value: \"isCorrect\",\n        text: this.$translate('IS_CORRECT'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          }\n        ]\n      },\n      {\n        value: \"usedXSubmits\",\n        text: this.$translate('usedXSubmits'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"requiredSubmitCount\",\n            text: this.$translate('requiredSubmitCount')\n          }\n        ]\n      },\n      {\n        value: \"isVisible\",\n        text: this.$translate('isVisible'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isVisitable\",\n        text: this.$translate('isVisitable'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isVisited\",\n        text: this.$translate('isVisited'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          }\n        ]\n      },\n      {\n        value: \"isPlanningActivityCompleted\",\n        text: this.$translate('isPlanningActivityCompleted')\n      }\n    ];\n\n    // available transitionCriterias\n    this.transitionCriterias = [\n      {\n        value: \"score\",\n        text: this.$translate('SCORE'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      }\n    ];\n\n    this.branchCriteria = [\n      {\n        value: \"workgroupId\",\n        text: this.$translate('WORKGROUP_ID')\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE')\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen')\n      },\n      {\n        value: \"random\",\n        text: this.$translate('random')\n      }\n    ];\n\n    // the array of component types that can be created\n    // TODO: automate by looping through active component types for this WISE instance\n    this.componentTypes = [\n      {componentType: 'Animation', componentName: this.UtilService.getComponentTypeLabel('Animation')},\n      {componentType: 'AudioOscillator', componentName: this.UtilService.getComponentTypeLabel('AudioOscillator')},\n      {componentType: 'ConceptMap', componentName: this.UtilService.getComponentTypeLabel('ConceptMap')},\n      {componentType: 'Discussion', componentName: this.UtilService.getComponentTypeLabel('Discussion')},\n      {componentType: 'Draw', componentName: this.UtilService.getComponentTypeLabel('Draw')},\n      {componentType: 'Embedded', componentName: this.UtilService.getComponentTypeLabel('Embedded')},\n      {componentType: 'Graph', componentName: this.UtilService.getComponentTypeLabel('Graph')},\n      {componentType: 'HTML', componentName: this.UtilService.getComponentTypeLabel('HTML')},\n      {componentType: 'Label', componentName: this.UtilService.getComponentTypeLabel('Label')},\n      {componentType: 'Match', componentName: this.UtilService.getComponentTypeLabel('Match')},\n      {componentType: 'MultipleChoice', componentName: this.UtilService.getComponentTypeLabel('MultipleChoice')},\n      {componentType: 'OpenResponse', componentName: this.UtilService.getComponentTypeLabel('OpenResponse')},\n      {componentType: 'OutsideURL', componentName: this.UtilService.getComponentTypeLabel('OutsideURL')},\n      {componentType: 'Table', componentName: this.UtilService.getComponentTypeLabel('Table')}\n    ];\n\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n    // get the step number e.g. 1.3\n    this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n    // get the components in the node\n    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n    /*\n     * remember a copy of the node at the beginning of this node authoring\n     * session in case we need to roll back if the user decides to\n     * cancel/revert all the changes.\n     */\n    this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    /*\n     * remember the current version of the node. this will be updated each\n     * time the user makes a change.\n     */\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    // populate the branch authoring if any\n    this.populateBranchAuthoring();\n\n    // create the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var insertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, null, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: insertAssetButton\n      }\n    };\n\n    /*\n     * inject the asset paths into the rubric html and set the summernote\n     * rubric html\n     */\n    this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.node.rubric);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == null) {\n          // the asset was selected for this component\n          if (args.assetItem != null && args.assetItem.fileName != null) {\n            let fileName = args.assetItem.fileName;\n            /*\n             * get the assets directory path\n             * e.g.\n             * /wise/curriculum/3/\n             */\n            let assetsDirectoryPath =\n                this.ConfigService.getProjectAssetsDirectoryPath();\n            let fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n            let summernoteId = '';\n\n            if (args.target == 'rubric') {\n              // the target is the summernote rubric element\n              summernoteId = 'summernoteRubric_' + this.nodeId;\n            }\n\n            if (summernoteId != '') {\n              if (this.UtilService.isImage(fileName)) {\n\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // add the image html\n                $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n              } else if (this.UtilService.isVideo(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // insert the video element\n                var videoElement = document.createElement('video');\n                videoElement.controls = 'true';\n                videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                $('#' + summernoteId).summernote('insertNode', videoElement);\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    this.$scope.$on('componentShowSubmitButtonValueChanged', (event, args) => {\n      let nodeId = args.nodeId;\n      let componentId = args.componentId;\n      let showSubmitButton = args.showSubmitButton;\n      if (showSubmitButton) {\n        /*\n         * a component is showing their submit button so we will hide\n         * the step save button and submit buttons\n         */\n\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n\n        // turn on the save buttons for all components in this step\n        this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n      } else {\n        /*\n         * a component is hiding their submit button so we may need\n         * to show the step save button\n         */\n\n        if (this.ProjectService.doesAnyComponentShowSubmitButton(this.node.id)) {\n          /*\n           * there is at least one component in the step that is showing\n           * their submit button so we will show the save button on\n           * all the components\n           */\n\n          // turn on the save buttons for all components in this step\n          this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n        } else {\n          /*\n           * no components in this step show their submit button so we\n           * will show the step save button\n           */\n          this.node.showSaveButton = true;\n          this.node.showSubmitButton = false;\n\n          // turn off the save buttons for all the components\n          this.ProjectService.turnOffSaveButtonInComponents(this.node.id);\n        }\n      }\n\n      // save changes\n      this.authoringViewNodeChanged();\n    });\n\n    // scroll to the top of the page\n    this.$anchorScroll('top');\n\n    var data = {};\n    data.title = this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId);\n\n    if (this.ProjectService.isGroupNode(this.nodeId)) {\n      // save the activity viewed event to the server\n      this.saveEvent('activityViewOpened', 'Navigation', data);\n    } else {\n      // save the step viewed event to the server\n      this.saveEvent('stepViewOpened', 'Navigation', data);\n    }\n  }\n\n  /**\n   * Populate the branch authoring\n   */\n  populateBranchAuthoring() {\n    if (this.node.transitionLogic != null) {\n      // clear the create branch branches so we can populate them again\n      this.createBranchBranches = [];\n\n      // get the number of branches\n      if (this.node.transitionLogic.transitions != null) {\n        this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\n      } else {\n        this.createBranchNumberOfBranches = 0;\n      }\n\n      // loop through all the transitions\n      for (var t = 0; t < this.node.transitionLogic.transitions.length; t++) {\n        var transition = this.node.transitionLogic.transitions[t];\n\n        if (transition != null) {\n\n          // create a branch object to hold all the related information for that branch\n          var branch = {};\n\n          // set the branch number for display purposes\n          branch.number = t + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // an array that will hold all the checked items in the branch path\n          branch.checkedItemsInBranchPath = [];\n\n          // set the transition into the branch so we can access it easily later\n          branch.transition = transition;\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // get the transition criteria\n          var criteria = transition.criteria;\n\n          if (criteria != null) {\n            // loop through all the criterion\n            for (var c = 0; c < criteria.length; c++) {\n              // get a criterion\n              var criterion = criteria[c];\n\n              if (criterion != null) {\n                var name = criterion.name;\n                var params = criterion.params;\n\n                if (params != null) {\n                  // get the node id and component id params if any\n                  this.createBranchNodeId = params.nodeId;\n                  this.createBranchComponentId = params.componentId;\n                }\n\n                if (name == 'score') {\n                  // this is a score criteria\n\n                  // set the branch criterion to score\n                  this.createBranchCriterion = 'score';\n\n                  if (params != null && params.scores != null) {\n                    // set the scores into the branch object\n                    branch.scores = params.scores;\n                  }\n                } else if (name == 'choiceChosen') {\n                  // this is a choice chosen criteria\n\n                  // set the branch criterion to choice chosen\n                  this.createBranchCriterion = 'choiceChosen';\n\n                  if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\n                    // set the choice id into the branch object\n                    branch.choiceId = params.choiceIds[0];\n                  }\n\n                  // get the choices from the component\n                  var choices = this.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\n\n                  if (choices != null) {\n                    // set the choices into the branch object\n                    branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n                  }\n                }\n              }\n            }\n          }\n\n          // get the node ids in the branch path\n          var nodeIdsInBranch = this.ProjectService.getNodeIdsInBranch(this.nodeId, transition.to);\n\n          // loop through all the node ids in the branch path\n          for (var n = 0; n < nodeIdsInBranch.length; n++) {\n\n            // get a node id in the branch path\n            var nodeId = nodeIdsInBranch[n];\n\n            // get the item\n            var item = branch.items[nodeId];\n\n            if (item != null) {\n              // make the item checked\n              item.checked = true;\n\n              // add the item to the array of checked items in this branch path\n              branch.checkedItemsInBranchPath.push(item);\n            }\n          }\n\n          // set the node ids in branch array into the branch object\n          branch.nodeIdsInBranch = nodeIdsInBranch;\n\n          if (nodeIdsInBranch.length > 0) {\n\n            // get the last node id in the branch path\n            var lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n            if (lastNodeIdInBranch != null) {\n\n              var transitionsFromLastNode = this.ProjectService.getTransitionsByFromNodeId(lastNodeIdInBranch);\n\n              if (transitionsFromLastNode != null && transitionsFromLastNode.length > 0) {\n                var transition = transitionsFromLastNode[0];\n\n                if (transition != null) {\n                  this.createBranchMergePointNodeId = transition.to;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (this.createBranchCriterion == null) {\n        /*\n         * we have not been able to determine the branch criterion yet\n         * so we will look at the howToChooseAmongAvailablePaths field\n         */\n        if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n          // set the branch criterion to workgroup id\n          this.createBranchCriterion = 'workgroupId';\n        } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n          // set the branch criterion to random\n          this.createBranchCriterion = 'random';\n        }\n      }\n    }\n  }\n\n  /**\n   * Launch VLE with this current step as the initial step\n   */\n  previewStep() {\n\n    let data = {};\n    data.constraints = true;\n\n    // save the step previewed event to the server\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Launch VLE with this current step as the initial step without constraints\n   */\n  previewStepWithoutConstraints() {\n\n    let data = {};\n    data.constraints = false;\n\n    // save the step previewed event to the server\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '?constraints=false' + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Close the node authoring view\n   */\n  close() {\n    // perform any node cleanup if necessary\n    //let commitMessage = 'Made changes to Step.';\n    //this.ProjectService.saveProject(commitMessage);\n\n    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n    this.TeacherDataService.setCurrentNode(null);\n\n    this.$state.go('root.project', {projectId: this.projectId});\n\n    // scroll to the top of the page\n    this.$anchorScroll('top');\n  };\n\n  /**\n   * Display an error saving during advanced authoring, most-likely due to malformed JSON\n   */\n  showSaveErrorAdvancedAuthoring() {\n    alert(this.$translate('saveErrorAdvancedAuthoring'));\n  };\n\n  /**\n   * The author has clicked the cancel button which will revert all\n   * the recent changes since they opened the node.\n   */\n  cancel() {\n\n    // check if the user has made any changes\n    if (!angular.equals(this.node, this.originalNodeCopy)) {\n      // the user has made changes\n\n      let result = confirm(this.$translate('confirmUndo'));\n\n      if (result) {\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // close the node authoring view\n        this.close();\n      }\n\n    } else {\n      // the user has not made any changes\n\n      //close the node authoring view\n      this.close();\n    }\n  }\n\n  /**\n   * Add a new transition for this node.\n   */\n  addNewTransition() {\n    if (this.node.transitionLogic.transitions == null) {\n      this.node.transitionLogic.transitions = [];\n    }\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    if (nodeTransitions.length > 0) {\n      // If this node already has transitions, copy the last one.\n      let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n      let newTransition = {\n        \"to\": lastNodeTransition.to\n      };\n      nodeTransitions.push(newTransition);\n    } else {\n      // Otherwise set the new transition to the current nodeId\n      let newTransition = {\n        \"to\": this.nodeId\n      };\n      nodeTransitions.push(newTransition);\n    }\n\n    if (nodeTransitions.length > 1) {\n      /*\n       * there is more than one transition so we will set default values\n       * for the transition logic parameters if they haven't already been\n       * set\n       */\n\n      if (this.node.transitionLogic.howToChooseAmongAvailablePaths == null) {\n        this.node.transitionLogic.howToChooseAmongAvailablePaths = 'workgroupId';\n      }\n\n      if (this.node.transitionLogic.whenToChoosePath == null) {\n        this.node.transitionLogic.whenToChoosePath = 'enterNode';\n      }\n\n      if (this.node.transitionLogic.canChangePath == null) {\n        this.node.transitionLogic.canChangePath = false;\n      }\n\n      if (this.node.transitionLogic.maxPathsVisitable == null) {\n        this.node.transitionLogic.maxPathsVisitable = 1;\n      }\n    }\n\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Add a new transition criteria for the specified transition.\n   */\n  addNewTransitionCriteria(transition) {\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    for (var n = 0; n < nodeTransitions.length; n++) {\n      let nodeTransition = nodeTransitions[n];\n      if (nodeTransition == transition) {\n        if (nodeTransition.criteria == null) {\n          nodeTransition.criteria = [];\n        }\n        let newTransitionCriteria = {\n          \"name\":\"\",\n          \"params\": {\n            \"nodeId\": \"\",\n            \"componentId\": \"\"\n          }\n        };\n        nodeTransition.criteria.push(newTransitionCriteria);\n      }\n    }\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria node id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaNodeIdChanged(transitionCriteria) {\n\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n      // remember the node id\n      var nodeId = transitionCriteria.params.nodeId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria component id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaComponentIdChanged(transitionCriteria) {\n\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n\n      // remember the node id and component id\n      var nodeId = transitionCriteria.params.nodeId;\n      var componentId = transitionCriteria.params.componentId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Deletes the specified transition from this node\n   */\n  deleteTransition(transition) {\n    let nodeTransitions = this.node.transitionLogic.transitions;\n\n    let index = nodeTransitions.indexOf(transition);\n    if (index > -1) {\n      nodeTransitions.splice(index, 1);\n    }\n\n    if (nodeTransitions.length <= 1) {\n      /*\n       * there is zero or one transition so we will clear the parameters\n       * below since they only apply when there are multiple transitions\n       */\n      this.node.transitionLogic.howToChooseAmongAvailablePaths = null;\n      this.node.transitionLogic.whenToChoosePath = null;\n      this.node.transitionLogic.canChangePath = null;\n      this.node.transitionLogic.maxPathsVisitable = null;\n    }\n\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n\n  /**\n   * Save transitions for this node\n   */\n  saveTransitions() {\n\n    // save the project\n    this.ProjectService.saveProject();\n\n    // hide the create component elements\n    this.showEditTransitions = false;\n  }\n\n  /**\n   * The add component button was clicked\n   */\n  addComponentButtonClicked() {\n\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n\n    // show the add component UI elements\n    this.nodeAuthoringViewButtonClicked('addComponent');\n\n    // turn on add component mode\n    this.turnOnAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode();\n\n    // hide the component authoring\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * Move a component up within this node\n   * @param componentId the component id\n   */\n  moveComponentUp(componentId) {\n\n    // move the component up within the node\n    this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Move a component up within this node\n   * @param componentId the component id\n   */\n  moveComponentDown(componentId) {\n\n    // move the component down within the node\n    this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete the component from this node\n   * @param componentId the component id\n   */\n  deleteComponent(componentId) {\n\n    // ask the user to confirm the delete\n    let answer = confirm(this.$translate('confirmDeleteComponent'));\n\n    if (answer) {\n      // the user confirmed yes\n\n      // delete the component from the node\n      this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n      // check if we need to show the node save or node submit buttons\n      this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n      // save the project\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * Hide the save button in all the components\n   */\n  hideAllComponentSaveButtons() {\n\n    var components = this.components;\n\n    if (components != null) {\n\n      // loop through all the components\n      for (var c = 0; c < components.length; c++) {\n        var component = components[c];\n\n        if (component != null) {\n          var componentType = component.type;\n\n          // get the service for the component type\n          var service = this.$injector.get(componentType + 'Service');\n\n          if (service != null) {\n            if (service.componentUsesSaveButton()) {\n              /*\n               * this component uses a save button so we will hide\n               * it\n               */\n              component.showSaveButton = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The node has changed in the authoring view\n   */\n  authoringViewNodeChanged() {\n    // put the previous version of the node on to the undo stack\n    this.undoStack.push(this.currentNodeCopy);\n\n    // update the current node copy\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    // save the project\n    return this.ProjectService.saveProject();\n  }\n\n  /**\n   * Undo the last change by reverting the node to the previous version\n   */\n  undo() {\n\n    if (this.undoStack.length === 0) {\n      // the undo stack is empty so there are no changes to undo\n      alert(this.$translate('noUndoAvailable'));\n\n    } else if (this.undoStack.length > 0) {\n      // the undo stack has elements\n\n      // ask the user to confirm the delete\n      let result = confirm(this.$translate('confirmUndoLastChange'));\n\n      if (result) {\n        // perform any node cleanup if necessary\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n        // get the previous version of the node\n        var nodeCopy = this.undoStack.pop();\n\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        // save the project\n        this.ProjectService.saveProject();\n      }\n\n    }\n  }\n\n  /**\n   * Get the removal criteria params for a removal criteria name\n   * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n   * @return the params for the given removal criteria name\n   */\n  getRemovalCriteriaParamsByName(name) {\n    var params = [];\n\n    if (name != null) {\n\n      // loop through all the available removal criteria\n      for (var r = 0; r < this.removalCriteria.length; r++) {\n\n        // get a single removal criteria\n        var singleRemovalCriteria = this.removalCriteria[r];\n\n        if (singleRemovalCriteria != null) {\n\n          if (singleRemovalCriteria.value == name) {\n            /*\n             * we have found the removal criteria we are looking for\n             * so we will get its params\n             */\n            params = singleRemovalCriteria.params;\n            break;\n          }\n        }\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * Get the transition criteria params for a transition criteria name\n   * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n   * @return the params for the given transition criteria name\n   */\n  getTransitionCriteriaParamsByName(name) {\n    let params = [];\n\n    if (name != null) {\n\n      // loop through all the available transition criteria\n      for (let t = 0; t < this.transitionCriterias.length; t++) {\n\n        // get a single transition criteria\n        let singleTransitionCriteria = this.transitionCriterias[t];\n\n        if (singleTransitionCriteria != null) {\n\n          if (singleTransitionCriteria.value == name) {\n            /*\n             * we have found the removal criteria we are looking for\n             * so we will get its params\n             */\n            params = singleTransitionCriteria.params;\n            break;\n          }\n        }\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * Get the choices of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choices from the component\n   */\n  getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n\n    var choices = [];\n\n    // get the component\n    var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    if (component != null && component.choices != null) {\n      // get the choices\n      choices = component.choices;\n    }\n\n    return choices;\n  }\n\n  /**\n   * Get the choice type of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choice type e.g. 'radio' or 'checkbox'\n   */\n  getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n\n    var choiceType = null;\n\n    // get the component\n    var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    if (component != null && component.choiceType != null) {\n      // get the choice type\n      choiceType = component.choiceType;\n    }\n\n    return choiceType;\n  }\n\n  /**\n   * Get the next available constraint id for a node\n   * @param nodeId the node id\n   * @return a constraint id that hasn't been used yet\n   */\n  getNewNodeConstraintId(nodeId) {\n\n    var newNodeConstraintId = null;\n\n    var usedConstraintIds = [];\n\n    // get the node content\n    var node = this.ProjectService.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the constraints\n      var constraints = node.constraints;\n\n      if (constraints != null) {\n\n        // loop through all the constraints\n        for (var c = 0; c < constraints.length; c++) {\n\n          // get a constraint\n          var constraint = constraints[c];\n\n          if (constraint != null) {\n\n            // get the id of the constraint\n            var constraintId = constraint.id;\n\n            // add the constraint id to the array of used constraint ids\n            usedConstraintIds.push(constraintId);\n          }\n        }\n      }\n    }\n\n    // counter used for finding a constraint id that hasn't been used yet\n    var constraintCounter = 1;\n\n    // loop until we have found an unused constraint id\n    while (newNodeConstraintId == null) {\n\n      // create a potential constraint id\n      var potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n\n      // check if the constraint id has been used already\n      if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n        // the constraint id has not been used so we can use it\n        newNodeConstraintId = potentialNewNodeConstraintId;\n      } else {\n        /*\n         * the constraint id has been used so we will increment the\n         * counter to try another contraint id\n         */\n        constraintCounter++;\n      }\n    }\n\n    return newNodeConstraintId;\n  }\n\n  /**\n   * Add a constraint\n   */\n  addConstraint() {\n\n    // get a new constraint id\n    var newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n\n    // create the constraint object\n    var constraint = {};\n    constraint.id = newNodeConstraintId;\n    constraint.action = '';\n    constraint.targetId = this.nodeId;\n    constraint.removalConditional = 'all';\n    constraint.removalCriteria = [];\n\n    // create a removal criteria\n    var removalCriteria = {};\n    removalCriteria.name = '';\n    removalCriteria.params = {};\n\n    // add the removal criteria to the constraint\n    constraint.removalCriteria.push(removalCriteria);\n\n    // create the constraints array if it does not exist\n    if (this.node.constraints == null) {\n      this.node.constraints = [];\n    }\n\n    // add the constraint to the node\n    this.node.constraints.push(constraint);\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a constraint\n   * @param constraintIndex delete the constraint at the index\n   */\n  deleteConstraint(constraintIndex) {\n\n    if (constraintIndex != null) {\n      // get the node content\n      var node = this.ProjectService.getNodeById(this.nodeId);\n\n      if (node != null) {\n\n        // get the constraints\n        var constraints = node.constraints;\n\n        if (constraints != null) {\n\n          // remove the constraint at the given index\n          constraints.splice(constraintIndex, 1);\n        }\n      }\n    }\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Add a removal criteria\n   * @param constraint add the removal criteria to this constraint\n   */\n  addRemovalCriteria(constraint) {\n\n    if (constraint != null) {\n\n      // create the removal criteria\n      var removalCriteria = {};\n      removalCriteria.name = '';\n      removalCriteria.params = {};\n\n      // add the removal criteria to the constraint\n      constraint.removalCriteria.push(removalCriteria);\n    }\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a removal criteria from a constraint\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n    if (constraint != null) {\n\n      // get all the removal criteria\n      var removalCriteria = constraint.removalCriteria;\n\n      if (removalCriteria != null) {\n        // remove the single removal criteria\n        removalCriteria.splice(removalCriteriaIndex, 1);\n      }\n    }\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a transition criteria from a transition\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n    if (transition != null) {\n\n      // get all the transition criteria\n      var transitionCriterias = transition.criteria;\n\n      if (transitionCriterias != null) {\n        // remove the single transition criteria\n        transitionCriterias.splice(transitionCriteriaIndex, 1);\n      }\n    }\n\n    // save the project\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist\n   */\n  removalCriteriaNameChanged(criteria) {\n\n    if (criteria != null) {\n      // clear the params\n      criteria.params = {};\n\n      // get the params for the given criteria name\n      var params = this.getRemovalCriteriaParamsByName(criteria.name);\n\n      if (params != null) {\n\n        // loop through all the params\n        for (var p = 0; p < params.length; p++) {\n          var paramObject = params[p];\n\n          if (paramObject != null) {\n            var value = paramObject.value;\n\n            // intialize the param value\n            criteria.params[value] = '';\n\n            if (value == 'nodeId') {\n              // default the node id param to this node\n              criteria.params[value] = this.nodeId;\n            }\n          }\n        }\n      }\n    }\n\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist.\n   * @param transitionCriteria the transition criteria object\n   */\n  transitionCriteriaNameChanged(transitionCriteria) {\n\n    if (transitionCriteria != null) {\n\n      var nodeId = null;\n      var componentId = null;\n\n      if (transitionCriteria.params != null) {\n        // remember the node id and component id\n        nodeId = transitionCriteria.params.nodeId;\n        componentId = transitionCriteria.params.componentId;\n      }\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A button to author a specific view of the node was clicked\n   * @param view the view name\n   */\n  nodeAuthoringViewButtonClicked(view) {\n\n    if (view == 'addComponent') {\n      // toggle the add component view and hide all the other views\n      this.showCreateComponent = !this.showCreateComponent;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'editTransitions') {\n\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit transitions view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = !this.showEditTransitions;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubricButton = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'editConstraints') {\n\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit constraints view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = !this.showConstraints;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'editButtons') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = !this.showEditButtons;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showJSON = false;\n    } else if (view == 'editRubric') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = !this.showRubric;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'createBranch') {\n\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = !this.showCreateBranch;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'previousNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n\n      // get the previous node id\n      var prevNodeId = this.ProjectService.getPreviousNodeId(this.nodeId);\n\n      if (prevNodeId != null) {\n        // there is a previous node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:prevNodeId});\n      } else {\n        // there is no previous node id so we will display a message\n        var thereIsNoPreviousStep = this.$translate('thereIsNoPreviousStep');\n        alert(thereIsNoPreviousStep);\n      }\n    } else if (view == 'nextNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n\n      // get the next node id\n      var nextNodeId = this.ProjectService.getNextNodeId(this.nodeId);\n\n      if (nextNodeId != null) {\n        // there is a next node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nextNodeId});\n      } else {\n        // there is no next node id so we will display a message\n        var thereIsNoNextStep = this.$translate('thereIsNoNextStep');\n        alert(thereIsNoNextStep);\n      }\n    } else if (view == 'advanced') {\n      // toggle the advanced view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = !this.showAdvanced;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n    } else if (view == 'copy') {\n      // toggle the copy view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'move') {\n      // toggle the move view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'import') {\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = !this.showImportView;\n      this.showStepButtons = false;\n      this.showComponents = true;\n      this.showJSON = false;\n    } else if (view == 'showJSON') {\n\n      // save and parse the JSON if it has changed\n      this.saveAndParseJSON();\n\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n\n      this.authoringNodeContentJSONString = angular.toJson(this.node, 4);\n      this.showJSON = !this.showJSON;\n    } else {\n      // hide all the views\n      this.showCreateComponent = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    }\n  }\n\n  /**\n   * The author has changed the number of branch paths\n   */\n  createBranchNumberOfBranchesChanged() {\n\n    if (this.createBranchNumberOfBranches == 0) {\n      // the author has set the number of branch paths to 0 which is not allowed\n      alert(this.$translate('errorYouCantHave0BranchPaths'));\n\n      // revert the number of branch paths value\n      this.createBranchNumberOfBranches = this.createBranchBranches.length;\n    } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\n      /*\n       * the author is reducing the number of branches so we want to\n       * confirm they want to do so\n       */\n      var answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:this.createBranchNumberOfBranches}));\n\n      if (answer) {\n        // they answered yes\n\n        if (this.createBranchNumberOfBranches == 1) {\n          /*\n           * the author has removed all the branch paths so we will\n           * remove the branch\n           */\n          this.removeBranch();\n        } else {\n          /*\n           * the author is reducing the number of branch paths but\n           * not removing all of them\n           */\n\n          // loop through all the branch paths\n          for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n            if (bp >= this.createBranchNumberOfBranches) {\n              // this is a branch we want to remove\n              var branch = this.createBranchBranches[bp];\n              this.removeBranchPath(branch);\n\n              /*\n               * decrement the counter back one because we have\n               * just removed a branch path\n               */\n              bp--;\n            }\n          }\n        }\n      } else {\n        // they answered no so we will revert the number of branches value\n        this.createBranchNumberOfBranches = this.createBranchBranches.length;\n      }\n    } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\n      // the author is increasing the number of branches\n\n      if (this.createBranchCriterion == null) {\n        /*\n         * we will default the branching to be based on workgroup id\n         * since that is what our researchers use most often\n         */\n        this.createBranchCriterion = 'workgroupId';\n        this.createBranchCriterionChanged();\n      }\n\n      // loop for the number of branches and create new branches objects\n      for (var b = 0; b < this.createBranchNumberOfBranches; b++) {\n\n        if (b >= this.createBranchBranches.length) {\n          /*\n           * we do not have a branch object for this branch number so\n           * we will create it\n           */\n\n          // create the branch object\n          var branch = {};\n\n          // set the branch number\n          branch.number = b + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // create a transition to represent the branch\n          var transition = {};\n\n          if (this.createBranchCriterion == 'score') {\n            // the branch is based on score\n\n            // create a score criterion\n            var criterion = {};\n            criterion.name = this.createBranchCriterion;\n            criterion.params = {};\n            criterion.params.scores = [];\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [];\n            transition.criteria.push(criterion);\n          } else if (this.createBranchCriterion == 'choiceChosen') {\n            // the branch is based on choice chosen\n            var criterion = {};\n            criterion.name = this.createBranchCriterion;\n            criterion.params = {};\n            criterion.params.choiceIds = [];\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [];\n            transition.criteria.push(criterion);\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // workgroup id branching does not require a transition criterion\n          } else if (this.createBranchCriterion == 'random') {\n            // random branching does not require a transition criterion\n          }\n\n          // add the transition\n          this.node.transitionLogic.transitions.push(transition);\n\n          // save a reference to the transition in the branch\n          branch.transition = transition;\n        }\n      }\n    }\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The branch criterion has changed\n   */\n  createBranchCriterionChanged() {\n\n    if (this.createBranchCriterion != null) {\n\n      // get this node id\n      var nodeId = this.node.id;\n\n      if (this.createBranchCriterion == 'workgroupId') {\n        // the branch is based on workgroup id\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'score') {\n        // the branch is based on score\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'choiceChosen') {\n        // the branch is based on choice chosen\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'random') {\n        // the branch is based on random assignment\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch node id has changed\n   */\n  createBranchNodeIdChanged() {\n\n    this.createBranchComponentId = null;\n\n    // get the selected node\n    var node = this.ProjectService.getNodeById(this.createBranchNodeId);\n\n    if (node != null) {\n\n      // get the components of the selected node\n      var components = node.components;\n\n      if (components != null) {\n        if (components.length == 1) {\n          /*\n           * there is only one component in the node so we will\n           * automatically select it in the drop down\n           */\n          var component = components[0];\n          this.createBranchComponentId = component.id;\n        }\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch component id has changed\n   */\n  createBranchComponentIdChanged() {\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Update the transitions so that they have the necessary parameter\n   * fields for the given branch criterion\n   */\n  createBranchUpdateTransitions() {\n\n    // loop through all the branches\n    for (var b = 0; b < this.createBranchBranches.length; b++) {\n\n      // get a branch object\n      var branch = this.createBranchBranches[b];\n\n      if (branch != null) {\n\n        // get the transition corresponding to the branch\n        var transition = branch.transition;\n\n        if (transition != null) {\n\n          if (this.createBranchCriterion == 'choiceChosen') {\n            // we are branching based on choice chosen\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new choice chosen criterion\n            var criterion = {};\n            criterion.name = 'choiceChosen';\n            criterion.params = {};\n            criterion.params.nodeId = this.createBranchNodeId;\n            criterion.params.componentId = this.createBranchComponentId;\n            criterion.params.choiceIds = [];\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id. we will set the choice id in\n             * the branch object when we call createBranchUpdateChoiceChosenIds()\n             */\n            branch.choiceId = null;\n\n            /*\n             * clear the scores since we don't need it in choice\n             * chosen branching\n             */\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'score') {\n            // we are branching based on score\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new score criterion\n            var criterion = {};\n            criterion.name = 'score';\n            criterion.params = {};\n            criterion.params.nodeId = this.createBranchNodeId;\n            criterion.params.componentId = this.createBranchComponentId;\n            criterion.params.scores = [];\n\n            // re-use scores if available\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id since we don't need it in score\n             * branching\n             */\n            branch.choiceId = null;\n\n            // set the scores into the branch object\n            branch.scores = criterion.params.scores;\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // we are branching based on workgroup id\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on workgroup id\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in workgroup id branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'random') {\n            // we are branching based on random assignment\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on random assignment\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in random branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          }\n        }\n      }\n    }\n\n    if (this.createBranchCriterion == 'choiceChosen') {\n      /*\n       * the branching is based on choice chosen so we will populate the\n       * choice ids\n       */\n      this.createBranchUpdateChoiceChosenIds();\n    }\n  }\n\n  /**\n   * Automatically populate the selected choices if the branch is based on\n   * choice chosen and the selected component is a multiple choice component\n   */\n  createBranchUpdateChoiceChosenIds() {\n\n    // get the node id and component id\n    var nodeId = this.createBranchNodeId;\n    var componentId = this.createBranchComponentId;\n\n    // get the component\n    var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    if (component != null) {\n      if (component.type == 'MultipleChoice') {\n        // the component is a multiple choice component\n\n        // get the choices from the component\n        var choices = component.choices;\n\n        if (choices != null) {\n\n          // loop through all the choices\n          for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n\n              // get the fields of the choice\n              var id = choice.id;\n              var text = choice.text;\n              var feedback = choice.feedback;\n              var isCorrect = choice.isCorrect;\n\n              // get the branch that corresponds to the choice\n              var branch = this.createBranchBranches[c];\n\n              if (branch != null) {\n                // get the choice for this branch\n                branch.choiceId = id;\n\n                // make a copy of the choices from the component\n                branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n\n                // get the transition corresponding to the branch\n                var transition = branch.transition;\n\n                if (transition != null) {\n\n                  /*\n                   * get the first transition criterion. we will assume\n                   * there is only one transition criterion\n                   */\n                  var criterion = transition.criteria[0];\n\n                  if (criterion != null) {\n\n                    // get the params\n                    var params = criterion.params;\n\n                    if (params != null) {\n\n                      // set the node id and component id\n                      params.nodeId = nodeId;\n                      params.componentId = componentId;\n\n                      if (this.createBranchCriterion == 'choiceChosen') {\n                        // set the choice id\n                        params.choiceIds = [];\n                        params.choiceIds.push(id);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * A step was clicked in the create branch authoring view\n   * @param branch the branch path\n   * @param item the step that was clicked\n   */\n  createBranchStepClicked(branch, item) {\n\n    // get all the steps in order\n    var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\n\n    // an array that will hold the items that were checked\n    branch.checkedItemsInBranchPath = [];\n    var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n    // an array that will hold the node ids that were checked\n    branch.nodeIdsInBranch = [];\n\n    // used to hold the previously checked node id\n    var previousCheckedNodeId = null;\n\n    // the node id after the node that was clicked\n    var nodeIdAfter = null;\n\n    /*\n     * loop through all the items in order and set the transitions so that\n     * the steps in a branch path transition to one after the other\n     */\n    for (var i = 0; i < orderedItems.length; i++) {\n      var orderedItem = orderedItems[i];\n\n      if (orderedItem != null && orderedItem.checked) {\n        // the item is checked\n\n        if (previousCheckedNodeId != null) {\n          // make the previous node id point to the current item\n          var previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n          if (previousCheckedNode != null) {\n\n            // get the transition logic\n            var transitionLogic = previousCheckedNode.transitionLogic;\n\n            if (transitionLogic != null) {\n\n              if (transitionLogic.transitions != null) {\n\n                // clear the transitions\n                transitionLogic.transitions = [];\n\n                // create a new transition object to the current item\n                var transition = {};\n                transition.to = orderedItem.$key;\n\n                // add the transition\n                transitionLogic.transitions.push(transition);\n              }\n            }\n          }\n        }\n\n        // add the item to the checked items array\n        checkedItemsInBranchPath.push(orderedItem);\n\n        // add the node id to the array of node ids in the branch path\n        branch.nodeIdsInBranch.push(orderedItem.$key);\n\n        // remember the previously checked node id\n        previousCheckedNodeId = orderedItem.$key;\n      }\n\n      // get the previous ordered item (checked or unchecked)\n      var previousOrderedItem = orderedItems[i - 1];\n\n      if (previousOrderedItem != null) {\n        if (previousOrderedItem.$key == item.$key) {\n          /*\n           * the previous item was the node that was checked/unchecked\n           * so we will remember this item because it is the node\n           * that comes after the node that was checked/unchecked\n           */\n          nodeIdAfter = orderedItem.$key;\n        }\n      }\n    }\n\n    if (this.createBranchMergePointNodeId != null) {\n      /*\n       * the merge point is specified so we will make the last checked\n       * node in this branch path point to the merge point\n       */\n\n      /*\n       * this is the last node in the branch path so we will make it\n       * transition to the merge point\n       */\n      var node = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n      if (node != null) {\n        var transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n          if (transitionLogic.transitions != null) {\n\n            // clear the transitions\n            transitionLogic.transitions = [];\n\n            // make a transition to the merge point\n            var transition = {};\n            transition.to = this.createBranchMergePointNodeId;\n\n            // add the transition\n            transitionLogic.transitions.push(transition);\n          }\n        }\n      }\n    }\n\n    // get the branch number\n    var branchNumber = branch.number;\n\n    // get the node id that was clicked\n    var nodeId = item.$key;\n\n    // get the transition that corresponds to the branch\n    var transition = this.node.transitionLogic.transitions[branchNumber - 1];\n\n    var firstNodeId = null;\n\n    /*\n     * update the branch point transition in case the first step in the\n     * branch path has changed\n     */\n    if (transition != null) {\n\n      if (checkedItemsInBranchPath.length == 0) {\n        // there are no steps in the path\n        transition.to = null;\n      } else {\n        // get the first step in the path\n        var firstCheckedItem = checkedItemsInBranchPath[0];\n\n        if (firstCheckedItem != null) {\n          // set the branch point transition to the first step in the path\n          firstNodeId = firstCheckedItem.$key;\n          transition.to = firstNodeId;\n        }\n      }\n    }\n\n    // get the node that was clicked\n    var node = this.ProjectService.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // remove all branch path taken constraints from the node\n      this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n      if (item.checked) {\n        // the item was checked so we will add the branch path taken constraints to it\n\n        /*\n         * the branch path taken constraints will be from this node to\n         * the first node in the branch path\n         */\n        var fromNodeId = this.nodeId;\n        var toNodeId = firstNodeId;\n\n        // add the branch path taken constraints\n        this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\n      } else {\n        /*\n         * the item was unchecked so we will change its transition to\n         * point to the node that comes right after it\n         */\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n      }\n    }\n\n    /*\n     * update the constraints of other steps in the branch path if necessary.\n     * loop through all theh checked items in the path\n     */\n    for (var n = 0; n < checkedItemsInBranchPath.length; n++) {\n\n      // get a checked item in the branch path\n      var item = checkedItemsInBranchPath[n];\n      var itemNodeId = item.$key;\n\n      // remove all branch path taken constraints from the node\n      this.ProjectService.removeBranchPathTakenNodeConstraints(itemNodeId);\n\n      /*\n       * the branch path taken constraints will be from this node to\n       * the first node in the branch path\n       */\n      var fromNodeId = this.nodeId;\n      var toNodeId = firstNodeId;\n\n      // add the branch path taken constraints\n      this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\n    }\n\n    /*\n     * update the node numbers now that a step has been added to a branch path\n     * e.g. if this is a branching step that is called\n     * 1.5 B View the Potential Energy\n     * then the node number is 1.5 B\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The score for a path has changed in the branch authoring\n   * @param branch the branch for which the score has changed\n   */\n  createBranchScoreChanged(branch) {\n\n    if (branch != null) {\n\n      // get the transition of the branch\n      var transition = branch.transition;\n\n      if (transition != null) {\n\n        // get the scores\n        var scores = branch.scores;\n\n        if (scores != null) {\n\n          // get the criteria\n          var criteria = transition.criteria;\n\n          if (criteria != null) {\n\n            // get the first criteria. we will assume there is only one criteria\n            var criterion = criteria[0];\n\n            if (criterion != null) {\n\n              // get the params of the criterion\n              var params = criterion.params;\n\n              if (params != null) {\n\n                // update the scores into the params\n                params.scores = scores;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The merge point has changed in the branch authoring\n   */\n  createBranchMergePointNodeIdChanged() {\n\n    // get the merge point node id\n    var createBranchMergePointNodeId = this.createBranchMergePointNodeId;\n\n    var branches = this.createBranchBranches;\n\n    // loop through all the branches\n    for (var b = 0; b < branches.length; b++) {\n      var branch = branches[b];\n\n      if (branch != null) {\n\n        // get the node ids in the branch path\n        var nodeIdsInBranch = branch.nodeIdsInBranch;\n\n        if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\n\n          // get the last node id in the branch path\n          var lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n          if (lastNodeIdInBranchPath != null) {\n\n            // get the last node in the branch path\n            var lastNodeInBranchPath = this.ProjectService.getNodeById(lastNodeIdInBranchPath);\n\n            if (lastNodeInBranchPath != null) {\n\n              // get the transition logic of the last node\n              var transitionLogic = lastNodeInBranchPath.transitionLogic;\n\n              if (transitionLogic != null) {\n\n                if (transitionLogic.transitions != null) {\n\n                  // clear the transitions\n                  transitionLogic.transitions = [];\n\n                  // make a new transition to the merge point\n                  var transition = {};\n                  transition.to = createBranchMergePointNodeId;\n\n                  // add the transition\n                  transitionLogic.transitions.push(transition);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The remove branch button was clicked\n   */\n  removeBranchButtonClicked() {\n\n    // ask the user if they are sure they want to remove the branch\n    var message = this.$translate('areYouSureYouWantToRemoveTheBranch');\n    var answer = confirm(message);\n\n    if (answer) {\n      // the user answered yes so we will remove the branch\n      this.removeBranch();\n    }\n  }\n\n  /**\n   * Remove the branch from the step by removing all the branch paths\n   */\n  removeBranch() {\n\n    // loop through all the branch paths\n    for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n      // remove a branch path\n      var branchPath = this.createBranchBranches[bp];\n      this.removeBranchPath(branchPath);\n\n      /*\n       * shift the counter back one because we have just removed a branch\n       * path\n       */\n      bp--;\n    }\n\n    // get the node id of this node (which is the branch point)\n    var nodeId = this.node.id;\n\n    // get the node id that comes after this node\n    var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n\n    /*\n     * update the transition of this step to point to the next step\n     * in the project. this may be different than the next step\n     * if it was still the branch point.\n     */\n    this.ProjectService.setTransition(nodeId, nodeIdAfter);\n\n    // clear the transition logic fields\n    this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\n\n    // clear the branch authoring fields\n    this.createBranchNumberOfBranches = 1;\n    this.createBranchCriterion = null;\n    this.createBranchNodeId = null;\n    this.createBranchComponentId = null;\n    this.createBranchMergePointNodeId = null;\n\n    /*\n     * branch paths are determined by the transitions. since there is now\n     * just one transition, we will create a single branch object to\n     * represent it.\n     */\n\n    // create a branch object to hold all the related information for that branch\n    var branch = {};\n\n    // set the branch number for display purposes\n    branch.number = 1;\n\n    /*\n     * set the mapping of all the ids to order for use when choosing which items are\n     * in the branch path\n     */\n    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n    // an array that will hold all the checked items in the branch path\n    branch.checkedItemsInBranchPath = [];\n\n    var transition = null;\n\n    // get the transition from the node\n    var transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\n\n    if (transitions != null && transitions.length > 0) {\n      transition = transitions[0];\n    }\n\n    // set the transition into the branch so we can access it easily later\n    branch.transition = transition;\n\n    // add the branch to the array of branches\n    this.createBranchBranches.push(branch);\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Remove a branch path by removing all the branch path taken constraints\n   * from the steps in the branch path, resetting the transitions in the\n   * steps in the branch path, and removing the transition corresponding to\n   * the branch path in this branch point node.\n   * @param branch the branch object\n   */\n  removeBranchPath(branch) {\n\n    if (branch != null) {\n\n      // get the checked items in the branch path\n      var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n      if (checkedItemsInBranchPath != null) {\n\n        // loop through all the checked items in the branch path\n        for (var i = 0; i < checkedItemsInBranchPath.length; i++) {\n\n          // get an item in the branch path\n          var checkedItem = checkedItemsInBranchPath[i];\n\n          if (checkedItem != null) {\n\n            // get the node id of the checked item\n            var nodeId = checkedItem.$key;\n\n            // remove the branchPathTaken constraints from the step\n            this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n            /*\n             * update the transition of the step to point to the next step\n             * in the project. this may be different than the next step\n             * if it was still in the branch path.\n             */\n            var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n            this.ProjectService.setTransition(nodeId, nodeIdAfter);\n          }\n        }\n      }\n\n      // get the index of the branch path\n      var branchPathIndex = this.createBranchBranches.indexOf(branch);\n\n      // remove the branch path\n      this.createBranchBranches.splice(branchPathIndex, 1);\n\n      // remove the transition the corresponds to the branch path\n      this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\n    }\n  }\n\n  /**\n   * The author has changed the step rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the step rubric\n    this.node.rubric = html;\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Show the component authoring views\n   */\n  showComponentAuthoring() {\n    this.showComponentAuthoringViews = true;\n  }\n\n  /**\n   * Hide the component authoring views so that the auther only sees\n   * the component numbers and component names\n   */\n  hideComponentAuthoring() {\n    this.showComponentAuthoringViews = false;\n  }\n\n  /**\n   * Show the insert buttons. This is used when choosing where to insert a\n   * component.\n   */\n  turnOnInsertComponentMode() {\n    this.insertComponentMode = true;\n  }\n\n  /**\n   * Hide the insert buttons.\n   */\n  turnOffInsertComponentMode() {\n    this.insertComponentMode = false;\n  }\n\n  /**\n   * Turn on the add component mode\n   */\n  turnOnAddComponentMode() {\n    this.addComponentMode = true;\n  }\n\n  /**\n   * Turn off the add component mode\n   */\n  turnOffAddComponentMode() {\n    this.addComponentMode = false;\n  }\n\n  /**\n   * Turn on the move component mode\n   */\n  turnOnMoveComponentMode() {\n    this.moveComponentMode = true;\n  }\n\n  /**\n   * Turn off the move component mode\n   */\n  turnOffMoveComponentMode() {\n    this.moveComponentMode = false;\n  }\n\n  /**\n   * Turn on the copy component mode\n   */\n  turnOnCopyComponentMode() {\n    this.copyComponentMode = true;\n  }\n\n  /**\n   * Turn off the copy component mode\n   */\n  turnOffCopyComponentMode() {\n    this.copyComponentMode = false;\n  }\n\n  /**\n   * Turn on the import component mode\n   */\n  turnOnImportComponentMode() {\n    this.importComponentMode = true;\n  }\n\n  /**\n   * Turn off the import component mode\n   */\n  turnOffImportComponentMode() {\n    this.importComponentMode = false;\n  }\n\n  /**\n   * Get the components that have been selected\n   * @return an array of component ids that have been selected\n   */\n  getSelectedComponentIds() {\n\n    var selectedComponents = [];\n\n    if (this.components != null) {\n\n      // loop through all the components\n      for (var c = 0; c < this.components.length; c++) {\n        var component = this.components[c];\n\n        if (component != null && component.id != null) {\n\n          // see if the component is checked\n          var checked = this.componentsToChecked[component.id];\n\n          if (checked) {\n            // the component is checked\n            selectedComponents.push(component.id);\n          }\n        }\n      }\n    }\n\n    return selectedComponents;\n  }\n\n  /**\n   * Uncheck all the components\n   */\n  clearComponentsToChecked() {\n    /*\n     * clear the components to checked mappings so that all the component\n     * checkboxes are no longer checked\n     */\n    this.componentsToChecked = {};\n  }\n\n  /**\n   * Get the component numbers and component types that have been selected\n   * @return an array of strings\n   * example\n   * [\n   *   \"1. OpenResponse\",\n   *   \"3. MultipleChoice\"\n   * ]\n   */\n  getSelectedComponentNumbersAndTypes(componentIds) {\n\n    var selectedComponents = [];\n\n    if (this.components != null) {\n\n      // loop through all the components\n      for (var c = 0; c < this.components.length; c++) {\n        var component = this.components[c];\n\n        if (component != null && component.id != null) {\n\n          // see if the component is checked\n          var checked = this.componentsToChecked[component.id];\n\n          if (checked) {\n\n            // get the component number and type example \"1. OpenResponse\"\n            var componentNumberAndType = (c + 1) + '. ' + component.type;\n\n            // the component is checked\n            selectedComponents.push(componentNumberAndType);\n          }\n        }\n      }\n    }\n\n    return selectedComponents;\n  }\n\n  /**\n   * The import button was clicked to turn on the import view\n   */\n  importButtonClicked() {\n\n    // clear all the import project values\n    this.importProjectIdToOrder = {};\n    this.importProjectItems = [];\n    this.importMyProjectId = null;\n    this.importLibraryProjectId = null;\n    this.importProjectId = null;\n    this.importProject = null;\n\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('import');\n\n    if (this.showImportView) {\n\n      // turn on import mode\n      this.turnOnImportComponentMode();\n\n      if (this.myProjectsList == null) {\n        // populate the authorable projects drop down\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        // populate the library projects drop down\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The move component button was clicked\n   */\n  moveButtonClicked() {\n\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('move');\n\n    // turn off add component mode\n    this.turnOffAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOnMoveComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode()\n\n    // hide the component authoring\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * The copy component button was clicked\n   */\n  copyButtonClicked() {\n\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('copy');\n\n    // turn on the move component mode\n    this.turnOnCopyComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode();\n\n    // hide the component authoring views\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * The delete button was clicked\n   */\n  deleteButtonClicked() {\n\n    // scroll to the top of the page\n    this.$anchorScroll('top');\n\n    /*\n     * hide all the component authoring so that the author only sees the\n     * component numbers and component types\n     */\n    this.hideComponentAuthoring();\n\n    /*\n     * Use a timeout to allow the effects of hideComponentAuthoring() to\n     * take effect. If we don't use a timeout, the user won't see any change\n     * in the UI.\n     */\n    this.$timeout(() => {\n      var confirmMessage = '';\n\n      // get the selected component numbers and types\n      var selectedComponentNumbersAndTypes = this.getSelectedComponentNumbersAndTypes();\n\n      if (selectedComponentNumbersAndTypes.length == 1) {\n        // there is one selected component\n        confirmMessage = 'Are you sure you want to delete this component?\\n';\n      } else if (selectedComponentNumbersAndTypes.length > 1) {\n        // there are multiple selected components\n        confirmMessage = 'Are you sure you want to delete these components?\\n';\n      }\n\n      // loop through all the selected components\n      for (var c = 0; c < selectedComponentNumbersAndTypes.length; c++) {\n\n        // get a component number and type\n        var selectedComponentNumberAndType = selectedComponentNumbersAndTypes[c];\n\n        // show the component number and type in the message\n        confirmMessage += '\\n' + selectedComponentNumberAndType;\n      }\n\n      // ask the user if they are sure they want to delete\n      var answer = confirm(confirmMessage);\n\n      if (answer) {\n        // the user answered yes\n\n        // get the selected component ids\n        var selectedComponents = this.getSelectedComponentIds();\n\n        // data saved in the component deleted event\n        var data = {};\n        data.componentsDeleted = this.getComponentObjectsForEventData(selectedComponents);\n\n        /*\n         * loop through all the selected component ids and delete the\n         * components\n         */\n        for (var c = 0; c < selectedComponents.length; c++) {\n\n          // get a selected component id\n          var componentId = selectedComponents[c];\n\n          // delete the component from the node\n          this.ProjectService.deleteComponent(this.nodeId, componentId);\n        }\n\n        // save the component deleted event to the server\n        this.saveEvent('componentDeleted', 'Authoring', data);\n\n        // check if we need to show the node save or node submit buttons\n        this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n        // save the project\n        this.ProjectService.saveProject();\n      } else {\n        // the user answer no\n\n        // uncheck the component check boxes\n        this.clearComponentsToChecked();\n      }\n\n      /*\n       * Wait a small amount of time before returning the UI back to the\n       * normal view. This allows the author to see the component number\n       * and type view a little longer so that they can see the change\n       * they just made before we switch back to the normal view.\n       */\n      this.$timeout(() => {\n        // turn off the insert component mode\n        this.turnOffInsertComponentMode();\n\n        // uncheck the component check boxes\n        this.clearComponentsToChecked();\n\n        // show the component authoring\n        this.showComponentAuthoring();\n      }, 2000);\n    });\n  }\n\n  /**\n   * The cancel insert button was clicked\n   */\n  cancelInsertClicked() {\n\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    // turn on add component mode\n    this.turnOffAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // hide the insert buttons\n    this.turnOffInsertComponentMode();\n\n    // uncheck the component check boxes\n    this.clearComponentsToChecked();\n\n    // show the component authoring views\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Check if we need to show the node save or node submit buttons\n   */\n  checkIfNeedToShowNodeSaveOrNodeSubmitButtons() {\n\n    if (this.ProjectService.doesAnyComponentShowSubmitButton(this.nodeId)) {\n      /*\n       * there is a component in this step that is showing their\n       * submit button\n       */\n    } else {\n      /*\n       * there is no component in this step that is showing their\n       * submit button\n       */\n\n      if (this.ProjectService.doesAnyComponentHaveWork(this.nodeId)) {\n        /*\n         * there is a component that generates work so we will show\n         * the step save button\n         */\n        this.node.showSaveButton = true;\n        this.node.showSubmitButton = false;\n\n        // hide the save button in all the components\n        this.hideAllComponentSaveButtons();\n      } else {\n        /*\n         * there are no components in the step that generates work\n         * so we will not show the step save button\n         */\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n      }\n    }\n  }\n\n  /**\n   * Insert the component so it becomes the first component in the step\n   */\n  insertComponentAsFirst() {\n\n    let newComponents = [];\n\n    if (this.addComponentMode) {\n      // create a component and add it to this node\n      var newComponent = this.ProjectService.createComponent(this.nodeId, this.selectedComponent, null);\n\n      let data = {};\n      data.compoenntId = newComponent.id;\n      data.componentType = newComponent.type;\n\n      // save the component created event to the server\n      this.saveEvent('componentCreated', 'Authoring', data);\n\n      newComponents.push(newComponent);\n\n      // turn off the add component mode\n      this.turnOffAddComponentMode();\n\n      // save the project\n      this.ProjectService.saveProject();\n\n      /*\n       * temporarily highlight the new components and then show the component\n       * authoring views\n       */\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    } else if (this.moveComponentMode) {\n\n      // get the component ids we are moving\n      let selectedComponentIds = this.getSelectedComponentIds();\n\n      // data saved in the component moved event\n      let data = {};\n      data.componentsMoved = this.getComponentObjectsForEventData(selectedComponentIds);\n\n      // move the components to their new location\n      newComponents = this.ProjectService.moveComponent(this.nodeId, selectedComponentIds, null);\n\n      // save the component moved event to the server\n      this.saveEvent('componentMoved', 'Authoring', data);\n\n      // turn off the move component mode\n      this.turnOffMoveComponentMode();\n\n      // save the project\n      this.ProjectService.saveProject();\n\n      /*\n       * temporarily highlight the new components and then show the component\n       * authoring views\n       */\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    } else if (this.copyComponentMode) {\n\n      // get the component ids we are moving\n      let selectedComponentIds = this.getSelectedComponentIds();\n\n      // data saved in the component copied event\n      let data = {};\n      let componentsCopied = this.getComponentObjectsForEventData(selectedComponentIds);\n\n      // copy the components to their new location\n      newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, null);\n\n      // get the information for all the components that were copied\n      for (let c = 0; c < componentsCopied.length; c++) {\n        let componentCopied = componentsCopied[c];\n        let newComponent = newComponents[c];\n\n        componentCopied.fromComponentId = componentCopied.componentId;\n        componentCopied.toComponentId = newComponent.id;\n        delete componentCopied.componentId;\n      }\n\n      data.componentsCopied = componentsCopied;\n\n      // save the component copied event to the server\n      this.saveEvent('componentCopied', 'Authoring', data);\n\n      // turn off the copy component mode\n      this.turnOffCopyComponentMode();\n\n      // save the project\n      this.ProjectService.saveProject();\n\n      /*\n       * temporarily highlight the new components and then show the component\n       * authoring views\n       */\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    } else if (this.importComponentMode) {\n\n      // import the selected components and insert them\n      this.importComponents(this.nodeId).then((newComponents) => {\n\n        // turn off import component mode\n        this.turnOffImportComponentMode();\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        /*\n         * temporarily highlight the new components and then show the component\n         * authoring views\n         */\n        this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n        /*\n         * refresh the project assets in case any of the imported\n         * components also imported assets\n         */\n        this.ProjectAssetService.retrieveProjectAssets();\n      });\n    }\n  }\n\n  /**\n   * Insert the component after the given component id\n   * @param componentId insert the component after this given component id\n   */\n  insertComponentAfter(componentId) {\n\n    let newComponents = [];\n\n    if (this.addComponentMode) {\n      // create a component and add it to this node\n      var newComponent = this.ProjectService.createComponent(this.nodeId, this.selectedComponent, componentId);\n\n      let data = {};\n      data.componentId = newComponent.id;\n      data.componentType = newComponent.type;\n\n      // save the component created event to the server\n      this.saveEvent('componentCreated', 'Authoring', data);\n\n      newComponents.push(newComponent);\n\n      // turn off the add component mode\n      this.turnOffAddComponentMode();\n\n      // save the project\n      this.ProjectService.saveProject();\n\n      /*\n       * temporarily highlight the new components and then show the component\n       * authoring views\n       */\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    } else if (this.moveComponentMode) {\n\n      // get the component ids we are moving\n      var selectedComponentIds = this.getSelectedComponentIds();\n\n      if (selectedComponentIds != null && selectedComponentIds.indexOf(componentId) != -1) {\n        /*\n         * the author is trying to move a component and place it after\n         * itself which we will not allow\n         */\n\n        if (selectedComponentIds.length == 1) {\n          alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n        } else if (selectedComponentIds.length > 1) {\n          alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n        }\n      } else {\n\n        // data saved in the component moved event\n        let data = {};\n        data.componentsMoved = this.getComponentObjectsForEventData(selectedComponentIds);\n\n        // move the components to their new location\n        newComponents = this.ProjectService.moveComponent(this.nodeId, selectedComponentIds, componentId);\n\n        // save the component moved event to the server\n        this.saveEvent('componentMoved', 'Authoring', data);\n\n        // turn off the move component mode\n        this.turnOffMoveComponentMode();\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        /*\n         * temporarily highlight the new components and then show the component\n         * authoring views\n         */\n        this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n      }\n    } else if (this.copyComponentMode) {\n\n      // get the component ids we are moving\n      let selectedComponentIds = this.getSelectedComponentIds();\n\n      // data saved in the component copied event\n      let data = {};\n      let componentsCopied = this.getComponentObjectsForEventData(selectedComponentIds);\n\n      // copy the components to their new location\n      newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, componentId);\n\n      // get the information for all the components that were copied\n      for (let c = 0; c < componentsCopied.length; c++) {\n        let componentCopied = componentsCopied[c];\n        let newComponent = newComponents[c];\n\n        componentCopied.fromComponentId = componentCopied.componentId;\n        componentCopied.toComponentId = newComponent.id;\n        delete componentCopied.componentId;\n      }\n\n      data.componentsCopied = componentsCopied;\n\n      // save the component copied event to the server\n      this.saveEvent('componentCopied', 'Authoring', data);\n\n      // turn off the copy component mode\n      this.turnOffCopyComponentMode();\n\n      // save the project\n      this.ProjectService.saveProject();\n\n      /*\n       * temporarily highlight the new components and then show the component\n       * authoring views\n       */\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    } else if (this.importComponentMode) {\n\n      // import the selected components and insert them\n      newComponents = this.importComponents(this.nodeId, componentId).then((newComponents) => {\n        // turn off import component mode\n        this.turnOffImportComponentMode();\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        /*\n         * temporarily highlight the new components and then show the component\n         * authoring views\n         */\n        this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n        /*\n         * refresh the project assets in case any of the imported\n         * components also imported assets\n         */\n        this.ProjectAssetService.retrieveProjectAssets();\n      });\n    }\n  }\n\n  /**\n   * Temporarily highlight the new components and then show the component\n   * authoring views\n   * @param newComponents an array of the new components we have just added\n   */\n  highlightNewComponentsAndThenShowComponentAuthoring(newComponents) {\n\n    // use a timeout to allow the components time to show up in the UI\n    this.$timeout(() => {\n      if (newComponents != null) {\n\n        // loop through all the new components\n        for (var n = 0; n < newComponents.length; n++) {\n          var newComponent = newComponents[n];\n\n          if (newComponent != null) {\n\n            // get the component UI element\n            let componentElement = $('#' + newComponent.id);\n\n            // save the original background color\n            let originalBackgroundColor = componentElement.css('backgroundColor');\n\n            // highlight the background briefly to draw attention to it\n            componentElement.css('background-color', '#FFFF9C');\n\n            /*\n             * Use a timeout before starting to transition back to\n             * the original background color. For some reason the\n             * element won't get highlighted in the first place\n             * unless this timeout is used.\n             */\n            this.$timeout(() => {\n              // slowly fade back to original background color\n              componentElement.css({\n                'transition': 'background-color 2s ease-in-out',\n                'background-color': originalBackgroundColor\n              });\n            });\n          }\n        }\n      }\n\n      /*\n       * Wait a small amount of time before returning the UI back to the\n       * normal view. This allows the author to see the component number\n       * and type view a little longer so that they can see the change\n       * they just made before we switch back to the normal view.\n       */\n      this.$timeout(() => {\n        // show the component authoring\n        this.showComponentAuthoring();\n\n        // turn off the insert component mode\n        this.turnOffInsertComponentMode();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // uncheck all the component checkboxes\n        this.clearComponentsToChecked();\n\n        /*\n         * use a timeout to wait for the UI to update and then scroll\n         * to the first new component\n         */\n        this.$timeout(() => {\n\n          if (newComponents != null && newComponents.length > 0) {\n\n            // get the UI element of the first new component\n            let componentElement = $('#' + newComponents[0].id);\n\n            if (componentElement != null) {\n              // scroll to the first new component that we've added\n              $('#content').animate({\n                scrollTop: componentElement.prop('offsetTop') - 60\n              }, 1000);\n            }\n          }\n        });\n      }, 1000);\n    });\n  }\n\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n\n    // clear the select drop down for the library project\n    this.importLibraryProjectId = null;\n\n    // show the import project\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n\n    // show the import project\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n\n    this.importProjectId = importProjectId;\n\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      // get the import project\n      this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n\n        // create the mapping of node id to order for the import project\n        this.importProjectIdToOrder = {};\n        this.importProject = projectJSON;\n\n        // calculate the node order of the import project\n        var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = result.idToOrder;\n        this.importProjectItems = result.nodes;\n      });\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importComponentsButtonClicked() {\n\n    // get the components that were selected\n    var selectedComponents = this.getSelectedComponentsToImport();\n\n    if (selectedComponents == null || selectedComponents.length == 0) {\n      // the author did not select any components to import\n      alert('Please select a component to import.');\n    } else {\n\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.turnOnInsertComponentMode();\n      this.hideComponentAuthoring();\n\n      // scroll to the top of the page\n      this.$anchorScroll('top');\n    }\n  }\n\n\n  /**\n   * Get the selected components to import\n   * @return an array of selected components\n   */\n  getSelectedComponentsToImport() {\n    var selectedComponents = [];\n\n    // loop through all the import project items\n    for (var n = 0; n < this.importProjectItems.length; n++) {\n      var item = this.importProjectItems[n];\n\n      if (item != null && item.node != null && item.node.components != null) {\n\n        // get the components in the node\n        var components = item.node.components;\n\n        // loop through all the components in the node\n        for (var c = 0; c < components.length; c++) {\n          var component = components[c];\n\n          if (component != null && component.checked) {\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            selectedComponents.push(component);\n          }\n        }\n      }\n    }\n\n    return selectedComponents;\n  }\n\n  /**\n   * Get the components that were selected\n   * @param insertAfterComponentId (optional) Insert the components after this\n   * component id. If this is null, we will insert the components at the\n   * beginning of the step.\n   */\n  importComponents(nodeId, insertAfterComponentId) {\n\n    // data saved in the component imported event\n    var data = {};\n    data.componentsImported = this.getComponentObjectsForImportEventData();\n\n    // get all the selected component objects\n    var selectedComponents = this.getSelectedComponentsToImport();\n\n    // loop through all the selected component objects\n    for (var c = 0; c < selectedComponents.length; c++) {\n      var selectedComponent = selectedComponents[c];\n\n      if (selectedComponent != null) {\n        // remove the checked field\n        delete selectedComponent.checked;\n      }\n    }\n\n    // insert the components into the project\n     return this.ProjectService.importComponents(selectedComponents, this.importProjectId, nodeId, insertAfterComponentId).then((newComponents) => {\n\n       // loop through all the components that were imported\n       for (var c = 0; c < data.componentsImported.length; c++) {\n         var componentImported = data.componentsImported[c];\n         var newComponent = newComponents[c];\n         var newComponentId = newComponent.id;\n\n         /*\n          * set the toComponentId so the event knows what the new\n          * component id is\n          */\n         componentImported.toComponentId = newComponentId;\n       }\n\n       // save the component imported event to the server\n       this.saveEvent('componentImported', 'Authoring', data);\n\n       return newComponents;\n     });\n  }\n\n  /**\n   * Preview the import project\n   */\n  previewImportProject() {\n\n    if (this.importProject != null) {\n      // get the preview project url for the import project\n      var previewProjectURL = this.importProject.previewProjectURL;\n\n      // open the preview step in a new tab\n      window.open(previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the step\n   * @param node\n   */\n  previewImportNode(node) {\n\n    if (node != null) {\n\n      // get the node id\n      var nodeId = node.id;\n\n      // get the preview project url for the import project\n      var previewProjectURL = this.importProject.previewProjectURL;\n\n      // create the url to preview the step\n      var previewStepURL  = previewProjectURL + '#/vle/' + nodeId;\n\n      // open the preview step in a new tab\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Preview the component\n   * @param node the node\n   * @param componentId the component id\n   */\n  previewImportComponent(node, componentId) {\n    if (node != null) {\n\n      // get the node id\n      var nodeId = node.id;\n\n      // get the preview project url for the import project\n      var previewProjectURL = this.importProject.previewProjectURL;\n\n      // create the url to preview the step\n      var previewStepURL  = previewProjectURL + '#/vle/' + nodeId + '/' + componentId;\n\n      // open the preview step in a new tab\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on a component type\n   * @param componentType the component type the author clicked\n   */\n  componentTypeClicked(componentType) {\n    this.selectedComponent = componentType;\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on the cancel button\n   */\n  cancelCreateComponentClicked() {\n\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    // turn on add component mode\n    this.turnOffAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // hide the insert buttons\n    this.turnOffInsertComponentMode()\n\n    // show the component authoring views\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Get the component type label\n   * @param componentType the component type\n   * @return the component type label\n   * example\n   * \"Open Response\"\n   */\n  getComponentTypeLabel(componentType) {\n    return this.UtilService.getComponentTypeLabel(componentType);\n  }\n\n  /**\n   * The author has clicked the back button\n   */\n  backButtonClicked() {\n\n    if (this.showImportView || this.showRubric || this.showAdvanced) {\n\n      if (this.showJSON) {\n        /*\n         * we are showing the JSON so we will check if it has changed\n         * and then save and parse the JSON\n         */\n        this.saveAndParseJSON();\n      }\n\n      // we are in the import view so we will go back to the node view\n      this.nodeAuthoringViewButtonClicked();\n    } else {\n      // we are in the node view so we will go back to the project view\n      this.close();\n    }\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n\n    let context = 'AuthoringTool';\n    let nodeId = this.nodeId;\n    let componentId = null;\n    let componentType = null;\n\n    if (data == null) {\n      data = {};\n    }\n\n    // save the event to the server\n    this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, eventName, data);\n  }\n\n  /**\n   * Get an array of objects that contain the component id and type\n   * @param componentIds an array of component ids\n   * @return an array of objects that contain the component id and type\n   */\n  getComponentObjectsForEventData(componentIds) {\n\n    var componentObjects = [];\n\n    if (componentIds != null) {\n\n      // loop through all the component ids\n      for (var c = 0; c < componentIds.length; c++) {\n        var componentId = componentIds[c];\n\n        if (componentId != null) {\n\n          // get the component\n          var component = this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, componentId);\n\n          if (component != null) {\n\n            // create an object with the component id and type\n            var tempComponent = {};\n            tempComponent.componentId = component.id;\n            tempComponent.type = component.type;\n\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n\n    return componentObjects;\n  }\n\n  /**\n   * Get an array of objects that contain the node id, component id and type\n   * @return an array of objects that contain the node id, component id and type\n   */\n  getComponentObjectsForImportEventData() {\n    var componentObjects = [];\n\n    // loop through all the import project items\n    for (var n = 0; n < this.importProjectItems.length; n++) {\n      var item = this.importProjectItems[n];\n\n      if (item != null && item.node != null && item.node.components != null) {\n\n        // get the components in the node\n        var components = item.node.components;\n\n        // loop through all the components in the node\n        for (var c = 0; c < components.length; c++) {\n          var component = components[c];\n\n          if (component != null && component.checked) {\n\n            var tempComponent = {};\n            tempComponent.fromProjectId = parseInt(this.importProjectId);\n            tempComponent.fromNodeId = item.node.id;\n            tempComponent.fromComponentId = component.id;\n            tempComponent.type = component.type;\n\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n\n    return componentObjects;\n  }\n\n  /**\n   * Check if the JSON has changed and then save and parse the JSON\n   */\n  saveAndParseJSON() {\n\n    if (this.showJSON) {\n      /*\n       * We are showing the JSON so we will now check to see if the\n       * JSON changed. If the JSON changed we will save the node with\n       * new JSON.\n       */\n\n      if (this.authoringNodeContentJSONString != angular.toJson(this.node, 4)) {\n        // the JSON has been changed so we will update the node\n\n        // create the updated node object\n        var updatedNode = angular.fromJson(this.authoringNodeContentJSONString);\n\n        // set the updated node into the project\n        this.ProjectService.setNode(this.nodeId, updatedNode);\n\n        // set the updated node into this controller\n        this.node = updatedNode;\n\n        // set the components into this controller\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        // set the current node\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        // update the branch authoring fields into the controller\n        this.populateBranchAuthoring();\n\n        // save the project\n        this.authoringViewNodeChanged().then(() => {\n          this.$rootScope.$broadcast('parseProject');\n        });\n      }\n    }\n  }\n};\n\nNodeAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$injector',\n  '$location',\n  '$mdDialog',\n  '$rootScope',\n  '$scope',\n  '$state',\n  '$stateParams',\n  '$timeout',\n  'ConfigService',\n  'NodeService',\n  'ProjectAssetService',\n  'ProjectService',\n  'TeacherDataService',\n  'UtilService'\n];\n\nexport default NodeAuthoringController;\n"]}