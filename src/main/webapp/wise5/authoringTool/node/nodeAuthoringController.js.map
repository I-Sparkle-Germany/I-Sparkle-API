{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$filter","$injector","$location","$mdDialog","$scope","$state","$stateParams","$timeout","ConfigService","NodeService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","showComponentAuthoringViews","componentsToChecked","setCurrentNodeByNodeId","constraintActions","value","text","removalConditionals","removalCriteria","params","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","getComponentTypeLabel","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","summernoteRubricHTML","replaceAssetPaths","rubric","$on","event","args","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showSubmitButton","showSaveButton","turnOnSaveButtonInComponents","id","doesAnyComponentShowSubmitButton","turnOffSaveButtonInComponents","authoringViewNodeChanged","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","c","criterion","name","createBranchNodeId","createBranchComponentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","n","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","setCurrentNode","go","alert","angular","equals","result","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","whenToChoosePath","canChangePath","maxPathsVisitable","nodeTransition","newTransitionCriteria","transitionCriteria","index","indexOf","splice","nodeAuthoringViewButtonClicked","turnOnAddComponentMode","turnOffMoveComponentMode","turnOnInsertComponentMode","hideComponentAuthoring","moveComponentUp","moveComponentDown","answer","deleteComponent","checkIfNeedToShowNodeSaveOrNodeSubmitButtons","component","type","service","get","componentUsesSaveButton","pop","r","singleRemovalCriteria","singleTransitionCriteria","getComponentByNodeIdAndComponentId","choiceType","newNodeConstraintId","usedConstraintIds","constraints","constraint","constraintId","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","action","targetId","removalConditional","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","getRemovalCriteriaParamsByName","p","paramObject","view","showConstraints","showEditButtons","showRubric","showCreateBranch","showAdvanced","showImportView","showRubricButton","prevNodeId","getPreviousNodeId","thereIsNoPreviousStep","nextNodeId","getNextNodeId","thereIsNoNextStep","removeBranch","bp","removeBranchPath","createBranchCriterionChanged","b","setTransitionLogicField","createBranchUpdateTransitions","createBranchUpdateChoiceChosenIds","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraints","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","calculateNodeNumbers","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","message","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","insertComponentMode","addComponentMode","moveComponentMode","copyComponentMode","importComponentMode","selectedComponents","componentIds","componentNumberAndType","turnOnImportComponentMode","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","then","turnOffAddComponentMode","turnOnMoveComponentMode","turnOnCopyComponentMode","confirmMessage","selectedComponentNumbersAndTypes","getSelectedComponentNumbersAndTypes","selectedComponentNumberAndType","getSelectedComponentIds","turnOffInsertComponentMode","showComponentAuthoring","doesAnyComponentHaveWork","hideAllComponentSaveButtons","newComponents","newComponent","createComponent","highlightNewComponentsAndThenShowComponentAuthoring","selectedComponentIds","moveComponent","copyComponentAndInsert","turnOffCopyComponentMode","importComponents","turnOffImportComponentMode","retrieveProjectAssets","scrollPosition","componentElement","originalBackgroundColor","css","clearComponentsToChecked","animate","scrollTop","prop","importProjectId","importLibraryProjectId","showImportProject","importMyProjectId","importProjectIdToOrder","importProjectItems","importProject","retrieveProjectById","projectJSON","getNodeOrderOfProject","nodes","getSelectedComponentsToImport","insertAfterComponentId","$inject"],"mappings":"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","file":"nodeAuthoringController.js","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n    constructor($anchorScroll,\n                $filter,\n                $injector,\n                $location,\n                $mdDialog,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                ConfigService,\n                NodeService,\n                ProjectAssetService,\n                ProjectService,\n                TeacherDataService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$location = $location;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = this.$filter('translate');\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectAssetService = ProjectAssetService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.showEditTransitions = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"scoreChanged\", \"studentDataChanged\"];\n        this.canChangePathOptions = [null, true, false];\n        this.createBranchBranches = [];\n\n        // whether to show the component authoring views\n        this.showComponentAuthoringViews = true;\n\n        // mapping from component id to whether the component checkbox is checked\n        this.componentsToChecked = {};\n\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        // the available constraint actions\n        this.constraintActions = [\n            {\n                value: \"\",\n                text: this.$translate('pleaseChooseAnAction')\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisitable\",\n                text: this.$translate('makeAllNodesAfterThisNotVisitable')\n            },\n            {\n                value: \"makeAllNodesAfterThisNotVisible\",\n                text: this.$translate('makeAllNodesAfterThisNotVisible')\n            },\n            {\n                value: \"makeAllOtherNodesNotVisitable\",\n                text: this.$translate('makeAllOtherNodesNotVisitable')\n            },\n            {\n                value: \"makeAllOtherNodesNotVisible\",\n                text: this.$translate('makeAllOtherNodesNotVisible')\n            },\n            {\n                value: \"makeThisNodeNotVisitable\",\n                text: this.$translate('makeThisNodeNotVisitable')\n            },\n            {\n                value: \"makeThisNodeNotVisible\",\n                text: this.$translate('makeThisNodeNotVisible')\n            }\n        ];\n\n        // the available removal conditionals\n        this.removalConditionals = [\n            {\n                value: \"all\",\n                text: this.$translate('all')\n            },\n            {\n                value: \"any\",\n                text: this.$translate('any')\n            }\n        ];\n\n        // the available removal criteria\n        this.removalCriteria = [\n            {\n                value: \"\",\n                text: this.$translate('pleaseChooseARemovalCriteria')\n            },\n            {\n                value: \"isCompleted\",\n                text: this.$translate('isCompleted'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"score\",\n                text: this.$translate('SCORE'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"scores\",\n                        text: this.$translate('scoresParens')\n                    }\n                ]\n            },\n            {\n                value: \"branchPathTaken\",\n                text: this.$translate('branchPathTaken'),\n                params: [\n                    {\n                        value: \"fromNodeId\",\n                        text: this.$translate('fromNodeID')\n                    },\n                    {\n                        value: \"toNodeId\",\n                        text: this.$translate('toNodeID')\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: this.$translate('choices')\n                    }\n                ]\n            },\n            {\n                value: \"isCorrect\",\n                text: this.$translate('IS_CORRECT'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    }\n                ]\n            },\n            {\n                value: \"usedXSubmits\",\n                text: this.$translate('usedXSubmits'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"requiredSubmitCount\",\n                        text: this.$translate('requiredSubmitCount')\n                    }\n                ]\n            },\n            {\n                value: \"isVisible\",\n                text: this.$translate('isVisible'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isVisitable\",\n                text: this.$translate('isVisitable'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isVisited\",\n                text: this.$translate('isVisited'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    }\n                ]\n            },\n            {\n                value: \"isPlanningActivityCompleted\",\n                text: this.$translate('isPlanningActivityCompleted')\n            }\n        ];\n\n        // available transitionCriterias\n        this.transitionCriterias = [\n            {\n                value: \"score\",\n                text: this.$translate('SCORE'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"scores\",\n                        text: this.$translate('scoresParens')\n                    }\n                ]\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen'),\n                params: [\n                    {\n                        value: \"nodeId\",\n                        text: this.$translate('nodeID')\n                    },\n                    {\n                        value: \"componentId\",\n                        text: this.$translate('componentID')\n                    },\n                    {\n                        value: \"choiceIds\",\n                        text: this.$translate('choices')\n                    }\n                ]\n            }\n        ];\n\n        this.branchCriteria = [\n            {\n                value: \"workgroupId\",\n                text: this.$translate('WORKGROUP_ID')\n            },\n            {\n                value: \"score\",\n                text: this.$translate('SCORE')\n            },\n            {\n                value: \"choiceChosen\",\n                text: this.$translate('choiceChosen')\n            },\n            {\n                value: \"random\",\n                text: this.$translate('random')\n            }\n        ];\n\n        // the array of component types that can be created\n        // TODO: automate by looping through active component types for this WISE instance\n        this.componentTypes = [\n            {componentType: 'AudioOscillator', componentName: this.UtilService.getComponentTypeLabel('AudioOscillator')},\n            {componentType: 'ConceptMap', componentName: this.UtilService.getComponentTypeLabel('ConceptMap')},\n            {componentType: 'Discussion', componentName: this.UtilService.getComponentTypeLabel('Discussion')},\n            {componentType: 'Draw', componentName: this.UtilService.getComponentTypeLabel('Draw')},\n            {componentType: 'Embedded', componentName: this.UtilService.getComponentTypeLabel('Embedded')},\n            {componentType: 'Graph', componentName: this.UtilService.getComponentTypeLabel('Graph')},\n            {componentType: 'HTML', componentName: this.UtilService.getComponentTypeLabel('HTML')},\n            {componentType: 'Label', componentName: this.UtilService.getComponentTypeLabel('Label')},\n            {componentType: 'Match', componentName: this.UtilService.getComponentTypeLabel('Match')},\n            {componentType: 'MultipleChoice', componentName: this.UtilService.getComponentTypeLabel('MultipleChoice')},\n            {componentType: 'OpenResponse', componentName: this.UtilService.getComponentTypeLabel('OpenResponse')},\n            {componentType: 'OutsideURL', componentName: this.UtilService.getComponentTypeLabel('OutsideURL')},\n            {componentType: 'Table', componentName: this.UtilService.getComponentTypeLabel('Table')}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the step number e.g. 1.3\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        // populate the branch authoring if any\n        this.populateBranchAuthoring();\n\n        // create the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, null, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n            toolbar: [\n                ['style', ['style']],\n                ['font', ['bold', 'underline', 'clear']],\n                ['fontname', ['fontname']],\n                ['fontsize', ['fontsize']],\n                ['color', ['color']],\n                ['para', ['ul', 'ol', 'paragraph']],\n                ['table', ['table']],\n                ['insert', ['link', 'video']],\n                ['view', ['fullscreen', 'codeview', 'help']],\n                ['customButton', ['insertAssetButton']]\n            ],\n            height: 300,\n            disableDragAndDrop: true,\n            buttons: {\n                insertAssetButton: InsertAssetButton\n            }\n        };\n\n        /*\n         * inject the asset paths into the rubric html and set the summernote\n         * rubric html\n         */\n        this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.node.rubric);\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == null) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n        this.$scope.$on('componentShowSubmitButtonValueChanged', (event, args) => {\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n            var showSubmitButton = args.showSubmitButton;\n\n            if (showSubmitButton) {\n                /*\n                 * a component is showing their submit button so we will hide\n                 * the step save button and submit buttons\n                 */\n\n                this.node.showSaveButton = false;\n                this.node.showSubmitButton = false;\n\n                // turn on the save buttons for all components in this step\n                this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n            } else {\n                /*\n                 * a component is hiding their submit button so we may need\n                 * to show the step save button\n                 */\n\n                if (this.ProjectService.doesAnyComponentShowSubmitButton(this.node.id)) {\n                    /*\n                     * there is at least one component in the step that is showing\n                     * their submit button so we will show the save button on\n                     * all the components\n                     */\n\n                    // turn on the save buttons for all components in this step\n                    this.ProjectService.turnOnSaveButtonInComponents(this.node.id);\n                } else {\n                    /*\n                     * no components in this step show their submit button so we\n                     * will show the step save button\n                     */\n                    this.node.showSaveButton = true;\n                    this.node.showSubmitButton = false;\n\n                    // turn off the save buttons for all the components\n                    this.ProjectService.turnOffSaveButtonInComponents(this.node.id);\n                }\n            }\n\n            // save changes\n            this.authoringViewNodeChanged();\n        });\n\n        // scroll to the top of the page\n        this.$anchorScroll('top');\n    }\n\n    /**\n     * Populate the branch authoring\n     */\n    populateBranchAuthoring() {\n        if (this.node.transitionLogic != null) {\n\n            // get the number of branches\n            if (this.node.transitionLogic.transitions != null) {\n                this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\n            } else {\n                this.createBranchNumberOfBranches = 0;\n            }\n\n            // loop through all the transitions\n            for (var t = 0; t < this.node.transitionLogic.transitions.length; t++) {\n                var transition = this.node.transitionLogic.transitions[t];\n\n                if (transition != null) {\n\n                    // create a branch object to hold all the related information for that branch\n                    var branch = {};\n\n                    // set the branch number for display purposes\n                    branch.number = t + 1;\n\n                    /*\n                     * set the mapping of all the ids to order for use when choosing which items are\n                     * in the branch path\n                     */\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n                    // an array that will hold all the checked items in the branch path\n                    branch.checkedItemsInBranchPath = [];\n\n                    // set the transition into the branch so we can access it easily later\n                    branch.transition = transition;\n\n                    // add the branch to the array of branches\n                    this.createBranchBranches.push(branch);\n\n                    // get the transition criteria\n                    var criteria = transition.criteria;\n\n                    if (criteria != null) {\n\n                        // loop through all the criterion\n                        for (var c = 0; c < criteria.length; c++) {\n\n                            // get a criterion\n                            var criterion = criteria[c];\n\n                            if (criterion != null) {\n                                var name = criterion.name;\n                                var params = criterion.params;\n\n                                if (params != null) {\n                                    // get the node id and component id params if any\n                                    this.createBranchNodeId = params.nodeId;\n                                    this.createBranchComponentId = params.componentId;\n                                }\n\n                                if (name == 'score') {\n                                    // this is a score criteria\n\n                                    // set the branch criterion to score\n                                    this.createBranchCriterion = 'score';\n\n                                    if (params != null && params.scores != null) {\n                                        // set the scores into the branch object\n                                        branch.scores = params.scores;\n                                    }\n                                } else if (name == 'choiceChosen') {\n                                    // this is a choice chosen criteria\n\n                                    // set the branch criterion to choice chosen\n                                    this.createBranchCriterion = 'choiceChosen';\n\n                                    if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\n                                        // set the choice id into the branch object\n                                        branch.choiceId = params.choiceIds[0];\n                                    }\n\n                                    // get the choices from the component\n                                    var choices = this.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\n\n                                    if (choices != null) {\n                                        // set the choices into the branch object\n                                        branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // get the node ids in the branch path\n                    var nodeIdsInBranch = this.ProjectService.getNodeIdsInBranch(this.nodeId, transition.to);\n\n                    // loop through all the node ids in the branch path\n                    for (var n = 0; n < nodeIdsInBranch.length; n++) {\n\n                        // get a node id in the branch path\n                        var nodeId = nodeIdsInBranch[n];\n\n                        // get the item\n                        var item = branch.items[nodeId];\n\n                        if (item != null) {\n                            // make the item checked\n                            item.checked = true;\n\n                            // add the item to the array of checked items in this branch path\n                            branch.checkedItemsInBranchPath.push(item);\n                        }\n                    }\n\n                    // set the node ids in branch array into the branch object\n                    branch.nodeIdsInBranch = nodeIdsInBranch;\n\n                    if (nodeIdsInBranch.length > 0) {\n\n                        // get the last node id in the branch path\n                        var lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n                        if (lastNodeIdInBranch != null) {\n\n                            var transitionsFromLastNode = this.ProjectService.getTransitionsByFromNodeId(lastNodeIdInBranch);\n\n                            if (transitionsFromLastNode != null && transitionsFromLastNode.length > 0) {\n                                var transition = transitionsFromLastNode[0];\n\n                                if (transition != null) {\n                                    this.createBranchMergePointNodeId = transition.to;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (this.createBranchCriterion == null) {\n                /*\n                 * we have not been able to determine the branch criterion yet\n                 * so we will look at the howToChooseAmongAvailablePaths field\n                 */\n                if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n                    // set the branch criterion to workgroup id\n                    this.createBranchCriterion = 'workgroupId';\n                } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n                    // set the branch criterion to random\n                    this.createBranchCriterion = 'random';\n                }\n            }\n        }\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Launch VLE with this current step as the initial step without constraints\n     */\n    previewStepWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        // perform any node cleanup if necessary\n        //let commitMessage = \"Made changes to Step.\";\n        //this.ProjectService.saveProject(commitMessage);\n\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n        this.TeacherDataService.setCurrentNode(null);\n\n        this.$state.go('root.project', {projectId: this.projectId});\n\n        // scroll to the top of the page\n        this.$anchorScroll('top');\n    };\n\n    /**\n     * Display an error saving during advanced authoring, most-likely due to malformed JSON\n     */\n    showSaveErrorAdvancedAuthoring() {\n        alert(this.$translate('saveErrorAdvancedAuthoring'));\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            let result = confirm(this.$translate('confirmUndo'));\n\n            if (result) {\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                // save the project\n                this.ProjectService.saveProject();\n\n                // close the node authoring view\n                this.close();\n            }\n\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Add a new transition for this node.\n     */\n    addNewTransition() {\n        if (this.node.transitionLogic.transitions == null) {\n            this.node.transitionLogic.transitions = [];\n        }\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        if (nodeTransitions.length > 0) {\n            // If this node already has transitions, copy the last one.\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n            let newTransition = {\n                \"to\": lastNodeTransition.to\n            };\n            nodeTransitions.push(newTransition);\n        } else {\n            // Otherwise set the new transition to the current nodeId\n            let newTransition = {\n                \"to\": this.nodeId\n            };\n            nodeTransitions.push(newTransition);\n        }\n\n        if (nodeTransitions.length > 1) {\n            /*\n             * there is more than one transition so we will set default values\n             * for the transition logic parameters if they haven't already been\n             * set\n             */\n\n            if (this.node.transitionLogic.howToChooseAmongAvailablePaths == null) {\n                this.node.transitionLogic.howToChooseAmongAvailablePaths = 'workgroupId';\n            }\n\n            if (this.node.transitionLogic.whenToChoosePath == null) {\n                this.node.transitionLogic.whenToChoosePath = 'enterNode';\n            }\n\n            if (this.node.transitionLogic.canChangePath == null) {\n                this.node.transitionLogic.canChangePath = false;\n            }\n\n            if (this.node.transitionLogic.maxPathsVisitable == null) {\n                this.node.transitionLogic.maxPathsVisitable = 1;\n            }\n        }\n\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Add a new transition criteria for the specified transition.\n     */\n    addNewTransitionCriteria(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        for (var n = 0; n < nodeTransitions.length; n++) {\n            let nodeTransition = nodeTransitions[n];\n            if (nodeTransition == transition) {\n                if (nodeTransition.criteria == null) {\n                    nodeTransition.criteria = [];\n                }\n                let newTransitionCriteria = {\n                    \"name\":\"\",\n                    \"params\": {\n                        \"nodeId\": \"\",\n                        \"componentId\": \"\"\n                    }\n                };\n                nodeTransition.criteria.push(newTransitionCriteria);\n            }\n        }\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The transition criteria node id changed so we will update the params\n     * accordingly.\n     * @param transitionCriteria the transition criteria object that changed\n     */\n    transitionCriteriaNodeIdChanged(transitionCriteria) {\n\n        if (transitionCriteria!= null && transitionCriteria.params != null) {\n            // remember the node id\n            var nodeId = transitionCriteria.params.nodeId;\n\n            // clear the params\n            transitionCriteria.params = {};\n\n            if (nodeId != null) {\n                // set the node id back into the params\n                transitionCriteria.params.nodeId = nodeId;\n            }\n        }\n\n        // save the node\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The transition criteria component id changed so we will update the params\n     * accordingly.\n     * @param transitionCriteria the transition criteria object that changed\n     */\n    transitionCriteriaComponentIdChanged(transitionCriteria) {\n\n        if (transitionCriteria!= null && transitionCriteria.params != null) {\n\n            // remember the node id and component id\n            var nodeId = transitionCriteria.params.nodeId;\n            var componentId = transitionCriteria.params.componentId;\n\n            // clear the params\n            transitionCriteria.params = {};\n\n            if (nodeId != null) {\n                // set the node id back into the params\n                transitionCriteria.params.nodeId = nodeId;\n            }\n\n            if (componentId != null) {\n                // set the component id back into the params\n                transitionCriteria.params.componentId = componentId;\n            }\n        }\n\n        // save the node\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Deletes the specified transition from this node\n     */\n    deleteTransition(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n\n        let index = nodeTransitions.indexOf(transition);\n        if (index > -1) {\n            nodeTransitions.splice(index, 1);\n        }\n\n        if (nodeTransitions.length <= 1) {\n            /*\n             * there is zero or one transition so we will clear the parameters\n             * below since they only apply when there are multiple transitions\n             */\n            this.node.transitionLogic.howToChooseAmongAvailablePaths = null;\n            this.node.transitionLogic.whenToChoosePath = null;\n            this.node.transitionLogic.canChangePath = null;\n            this.node.transitionLogic.maxPathsVisitable = null;\n        }\n\n        // save changes\n        this.authoringViewNodeChanged();\n    }\n\n\n    /**\n     * Save transitions for this node\n     */\n    saveTransitions() {\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showEditTransitions = false;\n    }\n\n    /**\n     * The add component button was clicked\n     */\n    addComponentButtonClicked() {\n\n        // show the add component UI elements\n        this.nodeAuthoringViewButtonClicked('addComponent');\n\n        // turn on add component mode\n        this.turnOnAddComponentMode();\n\n        // turn on the move component mode\n        this.turnOffMoveComponentMode();\n\n        // turn on the insert component mode\n        this.turnOnInsertComponentMode();\n\n        // hide the component authoring\n        this.hideComponentAuthoring();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        // ask the user to confirm the delete\n        let answer = confirm(this.$translate('confirmDeleteComponent'));\n\n        if (answer) {\n            // the user confirmed yes\n\n            // delete the component from the node\n            this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n            // check if we need to show the node save or node submit buttons\n            this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n            // save the project\n            this.ProjectService.saveProject();\n        }\n    }\n\n    /**\n     * Hide the save button in all the components\n     */\n    hideAllComponentSaveButtons() {\n\n        var components = this.components;\n\n        if (components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                if (component != null) {\n                    var componentType = component.type;\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    if (service != null) {\n                        if (service.componentUsesSaveButton()) {\n                            /*\n                             * this component uses a save button so we will hide\n                             * it\n                             */\n                            component.showSaveButton = false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            alert(this.$translate('noUndoAvailable'));\n\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            // ask the user to confirm the delete\n            let result = confirm(this.$translate('confirmUndoLastChange'));\n\n            if (result) {\n                // perform any node cleanup if necessary\n                this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n                // get the previous version of the node\n                var nodeCopy = this.undoStack.pop();\n\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                // get the node\n                this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                // get the components in the node\n                this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n\n        }\n    }\n\n    /**\n     * Get the removal criteria params for a removal criteria name\n     * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n     * @return the params for the given removal criteria name\n     */\n    getRemovalCriteriaParamsByName(name) {\n        var params = [];\n\n        if (name != null) {\n\n            // loop through all the available removal criteria\n            for (var r = 0; r < this.removalCriteria.length; r++) {\n\n                // get a single removal criteria\n                var singleRemovalCriteria = this.removalCriteria[r];\n\n                if (singleRemovalCriteria != null) {\n\n                    if (singleRemovalCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleRemovalCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * Get the transition criteria params for a transition criteria name\n     * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n     * @return the params for the given transition criteria name\n     */\n    getTransitionCriteriaParamsByName(name) {\n        let params = [];\n\n        if (name != null) {\n\n            // loop through all the available transition criteria\n            for (let t = 0; t < this.transitionCriterias.length; t++) {\n\n                // get a single transition criteria\n                let singleTransitionCriteria = this.transitionCriterias[t];\n\n                if (singleTransitionCriteria != null) {\n\n                    if (singleTransitionCriteria.value == name) {\n                        /*\n                         * we have found the removal criteria we are looking for\n                         * so we will get its params\n                         */\n                        params = singleTransitionCriteria.params;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * Get the choices of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choices from the component\n     */\n    getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n\n        var choices = [];\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null && component.choices != null) {\n            // get the choices\n            choices = component.choices;\n        }\n\n        return choices;\n    }\n\n    /**\n     * Get the choice type of a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the choice type e.g. 'radio' or 'checkbox'\n     */\n    getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n\n        var choiceType = null;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null && component.choiceType != null) {\n            // get the choice type\n            choiceType = component.choiceType;\n        }\n\n        return choiceType;\n    }\n\n    /**\n     * Get the next available constraint id for a node\n     * @param nodeId the node id\n     * @return a constraint id that hasn't been used yet\n     */\n    getNewNodeConstraintId(nodeId) {\n\n        var newNodeConstraintId = null;\n\n        var usedConstraintIds = [];\n\n        // get the node content\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the constraints\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n\n                    // get a constraint\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the id of the constraint\n                        var constraintId = constraint.id;\n\n                        // add the constraint id to the array of used constraint ids\n                        usedConstraintIds.push(constraintId);\n                    }\n                }\n            }\n        }\n\n        // counter used for finding a constraint id that hasn't been used yet\n        var constraintCounter = 1;\n\n        // loop until we have found an unused constraint id\n        while (newNodeConstraintId == null) {\n\n            // create a potential constraint id\n            var potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n\n            // check if the constraint id has been used already\n            if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n                // the constraint id has not been used so we can use it\n                newNodeConstraintId = potentialNewNodeConstraintId;\n            } else {\n                /*\n                 * the constraint id has been used so we will increment the\n                 * counter to try another contraint id\n                 */\n                constraintCounter++;\n            }\n        }\n\n        return newNodeConstraintId;\n    }\n\n    /**\n     * Add a constraint\n     */\n    addConstraint() {\n\n        // get a new constraint id\n        var newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n\n        // create the constraint object\n        var constraint = {};\n        constraint.id = newNodeConstraintId;\n        constraint.action = \"\";\n        constraint.targetId = this.nodeId;\n        constraint.removalConditional = \"all\";\n        constraint.removalCriteria = [];\n\n        // create a removal criteria\n        var removalCriteria = {};\n        removalCriteria.name = \"\";\n        removalCriteria.params = {};\n\n        // add the removal criteria to the constraint\n        constraint.removalCriteria.push(removalCriteria);\n\n        // create the constraints array if it does not exist\n        if (this.node.constraints == null) {\n            this.node.constraints = [];\n        }\n\n        // add the constraint to the node\n        this.node.constraints.push(constraint);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a constraint\n     * @param constraintIndex delete the constraint at the index\n     */\n    deleteConstraint(constraintIndex) {\n\n        if (constraintIndex != null) {\n            // get the node content\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // get the constraints\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // remove the constraint at the given index\n                    constraints.splice(constraintIndex, 1);\n                }\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Add a removal criteria\n     * @param constraint add the removal criteria to this constraint\n     */\n    addRemovalCriteria(constraint) {\n\n        if (constraint != null) {\n\n            // create the removal criteria\n            var removalCriteria = {};\n            removalCriteria.name = \"\";\n            removalCriteria.params = {};\n\n            // add the removal criteria to the constraint\n            constraint.removalCriteria.push(removalCriteria);\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a removal criteria from a constraint\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n        if (constraint != null) {\n\n            // get all the removal criteria\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n                // remove the single removal criteria\n                removalCriteria.splice(removalCriteriaIndex, 1);\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete a transition criteria from a transition\n     * @param constraint remove the removal criteria from this constraint\n     * @param removalCriteriaIndex the index of the removal criteria to remove\n     */\n    deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n        if (transition != null) {\n\n            // get all the transition criteria\n            var transitionCriterias = transition.criteria;\n\n            if (transitionCriterias != null) {\n                // remove the single transition criteria\n                transitionCriterias.splice(transitionCriteriaIndex, 1);\n            }\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist\n     */\n    removalCriteriaNameChanged(criteria) {\n\n        if (criteria != null) {\n            // clear the params\n            criteria.params = {};\n\n            // get the params for the given criteria name\n            var params = this.getRemovalCriteriaParamsByName(criteria.name);\n\n            if (params != null) {\n\n                // loop through all the params\n                for (var p = 0; p < params.length; p++) {\n                    var paramObject = params[p];\n\n                    if (paramObject != null) {\n                        var value = paramObject.value;\n\n                        // intialize the param value\n                        criteria.params[value] = '';\n\n                        if (value == 'nodeId') {\n                            // default the node id param to this node\n                            criteria.params[value] = this.nodeId;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A removal criteria name has changed so we will clear the params so\n     * that the params from the previous removal criteria name do not persist.\n     * @param transitionCriteria the transition criteria object\n     */\n    transitionCriteriaNameChanged(transitionCriteria) {\n\n        if (transitionCriteria != null) {\n\n            var nodeId = null;\n            var componentId = null;\n\n            if (transitionCriteria.params != null) {\n                // remember the node id and component id\n                nodeId = transitionCriteria.params.nodeId;\n                componentId = transitionCriteria.params.componentId;\n            }\n\n            // clear the params\n            transitionCriteria.params = {};\n\n            if (nodeId != null) {\n                // set the node id back into the params\n                transitionCriteria.params.nodeId = nodeId;\n            }\n\n            if (componentId != null) {\n                // set the component id back into the params\n                transitionCriteria.params.componentId = componentId;\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * A button to author a specific view of the node was clicked\n     * @param view the view name\n     */\n    nodeAuthoringViewButtonClicked(view) {\n\n        if (view == 'addComponent') {\n            // toggle the add component view and hide all the other views\n            this.showCreateComponent = !this.showCreateComponent;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'editTransitions') {\n            // toggle the edit transitions view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = !this.showEditTransitions;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubricButton = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'editConstraints') {\n            // toggle the edit constraints view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = !this.showConstraints;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'editButtons') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = !this.showEditButtons;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'editRubric') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = !this.showRubric;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'createBranch') {\n            // toggle the edit buttons view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = !this.showCreateBranch;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'previousNode') {\n            // hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n\n            // get the previous node id\n            var prevNodeId = this.ProjectService.getPreviousNodeId(this.nodeId);\n\n            if (prevNodeId != null) {\n                // there is a previous node id so we will go to it\n                this.$state.go('root.project.node', {projectId: this.projectId, nodeId:prevNodeId});\n            } else {\n                // there is no previous node id so we will display a message\n                var thereIsNoPreviousStep = this.$translate('thereIsNoPreviousStep');\n                alert(thereIsNoPreviousStep);\n            }\n        } else if (view == 'nextNode') {\n            // hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n\n            // get the next node id\n            var nextNodeId = this.ProjectService.getNextNodeId(this.nodeId);\n\n            if (nextNodeId != null) {\n                // there is a next node id so we will go to it\n                this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nextNodeId});\n            } else {\n                // there is no next node id so we will display a message\n                var thereIsNoNextStep = this.$translate('thereIsNoNextStep');\n                alert(thereIsNoNextStep);\n            }\n        } else if (view == 'advanced') {\n            // toggle the advanced view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = !this.showAdvanced;\n            this.showImportView = false;\n        } else if (view == 'copy') {\n            // toggle the copy view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'move') {\n            // toggle the move view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = false;\n        } else if (view == 'import') {\n            // toggle the import view and hide all the other views\n            this.showCreateComponent = false;\n            this.showEditTransitions = false;\n            this.showConstraints = false;\n            this.showEditButtons = false;\n            this.showRubric = false;\n            this.showCreateBranch = false;\n            this.showAdvanced = false;\n            this.showImportView = !this.showImportView;\n        }\n    }\n\n    /**\n     * The author has changed the number of branch paths\n     */\n    createBranchNumberOfBranchesChanged() {\n\n        if (this.createBranchNumberOfBranches == 0) {\n            // the author has set the number of branch paths to 0 which is not allowed\n            alert(this.$translate('errorYouCantHave0BranchPaths'));\n\n            // revert the number of branch paths value\n            this.createBranchNumberOfBranches = this.createBranchBranches.length;\n        } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\n            /*\n             * the author is reducing the number of branches so we want to\n             * confirm they want to do so\n             */\n            var answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:this.createBranchNumberOfBranches}));\n\n            if (answer) {\n                // they answered yes\n\n                if (this.createBranchNumberOfBranches == 1) {\n                    /*\n                     * the author has removed all the branch paths so we will\n                     * remove the branch\n                     */\n                    this.removeBranch();\n                } else {\n                    /*\n                     * the author is reducing the number of branch paths but\n                     * not removing all of them\n                     */\n\n                    // loop through all the branch paths\n                    for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n                        if (bp >= this.createBranchNumberOfBranches) {\n                            // this is a branch we want to remove\n                            var branch = this.createBranchBranches[bp];\n                            this.removeBranchPath(branch);\n\n                            /*\n                             * decrement the counter back one because we have\n                             * just removed a branch path\n                             */\n                            bp--;\n                        }\n                    }\n                }\n            } else {\n                // they answered no so we will revert the number of branches value\n                this.createBranchNumberOfBranches = this.createBranchBranches.length;\n            }\n        } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\n            // the author is increasing the number of branches\n\n            if (this.createBranchCriterion == null) {\n                /*\n                 * we will default the branching to be based on workgroup id\n                 * since that is what our researchers use most often\n                 */\n                this.createBranchCriterion = 'workgroupId';\n                this.createBranchCriterionChanged();\n            }\n\n            // loop for the number of branches and create new branches objects\n            for (var b = 0; b < this.createBranchNumberOfBranches; b++) {\n\n                if (b >= this.createBranchBranches.length) {\n                    /*\n                     * we do not have a branch object for this branch number so\n                     * we will create it\n                     */\n\n                    // create the branch object\n                    var branch = {};\n\n                    // set the branch number\n                    branch.number = b + 1;\n\n                    /*\n                     * set the mapping of all the ids to order for use when choosing which items are\n                     * in the branch path\n                     */\n                    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n                    // add the branch to the array of branches\n                    this.createBranchBranches.push(branch);\n\n                    // create a transition to represent the branch\n                    var transition = {};\n\n                    if (this.createBranchCriterion == 'score') {\n                        // the branch is based on score\n\n                        // create a score criterion\n                        var criterion = {};\n                        criterion.name = this.createBranchCriterion;\n                        criterion.params = {};\n                        criterion.params.scores = [];\n\n                        if (this.createBranchNodeId != null) {\n                            // set the node for which to look for the score\n                            criterion.params.nodeId = this.createBranchNodeId;\n                        }\n\n                        if (this.createBranchComponentId != null) {\n                            // set the component for which to look for the score\n                            criterion.params.componentId = this.createBranchComponentId;\n                        }\n\n                        transition.criteria = [];\n                        transition.criteria.push(criterion);\n                    } else if (this.createBranchCriterion == 'choiceChosen') {\n                        // the branch is based on choice chosen\n                        var criterion = {};\n                        criterion.name = this.createBranchCriterion;\n                        criterion.params = {};\n                        criterion.params.choiceIds = [];\n\n                        if (this.createBranchNodeId != null) {\n                            // set the node for which to look for the score\n                            criterion.params.nodeId = this.createBranchNodeId;\n                        }\n\n                        if (this.createBranchComponentId != null) {\n                            // set the component for which to look for the score\n                            criterion.params.componentId = this.createBranchComponentId;\n                        }\n\n                        transition.criteria = [];\n                        transition.criteria.push(criterion);\n                    } else if (this.createBranchCriterion == 'workgroupId') {\n                        // workgroup id branching does not require a transition criterion\n                    } else if (this.createBranchCriterion == 'random') {\n                        // random branching does not require a transition criterion\n                    }\n\n                    // add the transition\n                    this.node.transitionLogic.transitions.push(transition);\n\n                    // save a reference to the transition in the branch\n                    branch.transition = transition;\n                }\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The branch criterion has changed\n     */\n    createBranchCriterionChanged() {\n\n        if (this.createBranchCriterion != null) {\n\n            // get this node id\n            var nodeId = this.node.id;\n\n            if (this.createBranchCriterion == 'workgroupId') {\n                // the branch is based on workgroup id\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'score') {\n                // the branch is based on score\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'choiceChosen') {\n                // the branch is based on choice chosen\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            } else if (this.createBranchCriterion == 'random') {\n                // the branch is based on random assignment\n                this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n                this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n                this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n                this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n            }\n        }\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The create branch node id has changed\n     */\n    createBranchNodeIdChanged() {\n\n        this.createBranchComponentId = null;\n\n        // get the selected node\n        var node = this.ProjectService.getNodeById(this.createBranchNodeId);\n\n        if (node != null) {\n\n            // get the components of the selected node\n            var components = node.components;\n\n            if (components != null) {\n                if (components.length == 1) {\n                    /*\n                     * there is only one component in the node so we will\n                     * automatically select it in the drop down\n                     */\n                    var component = components[0];\n                    this.createBranchComponentId = component.id;\n                }\n            }\n        }\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The create branch component id has changed\n     */\n    createBranchComponentIdChanged() {\n\n        /*\n         * update the transitions so that they have the necessary parameter\n         * fields for the given branch criterion\n         */\n        this.createBranchUpdateTransitions();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    createBranchUpdateTransitions() {\n\n        // loop through all the branches\n        for (var b = 0; b < this.createBranchBranches.length; b++) {\n\n            // get a branch object\n            var branch = this.createBranchBranches[b];\n\n            if (branch != null) {\n\n                // get the transition corresponding to the branch\n                var transition = branch.transition;\n\n                if (transition != null) {\n\n                    if (this.createBranchCriterion == 'choiceChosen') {\n                        // we are branching based on choice chosen\n\n                        // clear the criteria array\n                        transition.criteria = [];\n\n                        // create a new choice chosen criterion\n                        var criterion = {};\n                        criterion.name = 'choiceChosen';\n                        criterion.params = {};\n                        criterion.params.nodeId = this.createBranchNodeId;\n                        criterion.params.componentId = this.createBranchComponentId;\n                        criterion.params.choiceIds = [];\n\n                        // add the criterion to the array of criteria\n                        transition.criteria.push(criterion);\n\n                        /*\n                         * clear the choice id. we will set the choice id in\n                         * the branch object when we call createBranchUpdateChoiceChosenIds()\n                         */\n                        branch.choiceId = null;\n\n                        /*\n                         * clear the scores since we don't need it in choice\n                         * chosen branching\n                         */\n                        branch.scores = null;\n                    } else if (this.createBranchCriterion == 'score') {\n                        // we are branching based on score\n\n                        // clear the criteria array\n                        transition.criteria = [];\n\n                        // create a new score criterion\n                        var criterion = {};\n                        criterion.name = 'score';\n                        criterion.params = {};\n                        criterion.params.nodeId = this.createBranchNodeId;\n                        criterion.params.componentId = this.createBranchComponentId;\n                        criterion.params.scores = [];\n\n                        // re-use scores if available\n\n                        // add the criterion to the array of criteria\n                        transition.criteria.push(criterion);\n\n                        /*\n                         * clear the choice id since we don't need it in score\n                         * branching\n                         */\n                        branch.choiceId = null;\n\n                        // set the scores into the branch object\n                        branch.scores = criterion.params.scores;\n                    } else if (this.createBranchCriterion == 'workgroupId') {\n                        // we are branching based on workgroup id\n\n                        /*\n                         * remove the criteria array since it is not used for\n                         * branching based on workgroup id\n                         */\n                        delete transition['criteria'];\n\n                        // clear the node id and component id\n                        this.createBranchNodeId = null;\n                        this.createBranchComponentId = null;\n\n                        /*\n                         * clear the choice id and scores fields since we don't\n                         * need them in workgroup id branching\n                         */\n                        branch.choiceId = null;\n                        branch.scores = null;\n                    } else if (this.createBranchCriterion == 'random') {\n                        // we are branching based on random assignment\n\n                        /*\n                         * remove the criteria array since it is not used for\n                         * branching based on random assignment\n                         */\n                        delete transition['criteria'];\n\n                        // clear the node id and component id\n                        this.createBranchNodeId = null;\n                        this.createBranchComponentId = null;\n\n                        /*\n                         * clear the choice id and scores fields since we don't\n                         * need them in random branching\n                         */\n                        branch.choiceId = null;\n                        branch.scores = null;\n                    }\n                }\n            }\n        }\n\n        if (this.createBranchCriterion == 'choiceChosen') {\n            /*\n             * the branching is based on choice chosen so we will populate the\n             * choice ids\n             */\n            this.createBranchUpdateChoiceChosenIds();\n        }\n    }\n\n    /**\n     * Automatically populate the selected choices if the branch is based on\n     * choice chosen and the selected component is a multiple choice component\n     */\n    createBranchUpdateChoiceChosenIds() {\n\n        // get the node id and component id\n        var nodeId = this.createBranchNodeId;\n        var componentId = this.createBranchComponentId;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n            if (component.type == 'MultipleChoice') {\n                // the component is a multiple choice component\n\n                // get the choices from the component\n                var choices = component.choices;\n\n                if (choices != null) {\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n\n                            // get the fields of the choice\n                            var id = choice.id;\n                            var text = choice.text;\n                            var feedback = choice.feedback;\n                            var isCorrect = choice.isCorrect;\n\n                            // get the branch that corresponds to the choice\n                            var branch = this.createBranchBranches[c];\n\n                            if (branch != null) {\n                                // get the choice for this branch\n                                branch.choiceId = id;\n\n                                // make a copy of the choices from the component\n                                branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n\n                                // get the transition corresponding to the branch\n                                var transition = branch.transition;\n\n                                if (transition != null) {\n\n                                    /*\n                                     * get the first transition criterion. we will assume\n                                     * there is only one transition criterion\n                                     */\n                                    var criterion = transition.criteria[0];\n\n                                    if (criterion != null) {\n\n                                        // get the params\n                                        var params = criterion.params;\n\n                                        if (params != null) {\n\n                                            // set the node id and component id\n                                            params.nodeId = nodeId;\n                                            params.componentId = componentId;\n\n                                            if (this.createBranchCriterion == 'choiceChosen') {\n                                                // set the choice id\n                                                params.choiceIds = [];\n                                                params.choiceIds.push(id);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * A step was clicked in the create branch authoring view\n     * @param branch the branch path\n     * @param item the step that was clicked\n     */\n    createBranchStepClicked(branch, item) {\n\n        // get all the steps in order\n        var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\n\n        // an array that will hold the items that were checked\n        branch.checkedItemsInBranchPath = [];\n        var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n        // an array that will hold the node ids that were checked\n        branch.nodeIdsInBranch = [];\n\n        // used to hold the previously checked node id\n        var previousCheckedNodeId = null;\n\n        // the node id after the node that was clicked\n        var nodeIdAfter = null;\n\n        /*\n         * loop through all the items in order and set the transitions so that\n         * the steps in a branch path transition to one after the other\n         */\n        for (var i = 0; i < orderedItems.length; i++) {\n            var orderedItem = orderedItems[i];\n\n            if (orderedItem != null && orderedItem.checked) {\n                // the item is checked\n\n                if (previousCheckedNodeId != null) {\n                    // make the previous node id point to the current item\n                    var previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n                    if (previousCheckedNode != null) {\n\n                        // get the transition logic\n                        var transitionLogic = previousCheckedNode.transitionLogic;\n\n                        if (transitionLogic != null) {\n\n                            if (transitionLogic.transitions != null) {\n\n                                // clear the transitions\n                                transitionLogic.transitions = [];\n\n                                // create a new transition object to the current item\n                                var transition = {};\n                                transition.to = orderedItem.$key;\n\n                                // add the transition\n                                transitionLogic.transitions.push(transition);\n                            }\n                        }\n                    }\n                }\n\n                // add the item to the checked items array\n                checkedItemsInBranchPath.push(orderedItem);\n\n                // add the node id to the array of node ids in the branch path\n                branch.nodeIdsInBranch.push(orderedItem.$key);\n\n                // remember the previously checked node id\n                previousCheckedNodeId = orderedItem.$key;\n            }\n\n            // get the previous ordered item (checked or unchecked)\n            var previousOrderedItem = orderedItems[i - 1];\n\n            if (previousOrderedItem != null) {\n                if (previousOrderedItem.$key == item.$key) {\n                    /*\n                     * the previous item was the node that was checked/unchecked\n                     * so we will remember this item because it is the node\n                     * that comes after the node that was checked/unchecked\n                     */\n                    nodeIdAfter = orderedItem.$key;\n                }\n            }\n        }\n\n        if (this.createBranchMergePointNodeId != null) {\n            /*\n             * the merge point is specified so we will make the last checked\n             * node in this branch path point to the merge point\n             */\n\n            /*\n             * this is the last node in the branch path so we will make it\n             * transition to the merge point\n             */\n            var node = this.ProjectService.getNodeById(previousCheckedNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    if (transitionLogic.transitions != null) {\n\n                        // clear the transitions\n                        transitionLogic.transitions = [];\n\n                        // make a transition to the merge point\n                        var transition = {};\n                        transition.to = this.createBranchMergePointNodeId;\n\n                        // add the transition\n                        transitionLogic.transitions.push(transition);\n                    }\n                }\n            }\n        }\n\n        // get the branch number\n        var branchNumber = branch.number;\n\n        // get the node id that was clicked\n        var nodeId = item.$key;\n\n        // get the transition that corresponds to the branch\n        var transition = this.node.transitionLogic.transitions[branchNumber - 1];\n\n        var firstNodeId = null;\n\n        /*\n         * update the branch point transition in case the first step in the\n         * branch path has changed\n         */\n        if (transition != null) {\n\n            if (checkedItemsInBranchPath.length == 0) {\n                // there are no steps in the path\n                transition.to = null;\n            } else {\n                // get the first step in the path\n                var firstCheckedItem = checkedItemsInBranchPath[0];\n\n                if (firstCheckedItem != null) {\n                    // set the branch point transition to the first step in the path\n                    firstNodeId = firstCheckedItem.$key;\n                    transition.to = firstNodeId;\n                }\n            }\n        }\n\n        // get the node that was clicked\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // remove all branch path taken constraints from the node\n            this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n            if (item.checked) {\n                // the item was checked so we will add the branch path taken constraints to it\n\n                /*\n                 * the branch path taken constraints will be from this node to\n                 * the first node in the branch path\n                 */\n                var fromNodeId = this.nodeId;\n                var toNodeId = firstNodeId;\n\n                // add the branch path taken constraints\n                this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\n            } else {\n                /*\n                 * the item was unchecked so we will change its transition to\n                 * point to the node that comes right after it\n                 */\n                this.ProjectService.setTransition(nodeId, nodeIdAfter);\n            }\n        }\n\n        /*\n         * update the constraints of other steps in the branch path if necessary.\n         * loop through all theh checked items in the path\n         */\n        for (var n = 0; n < checkedItemsInBranchPath.length; n++) {\n\n            // get a checked item in the branch path\n            var item = checkedItemsInBranchPath[n];\n            var itemNodeId = item.$key;\n\n            // remove all branch path taken constraints from the node\n            this.ProjectService.removeBranchPathTakenNodeConstraints(itemNodeId);\n\n            /*\n             * the branch path taken constraints will be from this node to\n             * the first node in the branch path\n             */\n            var fromNodeId = this.nodeId;\n            var toNodeId = firstNodeId;\n\n            // add the branch path taken constraints\n            this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\n        }\n\n        /*\n         * update the node numbers now that a step has been added to a branch path\n         * e.g. if this is a branching step that is called\n         * 1.5 B View the Potential Energy\n         * then the node number is 1.5 B\n         */\n        this.ProjectService.calculateNodeNumbers();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The score for a path has changed in the branch authoring\n     * @param branch the branch for which the score has changed\n     */\n    createBranchScoreChanged(branch) {\n\n        if (branch != null) {\n\n            // get the transition of the branch\n            var transition = branch.transition;\n\n            if (transition != null) {\n\n                // get the scores\n                var scores = branch.scores;\n\n                if (scores != null) {\n\n                    // get the criteria\n                    var criteria = transition.criteria;\n\n                    if (criteria != null) {\n\n                        // get the first criteria. we will assume there is only one criteria\n                        var criterion = criteria[0];\n\n                        if (criterion != null) {\n\n                            // get the params of the criterion\n                            var params = criterion.params;\n\n                            if (params != null) {\n\n                                // update the scores into the params\n                                params.scores = scores;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The merge point has changed in the branch authoring\n     */\n    createBranchMergePointNodeIdChanged() {\n\n        // get the merge point node id\n        var createBranchMergePointNodeId = this.createBranchMergePointNodeId;\n\n        var branches = this.createBranchBranches;\n\n        // loop through all the branches\n        for (var b = 0; b < branches.length; b++) {\n            var branch = branches[b];\n\n            if (branch != null) {\n\n                // get the node ids in the branch path\n                var nodeIdsInBranch = branch.nodeIdsInBranch;\n\n                if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\n\n                    // get the last node id in the branch path\n                    var lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n                    if (lastNodeIdInBranchPath != null) {\n\n                        // get the last node in the branch path\n                        var lastNodeInBranchPath = this.ProjectService.getNodeById(lastNodeIdInBranchPath);\n\n                        if (lastNodeInBranchPath != null) {\n\n                            // get the transition logic of the last node\n                            var transitionLogic = lastNodeInBranchPath.transitionLogic;\n\n                            if (transitionLogic != null) {\n\n                                if (transitionLogic.transitions != null) {\n\n                                    // clear the transitions\n                                    transitionLogic.transitions = [];\n\n                                    // make a new transition to the merge point\n                                    var transition = {};\n                                    transition.to = createBranchMergePointNodeId;\n\n                                    // add the transition\n                                    transitionLogic.transitions.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * calculate the node numbers\n         * e.g. if the step is called\n         * 1.5 View the Potential Energy\n         * then the node number is 1.5\n         */\n        this.ProjectService.calculateNodeNumbers();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * The remove branch button was clicked\n     */\n    removeBranchButtonClicked() {\n\n        // ask the user if they are sure they want to remove the branch\n        var message = this.$translate('areYouSureYouWantToRemoveTheBranch');\n        var answer = confirm(message);\n\n        if (answer) {\n            // the user answered yes so we will remove the branch\n            this.removeBranch();\n        }\n    }\n\n    /**\n     * Remove the branch from the step by removing all the branch paths\n     */\n    removeBranch() {\n\n        // loop through all the branch paths\n        for (var bp = 0; bp < this.createBranchBranches.length; bp++) {\n\n            // remove a branch path\n            var branchPath = this.createBranchBranches[bp];\n            this.removeBranchPath(branchPath);\n\n            /*\n             * shift the counter back one because we have just removed a branch\n             * path\n             */\n            bp--;\n        }\n\n        // get the node id of this node (which is the branch point)\n        var nodeId = this.node.id;\n\n        // get the node id that comes after this node\n        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n\n        /*\n         * update the transition of this step to point to the next step\n         * in the project. this may be different than the next step\n         * if it was still the branch point.\n         */\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n\n        // clear the transition logic fields\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\n\n        // clear the branch authoring fields\n        this.createBranchNumberOfBranches = 1;\n        this.createBranchCriterion = null;\n        this.createBranchNodeId = null;\n        this.createBranchComponentId = null;\n        this.createBranchMergePointNodeId = null;\n\n        /*\n         * branch paths are determined by the transitions. since there is now\n         * just one transition, we will create a single branch object to\n         * represent it.\n         */\n\n        // create a branch object to hold all the related information for that branch\n        var branch = {};\n\n        // set the branch number for display purposes\n        branch.number = 1;\n\n        /*\n         * set the mapping of all the ids to order for use when choosing which items are\n         * in the branch path\n         */\n        branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n        // an array that will hold all the checked items in the branch path\n        branch.checkedItemsInBranchPath = [];\n\n        var transition = null;\n\n        // get the transition from the node\n        var transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions != null && transitions.length > 0) {\n            transition = transitions[0];\n        }\n\n        // set the transition into the branch so we can access it easily later\n        branch.transition = transition;\n\n        // add the branch to the array of branches\n        this.createBranchBranches.push(branch);\n\n        /*\n         * calculate the node numbers\n         * e.g. if the step is called\n         * 1.5 View the Potential Energy\n         * then the node number is 1.5\n         */\n        this.ProjectService.calculateNodeNumbers();\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Remove a branch path by removing all the branch path taken constraints\n     * from the steps in the branch path, resetting the transitions in the\n     * steps in the branch path, and removing the transition corresponding to\n     * the branch path in this branch point node.\n     * @param branch the branch object\n     */\n    removeBranchPath(branch) {\n\n        if (branch != null) {\n\n            // get the checked items in the branch path\n            var checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n            if (checkedItemsInBranchPath != null) {\n\n                // loop through all the checked items in the branch path\n                for (var i = 0; i < checkedItemsInBranchPath.length; i++) {\n\n                    // get an item in the branch path\n                    var checkedItem = checkedItemsInBranchPath[i];\n\n                    if (checkedItem != null) {\n\n                        // get the node id of the checked item\n                        var nodeId = checkedItem.$key;\n\n                        // remove the branchPathTaken constraints from the step\n                        this.ProjectService.removeBranchPathTakenNodeConstraints(nodeId);\n\n                        /*\n                         * update the transition of the step to point to the next step\n                         * in the project. this may be different than the next step\n                         * if it was still in the branch path.\n                         */\n                        var nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n                        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n                    }\n                }\n            }\n\n            // get the index of the branch path\n            var branchPathIndex = this.createBranchBranches.indexOf(branch);\n\n            // remove the branch path\n            this.createBranchBranches.splice(branchPathIndex, 1);\n\n            // remove the transition the corresponds to the branch path\n            this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\n        }\n    }\n\n    /**\n     * The author has changed the step rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the step rubric\n        this.node.rubric = html;\n\n        // save the project\n        this.authoringViewNodeChanged();\n    }\n\n    /**\n     * Show the component authoring views\n     */\n    showComponentAuthoring() {\n        this.showComponentAuthoringViews = true;\n    }\n\n    /**\n     * Hide the component authoring views so that the auther only sees\n     * the component numbers and component names\n     */\n    hideComponentAuthoring() {\n        this.showComponentAuthoringViews = false;\n    }\n\n    /**\n     * Show the insert buttons. This is used when choosing where to insert a\n     * component.\n     */\n    turnOnInsertComponentMode() {\n        this.insertComponentMode = true;\n    }\n\n    /**\n     * Hide the insert buttons.\n     */\n    turnOffInsertComponentMode() {\n        this.insertComponentMode = false;\n    }\n\n    /**\n     * Turn on the add component mode\n     */\n    turnOnAddComponentMode() {\n        this.addComponentMode = true;\n    }\n\n    /**\n     * Turn off the add component mode\n     */\n    turnOffAddComponentMode() {\n        this.addComponentMode = false;\n    }\n\n    /**\n     * Turn on the move component mode\n     */\n    turnOnMoveComponentMode() {\n        this.moveComponentMode = true;\n    }\n\n    /**\n     * Turn off the move component mode\n     */\n    turnOffMoveComponentMode() {\n        this.moveComponentMode = false;\n    }\n\n    /**\n     * Turn on the copy component mode\n     */\n    turnOnCopyComponentMode() {\n        this.copyComponentMode = true;\n    }\n\n    /**\n     * Turn off the copy component mode\n     */\n    turnOffCopyComponentMode() {\n        this.copyComponentMode = false;\n    }\n\n    /**\n     * Turn on the import component mode\n     */\n    turnOnImportComponentMode() {\n        this.importComponentMode = true;\n    }\n\n    /**\n     * Turn off the import component mode\n     */\n    turnOffImportComponentMode() {\n        this.importComponentMode = false;\n    }\n\n    /**\n     * Get the components that have been selected\n     * @return an array of component ids that have been selected\n     */\n    getSelectedComponentIds() {\n\n        var selectedComponents = [];\n\n        if (this.components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < this.components.length; c++) {\n                var component = this.components[c];\n\n                if (component != null && component.id != null) {\n\n                    // see if the component is checked\n                    var checked = this.componentsToChecked[component.id];\n\n                    if (checked) {\n                        // the component is checked\n                        selectedComponents.push(component.id);\n                    }\n                }\n            }\n        }\n\n        return selectedComponents;\n    }\n\n    /**\n     * Uncheck all the components\n     */\n    clearComponentsToChecked() {\n        /*\n         * clear the components to checked mappings so that all the component\n         * checkboxes are no longer checked\n         */\n        this.componentsToChecked = {};\n    }\n\n    /**\n     * Get the component numbers and component types that have been selected\n     * @return an array of strings\n     * example\n     * [\n     *     \"1. OpenResponse\",\n     *     \"3. MultipleChoice\"\n     * ]\n     */\n    getSelectedComponentNumbersAndTypes(componentIds) {\n\n        var selectedComponents = [];\n\n        if (this.components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < this.components.length; c++) {\n                var component = this.components[c];\n\n                if (component != null && component.id != null) {\n\n                    // see if the component is checked\n                    var checked = this.componentsToChecked[component.id];\n\n                    if (checked) {\n\n                        // get the component number and type example \"1. OpenResponse\"\n                        var componentNumberAndType = (c + 1) + '. ' + component.type;\n\n                        // the component is checked\n                        selectedComponents.push(componentNumberAndType);\n                    }\n                }\n            }\n        }\n\n        return selectedComponents;\n    }\n\n    /**\n     * The import button was clicked to turn on the import view\n     */\n    importButtonClicked() {\n\n        // hide the other views\n        this.nodeAuthoringViewButtonClicked('import');\n\n        if (this.showImportView) {\n\n            // turn on import mode\n            this.turnOnImportComponentMode();\n\n            if (this.myProjectsList == null) {\n                // populate the authorable projects drop down\n                this.myProjectsList = this.ConfigService.getAuthorableProjects();\n            }\n\n            if (this.libraryProjectsList == null) {\n                // populate the library projects drop down\n                this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n                    this.libraryProjectsList = libraryProjectsList;\n                });\n            }\n        }\n    }\n\n    /**\n     * The move component button was clicked\n     */\n    moveButtonClicked() {\n\n        // hide the other views\n        this.nodeAuthoringViewButtonClicked('move');\n\n        // turn off add component mode\n        this.turnOffAddComponentMode();\n\n        // turn on the move component mode\n        this.turnOnMoveComponentMode();\n\n        // turn on the insert component mode\n        this.turnOnInsertComponentMode()\n\n        // hide the component authoring\n        this.hideComponentAuthoring();\n    }\n\n    /**\n     * The copy component button was clicked\n     */\n    copyButtonClicked() {\n\n        // hide the other views\n        this.nodeAuthoringViewButtonClicked('copy');\n\n        // turn on the move component mode\n        this.turnOnCopyComponentMode();\n\n        // turn on the insert component mode\n        this.turnOnInsertComponentMode();\n\n        // hide the component authoring views\n        this.hideComponentAuthoring();\n    }\n\n    /**\n     * The delete button was clicked\n     */\n    deleteButtonClicked() {\n\n        // scroll to the top of the page\n        this.$anchorScroll('top');\n\n        /*\n         * hide all the component authoring so that the author only sees the\n         * component numbers and component types\n         */\n        this.hideComponentAuthoring();\n\n        /*\n         * Use a timeout to allow the effects of hideComponentAuthoring() to\n         * take effect. If we don't use a timeout, the user won't see any change\n         * in the UI.\n         */\n        this.$timeout(() => {\n            var confirmMessage = '';\n\n            // get the selected component numbers and types\n            var selectedComponentNumbersAndTypes = this.getSelectedComponentNumbersAndTypes();\n\n            if (selectedComponentNumbersAndTypes.length == 1) {\n                // there is one selected component\n                confirmMessage = 'Are you sure you want to delete this component?\\n';\n            } else if (selectedComponentNumbersAndTypes.length > 1) {\n                // there are multiple selected components\n                confirmMessage = 'Are you sure you want to delete these components?\\n';\n            }\n\n            // loop through all the selected components\n            for (var c = 0; c < selectedComponentNumbersAndTypes.length; c++) {\n\n                // get a component number and type\n                var selectedComponentNumberAndType = selectedComponentNumbersAndTypes[c];\n\n                // show the component number and type in the message\n                confirmMessage += '\\n' + selectedComponentNumberAndType;\n            }\n\n            // ask the user if they are sure they want to delete\n            var answer = confirm(confirmMessage);\n\n            if (answer) {\n\n                // get the selected component ids\n                var selectedComponents = this.getSelectedComponentIds();\n\n                /*\n                 * loop through all the selected component ids and delete the\n                 * components\n                 */\n                for (var c = 0; c < selectedComponents.length; c++) {\n\n                    // get a selected component id\n                    var componentId = selectedComponents[c];\n\n                    // delete the component from the node\n                    this.ProjectService.deleteComponent(this.nodeId, componentId);\n                }\n\n                // check if we need to show the node save or node submit buttons\n                this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n\n            /*\n             * Wait a small amount of time before returning the UI back to the\n             * normal view. This allows the author to see the component number\n             * and type view a little longer so that they can see the change\n             * they just made before we switch back to the normal view.\n             */\n            this.$timeout(() => {\n                // turn off the insert component mode\n                this.turnOffInsertComponentMode();\n\n                // show the component authoring\n                this.showComponentAuthoring();\n            }, 2000);\n        });\n    }\n\n    /**\n     * The cancel insert button was clicked\n     */\n    cancelInsertClicked() {\n\n        // hide the insert buttons\n        this.turnOffInsertComponentMode()\n\n        // show the component authoring views\n        this.showComponentAuthoring();\n    }\n\n    /**\n     * Check if we need to show the node save or node submit buttons\n     */\n    checkIfNeedToShowNodeSaveOrNodeSubmitButtons() {\n\n        if (this.ProjectService.doesAnyComponentShowSubmitButton(this.nodeId)) {\n            /*\n             * there is a component in this step that is showing their\n             * submit button\n             */\n        } else {\n            /*\n             * there is no component in this step that is showing their\n             * submit button\n             */\n\n            if (this.ProjectService.doesAnyComponentHaveWork(this.nodeId)) {\n                /*\n                 * there is a component that generates work so we will show\n                 * the step save button\n                 */\n                this.node.showSaveButton = true;\n                this.node.showSubmitButton = false;\n\n                // hide the save button in all the components\n                this.hideAllComponentSaveButtons();\n            } else {\n                /*\n                 * there are no components in the step that generates work\n                 * so we will not show the step save button\n                 */\n                this.node.showSaveButton = false;\n                this.node.showSubmitButton = false;\n            }\n        }\n    }\n\n    /**\n     * Insert the component so it becomes the first component in the step\n     */\n    insertComponentAsFirst() {\n\n        let newComponents = [];\n\n        if (this.addComponentMode) {\n            // create a component and add it to this node\n            var newComponent = this.ProjectService.createComponent(this.nodeId, this.selectedComponent, null);\n\n            newComponents.push(newComponent);\n\n            // turn off the add component mode\n            this.turnOffAddComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.moveComponentMode) {\n\n            // get the component ids we are moving\n            let selectedComponentIds = this.getSelectedComponentIds();\n\n            // move the components to their new location\n            newComponents = this.ProjectService.moveComponent(this.nodeId, selectedComponentIds, null);\n\n            // turn off the move component mode\n            this.turnOffMoveComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.copyComponentMode) {\n\n            // get the component ids we are moving\n            let selectedComponentIds = this.getSelectedComponentIds();\n\n            // copy the components to their new location\n            newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, null);\n\n            // turn off the copy component mode\n            this.turnOffCopyComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.importComponentMode) {\n\n            // import the selected components and insert them\n            this.importComponents(this.nodeId).then((newComponents) => {\n\n                // turn off import component mode\n                this.turnOffImportComponentMode();\n\n                // save the project\n                this.ProjectService.saveProject();\n\n                /*\n                 * temporarily highlight the new components and then show the component\n                 * authoring views\n                 */\n                this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n                /*\n                 * refresh the project assets in case any of the imported\n                 * components also imported assets\n                 */\n                this.ProjectAssetService.retrieveProjectAssets();\n            });\n        }\n    }\n\n    /**\n     * Insert the component after the given component id\n     * @param componentId insert the component after this given component id\n     */\n    insertComponentAfter(componentId) {\n\n        let newComponents = [];\n\n        if (this.addComponentMode) {\n            // create a component and add it to this node\n            var newComponent = this.ProjectService.createComponent(this.nodeId, this.selectedComponent, componentId);\n\n            newComponents.push(newComponent);\n\n            // turn off the add component mode\n            this.turnOffAddComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.moveComponentMode) {\n\n            // get the component ids we are moving\n            var selectedComponentIds = this.getSelectedComponentIds();\n\n            // move the components to their new location\n            newComponents = this.ProjectService.moveComponent(this.nodeId, selectedComponentIds, componentId);\n\n            // turn off the move component mode\n            this.turnOffMoveComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.copyComponentMode) {\n\n            // get the component ids we are moving\n            var selectedComponentIds = this.getSelectedComponentIds();\n\n            // copy the components to their new location\n            newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, componentId);\n\n            // turn off the copy component mode\n            this.turnOffCopyComponentMode();\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            /*\n             * temporarily highlight the new components and then show the component\n             * authoring views\n             */\n            this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n        } else if (this.importComponentMode) {\n\n            // import the selected components and insert them\n            newComponents = this.importComponents(this.nodeId, componentId).then((newComponents) => {\n                // turn off import component mode\n                this.turnOffImportComponentMode();\n\n                // save the project\n                this.ProjectService.saveProject();\n\n                /*\n                 * temporarily highlight the new components and then show the component\n                 * authoring views\n                 */\n                this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n                /*\n                 * refresh the project assets in case any of the imported\n                 * components also imported assets\n                 */\n                this.ProjectAssetService.retrieveProjectAssets();\n            });\n        }\n    }\n\n    /**\n     * Temporarily highlight the new components and then show the component\n     * authoring views\n     * @param newComponents an array of the new components we have just added\n     */\n    highlightNewComponentsAndThenShowComponentAuthoring(newComponents) {\n\n        // use a timeout to allow the components time to show up in the UI\n        this.$timeout(() => {\n            if (newComponents != null) {\n\n                var scrollPosition = null;\n\n                // loop through all the new components\n                for (var n = 0; n < newComponents.length; n++) {\n                    var newComponent = newComponents[n];\n\n                    if (newComponent != null) {\n\n                        // get the component UI element\n                        let componentElement = $(\"#\" + newComponent.id);\n\n                        // save the original background color\n                        let originalBackgroundColor = componentElement.css(\"backgroundColor\");\n\n                        // highlight the background briefly to draw attention to it\n                        componentElement.css(\"background-color\", \"#FFFF9C\");\n\n                        /*\n                         * Use a timeout before starting to transition back to\n                         * the original background color. For some reason the\n                         * element won't get highlighted in the first place\n                         * unless this timeout is used.\n                         */\n                        this.$timeout(() => {\n                            // slowly fade back to original background color\n                            componentElement.css({\n                                'transition': 'background-color 3s ease-in-out',\n                                'background-color': originalBackgroundColor\n                            });\n                        });\n                    }\n                }\n            }\n\n            /*\n             * Wait a small amount of time before returning the UI back to the\n             * normal view. This allows the author to see the component number\n             * and type view a little longer so that they can see the change\n             * they just made before we switch back to the normal view.\n             */\n            this.$timeout(() => {\n                // show the component authoring\n                this.showComponentAuthoring();\n\n                // turn off the insert component mode\n                this.turnOffInsertComponentMode();\n\n                // hide the create component elements\n                this.showCreateComponent = false;\n\n                // uncheck all the component checkboxes\n                this.clearComponentsToChecked();\n\n                /*\n                 * use a timeout to wait for the UI to update and then scroll\n                 * to the first new component\n                 */\n                this.$timeout(() => {\n\n                    if (newComponents != null && newComponents.length > 0) {\n\n                        // get the UI element of the first new component\n                        let componentElement = $(\"#\" + newComponents[0].id);\n\n                        if (componentElement != null) {\n                            // scroll to the first new component that we've added\n                            $('#content').animate({\n                                scrollTop: componentElement.prop(\"offsetTop\") - 60\n                            }, 1000);\n                        }\n                    }\n                });\n            }, 2000);\n        });\n    }\n\n\n    /**\n     * The author has chosen an authorable project to import from\n     * @param importProjectId the project id to import from\n     */\n    showMyImportProject(importProjectId) {\n\n        // clear the select drop down for the library project\n        this.importLibraryProjectId = null;\n\n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n\n    /**\n     * The author has chosen a library project to import from\n     * @param importProjectId the project id to import from\n     */\n    showLibraryImportProject(importProjectId) {\n        this.importMyProjectId = null;\n\n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n\n    /**\n     * Show the project we want to import steps from\n     * @param importProjectId the import project id\n     */\n    showImportProject(importProjectId) {\n\n        this.importProjectId = importProjectId;\n\n        if (this.importProjectId == null) {\n            // clear all the import project values\n            this.importProjectIdToOrder = {};\n            this.importProjectItems = [];\n            this.importMyProjectId = null;\n            this.importLibraryProjectId = null;\n            this.importProjectId = null;\n            this.importProject = null;\n        } else {\n            // get the import project\n            this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n\n                // create the mapping of node id to order for the import project\n                this.importProjectIdToOrder = {};\n                this.importProject = projectJSON;\n\n                // calculate the node order of the import project\n                var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n                this.importProjectIdToOrder = result.idToOrder;\n                this.importProjectItems = result.nodes;\n            });\n        }\n    }\n\n    /**\n     * Import the selected steps\n     */\n    importComponentsButtonClicked() {\n\n        // get the components that were selected\n        var selectedComponents = this.getSelectedComponentsToImport();\n\n        if (selectedComponents == null || selectedComponents.length == 0) {\n            // the author did not select any components to import\n            alert('Please select a component to import.');\n        } else {\n\n            /*\n             * hide the import view because we want to go back to the\n             * project view so that the author can choose where to place\n             * the new steps\n             */\n            this.showImportView = false;\n            this.turnOnInsertComponentMode();\n            this.hideComponentAuthoring();\n\n            // scroll to the top of the page\n            this.$anchorScroll('top');\n        }\n    }\n\n\n    /**\n     * Get the selected components to import\n     * @return an array of selected components\n     */\n    getSelectedComponentsToImport() {\n        var selectedComponents = [];\n\n        // loop through all the import project items\n        for (var n = 0; n < this.importProjectItems.length; n++) {\n            var item = this.importProjectItems[n];\n\n            if (item != null && item.node != null && item.node.components != null) {\n\n                // get the components in the node\n                var components = item.node.components;\n\n                // loop through all the components in the node\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null && component.checked) {\n                        /*\n                         * this component is checked so we will add it to\n                         * the array of components that we will import\n                         */\n                        selectedComponents.push(component);\n                    }\n                }\n            }\n        }\n\n        return selectedComponents;\n    }\n\n    /**\n     * Get the components that were selected\n     * @param insertAfterComponentId (optional) Insert the components after this\n     * component id. If this is null, we will insert the components at the\n     * beginning of the step.\n     */\n    importComponents(nodeId, insertAfterComponentId) {\n\n        // get all the selected component objects\n        var selectedComponents = this.getSelectedComponentsToImport();\n\n        // loop through all the selected component objects\n        for (var c = 0; c < selectedComponents.length; c++) {\n            var selectedComponent = selectedComponents[c];\n\n            if (selectedComponent != null) {\n                // remove the checked field\n                delete selectedComponent.checked;\n            }\n        }\n\n        // insert the components into the project\n         return this.ProjectService.importComponents(selectedComponents, this.importProjectId, nodeId, insertAfterComponentId).then((newComponents) => {\n             return newComponents;\n         });\n    }\n\n\n    /**\n     * Preview the import project\n     */\n    previewImportProject() {\n\n        if (this.importProject != null) {\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n\n            // open the preview step in a new tab\n            window.open(previewProjectURL);\n        }\n    }\n\n    /**\n     * Preview the step\n     * @param node\n     */\n    previewImportNode(node) {\n\n        if (node != null) {\n\n            // get the node id\n            var nodeId = node.id;\n\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n\n            // create the url to preview the step\n            var previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n\n    /**\n     * Preview the component\n     * @param node the node\n     * @param componentId the component id\n     */\n    previewImportComponent(node, componentId) {\n        if (node != null) {\n\n            // get the node id\n            var nodeId = node.id;\n\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n\n            // create the url to preview the step\n            var previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId + \"/\" + componentId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n};\n\nNodeAuthoringController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$mdDialog',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'ConfigService',\n    'NodeService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default NodeAuthoringController;\n"]}