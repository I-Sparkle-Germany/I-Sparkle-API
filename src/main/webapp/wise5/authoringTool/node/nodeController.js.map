{"version":3,"sources":["nodeController.es6"],"names":[],"mappings":"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","file":"nodeController.js","sourcesContent":["'use strict';\n\nclass NodeController {\n\n    constructor($anchorScroll,\n                $location,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n\n        // the array of component types that can be created\n        this.componentTypes = [\n            {componentType: 'Discussion', componentName: 'Discussion'},\n            {componentType: 'Draw', componentName: 'Draw'},\n            {componentType: 'Embedded', componentName: 'Embedded'},\n            {componentType: 'Graph', componentName: 'Graph'},\n            {componentType: 'HTML', componentName: 'HTML'},\n            {componentType: 'Label', componentName: 'Label'},\n            {componentType: 'Match', componentName: 'Match'},\n            {componentType: 'MultipleChoice', componentName: 'Multiple Choice'},\n            {componentType: 'OpenResponse', componentName: 'Open Response'},\n            {componentType: 'OutsideURL', componentName: 'Outside URL'},\n            {componentType: 'Table', componentName: 'Table'}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        this.$state.go('root.project', {projectId: this.projectId});\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            var result = confirm('Are you sure you want to undo all the recent changes?');\n\n            if (result) {\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                // save the project\n                this.ProjectService.saveProject();\n\n                // close the node authoring view\n                this.close();\n            }\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Create a component in this node\n     */\n    createComponent() {\n\n        // create a component and add it to this node\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // Scroll to the bottom of the page where the new component was added\n        this.$timeout(() => {\n            this.$location.hash('bottom');\n            this.$anchorScroll();\n        });\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        // ask the user to confirm the delete\n        var answer = confirm('Are you sure you want to delete this component?');\n\n        if (answer) {\n            // the user confirmed yes\n\n            // delete the component from the node\n            this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n            // save the project\n            this.ProjectService.saveProject();\n        }\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            alert('There are no changes to undo.');\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            var result = confirm('Are you sure you want to undo the last change?');\n\n            if (result) {\n                // get the previous version of the node\n                var nodeCopy = this.undoStack.pop();\n\n                // revert the node back to the previous version\n                this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                // get the node\n                this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                // get the components in the node\n                this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n        }\n    }\n};\n\nNodeController.$inject = ['$anchorScroll', '$location', '$scope', '$state', '$stateParams', '$timeout', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default NodeController;\n"]}