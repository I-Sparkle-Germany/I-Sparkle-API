{"version":3,"sources":["nodeController.es6"],"names":[],"mappings":"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","file":"nodeController.js","sourcesContent":["'use strict';\n\nclass NodeController {\n\n    constructor($anchorScroll,\n                $location,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                $translate,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.showEditTransitions = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"studentDataChanged\"];\n        this.canChangePathOptions = [null, true, false];\n\n        // the array of component types that can be created\n        this.componentTypes = [\n            {componentType: 'AudioOscillator', componentName: 'Audio Oscillator'},\n            {componentType: 'ConceptMap', componentName: 'Concept Map'},\n            {componentType: 'Discussion', componentName: 'Discussion'},\n            {componentType: 'Draw', componentName: 'Draw'},\n            {componentType: 'Embedded', componentName: 'Embedded'},\n            {componentType: 'Graph', componentName: 'Graph'},\n            {componentType: 'HTML', componentName: 'HTML'},\n            {componentType: 'Label', componentName: 'Label'},\n            {componentType: 'Match', componentName: 'Match'},\n            {componentType: 'MultipleChoice', componentName: 'Multiple Choice'},\n            {componentType: 'OpenResponse', componentName: 'Open Response'},\n            {componentType: 'OutsideURL', componentName: 'Outside URL'},\n            {componentType: 'Table', componentName: 'Table'}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the step number e.g. 1.3\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n    \n    /**\n     * Launch VLE with this current step as the initial step without constraints\n     */\n    previewStepWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        // perform any node cleanup if necessary\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n        \n        this.$state.go('root.project', {projectId: this.projectId});\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            this.$translate('confirmUndo').then((confirmUndo) => {\n                var result = confirm(confirmUndo);\n\n                if (result) {\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n\n                    // close the node authoring view\n                    this.close();\n                }\n            });\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Add a new transition for this node.\n     */\n    addNewTransition() {\n        if (this.node.transitionLogic.transitions == null) {\n            this.node.transitionLogic.transitions = [];\n        }\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        if (nodeTransitions.length > 0) {\n            // If this node already has transitions, copy the last one.\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n            let newTransition = {\n                \"to\": lastNodeTransition.to\n            };\n            nodeTransitions.push(newTransition);\n        } else {\n            // Otherwise set the new transition to the current nodeId\n            let newTransition = {\n                \"to\": this.nodeId\n            };\n            nodeTransitions.push(newTransition);\n        }\n    }\n\n    /**\n     * Add a new transition for the specified transition.\n     */\n    addNewTransitionCriteria(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        for (var n = 0; n < nodeTransitions.length; n++) {\n            let nodeTransition = nodeTransitions[n];\n            if (nodeTransition == transition) {\n                if (nodeTransition.criteria == null) {\n                    nodeTransition.criteria = [];\n                }\n                let newTransitionCriteria = {\n                    \"nodeId\": \"\",\n                    \"componentId\": \"\",\n                    \"function\": {}\n                };\n                nodeTransition.criteria.push(newTransitionCriteria);\n            }\n        }\n    }\n\n    /**\n     * Deletes the specified transition from this node\n     */\n    deleteTransition(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n\n        let index = nodeTransitions.indexOf(transition);\n        if (index > -1) {\n            nodeTransitions.splice(index, 1);\n        }\n    }\n\n\n    /**\n     * Save transitions for this node\n     */\n    saveTransitions() {\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showEditTransitions = false;\n    }\n\n    /**\n     * Create a component in this node\n     */\n    createComponent() {\n\n        // create a component and add it to this node\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // Scroll to the bottom of the page where the new component was added\n        this.$timeout(() => {\n            this.$location.hash('bottom');\n            this.$anchorScroll();\n        });\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        this.$translate('confirmDeleteComponent').then((confirmDeleteComponent) => {\n\n            // ask the user to confirm the delete\n            var answer = confirm(confirmDeleteComponent);\n\n            if (answer) {\n                // the user confirmed yes\n\n                // delete the component from the node\n                this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n        });\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            this.$translate('noUndoAvailable').then((noUndoAvailable) => {\n                alert(noUndoAvailable);\n            });\n\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            this.$translate('confirmUndoLastChange').then((confirmUndoLastChange) => {\n\n                // ask the user to confirm the delete\n                var result = confirm(confirmUndoLastChange);\n\n                if (result) {\n                    // perform any node cleanup if necessary\n                    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n                    \n                    // get the previous version of the node\n                    var nodeCopy = this.undoStack.pop();\n\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                    // get the node\n                    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                    // get the components in the node\n                    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n                }\n            });\n        }\n    }\n};\n\nNodeController.$inject = ['$anchorScroll', '$location', '$scope', '$state', '$stateParams', '$timeout', '$translate', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default NodeController;\n"]}