{"version":3,"sources":["nodeController.es6"],"names":[],"mappings":"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","file":"nodeController.js","sourcesContent":["'use strict';\n\nclass NodeController {\n\n    constructor($anchorScroll,\n                $location,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                $translate,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.projectId = $stateParams.projectId;\n        this.nodeId = $stateParams.nodeId;\n        this.showCreateComponent = false;\n        this.showEditTransitions = false;\n        this.selectedComponent = null;\n        this.nodeCopy = null;\n        this.undoStack = [];\n        this.howToChooseAmongAvailablePathsOptions = [null, \"random\", \"workgroupId\", \"firstAvailable\", \"lastAvailable\"];\n        this.whenToChoosePathOptions = [null, \"enterNode\", \"exitNode\", \"studentDataChanged\"];\n        this.canChangePathOptions = [null, true, false];\n\n        // the array of component types that can be created\n        this.componentTypes = [\n            {componentType: 'AudioOscillator', componentName: 'Audio Oscillator'},\n            {componentType: 'ConceptMap', componentName: 'Concept Map'},\n            {componentType: 'Discussion', componentName: 'Discussion'},\n            {componentType: 'Draw', componentName: 'Draw'},\n            {componentType: 'Embedded', componentName: 'Embedded'},\n            {componentType: 'Graph', componentName: 'Graph'},\n            {componentType: 'HTML', componentName: 'HTML'},\n            {componentType: 'Label', componentName: 'Label'},\n            {componentType: 'Match', componentName: 'Match'},\n            {componentType: 'MultipleChoice', componentName: 'Multiple Choice'},\n            {componentType: 'OpenResponse', componentName: 'Open Response'},\n            {componentType: 'OutsideURL', componentName: 'Outside URL'},\n            {componentType: 'Table', componentName: 'Table'}\n        ];\n\n        // set the drop down to the first item\n        this.selectedComponent = this.componentTypes[0].componentType;\n\n        // get the node\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n\n        // get the step number e.g. 1.3\n        this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n        // get the components in the node\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n        /*\n         * remember a copy of the node at the beginning of this node authoring\n         * session in case we need to roll back if the user decides to\n         * cancel/revert all the changes.\n         */\n        this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n        /*\n         * remember the current version of the node. this will be updated each\n         * time the user makes a change.\n         */\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Launch VLE with this current step as the initial step\n     */\n    previewStep() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n    \n    /**\n     * Launch VLE with this current step as the initial step without constraints\n     */\n    previewStepWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        let previewStepURL  = previewProjectURL + \"?constraints=false\" + \"#/vle/\" + this.nodeId;\n        window.open(previewStepURL);\n    };\n\n    /**\n     * Close the node authoring view\n     */\n    close() {\n        // perform any node cleanup if necessary\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n        \n        this.$state.go('root.project', {projectId: this.projectId});\n    };\n\n    /**\n     * The author has clicked the cancel button which will revert all\n     * the recent changes since they opened the node.\n     */\n    cancel() {\n\n        // check if the user has made any changes\n        if (!angular.equals(this.node, this.originalNodeCopy)) {\n            // the user has made changes\n\n            this.$translate('confirmUndo').then((confirmUndo) => {\n                var result = confirm(confirmUndo);\n\n                if (result) {\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n\n                    // close the node authoring view\n                    this.close();\n                }\n            });\n        } else {\n            // the user has not made any changes\n\n            //close the node authoring view\n            this.close();\n        }\n    }\n\n    /**\n     * Add a new transition for this node.\n     */\n    addNewTransition() {\n        if (this.node.transitionLogic.transitions == null) {\n            this.node.transitionLogic.transitions = [];\n        }\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        if (nodeTransitions.length > 0) {\n            // If this node already has transitions, copy the last one.\n            let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n            let newTransition = {\n                \"to\": lastNodeTransition.to\n            };\n            nodeTransitions.push(newTransition);\n        } else {\n            // Otherwise set the new transition to the current nodeId\n            let newTransition = {\n                \"to\": this.nodeId\n            };\n            nodeTransitions.push(newTransition);\n        }\n    }\n\n    /**\n     * Add a new transition for the specified transition.\n     */\n    addNewTransitionCriteria(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n        for (var n = 0; n < nodeTransitions.length; n++) {\n            let nodeTransition = nodeTransitions[n];\n            if (nodeTransition == transition) {\n                if (nodeTransition.criteria == null) {\n                    nodeTransition.criteria = [];\n                }\n                let newTransitionCriteria = {\n                    \"nodeId\": \"\",\n                    \"componentId\": \"\",\n                    \"function\": {}\n                };\n                nodeTransition.criteria.push(newTransitionCriteria);\n            }\n        }\n    }\n\n    /**\n     * Deletes the specified transition from this node\n     */\n    deleteTransition(transition) {\n        let nodeTransitions = this.node.transitionLogic.transitions;\n\n        let index = nodeTransitions.indexOf(transition);\n        if (index > -1) {\n            nodeTransitions.splice(index, 1);\n        }\n    }\n\n\n    /**\n     * Save transitions for this node\n     */\n    saveTransitions() {\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showEditTransitions = false;\n    }\n\n    /**\n     * Create a component in this node\n     */\n    createComponent() {\n\n        // create a component and add it to this node\n        this.ProjectService.createComponent(this.nodeId, this.selectedComponent);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // hide the create component elements\n        this.showCreateComponent = false;\n\n        // Scroll to the bottom of the page where the new component was added\n        this.$timeout(() => {\n            this.$location.hash('bottom');\n            this.$anchorScroll();\n        });\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentUp(componentId) {\n\n        // move the component up within the node\n        this.ProjectService.moveComponentUp(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Move a component up within this node\n     * @param componentId the component id\n     */\n    moveComponentDown(componentId) {\n\n        // move the component down within the node\n        this.ProjectService.moveComponentDown(this.nodeId, componentId);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Delete the component from this node\n     * @param componentId the component id\n     */\n    deleteComponent(componentId) {\n\n        this.$translate('confirmDeleteComponent').then((confirmDeleteComponent) => {\n\n            // ask the user to confirm the delete\n            var answer = confirm(confirmDeleteComponent);\n\n            if (answer) {\n                // the user confirmed yes\n\n                // delete the component from the node\n                this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n                // save the project\n                this.ProjectService.saveProject();\n            }\n        });\n    }\n\n    /**\n     * The node has changed in the authoring view\n     */\n    authoringViewNodeChanged() {\n        // put the previous version of the node on to the undo stack\n        this.undoStack.push(this.currentNodeCopy);\n\n        // save the project\n        this.ProjectService.saveProject();\n\n        // update the current node copy\n        this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n    }\n\n    /**\n     * Undo the last change by reverting the node to the previous version\n     */\n    undo() {\n\n        if (this.undoStack.length === 0) {\n            // the undo stack is empty so there are no changes to undo\n            this.$translate('noUndoAvailable').then((noUndoAvailable) => {\n                alert(noUndoAvailable);\n            });\n\n        } else if (this.undoStack.length > 0) {\n            // the undo stack has elements\n\n            this.$translate('confirmUndoLastChange').then((confirmUndoLastChange) => {\n\n                // ask the user to confirm the delete\n                var result = confirm(confirmUndoLastChange);\n\n                if (result) {\n                    // perform any node cleanup if necessary\n                    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n                    \n                    // get the previous version of the node\n                    var nodeCopy = this.undoStack.pop();\n\n                    // revert the node back to the previous version\n                    this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n                    // get the node\n                    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n                    // get the components in the node\n                    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n                    // save the project\n                    this.ProjectService.saveProject();\n                }\n            });\n        }\n    }\n};\n\nNodeController.$inject = ['$anchorScroll', '$location', '$scope', '$state', '$stateParams', '$timeout', '$translate', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default NodeController;\n"]}