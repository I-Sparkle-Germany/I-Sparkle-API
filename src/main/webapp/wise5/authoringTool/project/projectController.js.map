{"version":3,"sources":["projectController.es6"],"names":[],"mappings":"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","file":"projectController.js","sourcesContent":["class ProjectController {\n\n    constructor($scope, $state, $stateParams, ProjectService, ConfigService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.ProjectService = ProjectService;\n        this.ConfigService = ConfigService;\n\n        this.title = \"project controller\";\n        this.project = this.ProjectService.getProject();\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n        this.updateProjectAsText();\n\n        $scope.$watch(angular.bind(this, function() {\n            return this.projectAsText;\n        }), angular.bind(this, function () {\n            try {\n                this.project = JSON.parse(this.projectAsText);\n            } catch(exp) {\n                //Exception handler\n            };\n        }));\n\n        this.showCommitHistory();\n    };\n\n    // updates projectAsText field, which is the string representation of the project that we'll show in the textarea\n    updateProjectAsText() {\n        this.projectAsText = JSON.stringify(this.project, null, 4);\n    };\n\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.asset', {});\n    };\n\n    saveProject() {\n        let projectJSONString = JSON.stringify(this.project, null, 4);\n        let commitMessage = $(\"#commitMessageInput\").val();\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            JSON.parse(projectJSONString);\n\n            this.ProjectService.saveProject(projectJSONString, commitMessage).then(angular.bind(this, function(commitHistoryArray) {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            }));\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    showCommitHistory() {\n        this.ProjectService.getCommitHistory().then(angular.bind(this, function (commitHistoryArray) {\n            this.commitHistory = commitHistoryArray;\n        }));\n    }\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.$state.go('root.node', {nodeId:nodeId});\n    };\n}\n\nProjectController.$inject = ['$scope', '$state', '$stateParams', 'ProjectService', 'ConfigService'];\n\nexport default ProjectController;\n"]}