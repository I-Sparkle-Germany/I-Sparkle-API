{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$anchorScroll","$filter","$interval","$mdDialog","$q","$rootScope","$scope","$state","$stateParams","$timeout","AuthorWebSocketService","ConfigService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","projectScriptFilename","getProjectScriptFilename","currentAuthorsMessage","projectMode","showImportView","importMode","editProjectRubricMode","advancedMode","showJSONAuthoring","stepBackgroundColors","setCurrentNode","scrollToTopOfPage","metadata","getProjectMetadata","notifyAuthorProjectBegin","summernoteRubricId","summernoteRubricHTML","replaceAssetPaths","getProjectRubric","insertAssetString","insertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","$on","event","args","currentAuthorsUsernames","myUserName","getMyUserName","splice","indexOf","length","currentAuthors","join","notifyAuthorProjectEnd","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","projectScriptFilenameChanged","hide","toState","toParams","fromState","fromParams","stateName","name","saveEvent","parseProject","data","constraints","window","open","getConfigParam","go","commitMessage","saveProject","then","commitHistoryArray","commitHistory","val","error","alert","location","href","getWISEBaseURL","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","endCurrentNodeAndSetCurrentNodeByNodeId","newGroup","createGroup","createGroupTitle","nodeToAdd","insertGroupMode","createMode","newNode","createNode","createNodeTitle","insertNodeMode","handleCreateModeInsert","moveMode","handleMoveModeInsert","copyMode","handleCopyModeInsert","importSelectedNodes","type","createNodeInside","createNodeAfter","newNodes","temporarilyHighlightNewNodes","checkPotentialStartNodeIdChangeThenSaveProject","id","getNodePositionAndTitleByNodeId","selectedNodeIds","getSelectedItems","nodes","selectedNodeId","node","push","moveNodesInside","moveNodesAfter","firstNewNode","n","toTitle","activitiesMoved","stepsMoved","copyNodesInside","copyNodesAfter","toNodeId","activitiesCopied","stepsCopied","nodeIdToInsertInsideOrAfter","selectedNodes","getSelectedNodesToImport","selectedNodeTitles","getSelectedNodeTitlesToImport","toProjectId","fromProjectId","importProjectId","performImport","nodeElement","originalBackgroundColor","css","animate","scrollTop","prop","stepsImported","selectedNode","selectedNodeTitle","tempNode","parseInt","fromNodeId","fromTitle","copyNodes","toggleView","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProject","showProjectHome","retrieveProjectAssets","selectedItemTypes","getSelectedItemTypes","confirmMessage","confirm","deletedStartNodeId","activityDeleted","stepDeleted","stepsDeleted","activitiesDeleted","getNodeById","title","isStartNodeId","stepsInActivityDeleted","ids","stepNodeId","stepTitle","stepObject","deleteNode","updateStartNodeId","unselectAllItems","angular","forEach","value","key","checked","inactiveNode","nodeType","inactiveNodeType","createGroupTitleInput","getElementById","focus","createNodeTitleInput","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","firstLeafNodeId","getFirstLeafNodeId","currentStartNodeId","getStartNodeId","firstLeafNode","firstChildTitle","confirmUpdateStartStep","startStepTitle","doUpdateStartStep","checkPotentialStartNodeIdChange","setProjectTitle","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","previewProjectURL","previewStepURL","item","projectJSONString","toJson","project","fromJson","setProject","html","removeAbsoluteAssetPaths","insertWISELinks","setProjectRubric","isNodeInAnyBranchPath","setProjectScriptFilename","openAssetChooserParams","popup","$broadcast","view","eventName","category","context","componentType","stepNumber","color","branchPathLetter","getBranchPathLetter","letterASCIICode","charCodeAt","branchPathNumber","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,iB;AAEJ,6BACIC,aADJ,EAEIC,OAFJ,EAGIC,SAHJ,EAIIC,SAJJ,EAKIC,EALJ,EAMIC,UANJ,EAOIC,MAPJ,EAQIC,MARJ,EASIC,YATJ,EAUIC,QAVJ,EAWIC,sBAXJ,EAYIC,aAZJ,EAaIC,mBAbJ,EAcIC,cAdJ,EAeIC,kBAfJ,EAgBIC,WAhBJ,EAgBiB;AAAA;;AAAA;;AACf,SAAKf,aAAL,GAAqBA,aAArB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKO,UAAL,GAAkB,KAAKf,OAAL,CAAa,WAAb,CAAlB;AACA,SAAKS,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;;AAEA,SAAKE,SAAL,GAAiB,KAAKT,YAAL,CAAkBS,SAAnC;AACA,SAAKC,KAAL,GAAa,KAAKP,aAAL,CAAmBQ,QAAnB,EAAb;AACA,SAAKC,KAAL,GAAa,KAAKP,cAAL,CAAoBQ,SAAjC;AACA,SAAKC,OAAL,GAAe,KAAKT,cAAL,CAAoBU,4BAApB,EAAf;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,YAAL,GAAoB,KAAKb,cAAL,CAAoBc,eAApB,EAApB;AACA,SAAKC,cAAL,GAAsB,KAAKf,cAAL,CAAoBgB,iBAApB,EAAtB;AACA,SAAKC,aAAL,GAAqB,KAAKjB,cAAL,CAAoBkB,gBAApB,EAArB;AACA,SAAKC,qBAAL,GAA6B,KAAKnB,cAAL,CAAoBoB,wBAApB,EAA7B;;AAEA;AACA;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKX,eAAL,GAAuB,KAAvB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKW,cAAL,GAAsB,KAAtB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,iBAAL,GAAyB,KAAzB;;AAEA;;;;;;AAMA,SAAKC,oBAAL,GAA4B,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EACxB,SADwB,EACd,SADc,EACJ,SADI,EACM,SADN,CAA5B;;AAGA;AACA,SAAK3B,kBAAL,CAAwB4B,cAAxB,CAAuC,IAAvC;;AAEA,SAAKC,iBAAL;;AAEA;AACA,SAAKC,QAAL,GAAgB,KAAK/B,cAAL,CAAoBgC,kBAApB,EAAhB;;AAEA;AACA,SAAKhC,cAAL,CAAoBiC,wBAApB,CAA6C,KAAK7B,SAAlD;;AAEA;AACA,SAAK8B,kBAAL,GAA0B,sBAAsB,KAAK9B,SAArD;;AAEA;AACA,SAAK+B,oBAAL,GAA4B,KAAKnC,cAAL,CACvBoC,iBADuB,CACL,KAAKpC,cAAL,CAAoBqC,gBAApB,EADK,CAA5B;;AAGA;AACA,QAAIC,oBAAoB,KAAKnC,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;;;;AAIA,QAAIoC,oBAAoB,KAAKrC,WAAL,CAAiBsC,uBAAjB,CAAyC,IAAzC,EAClB,KAAKpC,SADa,EACF,IADE,EACI,IADJ,EACU,QADV,EACoBkC,iBADpB,CAAxB;;AAGA;;;;AAIA,SAAKG,uBAAL,GAA+B;AAC7BC,eAAS,CACP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADO,EAEP,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFO,EAGP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHO,EAIP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJO,EAKP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALO,EAMP,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANO,EAOP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPO,EAQP,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARO,EASP,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATO,EAUP,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVO,CADoB;AAa7BC,cAAQ,GAbqB;AAc7BC,0BAAoB,IAdS;AAe7BC,eAAS;AACPN,2BAAmBA;AADZ;AAfoB,KAA/B;;AAoBA,SAAK9C,MAAL,CAAYqD,GAAZ,CAAgB,wBAAhB,EAA0C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACzD,UAAIC,0BAA0BD,KAAKC,uBAAnC;AACA,UAAIC,aAAa,MAAKpD,aAAL,CAAmBqD,aAAnB,EAAjB;;AAEA;AACAF,8BAAwBG,MAAxB,CAA+BH,wBAAwBI,OAAxB,CAAgCH,UAAhC,CAA/B,EAA2E,CAA3E;AACA,UAAID,wBAAwBK,MAAxB,GAAiC,CAArC,EAAwC;AACtC,cAAKjC,qBAAL,GAA6B,MAAKlB,UAAL,CAAgB,0BAAhB,EACzB,EAAEoD,gBAAgBN,wBAAwBO,IAAxB,CAA6B,IAA7B,CAAlB,EADyB,CAA7B;AAED,OAHD,MAGO;AACL,cAAKnC,qBAAL,GAA6B,EAA7B;AACD;AACF,KAZD;;AAcA,SAAK5B,MAAL,CAAYqD,GAAZ,CAAgB,UAAhB,EAA4B,YAAM;AAChC;AACA,YAAK9C,cAAL,CAAoByD,sBAApB,CAA2C,MAAKrD,SAAhD;AACD,KAHD;;AAKA;;;;AAIA,SAAKX,MAAL,CAAYqD,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD;AACA,UAAIA,QAAQ,IAAR,IAAgBA,KAAK5C,SAAL,IAAkB,MAAKA,SAA3C,EAAsD;AACpD;AACA,YAAIsD,YAAYV,KAAKU,SAArB;AACA,YAAIA,aAAa,IAAb,IAAqBA,UAAUC,QAAV,IAAsB,IAA/C,EAAqD;AACnD,cAAIA,WAAWD,UAAUC,QAAzB;;AAEA;;;;;AAKA,cAAIC,sBACA,MAAK9D,aAAL,CAAmB+D,6BAAnB,EADJ;AAEA,cAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;AACA,cAAII,eAAe,EAAnB;;AAEA,cAAIf,KAAKgB,MAAL,IAAe,QAAnB,EAA6B;AAC3B;AACAD,2BAAe,sBAAsB,MAAK3D,SAA1C;;AAEA,gBAAI2D,gBAAgB,EAApB,EAAwB;AACtB,kBAAI,MAAK7D,WAAL,CAAiB+D,OAAjB,CAAyBN,QAAzB,CAAJ,EAAwC;AACtC;;;;AAIAO,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACD,eAVD,MAUO,IAAI,MAAKzD,WAAL,CAAiBkE,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC7C;;;;AAIAO,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA,oBAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,6BAAaG,QAAb,GAAwB,MAAxB;AACAH,6BAAaI,SAAb,GACI,qBAAqBX,aAArB,GAAqC,qBADzC;AAEAI,kBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACD;AACF;AACF,WA/BD,MA+BO,IAAIrB,KAAKgB,MAAL,IAAe,gBAAnB,EAAqC;AAC1C;AACA,kBAAK7C,qBAAL,GAA6BwC,QAA7B;AACA,kBAAKe,4BAAL;AACD;AACF;AACF;AACD,YAAKpF,SAAL,CAAeqF,IAAf;AACD,KAzDD;;AA2DA,SAAKnF,UAAL,CAAgBsD,GAAhB,CAAoB,qBAApB,EACI,UAACC,KAAD,EAAQ6B,OAAR,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAqD;AACvD,UAAIH,WAAW,IAAf,EAAqB;AACnB,YAAII,YAAYJ,QAAQK,IAAxB;AACA,YAAID,aAAa,cAAjB,EAAiC;AAC/B,gBAAKE,SAAL,CAAe,uBAAf,EAAwC,YAAxC;AACD,SAFD,MAEO,IAAIF,aAAa,mBAAjB,EAAsC,CAC5C,CADM,MACA,IAAIA,aAAa,oBAAjB,EAAuC;AAC5C,gBAAKE,SAAL,CAAe,kBAAf,EAAmC,YAAnC;AACD,SAFM,MAEA,IAAIF,aAAa,mBAAjB,EAAsC;AAC3C,gBAAKE,SAAL,CAAe,uBAAf,EAAwC,YAAxC;AACD,SAFM,MAEA,IAAIF,aAAa,uBAAjB,EAA0C;AAC/C,gBAAKE,SAAL,CAAe,oBAAf,EAAqC,YAArC;AACD;AACF;AACF,KAfD;;AAiBA,SAAK1F,UAAL,CAAgBsD,GAAhB,CAAoB,cAApB,EAAoC,YAAM;AACxC,YAAKoC,SAAL,CAAe,cAAf,EAA+B,WAA/B;AACD,KAFD;;AAIA;;;;AAIA,SAAK1F,UAAL,CAAgBsD,GAAhB,CAAoB,cAApB,EAAoC,YAAM;AACxC;AACA,YAAK9C,cAAL,CAAoBmF,YAApB;AACA,YAAK5E,KAAL,GAAa,MAAKP,cAAL,CAAoBQ,SAAjC;AACD,KAJD;AAKA,SAAK0E,SAAL,CAAe,eAAf,EAAgC,YAAhC;AACD;;;;;;AAED;;;qCAGiB;AACf,UAAIE,OAAO,EAAEC,aAAa,IAAf,EAAX;AACA,WAAKH,SAAL,CAAe,kBAAf,EAAmC,YAAnC,EAAiDE,IAAjD;AACAE,aAAOC,IAAP,CAAY,KAAKzF,aAAL,CAAmB0F,cAAnB,CAAkC,mBAAlC,CAAZ;AACD;;;;;AAED;;;uDAGmC;AACjC,UAAIJ,OAAO,EAAEC,aAAa,KAAf,EAAX;AACA,WAAKH,SAAL,CAAe,kBAAf,EAAmC,YAAnC,EAAiDE,IAAjD;AACAE,aAAOC,IAAP,CAAY,KAAKzF,aAAL,CAAmB0F,cAAnB,CAAkC,mBAAlC,IACR,oBADJ;AAED;;;wCAEmB;AAClB,WAAK9F,MAAL,CAAY+F,EAAZ,CAAe,oBAAf,EAAqC,EAACrF,WAAU,KAAKA,SAAhB,EAArC;AACD;;;yCAEoB;AACnB,WAAKV,MAAL,CAAY+F,EAAZ,CAAe,sBAAf,EAAuC,EAACrF,WAAU,KAAKA,SAAhB,EAAvC;AACD;;;2CAEsB;AACrB,WAAKV,MAAL,CAAY+F,EAAZ,CAAe,uBAAf,EAAwC,EAACrF,WAAU,KAAKA,SAAhB,EAAxC;AACD;;;kCAEa;AAAA;;AACZ;AACA;AACA,UAAIsF,gBAAgB,0BAApB;AACA,UAAI;AACF;AACA;;AAEA,aAAK1F,cAAL,CAAoB2F,WAApB,CAAgCD,aAAhC,EAA+CE,IAA/C,CAAoD,UAACC,kBAAD,EAAwB;AAC1E,iBAAKC,aAAL,GAAqBD,kBAArB;AACA3B,YAAE,qBAAF,EAAyB6B,GAAzB,CAA6B,EAA7B,EAF0E,CAEvC;AACpC,SAHD;AAID,OARD,CAQE,OAAOC,KAAP,EAAc;AACdC,cAAM,mDAAN;AACA;AACD;AACF;;;;;AAED;;;sCAGkB;AAChBX,aAAOY,QAAP,CAAgBC,IAAhB,GAAuB,KAAKrG,aAAL,CAAmBsG,cAAnB,KACjB,kBADiB,GACI,KAAKhG,SADhC;AAED;;AAED;;;;;;mCAGe;AACb,WAAKV,MAAL,CAAY+F,EAAZ,CAAe,WAAf;AACD;;;;;AAED;;;;;wCAKoBY,M,EAAQ;AAC1B,aAAO,KAAKrG,cAAL,CAAoBsG,mBAApB,CAAwCD,MAAxC,CAAP;AACD;;;;;AAED;;;;;0CAKsBA,M,EAAQ;AAC5B,aAAO,KAAKrG,cAAL,CAAoBuG,qBAApB,CAA0CF,MAA1C,CAAP;AACD;;AAED;;;;;;;;kDAK8BA,M,EAAQG,W,EAAa;AACjD,aAAO,KAAKxG,cAAL,CAAoByG,6BAApB,CAAkDJ,MAAlD,EAA0DG,WAA1D,CAAP;AACD;;AAED;;;;;;;;yCAKqBH,M,EAAQ;AAC3B,aAAO,KAAKrG,cAAL,CAAoB0G,oBAApB,CAAyCL,MAAzC,CAAP;AACD;;;;;AAED;;;;;gCAKYA,M,EAAQ;AAClB,aAAO,KAAKrG,cAAL,CAAoB2G,WAApB,CAAgCN,MAAhC,CAAP;AACD;;;;;AAED;;;;gCAIYA,M,EAAQ;AAClB,WAAKpG,kBAAL,CAAwB2G,uCAAxB,CAAgE,KAAKP,MAArE;AACA,WAAK3G,MAAL,CAAY+F,EAAZ,CAAe,mBAAf,EAAoC,EAACrF,WAAW,KAAKA,SAAjB,EAA4BiG,QAAOA,MAAnC,EAApC;AACD;;;;;AAED;;;kCAGc;AACZ,UAAMQ,WAAW,KAAK7G,cAAL,CAAoB8G,WAApB,CAAgC,KAAKC,gBAArC,CAAjB;;AAEA;;;;AAIA,WAAKC,SAAL,GAAiBH,QAAjB;;AAEA;AACA,WAAKlG,eAAL,GAAuB,KAAvB;;AAEA;AACA,WAAKoG,gBAAL,GAAwB,EAAxB;;AAEA;AACA,WAAKE,eAAL,GAAuB,IAAvB;;AAEA;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACD;;AAED;;;;;;iCAGa;AACX,UAAMC,UAAU,KAAKnH,cAAL,CAAoBoH,UAApB,CAA+B,KAAKC,eAApC,CAAhB;;AAEA;;;;AAIA,WAAKL,SAAL,GAAiBG,OAAjB;;AAEA;AACA,WAAKvG,cAAL,GAAsB,KAAtB;;AAEA;AACA,WAAKyG,eAAL,GAAuB,EAAvB;;AAEA;AACA,WAAKC,cAAL,GAAsB,IAAtB;;AAEA;AACA,WAAKJ,UAAL,GAAkB,IAAlB;AACD;;AAED;;;;;;;;iCAKab,M,EAAQ;AACnB;AACA,UAAI,KAAKa,UAAT,EAAqB;AACnB,aAAKK,sBAAL,CAA4BlB,MAA5B,EAAoC,QAApC;AACD,OAFD,MAEO,IAAI,KAAKmB,QAAT,EAAmB;AACxB,aAAKC,oBAAL,CAA0BpB,MAA1B,EAAkC,QAAlC;AACD,OAFM,MAEA,IAAI,KAAKqB,QAAT,EAAmB;AACxB,aAAKC,oBAAL,CAA0BtB,MAA1B,EAAkC,QAAlC;AACD,OAFM,MAEA,IAAI,KAAK7E,UAAT,EAAqB;AAC1B,aAAKoG,mBAAL,CAAyBvB,MAAzB;AACD;AACF;;AAED;;;;;;;;gCAKYA,M,EAAQ;AAClB,UAAI,KAAKa,UAAT,EAAqB;AACnB,aAAKK,sBAAL,CAA4BlB,MAA5B,EAAoC,OAApC;AACD,OAFD,MAEO,IAAI,KAAKmB,QAAT,EAAmB;AACxB,aAAKC,oBAAL,CAA0BpB,MAA1B,EAAkC,OAAlC;AACD,OAFM,MAEA,IAAI,KAAKqB,QAAT,EAAmB;AACxB,aAAKC,oBAAL,CAA0BtB,MAA1B,EAAkC,OAAlC;AACD,OAFM,MAEA,IAAI,KAAK7E,UAAT,EAAqB;AAC1B,aAAKoG,mBAAL,CAAyBvB,MAAzB;AACD;AACF;;AAED;;;;;;;;2CAKuBA,M,EAAQwB,I,EAAM;AAAA;;AAEnC,UAAIA,QAAQ,QAAZ,EAAsB;AACpB;AACA,aAAK7H,cAAL,CAAoB8H,gBAApB,CAAqC,KAAKd,SAA1C,EAAqDX,MAArD;AACD,OAHD,MAGO,IAAIwB,QAAQ,OAAZ,EAAqB;AAC1B;AACA,aAAK7H,cAAL,CAAoB+H,eAApB,CAAoC,KAAKf,SAAzC,EAAoDX,MAApD;AACD,OAHM,MAGA;AACL;AACA;AACD;;AAED,UAAI2B,WAAW,CAAC,KAAKhB,SAAN,CAAf;AACA,UAAIG,UAAU,KAAKH,SAAnB;;AAEA;;;;;AAKA,WAAKA,SAAL,GAAiB,IAAjB;;AAEA;AACA,WAAKE,UAAL,GAAkB,KAAlB;;AAEA;AACA,WAAKD,eAAL,GAAuB,KAAvB;AACA,WAAKK,cAAL,GAAsB,KAAtB;;AAEA,WAAKW,4BAAL,CAAkCD,QAAlC;;AAEA;AACA,WAAKE,8CAAL,GAAsDtC,IAAtD,CAA2D,YAAM;AAC/D,YAAIuB,WAAW,IAAf,EAAqB;AACnB,cAAI/B,OAAO;AACT,sBAAU+B,QAAQgB,EADT;AAET,qBAAS,OAAKnI,cAAL,CACJoI,+BADI,CAC4BjB,QAAQgB,EADpC;AAFA,WAAX;;AAMA,cAAI,OAAKnI,cAAL,CAAoB2G,WAApB,CAAgCQ,QAAQgB,EAAxC,CAAJ,EAAiD;AAC/C;AACA,mBAAKjD,SAAL,CAAe,iBAAf,EAAkC,WAAlC,EAA+CE,IAA/C;AACD,WAHD,MAGO;AACL;AACA,mBAAKF,SAAL,CAAe,aAAf,EAA8B,WAA9B,EAA2CE,IAA3C;AACD;AACF;AACF,OAhBD;AAiBD;;AAED;;;;;;;;yCAKqBiB,M,EAAQwB,I,EAAM;AAAA;;AACjC,UAAIQ,kBAAkB,KAAKC,gBAAL,EAAtB;AACA,UAAID,mBAAmB,IAAnB,IAA2BA,gBAAgBhF,OAAhB,CAAwBgD,MAAxB,KAAmC,CAAC,CAAnE,EAAsE;AACpE;;;;AAIA,YAAIgC,gBAAgB/E,MAAhB,IAA0B,CAA9B,EAAiC;AAC/B2C,gBAAM,KAAK9F,UAAL,CAAgB,oDAAhB,CAAN;AACD,SAFD,MAEO,IAAIkI,gBAAgB/E,MAAhB,GAAyB,CAA7B,EAAgC;AACrC2C,gBAAM,KAAK9F,UAAL,CAAgB,qDAAhB,CAAN;AACD;AACF,OAVD,MAUO;AACL;;AAEA;;;;AAIA,YAAIoI,QAAQ,EAAZ;AAPK;AAAA;AAAA;;AAAA;AAQL,+BAA2BF,eAA3B,8HAA4C;AAAA,gBAAnCG,cAAmC;;AAC1C,gBAAIC,OAAO;AACT,wBAAUD,cADD;AAET,2BAAa,KAAKxI,cAAL,CACRoI,+BADQ,CACwBI,cADxB;AAFJ,aAAX;AAKAD,kBAAMG,IAAN,CAAWD,IAAX;AACD;AAfI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBL,YAAIT,WAAW,EAAf;AACA,YAAIH,QAAQ,QAAZ,EAAsB;AACpB;AACAG,qBAAW,KAAKhI,cAAL,CAAoB2I,eAApB,CAAoCN,eAApC,EAAqDhC,MAArD,CAAX;AACD,SAHD,MAGO,IAAIwB,QAAQ,OAAZ,EAAqB;AAC1B;AACAG,qBAAW,KAAKhI,cAAL,CAAoB4I,cAApB,CAAmCP,eAAnC,EAAoDhC,MAApD,CAAX;AACD,SAHM,MAGA;AACL;AACA;AACD;;AAED;AACA,aAAKmB,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAKP,eAAL,GAAuB,KAAvB;AACA,aAAKK,cAAL,GAAsB,KAAtB;;AAEA,aAAKW,4BAAL,CAAkCD,QAAlC;;AAEA;AACA,aAAKE,8CAAL,GAAsDtC,IAAtD,CAA2D,YAAM;AAC/D,cAAIoC,YAAY,IAAZ,IAAoBA,SAAS1E,MAAT,GAAkB,CAA1C,EAA6C;AAC3C,gBAAIuF,eAAeb,SAAS,CAAT,CAAnB;AACA,gBAAIa,gBAAgB,IAAhB,IAAwBA,aAAaV,EAAb,IAAmB,IAA/C,EAAqD;;AAEnD;AACA,mBAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIP,MAAMjF,MAA1B,EAAkCwF,GAAlC,EAAuC;AACrC,oBAAIL,OAAOF,MAAMO,CAAN,CAAX;;AAEA;AACA,oBAAI3B,UAAUa,SAASc,CAAT,CAAd;;AAEA,oBAAIL,QAAQ,IAAR,IAAgBtB,WAAW,IAA/B,EAAqC;AACnC;AACAsB,uBAAKM,OAAL,GAAe,OAAK/I,cAAL,CAAoBoI,+BAApB,CAAoDjB,QAAQgB,EAA5D,CAAf;AACD;AACF;;AAED,kBAAI,OAAKnI,cAAL,CAAoB2G,WAApB,CAAgCkC,aAAaV,EAA7C,CAAJ,EAAsD;AACpD,oBAAI/C,OAAO,EAAE4D,iBAAiBT,KAAnB,EAAX;AACA,uBAAKrD,SAAL,CAAe,eAAf,EAAgC,WAAhC,EAA6CE,IAA7C;AACD,eAHD,MAGO;AACL,oBAAIA,QAAO,EAAE6D,YAAYV,KAAd,EAAX;AACA,uBAAKrD,SAAL,CAAe,WAAf,EAA4B,WAA5B,EAAyCE,KAAzC;AACD;AACF;AACF;AACF,SA3BD;AA4BD;AACF;;AAED;;;;;;;;yCAKqBiB,M,EAAQwB,I,EAAM;AAAA;;AACjC;;;;AAIA,UAAIU,QAAQ,EAAZ;AACA,UAAIF,kBAAkB,KAAKC,gBAAL,EAAtB;AANiC;AAAA;AAAA;;AAAA;AAOjC,8BAA2BD,eAA3B,mIAA4C;AAAA,cAAnCG,cAAmC;;AAC1C,cAAIC,OAAO;AACT,0BAAcD,cADL;AAET,yBAAa,KAAKxI,cAAL,CACRoI,+BADQ,CACwBI,cADxB;AAFJ,WAAX;AAKAD,gBAAMG,IAAN,CAAWD,IAAX;AACD;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBjC,UAAIT,WAAW,EAAf;AACA,UAAIH,QAAQ,QAAZ,EAAsB;AACpB;AACAG,mBAAW,KAAKhI,cAAL,CAAoBkJ,eAApB,CAAoCb,eAApC,EAAqDhC,MAArD,CAAX;AACD,OAHD,MAGO,IAAIwB,QAAQ,OAAZ,EAAqB;AAC1B;AACAG,mBAAW,KAAKhI,cAAL,CAAoBmJ,cAApB,CAAmCd,eAAnC,EAAoDhC,MAApD,CAAX;AACD,OAHM,MAGA;AACL;AACA;AACD;;AAED;AACA,WAAKqB,QAAL,GAAgB,KAAhB;;AAEA;AACA,WAAKT,eAAL,GAAuB,KAAvB;AACA,WAAKK,cAAL,GAAsB,KAAtB;;AAEA,WAAKW,4BAAL,CAAkCD,QAAlC;;AAEA;AACA,WAAKE,8CAAL,GAAsDtC,IAAtD,CAA2D,YAAM;AAC/D,YAAIoC,YAAY,IAAZ,IAAoBA,SAAS1E,MAAT,GAAkB,CAA1C,EAA6C;AAC3C,cAAIuF,eAAeb,SAAS,CAAT,CAAnB;AACA,cAAIa,gBAAgB,IAAhB,IAAwBA,aAAaV,EAAb,IAAmB,IAA/C,EAAqD;AACnD;AACA,iBAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIP,MAAMjF,MAA1B,EAAkCwF,GAAlC,EAAuC;AACrC,kBAAIL,OAAOF,MAAMO,CAAN,CAAX;AACA,kBAAI3B,UAAUa,SAASc,CAAT,CAAd;;AAEA,kBAAIL,QAAQ,IAAR,IAAgBtB,WAAW,IAA/B,EAAqC;AACnC;AACAsB,qBAAKW,QAAL,GAAgBjC,QAAQgB,EAAxB;;AAEA;AACAM,qBAAKM,OAAL,GAAe,OAAK/I,cAAL,CAAoBoI,+BAApB,CAAoDjB,QAAQgB,EAA5D,CAAf;AACD;AACF;;AAED,gBAAI,OAAKnI,cAAL,CAAoB2G,WAApB,CAAgCkC,aAAaV,EAA7C,CAAJ,EAAsD;AACpD,kBAAI/C,OAAO,EAAEiE,kBAAkBd,KAApB,EAAX;AACA,qBAAKrD,SAAL,CAAe,gBAAf,EAAiC,WAAjC,EAA8CE,IAA9C;AACD,aAHD,MAGO;AACL,kBAAIA,SAAO,EAAEkE,aAAaf,KAAf,EAAX;AACA,qBAAKrD,SAAL,CAAe,YAAf,EAA6B,WAA7B,EAA0CE,MAA1C;AACD;AACF;AACF;AACF,OA3BD;AA4BD;;AAED;;;;;;;;;wCAMoBmE,2B,EAA6B;AAAA;;AAC/C,UAAIC,gBAAgB,KAAKC,wBAAL,EAApB;;AAEA;AACA,UAAIC,qBAAqB,KAAKC,6BAAL,EAAzB;;AAEA;AACA,UAAIC,cAAc,KAAK9J,aAAL,CAAmB0F,cAAnB,CAAkC,WAAlC,CAAlB;;AAEA;AACA,UAAIqE,gBAAgB,KAAKC,eAAzB;;AAEA;AACA,WAAKC,aAAL,CAAmBR,2BAAnB,EAAgD3D,IAAhD,CAAqD,UAACoC,QAAD,EAAc;AACjE;AACA,eAAKE,8CAAL,GAAsDtC,IAAtD,CAA2D,YAAM;AAC/D;;;;AAIA,iBAAKhG,QAAL,CAAc,YAAM;AAAA;AAAA;AAAA;;AAAA;AAClB,oCAAoBoI,QAApB,mIAA8B;AAAA,oBAArBb,OAAqB;;AAC5B,oBAAIA,WAAW,IAAf,EAAqB;AAAA;AACnB,wBAAI6C,cAAc9F,EAAE,MAAMiD,QAAQgB,EAAhB,CAAlB;;AAEA;AACA,wBAAI8B,0BAA0BD,YAAYE,GAAZ,CAAgB,iBAAhB,CAA9B;;AAEA;AACAF,gCAAYE,GAAZ,CAAgB,kBAAhB,EAAoC,SAApC;;AAEA;;;;;;AAMA,2BAAKtK,QAAL,CAAc,YAAM;AAClB;AACAoK,kCAAYE,GAAZ,CAAgB;AACd,sCAAc,iCADA;AAEd,4CAAoBD;AAFN,uBAAhB;AAID,qBAND;AAfmB;AAsBpB;AACF;AAzBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BlB,gBAAIjC,YAAY,IAAZ,IAAoBA,SAAS1E,MAAT,GAAkB,CAA1C,EAA6C;AAC3C;AACA,kBAAI0G,cAAc9F,EAAE,MAAM8D,SAAS,CAAT,EAAYG,EAApB,CAAlB;AACA,kBAAI6B,eAAe,IAAnB,EAAyB;AACvB;AACA9F,kBAAE,UAAF,EAAciG,OAAd,CAAsB;AACpBC,6BAAWJ,YAAYK,IAAZ,CAAiB,WAAjB,IAAgC;AADvB,iBAAtB,EAEG,IAFH;AAGD;AACF;AACF,WArCD;;AAuCA;AACA,cAAIjF,OAAO;AACTkF,2BAAe;AADN,WAAX;;AAIA,eAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAIU,cAAclG,MAAlC,EAA0CwF,GAA1C,EAA+C;AAC7C,gBAAIyB,eAAef,cAAcV,CAAd,CAAnB;;AAEA;AACA,gBAAI0B,oBAAoBd,mBAAmBZ,CAAnB,CAAxB;AACA,gBAAI3B,UAAUa,SAASc,CAAT,CAAd;;AAEA;AACA,gBAAI2B,WAAW;AACbZ,6BAAea,SAASb,aAAT,CADF;AAEbc,0BAAYJ,aAAapC,EAFZ;AAGbyC,yBAAWJ,iBAHE;AAIbpB,wBAAUjC,QAAQgB,EAJL;AAKbY,uBAAS,OAAK/I,cAAL,CACNoI,+BADM,CAC0BjB,QAAQgB,EADlC;AALI,aAAf;AAQA/C,iBAAKkF,aAAL,CAAmB5B,IAAnB,CAAwB+B,QAAxB;AACD;AACD,iBAAKvF,SAAL,CAAe,cAAf,EAA+B,WAA/B,EAA4CE,IAA5C;AACD,SApED;AAqED,OAvED;AAwED;;AAED;;;;;;;;;kCAMcmE,2B,EAA6B;AAAA;;AACzC,UAAIC,gBAAgB,KAAKC,wBAAL,EAApB;;AAEA;AACA,UAAIG,cAAc,KAAK9J,aAAL,CAAmB0F,cAAnB,CAAkC,WAAlC,CAAlB;;AAEA;AACA,UAAIqE,gBAAgB,KAAKC,eAAzB;;AAEA;AACA,aAAO,KAAK9J,cAAL,CAAoB6K,SAApB,CAA8BrB,aAA9B,EAA6CK,aAA7C,EACLD,WADK,EACQL,2BADR,EACqC3D,IADrC,CAC0C,UAACoC,QAAD,EAAc;;AAE7D;AACA,eAAKhI,cAAL,CAAoBmF,YAApB;AACA,eAAK5E,KAAL,GAAa,OAAKP,cAAL,CAAoBQ,SAAjC;;AAEA,eAAK8G,cAAL,GAAsB,KAAtB;AACA,eAAKwD,UAAL,CAAgB,SAAhB;;AAEA;AACA,eAAKC,sBAAL,GAA8B,EAA9B;AACA,eAAKC,kBAAL,GAA0B,EAA1B;AACA,eAAKC,iBAAL,GAAyB,IAAzB;AACA,eAAKC,sBAAL,GAA8B,IAA9B;AACA,eAAKpB,eAAL,GAAuB,IAAvB;AACA,eAAKqB,aAAL,GAAqB,IAArB;;AAEA;;;;;AAKA,eAAKC,eAAL;AACA,eAAKrL,mBAAL,CAAyBsL,qBAAzB;AACA,eAAOrD,QAAP;AACD,OA1BM,CAAP;AA2BD;;AAED;;;;;;2BAGO;AACL;AACA,UAAIK,kBAAkB,KAAKC,gBAAL,EAAtB;AACA,UAAID,mBAAmB,IAAnB,IAA2BA,gBAAgB/E,MAAhB,GAAyB,CAAxD,EAA2D;AACzD,YAAIgI,oBAAoB,KAAKC,oBAAL,EAAxB;AACA,YAAID,qBAAqB,IAArB,IAA6BA,kBAAkBhI,MAAlB,GAA2B,CAA5D,EAA+D;AAC7D,cAAIgI,kBAAkBhI,MAAlB,KAA6B,CAAjC,EAAoC;AAClC;AACA2C,kBAAM,gCAAN;AACD,WAHD,MAGO,IAAIqF,kBAAkBhI,MAAlB,KAA6B,CAA7B,IACTgI,kBAAkB,CAAlB,MAAyB,MADpB,EAC4B;AACjC;AACA,iBAAKhE,cAAL,GAAsB,IAAtB;AACA,iBAAKI,QAAL,GAAgB,IAAhB;AACD,WALM,MAKA;AACLzB,kBAAM,2CAAN;AACD;AACF;AACF;AACF;;AAED;;;;;;;2BAIO;AACL;AACA,UAAIoC,kBAAkB,KAAKC,gBAAL,EAAtB;AACA,UAAID,mBAAmB,IAAnB,IAA2BA,gBAAgB/E,MAAhB,GAAyB,CAAxD,EAA2D;AACzD,YAAIgI,oBAAoB,KAAKC,oBAAL,EAAxB;AACA,YAAID,qBAAqB,IAArB,IAA6BA,kBAAkBhI,MAAlB,GAA2B,CAA5D,EAA+D;AAC7D,cAAIgI,kBAAkBhI,MAAlB,IAA4B,CAAhC,EAAmC;AACjC;AACA2C,kBAAM,gCAAN;AACD,WAHD,MAGO,IAAIqF,kBAAkBhI,MAAlB,IAA4B,CAAhC,EAAmC;AACxC;AACA,gBAAIgI,kBAAkB,CAAlB,MAAyB,OAA7B,EAAsC;AACpC,mBAAKrE,eAAL,GAAuB,IAAvB;AACA,mBAAKO,QAAL,GAAgB,IAAhB;AACD,aAHD,MAGO,IAAI8D,kBAAkB,CAAlB,MAAyB,MAA7B,EAAqC;AAC1C,mBAAKhE,cAAL,GAAsB,IAAtB;AACA,mBAAKE,QAAL,GAAgB,IAAhB;AACD;AACF,WATM,MASA,IAAI8D,kBAAkBhI,MAAlB,GAA2B,CAA/B,EAAkC;AACvC;;;;;;AAMA2C,kBAAM,iDACF,+DADE,GAEF,gBAFJ;AAGD;AACF;AACF;AACF;;AAED;;;;;;8BAGS;AACP,UAAIoC,kBAAkB,KAAKC,gBAAL,EAAtB;AACA,UAAID,mBAAmB,IAAvB,EAA6B;AAC3B,YAAImD,iBAAiB,IAArB;AACA,YAAInD,gBAAgB/E,MAAhB,IAA0B,CAA9B,EAAiC;AAC/B;AACAkI,2BAAiB,oDAAjB;AACD,SAHD,MAGO,IAAInD,gBAAgB/E,MAAhB,GAAyB,CAA7B,EAAgC;AACrC;AACAkI,2BAAiB,yCACXnD,gBAAgB/E,MADL,GACc,kBAD/B;AAED;AACD,YAAIkI,kBAAkB,IAAtB,EAA4B;AAC1B,cAAIC,QAAQD,cAAR,CAAJ,EAA6B;AAC3B;AACA,gBAAIE,qBAAqB,KAAzB;AACA,gBAAIC,kBAAkB,KAAtB;AACA,gBAAIC,cAAc,KAAlB;AACA,gBAAIC,eAAe,EAAnB;AACA,gBAAIC,oBAAoB,EAAxB;AAN2B;AAAA;AAAA;;AAAA;AAO3B,oCAAmBzD,eAAnB,mIAAoC;AAAA,oBAA3BhC,MAA2B;;AAClC,oBAAIoC,OAAO,KAAKzI,cAAL,CAAoB+L,WAApB,CAAgC1F,MAAhC,CAAX;AACA,oBAAIoE,WAAW,EAAf;;AAEA,oBAAIhC,QAAQ,IAAZ,EAAkB;AAChBgC,2BAASpE,MAAT,GAAkBoC,KAAKN,EAAvB;AACAsC,2BAASuB,KAAT,GACI,KAAKhM,cAAL,CAAoBoI,+BAApB,CAAoDK,KAAKN,EAAzD,CADJ;AAED;;AAED,oBAAI,KAAKnI,cAAL,CAAoBiM,aAApB,CAAkC5F,MAAlC,CAAJ,EAA+C;AAC7C;AACAqF,uCAAqB,IAArB;AACD;;AAED,oBAAI,KAAK1L,cAAL,CAAoB2G,WAApB,CAAgCN,MAAhC,CAAJ,EAA6C;AAC3C;AACAsF,oCAAkB,IAAlB;AACA,sBAAIO,yBAAyB,EAA7B;AAH2C;AAAA;AAAA;;AAAA;AAI3C,0CAAuBzD,KAAK0D,GAA5B,mIAAiC;AAAA,0BAAxBC,UAAwB;;AAC/B,0BAAIC,YAAY,KAAKrM,cAAL,CACXoI,+BADW,CACqBgE,UADrB,CAAhB;;AAGA;AACA,0BAAIE,aAAa;AACf,kCAAUF,UADK;AAEf,iCAASC;AAFM,uBAAjB;AAIAH,6CAAuBxD,IAAvB,CAA4B4D,UAA5B;AACD;AAd0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe3C7B,2BAASyB,sBAAT,GAAkCA,sBAAlC;AACAJ,oCAAkBpD,IAAlB,CAAuB+B,QAAvB;AACD,iBAjBD,MAiBO;AACL;AACAmB,gCAAc,IAAd;AACAC,+BAAanD,IAAb,CAAkB+B,QAAlB;AACD;AACD,qBAAKzK,cAAL,CAAoBuM,UAApB,CAA+BlG,MAA/B;AACD;;AAED;AA/C2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgD3B,gBAAIqF,kBAAJ,EAAwB;AACtB,mBAAKc,iBAAL;AACD;;AAED,gBAAIb,eAAJ,EAAqB;AACnB,kBAAIvG,OAAO;AACT,qCAAqB0G;AADZ,eAAX;AAGA,mBAAK5G,SAAL,CAAe,iBAAf,EAAkC,WAAlC,EAA+CE,IAA/C;AACD;;AAED,gBAAIwG,WAAJ,EAAiB;AACf,kBAAIxG,SAAO;AACT,gCAAgByG;AADP,eAAX;AAGA,mBAAK3G,SAAL,CAAe,aAAf,EAA8B,WAA9B,EAA2CE,MAA3C;AACD;;AAED;AACA,iBAAKpF,cAAL,CAAoB2F,WAApB;AACA,iBAAK3F,cAAL,CAAoBmF,YAApB;AACA,iBAAK5E,KAAL,GAAa,KAAKP,cAAL,CAAoBQ,SAAjC;AACD;AACF;AACF;AACD,WAAKiM,gBAAL;AACD;;AAED;;;;;;;uCAImB;AACjB;AACA,UAAIpE,kBAAkB,EAAtB;;AAEA;AACAqE,cAAQC,OAAR,CAAgB,KAAKpM,KAArB,EAA4B,UAASqM,KAAT,EAAgBC,GAAhB,EAAqB;AAC/C,YAAID,MAAME,OAAV,EAAmB;AACjB;AACAzE,0BAAgBK,IAAhB,CAAqBmE,GAArB;AACD;AACF,OALD,EAKGxE,eALH;;AAOA,UAAI,KAAKpH,aAAL,IAAsB,IAA1B,EAAgC;AAAA;AAAA;AAAA;;AAAA;AAC9B,gCAAyB,KAAKA,aAA9B,mIAA6C;AAAA,gBAApC8L,YAAoC;;AAC3C,gBAAIA,gBAAgB,IAAhB,IAAwBA,aAAaD,OAAzC,EAAkD;AAChD;AACAzE,8BAAgBK,IAAhB,CAAqBqE,aAAa5E,EAAlC;AACD;AACF;AAN6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/B;AACD,aAAOE,eAAP;AACD;;AAED;;;;;;;2CAIuB;AACrB,UAAIiD,oBAAoB,EAAxB;;AAEA;AACAoB,cAAQC,OAAR,CAAgB,KAAKpM,KAArB,EAA4B,UAASqM,KAAT,EAAgBC,GAAhB,EAAqB;AAC/C,YAAID,MAAME,OAAV,EAAmB;AACjB;AACA,cAAIrE,OAAO,KAAKzI,cAAL,CAAoB+L,WAApB,CAAgCc,GAAhC,CAAX;AACA,cAAIpE,QAAQ,IAAZ,EAAkB;AAChB,gBAAIuE,WAAWvE,KAAKZ,IAApB;AACA,gBAAIyD,kBAAkBjI,OAAlB,CAA0B2J,QAA1B,KAAuC,CAAC,CAA5C,EAA+C;AAC7C;AACA1B,gCAAkB5C,IAAlB,CAAuBsE,QAAvB;AACD;AACF;AACF;AACF,OAZD,EAYG,IAZH;;AAcA,UAAI,KAAK/L,aAAL,IAAsB,IAA1B,EAAgC;AAAA;AAAA;AAAA;;AAAA;AAC9B,gCAAyB,KAAKA,aAA9B,mIAA6C;AAAA,gBAApC8L,YAAoC;;AAC3C,gBAAIA,gBAAgB,IAAhB,IAAwBA,aAAaD,OAAzC,EAAkD;AAChD,kBAAIG,mBAAmBF,aAAalF,IAApC;AACA,kBAAIyD,kBAAkBjI,OAAlB,CAA0B4J,gBAA1B,KAA+C,CAAC,CAApD,EAAuD;AACrD;AACA3B,kCAAkB5C,IAAlB,CAAuBuE,gBAAvB;AACD;AACF;AACF;AAT6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU/B;;AAED,aAAO3B,iBAAP;AACD;;AAED;;;;;;uCAGmB;AACjBoB,cAAQC,OAAR,CAAgB,KAAKpM,KAArB,EAA4B,UAASqM,KAAT,EAAgBC,GAAhB,EAAqB;AAC/CD,cAAME,OAAN,GAAgB,KAAhB;AACD,OAFD;AAGD;;AAED;;;;;;8CAG0B;AACxB,WAAK/F,gBAAL,GAAwB,EAAxB;AACA,WAAK+D,UAAL,CAAgB,aAAhB;AACA,UAAI,KAAKnK,eAAT,EAA0B;AACxB;;;;AAIA,aAAKf,QAAL,CAAc,YAAM;AAClB,cAAIsN,wBAAwB5I,SAAS6I,cAAT,CAAwB,kBAAxB,CAA5B;AACA,cAAID,yBAAyB,IAA7B,EAAmC;AACjCA,kCAAsBE,KAAtB;AACD;AACF,SALD;AAMD;AACF;;AAED;;;;;;2CAGuB;AACrB,WAAK/F,eAAL,GAAuB,EAAvB;AACA,WAAKyD,UAAL,CAAgB,YAAhB;AACA,UAAI,KAAKlK,cAAT,EAAyB;AACvB;;;;AAIA,aAAKhB,QAAL,CAAc,YAAM;AAClB,cAAIyN,uBAAuB/I,SAAS6I,cAAT,CAAwB,iBAAxB,CAA3B;AACA,cAAIE,wBAAwB,IAA5B,EAAkC;AAChCA,iCAAqBD,KAArB;AACD;AACF,SALD;AAMD;AACF;;AAED;;;;;;iCAGa;AACX,WAAKnG,eAAL,GAAuB,KAAvB;AACA,WAAKK,cAAL,GAAsB,KAAtB;;AAEA;AACA,WAAKN,SAAL,GAAiB,IAAjB;;AAEA;AACA,WAAKE,UAAL,GAAkB,KAAlB;AACA,WAAKM,QAAL,GAAgB,KAAhB;AACA,WAAKE,QAAL,GAAgB,KAAhB;AACA,WAAKlG,UAAL,GAAkB,KAAlB;;AAEA;AACA,WAAKiL,gBAAL;AACD;;AAED;;;;;;;wCAIoB;AAClB,UAAIa,iBAAiB,IAArB;AACA,UAAIC,eAAe,KAAKvN,cAAL,CAAoBwN,eAApB,EAAnB;AACA,UAAI/E,OAAO,KAAKzI,cAAL,CAAoB+L,WAApB,CAAgCwB,YAAhC,CAAX;AACA,UAAIE,OAAO,KAAX;;AAEA;AACA,aAAO,CAACA,IAAR,EAAc;AACZ,YAAIhF,QAAQ,IAAZ,EAAkB;AAChB;AACAgF,iBAAO,IAAP;AACD,SAHD,MAGO,IAAI,KAAKzN,cAAL,CAAoB2G,WAApB,CAAgC8B,KAAKN,EAArC,CAAJ,EAA8C;AACnD;AACAM,iBAAO,KAAKzI,cAAL,CAAoB+L,WAApB,CAAgCtD,KAAKiF,OAArC,CAAP;AACD,SAHM,MAGA,IAAI,KAAK1N,cAAL,CAAoB2N,iBAApB,CAAsClF,KAAKN,EAA3C,CAAJ,EAAoD;AACzD;AACAmF,2BAAiB7E,KAAKN,EAAtB;AACAsF,iBAAO,IAAP;AACD,SAJM,MAIA;AACL;AACAA,iBAAO,IAAP;AACD;AACF;;AAED,UAAIH,cAAJ,EAAoB;AAClB,aAAKtN,cAAL,CAAoB4N,cAApB,CAAmCN,cAAnC;AACD;AACF;;AAED;;;;;;;sDAIkC;AAAA;;AAChC,aAAO,KAAK/N,EAAL,CAAQ,UAACsO,OAAD,EAAUC,MAAV,EAAqB;AAClC,YAAIC,kBAAkB,OAAK/N,cAAL,CAAoBgO,kBAApB,EAAtB;AACA,YAAID,mBAAmB,IAAvB,EAA6B;AAC3B;AACA;AACA,iBAAK/N,cAAL,CAAoB4N,cAApB,CAAmC,EAAnC;AACAC;AACD,SALD,MAKO;AACL;AACA,cAAII,qBAAqB,OAAKjO,cAAL,CAAoBkO,cAApB,EAAzB;AACA,cAAID,sBAAsBF,eAA1B,EAA2C;AACzC;;;;;;AAMA,gBAAII,gBAAgB,OAAKnO,cAAL,CAAoB+L,WAApB,CAAgCgC,eAAhC,CAApB;AACA,gBAAII,iBAAiB,IAArB,EAA2B;AACzB,kBAAIC,kBAAkBD,cAAcnC,KAApC;;AAEA;AACA;AACA,kBAAIqC,yBACA,OAAKlO,UAAL,CAAgB,wBAAhB,EACI,EAAEmO,gBAAgBF,eAAlB,EADJ,CADJ;;AAIA,kBAAIG,oBAAoB9C,QAAQ4C,sBAAR,CAAxB;;AAEA,kBAAIE,iBAAJ,EAAuB;AACrB,uBAAKvO,cAAL,CAAoB4N,cAApB,CAAmCG,eAAnC;AACAF;AACD,eAHD,MAGO;AACLA;AACD;AACF,aAjBD,MAiBO;AACLA;AACD;AACF,WA5BD,MA4BO;AACLA;AACD;AACF;AACF,OA1CM,CAAP;AA2CD;;AAED;;;;;;qEAGiD;AAAA;;AAC/C;AACA,aAAO,KAAKW,+BAAL,GAAuC5I,IAAvC,CAA4C,YAAM;AACvD,eAAK5F,cAAL,CAAoB2F,WAApB;;AAEA;AACA,eAAK3F,cAAL,CAAoBmF,YAApB;AACA,eAAK5E,KAAL,GAAa,OAAKP,cAAL,CAAoBQ,SAAjC;;AAEA,eAAKiM,gBAAL;AACD,OARM,CAAP;AASD;;AAED;;;;;;;0CAIsB;AACpB,WAAKzM,cAAL,CAAoByO,eAApB,CAAoC,KAAK5N,YAAzC;AACA,WAAKb,cAAL,CAAoB2F,WAApB;AACD;;AAED;;;;;;wCAGoB;AAAA;;AAClB,WAAKmF,UAAL,CAAgB,YAAhB;;AAEA,UAAI,KAAKtJ,UAAT,EAAqB;AACnB,YAAI,KAAKkN,cAAL,IAAuB,IAA3B,EAAiC;AAC/B;AACA,eAAKA,cAAL,GAAsB,KAAK5O,aAAL,CAAmB6O,qBAAnB,EAAtB;AACD;;AAED,YAAI,KAAKC,mBAAL,IAA4B,IAAhC,EAAsC;AACpC;AACA,eAAK9O,aAAL,CAAmB+O,kBAAnB,GAAwCjJ,IAAxC,CAA6C,UAACgJ,mBAAD,EAAyB;AACpE,oBAAKA,mBAAL,GAA2BA,mBAA3B;AACD,WAFD;AAGD;AACF;AACF;;AAED;;;;;;;wCAIoB9E,e,EAAiB;AACnC;AACA,WAAKoB,sBAAL,GAA8B,IAA9B;AACA,WAAK4D,iBAAL,CAAuBhF,eAAvB;AACD;;AAED;;;;;;;6CAIyBA,e,EAAiB;AACxC,WAAKmB,iBAAL,GAAyB,IAAzB;AACA,WAAK6D,iBAAL,CAAuBhF,eAAvB;AACD;;AAED;;;;;;;sCAIkBA,e,EAAiB;AAAA;;AACjC,WAAKA,eAAL,GAAuBA,eAAvB;AACA,UAAI,KAAKA,eAAL,IAAwB,IAA5B,EAAkC;AAChC;AACA,aAAKiB,sBAAL,GAA8B,EAA9B;AACA,aAAKC,kBAAL,GAA0B,EAA1B;AACA,aAAKC,iBAAL,GAAyB,IAAzB;AACA,aAAKC,sBAAL,GAA8B,IAA9B;AACA,aAAKpB,eAAL,GAAuB,IAAvB;AACA,aAAKqB,aAAL,GAAqB,IAArB;AACD,OARD,MAQO;AACL;AACA,aAAKnL,cAAL,CAAoB+O,mBAApB,CAAwC,KAAKjF,eAA7C,EAA8DlE,IAA9D,CAAmE,UAACoJ,WAAD,EAAiB;;AAElF;AACA,kBAAKjE,sBAAL,GAA8B,EAA9B;AACA,kBAAKI,aAAL,GAAqB6D,WAArB;;AAEA;AACA,cAAMC,SAAS,QAAKjP,cAAL,CAAoBkP,qBAApB,CAA0C,QAAK/D,aAA/C,CAAf;AACA,kBAAKJ,sBAAL,GAA8BkE,OAAOzO,SAArC;AACA,kBAAKwK,kBAAL,GAA0BiE,OAAO1G,KAAjC;AACD,SAVD;AAWD;AACF;;AAED;;;;;;2CAGuB;AACrB,UAAI,KAAK4C,aAAL,IAAsB,IAA1B,EAAgC;AAC9B;AACA,YAAMgE,oBAAoB,KAAKhE,aAAL,CAAmBgE,iBAA7C;AACA7J,eAAOC,IAAP,CAAY4J,iBAAZ;AACD;AACF;;AAED;;;;;;;sCAIkB1G,I,EAAM;AACtB,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAMpC,SAASoC,KAAKN,EAApB;AACA,YAAMgH,oBAAoB,KAAKhE,aAAL,CAAmBgE,iBAA7C;AACA,YAAMC,iBAAkBD,oBAAoB,QAApB,GAA+B9I,MAAvD;AACAf,eAAOC,IAAP,CAAY6J,cAAZ;AACD;AACF;;AAED;;;;;;kCAGc;AACZ,UAAI5F,gBAAgB,KAAKC,wBAAL,EAApB;AACA,UAAID,iBAAiB,IAAjB,IAAyBA,cAAclG,MAAd,IAAwB,CAArD,EAAwD;AACtD;AACA2C,cAAM,iCAAN;AACD,OAHD,MAGO;AACL;;;;;AAKA,aAAK1E,cAAL,GAAsB,KAAtB;AACA,aAAK+F,cAAL,GAAsB,IAAtB;AACA,aAAKhG,WAAL,GAAmB,IAAnB;AACD;AACF;;AAED;;;;;;;+CAI2B;AACzB,UAAIkI,gBAAgB,EAApB;AADyB;AAAA;AAAA;;AAAA;AAEzB,8BAAiB,KAAKwB,kBAAtB,mIAA0C;AAAA,cAAjCqE,IAAiC;;AACxC,cAAIA,KAAKvC,OAAT,EAAkB;AAChB;;;;AAIAtD,0BAAcd,IAAd,CAAmB2G,KAAK5G,IAAxB;AACD;AACF;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWzB,aAAOe,aAAP;AACD;;AAED;;;;;;+CAG2B;AACzB,WAAKsB,UAAL,CAAgB,QAAhB;AACD;;AAED;;;;;;sCAGkB;AAChB,WAAKA,UAAL,CAAgB,UAAhB;AACD;;AAED;;;;;;sCAGkB;AAChB,WAAKnJ,iBAAL,GAAyB,CAAC,KAAKA,iBAA/B;AACA,UAAI,KAAKA,iBAAT,EAA4B;AAC1B,aAAK2N,iBAAL,GAAyB5C,QAAQ6C,MAAR,CAAe,KAAKvP,cAAL,CAAoBwP,OAAnC,EAA4C,CAA5C,CAAzB;AACD;AACF;;AAED;;;;;;4CAGwB;AACtB;AACA,UAAIA,UAAU9C,QAAQ+C,QAAR,CAAiB,KAAKH,iBAAtB,CAAd;AACA,WAAKtP,cAAL,CAAoB0P,UAApB,CAA+BF,OAA/B;AACA,WAAKtH,8CAAL;AACD;;AAED;;;;;;kDAG8B;AAC5B,UAAIyH,OAAO,KAAKxN,oBAAhB;;AAEA;;;;;;;AAOAwN,aAAO,KAAK7P,aAAL,CAAmB8P,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,aAAO,KAAKzP,WAAL,CAAiB2P,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,WAAK3P,cAAL,CAAoB8P,gBAApB,CAAqCH,IAArC;AACA,WAAK3P,cAAL,CAAoB2F,WAApB;AACD;;AAED;;;;;;;;0CAKsBU,M,EAAQ;AAC5B,aAAO,KAAKrG,cAAL,CAAoB+P,qBAApB,CAA0C1J,MAA1C,CAAP;AACD;;AAED;;;;;;mDAG+B;AAC7B;AACA,WAAKrG,cAAL,CAAoBgQ,wBAApB,CAA6C,KAAK7O,qBAAlD;;AAEA,UAAI,KAAKQ,iBAAT,EAA4B;AAC1B;;;;AAIA,aAAK2N,iBAAL,GAAyB5C,QAAQ6C,MAAR,CAAe,KAAKvP,cAAL,CAAoBwP,OAAnC,EAA4C,CAA5C,CAAzB;AACD;AACD,WAAKxP,cAAL,CAAoB2F,WAApB;AACD;;AAED;;;;;;;kDAI8B;AAC5B,UAAIsK,yBAAyB;AAC3BC,eAAO,IADoB;AAE3B9P,mBAAW,KAAKA,SAFW;AAG3B4D,gBAAQ;AAHmB,OAA7B;AAKA,WAAKxE,UAAL,CAAgB2Q,UAAhB,CAA2B,kBAA3B,EAA+CF,sBAA/C;AACD;;AAED;;;;;;;+BAIWG,I,EAAM;AACf;AACA,WAAKrJ,gBAAL,GAAwB,EAAxB;;AAEA;AACA,WAAKM,eAAL,GAAuB,EAAvB;;AAEA,UAAI+I,QAAQ,SAAZ,EAAuB;AACrB;AACA,aAAKzP,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKY,UAAL,GAAkB,KAAlB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKE,qBAAL,GAA6B,KAA7B;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,iBAAL,GAAyB,KAAzB;AACA,aAAKL,WAAL,GAAmB,IAAnB;AACD,OAVD,MAUO,IAAI8O,QAAQ,aAAZ,EAA2B;AAChC;AACA,aAAKzP,eAAL,GAAuB,CAAC,KAAKA,eAA7B;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKY,UAAL,GAAkB,KAAlB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKE,qBAAL,GAA6B,KAA7B;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKL,WAAL,GAAmB,IAAnB;AACD,OAZM,MAYA,IAAI8O,QAAQ,YAAZ,EAA0B;AAC/B;AACA,aAAKzP,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,CAAC,KAAKA,cAA5B;AACA,aAAKY,UAAL,GAAkB,KAAlB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKE,qBAAL,GAA6B,KAA7B;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKL,WAAL,GAAmB,IAAnB;AACD,OAZM,MAYA,IAAI8O,QAAQ,YAAZ,EAA0B;AAC/B;AACA,aAAKzP,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKY,UAAL,GAAkB,CAAC,KAAKA,UAAxB;AACA,aAAKD,cAAL,GAAsB,CAAC,KAAKA,cAA5B;AACA,aAAKE,qBAAL,GAA6B,KAA7B;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKL,WAAL,GAAmB,CAAC,KAAKE,UAAzB;AACD,OAZM,MAYA,IAAI4O,QAAQ,QAAZ,EAAsB;AAC3B;AACA,aAAKzP,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKY,UAAL,GAAkB,KAAlB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKE,qBAAL,GAA6B,CAAC,KAAKA,qBAAnC;AACA,aAAKC,YAAL,GAAoB,KAApB;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKL,WAAL,GAAmB,CAAC,KAAKG,qBAAzB;AACD,OAZM,MAYA,IAAI2O,QAAQ,UAAZ,EAAwB;AAC7B;AACA,aAAKzP,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKY,UAAL,GAAkB,KAAlB;AACA,aAAKD,cAAL,GAAsB,KAAtB;AACA,aAAKE,qBAAL,GAA6B,KAA7B;AACA,aAAKC,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKL,WAAL,GAAmB,CAAC,KAAKI,YAAzB;AACD;AACF;;AAED;;;;;;;wCAIoB;AAClB,UAAI,KAAKH,cAAT,EAAyB;AACvB,aAAKuJ,UAAL,CAAgB,SAAhB;AACD,OAFD,MAEO,IAAI,KAAKrJ,qBAAT,EAAgC;AACrC,aAAKqJ,UAAL,CAAgB,SAAhB;AACD,OAFM,MAEA,IAAI,KAAKpJ,YAAT,EAAuB;AAC5B,aAAKoJ,UAAL,CAAgB,SAAhB;AACD,OAFM,MAEA;AACL,aAAKpL,MAAL,CAAY+F,EAAZ,CAAe,WAAf;AACD;AACF;;AAED;;;;;;yCAGqB;AACnB;AACA,WAAK2F,eAAL;AACD;;AAED;;;;;;sCAGkB;AAChB;AACA,WAAKnL,kBAAL,CAAwB4B,cAAxB,CAAuC,IAAvC;;AAEA;AACA,WAAKiJ,UAAL,CAAgB,SAAhB;AACA,WAAKhJ,iBAAL;AACD;;;wCAEmB;AAClB,WAAK3C,aAAL,CAAmB,KAAnB;AACD;;AAED;;;;;;+CAG2B;AACzB,WAAK2L,UAAL,CAAgB,SAAhB;AACD;;AAED;;;;;;8CAG0B;AACxB,WAAKA,UAAL,CAAgB,SAAhB;AACD;;AAED;;;;;;;iDAI6B9C,Q,EAAU;AAAA;;AACrC,WAAKpI,QAAL,CAAc,YAAM;AAClB,YAAIoI,YAAY,IAAhB,EAAsB;AAAA;AAAA;AAAA;;AAAA;AACpB,kCAAoBA,QAApB,mIAA8B;AAAA,kBAArBb,OAAqB;;AAC5B,kBAAIA,WAAW,IAAf,EAAqB;AAAA;AACnB,sBAAI6C,cAAc9F,EAAE,MAAMiD,QAAQgB,EAAhB,CAAlB;;AAEA;AACA,sBAAI8B,0BAA0BD,YAAYE,GAAZ,CAAgB,iBAAhB,CAA9B;;AAEA;AACAF,8BAAYE,GAAZ,CAAgB,kBAAhB,EAAoC,SAApC;;AAEA;;;;;;AAMA,0BAAKtK,QAAL,CAAc,YAAM;AAClB;AACAoK,gCAAYE,GAAZ,CAAgB;AACd,oCAAc,iCADA;AAEd,0CAAoBD;AAFN,qBAAhB;AAID,mBAND;AAfmB;AAsBpB;AACF;AAzBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BrB;AACF,OA5BD;AA6BD;;AAED;;;;;;;;;;;8BAQUoG,S,EAAWC,Q,EAAUlL,I,EAAM;AACnC,UAAImL,UAAU,eAAd;AACA,UAAIlK,SAAS,IAAb;AACA,UAAIG,cAAc,IAAlB;AACA,UAAIgK,gBAAgB,IAApB;;AAEA,UAAIpL,QAAQ,IAAZ,EAAkB;AAChBA,eAAO,EAAP;AACD;AACD,WAAKnF,kBAAL,CAAwBiF,SAAxB,CAAkCqL,OAAlC,EAA2ClK,MAA3C,EAAmDG,WAAnD,EACEgK,aADF,EACiBF,QADjB,EAC2BD,SAD3B,EACsCjL,IADtC;AAED;;AAED;;;;;;;oDAIgC;AAC9B,UAAIsE,qBAAqB,EAAzB;AACA,UAAIF,gBAAgB,KAAKC,wBAAL,EAApB;AACA,WAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIU,cAAclG,MAAlC,EAA0CwF,GAA1C,EAA+C;AAC7C,YAAIyB,eAAef,cAAcV,CAAd,CAAnB;AACA,YAAIyB,gBAAgB,IAApB,EAA0B;AACxB;AACA,cAAIE,WAAW,KAAKM,sBAAL,CAA4BR,aAAapC,EAAzC,CAAf;AACA,cAAIsI,aAAahG,SAASgG,UAA1B;AACA,cAAIzE,QAAQ,EAAZ;;AAEA,cAAIyE,cAAc,IAAlB,EAAwB;AACtBzE,oBAAQzB,aAAayB,KAArB;AACD,WAFD,MAEO;AACLA,oBAAQyE,aAAa,IAAb,GAAoBlG,aAAayB,KAAzC;AACD;AACDtC,6BAAmBZ,CAAnB,IAAwBkD,KAAxB;AACD;AACF;AACD,aAAOtC,kBAAP;AACD;;AAED;;;;;;;;;2CAMuBrD,M,EAAQ;AAC7B,UAAIqK,QAAQ,IAAZ;AACA,UAAIC,mBAAmB,KAAK3Q,cAAL,CAAoB4Q,mBAApB,CAAwCvK,MAAxC,CAAvB;AACA,UAAIsK,oBAAoB,IAAxB,EAA8B;AAC5B;;AAEA;AACA,YAAIE,kBAAkBF,iBAAiBG,UAAjB,CAA4B,CAA5B,CAAtB;;AAEA;AACA,YAAIC,mBAAmBF,kBAAkB,EAAzC;;AAEA;AACAH,gBAAQ,KAAK9O,oBAAL,CAA0BmP,gBAA1B,CAAR;AACD;AACD,aAAOL,KAAP;AACD;;;;;;AAGHxR,kBAAkB8R,OAAlB,GAA4B,CACxB,eADwB,EAExB,SAFwB,EAGxB,WAHwB,EAIxB,WAJwB,EAKxB,IALwB,EAMxB,YANwB,EAOxB,QAPwB,EAQxB,QARwB,EASxB,cATwB,EAUxB,UAVwB,EAWxB,wBAXwB,EAYxB,eAZwB,EAaxB,qBAbwB,EAcxB,gBAdwB,EAexB,oBAfwB,EAgBxB,aAhBwB,CAA5B;;kBAmBe9R,iB","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n  constructor(\n      $anchorScroll,\n      $filter,\n      $interval,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $state,\n      $stateParams,\n      $timeout,\n      AuthorWebSocketService,\n      ConfigService,\n      ProjectAssetService,\n      ProjectService,\n      TeacherDataService,\n      UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$interval = $interval;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.AuthorWebSocketService = AuthorWebSocketService;\n    this.ConfigService = ConfigService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n\n    this.projectId = this.$stateParams.projectId;\n    this.runId = this.ConfigService.getRunId();\n    this.items = this.ProjectService.idToOrder;\n    this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.projectTitle = this.ProjectService.getProjectTitle();\n    this.inactiveGroups = this.ProjectService.getInactiveGroups();\n    this.inactiveNodes = this.ProjectService.getInactiveNodes();\n    this.projectScriptFilename = this.ProjectService.getProjectScriptFilename();\n\n    // show a message when there is more than one\n    // author currently authoring this project\n    this.currentAuthorsMessage = '';\n    this.projectMode = true;\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.showImportView = false;\n    this.importMode = false;\n    this.editProjectRubricMode = false;\n    this.advancedMode = false;\n    this.showJSONAuthoring = false;\n\n    /*\n     * The colors for the branch path steps. The colors are from\n     * http://colorbrewer2.org/\n     * http://colorbrewer2.org/export/colorbrewer.js\n     * The colors chosen are from the 'qualitative', 'Set2'.\n     */\n    this.stepBackgroundColors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3',\n        '#a6d854','#ffd92f','#e5c494','#b3b3b3'];\n\n    // we are opening the project so we will set the current node to null\n    this.TeacherDataService.setCurrentNode(null);\n\n    this.scrollToTopOfPage();\n\n    // process metadata\n    this.metadata = this.ProjectService.getProjectMetadata();\n\n    // notify others that this project is being authored\n    this.ProjectService.notifyAuthorProjectBegin(this.projectId);\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.projectId;\n\n    // set the project rubric into the summernote rubric\n    this.summernoteRubricHTML = this.ProjectService\n        .replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n    // the tooltip text for the insert WISE asset button\n    let insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    let insertAssetButton = this.UtilService.createInsertAssetButton(this,\n          this.projectId, null, null, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: insertAssetButton\n      }\n    };\n\n    this.$scope.$on('currentAuthorsReceived', (event, args) => {\n      let currentAuthorsUsernames = args.currentAuthorsUsernames;\n      let myUserName = this.ConfigService.getMyUserName();\n\n      // remove my username from the currentAuthors\n      currentAuthorsUsernames.splice(currentAuthorsUsernames.indexOf(myUserName),1);\n      if (currentAuthorsUsernames.length > 0) {\n        this.currentAuthorsMessage = this.$translate('concurrentAuthorsWarning',\n            { currentAuthors: currentAuthorsUsernames.join(', ') });\n      } else {\n        this.currentAuthorsMessage = '';\n      }\n    });\n\n    this.$scope.$on('$destroy', () => {\n      // notify others that this project is no longer being authored\n      this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      // make sure the event was fired for this component\n      if (args != null && args.projectId == this.projectId) {\n        // the asset was selected for this component\n        let assetItem = args.assetItem;\n        if (assetItem != null && assetItem.fileName != null) {\n          let fileName = assetItem.fileName;\n\n          /*\n           * get the assets directory path\n           * e.g.\n           * /wise/curriculum/3/\n           */\n          let assetsDirectoryPath =\n              this.ConfigService.getProjectAssetsDirectoryPath();\n          let fullAssetPath = assetsDirectoryPath + '/' + fileName;\n          let summernoteId = '';\n\n          if (args.target == 'rubric') {\n            // the target is the summernote rubric element\n            summernoteId = 'summernoteRubric_' + this.projectId;\n\n            if (summernoteId != '') {\n              if (this.UtilService.isImage(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // add the image html\n                $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n              } else if (this.UtilService.isVideo(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // insert the video element\n                let videoElement = document.createElement('video');\n                videoElement.controls = 'true';\n                videoElement.innerHTML =\n                    '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                $('#' + summernoteId).summernote('insertNode', videoElement);\n              }\n            }\n          } else if (args.target == 'scriptFilename') {\n            // the target is the project script filename\n            this.projectScriptFilename = fileName;\n            this.projectScriptFilenameChanged();\n          }\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    this.$rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n      if (toState != null) {\n        let stateName = toState.name;\n        if (stateName == 'root.project') {\n          this.saveEvent('projectHomeViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.node') {\n        } else if (stateName == 'root.project.asset') {\n          this.saveEvent('assetsViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.info') {\n          this.saveEvent('projectInfoViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.notebook') {\n          this.saveEvent('notebookViewOpened', 'Navigation');\n        }\n      }\n    });\n\n    this.$rootScope.$on('projectSaved', () => {\n      this.saveEvent('projectSaved', 'Authoring');\n    });\n\n    /*\n     * Listen for the event to parse the project. This is so other\n     * controllers can trigger parsing the project in this controller.\n     */\n    this.$rootScope.$on('parseProject', () => {\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n    });\n    this.saveEvent('projectOpened', 'Navigation');\n  };\n\n  /**\n   * Launch the project in preview mode\n   */\n  previewProject() {\n    let data = { constraints: true };\n    this.saveEvent('projectPreviewed', 'Navigation', data);\n    window.open(this.ConfigService.getConfigParam('previewProjectURL'));\n  };\n\n  /**\n   * Launch the project in preview mode without constraints\n   */\n  previewProjectWithoutConstraints() {\n    let data = { constraints: false };\n    this.saveEvent('projectPreviewed', 'Navigation', data);\n    window.open(this.ConfigService.getConfigParam('previewProjectURL') +\n        '?constraints=false');\n  };\n\n  viewProjectAssets() {\n    this.$state.go('root.project.asset', {projectId:this.projectId});\n  };\n\n  viewProjectHistory() {\n    this.$state.go('root.project.history', {projectId:this.projectId});\n  };\n\n  viewNotebookSettings() {\n    this.$state.go('root.project.notebook', {projectId:this.projectId});\n  }\n\n  saveProject() {\n    //let projectJSONString = JSON.stringify(this.project, null, 4);\n    //let commitMessage = $('#commitMessageInput').val();\n    let commitMessage = 'Made changes to Project.';\n    try {\n      // if projectJSONString is bad json, it will throw an exception and not save.\n      //this.ProjectService.project = this.project;\n\n      this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n        this.commitHistory = commitHistoryArray;\n        $('#commitMessageInput').val('');  // clear field after commit\n      });\n    } catch (error) {\n      alert('Invalid JSON. Please check syntax. Aborting save.');\n      return;\n    }\n  };\n\n  /**\n   * Make a request to download this project as a zip file\n   */\n  downloadProject() {\n    window.location.href = this.ConfigService.getWISEBaseURL()\n        + '/project/export/' + this.projectId;\n  }\n\n  /**\n   * Close authoring for the current project and bring user back to main AT page\n   */\n  closeProject() {\n    this.$state.go('root.main');\n  };\n\n  /**\n   * Get the node position\n   * @param nodeId the node id\n   * @returns the node position\n   */\n  getNodePositionById(nodeId) {\n    return this.ProjectService.getNodePositionById(nodeId);\n  };\n\n  /**\n   * The the components in the specified node id.\n   * @param nodeId the node id\n   * @returns components in the node\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Returns a list of possible criteria for the specified node and component\n   * @param nodeId the node id\n   * @param componentId the component id in the node\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n  }\n\n  /**\n   * Get the node title for a node\n   * @param nodeId the node id\n   * @returns the node title\n   */\n  getNodeTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodeTitleByNodeId(nodeId);\n  };\n\n  /**\n   * Check if a node id is for a group\n   * @param nodeId\n   * @returns whether the node is a group node\n   */\n  isGroupNode(nodeId) {\n    return this.ProjectService.isGroupNode(nodeId);\n  };\n\n  /**\n   * A node was clicked so we will go to the node authoring view\n   * @param nodeId\n   */\n  nodeClicked(nodeId) {\n    this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n    this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n  };\n\n  /**\n   * Create a new group (activity)\n   */\n  createGroup() {\n    const newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n    /*\n     * set the group into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = newGroup;\n\n    // turn off the create group div\n    this.showCreateGroup = false;\n\n    // clear the title from the create group div\n    this.createGroupTitle = '';\n\n    // turn on insert mode\n    this.insertGroupMode = true;\n\n    // turn on create mode\n    this.createMode = true;\n  }\n\n  /**\n   * Create a new node (step)\n   */\n  createNode() {\n    const newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n    /*\n     * set the node into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = newNode;\n\n    // turn off the create node div\n    this.showCreateNode = false;\n\n    // clear the title from the create node div\n    this.createNodeTitle = '';\n\n    // turn on insert mode\n    this.insertNodeMode = true;\n\n    // turn on create mode\n    this.createMode = true;\n  }\n\n  /**\n   * Insert the node(s) inside\n   * @param nodeId the node id of the group that we will insert into\n   * TODO refactor function is too big\n   */\n  insertInside(nodeId) {\n    // TODO check that we are inserting into a group\n    if (this.createMode) {\n      this.handleCreateModeInsert(nodeId, 'inside');\n    } else if (this.moveMode) {\n      this.handleMoveModeInsert(nodeId, 'inside');\n    } else if (this.copyMode) {\n      this.handleCopyModeInsert(nodeId, 'inside');\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Insert the node(s) after\n   * @param nodeId the node id of the node we will insert after\n   * TODO refactor the function is too large\n   */\n  insertAfter(nodeId) {\n    if (this.createMode) {\n      this.handleCreateModeInsert(nodeId, 'after');\n    } else if (this.moveMode) {\n      this.handleMoveModeInsert(nodeId, 'after');\n    } else if (this.copyMode) {\n      this.handleCopyModeInsert(nodeId, 'after');\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Create a node and then insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param type whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleCreateModeInsert(nodeId, type) {\n\n    if (type == 'inside') {\n      // create the node inside the group\n      this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n    } else if (type == 'after') {\n      // create the node after the node id\n      this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n    } else {\n      // an unspecified type was provided\n      return;\n    }\n\n    let newNodes = [this.nodeToAdd];\n    let newNode = this.nodeToAdd;\n\n    /*\n     * clear this variable that we used to hold the node we inserted.\n     * since we have inserted the node we don't need a handle to it\n     * anymore\n     */\n    this.nodeToAdd = null;\n\n    // turn off create mode\n    this.createMode = false;\n\n    // turn off insert mode\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n\n    this.temporarilyHighlightNewNodes(newNodes);\n\n    // save and refresh the project\n    this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n      if (newNode != null) {\n        let data = {\n          \"nodeId\": newNode.id,\n          \"title\": this.ProjectService\n              .getNodePositionAndTitleByNodeId(newNode.id)\n        };\n\n        if (this.ProjectService.isGroupNode(newNode.id)) {\n          // save the activity created event to the server\n          this.saveEvent('activityCreated', 'Authoring', data);\n        } else {\n          // save the step created event to the server\n          this.saveEvent('stepCreated', 'Authoring', data);\n        }\n      }\n    });\n  }\n\n  /**\n   * Move a node and insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param type whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleMoveModeInsert(nodeId, type) {\n    let selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n      /*\n       * the user is trying to insert the selected node ids after\n       * itself so we will not allow that\n       */\n      if (selectedNodeIds.length == 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n      } else if (selectedNodeIds.length > 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n      }\n    } else {\n      // perform the move\n\n      /*\n       * an array of nodes that will be saved in the data for the move\n       * event\n       */\n      let nodes = [];\n      for (let selectedNodeId of selectedNodeIds) {\n        let node = {\n          \"nodeId\": selectedNodeId,\n          \"fromTitle\": this.ProjectService\n              .getNodePositionAndTitleByNodeId(selectedNodeId)\n        };\n        nodes.push(node);\n      }\n\n      let newNodes = [];\n      if (type == 'inside') {\n        // move the nodes into the group\n        newNodes = this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n      } else if (type == 'after') {\n        // move the nodes after the node id\n        newNodes = this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n      } else {\n        // an unspecified type was provided\n        return;\n      }\n\n      // turn off move mode\n      this.moveMode = false;\n\n      // turn off insert mode\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n\n      this.temporarilyHighlightNewNodes(newNodes);\n\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNodes != null && newNodes.length > 0) {\n          let firstNewNode = newNodes[0];\n          if (firstNewNode != null && firstNewNode.id != null) {\n\n            // loop through all the nodes that will be saved in the event data\n            for (let n = 0; n < nodes.length; n++) {\n              let node = nodes[n];\n\n              // get the new node object\n              let newNode = newNodes[n];\n\n              if (node != null && newNode != null) {\n                // set the new title\n                node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n              }\n            }\n\n            if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n              let data = { activitiesMoved: nodes };\n              this.saveEvent('activityMoved', 'Authoring', data);\n            } else {\n              let data = { stepsMoved: nodes };\n              this.saveEvent('stepMoved', 'Authoring', data);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Copy a node and insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param type whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleCopyModeInsert(nodeId, type) {\n    /*\n     * an array of nodes that will be saved in the data for the move\n     * event\n     */\n    let nodes = [];\n    let selectedNodeIds = this.getSelectedItems();\n    for (let selectedNodeId of selectedNodeIds) {\n      let node = {\n        \"fromNodeId\": selectedNodeId,\n        \"fromTitle\": this.ProjectService\n            .getNodePositionAndTitleByNodeId(selectedNodeId)\n      };\n      nodes.push(node);\n    }\n\n    let newNodes = [];\n    if (type == 'inside') {\n      // copy the nodes into the group\n      newNodes = this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n    } else if (type == 'after') {\n      // copy the nodes and put them after the node id\n      newNodes = this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n    } else {\n      // an unspecified type was provided\n      return;\n    }\n\n    // turn off copy mode\n    this.copyMode = false;\n\n    // turn off insert mode\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n\n    this.temporarilyHighlightNewNodes(newNodes);\n\n    // save and refresh the project\n    this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n      if (newNodes != null && newNodes.length > 0) {\n        let firstNewNode = newNodes[0];\n        if (firstNewNode != null && firstNewNode.id != null) {\n          // loop through all the nodes that will be saved in the event data\n          for (let n = 0; n < nodes.length; n++) {\n            let node = nodes[n];\n            let newNode = newNodes[n];\n\n            if (node != null && newNode != null) {\n              // set the new id\n              node.toNodeId = newNode.id;\n\n              // set the new title\n              node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n            }\n          }\n\n          if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n            let data = { activitiesCopied: nodes };\n            this.saveEvent('activityCopied', 'Authoring', data);\n          } else {\n            let data = { stepsCopied: nodes };\n            this.saveEvent('stepCopied', 'Authoring', data);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Import the step and then create a stepImported event\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  importSelectedNodes(nodeIdToInsertInsideOrAfter) {\n    let selectedNodes = this.getSelectedNodesToImport();\n\n    // get the node titles that we are importing\n    let selectedNodeTitles = this.getSelectedNodeTitlesToImport();\n\n    // get the project id we are importing into\n    let toProjectId = this.ConfigService.getConfigParam('projectId');\n\n    // get the project id we are importing from\n    let fromProjectId = this.importProjectId;\n\n    // import the selected nodes and place them after the given group\n    this.performImport(nodeIdToInsertInsideOrAfter).then((newNodes) => {\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        /*\n         * use a timeout to allow angular to update the UI and then\n         * highlight and scroll to the new nodes\n         */\n        this.$timeout(() => {\n          for (let newNode of newNodes) {\n            if (newNode != null) {\n              let nodeElement = $('#' + newNode.id);\n\n              // save the original background color\n              let originalBackgroundColor = nodeElement.css('backgroundColor');\n\n              // highlight the background to draw attention to it\n              nodeElement.css('background-color', '#FFFF9C');\n\n              /*\n               * Use a timeout before starting to transition back to\n               * the original background color. For some reason the\n               * element won't get highlighted in the first place\n               * unless this timeout is used.\n               */\n              this.$timeout(() => {\n                // slowly fade back to original background color\n                nodeElement.css({\n                  'transition': 'background-color 2s ease-in-out',\n                  'background-color': originalBackgroundColor\n                });\n              });\n            }\n          }\n\n          if (newNodes != null && newNodes.length > 0) {\n            // get the UI element of the first new node\n            let nodeElement = $('#' + newNodes[0].id);\n            if (nodeElement != null) {\n              // scroll to the first new node that we've added\n              $('#content').animate({\n                scrollTop: nodeElement.prop('offsetTop') - 60\n              }, 1000);\n            }\n          }\n        });\n\n        // the data for the step imported event\n        let data = {\n          stepsImported: []\n        };\n\n        for (let n = 0; n < selectedNodes.length; n++) {\n          let selectedNode = selectedNodes[n];\n\n          // get the old step title\n          let selectedNodeTitle = selectedNodeTitles[n];\n          let newNode = newNodes[n];\n\n          // set the from and to ids and titles\n          let tempNode = {\n            fromProjectId: parseInt(fromProjectId),\n            fromNodeId: selectedNode.id,\n            fromTitle: selectedNodeTitle,\n            toNodeId: newNode.id,\n            toTitle: this.ProjectService\n              .getNodePositionAndTitleByNodeId(newNode.id)\n          };\n          data.stepsImported.push(tempNode);\n        }\n        this.saveEvent('stepImported', 'Authoring', data);\n      });\n    });\n  }\n\n  /**\n   * Import the step and place it in the chosen location\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  performImport(nodeIdToInsertInsideOrAfter) {\n    let selectedNodes = this.getSelectedNodesToImport();\n\n    // get the project id we are importing into\n    let toProjectId = this.ConfigService.getConfigParam('projectId');\n\n    // get the project id we are importing from\n    let fromProjectId = this.importProjectId;\n\n    // copy the nodes into the project\n    return this.ProjectService.copyNodes(selectedNodes, fromProjectId,\n      toProjectId, nodeIdToInsertInsideOrAfter).then((newNodes) => {\n\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n\n      this.insertNodeMode = false;\n      this.toggleView('project');\n\n      // clear the import fields\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n\n      /*\n       * go back to the project view and\n       * refresh the project assets in case any of the imported\n       * steps also imported assets\n       */\n      this.showProjectHome();\n      this.ProjectAssetService.retrieveProjectAssets();\n      return newNodes;\n    });\n  }\n\n  /**\n   * Turn on copy mode\n   */\n  copy() {\n    // make sure there is at least one item selected\n    let selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      let selectedItemTypes = this.getSelectedItemTypes();\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n        if (selectedItemTypes.length === 0) {\n          // there are no selected items\n          alert('Please select an item to copy.');\n        } else if (selectedItemTypes.length === 1 &&\n          selectedItemTypes[0] === 'node') {\n          // turn on insert and copy modes\n          this.insertNodeMode = true;\n          this.copyMode = true;\n        } else {\n          alert('You cannot copy the item(s) at this time.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Turn on move mode\n   * TODO refactor. too many nesting\n   */\n  move() {\n    // make sure there is at least one item selected\n    let selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      let selectedItemTypes = this.getSelectedItemTypes();\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n        if (selectedItemTypes.length == 0) {\n          // there are no selected items\n          alert('Please select an item to move.');\n        } else if (selectedItemTypes.length == 1) {\n          // all the items the user selected are the same type TODO: i18n\n          if (selectedItemTypes[0] === 'group') {\n            this.insertGroupMode = true;\n            this.moveMode = true;\n          } else if (selectedItemTypes[0] === 'node') {\n            this.insertNodeMode = true;\n            this.moveMode = true;\n          }\n        } else if (selectedItemTypes.length > 1) {\n          /*\n           * the items the user selected are different types but\n           * we do not allow moving different types of items at\n           * the same time\n           * TODO: i18n\n           */\n          alert('If you want to move multiple items at once, ' +\n              'they must be of the same type. Please select only activities ' +\n              'or only steps.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the selected nodes after asking user for confirmation\n   */\n  delete() {\n    let selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null) {\n      let confirmMessage = null;\n      if (selectedNodeIds.length == 1) {\n        // the user selected one item TODO: i18n\n        confirmMessage = 'Are you sure you want to delete the selected item?';\n      } else if (selectedNodeIds.length > 1) {\n        // the user selected multiple items TODO: i18n\n        confirmMessage = 'Are you sure you want to delete the '\n            + selectedNodeIds.length + ' selected items?';\n      }\n      if (confirmMessage != null) {\n        if (confirm(confirmMessage)) {\n          // flag that will be set if we have deleted the start node id\n          let deletedStartNodeId = false;\n          let activityDeleted = false;\n          let stepDeleted = false;\n          let stepsDeleted = [];\n          let activitiesDeleted = [];\n          for (let nodeId of selectedNodeIds) {\n            let node = this.ProjectService.getNodeById(nodeId);\n            let tempNode = {};\n\n            if (node != null) {\n              tempNode.nodeId = node.id;\n              tempNode.title =\n                  this.ProjectService.getNodePositionAndTitleByNodeId(node.id);\n            }\n\n            if (this.ProjectService.isStartNodeId(nodeId)) {\n              // we have deleted the start node id\n              deletedStartNodeId = true;\n            }\n\n            if (this.ProjectService.isGroupNode(nodeId)) {\n              // we are deleting an activity\n              activityDeleted = true;\n              let stepsInActivityDeleted = [];\n              for (let stepNodeId of node.ids) {\n                let stepTitle = this.ProjectService\n                    .getNodePositionAndTitleByNodeId(stepNodeId);\n\n                // create an object with the step id and title\n                let stepObject = {\n                  \"nodeId\": stepNodeId,\n                  \"title\": stepTitle\n                };\n                stepsInActivityDeleted.push(stepObject);\n              }\n              tempNode.stepsInActivityDeleted = stepsInActivityDeleted;\n              activitiesDeleted.push(tempNode);\n            } else {\n              // we are deleting a step\n              stepDeleted = true;\n              stepsDeleted.push(tempNode);\n            }\n            this.ProjectService.deleteNode(nodeId);\n          }\n\n          // update start node id if necesary\n          if (deletedStartNodeId) {\n            this.updateStartNodeId();\n          }\n\n          if (activityDeleted) {\n            let data = {\n              \"activitiesDeleted\": activitiesDeleted\n            };\n            this.saveEvent('activityDeleted', 'Authoring', data);\n          }\n\n          if (stepDeleted) {\n            let data = {\n              \"stepsDeleted\": stepsDeleted\n            };\n            this.saveEvent('stepDeleted', 'Authoring', data);\n          }\n\n          // save the project and refresh\n          this.ProjectService.saveProject();\n          this.ProjectService.parseProject();\n          this.items = this.ProjectService.idToOrder;\n        }\n      }\n    }\n    this.unselectAllItems();\n  }\n\n  /**\n   * Get the selected items\n   * @returns an array of node ids that are selected\n   */\n  getSelectedItems() {\n    // an array to hold the node ids of the nodes that are selected\n    let selectedNodeIds = [];\n\n    // loop through all the node checkboxes\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n        // this node is checked\n        selectedNodeIds.push(key);\n      }\n    }, selectedNodeIds);\n\n    if (this.inactiveNodes != null) {\n      for (let inactiveNode of this.inactiveNodes) {\n        if (inactiveNode != null && inactiveNode.checked) {\n          // the inactive node was checked so we will add it\n          selectedNodeIds.push(inactiveNode.id);\n        }\n      }\n    }\n    return selectedNodeIds;\n  }\n\n  /**\n   * Get the types of the selected items\n   * @returns an array of item types. possible items are group or node.\n   */\n  getSelectedItemTypes() {\n    let selectedItemTypes = [];\n\n    // loop through all the node checkboxes\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n        // this node is checked\n        let node = this.ProjectService.getNodeById(key);\n        if (node != null) {\n          let nodeType = node.type;\n          if (selectedItemTypes.indexOf(nodeType) == -1) {\n            // we have not seen this node type yet so we will add it\n            selectedItemTypes.push(nodeType);\n          }\n        }\n      }\n    }, this);\n\n    if (this.inactiveNodes != null) {\n      for (let inactiveNode of this.inactiveNodes) {\n        if (inactiveNode != null && inactiveNode.checked) {\n          let inactiveNodeType = inactiveNode.type;\n          if (selectedItemTypes.indexOf(inactiveNodeType) == -1) {\n            // we have not seen this node type yet so we will add it\n            selectedItemTypes.push(inactiveNodeType);\n          }\n        }\n      }\n    }\n\n    return selectedItemTypes;\n  }\n\n  /**\n   * Unselect all the items\n   */\n  unselectAllItems() {\n    angular.forEach(this.items, function(value, key) {\n      value.checked = false;\n    });\n  }\n\n  /**\n   * Show the create group input\n   */\n  creatNewActivityClicked() {\n    this.createGroupTitle = '';\n    this.toggleView('createGroup');\n    if (this.showCreateGroup) {\n      /*\n       * we are showing the create node view so we will give focus to the\n       * createGroupTitle input element\n       */\n      this.$timeout(() => {\n        let createGroupTitleInput = document.getElementById('createGroupTitle');\n        if (createGroupTitleInput != null) {\n          createGroupTitleInput.focus();\n        }\n      });\n    }\n  }\n\n  /**\n   * Toggle the create node input\n   */\n  createNewStepClicked() {\n    this.createNodeTitle = '';\n    this.toggleView('createNode');\n    if (this.showCreateNode) {\n      /*\n       * we are showing the create node view so we will give focus to the\n       * createNodeTitle input element\n       */\n      this.$timeout(() => {\n        let createNodeTitleInput = document.getElementById('createNodeTitle');\n        if (createNodeTitleInput != null) {\n          createNodeTitleInput.focus();\n        }\n      });\n    }\n  }\n\n  /**\n   * Cancel the move mode\n   */\n  cancelMove() {\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n\n    // clear any new node that we might be inserting\n    this.nodeToAdd = null;\n\n    // turn off the modes\n    this.createMode = false;\n    this.moveMode = false;\n    this.copyMode = false;\n    this.importMode = false;\n\n    // uncheck all the checkboxes\n    this.unselectAllItems();\n  }\n\n  /**\n   * Update the start node id by traversing start ids until a\n   * node id is found.\n   */\n  updateStartNodeId() {\n    let newStartNodeId = null;\n    let startGroupId = this.ProjectService.getStartGroupId();\n    let node = this.ProjectService.getNodeById(startGroupId);\n    let done = false;\n\n    // recursively traverse the start ids\n    while (!done) {\n      if (node == null) {\n        // base case in case something went wrong\n        done = true;\n      } else if (this.ProjectService.isGroupNode(node.id)) {\n        // the node is a group node so we will get its start node\n        node = this.ProjectService.getNodeById(node.startId);\n      } else if (this.ProjectService.isApplicationNode(node.id)) {\n        // the node is a step node so we have found the new start node id\n        newStartNodeId = node.id;\n        done = true;\n      } else {\n        // base case in case something went wrong\n        done = true;\n      }\n    }\n\n    if (newStartNodeId) {\n      this.ProjectService.setStartNodeId(newStartNodeId);\n    }\n  }\n\n  /**\n   * Check if the start node id for the project could potentially\n   * change.\n   */\n  checkPotentialStartNodeIdChange() {\n    return this.$q((resolve, reject) => {\n      let firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n      if (firstLeafNodeId == null) {\n        // there are no steps in the project\n        // set the start node id to empty string\n        this.ProjectService.setStartNodeId('');\n        resolve();\n      } else {\n        // we have found a leaf node\n        let currentStartNodeId = this.ProjectService.getStartNodeId();\n        if (currentStartNodeId != firstLeafNodeId) {\n          /*\n           * the node ids are different which means the first leaf node\n           * id is different than the current start node id and that\n           * the author may want to use the first leaf node id as the\n           * new start node id\n           */\n          let firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n          if (firstLeafNode != null) {\n            let firstChildTitle = firstLeafNode.title;\n\n            // ask the user if they would like to change the start\n            // step to the step that is now the first child in the group\n            let confirmUpdateStartStep =\n                this.$translate('confirmUpdateStartStep',\n                    { startStepTitle: firstChildTitle });\n\n            let doUpdateStartStep = confirm(confirmUpdateStartStep);\n\n            if (doUpdateStartStep) {\n              this.ProjectService.setStartNodeId(firstLeafNodeId);\n              resolve();\n            } else {\n              resolve();\n            }\n          } else {\n            resolve();\n          }\n        } else {\n          resolve();\n        }\n      }\n    });\n  }\n\n  /**\n   * Check if the start node id has changed and then save the project\n   */\n  checkPotentialStartNodeIdChangeThenSaveProject() {\n    // check if the project start node id should be changed\n    return this.checkPotentialStartNodeIdChange().then(() => {\n      this.ProjectService.saveProject();\n\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n\n      this.unselectAllItems();\n    });\n  }\n\n  /**\n   * The project title changed so we will update the project title in the\n   * project service and save the project\n   */\n  projectTitleChanged() {\n    this.ProjectService.setProjectTitle(this.projectTitle);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Toggle the import view and load the project drop downs if necessary\n   */\n  importStepClicked() {\n    this.toggleView('importStep');\n\n    if (this.importMode) {\n      if (this.myProjectsList == null) {\n        // populate the authorable projects drop down\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        // populate the library projects drop down\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n    // clear the select drop down for the library project\n    this.importLibraryProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n    this.importProjectId = importProjectId;\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      // get the import project\n      this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n\n        // create the mapping of node id to order for the import project\n        this.importProjectIdToOrder = {};\n        this.importProject = projectJSON;\n\n        // calculate the node order of the import project\n        const result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = result.idToOrder;\n        this.importProjectItems = result.nodes;\n      });\n    }\n  }\n\n  /**\n   * Preview the import project in a new tab\n   */\n  previewImportProject() {\n    if (this.importProject != null) {\n      // get the preview project url for the import project\n      const previewProjectURL = this.importProject.previewProjectURL;\n      window.open(previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the step in a new tab\n   * @param node\n   */\n  previewImportNode(node) {\n    if (node != null) {\n      const nodeId = node.id;\n      const previewProjectURL = this.importProject.previewProjectURL;\n      const previewStepURL  = previewProjectURL + '#/vle/' + nodeId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importSteps() {\n    let selectedNodes = this.getSelectedNodesToImport();\n    if (selectedNodes == null || selectedNodes.length == 0) {\n      // TODO i18n\n      alert('Please select a step to import.');\n    } else {\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.insertNodeMode = true;\n      this.projectMode = true;\n    }\n  }\n\n  /**\n   * Get the selected nodes to import\n   * @return an array of selected nodes\n   */\n  getSelectedNodesToImport() {\n    let selectedNodes = [];\n    for (let item of this.importProjectItems) {\n      if (item.checked) {\n        /*\n         * this item is checked so we will add it to the array of nodes\n         * that we will import\n         */\n        selectedNodes.push(item.node);\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Show the view to edit the project rubric\n   */\n  editProjectRubricClicked() {\n    this.toggleView('rubric');\n  }\n\n  /**\n   * Show the advanced authoring view\n   */\n  advancedClicked() {\n    this.toggleView('advanced');\n  }\n\n  /**\n   * The show JSON button was clicked\n   */\n  showJSONClicked() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n    if (this.showJSONAuthoring) {\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n  }\n\n  /**\n   * Save the project JSON string to the server\n   */\n  saveProjectJSONString() {\n    // create the project object from the project JSON string\n    let project = angular.fromJson(this.projectJSONString);\n    this.ProjectService.setProject(project);\n    this.checkPotentialStartNodeIdChangeThenSaveProject();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the project rubric\n    this.ProjectService.setProjectRubric(html);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Check if the node is in any branch path\n   * @param nodeId the node id of the node\n   * @return whether the node is in any branch path\n   */\n  isNodeInAnyBranchPath(nodeId) {\n    return this.ProjectService.isNodeInAnyBranchPath(nodeId);\n  }\n\n  /**\n   * The project script file name changed\n   */\n  projectScriptFilenameChanged() {\n    // update the project script file name in the project service\n    this.ProjectService.setProjectScriptFilename(this.projectScriptFilename);\n\n    if (this.showJSONAuthoring) {\n      /*\n       * we are showing the project JSON authoring so we need to update\n       * the JSON string that we are showing in the textarea\n       */\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * project script filename\n   */\n  chooseProjectScriptFilename() {\n    let openAssetChooserParams = {\n      popup: true,\n      projectId: this.projectId,\n      target: 'scriptFilename'\n    };\n    this.$rootScope.$broadcast('openAssetChooser', openAssetChooserParams);\n  }\n\n  /**\n   * Show the appropriate authoring view\n   * @param view the view to show\n   */\n  toggleView(view) {\n    // clear the input element for creating a new activity\n    this.createGroupTitle = '';\n\n    // clear the input element for creating a new step\n    this.createNodeTitle = '';\n\n    if (view == 'project') {\n      // we are showing the regular project view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n      this.projectMode = true;\n    } else if (view == 'createGroup') {\n      // toggle the create activity view\n      this.showCreateGroup = !this.showCreateGroup;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'createNode') {\n      // toggle the create step view\n      this.showCreateGroup = false;\n      this.showCreateNode = !this.showCreateNode;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'importStep') {\n      // toggle the import step view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = !this.importMode;\n      this.showImportView = !this.showImportView;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the import view is shown, do not show the project view\n      this.projectMode = !this.importMode;\n    } else if (view == 'rubric') {\n      // toggle the rubric view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = !this.editProjectRubricMode;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the rubric view is shown, do not show the project view\n      this.projectMode = !this.editProjectRubricMode;\n    } else if (view == 'advanced') {\n      // toggle the advanced view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = !this.advancedMode;\n      this.showJSONAuthoring = false;\n\n      // if the advanced view is shown, do not show the project view\n      this.projectMode = !this.advancedMode;\n    }\n  }\n\n  /**\n   * Go back to a previous page, which is different based on which page\n   * the author is currently on.\n   */\n  backButtonClicked() {\n    if (this.showImportView) {\n      this.toggleView('project');\n    } else if (this.editProjectRubricMode) {\n      this.toggleView('project');\n    } else if (this.advancedMode) {\n      this.toggleView('project');\n    } else {\n      this.$state.go('root.main');\n    }\n  }\n\n  /**\n   * Show the regular project view\n   */\n  projectHomeClicked() {\n    // show the regular project view\n    this.showProjectHome();\n  }\n\n  /**\n   * Show the regular project view\n   */\n  showProjectHome() {\n    // we are going to the project view so we will set the current node to null\n    this.TeacherDataService.setCurrentNode(null);\n\n    // show the regular project view\n    this.toggleView('project');\n    this.scrollToTopOfPage();\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n\n  /**\n   * Creating a group was cancelled, so show the project regular project view\n   */\n  cancelCreateGroupClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Creating a node was cancelled, so show the project view\n   */\n  cancelCreateNodeClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Temporarily highlight the new nodes\n   * @param newNodes the new nodes to highlight\n   */\n  temporarilyHighlightNewNodes(newNodes) {\n    this.$timeout(() => {\n      if (newNodes != null) {\n        for (let newNode of newNodes) {\n          if (newNode != null) {\n            let nodeElement = $('#' + newNode.id);\n\n            // save the original background color\n            let originalBackgroundColor = nodeElement.css('backgroundColor');\n\n            // highlight the background briefly to draw attention to it\n            nodeElement.css('background-color', '#FFFF9C');\n\n            /*\n             * Use a timeout before starting to transition back to\n             * the original background color. For some reason the\n             * element won't get highlighted in the first place\n             * unless this timeout is used.\n             */\n            this.$timeout(() => {\n              // slowly fade back to original background color\n              nodeElement.css({\n                'transition': 'background-color 3s ease-in-out',\n                'background-color': originalBackgroundColor\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n    let context = 'AuthoringTool';\n    let nodeId = null;\n    let componentId = null;\n    let componentType = null;\n\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId,\n      componentType, category, eventName, data);\n  }\n\n  /**\n   * Get the selected node titles that we are importing\n   * @return an array of node titles that may include the step numbers\n   */\n  getSelectedNodeTitlesToImport() {\n    let selectedNodeTitles = [];\n    let selectedNodes = this.getSelectedNodesToImport();\n    for (let n = 0; n < selectedNodes.length; n++) {\n      let selectedNode = selectedNodes[n];\n      if (selectedNode != null) {\n        // get the step number and title from the import project\n        let tempNode = this.importProjectIdToOrder[selectedNode.id];\n        let stepNumber = tempNode.stepNumber;\n        let title = '';\n\n        if (stepNumber == null) {\n          title = selectedNode.title;\n        } else {\n          title = stepNumber + ': ' + selectedNode.title;\n        }\n        selectedNodeTitles[n] = title;\n      }\n    }\n    return selectedNodeTitles;\n  }\n\n  /**\n   * Get the background color for a step\n   * @param nodeId get the background color for a step in the project view\n   * @return If the node is in a branch path it will return a color. If the\n   * ndoe is not in a branch path it will return null.\n   */\n  getStepBackgroundColor(nodeId) {\n    let color = null;\n    let branchPathLetter = this.ProjectService.getBranchPathLetter(nodeId);\n    if (branchPathLetter != null) {\n      // the node is in a branch path\n\n      // get the ascii code for the letter. example A=65, B=66, C=67, etc.\n      let letterASCIICode = branchPathLetter.charCodeAt(0);\n\n      // get the branch path number A=0, B=1, C=2, etc.\n      let branchPathNumber = letterASCIICode - 65;\n\n      // get the color for the branch path number\n      color = this.stepBackgroundColors[branchPathNumber];\n    }\n    return color;\n  }\n}\n\nProjectController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$interval',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'AuthorWebSocketService',\n    'ConfigService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default ProjectController;\n"]}