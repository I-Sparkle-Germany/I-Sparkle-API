{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$anchorScroll","$filter","$interval","$mdDialog","$q","$rootScope","$scope","$state","$stateParams","$timeout","AuthorWebSocketService","ConfigService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","projectScriptFilename","getProjectScriptFilename","currentAuthorsMessage","projectMode","showImportView","importMode","editProjectRubricMode","advancedMode","showJSONAuthoring","stepBackgroundColors","setCurrentNode","scrollToTopOfPage","metadata","getProjectMetadata","notifyAuthorProjectBegin","summernoteRubricId","summernoteRubricHTML","replaceAssetPaths","getProjectRubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","$on","event","args","currentAuthorsUsernames","myUserName","getMyUserName","splice","indexOf","length","currentAuthors","join","notifyAuthorProjectEnd","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","projectScriptFilenameChanged","hide","toState","toParams","fromState","fromParams","stateName","name","saveEvent","parseProject","data","constraints","window","open","getConfigParam","go","commitMessage","saveProject","then","commitHistoryArray","commitHistory","val","error","alert","location","href","getWISEBaseURL","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","endCurrentNodeAndSetCurrentNodeByNodeId","newGroup","createGroup","createGroupTitle","nodeToAdd","insertGroupMode","createMode","newNode","createNode","createNodeTitle","insertNodeMode","createNodeInside","newNodes","highlightNewNodes","checkPotentialStartNodeIdChangeThenSaveProject","id","title","getNodePositionAndTitleByNodeId","moveMode","selectedNodeIds","getSelectedItems","nodes","n","selectedNodeId","node","fromTitle","push","moveNodesInside","firstNewNode","toTitle","activitiesMoved","stepsMoved","copyMode","fromNodeId","copyNodesInside","toNodeId","activitiesCopied","stepsCopied","importSelectedNodes","createNodeAfter","moveNodesAfter","activitesMoved","copyNodesAfter","nodeIdToInsertInsideOrAfter","selectedNodes","getSelectedNodesToImport","selectedNodeTitles","getSelectedNodeTitlesToImport","toProjectId","fromProjectId","importProjectId","performImport","nodeElement","originalBackgroundColor","css","animate","scrollTop","prop","stepsImported","selectedNode","selectedNodeTitle","tempNode","parseInt","copyNodes","toggleView","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProject","showProjectHome","retrieveProjectAssets","selectedItemTypes","getSelectedItemTypes","confirmMessage","doDelete","confirm","deletedStartNodeId","activityDeleted","stepDeleted","stepsDeleted","activitiesDeleted","getNodeById","isStartNodeId","stepsInActivityDeleted","s","ids","stepNodeId","stepTitle","stepObject","deleteNode","updateStartNodeId","unselectAllItems","angular","forEach","value","key","checked","i","inactiveNode","nodeType","type","createGroupTitleInput","getElementById","focus","createNodeTitleInput","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","currentStartNodeId","getStartNodeId","firstLeafNodeId","getFirstLeafNodeId","firstLeafNode","firstChildTitle","confirmUpdateStartStep","startStepTitle","answer","checkPotentialStartNodeIdChange","setProjectTitle","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","previewProjectURL","previewStepURL","item","projectJSONString","toJson","project","fromJson","setProject","html","removeAbsoluteAssetPaths","insertWISELinks","setProjectRubric","isNodeInAnyBranchPath","setProjectScriptFilename","openAssetChooserParams","popup","$broadcast","view","eventName","category","context","componentType","stepNumber","color","branchPathLetter","getBranchPathLetter","letterASCIICode","charCodeAt","branchPathNumber","$inject"],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n  constructor($anchorScroll,\n        $filter,\n        $interval,\n        $mdDialog,\n        $q,\n        $rootScope,\n        $scope,\n        $state,\n        $stateParams,\n        $timeout,\n        AuthorWebSocketService,\n        ConfigService,\n        ProjectAssetService,\n        ProjectService,\n        TeacherDataService,\n        UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$interval = $interval;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.AuthorWebSocketService = AuthorWebSocketService;\n    this.ConfigService = ConfigService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n\n    this.projectId = this.$stateParams.projectId;\n    this.runId = this.ConfigService.getRunId();\n    this.items = this.ProjectService.idToOrder;\n    this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.projectTitle = this.ProjectService.getProjectTitle();\n    this.inactiveGroups = this.ProjectService.getInactiveGroups();\n    this.inactiveNodes = this.ProjectService.getInactiveNodes();\n    this.projectScriptFilename = this.ProjectService.getProjectScriptFilename();\n    this.currentAuthorsMessage = \"\";  // show a message when there is more than one author currently authoring this project\n\n    this.projectMode = true;\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.showImportView = false;\n    this.importMode = false;\n    this.editProjectRubricMode = false;\n    this.advancedMode = false;\n    this.showJSONAuthoring = false;\n\n    /*\n     * The colors for the branch path steps. The colors are from\n     * http://colorbrewer2.org/\n     * http://colorbrewer2.org/export/colorbrewer.js\n     * The colors chosen are from the \"qualitative\", \"Set2\".\n     */\n    this.stepBackgroundColors = [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"];\n\n    // we are opening the project so we will set the current node to null\n    this.TeacherDataService.setCurrentNode(null);\n\n    this.scrollToTopOfPage();\n\n    // process metadata\n    this.metadata = this.ProjectService.getProjectMetadata();\n\n    // notify others that this project is being authored\n    this.ProjectService.notifyAuthorProjectBegin(this.projectId);\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.projectId;\n\n    // set the project rubric into the summernote rubric\n    this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, this.projectId, null, null, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.$scope.$on('currentAuthorsReceived', (event, args) => {\n      let currentAuthorsUsernames = args.currentAuthorsUsernames;\n      let myUserName = this.ConfigService.getMyUserName();\n\n      // remove my username from the currentAuthors\n      currentAuthorsUsernames.splice(currentAuthorsUsernames.indexOf(myUserName),1);\n      if (currentAuthorsUsernames.length > 0) {\n        this.currentAuthorsMessage = this.$translate('concurrentAuthorsWarning',\n            { currentAuthors: currentAuthorsUsernames.join(\", \") });\n      } else {\n        this.currentAuthorsMessage = \"\";\n      }\n    });\n\n    this.$scope.$on(\"$destroy\", () => {\n      // notify others that this project is no longer being authored\n      this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      // make sure the event was fired for this component\n      if (args != null && args.projectId == this.projectId) {\n        // the asset was selected for this component\n        var assetItem = args.assetItem;\n\n        if (assetItem != null && assetItem.fileName != null) {\n          var fileName = assetItem.fileName;\n\n          /*\n           * get the assets directory path\n           * e.g.\n           * /wise/curriculum/3/\n           */\n          var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n          var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n          var summernoteId = '';\n\n          if (args.target == 'rubric') {\n            // the target is the summernote rubric element\n            summernoteId = 'summernoteRubric_' + this.projectId;\n\n            if (summernoteId != '') {\n              if (this.UtilService.isImage(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // add the image html\n                $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n              } else if (this.UtilService.isVideo(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // insert the video element\n                var videoElement = document.createElement('video');\n                videoElement.controls = 'true';\n                videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                $('#' + summernoteId).summernote('insertNode', videoElement);\n              }\n            }\n          } else if (args.target == 'scriptFilename') {\n            // the target is the project script filename\n            this.projectScriptFilename = fileName;\n            this.projectScriptFilenameChanged();\n          }\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    this.$rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n      if (toState != null) {\n        let stateName = toState.name;\n\n        if (stateName == 'root.project') {\n          this.saveEvent('projectHomeViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.node') {\n        } else if (stateName == 'root.project.asset') {\n          this.saveEvent('assetsViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.info') {\n          this.saveEvent('projectInfoViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.notebook') {\n          this.saveEvent('notebookViewOpened', 'Navigation');\n        }\n      }\n    });\n\n    this.$rootScope.$on('projectSaved', () => {\n      this.saveEvent('projectSaved', 'Authoring');\n    });\n\n    /*\n     * Listen for the event to parse the project. This is so other\n     * controllers can trigger parsing the project in this controller.\n     */\n    this.$rootScope.$on('parseProject', () => {\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n    });\n    this.saveEvent('projectOpened', 'Navigation');\n  };\n\n  /**\n   * Launch the project in preview mode\n   */\n  previewProject() {\n    let data = { constraints: true };\n    this.saveEvent('projectPreviewed', 'Navigation', data);\n    window.open(this.ConfigService.getConfigParam(\"previewProjectURL\"));\n  };\n\n  /**\n   * Launch the project in preview mode without constraints\n   */\n  previewProjectWithoutConstraints() {\n    let data = { constraints: false };\n    this.saveEvent('projectPreviewed', 'Navigation', data);\n    window.open(this.ConfigService.getConfigParam(\"previewProjectURL\") +\n        '?constraints=false');\n  };\n\n  viewProjectAssets() {\n    this.$state.go('root.project.asset', {projectId:this.projectId});\n  };\n\n  viewProjectHistory() {\n    this.$state.go('root.project.history', {projectId:this.projectId});\n  };\n\n  viewNotebookSettings() {\n    this.$state.go('root.project.notebook', {projectId:this.projectId});\n  }\n\n  saveProject() {\n    //let projectJSONString = JSON.stringify(this.project, null, 4);\n    //let commitMessage = $(\"#commitMessageInput\").val();\n    let commitMessage = \"Made changes to Project.\";\n    try {\n      // if projectJSONString is bad json, it will throw an exception and not save.\n      //this.ProjectService.project = this.project;\n\n      this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n        this.commitHistory = commitHistoryArray;\n        $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n      });\n    } catch (error) {\n      alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n      return;\n    }\n  };\n\n  /**\n   * Make a request to download this project as a zip file\n   */\n  downloadProject() {\n    window.location.href = this.ConfigService.getWISEBaseURL()\n        + \"/project/export/\" + this.projectId;\n  }\n\n  /**\n   * Close authoring for the current project and bring user back to main AT page\n   */\n  closeProject() {\n    this.$state.go('root.main');\n  };\n\n  /**\n   * Get the node position\n   * @param nodeId the node id\n   * @returns the node position\n   */\n  getNodePositionById(nodeId) {\n    return this.ProjectService.getNodePositionById(nodeId);\n  };\n\n  /**\n   * The the components in the specified node id.\n   * @param nodeId the node id\n   * @returns components in the node\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Returns a list of possible criteria for the specified node and component\n   * @param nodeId the node id\n   * @param componentId the component id in the node\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n  }\n\n  /**\n   * Get the node title for a node\n   * @param nodeId the node id\n   * @returns the node title\n   */\n  getNodeTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodeTitleByNodeId(nodeId);\n  };\n\n  /**\n   * Check if a node id is for a group\n   * @param nodeId\n   * @returns whether the node is a group node\n   */\n  isGroupNode(nodeId) {\n    return this.ProjectService.isGroupNode(nodeId);\n  };\n\n  /**\n   * A node was clicked so we will go to the node authoring view\n   * @param nodeId\n   */\n  nodeClicked(nodeId) {\n    this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n    this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n  };\n\n  /**\n   * Create a new group (activity)\n   */\n  createGroup() {\n    const newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n    /*\n     * set the group into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = newGroup;\n\n    // turn off the create group div\n    this.showCreateGroup = false;\n\n    // clear the title from the create group div\n    this.createGroupTitle = '';\n\n    // turn on insert mode\n    this.insertGroupMode = true;\n\n    // turn on create mode\n    this.createMode = true;\n  }\n\n  /**\n   * Create a new node (step)\n   */\n  createNode() {\n    const newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n    /*\n     * set the node into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = newNode;\n\n    // turn off the create node div\n    this.showCreateNode = false;\n\n    // clear the title from the create node div\n    this.createNodeTitle = '';\n\n    // turn on insert mode\n    this.insertNodeMode = true;\n\n    // turn on create mode\n    this.createMode = true;\n  }\n\n  /**\n   * Insert the node(s) inside\n   * @param nodeId the node id of the group that we will insert into\n   */\n  insertInside(nodeId) {\n    // TODO check that we are inserting into a group\n    if (this.createMode) {\n      // create the node inside the group\n      this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n      let newNodes = [this.nodeToAdd];\n\n      // remember the new node\n      let newNode = this.nodeToAdd;\n\n      /*\n       * clear this variable that we used to hold the node we inserted.\n       * since we have inserted the node we don't need a handle to it\n       * anymore\n       */\n      this.nodeToAdd = null;\n\n      // turn off create mode\n      this.createMode = false;\n\n      // turn off insert mode\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n\n      // temporarily highlight the new nodes\n      this.highlightNewNodes(newNodes);\n\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNode != null) {\n\n          let data = {};\n          data.nodeId = newNode.id;\n          data.title = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n\n          if (this.ProjectService.isGroupNode(newNode.id)) {\n            // save the activity created event to the server\n            this.saveEvent('activityCreated', 'Authoring', data);\n          } else {\n            // save the step created event to the server\n            this.saveEvent('stepCreated', 'Authoring', data);\n          }\n        }\n      });\n    } else if (this.moveMode) {\n      let selectedNodeIds = this.getSelectedItems();\n      if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n        /*\n         * the user is trying to insert the selected node ids into\n         * itself so we will not allow that\n         */\n        if (selectedNodeIds.length == 1) {\n          alert('You are not allowed to insert the selected item into itself.');\n        } else if (selectedNodeIds.length > 1) {\n          alert('You are not allowed to insert the selected items into itself.');\n        }\n      } else {\n        // perform the move\n\n        /*\n         * an array of nodes that will be saved in the data for the move\n         * event\n         */\n        let nodes = [];\n        for (let n = 0; n < selectedNodeIds.length; n++) {\n          let selectedNodeId = selectedNodeIds[n];\n          let node = {\n            nodeId: selectedNodeId,\n            fromTitle: this.ProjectService.getNodePositionAndTitleByNodeId(selectedNodeId)\n          };\n          nodes.push(node);\n        }\n\n        // move the nodes into the group\n        let newNodes = this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n        // turn off move mode\n        this.moveMode = false;\n\n        // turn off insert mode\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n\n        // temporarily highlight the new nodes\n        this.highlightNewNodes(newNodes);\n\n        // save and refresh the project\n        this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n          if (newNodes != null && newNodes.length > 0) {\n            var firstNewNode = newNodes[0];\n            if (firstNewNode != null && firstNewNode.id != null) {\n\n              // loop through all the nodes that will be saved in the event data\n              for (let n = 0; n < nodes.length; n++) {\n                let node = nodes[n];\n\n                // get the new node object\n                let newNode = newNodes[n];\n\n                if (node != null && newNode != null) {\n\n                  // set the new title\n                  node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n                }\n              }\n\n              if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n                let data = { activitiesMoved: nodes };\n                this.saveEvent('activityMoved', 'Authoring', data);\n              } else {\n                let data = { stepsMoved: nodes };\n                this.saveEvent('stepMoved', 'Authoring', data);\n              }\n            }\n          }\n        });\n      }\n    } else if (this.copyMode) {\n      let selectedNodeIds = this.getSelectedItems();\n\n      /*\n       * an array of nodes that will be saved in the data for the move\n       * event\n       */\n      let nodes = [];\n      for (let n = 0; n < selectedNodeIds.length; n++) {\n        let selectedNodeId = selectedNodeIds[n];\n        let node = {\n          fromNodeId: selectedNodeId,\n          fromTitle: this.ProjectService.getNodePositionAndTitleByNodeId(selectedNodeId)\n        };\n        nodes.push(node);\n      }\n\n      // copy the nodes into the group\n      let newNodes = this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n\n      // turn off copy mode\n      this.copyMode = false;\n\n      // turn off insert mode\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n\n      // temporarily highlight the new nodes\n      this.highlightNewNodes(newNodes);\n\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNodes != null && newNodes.length > 0) {\n          var firstNewNode = newNodes[0];\n\n          if (firstNewNode != null && firstNewNode.id != null) {\n\n            // loop through all the nodes that will be saved in the event data\n            for (let n = 0; n < nodes.length; n++) {\n              let node = nodes[n];\n              let newNode = newNodes[n];\n\n              if (node != null && newNode != null) {\n\n                // set the new id\n                node.toNodeId = newNode.id;\n\n                // set the new title\n                node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n              }\n            }\n\n            if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n              let data = { activitiesCopied: nodes };\n              this.saveEvent('activityCopied', 'Authoring', data);\n            } else {\n              let data = { stepsCopied: nodes };\n              this.saveEvent('stepCopied', 'Authoring', data);\n            }\n          }\n        }\n      });\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Insert the node(s) after\n   * @param nodeId the node id of the node we will insert after\n   */\n  insertAfter(nodeId) {\n    if (this.createMode) {\n      // create the node after the node id\n      this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n      let newNodes = [this.nodeToAdd];\n      let newNode = this.nodeToAdd;\n\n      /*\n       * clear this variable that we used to hold the node we inserted.\n       * since we have inserted the node we don't need a handle to it\n       * anymore\n       */\n      this.nodeToAdd = null;\n\n      // turn off create mode\n      this.createMode = false;\n\n      // turn off insert mode\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n\n      // temporarily highlight the new nodes\n      this.highlightNewNodes(newNodes);\n\n      // save and referesh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNode != null) {\n\n          let data = {};\n          data.nodeId = newNode.id;\n          data.title = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n\n          if (this.ProjectService.isGroupNode(newNode.id)) {\n            // save the activity created event to the server\n            this.saveEvent('activityCreated', 'Authoring', data);\n          } else {\n            // save the step created event to the server\n            this.saveEvent('stepCreated', 'Authoring', data);\n          }\n        }\n      });\n    } else if (this.moveMode) {\n      let selectedNodeIds = this.getSelectedItems();\n      if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n        /*\n         * the user is trying to insert the selected node ids after\n         * itself so we will not allow that\n         */\n        if (selectedNodeIds.length == 1) {\n          alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n        } else if (selectedNodeIds.length > 1) {\n          alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n        }\n      } else {\n        // perform the move\n\n        /*\n         * an array of nodes that will be saved in the data for the move\n         * event\n         */\n        let nodes = [];\n        for (let n = 0; n < selectedNodeIds.length; n++) {\n          let selectedNodeId = selectedNodeIds[n];\n\n          // create an object that contains the id and title\n          let node = {};\n          node.nodeId = selectedNodeId;\n          node.fromTitle = this.ProjectService.getNodePositionAndTitleByNodeId(selectedNodeId);\n\n          nodes.push(node);\n        }\n\n        // move the nodes after the node id\n        let newNodes = this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n\n        // turn off move mode\n        this.moveMode = false;\n\n        // turn off insert mode\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n\n        // temporarily highlight the new nodes\n        this.highlightNewNodes(newNodes);\n\n        // save and refresh the project\n        this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n          if (newNodes != null && newNodes.length > 0) {\n            var firstNewNode = newNodes[0];\n\n            if (firstNewNode != null && firstNewNode.id != null) {\n\n              // loop through all the nodes that will be saved in the event data\n              for (let n = 0; n < nodes.length; n++) {\n                let node = nodes[n];\n\n                // get the new node object\n                let newNode = newNodes[n];\n\n                if (node != null && newNode != null) {\n\n                  // set the new title\n                  node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n                }\n              }\n\n              if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n                let data = {};\n                data.activitesMoved = nodes;\n\n                // save the activity moved event to the server\n                this.saveEvent('activityMoved', 'Authoring', data);\n              } else {\n                let data = {};\n                data.stepsMoved = nodes;\n\n                // save the step moved event to the server\n                this.saveEvent('stepMoved', 'Authoring', data);\n              }\n            }\n          }\n        });\n      }\n    } else if (this.copyMode) {\n      let selectedNodeIds = this.getSelectedItems();\n\n      /*\n       * an array of nodes that will be saved in the data for the move\n       * event\n       */\n      let nodes = [];\n\n      // loop through the selected node ids\n      for (let n = 0; n < selectedNodeIds.length; n++) {\n        let selectedNodeId = selectedNodeIds[n];\n\n        // create an object that contains the id and title\n        let node = {};\n        node.fromNodeId = selectedNodeId;\n        node.fromTitle = this.ProjectService.getNodePositionAndTitleByNodeId(selectedNodeId);\n\n        nodes.push(node);\n      }\n\n      // copy the nodes and put them after the node id\n      let newNodes = this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n\n      // turn off copy mode\n      this.copyMode = false;\n\n      // turn off insert mode\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n\n      // temporarily highlight the new nodes\n      this.highlightNewNodes(newNodes);\n\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNodes != null && newNodes.length > 0) {\n          var firstNewNode = newNodes[0];\n\n          if (firstNewNode != null && firstNewNode.id != null) {\n\n            // loop through all the nodes that will be saved in the event data\n            for (let n = 0; n < nodes.length; n++) {\n              let node = nodes[n];\n              let newNode = newNodes[n];\n\n              if (node != null && newNode != null) {\n\n                // set the new id\n                node.toNodeId = newNode.id;\n\n                // set the new title\n                node.toTitle = this.ProjectService.getNodePositionAndTitleByNodeId(newNode.id);\n              }\n            }\n\n            if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n\n              let data = {};\n              data.activitiesCopied = nodes;\n\n              // save the activity moved event to the server\n              this.saveEvent('activityCopied', 'Authoring', data);\n            } else {\n\n              let data = {};\n              data.stepsCopied = nodes;\n\n              // save the step moved event to the server\n              this.saveEvent('stepCopied', 'Authoring', data);\n            }\n          }\n        }\n      });\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Import the step and then create a stepImported event\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  importSelectedNodes(nodeIdToInsertInsideOrAfter) {\n    var selectedNodes = this.getSelectedNodesToImport();\n\n    // get the node titles that we are importing\n    var selectedNodeTitles = this.getSelectedNodeTitlesToImport();\n\n    // get the project id we are importing into\n    var toProjectId = this.ConfigService.getConfigParam('projectId');\n\n    // get the project id we are importing from\n    var fromProjectId = this.importProjectId;\n\n    // import the selected nodes and place them after the given group\n    this.performImport(nodeIdToInsertInsideOrAfter).then((newNodes) => {\n      // save and refresh the project\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n\n        /*\n         * use a timeout to allow angular to update the UI and then\n         * highlight and scroll to the new nodes\n         */\n        this.$timeout(() => {\n\n          // loop through all the new nodes and highlight them\n          for (var n = 0; n < newNodes.length; n++) {\n            var newNode = newNodes[n];\n            if (newNode != null) {\n\n              // get the node UI element\n              let nodeElement = $(\"#\" + newNode.id);\n\n              // save the original background color\n              let originalBackgroundColor = nodeElement.css(\"backgroundColor\");\n\n              // highlight the background briefly to draw attention to it\n              nodeElement.css(\"background-color\", \"#FFFF9C\");\n\n              /*\n               * Use a timeout before starting to transition back to\n               * the original background color. For some reason the\n               * element won't get highlighted in the first place\n               * unless this timeout is used.\n               */\n              this.$timeout(() => {\n                // slowly fade back to original background color\n                nodeElement.css({\n                  'transition': 'background-color 2s ease-in-out',\n                  'background-color': originalBackgroundColor\n                });\n              });\n            }\n          }\n\n          if (newNodes != null && newNodes.length > 0) {\n            // get the UI element of the first new node\n            let nodeElement = $(\"#\" + newNodes[0].id);\n            if (nodeElement != null) {\n              // scroll to the first new node that we've added\n              $('#content').animate({\n                scrollTop: nodeElement.prop(\"offsetTop\") - 60\n              }, 1000);\n            }\n          }\n        });\n\n        // the data for the step imported event\n        var data = {\n          stepsImported: []\n        };\n\n        // loop through all the steps that were imported\n        for (var n = 0; n < selectedNodes.length; n++) {\n          var selectedNode = selectedNodes[n];\n\n          // get the old step title\n          var selectedNodeTitle = selectedNodeTitles[n];\n\n          var newNode = newNodes[n];\n\n          // set the from and to ids and titles\n          var tempNode = {};\n          tempNode.fromProjectId = parseInt(fromProjectId);\n          tempNode.fromNodeId = selectedNode.id;\n          tempNode.fromTitle = selectedNodeTitle;\n          tempNode.toNodeId = newNode.id;\n          tempNode.toTitle = this.ProjectService\n            .getNodePositionAndTitleByNodeId(newNode.id);\n\n          data.stepsImported.push(tempNode);\n        }\n        this.saveEvent('stepImported', 'Authoring', data);\n      });\n    });\n  }\n\n  /**\n   * Import the step and place it in the chosen location\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  performImport(nodeIdToInsertInsideOrAfter) {\n    var selectedNodes = this.getSelectedNodesToImport();\n\n    // get the project id we are importing into\n    var toProjectId = this.ConfigService.getConfigParam('projectId');\n\n    // get the project id we are importing from\n    var fromProjectId = this.importProjectId;\n\n    // copy the nodes into the project\n    return this.ProjectService.copyNodes(selectedNodes, fromProjectId,\n      toProjectId, nodeIdToInsertInsideOrAfter).then((newNodes) => {\n\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n\n      this.insertNodeMode = false;\n\n      // go back to the project view\n      this.toggleView('project');\n\n      // clear the import fields\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n\n      // go back to the project view\n      this.showProjectHome();\n\n      /*\n       * refresh the project assets in case any of the imported\n       * steps also imported assets\n       */\n      this.ProjectAssetService.retrieveProjectAssets();\n      return newNodes;\n    });\n  }\n\n  /**\n   * Turn on copy mode\n   */\n  copy() {\n    // make sure there is at least one item selected\n    var selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      // get the nodes that were selected\n      var selectedItemTypes = this.getSelectedItemTypes();\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n        if (selectedItemTypes.length === 0) {\n          // there are no selected items\n          alert('Please select an item to copy.');\n        } else if (selectedItemTypes.length === 1 &&\n          selectedItemTypes[0] === 'node') {\n          // turn on insert and copy modes\n          this.insertNodeMode = true;\n          this.copyMode = true;\n        } else {\n          alert('You cannot copy the item(s) at this time.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Turn on move mode\n   */\n  move() {\n    // make sure there is at least one item selected\n    var selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      // get the nodes that were selected\n      var selectedItemTypes = this.getSelectedItemTypes();\n\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n        if (selectedItemTypes.length == 0) {\n          // there are no selected items\n          alert('Please select an item to move.');\n        } else if (selectedItemTypes.length == 1) {\n          // all the items the user selected are the same type\n\n          if (selectedItemTypes[0] === 'group') {\n            // turn on insert mode\n            this.insertGroupMode = true;\n\n            // turn on move mode\n            this.moveMode = true;\n          } else if (selectedItemTypes[0] === 'node') {\n            // turn on insert mode\n            this.insertNodeMode = true;\n\n            // turn on move mode\n            this.moveMode = true;\n          }\n        } else if (selectedItemTypes.length > 1) {\n          /*\n           * the items the user selected are different types but\n           * we do not allow moving different types of items at\n           * the same time\n           */\n\n          alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the selected nodes after asking user for confirmation\n   */\n  delete() {\n    let selectedNodeIds = this.getSelectedItems();\n    if (selectedNodeIds != null) {\n      var confirmMessage = null;\n      if (selectedNodeIds.length == 1) {\n        // the user selected one item\n        confirmMessage = 'Are you sure you want to delete the selected item?';\n      } else if (selectedNodeIds.length > 1) {\n        // the user selected multiple items\n        confirmMessage = 'Are you sure you want to delete the ' + selectedNodeIds.length + ' selected items?';\n      }\n      if (confirmMessage != null) {\n        var doDelete = confirm(confirmMessage);\n        if (doDelete) {\n          // flag that will be set if we have deleted the start node id\n          var deletedStartNodeId = false;\n          var activityDeleted = false;\n          var stepDeleted = false;\n          var stepsDeleted = [];\n          var activitiesDeleted = [];\n          for (var n = 0; n < selectedNodeIds.length; n++) {\n            var nodeId = selectedNodeIds[n];\n            var node = this.ProjectService.getNodeById(nodeId);\n            var tempNode = {};\n\n            if (node != null) {\n              tempNode.nodeId = node.id;\n              tempNode.title = this.ProjectService.getNodePositionAndTitleByNodeId(node.id);\n            }\n\n            if (this.ProjectService.isStartNodeId(nodeId)) {\n              // we have deleted the start node id\n              deletedStartNodeId = true;\n            }\n\n            if (this.ProjectService.isGroupNode(nodeId)) {\n              // we are deleting an activity\n              activityDeleted = true;\n\n              var stepsInActivityDeleted = [];\n\n              // loop through all the steps in the activity\n              for (var s = 0; s < node.ids.length; s++) {\n                var stepNodeId = node.ids[s];\n\n                // get the step title\n                var stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(stepNodeId);\n\n                // create an object with the step id and title\n                var stepObject = {};\n                stepObject.nodeId = stepNodeId;\n                stepObject.title = stepTitle;\n\n                stepsInActivityDeleted.push(stepObject);\n              }\n\n              tempNode.stepsInActivityDeleted = stepsInActivityDeleted;\n\n              activitiesDeleted.push(tempNode);\n            } else {\n              // we are deleting a step\n              stepDeleted = true;\n\n              stepsDeleted.push(tempNode);\n            }\n\n            // delete the node\n            this.ProjectService.deleteNode(nodeId);\n          }\n\n          // update start node id if necesary\n          if (deletedStartNodeId) {\n            this.updateStartNodeId();\n          }\n\n          if (activityDeleted) {\n            var data = {};\n            data.activitiesDeleted = activitiesDeleted;\n            this.saveEvent('activityDeleted', 'Authoring', data);\n          }\n\n          if (stepDeleted) {\n            var data = {};\n            data.stepsDeleted = stepsDeleted;\n            this.saveEvent('stepDeleted', 'Authoring', data);\n          }\n\n          // save the project\n          this.ProjectService.saveProject();\n\n          // refresh the project\n          this.ProjectService.parseProject();\n          this.items = this.ProjectService.idToOrder;\n        }\n      }\n    }\n\n    // uncheck all the checkboxes\n    this.unselectAllItems();\n  }\n\n  /**\n   * Get the selected items\n   * @returns an array of node ids that are selected\n   */\n  getSelectedItems() {\n    // an array to hold the node ids of the nodes that are selected\n    var selectedNodeIds = [];\n\n    // loop through all the node checkboxes\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n        // this node is checked\n        selectedNodeIds.push(key);\n      }\n    }, selectedNodeIds);\n\n    if (this.inactiveNodes != null) {\n\n      // loop through all the inactive nodes\n      for (var i = 0; i < this.inactiveNodes.length; i++) {\n        var inactiveNode = this.inactiveNodes[i];\n\n        if (inactiveNode != null) {\n          if (inactiveNode.checked) {\n            // the inactive node was checked so we will add it\n            selectedNodeIds.push(inactiveNode.id);\n          }\n        }\n      }\n    }\n\n    return selectedNodeIds;\n  }\n\n  /**\n   * Get the types of the selected items\n   * @returns an array of item types. possible items are group or node.\n   */\n  getSelectedItemTypes() {\n    var selectedItemTypes = [];\n\n    // loop through all the node checkboxes\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n\n        // this node is checked\n        var node = this.ProjectService.getNodeById(key);\n        if (node != null) {\n          var nodeType = node.type;\n          if (selectedItemTypes.indexOf(nodeType) == -1) {\n            // we have not seen this node type yet so we will add it\n            selectedItemTypes.push(nodeType);\n          }\n        }\n      }\n    }, this);\n\n    // TODO @geoffreykwan refactor below. too much nesting.\n    var inactiveNodes = this.inactiveNodes;\n    if (inactiveNodes != null) {\n\n      // loop through all the inactive nodes\n      for (var i = 0; i < inactiveNodes.length; i++) {\n        var inactiveNode = inactiveNodes[i];\n\n        if (inactiveNode != null) {\n          if (inactiveNode.checked) {\n            // the node was checked\n\n            // get the node type\n            var nodeType = inactiveNode.type;\n\n            if (selectedItemTypes.indexOf(nodeType) == -1) {\n              // we have not seen this node type yet so we will add it\n              selectedItemTypes.push(nodeType);\n            }\n          }\n        }\n      }\n    }\n\n    return selectedItemTypes;\n  }\n\n  /**\n   * Unselect all the items\n   */\n  unselectAllItems() {\n    angular.forEach(this.items, function(value, key) {\n      value.checked = false;\n    });\n  }\n\n  /**\n   * Show the create group input\n   */\n  creatNewActivityClicked() {\n    // clear the create group title\n    this.createGroupTitle = '';\n\n    // show the create group view\n    this.toggleView('createGroup');\n\n    if (this.showCreateGroup) {\n      /*\n       * we are showing the create node view so we will give focus to the\n       * createGroupTitle input element\n       */\n      this.$timeout(() => {\n        var createGroupTitleInput = document.getElementById('createGroupTitle');\n        if (createGroupTitleInput != null) {\n          createGroupTitleInput.focus();\n        }\n      });\n    }\n  }\n\n  /**\n   * Toggle the create node input\n   */\n  createNewStepClicked() {\n    // clear the create node title\n    this.createNodeTitle = '';\n\n    // show the create node view\n    this.toggleView('createNode');\n\n    if (this.showCreateNode) {\n      /*\n       * we are showing the create node view so we will give focus to the\n       * createNodeTitle input element\n       */\n      this.$timeout(() => {\n        var createNodeTitleInput = document.getElementById('createNodeTitle');\n        if (createNodeTitleInput != null) {\n          createNodeTitleInput.focus();\n        }\n      });\n    }\n  }\n\n  /**\n   * Cancel the move mode\n   */\n  cancelMove() {\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n\n    // clear any new node that we might be inserting\n    this.nodeToAdd = null;\n\n    // turn off the modes\n    this.createMode = false;\n    this.moveMode = false;\n    this.copyMode = false;\n    this.importMode = false;\n\n    // uncheck all the checkboxes\n    this.unselectAllItems();\n  }\n\n  /**\n   * Update the start node id by traversing start ids until a\n   * node id is found.\n   */\n  updateStartNodeId() {\n    var newStartNodeId = null;\n\n    // get the start group id\n    var startGroupId = this.ProjectService.getStartGroupId();\n    var node = this.ProjectService.getNodeById(startGroupId);\n\n    var done = false;\n\n    // recursively traverse the start ids\n    while(!done) {\n\n      if (node == null) {\n        // base case in case something went wrong\n        done = true;\n      } else if (this.ProjectService.isGroupNode(node.id)) {\n        // the node is a group node so we will get its start node\n        node = this.ProjectService.getNodeById(node.startId);\n      } else if (this.ProjectService.isApplicationNode(node.id)) {\n        // the node is a step node so we have found the new start node id\n        newStartNodeId = node.id;\n        done = true;\n      } else {\n        // base case in case something went wrong\n        done = true;\n      }\n    }\n\n    if (newStartNodeId) {\n      this.ProjectService.setStartNodeId(newStartNodeId);\n    }\n  }\n\n  /**\n   * Check if the start node id for the project could potentially\n   * change.\n   */\n  checkPotentialStartNodeIdChange() {\n    return this.$q((resolve, reject) => {\n      // get the current start node id\n      var currentStartNodeId = this.ProjectService.getStartNodeId();\n\n      // get the first leaf node id\n      var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n\n      if (firstLeafNodeId == null) {\n        // there are no steps in the project\n\n        // set the start node id to empty string\n        this.ProjectService.setStartNodeId('');\n\n        resolve();\n      } else {\n        // we have found a leaf node\n\n        if (currentStartNodeId != firstLeafNodeId) {\n          /*\n           * the node ids are different which means the first leaf node\n           * id is different than the current start node id and that\n           * the author may want to use the first leaf node id as the\n           * new start node id\n           */\n          var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n\n          if (firstLeafNode != null) {\n            var firstChildTitle = firstLeafNode.title;\n\n            // ask the user if they would like to change the start step to the step that is now the first child in the group\n            var confirmUpdateStartStep = this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle });\n\n            var answer = confirm(confirmUpdateStartStep);\n\n            if (answer) {\n              // change the project start node id\n              this.ProjectService.setStartNodeId(firstLeafNodeId);\n              resolve();\n            } else {\n              resolve();\n            }\n          } else {\n            resolve();\n          }\n        } else {\n          resolve();\n        }\n      }\n    });\n  }\n\n  /**\n   * Check if the start node id has changed and then save the project\n   */\n  checkPotentialStartNodeIdChangeThenSaveProject() {\n    // check if the project start node id should be changed\n    return this.checkPotentialStartNodeIdChange().then(() => {\n      this.ProjectService.saveProject();\n\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n\n      this.unselectAllItems();\n    });\n  }\n\n  /**\n   * The project title changed so we will update the project title in the\n   * project service and save the project\n   */\n  projectTitleChanged() {\n    this.ProjectService.setProjectTitle(this.projectTitle);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Toggle the import view and load the project drop downs if necessary\n   */\n  importStepClicked() {\n    // show the import step view\n    this.toggleView('importStep');\n\n    if (this.importMode) {\n      if (this.myProjectsList == null) {\n        // populate the authorable projects drop down\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        // populate the library projects drop down\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n    // clear the select drop down for the library project\n    this.importLibraryProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n    this.importProjectId = importProjectId;\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      // get the import project\n      this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n\n        // create the mapping of node id to order for the import project\n        this.importProjectIdToOrder = {};\n        this.importProject = projectJSON;\n\n        // calculate the node order of the import project\n        var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = result.idToOrder;\n        this.importProjectItems = result.nodes;\n      });\n    }\n  }\n\n  /**\n   * Preview the import project in a new tab\n   */\n  previewImportProject() {\n    if (this.importProject != null) {\n      // get the preview project url for the import project\n      const previewProjectURL = this.importProject.previewProjectURL;\n      window.open(previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the step in a new tab\n   * @param node\n   */\n  previewImportNode(node) {\n    if (node != null) {\n      const nodeId = node.id;\n      const previewProjectURL = this.importProject.previewProjectURL;\n      const previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importSteps() {\n    var selectedNodes = this.getSelectedNodesToImport();\n    if (selectedNodes == null || selectedNodes.length == 0) {\n      alert('Please select a step to import.');\n    } else {\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.insertNodeMode = true;\n      this.projectMode = true;\n    }\n  }\n\n  /**\n   * Get the selected nodes to import\n   * @return an array of selected nodes\n   */\n  getSelectedNodesToImport() {\n    let selectedNodes = [];\n    for (var n = 0; n < this.importProjectItems.length; n++) {\n      let item = this.importProjectItems[n];\n      if (item.checked) {\n        /*\n         * this item is checked so we will add it to the array of nodes\n         * that we will import\n         */\n        selectedNodes.push(item.node);\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Show the view to edit the project rubric\n   */\n  editProjectRubricClicked() {\n    this.toggleView('rubric');\n  }\n\n  /**\n   * Show the advanced authoring view\n   */\n  advancedClicked() {\n    this.toggleView('advanced');\n  }\n\n  /**\n   * The show JSON button was clicked\n   */\n  showJSONClicked() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n    if (this.showJSONAuthoring) {\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n  }\n\n  /**\n   * Save the project JSON string to the server\n   */\n  saveProjectJSONString() {\n    // create the project object from the project JSON string\n    let project = angular.fromJson(this.projectJSONString);\n    this.ProjectService.setProject(project);\n    this.checkPotentialStartNodeIdChangeThenSaveProject();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the project rubric\n    this.ProjectService.setProjectRubric(html);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Check if the node is in any branch path\n   * @param nodeId the node id of the node\n   * @return whether the node is in any branch path\n   */\n  isNodeInAnyBranchPath(nodeId) {\n    return this.ProjectService.isNodeInAnyBranchPath(nodeId);\n  }\n\n  /**\n   * The project script file name changed\n   */\n  projectScriptFilenameChanged() {\n    // update the project script file name in the project service\n    this.ProjectService.setProjectScriptFilename(this.projectScriptFilename);\n\n    if (this.showJSONAuthoring) {\n      /*\n       * we are showing the project JSON authoring so we need to update\n       * the JSON string that we are showing in the textarea\n       */\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * project script filename\n   */\n  chooseProjectScriptFilename() {\n    var openAssetChooserParams = {\n      popup: true,\n      projectId: this.projectId,\n      target: 'scriptFilename'\n    };\n    this.$rootScope.$broadcast('openAssetChooser', openAssetChooserParams);\n  }\n\n  /**\n   * Show the appropriate authoring view\n   * @param view the view to show\n   */\n  toggleView(view) {\n    // clear the input element for creating a new activity\n    this.createGroupTitle = '';\n\n    // clear the input element for creating a new step\n    this.createNodeTitle = '';\n\n    if (view == 'project') {\n      // we are showing the regular project view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n      this.projectMode = true;\n    } else if (view == 'createGroup') {\n      // toggle the create activity view\n      this.showCreateGroup = !this.showCreateGroup;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'createNode') {\n      // toggle the create step view\n      this.showCreateGroup = false;\n      this.showCreateNode = !this.showCreateNode;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'importStep') {\n      // toggle the import step view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = !this.importMode;\n      this.showImportView = !this.showImportView;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the import view is shown, do not show the project view\n      this.projectMode = !this.importMode;\n    } else if (view == 'rubric') {\n      // toggle the rubric view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = !this.editProjectRubricMode;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the rubric view is shown, do not show the project view\n      this.projectMode = !this.editProjectRubricMode;\n    } else if (view == 'advanced') {\n      // toggle the advanced view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = !this.advancedMode;\n      this.showJSONAuthoring = false;\n\n      // if the advanced view is shown, do not show the project view\n      this.projectMode = !this.advancedMode;\n    }\n  }\n\n  /**\n   * Go back to a previous page, which is different based on which page\n   * the author is currently on.\n   */\n  backButtonClicked() {\n    if (this.showImportView) {\n      this.toggleView('project');\n    } else if (this.editProjectRubricMode) {\n      this.toggleView('project');\n    } else if (this.advancedMode) {\n      this.toggleView('project');\n    } else {\n      this.$state.go('root.main');\n    }\n  }\n\n  /**\n   * Show the regular project view\n   */\n  projectHomeClicked() {\n    // show the regular project view\n    this.showProjectHome();\n  }\n\n  /**\n   * Show the regular project view\n   */\n  showProjectHome() {\n    // we are going to the project view so we will set the current node to null\n    this.TeacherDataService.setCurrentNode(null);\n\n    // show the regular project view\n    this.toggleView('project');\n    this.scrollToTopOfPage();\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n\n  /**\n   * Creating a group was cancelled, so show the project regular project view\n   */\n  cancelCreateGroupClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Creating a node was cancelled, so show the project view\n   */\n  cancelCreateNodeClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Temporarily highlight the new nodes\n   * @param newNodes the new nodes to highlight\n   */\n  highlightNewNodes(newNodes) {\n    this.$timeout(() => {\n      if (newNodes != null) {\n        for (let n = 0; n < newNodes.length; n++) {\n          let newNode = newNodes[n];\n          if (newNode != null) {\n            let nodeElement = $(\"#\" + newNode.id);\n\n            // save the original background color\n            let originalBackgroundColor = nodeElement.css(\"backgroundColor\");\n\n            // highlight the background briefly to draw attention to it\n            nodeElement.css(\"background-color\", \"#FFFF9C\");\n\n            /*\n             * Use a timeout before starting to transition back to\n             * the original background color. For some reason the\n             * element won't get highlighted in the first place\n             * unless this timeout is used.\n             */\n            this.$timeout(() => {\n              // slowly fade back to original background color\n              nodeElement.css({\n                'transition': 'background-color 3s ease-in-out',\n                'background-color': originalBackgroundColor\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n    let context = 'AuthoringTool';\n    let nodeId = null;\n    let componentId = null;\n    let componentType = null;\n\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId,\n      componentType, category, eventName, data);\n  }\n\n  /**\n   * Get the selected node titles that we are importing\n   * @return an array of node titles that may include the step numbers\n   */\n  getSelectedNodeTitlesToImport() {\n    let selectedNodeTitles = [];\n    let selectedNodes = this.getSelectedNodesToImport();\n    for (var n = 0; n < selectedNodes.length; n++) {\n      let selectedNode = selectedNodes[n];\n      if (selectedNode != null) {\n        // get the step number and title from the import project\n        let tempNode = this.importProjectIdToOrder[selectedNode.id];\n        let stepNumber = tempNode.stepNumber;\n        let title = '';\n\n        if (stepNumber == null) {\n          title = selectedNode.title;\n        } else {\n          title = stepNumber + ': ' + selectedNode.title;\n        }\n        selectedNodeTitles[n] = title;\n      }\n    }\n    return selectedNodeTitles;\n  }\n\n  /**\n   * Get the background color for a step\n   * @param nodeId get the background color for a step in the project view\n   * @return If the node is in a branch path it will return a color. If the\n   * ndoe is not in a branch path it will return null.\n   */\n  getStepBackgroundColor(nodeId) {\n    let color = null;\n    let branchPathLetter = this.ProjectService.getBranchPathLetter(nodeId);\n    if (branchPathLetter != null) {\n      // the node is in a branch path\n\n      // get the ascii code for the letter. example A=65, B=66, C=67, etc.\n      let letterASCIICode = branchPathLetter.charCodeAt(0);\n\n      // get the branch path number A=0, B=1, C=2, etc.\n      let branchPathNumber = letterASCIICode - 65;\n\n      // get the color for the branch path number\n      color = this.stepBackgroundColors[branchPathNumber];\n    }\n    return color;\n  }\n}\n\nProjectController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$interval',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$state',\n  '$stateParams',\n  '$timeout',\n  'AuthorWebSocketService',\n  'ConfigService',\n  'ProjectAssetService',\n  'ProjectService',\n  'TeacherDataService',\n  'UtilService'\n];\n\nexport default ProjectController;\n"]}