{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$anchorScroll","$filter","$interval","$mdDialog","$q","$rootScope","$scope","$state","$stateParams","$timeout","AuthorWebSocketService","ConfigService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","projectScriptFilename","getProjectScriptFilename","currentAuthorsMessage","projectMode","showImportView","importMode","editProjectRubricMode","advancedMode","showJSONAuthoring","setCurrentNode","metadata","getProjectMetadata","notifyAuthorProjectBegin","summernoteRubricId","summernoteRubricHTML","replaceAssetPaths","getProjectRubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","$on","event","args","currentAuthorsUsernames","myUserName","getMyUserName","splice","indexOf","length","currentAuthors","join","notifyAuthorProjectEnd","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","projectScriptFilenameChanged","hide","previewProjectURL","getConfigParam","window","open","go","commitMessage","saveProject","then","commitHistoryArray","commitHistory","val","error","alert","exportProjectURL","getWISEBaseURL","location","href","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","endCurrentNodeAndSetCurrentNodeByNodeId","newGroup","createGroup","createGroupTitle","nodeToAdd","insertGroupMode","createMode","newNode","createNode","createNodeTitle","insertNodeMode","createNodeInside","newNodes","highlightNewNodes","checkPotentialStartNodeIdChangeThenSaveProject","moveMode","selectedNodeIds","getSelectedItems","moveNodesInside","copyMode","copyNodesInside","performImport","createNodeAfter","moveNodesAfter","copyNodesAfter","nodeIdToInsertInsideOrAfter","selectedNodes","getSelectedNodesToImport","toProjectId","fromProjectId","importProjectId","copyNodes","parseProject","toggleView","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProject","showProjectHome","retrieveProjectAssets","selectedItemTypes","getSelectedItemTypes","confirmMessage","answer","confirm","deletedStartNodeId","n","isStartNodeId","deleteNode","updateStartNodeId","unselectAllItems","angular","forEach","value","key","checked","push","i","inactiveNode","id","node","getNodeById","nodeType","type","createGroupTitleInput","getElementById","focus","createNodeTitleInput","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","currentStartNodeId","getStartNodeId","firstLeafNodeId","getFirstLeafNodeId","firstLeafNode","firstChildTitle","title","confirmUpdateStartStep","startStepTitle","checkPotentialStartNodeIdChange","setProjectTitle","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","nodes","previewStepURL","item","projectJSONString","toJson","project","fromJson","setProject","html","removeAbsoluteAssetPaths","insertWISELinks","setProjectRubric","isNodeInAnyBranchPath","setProjectScriptFilename","params","popup","$broadcast","view","nodeElement","originalBackgroundColor","css","$inject"],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n    constructor($anchorScroll,\n                $filter,\n                $interval,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                AuthorWebSocketService,\n                ConfigService,\n                ProjectAssetService,\n                ProjectService,\n                TeacherDataService,\n                UtilService) {\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$interval = $interval;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.$translate = this.$filter('translate');\n        this.AuthorWebSocketService = AuthorWebSocketService;\n        this.ConfigService = ConfigService;\n        this.ProjectAssetService = ProjectAssetService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n\n        this.projectId = this.$stateParams.projectId;\n        this.runId = this.ConfigService.getRunId();\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n        this.projectTitle = this.ProjectService.getProjectTitle();\n        this.inactiveGroups = this.ProjectService.getInactiveGroups();\n        this.inactiveNodes = this.ProjectService.getInactiveNodes();\n        this.projectScriptFilename = this.ProjectService.getProjectScriptFilename();\n        this.currentAuthorsMessage = \"\";  // show a message when there is more than one author currently authoring this project\n\n        this.projectMode = true;\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n        this.showImportView = false;\n        this.importMode = false;\n        this.editProjectRubricMode = false;\n        this.advancedMode = false;\n        this.showJSONAuthoring = false;\n\n        // we are opening the project so we will set the current node to null\n        this.TeacherDataService.setCurrentNode(null);\n\n        // scroll to the top of the page\n        this.$anchorScroll('top');\n\n        // process metadata\n        this.metadata = this.ProjectService.getProjectMetadata();\n\n        // notify others that this project is being authored\n        this.ProjectService.notifyAuthorProjectBegin(this.projectId);\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.projectId;\n\n        // set the project rubric into the summernote rubric\n        this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, this.projectId, null, null, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n            toolbar: [\n                ['style', ['style']],\n                ['font', ['bold', 'underline', 'clear']],\n                ['fontname', ['fontname']],\n                ['fontsize', ['fontsize']],\n                ['color', ['color']],\n                ['para', ['ul', 'ol', 'paragraph']],\n                ['table', ['table']],\n                ['insert', ['link', 'video']],\n                ['view', ['fullscreen', 'codeview', 'help']],\n                ['customButton', ['insertAssetButton']]\n            ],\n            height: 300,\n            disableDragAndDrop: true,\n            buttons: {\n                insertAssetButton: InsertAssetButton\n            }\n        };\n\n        this.$scope.$on('currentAuthorsReceived', (event, args) => {\n            let currentAuthorsUsernames = args.currentAuthorsUsernames;\n            // get the user name of the signed in user\n            var myUserName = this.ConfigService.getMyUserName();\n            // remove my username from the currentAuthors\n            currentAuthorsUsernames.splice(currentAuthorsUsernames.indexOf(myUserName),1);\n            if (currentAuthorsUsernames.length > 0) {\n                this.currentAuthorsMessage = this.$translate('concurrentAuthorsWarning', { currentAuthors: currentAuthorsUsernames.join(\", \") });\n            } else {\n                this.currentAuthorsMessage = \"\";\n            }\n        });\n\n        this.$scope.$on(\"$destroy\", () => {\n            // notify others that this project is no longer being authored\n            this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n        });\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.projectId == this.projectId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.projectId;\n\n                                if (summernoteId != '') {\n                                    if (this.UtilService.isImage(fileName)) {\n                                        /*\n                                         * move the cursor back to its position when the asset chooser\n                                         * popup was clicked\n                                         */\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\n                                        $('#' + summernoteId).summernote('editor.focus');\n\n                                        // add the image html\n                                        $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                    } else if (this.UtilService.isVideo(fileName)) {\n                                        /*\n                                         * move the cursor back to its position when the asset chooser\n                                         * popup was clicked\n                                         */\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\n                                        $('#' + summernoteId).summernote('editor.focus');\n\n                                        // insert the video element\n                                        var videoElement = document.createElement('video');\n                                        videoElement.controls = 'true';\n                                        videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                        $('#' + summernoteId).summernote('insertNode', videoElement);\n                                    }\n                                }\n                            } else if (args.target == 'scriptFilename') {\n                                // the target is the project script filename\n                                this.projectScriptFilename = fileName;\n                                this.projectScriptFilenameChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    };\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n\n    /**\n     * Launch the project in preview mode without constraints\n     */\n    previewProjectWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        previewProjectURL = previewProjectURL + '?constraints=false';\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.project.asset', {projectId:this.projectId});\n    };\n\n    viewProjectHistory() {\n        this.$state.go('root.project.history', {projectId:this.projectId});\n    };\n\n    viewNotebookSettings() {\n        this.$state.go('root.project.notebook', {projectId:this.projectId});\n    }\n\n    saveProject() {\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\n        //let commitMessage = $(\"#commitMessageInput\").val();\n        let commitMessage = \"Made changes to Project.\";\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            //this.ProjectService.project = this.project;\n\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            });\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    /**\n     * Download this project as a zip file\n     */\n    downloadProject() {\n        // make a request to download the project as a zip file\n        let exportProjectURL = this.ConfigService.getWISEBaseURL() + \"/project/export/\" + this.projectId;\n        window.location.href = exportProjectURL;\n    }\n\n    /**\n     * Close authoring for the current project and bring user back to main AT page\n     */\n    closeProject() {\n        this.$state.go('root.main');\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * The the components in the specified node id.\n     * @param nodeId the node id\n     * @returns components in the node\n     */\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Returns a list of possible criteria for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id in the node\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n    }\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n    };\n\n    /**\n     * Create a new group (activity)\n     */\n    createGroup() {\n\n        // create a new group\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n        /*\n         * set the group into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newGroup;\n\n        // turn off the create group div\n        this.showCreateGroup = false;\n\n        // clear the title from the create group div\n        this.createGroupTitle = '';\n\n        // turn on insert mode\n        this.insertGroupMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Create a new node (step)\n     */\n    createNode() {\n\n        // create a new node\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n        /*\n         * set the node into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newNode;\n\n        // turn off the create node div\n        this.showCreateNode = false;\n\n        // clear the title from the create node div\n        this.createNodeTitle = '';\n\n        // turn on insert mode\n        this.insertNodeMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Insert the node(s) inside\n     * @param nodeId the node id of the group that we will insert into\n     */\n    insertInside(nodeId) {\n\n        // TODO check that we are inserting into a group\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node inside the group\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n            let newNodes = [this.nodeToAdd];\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // temporarily highlight the new nodes\n            this.highlightNewNodes(newNodes);\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the nodes that were selected\n            let selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids into\n                 * itself so we will not allow that\n                 */\n                if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item into itself.');\n                } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items into itself.');\n                }\n            } else {\n                // move the nodes into the group\n                let newNodes = this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n\n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n\n                // temporarily highlight the new nodes\n                this.highlightNewNodes(newNodes);\n            }\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the nodes that were selected\n            let selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes into the group\n            let newNodes = this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // temporarily highlight the new nodes\n            this.highlightNewNodes(newNodes);\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.importMode) {\n            // we are in import mode\n\n            // import the selected nodes and place them inside the given group\n            this.performImport(nodeId).then(() => {\n                // save and refresh the project\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\n            });\n        }\n    }\n\n    /**\n     * Insert the node(s) after\n     * @param nodeId the node id of the node we will insert after\n     */\n    insertAfter(nodeId) {\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node after the node id\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n            let newNodes = [this.nodeToAdd];\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // temporarily highlight the new nodes\n            this.highlightNewNodes(newNodes);\n\n            // save and referesh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the selected nodes\n            let selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids after\n                 * itself so we will not allow that\n                 */\n                if (selectedNodeIds.length == 1) {\n                    alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n                } else if (selectedNodeIds.length > 1) {\n                    alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n                }\n            } else {\n                // move the nodes after the node id\n                let newNodes = this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n\n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n\n                // temporarily highlight the new nodes\n                this.highlightNewNodes(newNodes);\n\n                // save and refresh the project\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the selected nodes\n            let selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes and put them after the node id\n            let newNodes = this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // temporarily highlight the new nodes\n            this.highlightNewNodes(newNodes);\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.importMode) {\n            // we are in import mode\n\n            // import the selected nodes and place them after the given step\n            this.performImport(nodeId).then(() => {\n                // save and refresh the project\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\n            });\n        }\n    }\n\n    /**\n     * Import the step and place it in the chosen location\n     * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n     * new step the first step in the group. If this is a step, we will place\n     * the new step after it.\n     */\n    performImport(nodeIdToInsertInsideOrAfter) {\n\n        var selectedNodes = this.getSelectedNodesToImport();\n\n        // get the project id we are importing into\n        var toProjectId = this.ConfigService.getConfigParam('projectId');\n\n        // get the project id we are importing from\n        var fromProjectId = this.importProjectId;\n\n        // copy the nodes into the project\n        return this.ProjectService.copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter).then(() => {\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            // turn off the insert node mode\n            this.insertNodeMode = false;\n\n            // go back to the project view\n            this.toggleView('project');\n\n            // clear the import fields\n            this.importProjectIdToOrder = {};\n            this.importProjectItems = [];\n            this.importMyProjectId = null;\n            this.importLibraryProjectId = null;\n            this.importProjectId = null;\n            this.importProject = null;\n\n            // go back to the project view\n            this.showProjectHome();\n\n            /*\n             * refresh the project assets in case any of the imported\n             * steps also imported assets\n             */\n            this.ProjectAssetService.retrieveProjectAssets();\n        });\n    }\n\n    /**\n     * Turn on copy mode\n     */\n    copy() {\n\n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n                if (selectedItemTypes.length === 0) {\n                    // there are no selected items\n                    alert('Please select an item to copy.');\n                } else if (selectedItemTypes.length === 1 && selectedItemTypes[0] === 'node') {\n                    // turn on insert mode\n                    this.insertNodeMode = true;\n\n                    // turn on copy mode\n                    this.copyMode = true;\n                } else {\n                    alert('You cannot copy the item(s) at this time.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn on move mode\n     */\n    move() {\n\n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n                if (selectedItemTypes.length == 0) {\n                    // there are no selected items\n                    alert('Please select an item to move.');\n                } else if (selectedItemTypes.length == 1) {\n                    // all the items the user selected are the same type\n\n                    if (selectedItemTypes[0] === 'group') {\n                        // turn on insert mode\n                        this.insertGroupMode = true;\n\n                        // turn on move mode\n                        this.moveMode = true;\n                    } else if (selectedItemTypes[0] === 'node') {\n                        // turn on insert mode\n                        this.insertNodeMode = true;\n\n                        // turn on move mode\n                        this.moveMode = true;\n                    }\n                } else if (selectedItemTypes.length > 1) {\n                    /*\n                     * the items the user selected are different types but\n                     * we do not allow moving different types of items at\n                     * the same time\n                     */\n\n                    alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the selected nodes\n     */\n    delete() {\n\n        // get the selected items\n        let selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null) {\n\n            var confirmMessage = null;\n\n            if (selectedNodeIds.length == 1) {\n                // the user selected one item\n                confirmMessage = 'Are you sure you want to delete the selected item?';\n            } else if (selectedNodeIds.length > 1) {\n                // the user selected multiple items\n                confirmMessage = 'Are you sure you want to delete the ' + selectedNodeIds.length + ' selected items?';\n            }\n\n            if (confirmMessage != null) {\n                // ask the user to confirm the delete\n                var answer = confirm(confirmMessage);\n\n                if (answer) {\n                    // the user confirmed yes\n\n                    // flag that will be set if we have deleted the start node id\n                    var deletedStartNodeId = false;\n\n                    // loop through each node id\n                    for (var n = 0; n < selectedNodeIds.length; n++) {\n                        var nodeId = selectedNodeIds[n];\n\n                        if (this.ProjectService.isStartNodeId(nodeId)) {\n                            // we have deleted the start node id\n                            deletedStartNodeId = true;\n                        }\n\n                        // delete the node\n                        this.ProjectService.deleteNode(nodeId);\n                    }\n\n                    // update start node id if necesary\n                    if (deletedStartNodeId) {\n                        this.updateStartNodeId();\n                    }\n\n                    // save the project\n                    this.ProjectService.saveProject();\n\n                    // refresh the project\n                    this.ProjectService.parseProject();\n                    this.items = this.ProjectService.idToOrder;\n                }\n            }\n        }\n\n        // uncheck all the checkboxes\n        this.unselectAllItems();\n    }\n\n    /**\n     * Get the selected items\n     * @returns an array of node ids that are selected\n     */\n    getSelectedItems() {\n\n        // an array to hold the node ids of the nodes that are selected\n        var selectedNodeIds = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                // this node is checked\n                selectedNodeIds.push(key);\n            }\n        }, selectedNodeIds);\n\n        if (this.inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < this.inactiveNodes.length; i++) {\n                var inactiveNode = this.inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the inactive node was checked so we will add it\n                        selectedNodeIds.push(inactiveNode.id);\n                    }\n                }\n            }\n        }\n\n        return selectedNodeIds;\n    }\n\n    /**\n     * Get the types of the selected items\n     * @returns an array of item types. possible items are group or node.\n     */\n    getSelectedItemTypes() {\n\n        var selectedItemTypes = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n\n                // this node is checked\n                var node = this.ProjectService.getNodeById(key);\n\n                if (node != null) {\n\n                    // get the node type\n                    var nodeType = node.type;\n\n                    if (selectedItemTypes.indexOf(nodeType) == -1) {\n                        // we have not seen this node type yet so we will add it\n                        selectedItemTypes.push(nodeType);\n                    }\n                }\n            }\n        }, this);\n\n        var inactiveNodes = this.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the node was checked\n\n                        // get the node type\n                        var nodeType = inactiveNode.type;\n\n                        if (selectedItemTypes.indexOf(nodeType) == -1) {\n                            // we have not seen this node type yet so we will add it\n                            selectedItemTypes.push(nodeType);\n                        }\n                    }\n                }\n            }\n        }\n\n        return selectedItemTypes;\n    }\n\n    /**\n     * Unselect all the items\n     */\n    unselectAllItems() {\n        angular.forEach(this.items, function(value, key) {\n            value.checked = false;\n        });\n    }\n\n    /**\n     * Show the create group input\n     */\n    creatNewActivityClicked() {\n\n        // clear the create group title\n        this.createGroupTitle = '';\n\n        // show the create group view\n        this.toggleView('createGroup');\n\n        if (this.showCreateGroup) {\n            /*\n             * we are showing the create node view so we will give focus to the\n             * createGroupTitle input element\n             */\n            this.$timeout(() => {\n                var createGroupTitleInput = document.getElementById('createGroupTitle');\n\n                if (createGroupTitleInput != null) {\n                    createGroupTitleInput.focus();\n                }\n            });\n        }\n    }\n\n    /**\n     * Toggle the create node input\n     */\n    createNewStepClicked() {\n\n        // clear the create node title\n        this.createNodeTitle = '';\n\n        // show the create node view\n        this.toggleView('createNode');\n\n        if (this.showCreateNode) {\n            /*\n             * we are showing the create node view so we will give focus to the\n             * createNodeTitle input element\n             */\n            this.$timeout(() => {\n                var createNodeTitleInput = document.getElementById('createNodeTitle');\n\n                if (createNodeTitleInput != null) {\n                    createNodeTitleInput.focus();\n                }\n            });\n        }\n    }\n\n    /**\n     * Cancel the move mode\n     */\n    cancelMove() {\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n\n        // clear any new node that we might be inserting\n        this.nodeToAdd = null;\n\n        // turn off the modes\n        this.createMode = false;\n        this.moveMode = false;\n        this.copyMode = false;\n        this.importMode = false;\n\n        // uncheck all the checkboxes\n        this.unselectAllItems();\n    }\n\n    /**\n     * Update the start node id by traversing start ids until a\n     * node id is found.\n     */\n    updateStartNodeId() {\n\n        var newStartNodeId = null;\n\n        // get the start group id\n        var startGroupId = this.ProjectService.getStartGroupId();\n        var node = this.ProjectService.getNodeById(startGroupId);\n\n        var done = false;\n\n        // recursively traverse the start ids\n        while(!done) {\n\n            if (node == null) {\n                // base case in case something went wrong\n                done = true;\n            } else if (this.ProjectService.isGroupNode(node.id)) {\n                // the node is a group node so we will get its start node\n                node = this.ProjectService.getNodeById(node.startId);\n            } else if (this.ProjectService.isApplicationNode(node.id)) {\n                // the node is a step node so we have found the new start node id\n                newStartNodeId = node.id;\n                done = true;\n            } else {\n                // base case in case something went wrong\n                done = true;\n            }\n        }\n\n        if (newStartNodeId) {\n            // set the new start node id\n            this.ProjectService.setStartNodeId(newStartNodeId);\n        }\n    }\n\n    /**\n     * Check if the start node id for the project could potentially\n     * change.\n     */\n    checkPotentialStartNodeIdChange() {\n        return this.$q((resolve, reject) => {\n            // get the current start node id\n            var currentStartNodeId = this.ProjectService.getStartNodeId();\n\n            // get the first leaf node id\n            var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n\n            if (firstLeafNodeId == null) {\n                // there are no steps in the project\n\n                // set the start node id to empty string\n                this.ProjectService.setStartNodeId('');\n\n                resolve();\n            } else {\n                // we have found a leaf node\n\n                if (currentStartNodeId != firstLeafNodeId) {\n                    /*\n                     * the node ids are different which means the first leaf node\n                     * id is different than the current start node id and that\n                     * the author may want to use the first leaf node id as the\n                     * new start node id\n                     */\n                    var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n\n                    if (firstLeafNode != null) {\n                        var firstChildTitle = firstLeafNode.title;\n\n                        // ask the user if they would like to change the start step to the step that is now the first child in the group\n                        var confirmUpdateStartStep = this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle });\n\n                        var answer = confirm(confirmUpdateStartStep);\n\n                        if (answer) {\n                            // change the project start node id\n                            this.ProjectService.setStartNodeId(firstLeafNodeId);\n                            resolve();\n                        } else {\n                            resolve();\n                        }\n                    } else {\n                        resolve();\n                    }\n                } else {\n                    resolve();\n                }\n            }\n        });\n    }\n\n    /**\n     * Check if the start node id has changed and then save the project\n     */\n    checkPotentialStartNodeIdChangeThenSaveProject() {\n        // check if the project start node id should be changed\n        this.checkPotentialStartNodeIdChange().then(() => {\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        });\n    }\n\n    /**\n     * The project title changed so we will update the project title in the\n     * project service\n     */\n    projectTitleChanged() {\n\n        // update the project title in the project service\n        this.ProjectService.setProjectTitle(this.projectTitle);\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Toggle the import view and load the project drop downs if necessary\n     */\n    importStepClicked() {\n\n        // show the import step view\n        this.toggleView('importStep');\n\n        if (this.importMode) {\n            if (this.myProjectsList == null) {\n                // populate the authorable projects drop down\n                this.myProjectsList = this.ConfigService.getAuthorableProjects();\n            }\n\n            if (this.libraryProjectsList == null) {\n                // populate the library projects drop down\n                this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n                    this.libraryProjectsList = libraryProjectsList;\n                });\n            }\n        }\n    }\n\n    /**\n     * The author has chosen an authorable project to import from\n     * @param importProjectId the project id to import from\n     */\n    showMyImportProject(importProjectId) {\n\n        // clear the select drop down for the library project\n        this.importLibraryProjectId = null;\n\n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n\n    /**\n     * The author has chosen a library project to import from\n     * @param importProjectId the project id to import from\n     */\n    showLibraryImportProject(importProjectId) {\n        this.importMyProjectId = null;\n\n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n\n    /**\n     * Show the project we want to import steps from\n     * @param importProjectId the import project id\n     */\n    showImportProject(importProjectId) {\n\n        this.importProjectId = importProjectId;\n\n        if (this.importProjectId == null) {\n            // clear all the import project values\n            this.importProjectIdToOrder = {};\n            this.importProjectItems = [];\n            this.importMyProjectId = null;\n            this.importLibraryProjectId = null;\n            this.importProjectId = null;\n            this.importProject = null;\n        } else {\n            // get the import project\n            this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n\n                // create the mapping of node id to order for the import project\n                this.importProjectIdToOrder = {};\n                this.importProject = projectJSON;\n\n                // calculate the node order of the import project\n                var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n                this.importProjectIdToOrder = result.idToOrder;\n                this.importProjectItems = result.nodes;\n            });\n        }\n    }\n\n    /**\n     * Preview the import project\n     */\n    previewImportProject() {\n\n        if (this.importProject != null) {\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n\n            // open the preview step in a new tab\n            window.open(previewProjectURL);\n        }\n    }\n\n    /**\n     * Preview the step\n     * @param node\n     */\n    previewImportNode(node) {\n\n        if (node != null) {\n\n            // get the node id\n            var nodeId = node.id;\n\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n\n            // create the url to preview the step\n            var previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n\n    /**\n     * Import the selected steps\n     */\n    importSteps() {\n\n        // get the nodes that were selected\n        var selectedNodes = this.getSelectedNodesToImport();\n\n        if (selectedNodes == null || selectedNodes.length == 0) {\n            // the author did not select any steps to import\n            alert('Please select a step to import.');\n        } else {\n\n            /*\n             * hide the import view because we want to go back to the\n             * project view so that the author can choose where to place\n             * the new steps\n             */\n            this.showImportView = false;\n            this.insertNodeMode = true;\n            this.projectMode = true;\n        }\n    }\n\n    /**\n     * Get the selected nodes to import\n     * @return an array of selected nodes\n     */\n    getSelectedNodesToImport() {\n        var selectedNodes = [];\n\n        // loop through all the import project items\n        for (var n = 0; n < this.importProjectItems.length; n++) {\n            var item = this.importProjectItems[n];\n\n            if (item.checked) {\n                /*\n                 * this item is checked so we will add it to the array of nodes\n                 * that we will import\n                 */\n                selectedNodes.push(item.node);\n            }\n        }\n\n        return selectedNodes;\n    }\n\n    /**\n     * Show the view to edit the project rubric\n     */\n    editProjectRubricClicked() {\n\n        // show the edit rubric view\n        this.toggleView('rubric');\n    }\n\n    /**\n     * Show the advanced view\n     */\n    advancedClicked() {\n\n        // show the advanced authoring view\n        this.toggleView('advanced');\n    }\n\n    /**\n     * The show JSON button was clicked\n     */\n    showJSONClicked() {\n        this.showJSONAuthoring = !this.showJSONAuthoring;\n\n        if (this.showJSONAuthoring) {\n            this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n        }\n    }\n\n    /**\n     * Save the project JSON string to the server\n     */\n    saveProjectJSONString() {\n        // create the project object from the project JSON string\n        let project = angular.fromJson(this.projectJSONString);\n        this.ProjectService.setProject(project);\n\n        // save and refresh the project\n        this.checkPotentialStartNodeIdChangeThenSaveProject();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the project rubric\n        this.ProjectService.setProjectRubric(html);\n\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Check if the node is in any branch path\n     * @param nodeId the node id of the node\n     * @return whether the node is in any branch path\n     */\n    isNodeInAnyBranchPath(nodeId) {\n        return this.ProjectService.isNodeInAnyBranchPath(nodeId);\n    }\n\n    /**\n     * The project script file name changed\n     */\n    projectScriptFilenameChanged() {\n        // update the project script file name in the project service\n        this.ProjectService.setProjectScriptFilename(this.projectScriptFilename);\n\n        if (this.showJSONAuthoring) {\n            /*\n             * we are showing the project JSON authoring so we need to update\n             * the JSON string that we are showing in the textarea\n             */\n            this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n        }\n\n        // save the project\n        this.ProjectService.saveProject();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose an image for the\n     * project script filename\n     */\n    chooseProjectScriptFilename() {\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.projectId = this.projectId;\n        params.target = 'scriptFilename';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Show the appropriate authoring view\n     * @param view the view to show\n     */\n    toggleView(view) {\n\n        // clear the input element for creating a new activity\n        this.createGroupTitle = '';\n\n        // clear the input element for creating a new step\n        this.createNodeTitle = '';\n\n        if (view == 'project') {\n            // we are showing the regular project view\n            this.showCreateGroup = false;\n            this.showCreateNode = false;\n            this.importMode = false;\n            this.showImportView = false;\n            this.editProjectRubricMode = false;\n            this.advancedMode = false;\n            this.showJSONAuthoring = false;\n            this.projectMode = true;\n        } else if (view == 'createGroup') {\n            // toggle the create activity view\n            this.showCreateGroup = !this.showCreateGroup;\n            this.showCreateNode = false;\n            this.importMode = false;\n            this.showImportView = false;\n            this.editProjectRubricMode = false;\n            this.advancedMode = false;\n            this.showJSONAuthoring = false;\n\n            // also show the project view\n            this.projectMode = true;\n        } else if (view == 'createNode') {\n            // toggle the create step view\n            this.showCreateGroup = false;\n            this.showCreateNode = !this.showCreateNode;\n            this.importMode = false;\n            this.showImportView = false;\n            this.editProjectRubricMode = false;\n            this.advancedMode = false;\n            this.showJSONAuthoring = false;\n\n            // also show the project view\n            this.projectMode = true;\n        } else if (view == 'importStep') {\n            // toggle the import step view\n            this.showCreateGroup = false;\n            this.showCreateNode = false;\n            this.importMode = !this.importMode;\n            this.showImportView = !this.showImportView;\n            this.editProjectRubricMode = false;\n            this.advancedMode = false;\n            this.showJSONAuthoring = false;\n\n            // if the import view is shown, do not show the project view\n            this.projectMode = !this.importMode;\n        } else if (view == 'rubric') {\n            // toggle the rubric view\n            this.showCreateGroup = false;\n            this.showCreateNode = false;\n            this.importMode = false;\n            this.showImportView = false;\n            this.editProjectRubricMode = !this.editProjectRubricMode;\n            this.advancedMode = false;\n            this.showJSONAuthoring = false;\n\n            // if the rubric view is shown, do not show the project view\n            this.projectMode = !this.editProjectRubricMode;\n        } else if (view == 'advanced') {\n            // toggle the advanced view\n            this.showCreateGroup = false;\n            this.showCreateNode = false;\n            this.importMode = false;\n            this.showImportView = false;\n            this.editProjectRubricMode = false;\n            this.advancedMode = !this.advancedMode;\n            this.showJSONAuthoring = false;\n\n            // if the advanced view is shown, do not show the project view\n            this.projectMode = !this.advancedMode;\n        }\n    }\n\n    /**\n     * The author has clicked the back button\n     */\n    backButtonClicked() {\n\n        if (this.showImportView) {\n            // we are in the import view so we will go back to the project view\n            this.toggleView('project');\n        } else if (this.editProjectRubricMode) {\n            // we are in the edit rubric view so we will go back to the project view\n            this.toggleView('project');\n        } else if (this.advancedMode) {\n            // we are in the advanced view so we will go back to the project view\n            this.toggleView('project');\n        } else {\n            // we are in the project view so we will go back to the project list view\n            this.$state.go('root.main');\n        }\n    }\n\n    /**\n     * Show the regular project view\n     */\n    projectHomeClicked() {\n        // show the regular project view\n        this.showProjectHome();\n    }\n\n    /**\n     * Show the regular project view\n     */\n    showProjectHome() {\n        // we are going to the project view so we will set the current node to null\n        this.TeacherDataService.setCurrentNode(null);\n\n        // show the regular project view\n        this.toggleView('project');\n\n        // scroll to the top of the page\n        this.$anchorScroll('top');\n    }\n\n    /**\n     * Creating a group was cancelled\n     */\n    cancelCreateGroupClicked() {\n        // show the project regular project view\n        this.toggleView('project');\n    }\n\n    /**\n     * Creating a node was cancelled\n     */\n    cancelCreateNodeClicked() {\n        // show the project regular project view\n        this.toggleView('project');\n    }\n\n    /**\n     * Temporarily highlight the new nodes\n     * @param newNodes the new nodes to highlight\n     */\n    highlightNewNodes(newNodes) {\n\n        this.$timeout(() => {\n\n            if (newNodes != null) {\n\n                // loop through all the new nodes\n                for (let n = 0; n < newNodes.length; n++) {\n                    let newNode = newNodes[n];\n\n                    if (newNode != null) {\n\n                        // get the node UI element\n                        let nodeElement = $(\"#\" + newNode.id);\n\n                        // save the original background color\n                        let originalBackgroundColor = nodeElement.css(\"backgroundColor\");\n\n                        // highlight the background briefly to draw attention to it\n                        nodeElement.css(\"background-color\", \"#FFFF9C\");\n\n                        /*\n                         * Use a timeout before starting to transition back to\n                         * the original background color. For some reason the\n                         * element won't get highlighted in the first place\n                         * unless this timeout is used.\n                         */\n                        this.$timeout(() => {\n                            // slowly fade back to original background color\n                            nodeElement.css({\n                                'transition': 'background-color 3s ease-in-out',\n                                'background-color': originalBackgroundColor\n                            });\n                        });\n                    }\n                }\n            }\n        });\n    }\n}\n\nProjectController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$interval',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'AuthorWebSocketService',\n    'ConfigService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default ProjectController;\n"]}