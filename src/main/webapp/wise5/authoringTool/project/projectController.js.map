{"version":3,"sources":["projectController.es6"],"names":[],"mappings":"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","file":"projectController.js","sourcesContent":["class ProjectController {\n\n    constructor($scope, $state, $stateParams, ProjectService, ConfigService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.ProjectService = ProjectService;\n        this.ConfigService = ConfigService;\n\n        this.title = \"project controller\";\n        this.projectId = this.$stateParams.projectId;\n        this.project = this.ProjectService.project;\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n        this.insertMode = false;\n\n        this.updateProjectAsText();\n\n        $scope.$watch(angular.bind(this, function() {\n            return this.projectAsText;\n        }), angular.bind(this, function () {\n            try {\n                this.project = JSON.parse(this.projectAsText);\n            } catch(exp) {\n                //Exception handler\n            };\n        }));\n    };\n\n    // updates projectAsText field, which is the string representation of the project that we'll show in the textarea\n    updateProjectAsText() {\n        this.projectAsText = JSON.stringify(this.project, null, 4);\n    };\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.project.asset', {projectId:this.projectId});\n    };\n\n    viewProjectHistory() {\n        this.$state.go('root.project.history', {projectId:this.projectId});\n    };\n\n    saveProject() {\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\n        let commitMessage = $(\"#commitMessageInput\").val();\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            this.ProjectService.project = this.project;\n\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            });\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n    };\n\n    /**\n     * Create a new group (activity)\n     */\n    createGroup() {\n\n        // create a new group\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n        /*\n         * set the group into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newGroup;\n        //this.updateProjectAsText();\n\n        // turn off the create group div\n        this.showCreateGroup = false;\n\n        // clear the title from the create group div\n        this.createGroupTitle = '';\n\n        // turn on insert mode\n        this.insertMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Create a new node (step)\n     */\n    createNode() {\n\n        // create a new node\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n        /*\n         * set the node into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newNode;\n        //this.updateProjectAsText();\n\n        // turn off the create node div\n        this.showCreateNode = false;\n\n        // clear the title from the create node div\n        this.createNodeTitle = '';\n\n        // turn on insert mode\n        this.insertMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Insert the node(s) inside\n     * @param nodeId the node id of the group that we will insert into\n     */\n    insertInside(nodeId) {\n\n        // TODO check that we are inserting into a group\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node inside the group\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            // move the nodes into the group\n            this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off move mode\n            this.moveMode = false;\n\n            // turn off insert mode\n            this.insertMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        }\n    }\n\n    /**\n     * Insert the node(s) after\n     * @param nodeId the node id of the node we will insert after\n     */\n    insertAfter(nodeId) {\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node after the node id\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            // move the nodes after the node id\n            this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off move mode\n            this.moveMode = false;\n\n            // turn off insert mode\n            this.insertMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        }\n    }\n\n    /**\n     * Turn on move mode\n     */\n    move() {\n        // turn on insert mode\n        this.insertMode = true;\n\n        // turn on move mode\n        this.moveMode = true;\n    }\n\n    /**\n     * Delete the selected nodes\n     */\n    delete() {\n\n        // ask the user to confirm the delete\n        var answer = confirm('Are you sure you want to delete?');\n\n        if (answer) {\n            // the user confirmed yes\n\n            // get the selected node ids\n            var selectedNodeIds = this.getSelectedItems();\n\n            // loop through each node id\n            for (var n = 0; n < selectedNodeIds.length; n++) {\n                var nodeId = selectedNodeIds[n];\n\n                // delete the node\n                this.ProjectService.deleteNode(nodeId);\n            }\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n        }\n    }\n\n    /**\n     * Get the selected items\n     * @returns an array of node ids that are selected\n     */\n    getSelectedItems() {\n\n        // an array to hold the node ids of the nodes that are selected\n        var selectedNodeIds = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                // this node is checked\n                selectedNodeIds.push(key);\n            }\n        }, selectedNodeIds);\n\n        return selectedNodeIds;\n    }\n\n    /**\n     * Unselect all the items\n     */\n    unselectAllItems() {\n        angular.forEach(this.items, function(value, key) {\n            value.checked = false;\n        });\n    }\n};\n\nProjectController.$inject = ['$scope', '$state', '$stateParams', 'ProjectService', 'ConfigService'];\n\nexport default ProjectController;\n"]}