{"version":3,"sources":["projectController.es6"],"names":[],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n    constructor($interval, $q, $scope, $state, $stateParams, $translate, AuthorWebSocketService, ConfigService, ProjectService) {\n        this.$interval = $interval;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$translate = $translate;\n        this.AuthorWebSocketService = AuthorWebSocketService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n\n        this.projectId = this.$stateParams.projectId;\n        this.runId = this.ConfigService.getRunId();\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n        this.projectTitle = this.ProjectService.getProjectTitle();\n        this.inactiveGroups = this.ProjectService.getInactiveGroups();\n        this.inactiveNodes = this.ProjectService.getInactiveNodes();\n\n        // check to see if there are other authors right now.\n        this.ProjectService.getCurrentAuthors(this.projectId).then((currentAuthors) => {\n            if (currentAuthors.length == 0) {\n                this.currentAuthorsMessage = \"\";\n            } else {\n                // TODO: internationalize me\n                this.currentAuthorsMessage = currentAuthors.join(\",\") + \" is currently editing this project.\";\n                alert(currentAuthors.join(\",\") + \" is currently editing this project. Please be careful not to overwrite each other's work!\");\n            }\n        });\n\n        // notify others that this project is being authored\n        this.ProjectService.notifyAuthorProjectBegin(this.projectId).then((otherAuthors) => {\n            // also send a websocket message to other online authors\n            //this.AuthorWebSocketService.notifyAuthorProjectBegin(this.projectId);\n        });\n\n        // temprary polling until we get websocket working\n        this.checkOtherAuthorsIntervalId = this.$interval(() => {\n            this.ProjectService.getCurrentAuthors(this.projectId).then((currentAuthors) => {\n                if (currentAuthors.length == 0) {\n                    this.currentAuthorsMessage = \"\";\n                } else {\n                    this.currentAuthorsMessage = currentAuthors.join(\",\") + \" is currently editing this project.\";\n                }\n            });\n        }, 15000);\n\n        this.$scope.$on(\"$destroy\", () => {\n            // cancel the checkOtherAuthorsInterval\n            this.$interval.cancel(this.checkOtherAuthorsIntervalId);\n            // notify others that this project is no longer being authored\n            this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n        });\n    };\n\n    // updates projectAsText field, which is the string representation of the project that we'll show in the textarea\n    updateProjectAsText() {\n        this.projectAsText = JSON.stringify(this.ProjectService.project, null, 4);\n    };\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n    \n    /**\n     * Launch the project in preview mode without constraints\n     */\n    previewProjectWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        previewProjectURL = previewProjectURL + '?constraints=false';\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.project.asset', {projectId:this.projectId});\n    };\n\n    viewProjectHistory() {\n        this.$state.go('root.project.history', {projectId:this.projectId});\n    };\n\n    saveProject() {\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\n        let commitMessage = $(\"#commitMessageInput\").val();\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            //this.ProjectService.project = this.project;\n\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            });\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    /**\n     * Close authoring for the current project and bring user back to main AT page\n     */\n    closeProject() {\n        this.$state.go('root.main');\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * The the components in the specified node id.\n     * @param nodeId the node id\n     * @returns components in the node\n     */\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Returns a list of possible criteria for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id in the node\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n    }\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n    };\n\n    /**\n     * Create a new group (activity)\n     */\n    createGroup() {\n\n        // create a new group\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n        /*\n         * set the group into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newGroup;\n        //this.updateProjectAsText();\n\n        // turn off the create group div\n        this.showCreateGroup = false;\n\n        // clear the title from the create group div\n        this.createGroupTitle = '';\n\n        // turn on insert mode\n        this.insertGroupMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Create a new node (step)\n     */\n    createNode() {\n\n        // create a new node\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n        /*\n         * set the node into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newNode;\n        //this.updateProjectAsText();\n\n        // turn off the create node div\n        this.showCreateNode = false;\n\n        // clear the title from the create node div\n        this.createNodeTitle = '';\n\n        // turn on insert mode\n        this.insertNodeMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Insert the node(s) inside\n     * @param nodeId the node id of the group that we will insert into\n     */\n    insertInside(nodeId) {\n\n        // TODO check that we are inserting into a group\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node inside the group\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids into\n                 * itself so we will not allow that\n                 */\n                if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item into itself.');\n                } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items into itself.');\n                }\n            } else {\n                // move the nodes into the group\n                this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes into the group\n            this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        }\n        \n        // save and refresh the project\n        this.checkPotentialStartNodeIdChangeThenSaveProject();\n    }\n\n    /**\n     * Insert the node(s) after\n     * @param nodeId the node id of the node we will insert after\n     */\n    insertAfter(nodeId) {\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node after the node id\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n            \n            // save and referesh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids after\n                 * itself so we will not allow that\n                 */\n                 if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item after itself.');\n                 } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items after itself.');\n                 }\n            } else {\n                // move the nodes after the node id\n                this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n\n                // save and refresh the project\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes and put them after the node id\n            this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        }\n    }\n\n    /**\n     * Turn on copy mode\n     */\n    copy() {\n\n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n                if (selectedItemTypes.length === 0) {\n                    // there are no selected items\n                    alert('Please select an item to copy.');\n                } else if (selectedItemTypes.length === 1 && selectedItemTypes[0] === 'node') {\n                    // turn on insert mode\n                    this.insertNodeMode = true;\n\n                    // turn on copy mode\n                    this.copyMode = true;\n                } else {\n                    alert('You cannot copy the item(s) at this time.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn on move mode\n     */\n    move() {\n    \n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n        \n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n            \n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n            \n                if (selectedItemTypes.length == 0) {\n                    // there are no selected items\n                    alert('Please select an item to move.');\n                } else if (selectedItemTypes.length == 1) {\n                    // all the items the user selected are the same type\n                    \n                    if (selectedItemTypes[0] === 'group') {\n                        // turn on insert mode\n                        this.insertGroupMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    } else if (selectedItemTypes[0] === 'node') {\n                        // turn on insert mode\n                        this.insertNodeMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    }\n                } else if (selectedItemTypes.length > 1) {\n                    /*\n                     * the items the user selected are different types but\n                     * we do not allow moving different types of items at\n                     * the same time\n                     */\n                    \n                    alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the selected nodes\n     */\n    delete() {\n    \n        // get the selected items\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null) {\n        \n            var confirmMessage = null;\n        \n            if (selectedNodeIds.length == 1) {\n                // the user selected one item\n                confirmMessage = 'Are you sure you want to delete the selected item?';\n            } else if (selectedNodeIds.length > 1) {\n                // the user selected multiple items\n                confirmMessage = 'Are you sure you want to delete the selected items?';\n            }\n            \n            if (confirmMessage != null) {\n                // ask the user to confirm the delete\n                var answer = confirm(confirmMessage);\n        \n                if (answer) {\n                    // the user confirmed yes\n        \n                    // get the selected node ids\n                    var selectedNodeIds = this.getSelectedItems();\n        \n                    // flag that will be set if we have deleted the start node id\n                    var deletedStartNodeId = false;\n        \n                    // loop through each node id\n                    for (var n = 0; n < selectedNodeIds.length; n++) {\n                        var nodeId = selectedNodeIds[n];\n        \n                        if (this.ProjectService.isStartNodeId(nodeId)) {\n                            // we have deleted the start node id\n                            deletedStartNodeId = true;\n                        }\n        \n                        // delete the node\n                        this.ProjectService.deleteNode(nodeId);\n                    }\n                    \n                    // update start node id if necesary\n                    if (deletedStartNodeId) {\n                        this.updateStartNodeId();\n                    }\n        \n                    // save the project\n                    this.ProjectService.saveProject();\n        \n                    // refresh the project\n                    this.ProjectService.parseProject();\n                    this.items = this.ProjectService.idToOrder;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the selected items\n     * @returns an array of node ids that are selected\n     */\n    getSelectedItems() {\n\n        // an array to hold the node ids of the nodes that are selected\n        var selectedNodeIds = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                // this node is checked\n                selectedNodeIds.push(key);\n            }\n        }, selectedNodeIds);\n        \n        if (this.inactiveNodes != null) {\n            \n            // loop through all the inactive nodes\n            for (var i = 0; i < this.inactiveNodes.length; i++) {\n                var inactiveNode = this.inactiveNodes[i];\n                \n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the inactive node was checked so we will add it\n                        selectedNodeIds.push(inactiveNode.id);\n                    }\n                }\n            }\n        }\n\n        return selectedNodeIds;\n    }\n    \n    /**\n     * Get the types of the selected items\n     * @returns an array of item types. possible items are group or node.\n     */\n    getSelectedItemTypes() {\n\n        var selectedItemTypes = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                \n                // this node is checked\n                var node = this.ProjectService.getNodeById(key);\n                \n                if (node != null) {\n                \n                    // get the node type\n                    var nodeType = node.type;\n                    \n                    if (selectedItemTypes.indexOf(nodeType) == -1) {\n                        // we have not seen this node type yet so we will add it\n                        selectedItemTypes.push(nodeType);\n                    }\n                }\n            }\n        }, this);\n        \n        var inactiveNodes = this.inactiveNodes;\n        \n        if (inactiveNodes != null) {\n            \n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n                \n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the node was checked\n                        \n                        // get the node type\n                        var nodeType = inactiveNode.type;\n                        \n                        if (selectedItemTypes.indexOf(nodeType) == -1) {\n                            // we have not seen this node type yet so we will add it\n                            selectedItemTypes.push(nodeType);\n                        }\n                    }\n                }\n            }\n        }\n\n        return selectedItemTypes;\n    }\n\n    /**\n     * Unselect all the items\n     */\n    unselectAllItems() {\n        angular.forEach(this.items, function(value, key) {\n            value.checked = false;\n        });\n    }\n    \n    /**\n     * Toggle the create group input\n     */\n    toggleCreateGroup() {\n        this.hideCreateNode();\n        this.showCreateGroup = !this.showCreateGroup;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateGroup() {\n        this.showCreateGroup = false;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Toggle the create node input\n     */\n    toggleCreateNode() {\n        this.hideCreateGroup();\n        this.showCreateNode = !this.showCreateNode;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateNode() {\n        this.showCreateNode = false;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Cancel the move mode\n     */\n    cancelMove() {\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n    }\n    \n    /**\n     * Update the start node id by traversing start ids until a\n     * node id is found.\n     */\n    updateStartNodeId() {\n        \n        var newStartNodeId = null;\n        \n        // get the start group id\n        var startGroupId = this.ProjectService.getStartGroupId();\n        var node = this.ProjectService.getNodeById(startGroupId);\n        \n        var done = false;\n        \n        // recursively traverse the start ids\n        while(!done) {\n            \n            if (node == null) {\n                // base case in case something went wrong\n                done = true;\n            } else if (this.ProjectService.isGroupNode(node.id)) {\n                // the node is a group node so we will get its start node\n                node = this.ProjectService.getNodeById(node.startId);\n            } else if (this.ProjectService.isApplicationNode(node.id)) {\n                // the node is a step node so we have found the new start node id\n                newStartNodeId = node.id;\n                done = true;\n            } else {\n                // base case in case something went wrong\n                done = true;\n            }\n        }\n        \n        if (newStartNodeId) {\n            // set the new start node id\n            this.ProjectService.setStartNodeId(newStartNodeId);\n        }\n    }\n    \n    /**\n     * Check if the start node id for the project could potentially\n     * change.\n     */\n    checkPotentialStartNodeIdChange() {\n        return this.$q((resolve, reject) => {\n            // get the current start node id\n            var currentStartNodeId = this.ProjectService.getStartNodeId();\n\n            // get the first leaf node id\n            var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n\n            if (firstLeafNodeId == null) {\n                // there are no steps in the project\n                \n                // set the start node id to empty string\n                this.ProjectService.setStartNodeId('');\n                \n                resolve();\n            } else {\n                // we have found a leaf node\n                \n                if (currentStartNodeId != firstLeafNodeId) {\n                    /*\n                     * the node ids are different which means the first leaf node\n                     * id is different than the current start node id and that\n                     * the author may want to use the first leaf node id as the\n                     * new start node id\n                     */\n                    var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n\n                    if (firstLeafNode != null) {\n                        var firstChildTitle = firstLeafNode.title;\n\n                        // ask the user if they would like to change the start step to the step that is now the first child in the group\n                        this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle }).then((confirmUpdateStartStep) => {\n                            var answer = confirm(confirmUpdateStartStep);\n\n                            if (answer) {\n                                // change the project start node id\n                                this.ProjectService.setStartNodeId(firstLeafNodeId);\n                                resolve();\n                            } else {\n                                resolve();\n                            }\n                        });\n                    } else {\n                        resolve();\n                    }\n                } else {\n                    resolve();\n                }\n            }\n        });\n    }\n    \n    /**\n     * Check if the start node id has changed and then save the project\n     */\n    checkPotentialStartNodeIdChangeThenSaveProject() {\n        // check if the project start node id should be changed\n        this.checkPotentialStartNodeIdChange().then(() => {\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        });\n    }\n    \n    /**\n     * The project title changed so we will update the project title in the \n     * project service\n     */\n    projectTitleChanged() {\n        \n        // update the project title in the project service\n        this.ProjectService.setProjectTitle(this.projectTitle);\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n};\n\nProjectController.$inject = ['$interval', '$q', '$scope', '$state', '$stateParams', '$translate',\n    'AuthorWebSocketService', 'ConfigService', 'ProjectService'];\n\nexport default ProjectController;\n"]}