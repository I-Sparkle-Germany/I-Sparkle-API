{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$interval","$q","$scope","$state","$stateParams","$translate","AuthorWebSocketService","ConfigService","ProjectService","UtilService","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","getCurrentAuthors","then","currentAuthors","length","currentAuthorsMessage","showWarningMessage","myUserName","getMyUserName","join","alert","notifyAuthorProjectBegin","checkOtherAuthorsIntervalId","$on","cancel","notifyAuthorProjectEnd","projectAsText","JSON","stringify","project","previewProjectURL","getConfigParam","window","open","go","commitMessage","saveProject","commitHistoryArray","commitHistory","$","val","error","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","newGroup","createGroup","createGroupTitle","nodeToAdd","insertGroupMode","createMode","newNode","createNode","createNodeTitle","insertNodeMode","createNodeInside","moveMode","selectedNodeIds","getSelectedItems","indexOf","moveNodesInside","copyMode","copyNodesInside","checkPotentialStartNodeIdChangeThenSaveProject","createNodeAfter","moveNodesAfter","copyNodesAfter","selectedItemTypes","getSelectedItemTypes","confirmMessage","answer","confirm","deletedStartNodeId","n","isStartNodeId","deleteNode","updateStartNodeId","parseProject","angular","forEach","value","key","checked","push","i","inactiveNode","id","node","getNodeById","nodeType","type","hideCreateNode","hideCreateGroup","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","currentStartNodeId","getStartNodeId","firstLeafNodeId","getFirstLeafNodeId","firstLeafNode","firstChildTitle","title","startStepTitle","confirmUpdateStartStep","checkPotentialStartNodeIdChange","unselectAllItems","setProjectTitle","importMode","authorableProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","importProjectId","importLibraryProjectId","showImportProject","importAuthorableProjectId","importProjectIdToOrder","importProjectItems","importProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","nodes","previewStepURL","selectedNodes","getSelectedNodesToImport","selectedNodeTitles","s","selectedNode","stepNumber","message","nodeIdToInsertAfter","tempNodeId","tempItem","tempNode","makeCopyOfJSONObject","isNodeIdUsed","nextAvailableNodeId","getNextAvailableNodeId","tempComponents","components","c","tempComponent","isComponentIdUsed","newComponentId","getUnusedComponentId","constraints","addInactiveNode","item","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,iB;AAEF,+BAAYC,SAAZ,EAAuBC,EAAvB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,YAA3C,EAAyDC,UAAzD,EAAqEC,sBAArE,EAA6FC,aAA7F,EAA4GC,cAA5G,EAA4HC,WAA5H,EAAyI;AAAA;;AAAA;;AACrI,aAAKT,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,sBAAL,GAA8BA,sBAA9B;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;;AAEA,aAAKC,SAAL,GAAiB,KAAKN,YAAL,CAAkBM,SAAnC;AACA,aAAKC,KAAL,GAAa,KAAKJ,aAAL,CAAmBK,QAAnB,EAAb;AACA,aAAKC,KAAL,GAAa,KAAKL,cAAL,CAAoBM,SAAjC;AACA,aAAKC,OAAL,GAAe,KAAKP,cAAL,CAAoBQ,4BAApB,EAAf;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKC,YAAL,GAAoB,KAAKX,cAAL,CAAoBY,eAApB,EAApB;AACA,aAAKC,cAAL,GAAsB,KAAKb,cAAL,CAAoBc,iBAApB,EAAtB;AACA,aAAKC,aAAL,GAAqB,KAAKf,cAAL,CAAoBgB,gBAApB,EAArB;;AAEA;AACA,aAAKhB,cAAL,CAAoBiB,iBAApB,CAAsC,KAAKf,SAA3C,EAAsDgB,IAAtD,CAA2D,UAACC,cAAD,EAAoB;AAC3E,gBAAIA,eAAeC,MAAf,IAAyB,CAA7B,EAAgC;AAC5B,sBAAKC,qBAAL,GAA6B,EAA7B;AACH,aAFD,MAEO;AACH;;AAEA,oBAAIC,qBAAqB,IAAzB;;AAEA;AACA,oBAAIC,aAAa,MAAKxB,aAAL,CAAmByB,aAAnB,EAAjB;;AAEA;AACA,oBAAIL,eAAeC,MAAf,IAAyB,CAAzB,IAA8BD,eAAe,CAAf,KAAqBI,UAAvD,EAAmE;AAC/D;;;;AAIAD,yCAAqB,KAArB;AACH;;AAED,oBAAIA,kBAAJ,EAAwB;AACpB,0BAAKD,qBAAL,GAA6BF,eAAeM,IAAf,CAAoB,GAApB,IAA2B,qCAAxD;AACAC,0BAAMP,eAAeM,IAAf,CAAoB,GAApB,IAA2B,2FAAjC;AACH;AACJ;AACJ,SAzBD;;AA2BA;AACA,aAAKzB,cAAL,CAAoB2B,wBAApB,CAA6C,KAAKzB,SAAlD;;AAEA;AACA,aAAK0B,2BAAL,GAAmC,KAAKpC,SAAL,CAAe,YAAM;AACpD,kBAAKQ,cAAL,CAAoBiB,iBAApB,CAAsC,MAAKf,SAA3C,EAAsDgB,IAAtD,CAA2D,UAACC,cAAD,EAAoB;AAC3E,oBAAIA,eAAeC,MAAf,IAAyB,CAA7B,EAAgC;AAC5B,0BAAKC,qBAAL,GAA6B,EAA7B;AACH,iBAFD,MAEO;;AAEH,wBAAIC,qBAAqB,IAAzB;;AAEA;AACA,wBAAIC,aAAa,MAAKxB,aAAL,CAAmByB,aAAnB,EAAjB;;AAEA;AACA,wBAAIL,eAAeC,MAAf,IAAyB,CAAzB,IAA8BD,eAAe,CAAf,KAAqBI,UAAvD,EAAmE;AAC/D;;;;AAIAD,6CAAqB,KAArB;AACH;;AAED,wBAAIA,kBAAJ,EAAwB;AACpB,8BAAKD,qBAAL,GAA6BF,eAAeM,IAAf,CAAoB,GAApB,IAA2B,qCAAxD;AACH;AACJ;AACJ,aAvBD;AAwBH,SAzBkC,EAyBhC,KAzBgC,CAAnC;;AA2BA,aAAK/B,MAAL,CAAYmC,GAAZ,CAAgB,UAAhB,EAA4B,YAAM;AAC9B;AACA,kBAAKrC,SAAL,CAAesC,MAAf,CAAsB,MAAKF,2BAA3B;AACA;AACA,kBAAK5B,cAAL,CAAoB+B,sBAApB,CAA2C,MAAK7B,SAAhD;AACH,SALD;AAMH;;;;;;AAED;8CACsB;AAClB,iBAAK8B,aAAL,GAAqBC,KAAKC,SAAL,CAAe,KAAKlC,cAAL,CAAoBmC,OAAnC,EAA4C,IAA5C,EAAkD,CAAlD,CAArB;AACH;;;;;AAED;;;yCAGiB;AACb,gBAAIC,oBAAoB,KAAKrC,aAAL,CAAmBsC,cAAnB,CAAkC,mBAAlC,CAAxB;AACAC,mBAAOC,IAAP,CAAYH,iBAAZ;AACH;;;;;AAED;;;2DAGmC;AAC/B,gBAAIA,oBAAoB,KAAKrC,aAAL,CAAmBsC,cAAnB,CAAkC,mBAAlC,CAAxB;AACAD,gCAAoBA,oBAAoB,oBAAxC;AACAE,mBAAOC,IAAP,CAAYH,iBAAZ;AACH;;;4CAEmB;AAChB,iBAAKzC,MAAL,CAAY6C,EAAZ,CAAe,oBAAf,EAAqC,EAACtC,WAAU,KAAKA,SAAhB,EAArC;AACH;;;6CAEoB;AACjB,iBAAKP,MAAL,CAAY6C,EAAZ,CAAe,sBAAf,EAAuC,EAACtC,WAAU,KAAKA,SAAhB,EAAvC;AACH;;;+CAEsB;AACnB,iBAAKP,MAAL,CAAY6C,EAAZ,CAAe,uBAAf,EAAwC,EAACtC,WAAU,KAAKA,SAAhB,EAAxC;AACH;;;sCAEa;AAAA;;AACV;AACA;AACA,gBAAIuC,gBAAgB,0BAApB;AACA,gBAAI;AACA;AACA;;AAEA,qBAAKzC,cAAL,CAAoB0C,WAApB,CAAgCD,aAAhC,EAA+CvB,IAA/C,CAAoD,UAACyB,kBAAD,EAAwB;AACxE,2BAAKC,aAAL,GAAqBD,kBAArB;AACAE,sBAAE,qBAAF,EAAyBC,GAAzB,CAA6B,EAA7B,EAFwE,CAErC;AACtC,iBAHD;AAIH,aARD,CAQE,OAAOC,KAAP,EAAc;AACZrB,sBAAM,mDAAN;AACA;AACH;AACJ;;;;;AAED;;;uCAGe;AACX,iBAAK/B,MAAL,CAAY6C,EAAZ,CAAe,WAAf;AACH;;;;;AAED;;;;;4CAKoBQ,M,EAAQ;AACxB,mBAAO,KAAKhD,cAAL,CAAoBiD,mBAApB,CAAwCD,MAAxC,CAAP;AACH;;;;;AAED;;;;;8CAKsBA,M,EAAQ;AAC1B,mBAAO,KAAKhD,cAAL,CAAoBkD,qBAApB,CAA0CF,MAA1C,CAAP;AACH;;AAED;;;;;;;;sDAK8BA,M,EAAQG,W,EAAa;AAC/C,mBAAO,KAAKnD,cAAL,CAAoBoD,6BAApB,CAAkDJ,MAAlD,EAA0DG,WAA1D,CAAP;AACH;;AAED;;;;;;;;6CAKqBH,M,EAAQ;AACzB,mBAAO,KAAKhD,cAAL,CAAoBqD,oBAApB,CAAyCL,MAAzC,CAAP;AACH;;;;;AAED;;;;;oCAKYA,M,EAAQ;AAChB,mBAAO,KAAKhD,cAAL,CAAoBsD,WAApB,CAAgCN,MAAhC,CAAP;AACH;;;;;AAED;;;;oCAIYA,M,EAAQ;AAChB,iBAAKrD,MAAL,CAAY6C,EAAZ,CAAe,mBAAf,EAAoC,EAACtC,WAAW,KAAKA,SAAjB,EAA4B8C,QAAOA,MAAnC,EAApC;AACH;;;;;AAED;;;sCAGc;;AAEV;AACA,gBAAIO,WAAW,KAAKvD,cAAL,CAAoBwD,WAApB,CAAgC,KAAKC,gBAArC,CAAf;;AAEA;;;;AAIA,iBAAKC,SAAL,GAAiBH,QAAjB;AACA;;AAEA;AACA,iBAAK9C,eAAL,GAAuB,KAAvB;;AAEA;AACA,iBAAKgD,gBAAL,GAAwB,EAAxB;;AAEA;AACA,iBAAKE,eAAL,GAAuB,IAAvB;;AAEA;AACA,iBAAKC,UAAL,GAAkB,IAAlB;AACH;;AAED;;;;;;qCAGa;;AAET;AACA,gBAAIC,UAAU,KAAK7D,cAAL,CAAoB8D,UAApB,CAA+B,KAAKC,eAApC,CAAd;;AAEA;;;;AAIA,iBAAKL,SAAL,GAAiBG,OAAjB;AACA;;AAEA;AACA,iBAAKnD,cAAL,GAAsB,KAAtB;;AAEA;AACA,iBAAKqD,eAAL,GAAuB,EAAvB;;AAEA;AACA,iBAAKC,cAAL,GAAsB,IAAtB;;AAEA;AACA,iBAAKJ,UAAL,GAAkB,IAAlB;AACH;;AAED;;;;;;;qCAIaZ,M,EAAQ;;AAEjB;;AAEA,gBAAI,KAAKY,UAAT,EAAqB;AACjB;;AAEA;AACA,qBAAK5D,cAAL,CAAoBiE,gBAApB,CAAqC,KAAKP,SAA1C,EAAqDV,MAArD;;AAEA;;;;;AAKA,qBAAKU,SAAL,GAAiB,IAAjB;;AAEA;AACA,qBAAKE,UAAL,GAAkB,KAAlB;;AAEA;AACA,qBAAKD,eAAL,GAAuB,KAAvB;AACA,qBAAKK,cAAL,GAAsB,KAAtB;AACH,aAnBD,MAmBO,IAAI,KAAKE,QAAT,EAAmB;AACtB;;AAEA;AACA,oBAAIC,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA,oBAAID,mBAAmB,IAAnB,IAA2BA,gBAAgBE,OAAhB,CAAwBrB,MAAxB,KAAmC,CAAC,CAAnE,EAAsE;AAClE;;;;AAIA,wBAAImB,gBAAgB/C,MAAhB,IAA0B,CAA9B,EAAiC;AAC7BM,8BAAM,8DAAN;AACH,qBAFD,MAEO,IAAIyC,gBAAgB/C,MAAhB,GAAyB,CAA7B,EAAgC;AACnCM,8BAAM,+DAAN;AACH;AACJ,iBAVD,MAUO;AACH;AACA,yBAAK1B,cAAL,CAAoBsE,eAApB,CAAoCH,eAApC,EAAqDnB,MAArD;;AAEA;AACA,yBAAKkB,QAAL,GAAgB,KAAhB;;AAEA;AACA,yBAAKP,eAAL,GAAuB,KAAvB;AACA,yBAAKK,cAAL,GAAsB,KAAtB;AACH;AACJ,aA3BM,MA2BA,IAAI,KAAKO,QAAT,EAAmB;AACtB;;AAEA;AACA,oBAAIJ,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA;AACA,qBAAKpE,cAAL,CAAoBwE,eAApB,CAAoCL,eAApC,EAAqDnB,MAArD;;AAEA;AACA,qBAAKuB,QAAL,GAAgB,KAAhB;;AAEA;AACA,qBAAKZ,eAAL,GAAuB,KAAvB;AACA,qBAAKK,cAAL,GAAsB,KAAtB;AACH;;AAED;AACA,iBAAKS,8CAAL;AACH;;AAED;;;;;;;oCAIYzB,M,EAAQ;;AAEhB,gBAAI,KAAKY,UAAT,EAAqB;AACjB;;AAEA;AACA,qBAAK5D,cAAL,CAAoB0E,eAApB,CAAoC,KAAKhB,SAAzC,EAAoDV,MAApD;;AAEA;;;;;AAKA,qBAAKU,SAAL,GAAiB,IAAjB;;AAEA;AACA,qBAAKE,UAAL,GAAkB,KAAlB;;AAEA;AACA,qBAAKD,eAAL,GAAuB,KAAvB;AACA,qBAAKK,cAAL,GAAsB,KAAtB;;AAEA;AACA,qBAAKS,8CAAL;AACH,aAtBD,MAsBO,IAAI,KAAKP,QAAT,EAAmB;AACtB;;AAEA;AACA,oBAAIC,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA,oBAAID,mBAAmB,IAAnB,IAA2BA,gBAAgBE,OAAhB,CAAwBrB,MAAxB,KAAmC,CAAC,CAAnE,EAAsE;AAClE;;;;AAIC,wBAAImB,gBAAgB/C,MAAhB,IAA0B,CAA9B,EAAiC;AAC9BM,8BAAM,+DAAN;AACF,qBAFD,MAEO,IAAIyC,gBAAgB/C,MAAhB,GAAyB,CAA7B,EAAgC;AACpCM,8BAAM,gEAAN;AACF;AACL,iBAVD,MAUO;AACH;AACA,yBAAK1B,cAAL,CAAoB2E,cAApB,CAAmCR,eAAnC,EAAoDnB,MAApD;;AAEA;AACA,yBAAKkB,QAAL,GAAgB,KAAhB;;AAEA;AACA,yBAAKP,eAAL,GAAuB,KAAvB;AACA,yBAAKK,cAAL,GAAsB,KAAtB;;AAEA;AACA,yBAAKS,8CAAL;AACH;AACJ,aA9BM,MA8BA,IAAI,KAAKF,QAAT,EAAmB;AACtB;;AAEA;AACA,oBAAIJ,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA;AACA,qBAAKpE,cAAL,CAAoB4E,cAApB,CAAmCT,eAAnC,EAAoDnB,MAApD;;AAEA;AACA,qBAAKuB,QAAL,GAAgB,KAAhB;;AAEA;AACA,qBAAKZ,eAAL,GAAuB,KAAvB;AACA,qBAAKK,cAAL,GAAsB,KAAtB;;AAEA;AACA,qBAAKS,8CAAL;AACH;AACJ;;AAED;;;;;;+BAGO;;AAEH;AACA,gBAAIN,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA,gBAAID,mBAAmB,IAAnB,IAA2BA,gBAAgB/C,MAAhB,GAAyB,CAAxD,EAA2D;AACvD;AACA,oBAAIyD,oBAAoB,KAAKC,oBAAL,EAAxB;;AAEA,oBAAID,qBAAqB,IAArB,IAA6BA,kBAAkBzD,MAAlB,GAA2B,CAA5D,EAA+D;;AAE3D,wBAAIyD,kBAAkBzD,MAAlB,KAA6B,CAAjC,EAAoC;AAChC;AACAM,8BAAM,gCAAN;AACH,qBAHD,MAGO,IAAImD,kBAAkBzD,MAAlB,KAA6B,CAA7B,IAAkCyD,kBAAkB,CAAlB,MAAyB,MAA/D,EAAuE;AAC1E;AACA,6BAAKb,cAAL,GAAsB,IAAtB;;AAEA;AACA,6BAAKO,QAAL,GAAgB,IAAhB;AACH,qBANM,MAMA;AACH7C,8BAAM,2CAAN;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;+BAGO;;AAEH;AACA,gBAAIyC,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA,gBAAID,mBAAmB,IAAnB,IAA2BA,gBAAgB/C,MAAhB,GAAyB,CAAxD,EAA2D;AACvD;AACA,oBAAIyD,oBAAoB,KAAKC,oBAAL,EAAxB;;AAEA,oBAAID,qBAAqB,IAArB,IAA6BA,kBAAkBzD,MAAlB,GAA2B,CAA5D,EAA+D;;AAE3D,wBAAIyD,kBAAkBzD,MAAlB,IAA4B,CAAhC,EAAmC;AAC/B;AACAM,8BAAM,gCAAN;AACH,qBAHD,MAGO,IAAImD,kBAAkBzD,MAAlB,IAA4B,CAAhC,EAAmC;AACtC;;AAEA,4BAAIyD,kBAAkB,CAAlB,MAAyB,OAA7B,EAAsC;AAClC;AACA,iCAAKlB,eAAL,GAAuB,IAAvB;;AAEA;AACA,iCAAKO,QAAL,GAAgB,IAAhB;AACH,yBAND,MAMO,IAAIW,kBAAkB,CAAlB,MAAyB,MAA7B,EAAqC;AACxC;AACA,iCAAKb,cAAL,GAAsB,IAAtB;;AAEA;AACA,iCAAKE,QAAL,GAAgB,IAAhB;AACH;AACJ,qBAhBM,MAgBA,IAAIW,kBAAkBzD,MAAlB,GAA2B,CAA/B,EAAkC;AACrC;;;;;;AAMAM,8BAAM,yHAAN;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;kCAGS;;AAEL;AACA,gBAAIyC,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA,gBAAID,mBAAmB,IAAvB,EAA6B;;AAEzB,oBAAIY,iBAAiB,IAArB;;AAEA,oBAAIZ,gBAAgB/C,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B;AACA2D,qCAAiB,oDAAjB;AACH,iBAHD,MAGO,IAAIZ,gBAAgB/C,MAAhB,GAAyB,CAA7B,EAAgC;AACnC;AACA2D,qCAAiB,qDAAjB;AACH;;AAED,oBAAIA,kBAAkB,IAAtB,EAA4B;AACxB;AACA,wBAAIC,SAASC,QAAQF,cAAR,CAAb;;AAEA,wBAAIC,MAAJ,EAAY;AACR;;AAEA;AACA,4BAAIb,kBAAkB,KAAKC,gBAAL,EAAtB;;AAEA;AACA,4BAAIc,qBAAqB,KAAzB;;AAEA;AACA,6BAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIhB,gBAAgB/C,MAApC,EAA4C+D,GAA5C,EAAiD;AAC7C,gCAAInC,SAASmB,gBAAgBgB,CAAhB,CAAb;;AAEA,gCAAI,KAAKnF,cAAL,CAAoBoF,aAApB,CAAkCpC,MAAlC,CAAJ,EAA+C;AAC3C;AACAkC,qDAAqB,IAArB;AACH;;AAED;AACA,iCAAKlF,cAAL,CAAoBqF,UAApB,CAA+BrC,MAA/B;AACH;;AAED;AACA,4BAAIkC,kBAAJ,EAAwB;AACpB,iCAAKI,iBAAL;AACH;;AAED;AACA,6BAAKtF,cAAL,CAAoB0C,WAApB;;AAEA;AACA,6BAAK1C,cAAL,CAAoBuF,YAApB;AACA,6BAAKlF,KAAL,GAAa,KAAKL,cAAL,CAAoBM,SAAjC;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;2CAImB;;AAEf;AACA,gBAAI6D,kBAAkB,EAAtB;;AAEA;AACAqB,oBAAQC,OAAR,CAAgB,KAAKpF,KAArB,EAA4B,UAASqF,KAAT,EAAgBC,GAAhB,EAAqB;AAC7C,oBAAID,MAAME,OAAV,EAAmB;AACf;AACAzB,oCAAgB0B,IAAhB,CAAqBF,GAArB;AACH;AACJ,aALD,EAKGxB,eALH;;AAOA,gBAAI,KAAKpD,aAAL,IAAsB,IAA1B,EAAgC;;AAE5B;AACA,qBAAK,IAAI+E,IAAI,CAAb,EAAgBA,IAAI,KAAK/E,aAAL,CAAmBK,MAAvC,EAA+C0E,GAA/C,EAAoD;AAChD,wBAAIC,eAAe,KAAKhF,aAAL,CAAmB+E,CAAnB,CAAnB;;AAEA,wBAAIC,gBAAgB,IAApB,EAA0B;AACtB,4BAAIA,aAAaH,OAAjB,EAA0B;AACtB;AACAzB,4CAAgB0B,IAAhB,CAAqBE,aAAaC,EAAlC;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO7B,eAAP;AACH;;AAED;;;;;;;+CAIuB;;AAEnB,gBAAIU,oBAAoB,EAAxB;;AAEA;AACAW,oBAAQC,OAAR,CAAgB,KAAKpF,KAArB,EAA4B,UAASqF,KAAT,EAAgBC,GAAhB,EAAqB;AAC7C,oBAAID,MAAME,OAAV,EAAmB;;AAEf;AACA,wBAAIK,OAAO,KAAKjG,cAAL,CAAoBkG,WAApB,CAAgCP,GAAhC,CAAX;;AAEA,wBAAIM,QAAQ,IAAZ,EAAkB;;AAEd;AACA,4BAAIE,WAAWF,KAAKG,IAApB;;AAEA,4BAAIvB,kBAAkBR,OAAlB,CAA0B8B,QAA1B,KAAuC,CAAC,CAA5C,EAA+C;AAC3C;AACAtB,8CAAkBgB,IAAlB,CAAuBM,QAAvB;AACH;AACJ;AACJ;AACJ,aAjBD,EAiBG,IAjBH;;AAmBA,gBAAIpF,gBAAgB,KAAKA,aAAzB;;AAEA,gBAAIA,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,qBAAK,IAAI+E,IAAI,CAAb,EAAgBA,IAAI/E,cAAcK,MAAlC,EAA0C0E,GAA1C,EAA+C;AAC3C,wBAAIC,eAAehF,cAAc+E,CAAd,CAAnB;;AAEA,wBAAIC,gBAAgB,IAApB,EAA0B;AACtB,4BAAIA,aAAaH,OAAjB,EAA0B;AACtB;;AAEA;AACA,gCAAIO,WAAWJ,aAAaK,IAA5B;;AAEA,gCAAIvB,kBAAkBR,OAAlB,CAA0B8B,QAA1B,KAAuC,CAAC,CAA5C,EAA+C;AAC3C;AACAtB,kDAAkBgB,IAAlB,CAAuBM,QAAvB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAOtB,iBAAP;AACH;;AAED;;;;;;2CAGmB;AACfW,oBAAQC,OAAR,CAAgB,KAAKpF,KAArB,EAA4B,UAASqF,KAAT,EAAgBC,GAAhB,EAAqB;AAC7CD,sBAAME,OAAN,GAAgB,KAAhB;AACH,aAFD;AAGH;;AAED;;;;;;4CAGoB;AAChB,iBAAKS,cAAL;AACA,iBAAK5F,eAAL,GAAuB,CAAC,KAAKA,eAA7B;AACA,iBAAKgD,gBAAL,GAAwB,EAAxB;AACH;;AAED;;;;;;0CAGkB;AACd,iBAAKhD,eAAL,GAAuB,KAAvB;AACA,iBAAKgD,gBAAL,GAAwB,EAAxB;AACH;;AAED;;;;;;2CAGmB;AACf,iBAAK6C,eAAL;AACA,iBAAK5F,cAAL,GAAsB,CAAC,KAAKA,cAA5B;AACA,iBAAKqD,eAAL,GAAuB,EAAvB;AACH;;AAED;;;;;;yCAGiB;AACb,iBAAKrD,cAAL,GAAsB,KAAtB;AACA,iBAAKqD,eAAL,GAAuB,EAAvB;AACH;;AAED;;;;;;qCAGa;AACT,iBAAKJ,eAAL,GAAuB,KAAvB;AACA,iBAAKK,cAAL,GAAsB,KAAtB;AACH;;AAED;;;;;;;4CAIoB;;AAEhB,gBAAIuC,iBAAiB,IAArB;;AAEA;AACA,gBAAIC,eAAe,KAAKxG,cAAL,CAAoByG,eAApB,EAAnB;AACA,gBAAIR,OAAO,KAAKjG,cAAL,CAAoBkG,WAApB,CAAgCM,YAAhC,CAAX;;AAEA,gBAAIE,OAAO,KAAX;;AAEA;AACA,mBAAM,CAACA,IAAP,EAAa;;AAET,oBAAIT,QAAQ,IAAZ,EAAkB;AACd;AACAS,2BAAO,IAAP;AACH,iBAHD,MAGO,IAAI,KAAK1G,cAAL,CAAoBsD,WAApB,CAAgC2C,KAAKD,EAArC,CAAJ,EAA8C;AACjD;AACAC,2BAAO,KAAKjG,cAAL,CAAoBkG,WAApB,CAAgCD,KAAKU,OAArC,CAAP;AACH,iBAHM,MAGA,IAAI,KAAK3G,cAAL,CAAoB4G,iBAApB,CAAsCX,KAAKD,EAA3C,CAAJ,EAAoD;AACvD;AACAO,qCAAiBN,KAAKD,EAAtB;AACAU,2BAAO,IAAP;AACH,iBAJM,MAIA;AACH;AACAA,2BAAO,IAAP;AACH;AACJ;;AAED,gBAAIH,cAAJ,EAAoB;AAChB;AACA,qBAAKvG,cAAL,CAAoB6G,cAApB,CAAmCN,cAAnC;AACH;AACJ;;AAED;;;;;;;0DAIkC;AAAA;;AAC9B,mBAAO,KAAK9G,EAAL,CAAQ,UAACqH,OAAD,EAAUC,MAAV,EAAqB;AAChC;AACA,oBAAIC,qBAAqB,OAAKhH,cAAL,CAAoBiH,cAApB,EAAzB;;AAEA;AACA,oBAAIC,kBAAkB,OAAKlH,cAAL,CAAoBmH,kBAApB,EAAtB;;AAEA,oBAAID,mBAAmB,IAAvB,EAA6B;AACzB;;AAEA;AACA,2BAAKlH,cAAL,CAAoB6G,cAApB,CAAmC,EAAnC;;AAEAC;AACH,iBAPD,MAOO;AACH;;AAEA,wBAAIE,sBAAsBE,eAA1B,EAA2C;AACvC;;;;;;AAMA,4BAAIE,gBAAgB,OAAKpH,cAAL,CAAoBkG,WAApB,CAAgCgB,eAAhC,CAApB;;AAEA,4BAAIE,iBAAiB,IAArB,EAA2B;AACvB,gCAAIC,kBAAkBD,cAAcE,KAApC;;AAEA;AACA,mCAAKzH,UAAL,CAAgB,wBAAhB,EAA0C,EAAE0H,gBAAgBF,eAAlB,EAA1C,EAA+EnG,IAA/E,CAAoF,UAACsG,sBAAD,EAA4B;AAC5G,oCAAIxC,SAASC,QAAQuC,sBAAR,CAAb;;AAEA,oCAAIxC,MAAJ,EAAY;AACR;AACA,2CAAKhF,cAAL,CAAoB6G,cAApB,CAAmCK,eAAnC;AACAJ;AACH,iCAJD,MAIO;AACHA;AACH;AACJ,6BAVD;AAWH,yBAfD,MAeO;AACHA;AACH;AACJ,qBA3BD,MA2BO;AACHA;AACH;AACJ;AACJ,aAhDM,CAAP;AAiDH;;AAED;;;;;;yEAGiD;AAAA;;AAC7C;AACA,iBAAKW,+BAAL,GAAuCvG,IAAvC,CAA4C,YAAM;AAC9C;AACA,uBAAKlB,cAAL,CAAoB0C,WAApB;;AAEA;AACA,uBAAK1C,cAAL,CAAoBuF,YAApB;AACA,uBAAKlF,KAAL,GAAa,OAAKL,cAAL,CAAoBM,SAAjC;;AAEA,uBAAKoH,gBAAL;AACH,aATD;AAUH;;AAED;;;;;;;8CAIsB;;AAElB;AACA,iBAAK1H,cAAL,CAAoB2H,eAApB,CAAoC,KAAKhH,YAAzC;;AAEA;AACA,iBAAKX,cAAL,CAAoB0C,WAApB;AACH;;AAED;;;;;;2CAGmB;AACf,iBAAKkF,UAAL,GAAkB,CAAC,KAAKA,UAAxB;;AAEA,gBAAI,KAAKC,sBAAL,IAA+B,IAAnC,EAAyC;AACrC;AACA,qBAAKC,qBAAL;AACH;;AAED,gBAAI,KAAKC,mBAAL,IAA4B,IAAhC,EAAsC;AAClC;AACA,qBAAKC,kBAAL;AACH;AACJ;;AAED;;;;;;gDAGwB;AACpB,iBAAKH,sBAAL,GAA8B,KAAK9H,aAAL,CAAmBsC,cAAnB,CAAkC,UAAlC,CAA9B;AACH;;AAED;;;;;;6CAGqB;AAAA;;AACjB,iBAAKtC,aAAL,CAAmBiI,kBAAnB,GAAwC9G,IAAxC,CAA6C,UAAC6G,mBAAD,EAAyB;AAClE,uBAAKA,mBAAL,GAA2BA,mBAA3B;AACH,aAFD;AAGH;;AAED;;;;;;;oDAI4BE,e,EAAiB;;AAEzC;AACA,iBAAKC,sBAAL,GAA8B,IAA9B;;AAEA;AACA,iBAAKC,iBAAL,CAAuBF,eAAvB;AACH;;AAED;;;;;;;iDAIyBA,e,EAAiB;AACtC,iBAAKG,yBAAL,GAAiC,IAAjC;;AAEA;AACA,iBAAKD,iBAAL,CAAuBF,eAAvB;AACH;;AAED;;;;;;;0CAIkBA,e,EAAiB;AAAA;;AAE/B,iBAAKA,eAAL,GAAuBA,eAAvB;;AAEA,gBAAI,KAAKA,eAAL,IAAwB,IAA5B,EAAkC;AAC9B;AACA,qBAAKI,sBAAL,GAA8B,EAA9B;AACA,qBAAKC,kBAAL,GAA0B,EAA1B;AACA,qBAAKF,yBAAL,GAAiC,IAAjC;AACA,qBAAKF,sBAAL,GAA8B,IAA9B;AACA,qBAAKD,eAAL,GAAuB,IAAvB;AACA,qBAAKM,aAAL,GAAqB,IAArB;AACH,aARD,MAQO;AACH;AACA,qBAAKvI,cAAL,CAAoBwI,mBAApB,CAAwC,KAAKP,eAA7C,EAA8D/G,IAA9D,CAAmE,UAACuH,WAAD,EAAiB;;AAEhF;AACA,2BAAKJ,sBAAL,GAA8B,EAA9B;AACA,2BAAKE,aAAL,GAAqBE,WAArB;;AAEA;AACA,wBAAIC,SAAS,OAAK1I,cAAL,CAAoB2I,qBAApB,CAA0C,OAAKJ,aAA/C,CAAb;AACA,2BAAKF,sBAAL,GAA8BK,OAAOpI,SAArC;AACA,2BAAKgI,kBAAL,GAA0BI,OAAOE,KAAjC;AACH,iBAVD;AAWH;AACJ;;AAED;;;;;;+CAGuB;;AAEnB,gBAAI,KAAKL,aAAL,IAAsB,IAA1B,EAAgC;AAC5B;AACA,oBAAInG,oBAAoB,KAAKmG,aAAL,CAAmBnG,iBAA3C;;AAEA;AACAE,uBAAOC,IAAP,CAAYH,iBAAZ;AACH;AACJ;;AAED;;;;;;;0CAIkB6D,I,EAAM;;AAEpB,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIjD,SAASiD,KAAKD,EAAlB;;AAEA;AACA,oBAAI5D,oBAAoB,KAAKmG,aAAL,CAAmBnG,iBAA3C;;AAEA;AACA,oBAAIyG,iBAAkBzG,oBAAoB,QAApB,GAA+BY,MAArD;;AAEA;AACAV,uBAAOC,IAAP,CAAYsG,cAAZ;AACH;AACJ;;AAED;;;;;;sCAGc;;AAEV;AACA,gBAAIC,gBAAgB,KAAKC,wBAAL,EAApB;;AAEA,gBAAID,iBAAiB,IAAjB,IAAyBA,cAAc1H,MAAd,IAAwB,CAArD,EAAwD;AACpD;AACAM,sBAAM,iCAAN;AACH,aAHD,MAGO;AACH,oBAAIsH,qBAAqB,EAAzB;;AAEA;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,cAAc1H,MAAlC,EAA0C6H,GAA1C,EAA+C;AAC3C,wBAAIC,eAAeJ,cAAcG,CAAd,CAAnB;;AAEA,wBAAIC,gBAAgB,IAApB,EAA0B;;AAEtB,4BAAIC,aAAa,IAAjB;AACA,4BAAI7B,QAAQ4B,aAAa5B,KAAzB;;AAEA,4BAAI,KAAKe,sBAAL,CAA4Ba,aAAalD,EAAzC,KAAgD,IAApD,EAA0D;AACtD;AACAmD,yCAAa,KAAKd,sBAAL,CAA4Ba,aAAalD,EAAzC,EAA6CmD,UAA1D;AACH;;AAED,4BAAIH,sBAAsB,EAA1B,EAA8B;AAC1BA,kDAAsB,IAAtB;AACH;;AAED;AACAA,8CAAsBG,aAAa,IAAb,GAAoB7B,KAA1C;AACH;AACJ;;AAED,oBAAI8B,UAAU,EAAd;;AAEA,oBAAIN,cAAc1H,MAAd,IAAwB,CAA5B,EAA+B;AAC3B;AACAgI,8BAAU,mDAAmDJ,kBAAnD,GAAwE,qEAAlF;AACH,iBAHD,MAGO;AACH;AACAI,8BAAU,qDAAqDJ,kBAArD,GAA0E,sEAApF;AACH;;AAED;AACA,oBAAIhE,SAASC,QAAQmE,OAAR,CAAb;;AAEA,oBAAIpE,MAAJ,EAAY;AACR;;AAEA;AACA,wBAAIjE,gBAAgB,KAAKf,cAAL,CAAoBgB,gBAApB,EAApB;;AAEA,wBAAIqI,sBAAsB,eAA1B;;AAEA;AACA,yBAAK,IAAIlE,IAAI,CAAb,EAAgBA,IAAI2D,cAAc1H,MAAlC,EAA0C+D,GAA1C,EAA+C;;AAE3C,4BAAI+D,eAAeJ,cAAc3D,CAAd,CAAnB;;AAEA,4BAAI+D,gBAAgB,IAApB,EAA0B;;AAEtB,gCAAII,aAAaJ,aAAalD,EAA9B;;AAEA;AACA,gCAAIuD,WAAW,KAAKlB,sBAAL,CAA4BiB,UAA5B,CAAf;;AAEA,gCAAIC,YAAY,IAAhB,EAAsB;;AAElB;AACA,oCAAIxI,iBAAiB,IAAjB,IAAyBA,cAAcK,MAAd,GAAuB,CAApD,EAAuD;AACnDiI,0DAAsBtI,cAAcA,cAAcK,MAAd,GAAuB,CAArC,CAAtB;AACH;;AAED;AACA,oCAAIoI,WAAW,KAAKvJ,WAAL,CAAiBwJ,oBAAjB,CAAsCF,SAAStD,IAA/C,CAAf;;AAEA;AACA,oCAAI,KAAKjG,cAAL,CAAoB0J,YAApB,CAAiCF,SAASxD,EAA1C,CAAJ,EAAmD;AAC/C;;AAEA;AACA,wCAAI2D,sBAAsB,KAAK3J,cAAL,CAAoB4J,sBAApB,EAA1B;;AAEA;AACAJ,6CAASxD,EAAT,GAAc2D,mBAAd;AACH;;AAED,oCAAIE,iBAAiBL,SAASM,UAA9B;;AAEA,oCAAID,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,yCAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,eAAezI,MAAnC,EAA2C2I,GAA3C,EAAgD;AAC5C,4CAAIC,gBAAgBH,eAAeE,CAAf,CAApB;;AAEA,4CAAIC,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,gDAAI,KAAKhK,cAAL,CAAoBiK,iBAApB,CAAsCD,cAAchE,EAApD,CAAJ,EAA6D;AACzD;;AAEA;AACA,oDAAIkE,iBAAiB,KAAKlK,cAAL,CAAoBmK,oBAApB,EAArB;;AAEA;AACAH,8DAAchE,EAAd,GAAmBkE,cAAnB;AACH;AACJ;AACJ;AACJ;;AAED;AACAV,yCAASY,WAAT,GAAuB,EAAvB;;AAEA;AACA,qCAAKpK,cAAL,CAAoBqK,eAApB,CAAoCb,QAApC,EAA8CH,mBAA9C;AACH;AACJ;AACJ;;AAED;AACA,yBAAKrJ,cAAL,CAAoB0C,WAApB;;AAEA;AACA,yBAAK1C,cAAL,CAAoBuF,YAApB;AACA,yBAAKlF,KAAL,GAAa,KAAKL,cAAL,CAAoBM,SAAjC;;AAEA;AACA,yBAAKsH,UAAL,GAAkB,KAAlB;;AAEA,yBAAKS,sBAAL,GAA8B,EAA9B;AACA,yBAAKC,kBAAL,GAA0B,EAA1B;AACA,yBAAKF,yBAAL,GAAiC,IAAjC;AACA,yBAAKF,sBAAL,GAA8B,IAA9B;AACA,yBAAKD,eAAL,GAAuB,IAAvB;AACA,yBAAKM,aAAL,GAAqB,IAArB;AACH;AACJ;AACJ;;AAED;;;;;;;mDAI2B;AACvB,gBAAIO,gBAAgB,EAApB;;AAEA;AACA,iBAAK,IAAI3D,IAAI,CAAb,EAAgBA,IAAI,KAAKmD,kBAAL,CAAwBlH,MAA5C,EAAoD+D,GAApD,EAAyD;AACrD,oBAAImF,OAAO,KAAKhC,kBAAL,CAAwBnD,CAAxB,CAAX;;AAEA,oBAAImF,KAAK1E,OAAT,EAAkB;AACd;;;;AAIAkD,kCAAcjD,IAAd,CAAmByE,KAAKrE,IAAxB;AACH;AACJ;;AAED,mBAAO6C,aAAP;AACH;;;;;;AACJ;;AAEDvJ,kBAAkBgL,OAAlB,GAA4B,CAAC,WAAD,EAAc,IAAd,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,cAAxC,EAAwD,YAAxD,EACxB,wBADwB,EACE,eADF,EACmB,gBADnB,EACqC,aADrC,CAA5B;;kBAGehL,iB","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n    constructor($interval, $q, $scope, $state, $stateParams, $translate, AuthorWebSocketService, ConfigService, ProjectService, UtilService) {\n        this.$interval = $interval;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$translate = $translate;\n        this.AuthorWebSocketService = AuthorWebSocketService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.projectId = this.$stateParams.projectId;\n        this.runId = this.ConfigService.getRunId();\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n        this.projectTitle = this.ProjectService.getProjectTitle();\n        this.inactiveGroups = this.ProjectService.getInactiveGroups();\n        this.inactiveNodes = this.ProjectService.getInactiveNodes();\n\n        // check to see if there are other authors right now.\n        this.ProjectService.getCurrentAuthors(this.projectId).then((currentAuthors) => {\n            if (currentAuthors.length == 0) {\n                this.currentAuthorsMessage = \"\";\n            } else {\n                // TODO: internationalize me\n                \n                var showWarningMessage = true;\n                \n                // get the user name of the signed in user\n                var myUserName = this.ConfigService.getMyUserName();\n                \n                // check if the signed in user is the current author\n                if (currentAuthors.length == 1 && currentAuthors[0] == myUserName) {\n                    /*\n                     * the signed in user is the current author so we do not need\n                     * to display the warning message\n                     */\n                    showWarningMessage = false;\n                }\n                \n                if (showWarningMessage) {\n                    this.currentAuthorsMessage = currentAuthors.join(\",\") + \" is currently editing this project.\";\n                    alert(currentAuthors.join(\",\") + \" is currently editing this project. Please be careful not to overwrite each other's work!\");\n                }\n            }\n        });\n\n        // notify others that this project is being authored\n        this.ProjectService.notifyAuthorProjectBegin(this.projectId);\n\n        // temprary polling until we get websocket working\n        this.checkOtherAuthorsIntervalId = this.$interval(() => {\n            this.ProjectService.getCurrentAuthors(this.projectId).then((currentAuthors) => {\n                if (currentAuthors.length == 0) {\n                    this.currentAuthorsMessage = \"\";\n                } else {\n                    \n                    var showWarningMessage = true;\n                    \n                    // get the user name of the signed in user\n                    var myUserName = this.ConfigService.getMyUserName();\n                    \n                    // check if the signed in user is the current author\n                    if (currentAuthors.length == 1 && currentAuthors[0] == myUserName) {\n                        /*\n                         * the signed in user is the current author so we do not need\n                         * to display the warning message\n                         */\n                        showWarningMessage = false;\n                    }\n                    \n                    if (showWarningMessage) {\n                        this.currentAuthorsMessage = currentAuthors.join(\",\") + \" is currently editing this project.\";\n                    }\n                }\n            });\n        }, 15000);\n\n        this.$scope.$on(\"$destroy\", () => {\n            // cancel the checkOtherAuthorsInterval\n            this.$interval.cancel(this.checkOtherAuthorsIntervalId);\n            // notify others that this project is no longer being authored\n            this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n        });\n    };\n\n    // updates projectAsText field, which is the string representation of the project that we'll show in the textarea\n    updateProjectAsText() {\n        this.projectAsText = JSON.stringify(this.ProjectService.project, null, 4);\n    };\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n    \n    /**\n     * Launch the project in preview mode without constraints\n     */\n    previewProjectWithoutConstraints() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        previewProjectURL = previewProjectURL + '?constraints=false';\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.project.asset', {projectId:this.projectId});\n    };\n\n    viewProjectHistory() {\n        this.$state.go('root.project.history', {projectId:this.projectId});\n    };\n\n    viewNotebookSettings() {\n        this.$state.go('root.project.notebook', {projectId:this.projectId});\n    }\n\n    saveProject() {\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\n        //let commitMessage = $(\"#commitMessageInput\").val();\n        let commitMessage = \"Made changes to Project.\";\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            //this.ProjectService.project = this.project;\n\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            });\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    /**\n     * Close authoring for the current project and bring user back to main AT page\n     */\n    closeProject() {\n        this.$state.go('root.main');\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * The the components in the specified node id.\n     * @param nodeId the node id\n     * @returns components in the node\n     */\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Returns a list of possible criteria for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id in the node\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n    }\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n    };\n\n    /**\n     * Create a new group (activity)\n     */\n    createGroup() {\n\n        // create a new group\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n        /*\n         * set the group into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newGroup;\n        //this.updateProjectAsText();\n\n        // turn off the create group div\n        this.showCreateGroup = false;\n\n        // clear the title from the create group div\n        this.createGroupTitle = '';\n\n        // turn on insert mode\n        this.insertGroupMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Create a new node (step)\n     */\n    createNode() {\n\n        // create a new node\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n        /*\n         * set the node into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newNode;\n        //this.updateProjectAsText();\n\n        // turn off the create node div\n        this.showCreateNode = false;\n\n        // clear the title from the create node div\n        this.createNodeTitle = '';\n\n        // turn on insert mode\n        this.insertNodeMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Insert the node(s) inside\n     * @param nodeId the node id of the group that we will insert into\n     */\n    insertInside(nodeId) {\n\n        // TODO check that we are inserting into a group\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node inside the group\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids into\n                 * itself so we will not allow that\n                 */\n                if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item into itself.');\n                } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items into itself.');\n                }\n            } else {\n                // move the nodes into the group\n                this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes into the group\n            this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        }\n        \n        // save and refresh the project\n        this.checkPotentialStartNodeIdChangeThenSaveProject();\n    }\n\n    /**\n     * Insert the node(s) after\n     * @param nodeId the node id of the node we will insert after\n     */\n    insertAfter(nodeId) {\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node after the node id\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n            \n            // save and referesh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids after\n                 * itself so we will not allow that\n                 */\n                 if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item after itself.');\n                 } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items after itself.');\n                 }\n            } else {\n                // move the nodes after the node id\n                this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n\n                // save and refresh the project\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes and put them after the node id\n            this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // save and refresh the project\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\n        }\n    }\n\n    /**\n     * Turn on copy mode\n     */\n    copy() {\n\n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n                if (selectedItemTypes.length === 0) {\n                    // there are no selected items\n                    alert('Please select an item to copy.');\n                } else if (selectedItemTypes.length === 1 && selectedItemTypes[0] === 'node') {\n                    // turn on insert mode\n                    this.insertNodeMode = true;\n\n                    // turn on copy mode\n                    this.copyMode = true;\n                } else {\n                    alert('You cannot copy the item(s) at this time.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn on move mode\n     */\n    move() {\n    \n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n        \n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n            \n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n            \n                if (selectedItemTypes.length == 0) {\n                    // there are no selected items\n                    alert('Please select an item to move.');\n                } else if (selectedItemTypes.length == 1) {\n                    // all the items the user selected are the same type\n                    \n                    if (selectedItemTypes[0] === 'group') {\n                        // turn on insert mode\n                        this.insertGroupMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    } else if (selectedItemTypes[0] === 'node') {\n                        // turn on insert mode\n                        this.insertNodeMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    }\n                } else if (selectedItemTypes.length > 1) {\n                    /*\n                     * the items the user selected are different types but\n                     * we do not allow moving different types of items at\n                     * the same time\n                     */\n                    \n                    alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the selected nodes\n     */\n    delete() {\n    \n        // get the selected items\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null) {\n        \n            var confirmMessage = null;\n        \n            if (selectedNodeIds.length == 1) {\n                // the user selected one item\n                confirmMessage = 'Are you sure you want to delete the selected item?';\n            } else if (selectedNodeIds.length > 1) {\n                // the user selected multiple items\n                confirmMessage = 'Are you sure you want to delete the selected items?';\n            }\n            \n            if (confirmMessage != null) {\n                // ask the user to confirm the delete\n                var answer = confirm(confirmMessage);\n        \n                if (answer) {\n                    // the user confirmed yes\n        \n                    // get the selected node ids\n                    var selectedNodeIds = this.getSelectedItems();\n        \n                    // flag that will be set if we have deleted the start node id\n                    var deletedStartNodeId = false;\n        \n                    // loop through each node id\n                    for (var n = 0; n < selectedNodeIds.length; n++) {\n                        var nodeId = selectedNodeIds[n];\n        \n                        if (this.ProjectService.isStartNodeId(nodeId)) {\n                            // we have deleted the start node id\n                            deletedStartNodeId = true;\n                        }\n        \n                        // delete the node\n                        this.ProjectService.deleteNode(nodeId);\n                    }\n                    \n                    // update start node id if necesary\n                    if (deletedStartNodeId) {\n                        this.updateStartNodeId();\n                    }\n        \n                    // save the project\n                    this.ProjectService.saveProject();\n        \n                    // refresh the project\n                    this.ProjectService.parseProject();\n                    this.items = this.ProjectService.idToOrder;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the selected items\n     * @returns an array of node ids that are selected\n     */\n    getSelectedItems() {\n\n        // an array to hold the node ids of the nodes that are selected\n        var selectedNodeIds = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                // this node is checked\n                selectedNodeIds.push(key);\n            }\n        }, selectedNodeIds);\n        \n        if (this.inactiveNodes != null) {\n            \n            // loop through all the inactive nodes\n            for (var i = 0; i < this.inactiveNodes.length; i++) {\n                var inactiveNode = this.inactiveNodes[i];\n                \n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the inactive node was checked so we will add it\n                        selectedNodeIds.push(inactiveNode.id);\n                    }\n                }\n            }\n        }\n\n        return selectedNodeIds;\n    }\n    \n    /**\n     * Get the types of the selected items\n     * @returns an array of item types. possible items are group or node.\n     */\n    getSelectedItemTypes() {\n\n        var selectedItemTypes = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                \n                // this node is checked\n                var node = this.ProjectService.getNodeById(key);\n                \n                if (node != null) {\n                \n                    // get the node type\n                    var nodeType = node.type;\n                    \n                    if (selectedItemTypes.indexOf(nodeType) == -1) {\n                        // we have not seen this node type yet so we will add it\n                        selectedItemTypes.push(nodeType);\n                    }\n                }\n            }\n        }, this);\n        \n        var inactiveNodes = this.inactiveNodes;\n        \n        if (inactiveNodes != null) {\n            \n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n                \n                if (inactiveNode != null) {\n                    if (inactiveNode.checked) {\n                        // the node was checked\n                        \n                        // get the node type\n                        var nodeType = inactiveNode.type;\n                        \n                        if (selectedItemTypes.indexOf(nodeType) == -1) {\n                            // we have not seen this node type yet so we will add it\n                            selectedItemTypes.push(nodeType);\n                        }\n                    }\n                }\n            }\n        }\n\n        return selectedItemTypes;\n    }\n\n    /**\n     * Unselect all the items\n     */\n    unselectAllItems() {\n        angular.forEach(this.items, function(value, key) {\n            value.checked = false;\n        });\n    }\n    \n    /**\n     * Toggle the create group input\n     */\n    toggleCreateGroup() {\n        this.hideCreateNode();\n        this.showCreateGroup = !this.showCreateGroup;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateGroup() {\n        this.showCreateGroup = false;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Toggle the create node input\n     */\n    toggleCreateNode() {\n        this.hideCreateGroup();\n        this.showCreateNode = !this.showCreateNode;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateNode() {\n        this.showCreateNode = false;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Cancel the move mode\n     */\n    cancelMove() {\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n    }\n    \n    /**\n     * Update the start node id by traversing start ids until a\n     * node id is found.\n     */\n    updateStartNodeId() {\n        \n        var newStartNodeId = null;\n        \n        // get the start group id\n        var startGroupId = this.ProjectService.getStartGroupId();\n        var node = this.ProjectService.getNodeById(startGroupId);\n        \n        var done = false;\n        \n        // recursively traverse the start ids\n        while(!done) {\n            \n            if (node == null) {\n                // base case in case something went wrong\n                done = true;\n            } else if (this.ProjectService.isGroupNode(node.id)) {\n                // the node is a group node so we will get its start node\n                node = this.ProjectService.getNodeById(node.startId);\n            } else if (this.ProjectService.isApplicationNode(node.id)) {\n                // the node is a step node so we have found the new start node id\n                newStartNodeId = node.id;\n                done = true;\n            } else {\n                // base case in case something went wrong\n                done = true;\n            }\n        }\n        \n        if (newStartNodeId) {\n            // set the new start node id\n            this.ProjectService.setStartNodeId(newStartNodeId);\n        }\n    }\n    \n    /**\n     * Check if the start node id for the project could potentially\n     * change.\n     */\n    checkPotentialStartNodeIdChange() {\n        return this.$q((resolve, reject) => {\n            // get the current start node id\n            var currentStartNodeId = this.ProjectService.getStartNodeId();\n\n            // get the first leaf node id\n            var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n\n            if (firstLeafNodeId == null) {\n                // there are no steps in the project\n                \n                // set the start node id to empty string\n                this.ProjectService.setStartNodeId('');\n                \n                resolve();\n            } else {\n                // we have found a leaf node\n                \n                if (currentStartNodeId != firstLeafNodeId) {\n                    /*\n                     * the node ids are different which means the first leaf node\n                     * id is different than the current start node id and that\n                     * the author may want to use the first leaf node id as the\n                     * new start node id\n                     */\n                    var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n\n                    if (firstLeafNode != null) {\n                        var firstChildTitle = firstLeafNode.title;\n\n                        // ask the user if they would like to change the start step to the step that is now the first child in the group\n                        this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle }).then((confirmUpdateStartStep) => {\n                            var answer = confirm(confirmUpdateStartStep);\n\n                            if (answer) {\n                                // change the project start node id\n                                this.ProjectService.setStartNodeId(firstLeafNodeId);\n                                resolve();\n                            } else {\n                                resolve();\n                            }\n                        });\n                    } else {\n                        resolve();\n                    }\n                } else {\n                    resolve();\n                }\n            }\n        });\n    }\n    \n    /**\n     * Check if the start node id has changed and then save the project\n     */\n    checkPotentialStartNodeIdChangeThenSaveProject() {\n        // check if the project start node id should be changed\n        this.checkPotentialStartNodeIdChange().then(() => {\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        });\n    }\n    \n    /**\n     * The project title changed so we will update the project title in the \n     * project service\n     */\n    projectTitleChanged() {\n        \n        // update the project title in the project service\n        this.ProjectService.setProjectTitle(this.projectTitle);\n        \n        // save the project\n        this.ProjectService.saveProject();\n    }\n    \n    /**\n     * Toggle the import view and load the project drop downs if necessary\n     */\n    toggleImportView() {\n        this.importMode = !this.importMode;\n        \n        if (this.authorableProjectsList == null) {\n            // populate the authorable projects drop down\n            this.getAuthorableProjects();\n        }\n        \n        if (this.libraryProjectsList == null) {\n            // populate the library projects drop down\n            this.getLibraryProjects();\n        }\n    }\n    \n    /**\n     * Get all the authorable projects\n     */\n    getAuthorableProjects() {\n        this.authorableProjectsList = this.ConfigService.getConfigParam('projects');\n    }\n    \n    /**\n     * Get all the library projects\n     */\n    getLibraryProjects() {\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n            this.libraryProjectsList = libraryProjectsList;\n        });\n    }\n    \n    /**\n     * The author has chosen an authorable project to import from\n     * @param importProjectId the project id to import from\n     */\n    showAuthorableImportProject(importProjectId) {\n        \n        // clear the select drop down for the library project\n        this.importLibraryProjectId = null;\n        \n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n    \n    /**\n     * The author has chosen a library project to import from\n     * @param importProjectId the project id to import from\n     */\n    showLibraryImportProject(importProjectId) {\n        this.importAuthorableProjectId = null;\n        \n        // show the import project\n        this.showImportProject(importProjectId);\n    }\n    \n    /**\n     * Show the project we want to import steps from\n     * @param importProjectId the import project id\n     */\n    showImportProject(importProjectId) {\n        \n        this.importProjectId = importProjectId;\n        \n        if (this.importProjectId == null) {\n            // clear all the import project values\n            this.importProjectIdToOrder = {};\n            this.importProjectItems = [];\n            this.importAuthorableProjectId = null;\n            this.importLibraryProjectId = null;\n            this.importProjectId = null;\n            this.importProject = null;\n        } else {\n            // get the import project\n            this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\n                \n                // create the mapping of node id to order for the import project\n                this.importProjectIdToOrder = {};\n                this.importProject = projectJSON;\n                \n                // calculate the node order of the import project\n                var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n                this.importProjectIdToOrder = result.idToOrder;\n                this.importProjectItems = result.nodes;\n            });\n        }\n    }\n    \n    /**\n     * Preview the import project\n     */\n    previewImportProject() {\n    \n        if (this.importProject != null) {\n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n            \n            // open the preview step in a new tab\n            window.open(previewProjectURL);\n        }\n    }\n    \n    /**\n     * Preview the step\n     * @param node\n     */\n    previewImportNode(node) {\n        \n        if (node != null) {\n            \n            // get the node id\n            var nodeId = node.id;\n            \n            // get the preview project url for the import project\n            var previewProjectURL = this.importProject.previewProjectURL;\n            \n            // create the url to preview the step\n            var previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n            \n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n    \n    /**\n     * Import the selected steps\n     */\n    importSteps() {\n        \n        // get the nodes that were selected\n        var selectedNodes = this.getSelectedNodesToImport();\n        \n        if (selectedNodes == null || selectedNodes.length == 0) {\n            // the author did not select any steps to import\n            alert('Please select a step to import.');\n        } else {\n            var selectedNodeTitles = '';\n            \n            // loop through all the selected nodes\n            for (var s = 0; s < selectedNodes.length; s++) {\n                var selectedNode = selectedNodes[s];\n                \n                if (selectedNode != null) {\n                    \n                    var stepNumber = null;\n                    var title = selectedNode.title;\n                    \n                    if (this.importProjectIdToOrder[selectedNode.id] != null) {\n                        // get the step number\n                        stepNumber = this.importProjectIdToOrder[selectedNode.id].stepNumber;\n                    }\n                    \n                    if (selectedNodeTitles != '') {\n                        selectedNodeTitles += '\\n';\n                    }\n                    \n                    // get the step number and title\n                    selectedNodeTitles += stepNumber + ': ' + title;\n                }\n            }\n            \n            var message = '';\n            \n            if (selectedNodes.length == 1) {\n                // one step is being imported\n                message = 'Are you sure you want to import this step?\\n\\n' + selectedNodeTitles + '\\n\\nThe imported step will be placed in the Inactive Steps section.';\n            } else {\n                // multiple steps are being imported\n                message = 'Are you sure you want to import these steps?\\n\\n' + selectedNodeTitles + '\\n\\nThe imported steps will be placed in the Inactive Steps section.';\n            }\n            \n            // ask the author if they are sure they want to import these steps\n            var answer = confirm(message);\n            \n            if (answer) {\n                // the author answered yes to import\n                \n                // get the inactive nodes from the project\n                var inactiveNodes = this.ProjectService.getInactiveNodes();\n                \n                var nodeIdToInsertAfter = 'inactiveSteps';\n                \n                // loop through the nodes we will import\n                for (var n = 0; n < selectedNodes.length; n++) {\n                    \n                    var selectedNode = selectedNodes[n];\n                    \n                    if (selectedNode != null) {\n                        \n                        var tempNodeId = selectedNode.id;\n                        \n                        // get the item which contains the node we want to import\n                        var tempItem = this.importProjectIdToOrder[tempNodeId];\n                        \n                        if (tempItem != null) {\n                            \n                            // find where to insert the imported node\n                            if (inactiveNodes != null && inactiveNodes.length > 0) {\n                                nodeIdToInsertAfter = inactiveNodes[inactiveNodes.length - 1];\n                            }\n                            \n                            // make a copy of the node so that we don't modify the source\n                            var tempNode = this.UtilService.makeCopyOfJSONObject(tempItem.node);\n                            \n                            // check if the node id is already being used in the current project\n                            if (this.ProjectService.isNodeIdUsed(tempNode.id)) {\n                                // the node id is already being used in the current project\n                                \n                                // get the next available node id\n                                var nextAvailableNodeId = this.ProjectService.getNextAvailableNodeId();\n                                \n                                // change the node id of the node we are importing\n                                tempNode.id = nextAvailableNodeId;\n                            }\n                            \n                            var tempComponents = tempNode.components;\n                            \n                            if (tempComponents != null) {\n                                \n                                // loop through all the components in the node we are importing\n                                for (var c = 0; c < tempComponents.length; c++) {\n                                    var tempComponent = tempComponents[c];\n                                    \n                                    if (tempComponent != null) {\n                                        \n                                        // check if the component id is already being used\n                                        if (this.ProjectService.isComponentIdUsed(tempComponent.id)) {\n                                            // we are already using the component id so we will need to change it\n                                            \n                                            // find a component id that isn't currently being used\n                                            var newComponentId = this.ProjectService.getUnusedComponentId();\n                                            \n                                            // set the new component id into the component\n                                            tempComponent.id = newComponentId;\n                                        }\n                                    }\n                                }\n                            }\n                            \n                            // clear the constraints\n                            tempNode.constraints = [];\n                            \n                            // add the imported node to the end of the inactive nodes\n                            this.ProjectService.addInactiveNode(tempNode, nodeIdToInsertAfter);\n                        }\n                    }\n                }\n                \n                // save the project\n                this.ProjectService.saveProject();\n\n                // refresh the project\n                this.ProjectService.parseProject();\n                this.items = this.ProjectService.idToOrder;\n                \n                // turn off import mode\n                this.importMode = false;\n                \n                this.importProjectIdToOrder = {};\n                this.importProjectItems = [];\n                this.importAuthorableProjectId = null;\n                this.importLibraryProjectId = null;\n                this.importProjectId = null;\n                this.importProject = null;\n            }\n        }\n    }\n    \n    /**\n     * Get the selected nodes to import\n     * @return an array of selected nodes\n     */\n    getSelectedNodesToImport() {\n        var selectedNodes = [];\n        \n        // loop through all the import project items\n        for (var n = 0; n < this.importProjectItems.length; n++) {\n            var item = this.importProjectItems[n];\n            \n            if (item.checked) {\n                /*\n                 * this item is checked so we will add it to the array of nodes\n                 * that we will import\n                 */\n                selectedNodes.push(item.node);\n            }\n        }\n        \n        return selectedNodes;\n    }\n};\n\nProjectController.$inject = ['$interval', '$q', '$scope', '$state', '$stateParams', '$translate',\n    'AuthorWebSocketService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default ProjectController;\n"]}