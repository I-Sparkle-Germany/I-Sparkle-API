{"version":3,"sources":["projectController.es6"],"names":[],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n    constructor($q, $scope, $state, $stateParams, $translate, ProjectService, ConfigService) {\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$translate = $translate;\n        this.ProjectService = ProjectService;\n        this.ConfigService = ConfigService;\n\n        this.projectId = this.$stateParams.projectId;\n        this.project = this.ProjectService.project;\n        this.items = this.ProjectService.idToOrder;\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        this.showCreateGroup = false;\n        this.showCreateNode = false;\n\n        this.updateProjectAsText();\n\n        $scope.$watch(\n            () => {\n                return this.projectAsText;\n            },\n            () => {\n                try {\n                    this.project = JSON.parse(this.projectAsText);\n                } catch(exp) {\n                    //Exception handler\n                };\n        });\n    };\n\n    // updates projectAsText field, which is the string representation of the project that we'll show in the textarea\n    updateProjectAsText() {\n        this.projectAsText = JSON.stringify(this.project, null, 4);\n    };\n\n    /**\n     * Launch the project in preview mode\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\n        window.open(previewProjectURL);\n    };\n\n    viewProjectAssets() {\n        this.$state.go('root.project.asset', {projectId:this.projectId});\n    };\n\n    viewProjectHistory() {\n        this.$state.go('root.project.history', {projectId:this.projectId});\n    };\n\n    saveProject() {\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\n        let commitMessage = $(\"#commitMessageInput\").val();\n        try {\n            // if projectJSONString is bad json, it will throw an exception and not save.\n            this.ProjectService.project = this.project;\n\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\n                this.commitHistory = commitHistoryArray;\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\n            });\n        } catch (error) {\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\n            return;\n        }\n    };\n\n    /**\n     * Close authoring for the current project and bring user back to main AT page\n     */\n    closeProject() {\n        this.$state.go('root.main');\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * The the components in the specified node id.\n     * @param nodeId the node id\n     * @returns components in the node\n     */\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Returns a list of possible criteria for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id in the node\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\n    }\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * A node was clicked so we will go to the node authoring view\n     * @param nodeId\n     */\n    nodeClicked(nodeId) {\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\n    };\n\n    /**\n     * Create a new group (activity)\n     */\n    createGroup() {\n\n        // create a new group\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\n\n        /*\n         * set the group into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newGroup;\n        //this.updateProjectAsText();\n\n        // turn off the create group div\n        this.showCreateGroup = false;\n\n        // clear the title from the create group div\n        this.createGroupTitle = '';\n\n        // turn on insert mode\n        this.insertGroupMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Create a new node (step)\n     */\n    createNode() {\n\n        // create a new node\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\n\n        /*\n         * set the node into this variable to hold it temporarily while the\n         * author decides where to place it\n         */\n        this.nodeToAdd = newNode;\n        //this.updateProjectAsText();\n\n        // turn off the create node div\n        this.showCreateNode = false;\n\n        // clear the title from the create node div\n        this.createNodeTitle = '';\n\n        // turn on insert mode\n        this.insertNodeMode = true;\n\n        // turn on create mode\n        this.createMode = true;\n    }\n\n    /**\n     * Insert the node(s) inside\n     * @param nodeId the node id of the group that we will insert into\n     */\n    insertInside(nodeId) {\n\n        // TODO check that we are inserting into a group\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node inside the group\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids into\n                 * itself so we will not allow that\n                 */\n                if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item into itself.');\n                } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items into itself.');\n                }\n            } else {\n                // move the nodes into the group\n                this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n\n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the nodes that were selected\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes into the group\n            this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n        }\n        \n        // check if the project start node id should be changed\n        this.checkPotentialStartNodeIdChange().then(() => {\n            // save the project\n            this.ProjectService.saveProject();\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        });\n    }\n\n    /**\n     * Insert the node(s) after\n     * @param nodeId the node id of the node we will insert after\n     */\n    insertAfter(nodeId) {\n\n        if (this.createMode) {\n            // we are in create mode\n\n            // create the node after the node id\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n\n            /*\n             * clear this variable that we used to hold the node we inserted.\n             * since we have inserted the node we don't need a handle to it\n             * anymore\n             */\n            this.nodeToAdd = null;\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off create mode\n            this.createMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n        } else if (this.moveMode) {\n            // we are in move mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n                /*\n                 * the user is trying to insert the selected node ids after\n                 * itself so we will not allow that\n                 */\n                 if (selectedNodeIds.length == 1) {\n                    alert('You are not allowed to insert the selected item after itself.');\n                 } else if (selectedNodeIds.length > 1) {\n                    alert('You are not allowed to insert the selected items after itself.');\n                 }\n            } else {\n                // move the nodes after the node id\n                this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n    \n                // save the project\n                this.ProjectService.saveProject();\n    \n                // turn off move mode\n                this.moveMode = false;\n    \n                // turn off insert mode\n                this.insertGroupMode = false;\n                this.insertNodeMode = false;\n    \n                // refresh the project\n                this.ProjectService.parseProject();\n                this.items = this.ProjectService.idToOrder;\n    \n                this.unselectAllItems();\n            }\n        } else if (this.copyMode) {\n            // We are in copy mode\n\n            // get the selected nodes\n            var selectedNodeIds = this.getSelectedItems();\n\n            // copy the nodes and put them after the node id\n            this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n\n            // save the project\n            this.ProjectService.saveProject();\n\n            // turn off copy mode\n            this.copyMode = false;\n\n            // turn off insert mode\n            this.insertGroupMode = false;\n            this.insertNodeMode = false;\n\n            // refresh the project\n            this.ProjectService.parseProject();\n            this.items = this.ProjectService.idToOrder;\n\n            this.unselectAllItems();\n        }\n    }\n\n    /**\n     * Turn on copy mode\n     */\n    copy() {\n\n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n\n                if (selectedItemTypes.length === 0) {\n                    // there are no selected items\n                    alert('Please select an item to copy.');\n                } else if (selectedItemTypes.length === 1 && selectedItemTypes[0] === 'node') {\n                    // turn on insert mode\n                    this.insertNodeMode = true;\n\n                    // turn on copy mode\n                    this.copyMode = true;\n                } else {\n                    alert('You cannot copy the item(s) at this time.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn on move mode\n     */\n    move() {\n    \n        // make sure there is at least one item selected\n        var selectedNodeIds = this.getSelectedItems();\n        \n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n            // get the nodes that were selected\n            var selectedItemTypes = this.getSelectedItemTypes();\n            \n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n            \n                if (selectedItemTypes.length == 0) {\n                    // there are no selected items\n                    alert('Please select an item to move.');\n                } else if (selectedItemTypes.length == 1) {\n                    // all the items the user selected are the same type\n                    \n                    if (selectedItemTypes[0] === 'group') {\n                        // turn on insert mode\n                        this.insertGroupMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    } else if (selectedItemTypes[0] === 'node') {\n                        // turn on insert mode\n                        this.insertNodeMode = true;\n            \n                        // turn on move mode\n                        this.moveMode = true;\n                    }\n                } else if (selectedItemTypes.length > 1) {\n                    /*\n                     * the items the user selected are different types but\n                     * we do not allow moving different types of items at\n                     * the same time\n                     */\n                    \n                    alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the selected nodes\n     */\n    delete() {\n    \n        // get the selected items\n        var selectedNodeIds = this.getSelectedItems();\n\n        if (selectedNodeIds != null) {\n        \n            var confirmMessage = null;\n        \n            if (selectedNodeIds.length == 1) {\n                // the user selected one item\n                confirmMessage = 'Are you sure you want to delete the selected item?';\n            } else if (selectedNodeIds.length > 1) {\n                // the user selected multiple items\n                confirmMessage = 'Are you sure you want to delete the selected items?';\n            }\n            \n            if (confirmMessage != null) {\n                // ask the user to confirm the delete\n                var answer = confirm(confirmMessage);\n        \n                if (answer) {\n                    // the user confirmed yes\n        \n                    // get the selected node ids\n                    var selectedNodeIds = this.getSelectedItems();\n        \n                    // flag that will be set if we have deleted the start node id\n                    var deletedStartNodeId = false;\n        \n                    // loop through each node id\n                    for (var n = 0; n < selectedNodeIds.length; n++) {\n                        var nodeId = selectedNodeIds[n];\n        \n                        if (this.ProjectService.isStartNodeId(nodeId)) {\n                            // we have deleted the start node id\n                            deletedStartNodeId = true;\n                        }\n        \n                        // delete the node\n                        this.ProjectService.deleteNode(nodeId);\n                    }\n                    \n                    // update start node id if necesary\n                    if (deletedStartNodeId) {\n                        this.updateStartNodeId();\n                    }\n        \n                    // save the project\n                    this.ProjectService.saveProject();\n        \n                    // refresh the project\n                    this.ProjectService.parseProject();\n                    this.items = this.ProjectService.idToOrder;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the selected items\n     * @returns an array of node ids that are selected\n     */\n    getSelectedItems() {\n\n        // an array to hold the node ids of the nodes that are selected\n        var selectedNodeIds = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                // this node is checked\n                selectedNodeIds.push(key);\n            }\n        }, selectedNodeIds);\n\n        return selectedNodeIds;\n    }\n    \n    /**\n     * Get the types of the selected items\n     * @returns an array of item types. possible items are group or node.\n     */\n    getSelectedItemTypes() {\n\n        var selectedItemTypes = [];\n\n        // loop through all the node checkboxes\n        angular.forEach(this.items, function(value, key) {\n            if (value.checked) {\n                \n                // this node is checked\n                var node = this.ProjectService.getNodeById(key);\n                \n                if (node != null) {\n                \n                    // get the node type\n                    var nodeType = node.type;\n                    \n                    if (selectedItemTypes.indexOf(nodeType) == -1) {\n                        // we have not seen this node type yet so we will add it\n                        selectedItemTypes.push(nodeType);\n                    }\n                }\n            }\n        }, this);\n\n        return selectedItemTypes;\n    }\n\n    /**\n     * Unselect all the items\n     */\n    unselectAllItems() {\n        angular.forEach(this.items, function(value, key) {\n            value.checked = false;\n        });\n    }\n    \n    /**\n     * Toggle the create group input\n     */\n    toggleCreateGroup() {\n        this.hideCreateNode();\n        this.showCreateGroup = !this.showCreateGroup;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateGroup() {\n        this.showCreateGroup = false;\n        this.createGroupTitle = '';\n    }\n    \n    /**\n     * Toggle the create node input\n     */\n    toggleCreateNode() {\n        this.hideCreateGroup();\n        this.showCreateNode = !this.showCreateNode;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Hide the create group input\n     */\n    hideCreateNode() {\n        this.showCreateNode = false;\n        this.createNodeTitle = '';\n    }\n    \n    /**\n     * Cancel the move mode\n     */\n    cancelMove() {\n        this.insertGroupMode = false;\n        this.insertNodeMode = false;\n    }\n    \n    /**\n     * Update the start node id by traversing start ids until a\n     * node id is found.\n     */\n    updateStartNodeId() {\n        \n        var newStartNodeId = null;\n        \n        // get the start group id\n        var startGroupId = this.ProjectService.getStartGroupId();\n        var node = this.ProjectService.getNodeById(startGroupId);\n        \n        var done = false;\n        \n        // recursively traverse the start ids\n        while(!done) {\n            \n            if (node == null) {\n                // base case in case something went wrong\n                done = true;\n            } else if (this.ProjectService.isGroupNode(node.id)) {\n                // the node is a group node so we will get its start node\n                node = this.ProjectService.getNodeById(node.startId);\n            } else if (this.ProjectService.isApplicationNode(node.id)) {\n                // the node is a step node so we have found the new start node id\n                newStartNodeId = node.id;\n                done = true;\n            } else {\n                // base case in case something went wrong\n                done = true;\n            }\n        }\n        \n        if (newStartNodeId) {\n            // set the new start node id\n            this.ProjectService.setStartNodeId(newStartNodeId);\n        }\n    }\n    \n    /**\n     * Check if the start node id for the project could potentially\n     * change.\n     */\n    checkPotentialStartNodeIdChange() {\n        return this.$q((resolve, reject) => {\n            // get the current start node id\n            var currentStartNodeId = this.ProjectService.getStartNodeId();\n\n            // get the first leaf node id\n            var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n\n            if (currentStartNodeId != firstLeafNodeId) {\n                /*\n                 * the node ids are different which means the first leaf node\n                 * id is different than the current start node id and that\n                 * the author may want to use the first leaf node id as the\n                 * new start node id\n                 */\n                var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\n\n                if (firstLeafNode != null) {\n                    var firstChildTitle = firstLeafNode.title;\n\n                    // ask the user if they would like to change the start step to the step that is now the first child in the group\n                    this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle }).then((confirmUpdateStartStep) => {\n                        var answer = confirm(confirmUpdateStartStep);\n\n                        if (answer) {\n                            // change the project start node id\n                            this.ProjectService.setStartNodeId(firstLeafNodeId);\n                            resolve();\n                        }\n                    });\n                }\n            } else {\n                resolve();\n            }\n        });\n    }\n};\n\nProjectController.$inject = ['$q', '$scope', '$state', '$stateParams', '$translate', 'ProjectService', 'ConfigService'];\n\nexport default ProjectController;\n"]}