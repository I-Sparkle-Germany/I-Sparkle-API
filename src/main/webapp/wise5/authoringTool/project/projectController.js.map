{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$anchorScroll","$filter","$interval","$mdDialog","$q","$rootScope","$scope","$state","$stateParams","$timeout","AuthorWebSocketService","ConfigService","ProjectService","TeacherDataService","UtilService","$translate","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","projectScriptFilename","getProjectScriptFilename","currentAuthorsMessage","projectMode","showImportView","importMode","editProjectRubricMode","advancedMode","showJSONAuthoring","metadata","getProjectMetadata","notifyAuthorProjectBegin","summernoteRubricId","summernoteRubricHTML","replaceAssetPaths","getProjectRubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","$on","event","args","currentAuthorsUsernames","myUserName","getMyUserName","splice","indexOf","length","currentAuthors","join","notifyAuthorProjectEnd","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","projectScriptFilenameChanged","hide","previewProjectURL","getConfigParam","window","open","go","commitMessage","saveProject","then","commitHistoryArray","commitHistory","val","error","alert","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","endCurrentNodeAndSetCurrentNodeByNodeId","newGroup","createGroup","createGroupTitle","nodeToAdd","insertGroupMode","createMode","newNode","createNode","createNodeTitle","insertNodeMode","createNodeInside","checkPotentialStartNodeIdChangeThenSaveProject","moveMode","selectedNodeIds","getSelectedItems","moveNodesInside","copyMode","copyNodesInside","performImport","createNodeAfter","moveNodesAfter","copyNodesAfter","nodeIdToInsertInsideOrAfter","selectedNodes","getSelectedNodesToImport","toProjectId","fromProjectId","importProjectId","copyNodes","parseProject","toggleView","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProject","showProjectHome","selectedItemTypes","getSelectedItemTypes","confirmMessage","answer","confirm","deletedStartNodeId","n","isStartNodeId","deleteNode","updateStartNodeId","angular","forEach","value","key","checked","push","i","inactiveNode","id","node","getNodeById","nodeType","type","createGroupTitleInput","getElementById","focus","createNodeTitleInput","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","currentStartNodeId","getStartNodeId","firstLeafNodeId","getFirstLeafNodeId","firstLeafNode","firstChildTitle","title","confirmUpdateStartStep","startStepTitle","checkPotentialStartNodeIdChange","unselectAllItems","setProjectTitle","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","projects","sharedProjects","authorableProjects","concat","sort","sortByProjectId","projectA","projectB","projectIdA","projectIdB","reverse","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","nodes","previewStepURL","item","projectJSONString","toJson","project","fromJson","setProject","html","removeAbsoluteAssetPaths","insertWISELinks","setProjectRubric","isNodeInAnyBranchPath","setProjectScriptFilename","params","popup","$broadcast","view","setCurrentNode","$inject"],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\r\n\r\nclass ProjectController {\r\n\r\n    constructor($anchorScroll,\r\n                $filter,\r\n                $interval,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                $state,\r\n                $stateParams,\r\n                $timeout,\r\n                AuthorWebSocketService,\r\n                ConfigService,\r\n                ProjectService,\r\n                TeacherDataService,\r\n                UtilService) {\r\n        this.$anchorScroll = $anchorScroll;\r\n        this.$filter = $filter;\r\n        this.$interval = $interval;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.$stateParams = $stateParams;\r\n        this.$timeout = $timeout;\r\n        this.$translate = this.$filter('translate');\r\n        this.AuthorWebSocketService = AuthorWebSocketService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.projectId = this.$stateParams.projectId;\r\n        this.runId = this.ConfigService.getRunId();\r\n        this.items = this.ProjectService.idToOrder;\r\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\r\n        this.showCreateGroup = false;\r\n        this.showCreateNode = false;\r\n        this.projectTitle = this.ProjectService.getProjectTitle();\r\n        this.inactiveGroups = this.ProjectService.getInactiveGroups();\r\n        this.inactiveNodes = this.ProjectService.getInactiveNodes();\r\n        this.projectScriptFilename = this.ProjectService.getProjectScriptFilename();\r\n        this.currentAuthorsMessage = \"\";  // show a message when there is more than one author currently authoring this project\r\n\r\n        this.projectMode = true;\r\n        this.showCreateGroup = false;\r\n        this.showCreateNode = false;\r\n        this.showImportView = false;\r\n        this.importMode = false;\r\n        this.editProjectRubricMode = false;\r\n        this.advancedMode = false;\r\n        this.showJSONAuthoring = false;\r\n\r\n        // process metadata\r\n        this.metadata = this.ProjectService.getProjectMetadata();\r\n\r\n        // notify others that this project is being authored\r\n        this.ProjectService.notifyAuthorProjectBegin(this.projectId);\r\n\r\n        // generate the summernote rubric element id\r\n        this.summernoteRubricId = 'summernoteRubric_' + this.projectId;\r\n\r\n        // set the project rubric into the summernote rubric\r\n        this.summernoteRubricHTML = this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\r\n\r\n        // the tooltip text for the insert WISE asset button\r\n        var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n        /*\r\n         * create the custom button for inserting WISE assets into\r\n         * summernote\r\n         */\r\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, this.projectId, null, null, 'rubric', insertAssetString);\r\n\r\n        /*\r\n         * the options that specifies the tools to display in the\r\n         * summernote prompt\r\n         */\r\n        this.summernoteRubricOptions = {\r\n            toolbar: [\r\n                ['style', ['style']],\r\n                ['font', ['bold', 'underline', 'clear']],\r\n                ['fontname', ['fontname']],\r\n                ['fontsize', ['fontsize']],\r\n                ['color', ['color']],\r\n                ['para', ['ul', 'ol', 'paragraph']],\r\n                ['table', ['table']],\r\n                ['insert', ['link', 'video']],\r\n                ['view', ['fullscreen', 'codeview', 'help']],\r\n                ['customButton', ['insertAssetButton']]\r\n            ],\r\n            height: 300,\r\n            disableDragAndDrop: true,\r\n            buttons: {\r\n                insertAssetButton: InsertAssetButton\r\n            }\r\n        };\r\n\r\n        this.$scope.$on('currentAuthorsReceived', (event, args) => {\r\n            let currentAuthorsUsernames = args.currentAuthorsUsernames;\r\n            // get the user name of the signed in user\r\n            var myUserName = this.ConfigService.getMyUserName();\r\n            // remove my username from the currentAuthors\r\n            currentAuthorsUsernames.splice(currentAuthorsUsernames.indexOf(myUserName),1);\r\n            if (currentAuthorsUsernames.length > 0) {\r\n                this.currentAuthorsMessage = this.$translate('concurrentAuthorsWarning', { currentAuthors: currentAuthorsUsernames.join(\", \") });\r\n            } else {\r\n                this.currentAuthorsMessage = \"\";\r\n            }\r\n        });\r\n\r\n        this.$scope.$on(\"$destroy\", () => {\r\n            // notify others that this project is no longer being authored\r\n            this.ProjectService.notifyAuthorProjectEnd(this.projectId);\r\n        });\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.projectId == this.projectId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.projectId;\r\n\r\n                                if (summernoteId != '') {\r\n                                    if (this.UtilService.isImage(fileName)) {\r\n                                        /*\r\n                                         * move the cursor back to its position when the asset chooser\r\n                                         * popup was clicked\r\n                                         */\r\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                        $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                        // add the image html\r\n                                        $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                    } else if (this.UtilService.isVideo(fileName)) {\r\n                                        /*\r\n                                         * move the cursor back to its position when the asset chooser\r\n                                         * popup was clicked\r\n                                         */\r\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                        $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                        // insert the video element\r\n                                        var videoElement = document.createElement('video');\r\n                                        videoElement.controls = 'true';\r\n                                        videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                        $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                    }\r\n                                }\r\n                            } else if (args.target == 'scriptFilename') {\r\n                                // the target is the project script filename\r\n                                this.projectScriptFilename = fileName;\r\n                                this.projectScriptFilenameChanged();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Launch the project in preview mode\r\n     */\r\n    previewProject() {\r\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\r\n        window.open(previewProjectURL);\r\n    };\r\n\r\n    /**\r\n     * Launch the project in preview mode without constraints\r\n     */\r\n    previewProjectWithoutConstraints() {\r\n        let previewProjectURL = this.ConfigService.getConfigParam(\"previewProjectURL\");\r\n        previewProjectURL = previewProjectURL + '?constraints=false';\r\n        window.open(previewProjectURL);\r\n    };\r\n\r\n    viewProjectAssets() {\r\n        this.$state.go('root.project.asset', {projectId:this.projectId});\r\n    };\r\n\r\n    viewProjectHistory() {\r\n        this.$state.go('root.project.history', {projectId:this.projectId});\r\n    };\r\n\r\n    viewNotebookSettings() {\r\n        this.$state.go('root.project.notebook', {projectId:this.projectId});\r\n    }\r\n\r\n    saveProject() {\r\n        //let projectJSONString = JSON.stringify(this.project, null, 4);\r\n        //let commitMessage = $(\"#commitMessageInput\").val();\r\n        let commitMessage = \"Made changes to Project.\";\r\n        try {\r\n            // if projectJSONString is bad json, it will throw an exception and not save.\r\n            //this.ProjectService.project = this.project;\r\n\r\n            this.ProjectService.saveProject(commitMessage).then((commitHistoryArray) => {\r\n                this.commitHistory = commitHistoryArray;\r\n                $(\"#commitMessageInput\").val(\"\");  // clear field after commit\r\n            });\r\n        } catch (error) {\r\n            alert(\"Invalid JSON. Please check syntax. Aborting save.\");\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Close authoring for the current project and bring user back to main AT page\r\n     */\r\n    closeProject() {\r\n        this.$state.go('root.main');\r\n    };\r\n\r\n    /**\r\n     * Get the node position\r\n     * @param nodeId the node id\r\n     * @returns the node position\r\n     */\r\n    getNodePositionById(nodeId) {\r\n        return this.ProjectService.getNodePositionById(nodeId);\r\n    };\r\n\r\n    /**\r\n     * The the components in the specified node id.\r\n     * @param nodeId the node id\r\n     * @returns components in the node\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        return this.ProjectService.getComponentsByNodeId(nodeId);\r\n    }\r\n\r\n    /**\r\n     * Returns a list of possible criteria for the specified node and component\r\n     * @param nodeId the node id\r\n     * @param componentId the component id in the node\r\n     */\r\n    getPossibleTransitionCriteria(nodeId, componentId) {\r\n        return this.ProjectService.getPossibleTransitionCriteria(nodeId, componentId);\r\n    }\r\n\r\n    /**\r\n     * Get the node title for a node\r\n     * @param nodeId the node id\r\n     * @returns the node title\r\n     */\r\n    getNodeTitleByNodeId(nodeId) {\r\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\r\n    };\r\n\r\n    /**\r\n     * Check if a node id is for a group\r\n     * @param nodeId\r\n     * @returns whether the node is a group node\r\n     */\r\n    isGroupNode(nodeId) {\r\n        return this.ProjectService.isGroupNode(nodeId);\r\n    };\r\n\r\n    /**\r\n     * A node was clicked so we will go to the node authoring view\r\n     * @param nodeId\r\n     */\r\n    nodeClicked(nodeId) {\r\n        this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\r\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nodeId});\r\n    };\r\n\r\n    /**\r\n     * Create a new group (activity)\r\n     */\r\n    createGroup() {\r\n\r\n        // create a new group\r\n        var newGroup = this.ProjectService.createGroup(this.createGroupTitle);\r\n\r\n        /*\r\n         * set the group into this variable to hold it temporarily while the\r\n         * author decides where to place it\r\n         */\r\n        this.nodeToAdd = newGroup;\r\n\r\n        // turn off the create group div\r\n        this.showCreateGroup = false;\r\n\r\n        // clear the title from the create group div\r\n        this.createGroupTitle = '';\r\n\r\n        // turn on insert mode\r\n        this.insertGroupMode = true;\r\n\r\n        // turn on create mode\r\n        this.createMode = true;\r\n    }\r\n\r\n    /**\r\n     * Create a new node (step)\r\n     */\r\n    createNode() {\r\n\r\n        // create a new node\r\n        var newNode = this.ProjectService.createNode(this.createNodeTitle);\r\n\r\n        /*\r\n         * set the node into this variable to hold it temporarily while the\r\n         * author decides where to place it\r\n         */\r\n        this.nodeToAdd = newNode;\r\n\r\n        // turn off the create node div\r\n        this.showCreateNode = false;\r\n\r\n        // clear the title from the create node div\r\n        this.createNodeTitle = '';\r\n\r\n        // turn on insert mode\r\n        this.insertNodeMode = true;\r\n\r\n        // turn on create mode\r\n        this.createMode = true;\r\n    }\r\n\r\n    /**\r\n     * Insert the node(s) inside\r\n     * @param nodeId the node id of the group that we will insert into\r\n     */\r\n    insertInside(nodeId) {\r\n\r\n        // TODO check that we are inserting into a group\r\n\r\n        if (this.createMode) {\r\n            // we are in create mode\r\n\r\n            // create the node inside the group\r\n            this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\r\n\r\n            /*\r\n             * clear this variable that we used to hold the node we inserted.\r\n             * since we have inserted the node we don't need a handle to it\r\n             * anymore\r\n             */\r\n            this.nodeToAdd = null;\r\n\r\n            // turn off create mode\r\n            this.createMode = false;\r\n\r\n            // turn off insert mode\r\n            this.insertGroupMode = false;\r\n            this.insertNodeMode = false;\r\n\r\n            // save and refresh the project\r\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n        } else if (this.moveMode) {\r\n            // we are in move mode\r\n\r\n            // get the nodes that were selected\r\n            let selectedNodeIds = this.getSelectedItems();\r\n\r\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\r\n                /*\r\n                 * the user is trying to insert the selected node ids into\r\n                 * itself so we will not allow that\r\n                 */\r\n                if (selectedNodeIds.length == 1) {\r\n                    alert('You are not allowed to insert the selected item into itself.');\r\n                } else if (selectedNodeIds.length > 1) {\r\n                    alert('You are not allowed to insert the selected items into itself.');\r\n                }\r\n            } else {\r\n                // move the nodes into the group\r\n                this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\r\n\r\n                // turn off move mode\r\n                this.moveMode = false;\r\n\r\n                // turn off insert mode\r\n                this.insertGroupMode = false;\r\n                this.insertNodeMode = false;\r\n            }\r\n\r\n            // save and refresh the project\r\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n        } else if (this.copyMode) {\r\n            // We are in copy mode\r\n\r\n            // get the nodes that were selected\r\n            let selectedNodeIds = this.getSelectedItems();\r\n\r\n            // copy the nodes into the group\r\n            this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\r\n\r\n            // turn off copy mode\r\n            this.copyMode = false;\r\n\r\n            // turn off insert mode\r\n            this.insertGroupMode = false;\r\n            this.insertNodeMode = false;\r\n\r\n            // save and refresh the project\r\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n        } else if (this.importMode) {\r\n            // we are in import mode\r\n\r\n            // import the selected nodes and place them inside the given group\r\n            this.performImport(nodeId).then(() => {\r\n                // save and refresh the project\r\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert the node(s) after\r\n     * @param nodeId the node id of the node we will insert after\r\n     */\r\n    insertAfter(nodeId) {\r\n\r\n        if (this.createMode) {\r\n            // we are in create mode\r\n\r\n            // create the node after the node id\r\n            this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\r\n\r\n            /*\r\n             * clear this variable that we used to hold the node we inserted.\r\n             * since we have inserted the node we don't need a handle to it\r\n             * anymore\r\n             */\r\n            this.nodeToAdd = null;\r\n\r\n            // turn off create mode\r\n            this.createMode = false;\r\n\r\n            // turn off insert mode\r\n            this.insertGroupMode = false;\r\n            this.insertNodeMode = false;\r\n\r\n            // save and referesh the project\r\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n        } else if (this.moveMode) {\r\n            // we are in move mode\r\n\r\n            // get the selected nodes\r\n            let selectedNodeIds = this.getSelectedItems();\r\n\r\n            if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\r\n                /*\r\n                 * the user is trying to insert the selected node ids after\r\n                 * itself so we will not allow that\r\n                 */\r\n                if (selectedNodeIds.length == 1) {\r\n                    alert('You are not allowed to insert the selected item after itself.');\r\n                } else if (selectedNodeIds.length > 1) {\r\n                    alert('You are not allowed to insert the selected items after itself.');\r\n                }\r\n            } else {\r\n                // move the nodes after the node id\r\n                this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\r\n\r\n                // turn off move mode\r\n                this.moveMode = false;\r\n\r\n                // turn off insert mode\r\n                this.insertGroupMode = false;\r\n                this.insertNodeMode = false;\r\n\r\n                // save and refresh the project\r\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n            }\r\n        } else if (this.copyMode) {\r\n            // We are in copy mode\r\n\r\n            // get the selected nodes\r\n            let selectedNodeIds = this.getSelectedItems();\r\n\r\n            // copy the nodes and put them after the node id\r\n            this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\r\n\r\n            // turn off copy mode\r\n            this.copyMode = false;\r\n\r\n            // turn off insert mode\r\n            this.insertGroupMode = false;\r\n            this.insertNodeMode = false;\r\n\r\n            // save and refresh the project\r\n            this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n        } else if (this.importMode) {\r\n            // we are in import mode\r\n\r\n            // import the selected nodes and place them after the given step\r\n            this.performImport(nodeId).then(() => {\r\n                // save and refresh the project\r\n                this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import the step and place it in the chosen location\r\n     * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\r\n     * new step the first step in the group. If this is a step, we will place\r\n     * the new step after it.\r\n     */\r\n    performImport(nodeIdToInsertInsideOrAfter) {\r\n\r\n        var selectedNodes = this.getSelectedNodesToImport();\r\n\r\n        // get the project id we are importing into\r\n        var toProjectId = this.ConfigService.getConfigParam('projectId');\r\n\r\n        // get the project id we are importing from\r\n        var fromProjectId = this.importProjectId;\r\n\r\n        // copy the nodes into the project\r\n        return this.ProjectService.copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter).then(() => {\r\n\r\n            // save the project\r\n            this.ProjectService.saveProject();\r\n\r\n            // refresh the project\r\n            this.ProjectService.parseProject();\r\n            this.items = this.ProjectService.idToOrder;\r\n\r\n            // turn off the insert node mode\r\n            this.insertNodeMode = false;\r\n\r\n            // go back to the project view\r\n            this.toggleView('project');\r\n\r\n            // clear the import fields\r\n            this.importProjectIdToOrder = {};\r\n            this.importProjectItems = [];\r\n            this.importMyProjectId = null;\r\n            this.importLibraryProjectId = null;\r\n            this.importProjectId = null;\r\n            this.importProject = null;\r\n\r\n            // go back to the project view\r\n            this.showProjectHome();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Turn on copy mode\r\n     */\r\n    copy() {\r\n\r\n        // make sure there is at least one item selected\r\n        var selectedNodeIds = this.getSelectedItems();\r\n\r\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\r\n            // get the nodes that were selected\r\n            var selectedItemTypes = this.getSelectedItemTypes();\r\n\r\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\r\n\r\n                if (selectedItemTypes.length === 0) {\r\n                    // there are no selected items\r\n                    alert('Please select an item to copy.');\r\n                } else if (selectedItemTypes.length === 1 && selectedItemTypes[0] === 'node') {\r\n                    // turn on insert mode\r\n                    this.insertNodeMode = true;\r\n\r\n                    // turn on copy mode\r\n                    this.copyMode = true;\r\n                } else {\r\n                    alert('You cannot copy the item(s) at this time.');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn on move mode\r\n     */\r\n    move() {\r\n\r\n        // make sure there is at least one item selected\r\n        var selectedNodeIds = this.getSelectedItems();\r\n\r\n        if (selectedNodeIds != null && selectedNodeIds.length > 0) {\r\n            // get the nodes that were selected\r\n            var selectedItemTypes = this.getSelectedItemTypes();\r\n\r\n            if (selectedItemTypes != null && selectedItemTypes.length > 0) {\r\n\r\n                if (selectedItemTypes.length == 0) {\r\n                    // there are no selected items\r\n                    alert('Please select an item to move.');\r\n                } else if (selectedItemTypes.length == 1) {\r\n                    // all the items the user selected are the same type\r\n\r\n                    if (selectedItemTypes[0] === 'group') {\r\n                        // turn on insert mode\r\n                        this.insertGroupMode = true;\r\n\r\n                        // turn on move mode\r\n                        this.moveMode = true;\r\n                    } else if (selectedItemTypes[0] === 'node') {\r\n                        // turn on insert mode\r\n                        this.insertNodeMode = true;\r\n\r\n                        // turn on move mode\r\n                        this.moveMode = true;\r\n                    }\r\n                } else if (selectedItemTypes.length > 1) {\r\n                    /*\r\n                     * the items the user selected are different types but\r\n                     * we do not allow moving different types of items at\r\n                     * the same time\r\n                     */\r\n\r\n                    alert('If you want to move multiple items at once, they must be of the same type. Please select only activities or only steps.');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the selected nodes\r\n     */\r\n    delete() {\r\n\r\n        // get the selected items\r\n        let selectedNodeIds = this.getSelectedItems();\r\n\r\n        if (selectedNodeIds != null) {\r\n\r\n            var confirmMessage = null;\r\n\r\n            if (selectedNodeIds.length == 1) {\r\n                // the user selected one item\r\n                confirmMessage = 'Are you sure you want to delete the selected item?';\r\n            } else if (selectedNodeIds.length > 1) {\r\n                // the user selected multiple items\r\n                confirmMessage = 'Are you sure you want to delete the ' + selectedNodeIds.length + ' selected items?';\r\n            }\r\n\r\n            if (confirmMessage != null) {\r\n                // ask the user to confirm the delete\r\n                var answer = confirm(confirmMessage);\r\n\r\n                if (answer) {\r\n                    // the user confirmed yes\r\n\r\n                    // flag that will be set if we have deleted the start node id\r\n                    var deletedStartNodeId = false;\r\n\r\n                    // loop through each node id\r\n                    for (var n = 0; n < selectedNodeIds.length; n++) {\r\n                        var nodeId = selectedNodeIds[n];\r\n\r\n                        if (this.ProjectService.isStartNodeId(nodeId)) {\r\n                            // we have deleted the start node id\r\n                            deletedStartNodeId = true;\r\n                        }\r\n\r\n                        // delete the node\r\n                        this.ProjectService.deleteNode(nodeId);\r\n                    }\r\n\r\n                    // update start node id if necesary\r\n                    if (deletedStartNodeId) {\r\n                        this.updateStartNodeId();\r\n                    }\r\n\r\n                    // save the project\r\n                    this.ProjectService.saveProject();\r\n\r\n                    // refresh the project\r\n                    this.ProjectService.parseProject();\r\n                    this.items = this.ProjectService.idToOrder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the selected items\r\n     * @returns an array of node ids that are selected\r\n     */\r\n    getSelectedItems() {\r\n\r\n        // an array to hold the node ids of the nodes that are selected\r\n        var selectedNodeIds = [];\r\n\r\n        // loop through all the node checkboxes\r\n        angular.forEach(this.items, function(value, key) {\r\n            if (value.checked) {\r\n                // this node is checked\r\n                selectedNodeIds.push(key);\r\n            }\r\n        }, selectedNodeIds);\r\n\r\n        if (this.inactiveNodes != null) {\r\n\r\n            // loop through all the inactive nodes\r\n            for (var i = 0; i < this.inactiveNodes.length; i++) {\r\n                var inactiveNode = this.inactiveNodes[i];\r\n\r\n                if (inactiveNode != null) {\r\n                    if (inactiveNode.checked) {\r\n                        // the inactive node was checked so we will add it\r\n                        selectedNodeIds.push(inactiveNode.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return selectedNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the types of the selected items\r\n     * @returns an array of item types. possible items are group or node.\r\n     */\r\n    getSelectedItemTypes() {\r\n\r\n        var selectedItemTypes = [];\r\n\r\n        // loop through all the node checkboxes\r\n        angular.forEach(this.items, function(value, key) {\r\n            if (value.checked) {\r\n\r\n                // this node is checked\r\n                var node = this.ProjectService.getNodeById(key);\r\n\r\n                if (node != null) {\r\n\r\n                    // get the node type\r\n                    var nodeType = node.type;\r\n\r\n                    if (selectedItemTypes.indexOf(nodeType) == -1) {\r\n                        // we have not seen this node type yet so we will add it\r\n                        selectedItemTypes.push(nodeType);\r\n                    }\r\n                }\r\n            }\r\n        }, this);\r\n\r\n        var inactiveNodes = this.inactiveNodes;\r\n\r\n        if (inactiveNodes != null) {\r\n\r\n            // loop through all the inactive nodes\r\n            for (var i = 0; i < inactiveNodes.length; i++) {\r\n                var inactiveNode = inactiveNodes[i];\r\n\r\n                if (inactiveNode != null) {\r\n                    if (inactiveNode.checked) {\r\n                        // the node was checked\r\n\r\n                        // get the node type\r\n                        var nodeType = inactiveNode.type;\r\n\r\n                        if (selectedItemTypes.indexOf(nodeType) == -1) {\r\n                            // we have not seen this node type yet so we will add it\r\n                            selectedItemTypes.push(nodeType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return selectedItemTypes;\r\n    }\r\n\r\n    /**\r\n     * Unselect all the items\r\n     */\r\n    unselectAllItems() {\r\n        angular.forEach(this.items, function(value, key) {\r\n            value.checked = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show the create group input\r\n     */\r\n    creatNewActivityClicked() {\r\n\r\n        // clear the create group title\r\n        this.createGroupTitle = '';\r\n\r\n        // show the create group view\r\n        this.toggleView('createGroup');\r\n\r\n        if (this.showCreateGroup) {\r\n            /*\r\n             * we are showing the create node view so we will give focus to the\r\n             * createGroupTitle input element\r\n             */\r\n            this.$timeout(() => {\r\n                var createGroupTitleInput = document.getElementById('createGroupTitle');\r\n\r\n                if (createGroupTitleInput != null) {\r\n                    createGroupTitleInput.focus();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle the create node input\r\n     */\r\n    createNewStepClicked() {\r\n\r\n        // clear the create node title\r\n        this.createNodeTitle = '';\r\n\r\n        // show the create node view\r\n        this.toggleView('createNode');\r\n\r\n        if (this.showCreateNode) {\r\n            /*\r\n             * we are showing the create node view so we will give focus to the\r\n             * createNodeTitle input element\r\n             */\r\n            this.$timeout(() => {\r\n                var createNodeTitleInput = document.getElementById('createNodeTitle');\r\n\r\n                if (createNodeTitleInput != null) {\r\n                    createNodeTitleInput.focus();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel the move mode\r\n     */\r\n    cancelMove() {\r\n        this.insertGroupMode = false;\r\n        this.insertNodeMode = false;\r\n    }\r\n\r\n    /**\r\n     * Update the start node id by traversing start ids until a\r\n     * node id is found.\r\n     */\r\n    updateStartNodeId() {\r\n\r\n        var newStartNodeId = null;\r\n\r\n        // get the start group id\r\n        var startGroupId = this.ProjectService.getStartGroupId();\r\n        var node = this.ProjectService.getNodeById(startGroupId);\r\n\r\n        var done = false;\r\n\r\n        // recursively traverse the start ids\r\n        while(!done) {\r\n\r\n            if (node == null) {\r\n                // base case in case something went wrong\r\n                done = true;\r\n            } else if (this.ProjectService.isGroupNode(node.id)) {\r\n                // the node is a group node so we will get its start node\r\n                node = this.ProjectService.getNodeById(node.startId);\r\n            } else if (this.ProjectService.isApplicationNode(node.id)) {\r\n                // the node is a step node so we have found the new start node id\r\n                newStartNodeId = node.id;\r\n                done = true;\r\n            } else {\r\n                // base case in case something went wrong\r\n                done = true;\r\n            }\r\n        }\r\n\r\n        if (newStartNodeId) {\r\n            // set the new start node id\r\n            this.ProjectService.setStartNodeId(newStartNodeId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the start node id for the project could potentially\r\n     * change.\r\n     */\r\n    checkPotentialStartNodeIdChange() {\r\n        return this.$q((resolve, reject) => {\r\n            // get the current start node id\r\n            var currentStartNodeId = this.ProjectService.getStartNodeId();\r\n\r\n            // get the first leaf node id\r\n            var firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\r\n\r\n            if (firstLeafNodeId == null) {\r\n                // there are no steps in the project\r\n\r\n                // set the start node id to empty string\r\n                this.ProjectService.setStartNodeId('');\r\n\r\n                resolve();\r\n            } else {\r\n                // we have found a leaf node\r\n\r\n                if (currentStartNodeId != firstLeafNodeId) {\r\n                    /*\r\n                     * the node ids are different which means the first leaf node\r\n                     * id is different than the current start node id and that\r\n                     * the author may want to use the first leaf node id as the\r\n                     * new start node id\r\n                     */\r\n                    var firstLeafNode = this.ProjectService.getNodeById(firstLeafNodeId);\r\n\r\n                    if (firstLeafNode != null) {\r\n                        var firstChildTitle = firstLeafNode.title;\r\n\r\n                        // ask the user if they would like to change the start step to the step that is now the first child in the group\r\n                        var confirmUpdateStartStep = this.$translate('confirmUpdateStartStep', { startStepTitle: firstChildTitle });\r\n\r\n                        var answer = confirm(confirmUpdateStartStep);\r\n\r\n                        if (answer) {\r\n                            // change the project start node id\r\n                            this.ProjectService.setStartNodeId(firstLeafNodeId);\r\n                            resolve();\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the start node id has changed and then save the project\r\n     */\r\n    checkPotentialStartNodeIdChangeThenSaveProject() {\r\n        // check if the project start node id should be changed\r\n        this.checkPotentialStartNodeIdChange().then(() => {\r\n            // save the project\r\n            this.ProjectService.saveProject();\r\n\r\n            // refresh the project\r\n            this.ProjectService.parseProject();\r\n            this.items = this.ProjectService.idToOrder;\r\n\r\n            this.unselectAllItems();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The project title changed so we will update the project title in the\r\n     * project service\r\n     */\r\n    projectTitleChanged() {\r\n\r\n        // update the project title in the project service\r\n        this.ProjectService.setProjectTitle(this.projectTitle);\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Toggle the import view and load the project drop downs if necessary\r\n     */\r\n    importStepClicked() {\r\n\r\n        // show the import step view\r\n        this.toggleView('importStep');\r\n\r\n        if (this.importMode) {\r\n            if (this.myProjectsList == null) {\r\n                // populate the authorable projects drop down\r\n                this.getAuthorableProjects();\r\n            }\r\n\r\n            if (this.libraryProjectsList == null) {\r\n                // populate the library projects drop down\r\n                this.getLibraryProjects();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the authorable projects\r\n     */\r\n    getAuthorableProjects() {\r\n\r\n        // get the projects this teacher owns\r\n        var projects = this.ConfigService.getConfigParam('projects');\r\n\r\n        // get the projects that were shared with the teacher\r\n        var sharedProjects = this.ConfigService.getConfigParam('sharedProjects');\r\n\r\n        var authorableProjects = [];\r\n\r\n        if (projects != null) {\r\n            // add the owned projects\r\n            authorableProjects = authorableProjects.concat(projects);\r\n        }\r\n\r\n        if (sharedProjects != null) {\r\n            // add the shared projects\r\n            authorableProjects = authorableProjects.concat(sharedProjects);\r\n        }\r\n\r\n        // sort the projects by descending id\r\n        authorableProjects.sort(this.sortByProjectId);\r\n\r\n        this.myProjectsList = authorableProjects;\r\n    }\r\n\r\n    /**\r\n     * Sort the objects by descending id.\r\n     * @param projectA an object with an id field\r\n     * @param projectB an object with an id field\r\n     * @return 1 if projectA comes before projectB\r\n     * -1 if projectA comes after projectB\r\n     * 0 if they are the same\r\n     */\r\n    sortByProjectId(projectA, projectB) {\r\n        var projectIdA = projectA.id;\r\n        var projectIdB = projectB.id;\r\n\r\n        if (projectIdA < projectIdB) {\r\n            return 1;\r\n        } else if (projectIdA > projectIdB) {\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the library projects\r\n     */\r\n    getLibraryProjects() {\r\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\r\n\r\n            if (libraryProjectsList != null) {\r\n\r\n                // reverse the list so that it is ordered by descending id\r\n                libraryProjectsList.reverse();\r\n\r\n                this.libraryProjectsList = libraryProjectsList;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The author has chosen an authorable project to import from\r\n     * @param importProjectId the project id to import from\r\n     */\r\n    showMyImportProject(importProjectId) {\r\n\r\n        // clear the select drop down for the library project\r\n        this.importLibraryProjectId = null;\r\n\r\n        // show the import project\r\n        this.showImportProject(importProjectId);\r\n    }\r\n\r\n    /**\r\n     * The author has chosen a library project to import from\r\n     * @param importProjectId the project id to import from\r\n     */\r\n    showLibraryImportProject(importProjectId) {\r\n        this.importMyProjectId = null;\r\n\r\n        // show the import project\r\n        this.showImportProject(importProjectId);\r\n    }\r\n\r\n    /**\r\n     * Show the project we want to import steps from\r\n     * @param importProjectId the import project id\r\n     */\r\n    showImportProject(importProjectId) {\r\n\r\n        this.importProjectId = importProjectId;\r\n\r\n        if (this.importProjectId == null) {\r\n            // clear all the import project values\r\n            this.importProjectIdToOrder = {};\r\n            this.importProjectItems = [];\r\n            this.importMyProjectId = null;\r\n            this.importLibraryProjectId = null;\r\n            this.importProjectId = null;\r\n            this.importProject = null;\r\n        } else {\r\n            // get the import project\r\n            this.ProjectService.retrieveProjectById(this.importProjectId).then((projectJSON) => {\r\n\r\n                // create the mapping of node id to order for the import project\r\n                this.importProjectIdToOrder = {};\r\n                this.importProject = projectJSON;\r\n\r\n                // calculate the node order of the import project\r\n                var result = this.ProjectService.getNodeOrderOfProject(this.importProject);\r\n                this.importProjectIdToOrder = result.idToOrder;\r\n                this.importProjectItems = result.nodes;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Preview the import project\r\n     */\r\n    previewImportProject() {\r\n\r\n        if (this.importProject != null) {\r\n            // get the preview project url for the import project\r\n            var previewProjectURL = this.importProject.previewProjectURL;\r\n\r\n            // open the preview step in a new tab\r\n            window.open(previewProjectURL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Preview the step\r\n     * @param node\r\n     */\r\n    previewImportNode(node) {\r\n\r\n        if (node != null) {\r\n\r\n            // get the node id\r\n            var nodeId = node.id;\r\n\r\n            // get the preview project url for the import project\r\n            var previewProjectURL = this.importProject.previewProjectURL;\r\n\r\n            // create the url to preview the step\r\n            var previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\r\n\r\n            // open the preview step in a new tab\r\n            window.open(previewStepURL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import the selected steps\r\n     */\r\n    importSteps() {\r\n\r\n        // get the nodes that were selected\r\n        var selectedNodes = this.getSelectedNodesToImport();\r\n\r\n        if (selectedNodes == null || selectedNodes.length == 0) {\r\n            // the author did not select any steps to import\r\n            alert('Please select a step to import.');\r\n        } else {\r\n\r\n            /*\r\n             * hide the import view because we want to go back to the\r\n             * project view so that the author can choose where to place\r\n             * the new steps\r\n             */\r\n            this.showImportView = false;\r\n            this.insertNodeMode = true;\r\n            this.projectMode = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the selected nodes to import\r\n     * @return an array of selected nodes\r\n     */\r\n    getSelectedNodesToImport() {\r\n        var selectedNodes = [];\r\n\r\n        // loop through all the import project items\r\n        for (var n = 0; n < this.importProjectItems.length; n++) {\r\n            var item = this.importProjectItems[n];\r\n\r\n            if (item.checked) {\r\n                /*\r\n                 * this item is checked so we will add it to the array of nodes\r\n                 * that we will import\r\n                 */\r\n                selectedNodes.push(item.node);\r\n            }\r\n        }\r\n\r\n        return selectedNodes;\r\n    }\r\n\r\n    /**\r\n     * Show the view to edit the project rubric\r\n     */\r\n    editProjectRubricClicked() {\r\n\r\n        // show the edit rubric view\r\n        this.toggleView('rubric');\r\n    }\r\n\r\n    /**\r\n     * Show the advanced view\r\n     */\r\n    advancedClicked() {\r\n\r\n        // show the advanced authoring view\r\n        this.toggleView('advanced');\r\n    }\r\n\r\n    /**\r\n     * The show JSON button was clicked\r\n     */\r\n    showJSONClicked() {\r\n        this.showJSONAuthoring = !this.showJSONAuthoring;\r\n\r\n        if (this.showJSONAuthoring) {\r\n            this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the project JSON string to the server\r\n     */\r\n    saveProjectJSONString() {\r\n        // create the project object from the project JSON string\r\n        let project = angular.fromJson(this.projectJSONString);\r\n        this.ProjectService.setProject(project);\r\n\r\n        // save and refresh the project\r\n        this.checkPotentialStartNodeIdChangeThenSaveProject();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the project rubric\r\n        this.ProjectService.setProjectRubric(html);\r\n\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Check if the node is in any branch path\r\n     * @param nodeId the node id of the node\r\n     * @return whether the node is in any branch path\r\n     */\r\n    isNodeInAnyBranchPath(nodeId) {\r\n        return this.ProjectService.isNodeInAnyBranchPath(nodeId);\r\n    }\r\n\r\n    /**\r\n     * The project script file name changed\r\n     */\r\n    projectScriptFilenameChanged() {\r\n        // update the project script file name in the project service\r\n        this.ProjectService.setProjectScriptFilename(this.projectScriptFilename);\r\n\r\n        if (this.showJSONAuthoring) {\r\n            /*\r\n             * we are showing the project JSON authoring so we need to update\r\n             * the JSON string that we are showing in the textarea\r\n             */\r\n            this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\r\n        }\r\n\r\n        // save the project\r\n        this.ProjectService.saveProject();\r\n    }\r\n\r\n    /**\r\n     * Show the asset popup to allow the author to choose an image for the\r\n     * project script filename\r\n     */\r\n    chooseProjectScriptFilename() {\r\n        // generate the parameters\r\n        var params = {};\r\n        params.popup = true;\r\n        params.projectId = this.projectId;\r\n        params.target = 'scriptFilename';\r\n\r\n        // display the asset chooser\r\n        this.$rootScope.$broadcast('openAssetChooser', params);\r\n    }\r\n\r\n    /**\r\n     * Show the appropriate authoring view\r\n     * @param view the view to show\r\n     */\r\n    toggleView(view) {\r\n\r\n        // clear the input element for creating a new activity\r\n        this.createGroupTitle = '';\r\n\r\n        // clear the input element for creating a new step\r\n        this.createNodeTitle = '';\r\n\r\n        if (view == 'project') {\r\n            // we are showing the regular project view\r\n            this.showCreateGroup = false;\r\n            this.showCreateNode = false;\r\n            this.importMode = false;\r\n            this.showImportView = false;\r\n            this.editProjectRubricMode = false;\r\n            this.advancedMode = false;\r\n            this.showJSONAuthoring = false;\r\n            this.projectMode = true;\r\n        } else if (view == 'createGroup') {\r\n            // toggle the create activity view\r\n            this.showCreateGroup = !this.showCreateGroup;\r\n            this.showCreateNode = false;\r\n            this.importMode = false;\r\n            this.showImportView = false;\r\n            this.editProjectRubricMode = false;\r\n            this.advancedMode = false;\r\n            this.showJSONAuthoring = false;\r\n\r\n            // also show the project view\r\n            this.projectMode = true;\r\n        } else if (view == 'createNode') {\r\n            // toggle the create step view\r\n            this.showCreateGroup = false;\r\n            this.showCreateNode = !this.showCreateNode;\r\n            this.importMode = false;\r\n            this.showImportView = false;\r\n            this.editProjectRubricMode = false;\r\n            this.advancedMode = false;\r\n            this.showJSONAuthoring = false;\r\n\r\n            // also show the project view\r\n            this.projectMode = true;\r\n        } else if (view == 'importStep') {\r\n            // toggle the import step view\r\n            this.showCreateGroup = false;\r\n            this.showCreateNode = false;\r\n            this.importMode = !this.importMode;\r\n            this.showImportView = !this.showImportView;\r\n            this.editProjectRubricMode = false;\r\n            this.advancedMode = false;\r\n            this.showJSONAuthoring = false;\r\n\r\n            // if the import view is shown, do not show the project view\r\n            this.projectMode = !this.importMode;\r\n        } else if (view == 'rubric') {\r\n            // toggle the rubric view\r\n            this.showCreateGroup = false;\r\n            this.showCreateNode = false;\r\n            this.importMode = false;\r\n            this.showImportView = false;\r\n            this.editProjectRubricMode = !this.editProjectRubricMode;\r\n            this.advancedMode = false;\r\n            this.showJSONAuthoring = false;\r\n\r\n            // if the rubric view is shown, do not show the project view\r\n            this.projectMode = !this.editProjectRubricMode;\r\n        } else if (view == 'advanced') {\r\n            // toggle the advanced view\r\n            this.showCreateGroup = false;\r\n            this.showCreateNode = false;\r\n            this.importMode = false;\r\n            this.showImportView = false;\r\n            this.editProjectRubricMode = false;\r\n            this.advancedMode = !this.advancedMode;\r\n            this.showJSONAuthoring = false;\r\n\r\n            // if the advanced view is shown, do not show the project view\r\n            this.projectMode = !this.advancedMode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show the regular project view\r\n     */\r\n    projectHomeClicked() {\r\n        // show the regular project view\r\n        this.showProjectHome();\r\n    }\r\n\r\n    /**\r\n     * Show the regular project view\r\n     */\r\n    showProjectHome() {\r\n        // we are going to the project view so we will set the current node to null\r\n        this.TeacherDataService.setCurrentNode(null);\r\n\r\n        // show the regular project view\r\n        this.toggleView('project');\r\n\r\n        // scroll to the top of the page\r\n        this.$anchorScroll('top');\r\n    }\r\n\r\n    /**\r\n     * Creating a group was cancelled\r\n     */\r\n    cancelCreateGroupClicked() {\r\n        // show the project regular project view\r\n        this.toggleView('project');\r\n    }\r\n\r\n    /**\r\n     * Creating a node was cancelled\r\n     */\r\n    cancelCreateNodeClicked() {\r\n        // show the project regular project view\r\n        this.toggleView('project');\r\n    }\r\n}\r\n\r\nProjectController.$inject = [\r\n    '$anchorScroll',\r\n    '$filter',\r\n    '$interval',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$state',\r\n    '$stateParams',\r\n    '$timeout',\r\n    'AuthorWebSocketService',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'TeacherDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default ProjectController;\r\n"]}