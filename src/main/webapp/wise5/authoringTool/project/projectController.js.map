{"version":3,"sources":["projectController.es6"],"names":["ProjectController","$anchorScroll","$filter","$interval","$mdDialog","$q","$rootScope","$scope","$state","$stateParams","$timeout","AuthorWebSocketService","ConfigService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","runId","getRunId","items","idToOrder","nodeIds","getFlattenedProjectAsNodeIds","showCreateGroup","showCreateNode","projectTitle","getProjectTitle","inactiveGroups","getInactiveGroups","inactiveNodes","getInactiveNodes","projectScriptFilename","getProjectScriptFilename","currentAuthorsMessage","projectMode","showImportView","importMode","editProjectRubricMode","advancedMode","showJSONAuthoring","stepBackgroundColors","setCurrentNode","metadata","getProjectMetadata","notifyAuthorProjectBegin","summernoteRubricId","summernoteRubricHTML","replaceAssetPaths","getProjectRubric","insertAssetToolTipText","insertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","projectURL","window","location","origin","getConfigParam","$on","event","args","currentAuthorsUsernames","myUserName","getMyUserName","splice","indexOf","length","currentAuthors","join","notifyAuthorProjectEnd","assetItem","fileName","assetFileName","target","summernoteElement","$","fullAssetPath","getProjectAssetsDirectoryPath","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","projectScriptFilenameChanged","hide","toState","toParams","fromState","fromParams","stateName","name","saveEvent","refreshProject","previewProjectEventData","constraints","open","go","commitMessage","saveProject","then","commitHistoryArray","commitHistory","val","error","alert","href","getWISEBaseURL","nodeId","getNodePositionById","getComponentsByNodeId","componentId","getPossibleTransitionCriteria","getNodeTitleByNodeId","isGroupNode","endCurrentNodeAndSetCurrentNodeByNodeId","nodeToAdd","createGroup","createGroupTitle","insertGroupMode","createMode","createNode","createNodeTitle","insertNodeMode","handleCreateModeInsert","moveMode","handleMoveModeInsert","copyMode","handleCopyModeInsert","importSelectedNodes","moveTo","createNodeInside","createNodeAfter","newNodes","newNode","temporarilyHighlightNewNodes","checkPotentialStartNodeIdChangeThenSaveProject","nodeCreatedEventData","id","getNodePositionAndTitleByNodeId","selectedNodeIds","getSelectedNodeIds","movedNodes","selectedNodeId","node","push","moveNodesInside","moveNodesAfter","firstNewNode","n","toTitle","nodeMovedEventData","activitiesMoved","stepsMoved","copiedNodes","copyNodesInside","copyNodesAfter","toNodeId","nodeCopiedEventData","activitiesCopied","stepsCopied","nodeIdToInsertInsideOrAfter","selectedNodes","getSelectedNodesToImport","selectedNodeTitles","getSelectedNodeTitlesToImport","toProjectId","fromProjectId","importProjectId","performImport","doScrollToNewNodes","stepsImported","selectedNode","selectedNodeTitle","stepImported","parseInt","fromNodeId","fromTitle","stepsImportedEventData","copyNodes","toggleView","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProject","showProjectHome","retrieveProjectAssets","selectedItemTypes","getSelectedItemTypes","confirmMessage","confirm","deletedStartNodeId","activityDeleted","stepDeleted","stepsDeleted","activitiesDeleted","getNodeById","tempNode","title","isStartNodeId","stepsInActivityDeleted","ids","stepNodeId","stepTitle","stepObject","deleteNode","updateStartNodeId","activitiesDeletedEventData","stepDeletedEventData","unselectAllItems","angular","forEach","value","key","checked","inactiveNode","nodeType","type","inactiveNodeType","focus","newStartNodeId","startGroupId","getStartGroupId","done","startId","isApplicationNode","setStartNodeId","resolve","reject","firstLeafNodeId","getFirstLeafNodeId","currentStartNodeId","getStartNodeId","checkPotentialStartNodeIdChange","parseProject","setProjectTitle","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","showImportProject","retrieveProjectById","projectJSON","nodeOrderOfProject","getNodeOrderOfProject","nodes","previewProjectURL","previewStepURL","item","projectJSONString","toJson","project","fromJson","setProject","scriptFilename","html","removeAbsoluteAssetPaths","insertWISELinks","setProjectRubric","isNodeInAnyBranchPath","setProjectScriptFilename","openAssetChooserParams","popup","$broadcast","view","scrollToTopOfPage","nodeElement","originalBackgroundColor","css","firstNodeElementAdded","animate","scrollTop","prop","eventName","category","data","context","componentType","stepNumber","color","branchPathLetter","getBranchPathLetter","letterASCIICode","charCodeAt","branchPathNumber","textArea","body","appendChild","select","execCommand","removeChild","$inject"],"mappings":"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","file":"projectController.js","sourcesContent":["'use strict';\n\nclass ProjectController {\n\n  constructor(\n      $anchorScroll,\n      $filter,\n      $interval,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $state,\n      $stateParams,\n      $timeout,\n      AuthorWebSocketService,\n      ConfigService,\n      ProjectAssetService,\n      ProjectService,\n      TeacherDataService,\n      UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$interval = $interval;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.AuthorWebSocketService = AuthorWebSocketService;\n    this.ConfigService = ConfigService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n\n    this.projectId = this.$stateParams.projectId;\n    this.runId = this.ConfigService.getRunId();\n    this.items = this.ProjectService.idToOrder;\n    this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.projectTitle = this.ProjectService.getProjectTitle();\n    this.inactiveGroups = this.ProjectService.getInactiveGroups();\n    this.inactiveNodes = this.ProjectService.getInactiveNodes();\n    this.projectScriptFilename = this.ProjectService.getProjectScriptFilename();\n    this.currentAuthorsMessage = '';\n    this.projectMode = true;\n    this.showCreateGroup = false;\n    this.showCreateNode = false;\n    this.showImportView = false;\n    this.importMode = false;\n    this.editProjectRubricMode = false;\n    this.advancedMode = false;\n    this.showJSONAuthoring = false;\n\n    /*\n     * The colors for the branch path steps. The colors are from\n     * http://colorbrewer2.org/\n     * http://colorbrewer2.org/export/colorbrewer.js\n     * The colors chosen are from the 'qualitative', 'Set2'.\n     */\n    this.stepBackgroundColors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3',\n        '#a6d854','#ffd92f','#e5c494','#b3b3b3'];\n\n    // start by opening the project, with no node being authored\n    this.TeacherDataService.setCurrentNode(null);\n\n    this.metadata = this.ProjectService.getProjectMetadata();\n    this.ProjectService.notifyAuthorProjectBegin(this.projectId);\n    this.summernoteRubricId = 'summernoteRubric_' + this.projectId;\n    this.summernoteRubricHTML = this.ProjectService\n        .replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n    let insertAssetToolTipText = this.$translate('INSERT_ASSET');\n    let insertAssetButton = this.UtilService.createInsertAssetButton(this,\n          this.projectId, null, null, 'rubric', insertAssetToolTipText);\n\n    // options to display in the summernote tool\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        'insertAssetButton': insertAssetButton\n      }\n    };\n\n    this.projectURL = window.location.origin + this.ConfigService.getConfigParam('projectURL');\n\n    this.$scope.$on('currentAuthorsReceived', (event, args) => {\n      let currentAuthorsUsernames = args.currentAuthorsUsernames;\n      let myUserName = this.ConfigService.getMyUserName();\n      currentAuthorsUsernames\n          .splice(currentAuthorsUsernames.indexOf(myUserName), 1);\n      if (currentAuthorsUsernames.length > 0) {\n        this.currentAuthorsMessage = this.$translate('concurrentAuthorsWarning',\n            { currentAuthors: currentAuthorsUsernames.join(', ') });\n      } else {\n        this.currentAuthorsMessage = '';\n      }\n    });\n\n    this.$scope.$on('$destroy', () => {\n      this.ProjectService.notifyAuthorProjectEnd(this.projectId);\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the author\n     * selects an asset from the choose asset popup to add to project rubric\n     * or choosing the script file.\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null && args.projectId == this.projectId &&\n          args.assetItem != null && args.assetItem.fileName != null) {\n        let assetFileName = args.assetItem.fileName;\n        if (args.target === 'rubric') {\n          let summernoteElement = $('#summernoteRubric_' + this.projectId);\n          let fullAssetPath =\n              this.ConfigService.getProjectAssetsDirectoryPath() +\n                  '/' + assetFileName;\n          if (this.UtilService.isImage(assetFileName)) {\n            /*\n             * move the cursor back to its position when the asset chooser\n             * popup was clicked\n             */\n            summernoteElement.summernote('editor.restoreRange');\n            summernoteElement.summernote('editor.focus');\n            summernoteElement.summernote(\n                'insertImage', fullAssetPath, assetFileName);\n          } else if (this.UtilService.isVideo(assetFileName)) {\n            /*\n             * move the cursor back to its position when the asset chooser\n             * popup was clicked\n             */\n            summernoteElement.summernote('editor.restoreRange');\n            summernoteElement.summernote('editor.focus');\n            let videoElement = document.createElement('video');\n            videoElement.controls = 'true';\n            videoElement.innerHTML =\n                '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n            summernoteElement.summernote('insertNode', videoElement);\n          }\n        } else if (args.target === 'scriptFilename') {\n          this.projectScriptFilename = assetFileName;\n          this.projectScriptFilenameChanged();\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    this.$rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n      if (toState != null) {\n        let stateName = toState.name;\n        if (stateName == 'root.project') {\n          this.saveEvent('projectHomeViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.node') {\n        } else if (stateName == 'root.project.asset') {\n          this.saveEvent('assetsViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.info') {\n          this.saveEvent('projectInfoViewOpened', 'Navigation');\n        } else if (stateName == 'root.project.notebook') {\n          this.saveEvent('notebookViewOpened', 'Navigation');\n        }\n      }\n    });\n\n    this.$rootScope.$on('projectSaved', () => {\n      //this.saveEvent('projectSaved', 'Authoring');\n    });\n\n    /*\n     * Listen for the event to parse the project. This is so other\n     * controllers can trigger parsing the project in this controller.\n     */\n    this.$rootScope.$on('parseProject', () => {\n      this.refreshProject();\n    });\n\n    this.saveEvent('projectOpened', 'Navigation');\n  };\n\n  /**\n   * Launch the project in preview mode in a new tab\n   */\n  previewProject() {\n    let previewProjectEventData = { constraints: true };\n    this.saveEvent('projectPreviewed', 'Navigation', previewProjectEventData);\n    window.open(this.ConfigService.getConfigParam('previewProjectURL'));\n  };\n\n  /**\n   * Launch the project in preview mode without constraints in a new tab\n   */\n  previewProjectWithoutConstraints() {\n    let previewProjectEventData = { constraints: false };\n    this.saveEvent('projectPreviewed', 'Navigation', previewProjectEventData);\n    window.open(this.ConfigService.getConfigParam('previewProjectURL') +\n        '?constraints=false');\n  };\n\n  viewProjectAssets() {\n    this.$state.go('root.project.asset', {projectId: this.projectId});\n  };\n\n  viewProjectHistory() {\n    this.$state.go('root.project.history', {projectId: this.projectId});\n  };\n\n  viewNotebookSettings() {\n    this.$state.go('root.project.notebook', {projectId: this.projectId});\n  }\n\n  saveProject() {\n    let commitMessage = 'Made changes to the project.';\n    try {\n      // if projectJSONString is bad json,\n      // an exception will be thrown and it will not save.\n      this.ProjectService.saveProject(commitMessage)\n          .then((commitHistoryArray) => {\n        this.commitHistory = commitHistoryArray;\n        $('#commitMessageInput').val('');\n      });\n    } catch (error) {\n      // TODO: i18n\n      alert('Invalid JSON. Please check syntax. Aborting save.');\n      return;\n    }\n  };\n\n  /**\n   * Make a request to download this project as a zip file\n   */\n  downloadProject() {\n    window.location.href = this.ConfigService.getWISEBaseURL()\n        + '/project/export/' + this.projectId;\n  }\n\n  /**\n   * Close authoring for the current project and bring user back to main AT page\n   */\n  closeProject() {\n    this.$state.go('root.main');\n  };\n\n  /**\n   * Get the node position\n   * @param nodeId the node id\n   * @returns the node position\n   */\n  getNodePositionById(nodeId) {\n    return this.ProjectService.getNodePositionById(nodeId);\n  };\n\n  /**\n   * Get the components that are in the specified node id.\n   * @param nodeId the node id\n   * @returns components in the node\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Returns a list of possible criteria for the specified node and component\n   * @param nodeId the node id\n   * @param componentId the component id in the node\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    return this.ProjectService\n        .getPossibleTransitionCriteria(nodeId, componentId);\n  }\n\n  /**\n   * Get the node title for a node\n   * @param nodeId the node id\n   * @returns the node title\n   */\n  getNodeTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodeTitleByNodeId(nodeId);\n  };\n\n  /**\n   * Check if a node id is for a group\n   * @param nodeId\n   * @returns whether the node is a group node\n   */\n  isGroupNode(nodeId) {\n    return this.ProjectService.isGroupNode(nodeId);\n  };\n\n  /**\n   * A node was clicked so we will go to the node authoring view\n   * @param nodeId\n   */\n  nodeClicked(nodeId) {\n    this.TeacherDataService\n        .endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n    this.$state\n        .go('root.project.node', {projectId: this.projectId, nodeId: nodeId});\n  };\n\n  /**\n   * Create a new group (activity)\n   */\n  createGroup() {\n    /*\n     * set the group into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = this.ProjectService.createGroup(this.createGroupTitle);\n\n    this.showCreateGroup = false;\n    this.createGroupTitle = '';\n    this.insertGroupMode = true;\n    this.createMode = true;\n  }\n\n  /**\n   * Create a new node (step)\n   */\n  createNode() {\n    /*\n     * set the node into this variable to hold it temporarily while the\n     * author decides where to place it\n     */\n    this.nodeToAdd = this.ProjectService.createNode(this.createNodeTitle);\n\n    this.showCreateNode = false;\n    this.createNodeTitle = '';\n    this.insertNodeMode = true;\n    this.createMode = true;\n  }\n\n  /**\n   * Insert the node(s) inside\n   * @param nodeId the node id of the group that we will insert into\n   */\n  insertInside(nodeId) {\n    // TODO check that we are inserting into a group\n    if (this.createMode) {\n      this.handleCreateModeInsert(nodeId, 'inside');\n    } else if (this.moveMode) {\n      this.handleMoveModeInsert(nodeId, 'inside');\n    } else if (this.copyMode) {\n      this.handleCopyModeInsert(nodeId, 'inside');\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Insert the node(s) after\n   * @param nodeId the node id of the node we will insert after\n   */\n  insertAfter(nodeId) {\n    if (this.createMode) {\n      this.handleCreateModeInsert(nodeId, 'after');\n    } else if (this.moveMode) {\n      this.handleMoveModeInsert(nodeId, 'after');\n    } else if (this.copyMode) {\n      this.handleCopyModeInsert(nodeId, 'after');\n    } else if (this.importMode) {\n      this.importSelectedNodes(nodeId);\n    }\n  }\n\n  /**\n   * Create a node and then insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param moveTo whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleCreateModeInsert(nodeId, moveTo) {\n    if (moveTo === 'inside') {\n      this.ProjectService.createNodeInside(this.nodeToAdd, nodeId);\n    } else if (moveTo === 'after') {\n      this.ProjectService.createNodeAfter(this.nodeToAdd, nodeId);\n    } else {\n      // an unspecified moveTo was provided\n      return;\n    }\n\n    let newNodes = [this.nodeToAdd];\n    let newNode = this.nodeToAdd;\n\n    /*\n     * clear this variable that we used to hold the node we inserted.\n     * since we have inserted the node we don't need a handle to it\n     * anymore\n     */\n    this.nodeToAdd = null;\n\n    this.createMode = false;\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n    this.temporarilyHighlightNewNodes(newNodes);\n\n    this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n      if (newNode != null) {\n        let nodeCreatedEventData = {\n          'nodeId': newNode.id,\n          'title': this.ProjectService\n              .getNodePositionAndTitleByNodeId(newNode.id)\n        };\n\n        if (this.ProjectService.isGroupNode(newNode.id)) {\n          this.saveEvent('activityCreated', 'Authoring', nodeCreatedEventData);\n        } else {\n          this.saveEvent('stepCreated', 'Authoring', nodeCreatedEventData);\n        }\n      }\n    });\n  }\n\n  /**\n   * Move a node and insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param moveTo whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleMoveModeInsert(nodeId, moveTo) {\n    let selectedNodeIds = this.getSelectedNodeIds();\n    if (selectedNodeIds != null && selectedNodeIds.indexOf(nodeId) != -1) {\n      /*\n       * the user is trying to insert the selected node ids after\n       * itself so we will not allow that\n       */\n      if (selectedNodeIds.length == 1) {\n        alert(this\n            .$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n      } else if (selectedNodeIds.length > 1) {\n        alert(this\n            .$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n      }\n    } else {\n      let movedNodes = [];\n      for (let selectedNodeId of selectedNodeIds) {\n        let node = {\n          'nodeId': selectedNodeId,\n          'fromTitle': this.ProjectService\n              .getNodePositionAndTitleByNodeId(selectedNodeId)\n        };\n        movedNodes.push(node);\n      }\n\n      let newNodes = [];\n      if (moveTo === 'inside') {\n        newNodes = this.ProjectService.moveNodesInside(selectedNodeIds, nodeId);\n      } else if (moveTo === 'after') {\n        newNodes = this.ProjectService.moveNodesAfter(selectedNodeIds, nodeId);\n      } else {\n        // an unspecified moveTo was provided\n        return;\n      }\n\n      this.moveMode = false;\n      this.insertGroupMode = false;\n      this.insertNodeMode = false;\n      this.temporarilyHighlightNewNodes(newNodes);\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        if (newNodes != null && newNodes.length > 0) {\n          let firstNewNode = newNodes[0];\n          if (firstNewNode != null && firstNewNode.id != null) {\n            for (let n = 0; n < movedNodes.length; n++) {\n              let node = movedNodes[n];\n              let newNode = newNodes[n];\n              if (node != null && newNode != null) {\n                node.toTitle = this.ProjectService\n                    .getNodePositionAndTitleByNodeId(newNode.id);\n              }\n            }\n\n            if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n              let nodeMovedEventData = { activitiesMoved: movedNodes };\n              this.saveEvent('activityMoved', 'Authoring', nodeMovedEventData);\n            } else {\n              let nodeMovedEventData = { stepsMoved: movedNodes };\n              this.saveEvent('stepMoved', 'Authoring', nodeMovedEventData);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Copy a node and insert it in the specified location\n   * @param nodeId insert the new node inside or after this node id\n   * @param moveTo whether to insert 'inside' or 'after' the nodeId parameter\n   */\n  handleCopyModeInsert(nodeId, moveTo) {\n    let copiedNodes = [];\n    let selectedNodeIds = this.getSelectedNodeIds();\n    for (let selectedNodeId of selectedNodeIds) {\n      let node = {\n        'fromNodeId': selectedNodeId,\n        'fromTitle': this.ProjectService\n            .getNodePositionAndTitleByNodeId(selectedNodeId)\n      };\n      copiedNodes.push(node);\n    }\n\n    let newNodes = [];\n    if (moveTo === 'inside') {\n      newNodes = this.ProjectService.copyNodesInside(selectedNodeIds, nodeId);\n    } else if (moveTo === 'after') {\n      newNodes = this.ProjectService.copyNodesAfter(selectedNodeIds, nodeId);\n    } else {\n      // an unspecified moveTo was provided\n      return;\n    }\n\n    this.copyMode = false;\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n    this.temporarilyHighlightNewNodes(newNodes);\n    this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n      if (newNodes != null && newNodes.length > 0) {\n        let firstNewNode = newNodes[0];\n        if (firstNewNode != null && firstNewNode.id != null) {\n          for (let n = 0; n < copiedNodes.length; n++) {\n            let node = copiedNodes[n];\n            let newNode = newNodes[n];\n            if (node != null && newNode != null) {\n              node.toNodeId = newNode.id;\n              node.toTitle = this.ProjectService\n                  .getNodePositionAndTitleByNodeId(newNode.id);\n            }\n          }\n\n          if (this.ProjectService.isGroupNode(firstNewNode.id)) {\n            let nodeCopiedEventData = { activitiesCopied: copiedNodes };\n            this.saveEvent('activityCopied', 'Authoring', nodeCopiedEventData);\n          } else {\n            let nodeCopiedEventData = { stepsCopied: copiedNodes };\n            this.saveEvent('stepCopied', 'Authoring', nodeCopiedEventData);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Import the selected steps and draw attention to them by highlighting them\n   * and scrolling to them.\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  importSelectedNodes(nodeIdToInsertInsideOrAfter) {\n    let selectedNodes = this.getSelectedNodesToImport();\n    let selectedNodeTitles = this.getSelectedNodeTitlesToImport();\n    let toProjectId = this.ConfigService.getConfigParam('projectId');\n    let fromProjectId = this.importProjectId;\n\n    this.performImport(nodeIdToInsertInsideOrAfter).then((newNodes) => {\n      this.checkPotentialStartNodeIdChangeThenSaveProject().then(() => {\n        let doScrollToNewNodes = true;\n        this.temporarilyHighlightNewNodes(newNodes, doScrollToNewNodes);\n\n        let stepsImported = [];\n        for (let n = 0; n < selectedNodes.length; n++) {\n          let selectedNode = selectedNodes[n];\n          let selectedNodeTitle = selectedNodeTitles[n];\n          let newNode = newNodes[n];\n\n          let stepImported = {\n            fromProjectId: parseInt(fromProjectId),\n            fromNodeId: selectedNode.id,\n            fromTitle: selectedNodeTitle,\n            toNodeId: newNode.id,\n            toTitle: this.ProjectService\n              .getNodePositionAndTitleByNodeId(newNode.id)\n          };\n          stepsImported.push(stepImported);\n        }\n\n        let stepsImportedEventData = { 'stepsImported': stepsImported };\n        this.saveEvent('stepImported', 'Authoring', stepsImportedEventData);\n      });\n    });\n  }\n\n  /**\n   * Import the step and place it in the chosen location\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  performImport(nodeIdToInsertInsideOrAfter) {\n    let selectedNodes = this.getSelectedNodesToImport();\n    let toProjectId = this.ConfigService.getConfigParam('projectId');\n    let fromProjectId = this.importProjectId;\n\n    return this.ProjectService.copyNodes(selectedNodes, fromProjectId,\n        toProjectId, nodeIdToInsertInsideOrAfter).then((newNodes) => {\n      this.refreshProject();\n      this.insertNodeMode = false;\n      this.toggleView('project');\n\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n\n      /*\n       * go back to the project view and\n       * refresh the project assets in case any of the imported\n       * steps also imported assets\n       */\n      this.showProjectHome();\n      this.ProjectAssetService.retrieveProjectAssets();\n      return newNodes;\n    });\n  }\n\n  /**\n   * Turn on copy mode\n   */\n  copy() {\n    // make sure there is at least one item selected\n    let selectedNodeIds = this.getSelectedNodeIds();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      let selectedItemTypes = this.getSelectedItemTypes();\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n        if (selectedItemTypes.length === 0) {\n          // TODO: i18n\n          alert('Please select an item to copy.');\n        } else if (selectedItemTypes.length === 1 &&\n          selectedItemTypes[0] === 'node') {\n          this.insertNodeMode = true;\n          this.copyMode = true;\n        } else {\n          // TODO: i18n\n          alert('You cannot copy the item(s) at this time.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Turn on move mode\n   * TODO refactor. too many nesting. Rename function to \"turnOnMoveMode\"?\n   */\n  move() {\n    // make sure there is at least one item selected\n    let selectedNodeIds = this.getSelectedNodeIds();\n    if (selectedNodeIds != null && selectedNodeIds.length > 0) {\n      let selectedItemTypes = this.getSelectedItemTypes();\n      if (selectedItemTypes != null && selectedItemTypes.length > 0) {\n        if (selectedItemTypes.length == 0) {\n          // there are no selected items\n          alert('Please select an item to move.');\n        } else if (selectedItemTypes.length == 1) {\n          // all the items the user selected are the same type\n          // TODO: i18n\n          if (selectedItemTypes[0] === 'group') {\n            this.insertGroupMode = true;\n            this.moveMode = true;\n          } else if (selectedItemTypes[0] === 'node') {\n            this.insertNodeMode = true;\n            this.moveMode = true;\n          }\n        } else if (selectedItemTypes.length > 1) {\n          /*\n           * the items the user selected are different types but\n           * we do not allow moving different types of items at\n           * the same time\n           * TODO: i18n\n           */\n          alert('If you want to move multiple items at once, ' +\n              'they must be of the same type. Please select only activities ' +\n              'or only steps.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the selected nodes after asking user for confirmation\n   * TODO refactor too many nesting\n   */\n  delete() {\n    let selectedNodeIds = this.getSelectedNodeIds();\n    if (selectedNodeIds != null && selectedNodeIds.length !== 0) {\n      let confirmMessage = '';\n      if (selectedNodeIds.length == 1) {\n        // TODO: i18n\n        confirmMessage = 'Are you sure you want to delete the selected item?';\n      } else if (selectedNodeIds.length > 1) {\n        // TODO: i18n\n        confirmMessage = 'Are you sure you want to delete the '\n            + selectedNodeIds.length + ' selected items?';\n      }\n      if (confirm(confirmMessage)) {\n        let deletedStartNodeId = false;\n        let activityDeleted = false;\n        let stepDeleted = false;\n        let stepsDeleted = [];\n        let activitiesDeleted = [];\n        for (let nodeId of selectedNodeIds) {\n          let node = this.ProjectService.getNodeById(nodeId);\n          let tempNode = {};\n\n          if (node != null) {\n            tempNode.nodeId = node.id;\n            tempNode.title =\n                this.ProjectService.getNodePositionAndTitleByNodeId(node.id);\n          }\n\n          if (this.ProjectService.isStartNodeId(nodeId)) {\n            deletedStartNodeId = true;\n          }\n\n          if (this.ProjectService.isGroupNode(nodeId)) {\n            activityDeleted = true;\n            let stepsInActivityDeleted = [];\n            for (let stepNodeId of node.ids) {\n              let stepTitle = this.ProjectService\n                  .getNodePositionAndTitleByNodeId(stepNodeId);\n\n              // create an object with the step id and title\n              let stepObject = {\n                'nodeId': stepNodeId,\n                'title': stepTitle\n              };\n              stepsInActivityDeleted.push(stepObject);\n            }\n            tempNode.stepsInActivityDeleted = stepsInActivityDeleted;\n            activitiesDeleted.push(tempNode);\n          } else {\n            stepDeleted = true;\n            stepsDeleted.push(tempNode);\n          }\n          this.ProjectService.deleteNode(nodeId);\n        }\n\n        if (deletedStartNodeId) {\n          this.updateStartNodeId();\n        }\n\n        if (activityDeleted) {\n          let activitiesDeletedEventData = {\n            'activitiesDeleted': activitiesDeleted\n          };\n          this.saveEvent('activityDeleted', 'Authoring',\n              activitiesDeletedEventData);\n        }\n\n        if (stepDeleted) {\n          let stepDeletedEventData = {\n            'stepsDeleted': stepsDeleted\n          };\n          this.saveEvent('stepDeleted', 'Authoring', stepDeletedEventData);\n        }\n\n        this.ProjectService.saveProject();\n        this.refreshProject();\n      }\n    }\n    this.unselectAllItems();\n  }\n\n  /**\n   * Get the ids of the selected nodes, both active and inactive.\n   * @returns an array of node ids that are selected\n   */\n  getSelectedNodeIds() {\n    let selectedNodeIds = [];\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n        selectedNodeIds.push(key);\n      }\n    }, selectedNodeIds);\n\n    if (this.inactiveNodes != null) {\n      for (let inactiveNode of this.inactiveNodes) {\n        if (inactiveNode != null && inactiveNode.checked) {\n          selectedNodeIds.push(inactiveNode.id);\n        }\n      }\n    }\n    return selectedNodeIds;\n  }\n\n  /**\n   * Get the distinct types of the selected items, both active and inactive.\n   * @returns an array of item types. possible items are group or node.\n   */\n  getSelectedItemTypes() {\n    let selectedItemTypes = [];\n\n    angular.forEach(this.items, function(value, key) {\n      if (value.checked) {\n        let node = this.ProjectService.getNodeById(key);\n        if (node != null) {\n          let nodeType = node.type;\n          if (selectedItemTypes.indexOf(nodeType) == -1) {\n            selectedItemTypes.push(nodeType);\n          }\n        }\n      }\n    }, this);\n\n    if (this.inactiveNodes != null) {\n      for (let inactiveNode of this.inactiveNodes) {\n        if (inactiveNode != null && inactiveNode.checked) {\n          let inactiveNodeType = inactiveNode.type;\n          if (selectedItemTypes.indexOf(inactiveNodeType) == -1) {\n            selectedItemTypes.push(inactiveNodeType);\n          }\n        }\n      }\n    }\n\n    return selectedItemTypes;\n  }\n\n  unselectAllItems() {\n    angular.forEach(this.items, function(value, key) {\n      value.checked = false;\n    });\n  }\n\n  /**\n   * Toggle the create group input\n   */\n  creatNewActivityClicked() {\n    this.createGroupTitle = '';\n    this.toggleView('createGroup');\n    if (this.showCreateGroup) {\n      this.$timeout(() => {\n        $('#createGroupTitle').focus();\n      });\n    }\n  }\n\n  /**\n   * Toggle the create node input\n   */\n  createNewStepClicked() {\n    this.createNodeTitle = '';\n    this.toggleView('createNode');\n    if (this.showCreateNode) {\n      this.$timeout(() => {\n        $('#createNodeTitle').focus();\n      });\n    }\n  }\n\n  /**\n   * Cancel the move mode\n   */\n  cancelMove() {\n    this.insertGroupMode = false;\n    this.insertNodeMode = false;\n    this.nodeToAdd = null;\n    this.createMode = false;\n    this.moveMode = false;\n    this.copyMode = false;\n    this.importMode = false;\n    this.unselectAllItems();\n  }\n\n  /**\n   * Update the start node id by traversing start ids until a\n   * node id is found.\n   */\n  updateStartNodeId() {\n    let newStartNodeId = null;\n    let startGroupId = this.ProjectService.getStartGroupId();\n    let node = this.ProjectService.getNodeById(startGroupId);\n    let done = false;\n\n    // recursively traverse the start ids\n    while (!done) {\n      if (node == null) {\n        // base case in case something went wrong\n        done = true;\n      } else if (this.ProjectService.isGroupNode(node.id)) {\n        // the node is a group node so we will get its start node\n        node = this.ProjectService.getNodeById(node.startId);\n      } else if (this.ProjectService.isApplicationNode(node.id)) {\n        // the node is a step node so we have found the new start node id\n        newStartNodeId = node.id;\n        done = true;\n      } else {\n        // base case in case something went wrong\n        done = true;\n      }\n    }\n\n    if (newStartNodeId) {\n      this.ProjectService.setStartNodeId(newStartNodeId);\n    }\n  }\n\n  /**\n   * Check if the start node id for the project could potentially\n   * change.\n   */\n  checkPotentialStartNodeIdChange() {\n    return this.$q((resolve, reject) => {\n      let firstLeafNodeId = this.ProjectService.getFirstLeafNodeId();\n      if (firstLeafNodeId == null) {\n        // there are no steps in the project\n        // set the start node id to empty string\n        this.ProjectService.setStartNodeId('');\n        resolve();\n      } else {\n        // we have found a leaf node\n        let currentStartNodeId = this.ProjectService.getStartNodeId();\n        if (currentStartNodeId != firstLeafNodeId) {\n          // update the start node id\n          this.ProjectService.setStartNodeId(firstLeafNodeId);\n          resolve();\n        } else {\n          resolve();\n        }\n      }\n    });\n  }\n\n  /**\n   * Check if the start node id has changed and then save the project\n   */\n  checkPotentialStartNodeIdChangeThenSaveProject() {\n    return this.checkPotentialStartNodeIdChange().then(() => {\n      this.ProjectService.saveProject();\n      this.refreshProject();\n      this.unselectAllItems();\n    });\n  }\n\n  /**\n   * Recalculates step numbering\n   */\n  refreshProject() {\n    this.ProjectService.parseProject();\n    this.items = this.ProjectService.idToOrder;\n  }\n\n  /**\n   * The project title changed so we will update the project title in the\n   * project service and save the project\n   */\n  projectTitleChanged() {\n    this.ProjectService.setProjectTitle(this.projectTitle);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Toggle the import view and populate the project drop downs if necessary\n   */\n  importStepClicked() {\n    this.toggleView('importStep');\n\n    if (this.importMode) {\n      if (this.myProjectsList == null) {\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n    this.importLibraryProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n    this.importProjectId = importProjectId;\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      this.ProjectService.retrieveProjectById(this.importProjectId)\n          .then((projectJSON) => {\n        this.importProject = projectJSON;\n        const nodeOrderOfProject = this.ProjectService\n            .getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = nodeOrderOfProject.idToOrder;\n        this.importProjectItems = nodeOrderOfProject.nodes;\n      });\n    }\n  }\n\n  /**\n   * Preview the import project in a new tab\n   */\n  previewImportProject() {\n    if (this.importProject != null) {\n      window.open(this.importProject.previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the import step in a new tab\n   * @param node\n   */\n  previewImportNode(node) {\n    if (node != null) {\n      const nodeId = node.id;\n      const previewProjectURL = this.importProject.previewProjectURL;\n      const previewStepURL  = previewProjectURL + '#/vle/' + nodeId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importSteps() {\n    let selectedNodes = this.getSelectedNodesToImport();\n    if (selectedNodes == null || selectedNodes.length == 0) {\n      // TODO i18n\n      alert('Please select a step to import.');\n    } else {\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.insertNodeMode = true;\n      this.projectMode = true;\n    }\n  }\n\n  /**\n   * Get the selected nodes to import\n   * @return an array of selected nodes\n   */\n  getSelectedNodesToImport() {\n    let selectedNodes = [];\n    for (let item of this.importProjectItems) {\n      if (item.checked) {\n        selectedNodes.push(item.node);\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Show the view to edit the project rubric\n   */\n  editProjectRubricClicked() {\n    this.toggleView('rubric');\n  }\n\n  /**\n   * Show the advanced authoring view\n   */\n  advancedClicked() {\n    this.toggleView('advanced');\n  }\n\n  /**\n   * The show JSON button was clicked\n   */\n  showJSONClicked() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n    if (this.showJSONAuthoring) {\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n  }\n\n  /**\n   * Save the project JSON string to the server\n   */\n  saveProjectJSONString() {\n    let project = angular.fromJson(this.projectJSONString);\n    this.ProjectService.setProject(project);\n    let scriptFilename = this.ProjectService.getProjectScriptFilename();\n    if (scriptFilename != null) {\n      this.projectScriptFilename = scriptFilename;\n    }\n    this.checkPotentialStartNodeIdChangeThenSaveProject();\n  }\n\n  /**\n   * The author has changed the rubric, so save the changes\n   */\n  summernoteRubricHTMLChanged() {\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    this.ProjectService.setProjectRubric(html);\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Check if the specified node is in any branch path\n   * @param nodeId the node id of the node\n   * @return whether the node is in any branch path\n   */\n  isNodeInAnyBranchPath(nodeId) {\n    return this.ProjectService.isNodeInAnyBranchPath(nodeId);\n  }\n\n  /**\n   * The project script file name changed\n   */\n  projectScriptFilenameChanged() {\n    // update the project script file name in the project service\n    this.ProjectService.setProjectScriptFilename(this.projectScriptFilename);\n\n    if (this.showJSONAuthoring) {\n      /*\n       * we are showing the project JSON authoring so we need to update\n       * the JSON string that we are showing in the textarea\n       */\n      this.projectJSONString = angular.toJson(this.ProjectService.project, 4);\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * project script filename\n   */\n  chooseProjectScriptFilename() {\n    let openAssetChooserParams = {\n      popup: true,\n      projectId: this.projectId,\n      target: 'scriptFilename'\n    };\n    this.$rootScope.$broadcast('openAssetChooser', openAssetChooserParams);\n  }\n\n  /**\n   * Show the appropriate authoring view\n   * @param view the view to show\n   */\n  toggleView(view) {\n    // clear the input element for creating a new activity\n    this.createGroupTitle = '';\n\n    // clear the input element for creating a new step\n    this.createNodeTitle = '';\n\n    if (view == 'project') {\n      // we are showing the regular project view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n      this.projectMode = true;\n    } else if (view == 'createGroup') {\n      // toggle the create activity view\n      this.showCreateGroup = !this.showCreateGroup;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'createNode') {\n      // toggle the create step view\n      this.showCreateGroup = false;\n      this.showCreateNode = !this.showCreateNode;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // also show the project view\n      this.projectMode = true;\n    } else if (view == 'importStep') {\n      // toggle the import step view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = !this.importMode;\n      this.showImportView = !this.showImportView;\n      this.editProjectRubricMode = false;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the import view is shown, do not show the project view\n      this.projectMode = !this.importMode;\n    } else if (view == 'rubric') {\n      // toggle the rubric view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = !this.editProjectRubricMode;\n      this.advancedMode = false;\n      this.showJSONAuthoring = false;\n\n      // if the rubric view is shown, do not show the project view\n      this.projectMode = !this.editProjectRubricMode;\n    } else if (view == 'advanced') {\n      // toggle the advanced view\n      this.showCreateGroup = false;\n      this.showCreateNode = false;\n      this.importMode = false;\n      this.showImportView = false;\n      this.editProjectRubricMode = false;\n      this.advancedMode = !this.advancedMode;\n      this.showJSONAuthoring = false;\n\n      // if the advanced view is shown, do not show the project view\n      this.projectMode = !this.advancedMode;\n    }\n  }\n\n  /**\n   * Go back to a previous page, which is different based on which page\n   * the author is currently on.\n   */\n  backButtonClicked() {\n    if (this.showImportView) {\n      this.toggleView('project');\n    } else if (this.editProjectRubricMode) {\n      this.toggleView('project');\n    } else if (this.advancedMode) {\n      this.toggleView('project');\n    } else {\n      this.$state.go('root.main');\n    }\n  }\n\n  /**\n   * Show the regular project view\n   */\n  projectHomeClicked() {\n    // show the regular project view\n    this.showProjectHome();\n  }\n\n  /**\n   * Show the regular project view\n   */\n  showProjectHome() {\n    // we are going to the project view so we will set the current node to null\n    this.TeacherDataService.setCurrentNode(null);\n\n    // show the regular project view\n    this.toggleView('project');\n    this.scrollToTopOfPage();\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n\n  /**\n   * Creating a group was cancelled, so show the project regular project view\n   */\n  cancelCreateGroupClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Creating a node was cancelled, so show the project view\n   */\n  cancelCreateNodeClicked() {\n    this.toggleView('project');\n  }\n\n  /**\n   * Temporarily highlight the new nodes to draw attention to them\n   * @param newNodes the new nodes to highlight\n   * @param doScrollToNewNodes if true, scroll to the first new node added\n   * TODO: can we remove the null checks: ensure that newNodes is never null?\n   */\n  temporarilyHighlightNewNodes(newNodes, doScrollToNewNodes = false) {\n    this.$timeout(() => {\n      if (newNodes != null && newNodes.length > 0) {\n        for (let newNode of newNodes) {\n          if (newNode != null) {\n            let nodeElement = $('#' + newNode.id);\n            let originalBackgroundColor = nodeElement.css('backgroundColor');\n            nodeElement.css('background-color', '#FFFF9C');\n\n            /*\n             * Use a timeout before starting to transition back to\n             * the original background color. For some reason the\n             * element won't get highlighted in the first place\n             * unless this timeout is used.\n             */\n            this.$timeout(() => {\n              nodeElement.css({\n                'transition': 'background-color 3s ease-in-out',\n                'background-color': originalBackgroundColor\n              });\n            });\n          }\n        }\n        if (doScrollToNewNodes) {\n          let firstNodeElementAdded = $('#' + newNodes[0].id);\n          if (firstNodeElementAdded != null) {\n            $('#content').animate({\n              scrollTop: firstNodeElementAdded.prop('offsetTop') - 60\n            }, 1000);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n    let context = 'AuthoringTool';\n    let nodeId = null;\n    let componentId = null;\n    let componentType = null;\n\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId,\n      componentType, category, eventName, data);\n  }\n\n  /**\n   * Get the selected node titles that we are importing\n   * @return an array of node titles that may include the step numbers\n   */\n  getSelectedNodeTitlesToImport() {\n    let selectedNodeTitles = [];\n    let selectedNodes = this.getSelectedNodesToImport();\n    for (let n = 0; n < selectedNodes.length; n++) {\n      let selectedNode = selectedNodes[n];\n      if (selectedNode != null) {\n        // get the step number and title from the import project\n        let tempNode = this.importProjectIdToOrder[selectedNode.id];\n        let stepNumber = tempNode.stepNumber;\n        let title = '';\n\n        if (stepNumber == null) {\n          title = selectedNode.title;\n        } else {\n          title = stepNumber + ': ' + selectedNode.title;\n        }\n        selectedNodeTitles[n] = title;\n      }\n    }\n    return selectedNodeTitles;\n  }\n\n  /**\n   * Get the background color for a step\n   * @param nodeId get the background color for a step in the project view\n   * @return If the node is in a branch path it will return a color. If the\n   * node is not in a branch path it will return null.\n   */\n  getStepBackgroundColor(nodeId) {\n    let color = null;\n    let branchPathLetter = this.ProjectService.getBranchPathLetter(nodeId);\n    if (branchPathLetter != null) {\n      // the node is in a branch path\n\n      // get the ascii code for the letter. example A=65, B=66, C=67, etc.\n      let letterASCIICode = branchPathLetter.charCodeAt(0);\n\n      // get the branch path number A=0, B=1, C=2, etc.\n      let branchPathNumber = letterASCIICode - 65;\n\n      // get the color for the branch path number\n      color = this.stepBackgroundColors[branchPathNumber];\n    }\n    return color;\n}\n\n  /**\n   * Copy the project URL to the clipboard\n   */\n  copyProjectURL() {\n    let textArea = document.createElement('textarea');\n    textArea.value = this.projectURL;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n\n  /**\n   * Open the project.json file in a new tab\n   */\n  openProjectURLInNewTab() {\n    window.open(this.projectURL, '_blank');\n  }\n}\n\nProjectController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$interval',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'AuthorWebSocketService',\n    'ConfigService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default ProjectController;\n"]}