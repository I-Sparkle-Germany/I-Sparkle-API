{"version":3,"sources":["componentSelect.es6"],"names":["ComponentSelectController","$filter","ProjectService","UtilService","$translate","$onInit","selectedComponents","components","getComponents","result","node","getNodeById","nodeId","nodeContent","getNodeContent","c","length","component","hasWork","componentHasWork","push","id","componentType","getComponentTypeLabel","nComponents","selected","total","hiddenComponents","i","indexOf","onChange","value","$inject","ComponentSelect","bindings","template","controller"],"mappings":"AAAA;;;;;;;;;;IAEMA,yB;AACF,uCAAYC,OAAZ,EACYC,cADZ,EAEYC,WAFZ,EAEyB;AAAA;;AAAA;;AACrB,aAAKF,OAAL,GAAeA,OAAf;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;;AAEA,aAAKC,UAAL,GAAkB,KAAKH,OAAL,CAAa,WAAb,CAAlB;;AAEA,aAAKI,OAAL,GAAe,YAAM;AACjB,kBAAKC,kBAAL,GAA0B,EAA1B;AACA,kBAAKC,UAAL,GAAkB,MAAKC,aAAL,EAAlB;AACH,SAHD;AAIH;;;;yCAEgB;AACb,gBAAIC,SAAS,IAAb;;AAEA,gBAAIC,OAAO,KAAKR,cAAL,CAAoBS,WAApB,CAAgC,KAAKC,MAArC,CAAX;AACA,gBAAIF,QAAQ,IAAZ,EAAkB;AACd;AACAD,yBAASC,IAAT;AACH;;AAED,mBAAOD,MAAP;AACH;;AAED;;;;;;;wCAIgB;AACZ,gBAAIF,aAAa,IAAjB;AACA,gBAAIM,cAAc,KAAKC,cAAL,EAAlB;;AAEA,gBAAID,WAAJ,EAAiB;AACbN,6BAAaM,YAAYN,UAAzB;;AAEA,qBAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIR,WAAWS,MAA/B,EAAuCD,GAAvC,EAA4C;AACxC,wBAAIE,YAAYV,WAAWQ,CAAX,CAAhB;;AAEA;AACAE,8BAAUC,OAAV,GAAoB,KAAKhB,cAAL,CAAoBiB,gBAApB,CAAqCF,SAArC,CAApB;;AAEA,wBAAIA,UAAUC,OAAd,EAAuB;AACnB;AACA,6BAAKZ,kBAAL,CAAwBc,IAAxB,CAA6BH,UAAUI,EAAvC;AACH;AACJ;AACJ;;AAED,mBAAOd,UAAP;AACH;;AAED;;;;;;;;8CAKsBe,a,EAAe;AACjC,mBAAO,KAAKnB,WAAL,CAAiBoB,qBAAjB,CAAuCD,aAAvC,CAAP;AACH;;AAED;;;;;;;0CAIkB;AACd,gBAAIE,cAAc,KAAKvB,OAAL,CAAa,QAAb,EAAuB,KAAKM,UAA5B,EAAwC,EAACW,SAAS,IAAV,EAAxC,EAAyDF,MAA3E;AACA,mBAAO,KAAKZ,UAAL,CAAgB,yBAAhB,EAA2C,EAAEqB,UAAU,KAAKnB,kBAAL,CAAwBU,MAApC,EAA4CU,OAAOF,WAAnD,EAA3C,CAAP;AACH;;AAED;;;;;;mDAG2B;AACvB,gBAAIG,mBAAmB,EAAvB;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKrB,UAAL,CAAgBS,MAApC,EAA4CY,GAA5C,EAAiD;AAC7C,oBAAIX,YAAY,KAAKV,UAAL,CAAgBqB,CAAhB,CAAhB;AACA,oBAAIP,KAAKJ,UAAUI,EAAnB;;AAEA,oBAAI,KAAKf,kBAAL,CAAwBuB,OAAxB,CAAgCR,EAAhC,IAAsC,CAA1C,EAA6C;AACzC;AACAM,qCAAiBP,IAAjB,CAAsBC,EAAtB;AACH;AACJ;;AAED,iBAAKS,QAAL,CAAc,EAACC,OAAOJ,gBAAR,EAAd;AACH;;;;;;AAGL3B,0BAA0BgC,OAA1B,GAAoC,CAChC,SADgC,EAEhC,gBAFgC,EAGhC,aAHgC,CAApC;;AAMA,IAAMC,kBAAkB;AACpBC,cAAU;AACNtB,gBAAQ,GADF;AAENkB,kBAAU;AAFJ,KADU;AAKpBK,qxBALoB;AAmBpBC,gBAAYpC;AAnBQ,CAAxB;;kBAsBeiC,e","file":"componentSelect.js","sourcesContent":["\"use strict\";\r\n\r\nclass ComponentSelectController {\r\n    constructor($filter,\r\n                ProjectService,\r\n                UtilService) {\r\n        this.$filter = $filter;\r\n        this.ProjectService = ProjectService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.$onInit = () => {\r\n            this.selectedComponents = [];\r\n            this.components = this.getComponents();\r\n        };\r\n    };\r\n\r\n    getNodeContent() {\r\n        let result = null;\r\n\r\n        let node = this.ProjectService.getNodeById(this.nodeId);\r\n        if (node != null) {\r\n            // field that will hold the node content\r\n            result = node;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the components for this node\r\n     * @return an array that contains the content for the components\r\n     */\r\n    getComponents() {\r\n        let components = null;\r\n        let nodeContent = this.getNodeContent();\r\n\r\n        if (nodeContent) {\r\n            components = nodeContent.components;\r\n\r\n            for (let c = 0; c < components.length; c++) {\r\n                let component = components[c];\r\n\r\n                // set whether component captures student work (for filtering purposes)\r\n                component.hasWork = this.ProjectService.componentHasWork(component);\r\n\r\n                if (component.hasWork) {\r\n                    // component has work, so add it to the initial selectedComponents array\r\n                    this.selectedComponents.push(component.id);\r\n                }\r\n            }\r\n        }\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Get the component type label for the given component type\r\n     * @param componentType string\r\n     * @return string of the component type label\r\n     */\r\n    getComponentTypeLabel(componentType) {\r\n        return this.UtilService.getComponentTypeLabel(componentType);\r\n    }\r\n\r\n    /**\r\n     * Get the text to display for the select dropdown\r\n     * @return string selected text\r\n     */\r\n    getSelectedText() {\r\n        let nComponents = this.$filter('filter')(this.components, {hasWork: true}).length;\r\n        return this.$translate('selectedComponentsLabel', { selected: this.selectedComponents.length, total: nComponents });\r\n    }\r\n\r\n    /**\r\n     * Selected components have changed, so run the onChange function\r\n     */\r\n    selectedComponentsChange() {\r\n        let hiddenComponents = [];\r\n\r\n        for (let i = 0; i < this.components.length; i++) {\r\n            let component = this.components[i];\r\n            let id = component.id;\r\n\r\n            if (this.selectedComponents.indexOf(id) < 0) {\r\n                // component isn't selected for view, so add to hiddenComponents\r\n                hiddenComponents.push(id);\r\n            }\r\n        }\r\n\r\n        this.onChange({value: hiddenComponents});\r\n    }\r\n}\r\n\r\nComponentSelectController.$inject = [\r\n    '$filter',\r\n    'ProjectService',\r\n    'UtilService'\r\n];\r\n\r\nconst ComponentSelect = {\r\n    bindings: {\r\n        nodeId: '@',\r\n        onChange: '&'\r\n    },\r\n    template:\r\n        `<md-select class=\"md-no-underline md-button md-raised\"\r\n                    ng-if=\"$ctrl.components.length > 1\"\r\n                    ng-model=\"$ctrl.selectedComponents\"\r\n                    ng-change=\"$ctrl.selectedComponentsChange()\"\r\n                    md-selected-html=\"$ctrl.getSelectedText()\"\r\n                    placeholder=\"{{ 'assessmentItemsToShow' | translate }\"\r\n                    multiple>\r\n            <md-optgroup label=\"{{ 'assessmentItemsToShow' | translate }}\">\r\n                <md-option ng-value=\"component.id\" ng-repeat=\"component in $ctrl.components | filter:{hasWork: true}\">\r\n                    {{ $index+1 }}: {{ $ctrl.getComponentTypeLabel(component.type) }}\r\n                </md-option>\r\n            </md-optgroup>\r\n        </md-select>`,\r\n    controller: ComponentSelectController\r\n};\r\n\r\nexport default ComponentSelect;\r\n"]}