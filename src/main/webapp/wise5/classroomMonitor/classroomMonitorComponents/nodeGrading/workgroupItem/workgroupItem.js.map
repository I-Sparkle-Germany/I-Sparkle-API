{"version":3,"sources":["workgroupItem.es6"],"names":["WorkgroupItemController","$filter","$scope","AnnotationService","ConfigService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","$onInit","statusClass","statusText","score","alertStatus","latestWorkTime","hasMaxScore","maxScore","nodeHasWork","nodeId","getAlertNotifications","$onChanges","changesObj","hiddenComponents","angular","copy","currentValue","$on","event","notification","toWorkgroupId","workgroupId","type","alertNotifications","push","updateModel","status","previousComponentState","args","annotation","studentWork","isCompleted","hasWork","hasNewWork","hasAlert","length","hasNewAlert","getNodeScoreByWorkgroupIdAndNodeId","node","result","nAlerts","i","alert","timeDismissed","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","latestAnnotationTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getWorkgroupId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","getScore","value","onUpdate","$inject","WorkgroupItem","bindings","canViewStudentNames","canGradeStudentWork","showWork","controller","template"],"mappings":"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","file":"workgroupItem.js","sourcesContent":["\"use strict\";\n\nclass WorkgroupItemController {\n    constructor($filter,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$filter = $filter;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.$onInit = () => {\n            this.statusClass = '';\n            this.statusText = '';\n            this.score = null;\n            this.alertStatus = null;\n            this.latestWorkTime = null;\n            this.hasMaxScore = (typeof this.maxScore === 'number');\n            this.nodeHasWork = this.ProjectService.nodeHasWork(this.nodeId);\n            this.getAlertNotifications();\n        };\n\n        this.$onChanges = (changesObj) => {\n\n            if (changesObj.hiddenComponents) {\n                this.hiddenComponents = angular.copy(changesObj.hiddenComponents.currentValue);\n            }\n        };\n\n        this.$scope.$on('notificationAdded', (event, notification) => {\n            if (notification.toWorkgroupId === this.workgroupId && notification.type === 'CRaterResult') {\n                // there is a new notification for this workgroup and it is a CRaterResult\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                this.alertNotifications.push(notification);\n                this.updateModel();\n            }\n        });\n\n        this.$scope.$on('notificationChanged', (event, notification) => {\n            if (notification.toWorkgroupId === this.workgroupId && notification.type === 'CRaterResult') {\n                // a CRaterResult notification for this workgroup has changed\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                this.getAlertNotifications();\n            }\n        });\n\n        this.$scope.$on('studentStatusReceived', (event, status) => {\n            let workgroupId = status.workgroupId;\n            let nodeId = status.previousComponentState.nodeId;\n            if (workgroupId === this.workgroupId && nodeId === this.nodeId) {\n                // workgroup has a new componentState for this node\n                this.updateModel();\n            }\n        });\n\n        this.$scope.$on('annotationReceived', (event, args) => {\n            let annotation = args.annotation;\n\n            if (annotation) {\n                let workgroupId = annotation.toWorkgroupId;\n                let nodeId = annotation.nodeId;\n                if (workgroupId === this.workgroupId && nodeId === this.nodeId) {\n                    // workgroup has a new annotation for this node\n                    this.updateModel();\n                }\n            }\n        });\n\n        this.$scope.$on('studentWorkReceived', (event, args) => {\n            let studentWork = args.studentWork;\n\n            if (studentWork != null) {\n                let workgroupId = studentWork.workgroupId;\n                let nodeId = studentWork.nodeId;\n                if (workgroupId === this.workgroupId && nodeId === this.nodeId) {\n                    // workgroup has a new componentState for this node\n                    this.updateModel();\n                }\n            }\n        });\n    };\n\n    getAlertNotifications() {\n        let args = {};\n        args.nodeId = this.nodeId;\n        args.workgroupId = this.workgroupId;\n        this.alertNotifications = this.NotificationService.getAlertNotifications(args);\n        this.updateModel();\n    }\n\n    updateModel() {\n        let isCompleted = this.isCompleted();\n        let hasWork = this.hasWork();\n        let hasNewWork = this.hasNewWork();\n        let hasAlert = (this.alertNotifications.length > 0);\n        let hasNewAlert = this.hasNewAlert();\n        this.score = this.getNodeScoreByWorkgroupIdAndNodeId(this.workgroupId, this.nodeId);\n\n        if (hasNewWork) {\n            this.statusClass = 'info';\n            this.statusText = this.$translate('newWork');\n        } else if (isCompleted) {\n            this.statusClass = 'success';\n            if (this.hasMaxScore) {\n                this.statusText = this.$translate('completed');\n            } else {\n                this.statusText = this.$translate('visited');\n            }\n        } else if (hasWork) {\n            this.statusText = this.$translate('partiallyCompleted');\n        } else {\n            if (this.node) {\n                this.statusText = this.$translate('noWork');\n            } else {\n                this.statusText = this.$translate('notVisited');\n            }\n        }\n\n        if (hasNewAlert) {\n            this.statusClass = 'warn';\n            this.alertStatus = 'new';\n        } else if (hasAlert) {\n            this.alertStatus = 'dismissed';\n        }\n    }\n\n    hasNewAlert() {\n        let result = false;\n\n        let nAlerts = this.alertNotifications.length;\n        for (let i = 0; i < nAlerts; i++) {\n            let alert = this.alertNotifications[i];\n            if (!alert.timeDismissed) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    hasWork() {\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\n        let result = false;\n\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(this.nodeId);\n        let n = componentStates.length-1;\n\n        // loop through component states for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let componentState = componentStates[i];\n            if (componentState.workgroupId === this.workgroupId) {\n                result = true;\n                this.latestWorkTime = componentState.serverSaveTime;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    hasNewWork() {\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\n        let result = false;\n        let latestAnnotationTime = null;\n\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(this.nodeId);\n        let n = annotations.length-1;\n\n        // loop through annotations for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let annotation = annotations[i];\n            // TODO: support checking for annotations from shared teachers?\n            if (annotation.toWorkgroupId === this.workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\n                latestAnnotationTime = annotation.serverSaveTime;\n                break;\n            }\n        }\n\n        if (this.latestWorkTime > latestAnnotationTime) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    isCompleted() {\n        let result = false;\n        let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(this.workgroupId);\n        let nodeStatus = studentStatus.nodeStatuses[this.nodeId];\n\n        if (nodeStatus) {\n            result = nodeStatus.isCompleted;\n        }\n\n        return result;\n    }\n\n    getNodeScoreByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        let score = this.AnnotationService.getScore(workgroupId, nodeId);\n        return (typeof score === 'number' ? score : '-');\n    }\n\n    updateHiddenComponents(value, event) {\n        this.onUpdate({value: value, event: event});\n    }\n}\n\nWorkgroupItemController.$inject = [\n    '$filter',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nconst WorkgroupItem = {\n    bindings: {\n        canViewStudentNames: '<',\n        canGradeStudentWork: '<',\n        maxScore: '<',\n        nodeId: '<',\n        workgroupId: '<',\n        showWork: '<',\n        hiddenComponents: '<',\n        onUpdate: '&'\n    },\n    controller: WorkgroupItemController,\n    template:\n        `<md-list-item class=\"list-item list-item-condensed md-whiteframe-z1\"\n                       ng-class=\"{'list-item--warn': $ctrl.statusClass === 'warn', 'list-item--info': $ctrl.statusClass === 'info', 'list-item--expanded': $ctrl.showWork}\"\n                       ng-click=\"$ctrl.showWork = !$ctrl.showWork\"\n                       layout-wrap>\n            <div class=\"md-list-item-text\" layout=\"row\" flex>\n                <div flex layout=\"row\" layout-align=\"start center\">\n                    <workgroup-info workgroup-id=\"$ctrl.workgroupId\" can-view-student-names=\"$ctrl.canViewStudentNames\" alert-status=\"{{$ctrl.alertStatus}}\"></workgroup-info>\n                </div>\n                <div flex=\"30\" layout=\"row\" layout-align=\"center center\">\n                    <workgroup-node-status status-text=\"{{$ctrl.statusText}}\" status-class=\"{{$ctrl.statusClass}}\"></workgroup-node-status>\n                </div>\n                <div ng-if=\"$ctrl.hasMaxScore\" flex=\"20\" layout=\"row\" layout-align=\"center center\">\n                    <workgroup-node-score score=\"{{$ctrl.score}}\" max-score=\"{{$ctrl.maxScore}}\"></workgroup-node-score>\n                </div>\n            </div>\n        </md-list-item>\n        <workgroup-node-grading workgroup-id=\"$ctrl.workgroupId\"\n                                node-id=\"{{$ctrl.nodeId}}\"\n                                latest-work-time=\"$ctrl.latestWorkTime\"\n                                ng-if=\"$ctrl.showWork\"\n                                hidden-components=\"$ctrl.hiddenComponents\"\n                                on-update=\"$ctrl.updateHiddenComponents(value, event)\"></workgroup-node-grading>`\n};\n\nexport default WorkgroupItem;\n"]}