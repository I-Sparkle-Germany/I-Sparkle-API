{"version":3,"sources":["workgroupNodeGrading.es6"],"names":["WorkgroupNodeGradingController","ConfigService","ProjectService","TeacherDataService","UtilService","$onInit","nodeContent","getNodeContent","components","getComponents","teacherWorkgroupId","getWorkgroupId","$onChanges","changesObj","hiddenComponents","currentValue","result","node","getNodeById","nodeId","c","length","component","isDisabled","lockAfterSubmit","hasWork","componentHasWork","workgroupId","componentId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","time","convertToClientTimestamp","index","indexOf","componentType","getComponentTypeLabel","$inject","WorkgroupNodeGrading","bindings","template","controller"],"mappings":"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","file":"workgroupNodeGrading.js","sourcesContent":["\"use strict\";\r\n\r\nclass WorkgroupNodeGradingController {\r\n    constructor(ConfigService,\r\n                ProjectService,\r\n                TeacherDataService,\r\n                UtilService) {\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$onInit = () => {\r\n            this.nodeContent = this.getNodeContent();\r\n            this.components = this.getComponents();\r\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\r\n        };\r\n\r\n        this.$onChanges = (changesObj) => {\r\n            if (changesObj.hiddenComponents) {\r\n                this.hiddenComponents = changesObj.hiddenComponents.currentValue;\r\n            }\r\n        };\r\n    };\r\n\r\n    getNodeContent() {\r\n        let result = null;\r\n\r\n        let node = this.ProjectService.getNodeById(this.nodeId);\r\n        if (node != null) {\r\n            // field that will hold the node content\r\n            result = node;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the components for this node\r\n     * @return an array that contains the content for the components\r\n     */\r\n    getComponents() {\r\n        let components = null;\r\n\r\n        if (this.nodeContent) {\r\n            components = this.nodeContent.components;\r\n\r\n            for (let c = 0; c < components.length; c++) {\r\n                let component = components[c];\r\n\r\n                if (this.isDisabled) {\r\n                    component.isDisabled = true;\r\n                }\r\n\r\n                if (this.nodeContent.lockAfterSubmit) {\r\n                    component.lockAfterSubmit = true;\r\n                }\r\n\r\n                // set whether component captures student work (for filtering purposes)\r\n                component.hasWork = this.ProjectService.componentHasWork(component);\r\n            }\r\n        }\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Get the student data for a specific component\r\n     * @param the componentId\r\n     * @param the workgroupId id of Workgroup who created the component state\r\n     * @return the student data for the given component\r\n     */\r\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId, componentId) {\r\n        let componentState = null;\r\n\r\n        if (workgroupId != null && componentId != null) {\r\n            // get the latest component state for the component\r\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    /**\r\n     * Get the student data for a specific part\r\n     * @param the componentId\r\n     * @param the workgroupId id of Workgroup who created the component state\r\n     * @return the student data for the given component\r\n     */\r\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\r\n        let componentState = null;\r\n\r\n        if (workgroupId != null && nodeId != null && componentId != null) {\r\n\r\n            // get the latest component state for the component\r\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    convertToClientTimestamp(time) {\r\n        return this.ConfigService.convertToClientTimestamp(time);\r\n    }\r\n\r\n    isComponentVisible(componentId) {\r\n        let result = true;\r\n\r\n        let index = this.hiddenComponents.indexOf(componentId);\r\n        if (index > -1) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the component type label for the given component type\r\n     * @param componentType string\r\n     * @return string of the component type label\r\n     */\r\n    getComponentTypeLabel(componentType) {\r\n        return this.UtilService.getComponentTypeLabel(componentType);\r\n    }\r\n}\r\n\r\nWorkgroupNodeGradingController.$inject = [\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'TeacherDataService',\r\n    'UtilService'\r\n];\r\n\r\nconst WorkgroupNodeGrading = {\r\n    bindings: {\r\n        workgroupId: '<',\r\n        nodeId: '@',\r\n        hiddenComponents: '<'\r\n    },\r\n    template:\r\n        `<div class=\"nav-item__grading\">\r\n            <div id=\"component_{{component.id}}_{{$ctrl.workgroupId}}\" class=\"component component--grading\" ng-repeat='component in $ctrl.components | filter:{hasWork: true}'>\r\n                <div ng-show=\"$ctrl.isComponentVisible(component.id)\">\r\n                    <div class=\"accent-2 md-body-2 component__header\">{{ $index+1 + '. ' + $ctrl.getComponentTypeLabel(component.type) }}</div>\r\n                    <component ng-if='component.showPreviousWorkNodeId != null && component.showPreviousWorkComponentId != null && component.showPreviousWorkNodeId != \"\" && component.showPreviousWorkComponentId != \"\"'\r\n                               class=\"component-container\"\r\n                               node-id='{{component.showPreviousWorkNodeId}}'\r\n                               component-id='{{component.showPreviousWorkComponentId}}'\r\n                               component-state='{{$ctrl.getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId($ctrl.workgroupId, component.showPreviousWorkNodeId, component.showPreviousWorkComponentId)}}'\r\n                               workgroup-id='{{$ctrl.workgroupId}}'\r\n                               teacher-workgroup-id='{{$ctrl.teacherWorkgroupId}}'\r\n                               mode='grading'></component>\r\n                    <component ng-if='component.showPreviousWorkNodeId == null || component.showPreviousWorkComponentId == null || component.showPreviousWorkNodeId == \"\" || component.showPreviousWorkComponentId == \"\"'\r\n                               class=\"component-container\"\r\n                               node-id='{{$ctrl.nodeId}}'\r\n                               component-id='{{component.id}}'\r\n                               component-state='{{$ctrl.getLatestComponentStateByWorkgroupIdAndComponentId($ctrl.workgroupId, component.id)}}'\r\n                               workgroup-id='{{$ctrl.workgroupId}}'\r\n                               teacher-workgroup-id='{{$ctrl.teacherWorkgroupId}}'\r\n                               mode='grading'></component>\r\n                </div>\r\n            </div>\r\n        </div>`,\r\n    controller: WorkgroupNodeGradingController\r\n};\r\n\r\nexport default WorkgroupNodeGrading;\r\n"]}