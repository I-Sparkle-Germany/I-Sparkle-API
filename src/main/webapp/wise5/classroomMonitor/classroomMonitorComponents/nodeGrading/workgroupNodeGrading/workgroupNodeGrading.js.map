{"version":3,"sources":["workgroupNodeGrading.es6"],"names":["WorkgroupNodeGradingController","ConfigService","ProjectService","TeacherDataService","$onInit","nodeContent","getNodeContent","components","getComponents","teacherWorkgroupId","getWorkgroupId","latestWork","latestWorkTime","$onChanges","changesObj","convertToClientTimestamp","currentValue","hiddenComponents","result","node","getNodeById","nodeId","isDisabled","c","length","component","lockAfterSubmit","workgroupId","componentId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","time","index","indexOf","$event","splice","push","onUpdate","value","event","$inject","WorkgroupNodeGrading","bindings","visibleComponents","template","controller"],"mappings":"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","file":"workgroupNodeGrading.js","sourcesContent":["\"use strict\";\n\nclass WorkgroupNodeGradingController {\n    constructor(ConfigService,\n                ProjectService,\n                TeacherDataService) {\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$onInit = () => {\n            this.nodeContent = this.getNodeContent();\n            this.components = this.getComponents();\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n            this.latestWork = this.latestWorkTime;\n        };\n\n        this.$onChanges = (changesObj) => {\n            if (changesObj.latestWorkTime) {\n                this.latestWork = this.convertToClientTimestamp(changesObj.latestWorkTime.currentValue);\n            }\n\n            if (changesObj.hiddenComponents) {\n                this.hiddenComponents = changesObj.hiddenComponents.currentValue;\n            }\n        };\n    };\n\n    getNodeContent() {\n        let result = null;\n\n        let node = this.ProjectService.getNodeById(this.nodeId);\n        if (node != null) {\n            // field that will hold the node content\n            result = node;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        let components = null;\n\n        if (this.nodeContent) {\n            components = this.nodeContent.components;\n        }\n\n        if (components && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        let componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        let componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    convertToClientTimestamp(time) {\n        return this.ConfigService.convertToClientTimestamp(time);\n    }\n\n    isComponentVisible(componentId) {\n        let result = true;\n\n        let index = this.hiddenComponents.indexOf(componentId);\n        if (index > -1) {\n            result = false;\n        }\n\n        return result;\n    }\n\n    toggleComponentVisibility($event, componentId) {\n        let index = this.hiddenComponents.indexOf(componentId);\n        if (index > -1) {\n            this.hiddenComponents.splice(index, 1);\n        } else {\n            this.hiddenComponents.push(componentId);\n        }\n\n        this.onUpdate({value: this.hiddenComponents, event: event});\n    }\n}\n\nWorkgroupNodeGradingController.$inject = [\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService'\n];\n\nconst WorkgroupNodeGrading = {\n    bindings: {\n        workgroupId: '<',\n        nodeId: '@',\n        latestWorkTime: '<',\n        visibleComponents: '<',\n        hiddenComponents: '<',\n        onUpdate: '&'\n    },\n    template:\n        `<div class=\"nav-item__grading md-whiteframe-1dp\">\n            <div id=\"{{component.id}}_{{$ctrl.workgroupId}}\" class=\"component--grading\" ng-repeat='component in $ctrl.components'>\n                <div ng-if=\"$ctrl.components.length > 1\" layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"$ctrl.toggleComponentVisibility($event, component.id)\"\n                               class=\"component--grading__toggle transform--none\"\n                               flex=\"100\"\n                               ng-class=\"{'component--grading__toggle--hidden':!$ctrl.isComponentVisible(component.id)}\"\n                               aria-label=\"{{$ctrl.isComponentVisible(component.id) ? ('hideSection'|translate) : ('showSection'|translate)}}\"\n                               title=\"{{$ctrl.isComponentVisible(component.id) ? ('hideSection'|translate) : ('showSection'|translate)}}\">\n                        <md-icon ng-if=\"$ctrl.isComponentVisible(component.id)\">expand_less</md-icon>\n                        <md-icon ng-if=\"!$ctrl.isComponentVisible(component.id)\">expand_more</md-icon>\n                    </md-button>\n                </div>\n                <component ng-if='component.showPreviousWorkNodeId != null && component.showPreviousWorkComponentId != null && component.showPreviousWorkNodeId != \"\" && component.showPreviousWorkComponentId != \"\"'\n                           ng-show=\"$ctrl.isComponentVisible(component.id)\"\n                           class=\"component-container animate-show\"\n                           node-id='{{component.showPreviousWorkNodeId}}'\n                           component-id='{{component.showPreviousWorkComponentId}}'\n                           component-state='{{$ctrl.getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId($ctrl.workgroupId, component.showPreviousWorkNodeId, component.showPreviousWorkComponentId)}}'\n                           workgroup-id='{{$ctrl.workgroupId}}'\n                           teacher-workgroup-id='{{$ctrl.teacherWorkgroupId}}'\n                           mode='grading'></component>\n                <component ng-if='component.showPreviousWorkNodeId == null || component.showPreviousWorkComponentId == null || component.showPreviousWorkNodeId == \"\" || component.showPreviousWorkComponentId == \"\"'\n                           ng-show=\"$ctrl.isComponentVisible(component.id)\"\n                           class=\"component-container animate-show\"\n                           node-id='{{$ctrl.nodeId}}'\n                           component-id='{{component.id}}'\n                           component-state='{{$ctrl.getLatestComponentStateByWorkgroupIdAndComponentId($ctrl.workgroupId, component.id)}}'\n                           workgroup-id='{{$ctrl.workgroupId}}'\n                           teacher-workgroup-id='{{$ctrl.teacherWorkgroupId}}'\n                           mode='grading'></component>\n\n            </div>\n        </div>`,\n    controller: WorkgroupNodeGradingController\n};\n\nexport default WorkgroupNodeGrading;\n"]}