{"version":3,"sources":["navItem.es6"],"names":["NavItemController","$element","$filter","$mdDialog","$rootScope","$scope","$state","$translate","ConfigService","NodeService","NotificationService","ProjectService","StudentDataService","StudentStatusService","TeacherDataService","TeacherWebSocketService","expanded","item","idToNode","nodeId","isGroup","isGroupNode","nodeTitle","showPosition","idToPosition","title","currentNode","previousNode","isCurrentNode","id","maxScore","getMaxScoreForNode","workgroupsOnNodeData","isWorkgroupOnlineOnNode","isPlanning","icon","getNodeIconByNodeId","parentGroupId","parentGroup","getParentGroup","availablePlanningNodes","getAvailablePlanningNodes","isPlanningNode","setWorkgroupsOnNodeData","$onInit","alertStatus","alertNotifications","getAlertNotifications","$watch","newNode","oldNode","isPrev","isApplicationNode","previousStep","$parent","isPrevStep","zoomToElement","prevNodeisGroup","prevNodeIsDescendant","isNodeDescendentOfGroup","value","itemExpanded","$on","event","args","setTimeout","top","offsetTop","location","delay","$","animate","scrollTop","getNodeById","endCurrentNodeAndSetCurrentNodeByNodeId","planningNodeId","maxAddAllowed","planningGroupNode","isParentGroupPlanning","a","length","availablePlanningNode","max","numPlanningNodesAdded","ids","c","childPlanningNodeId","childPlanningNode","planningNodeTemplateId","node","description","currentPeriod","getCurrentPeriod","periodId","completionPercentage","getNodeCompletion","averageScore","getNodeAverageScore","averageScoreDisplay","getWorkgroupIdsOnNode","workgroupIdsOnNode","workgroupOnlineOnNode","n","i","usernames","getUserNamesByWorkgroupId","avatarColor","getAvatarColorForWorkgroupId","online","isStudentOnline","push","hasAlert","hasNewAlert","result","nAlerts","alert","toWorkgroupId","timeDismissed","$inject","NavItem","bindings","type","templateUrl","controller"],"mappings":"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","file":"navItem.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($element,\n                $filter,\n                $mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                $translate,\n                ConfigService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentDataService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$element = $element;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.TeacherDataService.currentNode;\n        this.previousNode = null;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n\n        // the max score for the node\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n\n        // an object to hold workgroups currently visiting this node\n        this.workgroupsOnNodeData = [];\n\n        // whether there is at least one workgroup both online and on this node\n        this.isWorkgroupOnlineOnNode = false;\n\n        // whether this node is a planning group\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n\n        // get the node icon\n        this.icon = this.ProjectService.getNodeIconByNodeId(this.nodeId);\n\n        this.parentGroupId = null;\n\n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n\n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n        }\n\n        if (this.isPlanning) {\n            /*\n             * planning is enabled for this group so we will get the available\n             * planning nodes that can be used\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.nodeId);\n        } else if (this.isPlanningNode) {\n            /* this is an available planning node for its parent group, so we\n             * need to calculate the total number of times it has been added\n             * to the project by all the workgroups in the current period\n             */\n\n        }\n\n        this.setWorkgroupsOnNodeData();\n\n        this.$onInit = () => {\n            this.alertStatus = null;\n            this.alertNotifications = [];\n\n            this.getAlertNotifications();\n        };\n\n        this.$scope.$watch(\n            () => { return this.TeacherDataService.currentNode; },\n            (newNode, oldNode) => {\n                this.currentNode = newNode;\n                this.previousNode = oldNode;\n                this.isCurrentNode = (this.nodeId === newNode.id);\n                let isPrev = false;\n\n                if (this.ProjectService.isApplicationNode(newNode.id)) {\n                    return;\n                }\n\n                if (oldNode) {\n                    isPrev = (this.nodeId === oldNode.id);\n\n                    if (this.TeacherDataService.previousStep) {\n                        this.$scope.$parent.isPrevStep = (this.nodeId === this.TeacherDataService.previousStep.id);\n                    }\n\n                    if (isPrev && !this.isGroup) {\n                        this.zoomToElement();\n                    }\n                }\n\n                if (this.isGroup) {\n                    let prevNodeisGroup = (!oldNode || this.ProjectService.isGroupNode(oldNode.id));\n                    let prevNodeIsDescendant = this.ProjectService.isNodeDescendentOfGroup(oldNode, this.item);\n                    if (this.isCurrentNode) {\n                        this.expanded = true;\n                        if (prevNodeisGroup || !prevNodeIsDescendant) {\n                            this.zoomToElement();\n                        }\n                    } else {\n                        if (!prevNodeisGroup) {\n                            if (prevNodeIsDescendant) {\n                                this.expanded = true;\n                            } else {\n                                this.expanded = false;\n                            }\n                        }\n                    }\n                } else {\n                    if (isPrev && this.ProjectService.isNodeDescendentOfGroup(this.item, newNode)) {\n                        this.zoomToElement();\n                    }\n                }\n            }\n        );\n\n        this.$scope.$watch(\n            () => { return this.expanded; },\n            (value) => {\n                this.$scope.$parent.itemExpanded = value;\n            }\n        );\n\n        // listen for the studentsOnlineReceived event\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\n            this.setWorkgroupsOnNodeData();\n        });\n\n        // listen for the studentStatusReceived event\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\n            this.setWorkgroupsOnNodeData();\n        });\n\n        // listen for the currentPeriodChanged event\n        this.$rootScope.$on('currentPeriodChanged', (event, args) => {\n            this.setWorkgroupsOnNodeData();\n            this.getAlertNotifications();\n        });\n    }\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let top = this.$element[0].offsetTop;\n            let location = this.isGroup ? top - 32 : top - 80;\n            let delay = 350;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear');\n        }, 500);\n    }\n\n    itemClicked(event) {\n        let previousNode = this.TeacherDataService.currentNode;\n        let currentNode = this.ProjectService.getNodeById(this.nodeId);\n        if (this.isGroup) {\n            this.expanded = !this.expanded;\n            if (this.expanded) {\n                if (this.isCurrentNode) {\n                    this.zoomToElement();\n                } else {\n                    this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            }\n        } else {\n            this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n        }\n    }\n\n    /**\n     * Returns the max times a planning node can be added to the project (-1 is\n     * is returned if there is no limit)\n     * @param planningNodeId\n     */\n    getPlannindNodeMaxAllowed(planningNodeId) {\n        let maxAddAllowed = -1;  // by default, students can add as many instances as they want\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n        // get the maxAddAllowed value by looking up the planningNode in the project.\n        if (planningGroupNode && planningGroupNode.availablePlanningNodes) {\n            for (let a = 0; a < planningGroupNode.availablePlanningNodes.length; a++) {\n                let availablePlanningNode = planningGroupNode.availablePlanningNodes[a];\n                if (availablePlanningNode.nodeId === planningNodeId && availablePlanningNode.max != null) {\n                    maxAddAllowed = availablePlanningNode.max;\n                }\n            }\n        }\n\n        return maxAddAllowed;\n    }\n\n    /**\n     * Returns the number of times a planning node has been added to the project\n     * @param planningNodeId\n     */\n    getNumPlannindNodeInstances(planningNodeId) {\n        let numPlanningNodesAdded = 0;  // keep track of number of instances\n        // otherwise, see how many times the planning node template has been used.\n\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n\n        // loop through the child ids in the planning group and see how many times they've been used\n        if (planningGroupNode && planningGroupNode.ids) {\n            for (let c = 0; c < planningGroupNode.ids.length; c++) {\n                let childPlanningNodeId = planningGroupNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                if (childPlanningNode != null && childPlanningNode.planningNodeTemplateId === planningNodeId) {\n                    numPlanningNodesAdded++;\n                }\n            }\n        }\n\n        return numPlanningNodesAdded;\n    }\n\n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    }\n\n    /**\n     * Get the node description\n     * @param nodeId get the description for this node\n     * @returns the description for the node\n     */\n    getNodeDescription(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var description = null;\n\n        if (node != null) {\n            description = node.description;\n        }\n\n        return description;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed this node\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(this.nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the average score for the node\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\n\n        let averageScoreDisplay = null;\n\n        if (typeof this.maxScore === 'number') {\n            if (averageScore === null) {\n                averageScore = \"-\";\n            } else {\n                averageScore = this.$filter('number')(averageScore, 1);\n            }\n            // create the average score display e.g. 8/10\n            averageScoreDisplay = averageScore + '/' + this.maxScore;\n        }\n\n        return averageScoreDisplay;\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the workgroup ids on this node in the current period\n     * @returns an array of workgroup ids on a node in a period\n     */\n    getWorkgroupIdsOnNode() {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod().periodId;\n\n        // get the workgroups that are on the node in the period\n        return this.StudentStatusService.getWorkgroupIdsOnNode(this.nodeId, currentPeriod);\n    }\n\n\n    setWorkgroupsOnNodeData() {\n        let workgroupIdsOnNode = this.getWorkgroupIdsOnNode();\n        let workgroupOnlineOnNode = false;\n        this.workgroupsOnNodeData = [];\n\n        let n = workgroupIdsOnNode.length;\n        for (let i = 0; i < n; i++) {\n            let id = workgroupIdsOnNode[i];\n            let usernames = this.ConfigService.getUserNamesByWorkgroupId(id);\n            let avatarColor = this.ConfigService.getAvatarColorForWorkgroupId(id);\n            let online = this.TeacherWebSocketService.isStudentOnline(id);\n            if (online) {\n                workgroupOnlineOnNode = true;\n            }\n\n            this.workgroupsOnNodeData.push({\n                'workgroupId': id,\n                'usernames': usernames,\n                'avatarColor': avatarColor,\n                'online': online\n            });\n        }\n\n        this.isWorkgroupOnlineOnNode = workgroupOnlineOnNode;\n    }\n\n    getAlertNotifications() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        let args = {};\n        args.nodeId = this.nodeId;\n        args.periodId = periodId;\n        this.alertNotifications = this.NotificationService.getAlertNotifications(args);\n\n        let hasAlert = (this.alertNotifications.length > 0);\n        let hasNewAlert = this.hasNewAlert();\n\n        if (hasNewAlert) {\n            this.alertStatus = 'new';\n        } else if (hasAlert) {\n            this.alertStatus = 'dismissed';\n        } else {\n            this.alertStatus = null;\n        }\n    }\n\n    hasNewAlert() {\n        let result = false;\n\n        let nAlerts = this.alertNotifications.length;\n        for (let i = 0; i < nAlerts; i++) {\n            let alert = this.alertNotifications[i];\n            let toWorkgroupId = alert.toWorkgroupId;\n\n\n\n            if (!alert.timeDismissed) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n}\n\nNavItemController.$inject = [\n    '$element',\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$translate',\n    'ConfigService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentDataService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nconst NavItem = {\n    bindings: {\n        nodeId: '<',\n        showPosition: '<',\n        type: '<',\n        isPlanningNode: '<'\n    },\n    templateUrl: 'wise5/classroomMonitor/classroomMonitorComponents/nodeProgress/navItem/navItem.html',\n    controller: NavItemController\n};\n\nexport default NavItem;\n"]}