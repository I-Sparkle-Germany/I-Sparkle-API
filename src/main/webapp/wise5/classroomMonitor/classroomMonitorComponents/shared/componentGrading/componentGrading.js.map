{"version":3,"sources":["componentGrading.es6"],"names":["ComponentGradingController","$filter","$mdDialog","$scope","$timeout","AnnotationService","ConfigService","ProjectService","TeacherDataService","UtilService","$translate","$onInit","runId","getRunId","toUserInfo","getUserInfoByWorkgroupId","toWorkgroupId","periodId","$onChanges","changes","maxScore","currentValue","componentStates","getComponentStatesByWorkgroupIdAndComponentId","componentId","processAnnotations","$on","event","args","annotation","annotationNodeId","nodeId","annotationComponentId","getMaxScoreForComponent","showAllAnnotations","latestAnnotations","score","getLatestTeacherScoreAnnotationByStudentWorkId","componentStateId","autoScore","getLatestAutoScoreAnnotationByStudentWorkId","comment","getLatestTeacherCommentAnnotationByStudentWorkId","autoComment","getLatestAutoCommentAnnotationByStudentWorkId","getLatestComponentAnnotations","latestComment","type","data","value","latestAnnotationTime","getLatestAnnotationTime","result","n","length","latestComponentState","id","studentWorkId","latest","latestScore","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestAnnotation","time","convertToClientTimestamp","clientSaveTime","Date","getTime","fromWorkgroupId","getWorkgroupId","convertStringToNumber","localNotebookItemId","notebookItemId","createAnnotation","annotationId","saveAnnotation","then","setMaxScoreForComponent","saveProject","edit","angular","element","document","querySelector","focus","$event","$inject","ComponentGrading","bindings","isDisabled","templateUrl","controller"],"mappings":"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","file":"componentGrading.js","sourcesContent":["'use strict';\r\n\r\nclass ComponentGradingController {\r\n    constructor($filter,\r\n                $mdDialog,\r\n                $scope,\r\n                $timeout,\r\n                AnnotationService,\r\n                ConfigService,\r\n                ProjectService,\r\n                TeacherDataService,\r\n                UtilService,) {\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$scope = $scope;\r\n        this.$timeout = $timeout;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.$onInit = () => {\r\n            this.runId = this.ConfigService.getRunId();\r\n\r\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\r\n            if (toUserInfo) {\r\n                // set the period id\r\n                this.periodId = toUserInfo.periodId;\r\n            }\r\n        };\r\n\r\n        this.$onChanges = (changes) => {\r\n\r\n            if (changes.maxScore) {\r\n                this.maxScore = typeof changes.maxScore.currentValue === 'number' ? changes.maxScore.currentValue : 0;\r\n            }\r\n\r\n            this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.toWorkgroupId, this.componentId);\r\n\r\n            this.processAnnotations();\r\n        };\r\n\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n            // TODO: we're watching this here and in the parent component's controller; probably want to optimize!\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                let annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    let annotationNodeId = annotation.nodeId;\r\n                    let annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.processAnnotations();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('projectSaved', (event, args) => {\r\n            // update maxScore\r\n            this.maxScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\r\n        });\r\n\r\n    }\r\n\r\n    processAnnotations() {\r\n        if (this.showAllAnnotations) {\r\n            // we want to show all the latest annotation types (both teacher- and auto-generated)\r\n            this.latestAnnotations = {};\r\n            this.latestAnnotations.score = this.AnnotationService.getLatestTeacherScoreAnnotationByStudentWorkId(this.componentStateId);\r\n            this.latestAnnotations.autoScore = this.AnnotationService.getLatestAutoScoreAnnotationByStudentWorkId(this.componentStateId);\r\n            this.latestAnnotations.comment = this.AnnotationService.getLatestTeacherCommentAnnotationByStudentWorkId(this.componentStateId);\r\n            this.latestAnnotations.autoComment = this.AnnotationService.getLatestAutoCommentAnnotationByStudentWorkId(this.componentStateId);\r\n        } else {\r\n            // we only want to show the latest score and comment annotations (either teacher- or auto-generated)\r\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.toWorkgroupId);\r\n\r\n            if (this.latestAnnotations && this.latestAnnotations.comment) {\r\n                let latestComment = this.latestAnnotations.comment;\r\n                if (latestComment.type === 'comment') {\r\n                    this.comment = latestComment.data.value;\r\n                }\r\n            }\r\n\r\n            if (this.latestAnnotations && this.latestAnnotations.score) {\r\n                this.score = this.latestAnnotations.score.data.value;\r\n            }\r\n\r\n            this.latestAnnotationTime = this.getLatestAnnotationTime();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the latest comment is an auto comment and it's\r\n     * studentWorkId matches the latest component state's id\r\n     */\r\n    showAutoComment() {\r\n        let result = false;\r\n        if (this.latestAnnotations) {\r\n            let latestComment = this.latestAnnotations.comment;\r\n            if (latestComment && latestComment.type === 'autoComment') {\r\n                let n = this.componentStates.length;\r\n                if (n > 0) {\r\n                    let latestComponentState = this.componentStates[n-1]\r\n                    if (latestComponentState.id === latestComment.studentWorkId) {\r\n                        result = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are both teacher and auto annotations for this component state\r\n     */\r\n    hasTeacherAndAutoAnnotations() {\r\n        return (this.latestAnnotations.score || this.latestAnnotations.comment) &&\r\n               (this.latestAnnotations.autoScore || this.latestAnnotations.autoComment);\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are any teacher annotations for this component state\r\n     */\r\n    hasTeacherAnnotations() {\r\n        return this.latestAnnotations.score || this.latestAnnotations.comment;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are any auto annotations for this component state\r\n     */\r\n    hasAutoAnnotations() {\r\n        return this.latestAnnotations.autoScore || this.latestAnnotations.autoComment;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are no annotations for this component state\r\n     */\r\n    hasNoAnnotations() {\r\n        return !this.latestAnnotations.score && !this.latestAnnotations.comment && !this.latestAnnotations.autoScore && !this.latestAnnotations.autoComment;\r\n    }\r\n\r\n    /**\r\n     * Get the most recent annotation (from the current score and comment annotations)\r\n     * @return Object (latest annotation)\r\n     */\r\n    getLatestAnnotation() {\r\n        let latest = null;\r\n        let latestComment = this.latestAnnotations.comment;\r\n        let latestScore = this.latestAnnotations.score;\r\n\r\n        if (latestComment || latestScore) {\r\n            let commentSaveTime = latestComment ? latestComment.serverSaveTime : 0;\r\n            let scoreSaveTime = latestScore ? latestScore.serverSaveTime : 0;\r\n\r\n            if (commentSaveTime >= scoreSaveTime) {\r\n                latest = latestComment;\r\n            } else if (scoreSaveTime > commentSaveTime) {\r\n                latest = latestScore;\r\n            }\r\n        }\r\n\r\n        return latest;\r\n    }\r\n\r\n    /**\r\n     * Calculate the save time of the latest annotation\r\n     * @return Number (latest annotation post time)\r\n     */\r\n    getLatestAnnotationTime() {\r\n        let latest = this.getLatestAnnotation();\r\n        let time = 0;\r\n\r\n        if (latest) {\r\n            let serverSaveTime = latest.serverSaveTime;\r\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Save the annotation to the server\r\n     * @param type String to indicate which type of annotation to post\r\n     */\r\n    postAnnotation(type) {\r\n\r\n        if (this.runId != null &&\r\n            this.periodId != null &&\r\n            this.nodeId != null &&\r\n            this.componentId != null &&\r\n            this.toWorkgroupId != null &&\r\n            type) {\r\n\r\n            // get the current time\r\n            let clientSaveTime = new Date().getTime();\r\n\r\n            // get the logged in teacher's id\r\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n            // get the value\r\n            let value = null;\r\n            if (type === 'score') {\r\n                value = this.score;\r\n                // convert the value to a number if possible\r\n                value = this.UtilService.convertStringToNumber(value);\r\n            } else if (type === 'comment') {\r\n                value = this.comment;\r\n            }\r\n\r\n            if ((type === 'comment' && value) || (type === 'score' && typeof value === 'number' && value >= 0)) {\r\n                let data = {};\r\n                data.value = value;\r\n                let localNotebookItemId = null;  // we're not grading notebook item in this view.\r\n                let notebookItemId = null;  // we're not grading notebook item in this view.\r\n\r\n                // create the annotation object\r\n                let annotation = this.AnnotationService.createAnnotation(\r\n                    this.annotationId,\r\n                    this.runId,\r\n                    this.periodId,\r\n                    this.fromWorkgroupId,\r\n                    this.toWorkgroupId,\r\n                    this.nodeId,\r\n                    this.componentId,\r\n                    this.componentStateId,\r\n                    localNotebookItemId,\r\n                    notebookItemId,\r\n                    type,\r\n                    data,\r\n                    clientSaveTime);\r\n\r\n                // save the annotation to the server\r\n                this.AnnotationService.saveAnnotation(annotation).then(result => {\r\n\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the maxScore of this component to the server\r\n     */\r\n    updateMaxScore() {\r\n\r\n        if (this.runId != null &&\r\n            this.periodId != null &&\r\n            this.nodeId != null &&\r\n            this.componentId != null) {\r\n\r\n            // get the new maxScore\r\n            let maxScore = this.maxScore;\r\n            // convert to number if possible\r\n            maxScore = this.UtilService.convertStringToNumber(maxScore);\r\n\r\n            if (typeof maxScore === 'number' && maxScore >= 0) {\r\n                this.ProjectService.setMaxScoreForComponent(this.nodeId, this.componentId, maxScore);\r\n                this.ProjectService.saveProject();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows (or hides) the teacher comment field when user wants to override an automated comment\r\n     */\r\n    editComment() {\r\n        this.edit = !this.edit;\r\n\r\n        if (this.edit) {\r\n            let componentId = this.componentId;\r\n            let toWorkgroupId = this.toWorkgroupId;\r\n            // if we're showing the comment field, focus it\r\n            this.$timeout(\r\n                () => {\r\n                    angular.element(document.querySelector('#commentInput_' + componentId + '_' + toWorkgroupId)).focus();\r\n                }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Focuses the score input when user wants to override an automated score\r\n     * @param an angular trigger event\r\n     */\r\n    editScore($event) {\r\n        angular.element(document.querySelector('#scoreInput_' + this.componentId + '_' + this.toWorkgroupId)).focus();\r\n    }\r\n}\r\n\r\nComponentGradingController.$inject = [\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$scope',\r\n    '$timeout',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'TeacherDataService',\r\n    'UtilService'\r\n];\r\n\r\nconst ComponentGrading = {\r\n    bindings: {\r\n        componentId: '<',\r\n        componentStateId: '<',\r\n        isDisabled: '<',\r\n        fromWorkgroupId: '<',\r\n        maxScore: '<',\r\n        nodeId: '<',\r\n        showAllAnnotations: '<',\r\n        toWorkgroupId: '<'\r\n    },\r\n    templateUrl: 'wise5/classroomMonitor/classroomMonitorComponents/shared/componentGrading/componentGrading.html',\r\n    controller: ComponentGradingController\r\n};\r\n\r\nexport default ComponentGrading;\r\n"]}