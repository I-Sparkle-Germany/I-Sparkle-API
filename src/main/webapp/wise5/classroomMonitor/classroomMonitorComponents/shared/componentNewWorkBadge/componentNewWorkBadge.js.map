{"version":3,"sources":["componentNewWorkBadge.es6"],"names":["ComponentNewWorkBadgeController","AnnotationService","TeacherDataService","$scope","$onInit","hasNewWork","checkHasNewWork","$on","event","args","annotation","annotationNodeId","nodeId","annotationComponentId","componentId","latestComponentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","workgroupId","latestAnnotations","getLatestComponentAnnotations","latestComponentStateTime","serverSaveTime","latestTeacherComment","latestTeacherScore","latestTeacherAnnotationTime","comment","score","commentSaveTime","scoreSaveTime","$inject","ComponentNewWorkBadge","bindings","template","controller"],"mappings":"AAAA;;;;;;;;;;IAEMA,+B;AACF,6CAAYC,iBAAZ,EACYC,kBADZ,EAEYC,MAFZ,EAEoB;AAAA;;AAAA;;AAChB,aAAKF,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,MAAL,GAAcA,MAAd;;AAEA,aAAKC,OAAL,GAAe,YAAM;AACjB,kBAAKC,UAAL,GAAkB,KAAlB;AACA,kBAAKC,eAAL;AACH,SAHD;;AAKA,aAAKH,MAAL,CAAYI,GAAZ,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxD,gBAAIA,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAIC,aAAaD,KAAKC,UAAtB;;AAEA,oBAAIA,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAIC,mBAAmBD,WAAWE,MAAlC;AACA,wBAAIC,wBAAwBH,WAAWI,WAAvC;;AAEA;AACA,wBAAI,MAAKF,MAAL,KAAgBD,gBAAhB,IACA,MAAKG,WAAL,KAAqBD,qBADzB,EACgD;;AAE5C;AACA,8BAAKP,eAAL;AACH;AACJ;AACJ;AACJ,SArBD;AAsBH;;;;0CAEiB;AACd,gBAAIS,uBAAuB,KAAKb,kBAAL,CAAwBc,wDAAxB,CAAiF,KAAKC,WAAtF,EAAmG,KAAKL,MAAxG,EAAgH,KAAKE,WAArH,CAA3B;AACA,gBAAII,oBAAoB,KAAKjB,iBAAL,CAAuBkB,6BAAvB,CAAqD,KAAKP,MAA1D,EAAkE,KAAKE,WAAvE,EAAoF,KAAKG,WAAzF,EAAsG,IAAtG,EAA4G,SAA5G,CAAxB;;AAEA,gBAAIF,oBAAJ,EAA0B;AACtB;;AAEA,oBAAIK,2BAA2BL,qBAAqBM,cAApD;AACA,oBAAIC,uBAAuB,IAA3B;AACA,oBAAIC,qBAAqB,IAAzB;AACA,oBAAIC,8BAA8B,CAAlC;;AAEA,oBAAIN,qBAAqBA,kBAAkBO,OAA3C,EAAoD;AAChDH,2CAAuBJ,kBAAkBO,OAAzC;AACH;;AAED,oBAAIP,qBAAqBA,kBAAkBQ,KAA3C,EAAkD;AAC9C,wBAAIR,kBAAkBQ,KAAlB,KAA4B,WAAhC,EAA6C;AACzCH,6CAAqBL,kBAAkBQ,KAAvC;AACH;AACJ;;AAED,oBAAIC,kBAAkBL,uBAAuBA,qBAAqBD,cAA5C,GAA6D,CAAnF;AACA,oBAAIO,gBAAgBL,qBAAqBA,mBAAmBF,cAAxC,GAAyD,CAA7E;;AAEA,oBAAIM,mBAAmBC,aAAvB,EAAsC;AAClCJ,kDAA8BG,eAA9B;AACH,iBAFD,MAEO,IAAIC,gBAAgBD,eAApB,EAAqC;AACxCH,kDAA8BI,aAA9B;AACH;;AAED,oBAAIR,2BAA2BI,2BAA/B,EAA4D;AACxD;AACA,yBAAKnB,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;;;;;;AAGLL,gCAAgC6B,OAAhC,GAA0C,CACtC,mBADsC,EAEtC,oBAFsC,EAGtC,QAHsC,CAA1C;;AAMA,IAAMC,wBAAwB;AAC1BC,cAAU;AACNd,qBAAa,GADP;AAENH,qBAAa,GAFP;AAGNF,gBAAQ;AAHF,KADgB;AAM1BoB,yGAN0B;AAQ1BC,gBAAYjC;AARc,CAA9B;;kBAWe8B,qB","file":"componentNewWorkBadge.js","sourcesContent":["\"use strict\";\n\nclass ComponentNewWorkBadgeController {\n    constructor(AnnotationService,\n                TeacherDataService,\n                $scope) {\n        this.AnnotationService = AnnotationService;\n        this.TeacherDataService = TeacherDataService;\n        this.$scope = $scope;\n\n        this.$onInit = () => {\n            this.hasNewWork = false;\n            this.checkHasNewWork();\n        };\n\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    let annotationNodeId = annotation.nodeId;\n                    let annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // re-check for new work\n                        this.checkHasNewWork();\n                    }\n                }\n            }\n        });\n    };\n\n    checkHasNewWork() {\n        let latestComponentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(this.workgroupId, this.nodeId, this.componentId);\n        let latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId, null, 'comment');\n\n        if (latestComponentState) {\n            // there is work for this component\n\n            let latestComponentStateTime = latestComponentState.serverSaveTime;\n            let latestTeacherComment = null;\n            let latestTeacherScore = null;\n            let latestTeacherAnnotationTime = 0;\n\n            if (latestAnnotations && latestAnnotations.comment) {\n                latestTeacherComment = latestAnnotations.comment;\n            }\n\n            if (latestAnnotations && latestAnnotations.score) {\n                if (latestAnnotations.score !== 'autoScore') {\n                    latestTeacherScore = latestAnnotations.score;\n                }\n            }\n\n            let commentSaveTime = latestTeacherComment ? latestTeacherComment.serverSaveTime : 0;\n            let scoreSaveTime = latestTeacherScore ? latestTeacherScore.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latestTeacherAnnotationTime = commentSaveTime;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latestTeacherAnnotationTime = scoreSaveTime;\n            }\n\n            if (latestComponentStateTime > latestTeacherAnnotationTime) {\n                // latest component state is newer than latest annotation, so work is new\n                this.hasNewWork = true;\n            }\n        }\n    }\n}\n\nComponentNewWorkBadgeController.$inject = [\n    'AnnotationService',\n    'TeacherDataService',\n    '$scope'\n];\n\nconst ComponentNewWorkBadge = {\n    bindings: {\n        workgroupId: '<',\n        componentId: '<',\n        nodeId: '<'\n    },\n    template:\n        `<span ng-if=\"$ctrl.hasNewWork\" class=\"badge badge--info\">{{ 'NEW' | translate }}</span>`,\n    controller: ComponentNewWorkBadgeController\n};\n\nexport default ComponentNewWorkBadge;\n"]}