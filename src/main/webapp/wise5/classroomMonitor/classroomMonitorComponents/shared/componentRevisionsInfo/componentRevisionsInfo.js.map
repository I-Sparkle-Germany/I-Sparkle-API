{"version":3,"sources":["componentRevisionsInfo.es6"],"names":["ComponentRevisionsInfoController","$filter","$mdDialog","$scope","ConfigService","TeacherDataService","$translate","$onInit","runId","getRunId","toUserInfo","getUserInfoByWorkgroupId","toWorkgroupId","periodId","usernamesArray","getUsernamesByWorkgroupId","usernames","map","obj","name","join","$onChanges","changes","latest","active","componentStates","getComponentStatesByWorkgroupIdAndComponentId","componentId","total","length","componentState","push","serverSaveTime","latestComponentStateTime","convertToClientTimestamp","latestComponentStateIsSubmit","isSubmit","$event","workgroupId","nodeId","show","parent","angular","element","document","body","targetEvent","fullscreen","template","locals","controller","RevisionsController","close","hide","$inject","ComponentRevisionsInfo","bindings"],"mappings":"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","file":"componentRevisionsInfo.js","sourcesContent":["'use strict';\n\nclass ComponentRevisionsInfoController {\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                ConfigService,\n                TeacherDataService) {\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.$onInit = () => {\n            this.runId = this.ConfigService.getRunId();\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n            if (toUserInfo) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n\n            // get the workgroup user names\n            let usernamesArray = this.ConfigService.getUsernamesByWorkgroupId(this.toWorkgroupId);\n            this.usernames = usernamesArray.map( (obj) => {\n                return obj.name;\n            }).join(', ');\n        };\n\n        this.$onChanges = (changes) => {\n            let latest = null;\n\n            if (this.active) {\n                // get all the componentStates for this workgroup\n                this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.toWorkgroupId, this.componentId);\n                let total = this.componentStates.length;\n\n                if (total > 0) {\n                    latest = this.componentStates[total-1];\n                }\n            } else if (this.componentState){\n                // we're only showing info for a single component state\n                latest = this.componentState;\n                this.componentStates = [];\n                this.componentStates.push(latest);\n            }\n\n            if (latest) {\n                // calculate the save time of the latest component state\n                let serverSaveTime = latest.serverSaveTime;\n                this.latestComponentStateTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // check if the latest component state is a submit\n                this.latestComponentStateIsSubmit = latest.isSubmit;\n            }\n        };\n    }\n\n    showRevisions($event) {\n        let workgroupId = this.toWorkgroupId;\n        let componentId = this.componentId;\n        let nodeId = this.nodeId;\n        let usernames = this.usernames;\n        let componentStates = this.componentStates;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            fullscreen: true,\n            template:\n                `<md-dialog aria-label=\"{{ 'revisionsForTeam' | translate:{teamNames: usernames} }}\" class=\"dialog--wider\">\n                    <md-toolbar>\n                        <div class=\"md-toolbar-tools\">\n                            <h2 class=\"overflow--ellipsis\">{{ 'revisionsForTeam' | translate:{teamNames: usernames} }}</h2>\n                        </div>\n                    </md-toolbar>\n                    <md-dialog-content>\n                        <div class=\"md-dialog-content gray-lighter-bg\">\n                            <workgroup-component-revisions component-states=\"componentStates\"\n                                                           node-id=\"{{ nodeId }}\"\n                                                           workgroup-id=\"{{ workgroupId }}\"></workgroup-component-revisions>\n                        </div>\n                    </md-dialog-content>\n                    <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                        <md-button class=\"md-primary\" ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\n                    </md-dialog-actions>\n                </md-dialog>`,\n            locals: {\n                workgroupId: workgroupId,\n                componentId: componentId,\n                nodeId: nodeId,\n                usernames: usernames,\n                componentStates: componentStates\n            },\n            controller: RevisionsController\n        });\n        function RevisionsController($scope, $mdDialog, workgroupId, componentId, nodeId, usernames, componentStates) {\n            $scope.workgroupId = workgroupId;\n            $scope.componentId = componentId;\n            $scope.nodeId = nodeId;\n            $scope.usernames = usernames;\n            $scope.componentStates = componentStates;\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"workgroupId\", \"componentId\", \"nodeId\", \"usernames\", \"componentStates\"];\n    }\n}\n\nComponentRevisionsInfoController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    'ConfigService',\n    'TeacherDataService'\n];\n\nconst ComponentRevisionsInfo = {\n    bindings: {\n        active: '<',\n        componentId: '<',\n        componentState: '<',\n        nodeId: '<',\n        toWorkgroupId: '<'\n    },\n    template:\n        `<div class=\"component__actions__info component--grading__actions__info md-caption\">\n            <span ng-if=\"$ctrl.componentStates.length > 0\">\n                <span ng-if=\"$ctrl.latestComponentStateIsSubmit\">{{ 'SUBMITTED' | translate }} </span>\n                <span ng-if=\"!$ctrl.latestComponentStateIsSubmit\">{{ 'SAVED' | translate }} </span>\n                <span ng-if=\"$ctrl.active\">\n                    <span class=\"component__actions__more\" am-time-ago=\"$ctrl.latestComponentStateTime\"></span>\n                    <md-tooltip md-direction=\"top\">{{ $ctrl.latestComponentStateTime | amDateFormat:'ddd MMM D YYYY, h:mm a' }}</md-tooltip>\n                </span>\n                <span ng-if=\"!$ctrl.active\">{{ $ctrl.latestComponentStateTime | amDateFormat:'ddd MMM D YYYY, h:mm a' }}</span>\n            </span>\n            <span ng-if=\"$ctrl.componentStates.length === 0\">{{ 'TEAM_HAS_NOT_SAVED_ANY_WORK' | translate }}</span>\n            <span ng-if=\"$ctrl.active && $ctrl.componentStates.length > 1\">\n                &#8226;&nbsp;<a ng-click=\"$ctrl.showRevisions($event)\" translate=\"seeRevisions\"></a>\n           </span>\n    </div>`,\n    controller: ComponentRevisionsInfoController\n};\n\nexport default ComponentRevisionsInfo;\n"]}