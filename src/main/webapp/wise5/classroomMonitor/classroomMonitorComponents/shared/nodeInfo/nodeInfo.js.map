{"version":3,"sources":["nodeInfo.es6"],"names":["NodeInfoController","ProjectService","UtilService","$onInit","nodeContent","getNodeContent","components","getComponents","color","getNodeIconByNodeId","nodeId","result","node","getNodeById","assessmentItemIndex","c","length","component","isDisabled","hasWork","componentHasWork","rubric","replaceAssetPaths","componentType","getComponentTypeLabel","$inject","NodeInfo","bindings","controller","template"],"mappings":"AAAA;;;;;;;;;;IAEMA,kB;AACF,gCAAYC,cAAZ,EACYC,WADZ,EACyB;AAAA;;AAAA;;AACrB,aAAKD,cAAL,GAAsBA,cAAtB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;;AAEA,aAAKC,OAAL,GAAe,YAAM;AACjB,kBAAKC,WAAL,GAAmB,MAAKC,cAAL,EAAnB;AACA,kBAAKC,UAAL,GAAkB,MAAKC,aAAL,EAAlB;;AAEA,kBAAKC,KAAL,GAAa,MAAKP,cAAL,CAAoBQ,mBAApB,CAAwC,MAAKC,MAA7C,EAAqDF,KAAlE;AACH,SALD;AAMH;;;;;;AAED;;;;yCAIiB;AACb,gBAAIG,SAAS,IAAb;;AAEA,gBAAIC,OAAO,KAAKX,cAAL,CAAoBY,WAApB,CAAgC,KAAKH,MAArC,CAAX;AACA,gBAAIE,QAAQ,IAAZ,EAAkB;AACd;AACAD,yBAASC,IAAT;AACH;;AAED,mBAAOD,MAAP;AACH;;AAED;;;;;;;wCAIgB;AACZ,gBAAIL,aAAa,IAAjB;;AAEA,gBAAI,KAAKF,WAAT,EAAsB;AAClBE,6BAAa,KAAKF,WAAL,CAAiBE,UAA9B;AACA,oBAAIQ,sBAAsB,CAA1B;;AAEA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,WAAWU,MAA/B,EAAuCD,GAAvC,EAA4C;AACxC,wBAAIE,YAAYX,WAAWS,CAAX,CAAhB;;AAEA,wBAAI,KAAKG,UAAT,EAAqB;AACjBD,kCAAUC,UAAV,GAAuB,IAAvB;AACH;;AAEDD,8BAAUE,OAAV,GAAoB,KAAKlB,cAAL,CAAoBmB,gBAApB,CAAqCH,SAArC,CAApB;AACA,wBAAIA,UAAUE,OAAd,EAAuB;AACnBL;AACAG,kCAAUH,mBAAV,GAAgCA,mBAAhC;AACH;AACJ;AACJ;;AAED,mBAAOR,UAAP;AACH;;AAED;;;;;;;;gDAKwBe,M,EAAQ;AAC5B,mBAAO,KAAKpB,cAAL,CAAoBqB,iBAApB,CAAsCD,MAAtC,CAAP;AACH;;AAED;;;;;;;;8CAKsBE,a,EAAe;AACjC,mBAAO,KAAKrB,WAAL,CAAiBsB,qBAAjB,CAAuCD,aAAvC,CAAP;AACH;;;;;;AAGLvB,mBAAmByB,OAAnB,GAA6B,CACzB,gBADyB,EAEzB,aAFyB,CAA7B;;AAKA,IAAMC,WAAW;AACbC,cAAU;AACNjB,gBAAQ;AADF,KADG;AAIbkB,gBAAY5B,kBAJC;AAKb6B;AALa,CAAjB;;kBAwDeH,Q","file":"nodeInfo.js","sourcesContent":["\"use strict\";\n\nclass NodeInfoController {\n    constructor(ProjectService,\n                UtilService) {\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.$onInit = () => {\n            this.nodeContent = this.getNodeContent();\n            this.components = this.getComponents();\n\n            this.color = this.ProjectService.getNodeIconByNodeId(this.nodeId).color;\n        };\n    };\n\n    /**\n     * Get the content for this node\n     * @return object with the node content\n     */\n    getNodeContent() {\n        let result = null;\n\n        let node = this.ProjectService.getNodeById(this.nodeId);\n        if (node != null) {\n            // field that will hold the node content\n            result = node;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the components for this node with student work.\n     * @return array that contains the content for the components\n     */\n    getComponents() {\n        let components = null;\n\n        if (this.nodeContent) {\n            components = this.nodeContent.components;\n            let assessmentItemIndex = 0;\n\n            for (let c = 0; c < components.length; c++) {\n                let component = components[c];\n\n                if (this.isDisabled) {\n                    component.isDisabled = true;\n                }\n\n                component.hasWork = this.ProjectService.componentHasWork(component);\n                if (component.hasWork) {\n                    assessmentItemIndex++;\n                    component.assessmentItemIndex = assessmentItemIndex;\n                }\n            }\n        }\n\n        return components;\n    }\n\n    /**\n     * Get a rubric with the wise asset paths replaced\n     * @param rubric string\n     * @return string containing rubric html content\n     */\n    getRubricWithAssetPaths(rubric) {\n        return this.ProjectService.replaceAssetPaths(rubric);\n    }\n\n    /**\n     * Get the component type label for the given component type\n     * @param componentType string\n     * @return string of the component type label\n     */\n    getComponentTypeLabel(componentType) {\n        return this.UtilService.getComponentTypeLabel(componentType);\n    }\n}\n\nNodeInfoController.$inject = [\n    'ProjectService',\n    'UtilService'\n];\n\nconst NodeInfo = {\n    bindings: {\n        nodeId: '@',\n    },\n    controller: NodeInfoController,\n    template:\n        `<md-card ng-if=\"$ctrl.nodeContent.rubric\" class=\"annotations annotations--info\">\n            <md-card-title class=\"annotations__header\">\n                <div class=\"annotations__avatar md-avatar avatar--icon md-36 avatar md-whiteframe-1dp\">\n                    <md-icon class=\"annotations__icon md-36 info\">info</md-icon>\n                </div>\n                <div class=\"annotations__title\" layout=\"row\" flex>\n                    <span>{{ 'STEP_INFO' | translate }}</span>\n                </div>\n            </md-card-title>\n            <md-card-content class=\"annotations__body md-body-1\">\n                <div ng-bind-html=\"$ctrl.getRubricWithAssetPaths($ctrl.nodeContent.rubric)\"></div>\n            </md-card-content>\n        </md-card>\n        <md-card class=\"node-info node-content\" style=\"border-color: {{ $ctrl.color }};\">\n            <md-card-content>\n                <div id=\"component_{{component.id}}\" ng-repeat='component in $ctrl.components' class=\"component\">\n                    <md-divider class=\"divider divider--dashed\" ng-if=\"!$first\"></md-divider>\n                    <h3 ng-if=\"component.hasWork\"\n                        class=\"accent-2 md-body-2 gray-lightest-bg\n                            component__header\">\n                        {{ component.assessmentItemIndex + '. ' + $ctrl.getComponentTypeLabel(component.type) }}&nbsp;\n                    </h3>\n                    <component ng-if='component.showPreviousWorkNodeId != null && component.showPreviousWorkComponentId != null && component.showPreviousWorkNodeId != \"\" && component.showPreviousWorkComponentId != \"\"'\n                               node-id='{{component.showPreviousWorkNodeId}}'\n                               component-id='{{component.showPreviousWorkComponentId}}'\n                               original-node-id={{$ctrl.nodeId}}\n                               original-component-id={{component.id}}\n                               mode='student'></component>\n                    <component ng-if='component.showPreviousWorkNodeId == null || component.showPreviousWorkComponentId == null || component.showPreviousWorkNodeId == \"\" || component.showPreviousWorkComponentId == \"\"'\n                               node-id='{{$ctrl.nodeId}}'\n                               component-id='{{component.id}}'\n                               mode='student'></component>\n                    <md-card class=\"annotations annotations--info\" ng-if=\"component.rubric\">\n                       <md-card-title class=\"annotations__header\">\n                           <div class=\"annotations__avatar md-avatar avatar--icon md-36 avatar md-whiteframe-1dp\">\n                               <md-icon class=\"annotations__icon md-36 info\">info</md-icon>\n                           </div>\n                           <div class=\"annotations__title\" layout=\"row\" flex>\n                               <span>{{ 'ITEM_INFO' | translate }}</span>\n                           </div>\n                       </md-card-title>\n                       <md-card-content class=\"annotations__body md-body-1\">\n                           <div ng-bind-html=\"$ctrl.getRubricWithAssetPaths(component.rubric)\"></div>\n                       </md-card-content>\n                    </md-card>\n                </div>\n            </md-card-content>\n        </md-card>`\n};\n\nexport default NodeInfo;\n"]}