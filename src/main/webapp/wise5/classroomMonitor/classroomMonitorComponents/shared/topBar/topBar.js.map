{"version":3,"sources":["src/main/webapp/wise5/classroomMonitor/classroomMonitorComponents/shared/topBar/topBar.es6"],"names":["TopBarController","$rootScope","ConfigService","ProjectService","TeacherDataService","workgroupId","getWorkgroupId","parseInt","Math","random","avatarColor","getAvatarColorForWorkgroupId","userInfo","getMyUserInfo","$onChanges","changesObj","notifications","setNotifications","$on","event","notification","themePath","getThemePath","contextPath","getContextPath","userNotifications","filter","toWorkgroupId","newNotifications","timeDismissed","dismissedNotifications","isAnyPeriodPaused","context","nodeId","componentId","componentType","category","eventData","saveEvent","$broadcast","$inject","TopBar","bindings","logoPath","projectId","projectTitle","runId","controller","template"],"mappings":"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","file":"topBar.js","sourcesContent":["'use strict';\n\nclass TopBarController {\n    constructor($rootScope,\n                ConfigService,\n                ProjectService,\n                TeacherDataService) {\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n\n        if (this.workgroupId == null) {\n            // the teacher doesn't have a workgroup id so we will use a random number\n            this.workgroupId = parseInt(100 * Math.random());\n        }\n\n        this.avatarColor = this.ConfigService.getAvatarColorForWorkgroupId(this.workgroupId);\n        this.userInfo = this.ConfigService.getMyUserInfo();\n\n        this.$onChanges = (changesObj) => {\n            if (changesObj.notifications) {\n                this.setNotifications();\n            }\n        };\n\n        this.$rootScope.$on('notificationChanged', (event, notification) => {\n          this.setNotifications();\n        });\n        this.themePath = this.ProjectService.getThemePath();\n        this.contextPath = this.ConfigService.getContextPath();\n    }\n\n    /**\n     * Find all teacher notifications and separate into new and dismissed arrays\n     * TODO: move to TeacherDataService?\n     */\n    setNotifications() {\n        // get all notifications for the logged in teacher\n        // TODO: take into account shared teacher users!\n        let userNotifications = this.notifications.filter(\n            notification => {\n                return (notification.toWorkgroupId === this.workgroupId);\n            }\n        );\n\n        this.newNotifications = userNotifications.filter(\n            notification => {\n                return (notification.timeDismissed == null);\n            }\n        );\n\n        this.dismissedNotifications = userNotifications.filter(\n            notification => {\n                return (notification.timeDismissed != null);\n            }\n        );\n    }\n\n    /**\n     * Check whether any period in the run is paused\n     * @return Boolean whether any of the periods are paused\n     */\n    isAnyPeriodPaused() {\n        return this.TeacherDataService.isAnyPeriodPaused();\n    }\n\n    goHome() {\n        var context = \"ClassroomMonitor\";\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"goHomeButtonClicked\";\n        var eventData = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, eventData);\n        this.$rootScope.$broadcast('goHome');\n    }\n\n    logOut() {\n        var context = \"ClassroomMonitor\";\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"logOutButtonClicked\";\n        var eventData = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, eventData);\n        this.$rootScope.$broadcast('logOut');\n    }\n}\n\nTopBarController.$inject = [\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService'\n];\n\nconst TopBar = {\n    bindings: {\n        logoPath: '@',\n        notifications: '<',\n        projectId: '<',\n        projectTitle: '<',\n        runId: '<'\n    },\n    controller: TopBarController,\n    template:\n        `<md-toolbar class=\"l-header\">\n            <div class=\"md-toolbar-tools\">\n                <span class=\"md-button logo-link\">\n                    <a href=\"{{$ctrl.contextPath}}/teacher\" target=\"_self\">\n                        <img ng-src=\"{{ $ctrl.logoPath }}\" alt=\"{{ 'WISE_LOGO' | translate }}\" class=\"logo\" />\n                    </a>\n                </span>\n                <h3>{{ $ctrl.projectTitle }} <span class=\"md-caption\">({{ 'RUN_ID_DISPLAY' | translate:{id: $ctrl.runId} }})</span></h3>\n                <span flex></span>\n                <md-menu md-position-mode=\"target-right target\" md-offset=\"52 26\">\n                    <md-button aria-label=\"{{ 'ALERTS' | translate }}\" class=\"md-icon-button notification-btn\" ng-click=\"$mdMenu.open($event)\">\n                        <span ng-show=\"$ctrl.newNotifications.length\" class=\"notification-count\">{{$ctrl.newNotifications.length}}</span>\n                        <md-icon md-menu-origin> notifications </md-icon>\n                    </md-button>\n                    <md-menu-content width=\"5\" class=\"account-menu\">\n                        <notifications-menu new-notifications=\"$ctrl.newNotifications\" dismissed-notifications=\"$ctrl.dismissedNotifications\" with-pause=\"true\"></notifications-menu>\n                    </md-menu-content>\n                </md-menu>\n                <md-menu md-position-mode=\"target-right target\" md-offset=\"40 26\">\n                    <md-button aria-label=\"{{ 'pauseStudentScreens' | translate }}\"\n                               class=\"md-icon-button\"\n                               ng-class=\"{ 'has-indicator has-indicator--icon-button': $ctrl.isAnyPeriodPaused() }\"\n                               ng-click=\"$mdMenu.open($event)\">\n                        <md-icon md-menu-origin ng-if=\"$ctrl.isAnyPeriodPaused()\"> lock </md-icon>\n                        <md-icon md-menu-origin ng-if=\"!$ctrl.isAnyPeriodPaused()\"> lock_open </md-icon>\n                    </md-button>\n                    <md-menu-content width=\"5\" class=\"account-menu\">\n                        <pause-screens-menu></pause-screens-menu>\n                    </md-menu-content>\n                </md-menu>\n                <md-menu id='accountMenu' md-position-mode=\"target-right target\" md-offset=\"8 26\">\n                    <md-button aria-label=\"{{ 'USER_MENU' | translate }}\" class=\"md-icon-button\" ng-click=\"$mdMenu.open($event)\">\n                        <md-icon md-menu-origin> account_box </md-icon>\n                    </md-button>\n                    <md-menu-content width=\"5\" class=\"account-menu\">\n                        <ng-include src=\"$ctrl.themePath + '/templates/teacherAccountMenu.html'\"></ng-include>\n                    </md-menu-content>\n                </md-menu>\n            </div>\n        </md-toolbar>\n`\n};\n\nexport default TopBar;\n"]}