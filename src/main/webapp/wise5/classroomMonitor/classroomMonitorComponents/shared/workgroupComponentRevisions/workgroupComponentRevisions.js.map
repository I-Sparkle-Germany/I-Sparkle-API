{"version":3,"sources":["workgroupComponentRevisions.es6"],"names":["WorkgroupComponentRevisionsController","moment","AnnotationService","ConfigService","TeacherDataService","$onInit","increment","totalShown","$onChanges","populateData","data","total","componentStates","getNodeEnteredEvents","then","result","events","nodeVisits","length","i","push","serverSaveTime","states","nVisits","cStatesIndex","componentState","id","componentSaveTime","nVisitsIndex","nodeVisit","visitSaveTime","isSameOrAfter","clientSaveTime","convertToClientTimestamp","visitsIndex","nStates","statesIndex","state","isRevision","isSubmit","latestAnnotations","getAnnotationsByStudentWorkId","latestIndex","type","params","getAnnotations","getEvents","getStudentWork","event","nodeId","workgroupId","retrieveStudentData","time","inview","showMore","$inject","WorkgroupComponentRevisions","bindings","template","controller"],"mappings":"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","file":"workgroupComponentRevisions.js","sourcesContent":["\"use strict\";\r\n\r\nclass WorkgroupComponentRevisionsController {\r\n    constructor(moment,\r\n                AnnotationService,\r\n                ConfigService,\r\n                TeacherDataService) {\r\n        this.moment = moment;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.TeacherDataService = TeacherDataService;\r\n\r\n        this.$onInit = () => {\r\n            /**\r\n             * Set a constant specifying the number of additional component\r\n             * states to show each time more states are shown\r\n             */\r\n            this.increment = 5;\r\n            this.totalShown = this.increment;\r\n        }\r\n\r\n        this.$onChanges = () => {\r\n            this.populateData();\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Set the revisions for this workgroup and component.\r\n     * A component state counts as a revision if it is a submit, has an\r\n     * annotation associated with it, or is the last component state for a node\r\n     * visit.\r\n     */\r\n    populateData() {\r\n        // create a data object that holds the revisions (by componentState id)\r\n        this.data = {};\r\n        this.total = 0;\r\n\r\n        // add revisions to the data object\r\n        if (this.componentStates) {\r\n            this.getNodeEnteredEvents().then((result) => {\r\n                let events = result.events;\r\n                let nodeVisits = [];\r\n                if (events.length) {\r\n                    for (let i = 0; i < events.length; i++) {\r\n                        nodeVisits.push(\r\n                            {\r\n                                serverSaveTime: events[i].serverSaveTime,\r\n                                states: []\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                let nVisits = nodeVisits.length;\r\n\r\n                // group all component states by node visit\r\n                for (let cStatesIndex = this.componentStates.length-1;\r\n                        cStatesIndex > -1; cStatesIndex--) {\r\n                    let componentState = this.componentStates[cStatesIndex];\r\n                    let id = componentState.id;\r\n                    let componentSaveTime = componentState.serverSaveTime;\r\n                    if (nVisits > 0) {\r\n                        // add state to corresponding node visit\r\n                        for (let nVisitsIndex = nVisits-1; nVisitsIndex > -1;\r\n                                nVisitsIndex--) {\r\n                            let nodeVisit = nodeVisits[nVisitsIndex];\r\n                            let visitSaveTime = nodeVisit.serverSaveTime;\r\n                            if (this.moment(componentSaveTime).isSameOrAfter(visitSaveTime)) {\r\n                                nodeVisit.states.push(componentState);\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        /*\r\n                         * We don't have any node visits, so count all\r\n                         * all states as revisions.\r\n                         */\r\n                        this.total++;\r\n                        this.data[id] = {\r\n                            clientSaveTime: this.convertToClientTimestamp(componentSaveTime),\r\n                            componentState: componentState\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // find revisions in each node visit and add to model\r\n                for (let visitsIndex = 0; visitsIndex < nVisits; visitsIndex++) {\r\n                    let states = nodeVisits[visitsIndex].states;\r\n                    let nStates = states.length;\r\n\r\n                    // check if each state is a revision\r\n                    for (let statesIndex = 0; statesIndex < nStates; statesIndex++) {\r\n                        let state = states[statesIndex];\r\n                        let isRevision = false;\r\n                        if (statesIndex === 0) {\r\n                            /*\r\n                             * The latest state for a visit always\r\n                             * counts as a revision\r\n                             */\r\n                            isRevision = true;\r\n                        } else if (state.isSubmit) {\r\n                            // any submit counts as a revision\r\n                            isRevision = true;\r\n                        } else {\r\n                            /*\r\n                             * Double check to see if there is an annotation\r\n                             * associated with the component.\r\n                             */\r\n                            let latestAnnotations = this.AnnotationService.getAnnotationsByStudentWorkId(state.id);\r\n                            for (let latestIndex = 0; latestIndex < latestAnnotations.length; latestIndex++) {\r\n                                let type = latestAnnotations[latestIndex].type;\r\n                                if (type === 'score' || type === 'autoScore'\r\n                                    || type === 'comment' || type === 'autoComment') {\r\n                                    isRevision = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (isRevision) {\r\n                            this.total++;\r\n                            this.data[state.id] = {\r\n                                clientSaveTime: this.convertToClientTimestamp(state.serverSaveTime),\r\n                                componentState: state\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the nodeEntered events for this workgroup and this node\r\n     */\r\n    getNodeEnteredEvents() {\r\n        let params = {\r\n            getAnnotations: false,\r\n            getEvents: true,\r\n            getStudentWork: false,\r\n            event: 'nodeEntered',\r\n            nodeId: this.nodeId,\r\n            workgroupId: this.workgroupId\r\n        }\r\n        return this.TeacherDataService.retrieveStudentData(params);\r\n    }\r\n\r\n    convertToClientTimestamp(time) {\r\n        return this.ConfigService.convertToClientTimestamp(time);\r\n    }\r\n\r\n    /**\r\n     * Increase the number of component states shown by 5\r\n     */\r\n    showMore() {\r\n        this.totalShown += this.increment;\r\n    }\r\n\r\n    /**\r\n     * The show more element has come into or out of view\r\n     * @param inview whether the element is in view or not\r\n     */\r\n    moreInView(inview) {\r\n        if (inview && this.totalShown > this.increment) {\r\n            // automatically show more component states\r\n            this.showMore();\r\n        }\r\n    }\r\n}\r\n\r\nWorkgroupComponentRevisionsController.$inject = [\r\n    'moment',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'TeacherDataService'\r\n];\r\n\r\nconst WorkgroupComponentRevisions = {\r\n    bindings: {\r\n        componentStates: '<',\r\n        nodeId: '@',\r\n        workgroupId: '@'\r\n    },\r\n    template:\r\n        `<md-list class=\"component-revisions\">\r\n            <div ng-repeat=\"item in $ctrl.data | toArray | orderBy: '-clientSaveTime'\"\r\n                 ng-if=\"$index < $ctrl.totalShown\">\r\n                <md-list-item class=\"list-item md-whiteframe-1dp component-revisions__item\"\r\n                              ng-class=\"{'component-revisions__item--latest': $first}\">\r\n                    <div class=\"md-list-item-text component-revisions__item__text\"\r\n                         flex>\r\n                        <h3 class=\"accent-2 md-body-2 gray-lightest-bg component__header\">\r\n                            #{{$ctrl.total - $index}}\r\n                            <span ng-if=\"$first\"> (Latest)</span>\r\n                        </h3>\r\n                        <div>\r\n                            <component component-state=\"{{ item.componentState }}\"\r\n                                       workgroup-id=\"{{ $ctrl.workgroupId }}\"\r\n                                       mode=\"gradingRevision\">\r\n                        </div>\r\n                    </div>\r\n                </md-list-item>\r\n            </div>\r\n            <div ng-if=\"$ctrl.totalShown > $ctrl.increment\"\r\n                 in-view=\"$ctrl.moreInView($inview)\"></div>\r\n            <div ng-if=\"$ctrl.total > $ctrl.increment\" class=\"md-padding center\">\r\n                <md-button class=\"md-raised\"\r\n                           ng-if=\"$ctrl.totalShown <= $ctrl.increment\"\r\n                           ng-click=\"$ctrl.showMore()\"\r\n                           translate=\"SHOW_MORE\">\r\n                </md-button>\r\n            </div>\r\n        </md-list>`,\r\n    controller: WorkgroupComponentRevisionsController\r\n};\r\n\r\nexport default WorkgroupComponentRevisions;\r\n"]}