{"version":3,"sources":["workgroupComponentRevisions.es6"],"names":["WorkgroupComponentRevisionsController","ConfigService","TeacherDataService","$onInit","populateData","componentStates","getComponentStatesByWorkgroupIdAndComponentId","workgroupId","componentId","workgroupAnnotations","getAnnotationsToWorkgroupId","annotations","filter","annotation","toWorkgroupId","data","c","length","i","componentState","id","clientSaveTime","convertToClientTimestamp","serverSaveTime","autoComment","autoScore","comment","score","a","x","type","studentWorkId","existing","time","$inject","WorkgroupComponentRevisions","bindings","maxScore","template","controller"],"mappings":"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","file":"workgroupComponentRevisions.js","sourcesContent":["\"use strict\";\n\nclass WorkgroupComponentRevisionsController {\n    constructor(ConfigService,\n                TeacherDataService) {\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$onInit = () => {\n            this.populateData();\n        };\n    };\n\n    /**\n     * Get the component states and annotations for this workgroup and component\n     */\n    populateData() {\n        this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.workgroupId, this.componentId);\n\n        let workgroupAnnotations = this.TeacherDataService.getAnnotationsToWorkgroupId(this.workgroupId);\n        let annotations = workgroupAnnotations.filter((annotation) => {\n            return annotation.toWorkgroupId === this.workgroupId;\n        });\n\n        // create a data object that holds the componentStates and accompanying annotations, keyed by componentState id\n        this.data = {};\n\n        // add componentStates to the data object\n        let c = this.componentStates.length;\n        for (let i = 0; i < c; i++) {\n            let componentState = this.componentStates[i];\n            let id = componentState.id;\n            this.data[id] = {\n                clientSaveTime: this.convertToClientTimestamp(componentState.serverSaveTime),\n                componentState: componentState,\n                annotations: {\n                    autoComment: null,\n                    autoScore: null,\n                    comment: null,\n                    score: null\n                }\n            };\n        }\n\n        // add annotations to the data object (only latest of each annotation type for each componentState)\n        let a = annotations.length;\n        for (let x = 0; x < a; x++) {\n            let annotation = annotations[x];\n            let type = annotation.type;\n            let id = annotation.studentWorkId;\n            if (id && this.data[id]) {\n                let data = this.data[id];\n                let existing = null;\n\n                switch (type) {\n                    case 'autoComment':\n                        existing = data.annotations.autoComment;\n                        if (existing) {\n                            if (annotation.serverSaveTime > existing.serverSaveTime) {\n                                data.annotations.autoComment = annotation;\n                            }\n                        } else {\n                            data.annotations.autoComment = annotation;\n                        }\n                        break;\n                    case 'autoScore':\n                        existing = data.annotations.autoScore;\n                        if (existing) {\n                            if (annotation.serverSaveTime > existing.serverSaveTime) {\n                                data.annotations.autoScore = annotation;\n                            }\n                        } else {\n                            data.annotations.autoScore = annotation;\n                        }\n                        break;\n                    case 'comment':\n                        existing = data.annotations.comment;\n                        if (existing) {\n                            if (annotation.serverSaveTime > existing.serverSaveTime) {\n                                data.annotations.comment = annotation;\n                            }\n                        } else {\n                            data.annotations.comment = annotation;\n                        }\n                        break;\n                    case 'score':\n                        existing = data.annotations.score;\n                        if (existing) {\n                            if (annotation.serverSaveTime > existing.serverSaveTime) {\n                                data.annotations.score = annotation;\n                            }\n                        } else {\n                            data.annotations.score = annotation;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    convertToClientTimestamp(time) {\n        return this.ConfigService.convertToClientTimestamp(time);\n    }\n}\n\nWorkgroupComponentRevisionsController.$inject = [\n    'ConfigService',\n    'TeacherDataService'\n];\n\nconst WorkgroupComponentRevisions = {\n    bindings: {\n        workgroupId: '<',\n        componentId: '@',\n        maxScore: '<'\n    },\n    template:\n        `<md-list class=\"component-revisions\">\n            <div ng-repeat=\"item in $ctrl.data | toArray | orderBy: '-clientSaveTime'\">\n                <md-list-item class=\"list-item md-3-line md-whiteframe-1dp component-revisions__item\" ng-class=\"{'component-revisions__item--latest': $first}\">\n                    <div class=\"md-list-item-text component-revisions__item__text\">\n                        <div layout=\"row\">\n                            <span class=\"md-body-2\">\n                                #{{$ctrl.componentStates.length - $index}}\n                                <span ng-if=\"$first\"> (Latest)</span>\n                            </span>\n                            <span flex></span>\n                            <span>\n                                <span class=\"component__actions__info component__actions__more md-body-1\" am-time-ago=\"item.clientSaveTime\"></span>\n                                <md-tooltip md-direction=\"top\">{{ item.clientSaveTime | amDateFormat:'ddd, MMM D YYYY, h:mm a' }}</md-tooltip>\n                            </span>\n                        </div>\n                        <div>\n                            <component component-state=\"{{item.componentState}}\" mode=\"onlyShowWork\">\n                        </div>\n                        <div ng-if=\"item.annotations.comment || item.annotations.score || item.annotations.autoComment || item.annotations.autoScore\"\n                             class=\"annotations--grading annotations--grading--revision md-body-1\">\n                            <div ng-if=\"item.annotations.comment || item.annotations.score\">\n                                <div ng-if=\"item.annotations.comment\" layout=\"row\" layout-wrap>\n                                    <span class=\"component-revisions__annotation-label heavy\">{{ 'TEACHER_COMMENT' | translate }}: </span>{{item.annotations.comment.data.value}}\n                                </div>\n                                <div ng-if=\"item.annotations.score\">\n                                    <span class=\"heavy\">{{ 'SCORE' | translate }}: </span>{{item.annotations.score.data.value}}/{{$ctrl.maxScore}}\n                                </div>\n                            </div>\n\n                            <div ng-if=\"item.annotations.autoComment || item.annotations.autoScore\"\n                                 ng-class=\"{'component-revisions__has-auto-and-teacher': item.annotations.comment || item.annotations.score}\">\n                                <div ng-if=\"item.annotations.autoComment\">\n                                    <div class=\"component-revisions__annotation-label heavy\">\n                                        {{ 'AUTO_COMMENT' | translate }}:\n                                    </div>\n                                    <div class=\"annotations--grading__auto-comment\">\n                                        <compile data=\"item.annotations.autoComment.data.value\"></compile>\n                                    </div>\n                                </div>\n                                <div ng-if=\"item.annotations.autoScore\">\n                                    <span class=\"heavy\">{{ 'AUTO_SCORE' | translate }}: </span>{{item.annotations.autoScore.data.value}}/{{$ctrl.maxScore}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </md-list-item>\n            </div>\n        </md-list>`,\n    controller: WorkgroupComponentRevisionsController\n};\n\nexport default WorkgroupComponentRevisions;\n"]}