{"version":3,"sources":["workgroupComponentRevisions.es6"],"names":["WorkgroupComponentRevisionsController","ConfigService","TeacherDataService","$onInit","populateData","componentStates","getComponentStatesByWorkgroupIdAndComponentId","workgroupId","componentId","workgroupAnnotations","getAnnotationsToWorkgroupId","annotations","filter","annotation","toWorkgroupId","data","c","length","i","componentState","id","time","serverSaveTime","a","x","studentWorkId","push","convertToClientTimestamp","$inject","WorkgroupComponentRevisions","bindings","maxScore","template","controller"],"mappings":"AAAA;;;;;;;;;;IAEMA,qC;AACF,mDAAYC,aAAZ,EACYC,kBADZ,EACgC;AAAA;;AAAA;;AAC5B,aAAKD,aAAL,GAAqBA,aAArB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA,aAAKC,OAAL,GAAe,YAAM;AACjB,kBAAKC,YAAL;AACH,SAFD;AAGH;;;;;;AAED;;;uCAGe;AAAA;;AACX,iBAAKC,eAAL,GAAuB,KAAKH,kBAAL,CAAwBI,6CAAxB,CAAsE,KAAKC,WAA3E,EAAwF,KAAKC,WAA7F,CAAvB;;AAEA,gBAAIC,uBAAuB,KAAKP,kBAAL,CAAwBQ,2BAAxB,CAAoD,KAAKH,WAAzD,CAA3B;AACA,gBAAII,cAAcF,qBAAqBG,MAArB,CAA4B,UAACC,UAAD,EAAgB;AAC1D,uBAAOA,WAAWC,aAAX,KAA6B,OAAKP,WAAzC;AACH,aAFiB,CAAlB;;AAIA;AACA,iBAAKQ,IAAL,GAAY,EAAZ;;AAEA;AACA,gBAAIC,IAAI,KAAKX,eAAL,CAAqBY,MAA7B;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,oBAAIC,iBAAiB,KAAKd,eAAL,CAAqBa,CAArB,CAArB;AACA,oBAAIE,KAAKD,eAAeC,EAAxB;AACA,qBAAKL,IAAL,CAAUK,EAAV,IAAgB;AACZC,0BAAMF,eAAeG,cADT;AAEZH,oCAAgBA,cAFJ;AAGZR,iCAAa;AAHD,iBAAhB;AAKH;;AAED;AACA,gBAAIY,IAAIZ,YAAYM,MAApB;AACA,iBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAID,CAApB,EAAuBC,GAAvB,EAA4B;AACxB,oBAAIX,aAAaF,YAAYa,CAAZ,CAAjB;AACA,oBAAIJ,MAAKP,WAAWY,aAApB;AACA,oBAAIL,OAAM,KAAKL,IAAL,CAAUK,GAAV,CAAV,EAAyB;AACrB,yBAAKL,IAAL,CAAUK,GAAV,EAAcT,WAAd,CAA0Be,IAA1B,CAA+Bb,UAA/B;AACH;AACJ;AACJ;;;iDAEwBQ,I,EAAM;AAC3B,mBAAO,KAAKpB,aAAL,CAAmB0B,wBAAnB,CAA4CN,IAA5C,CAAP;AACH;;;;;;AAGLrB,sCAAsC4B,OAAtC,GAAgD,CAC5C,eAD4C,EAE5C,oBAF4C,CAAhD;;AAKA,IAAMC,8BAA8B;AAChCC,cAAU;AACNvB,qBAAa,GADP;AAENC,qBAAa,GAFP;AAGNuB,kBAAU;AAHJ,KADsB;AAMhCC,0sDANgC;AAsChCC,gBAAYjC;AAtCoB,CAApC;;kBAyCe6B,2B","file":"workgroupComponentRevisions.js","sourcesContent":["\"use strict\";\n\nclass WorkgroupComponentRevisionsController {\n    constructor(ConfigService,\n                TeacherDataService) {\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$onInit = () => {\n            this.populateData();\n        };\n    };\n\n    /**\n     * Get the component states and annotations for this workgroup and component\n     */\n    populateData() {\n        this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.workgroupId, this.componentId);\n\n        let workgroupAnnotations = this.TeacherDataService.getAnnotationsToWorkgroupId(this.workgroupId);\n        let annotations = workgroupAnnotations.filter((annotation) => {\n            return annotation.toWorkgroupId === this.workgroupId;\n        });\n\n        // create a data object that holds the componentStates and accompanying annotations, keyed by componentState id\n        this.data = {};\n\n        // add componentStates to the data object\n        let c = this.componentStates.length;\n        for (let i = 0; i < c; i++) {\n            let componentState = this.componentStates[i];\n            let id = componentState.id;\n            this.data[id] = {\n                time: componentState.serverSaveTime,\n                componentState: componentState,\n                annotations: []\n            };\n        }\n\n        // add annotations to the data object\n        let a = annotations.length;\n        for (let x = 0; x < a; x++) {\n            let annotation = annotations[x];\n            let id = annotation.studentWorkId;\n            if (id && this.data[id]) {\n                this.data[id].annotations.push(annotation);\n            }\n        }\n    }\n\n    convertToClientTimestamp(time) {\n        return this.ConfigService.convertToClientTimestamp(time);\n    }\n}\n\nWorkgroupComponentRevisionsController.$inject = [\n    'ConfigService',\n    'TeacherDataService'\n];\n\nconst WorkgroupComponentRevisions = {\n    bindings: {\n        workgroupId: '<',\n        componentId: '@',\n        maxScore: '<'\n    },\n    template:\n        `<div class=\"component-revisions\" ng-repeat=\"item in $ctrl.data | toArray | orderBy: '-time'\">\n            <md-card>\n                <md-card-content>\n                    <div class=\"md-card-title\">\n                        Version {{$ctrl.componentStates.length - $index}}\n                        <span ng-if=\"$first\"> (Latest Work)</span>\n                    </div>\n                    <div>\n                        <component component-state=\"{{item.componentState}}\" mode=\"onlyShowWork\">\n                    </div>\n                    <div>\n                        <div ng-repeat=\"annotation in item.annotations | orderBy: '-serverSaveTime'\">\n                            <div ng-if=\"annotation.type === 'comment'\">\n                                Teacher Comment: {{annotation.data.value}}\n                            </div>\n                            <div ng-if=\"annotation.type === 'autoComment'\">\n                                Auto Comment:\n                                <compile data=\"annotation.data.value\"></compile>\n                            </div>\n                            <div ng-if=\"annotation.type === 'score'\">\n                                Teacher Score: {{annotation.data.value}}/{{$ctrl.maxScore}}\n                            </div>\n                            <div ng-if=\"annotation.type === 'autoScore'\">\n                                Auto Score: {{annotation.data.value}}/{{$ctrl.maxScore}}\n                            </div>\n                        </div>\n                    </div>\n                </md-card-content>\n            </md-card>\n            <md-divider ng-if=\"$first\" class=\"component-revisions__divider\"></md-divider>\n        </div>`,\n    controller: WorkgroupComponentRevisionsController\n};\n\nexport default WorkgroupComponentRevisions;\n"]}