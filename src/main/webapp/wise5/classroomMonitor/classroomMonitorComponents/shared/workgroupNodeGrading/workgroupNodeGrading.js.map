{"version":3,"sources":["workgroupNodeGrading.es6"],"names":["WorkgroupNodeGradingController","ConfigService","ProjectService","TeacherDataService","UtilService","$onInit","nodeContent","getNodeContent","components","getComponents","teacherWorkgroupId","getWorkgroupId","$onChanges","changesObj","hiddenComponents","currentValue","result","node","getNodeById","nodeId","c","length","component","isDisabled","hasWork","componentHasWork","workgroupId","componentId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","time","convertToClientTimestamp","index","indexOf","componentType","getComponentTypeLabel","$inject","WorkgroupNodeGrading","bindings","template","controller"],"mappings":"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","file":"workgroupNodeGrading.js","sourcesContent":["\"use strict\";\n\nclass WorkgroupNodeGradingController {\n    constructor(ConfigService,\n                ProjectService,\n                TeacherDataService,\n                UtilService) {\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n\n        this.$onInit = () => {\n            this.nodeContent = this.getNodeContent();\n            this.components = this.getComponents();\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n        };\n\n        this.$onChanges = (changesObj) => {\n            if (changesObj.hiddenComponents) {\n                this.hiddenComponents = changesObj.hiddenComponents.currentValue;\n            }\n        };\n    };\n\n    getNodeContent() {\n        let result = null;\n\n        let node = this.ProjectService.getNodeById(this.nodeId);\n        if (node != null) {\n            // field that will hold the node content\n            result = node;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the components for this node\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        let components = null;\n\n        if (this.nodeContent) {\n            components = this.nodeContent.components;\n\n            for (let c = 0; c < components.length; c++) {\n                let component = components[c];\n\n                if (this.isDisabled) {\n                    component.isDisabled = true;\n                }\n\n                // set whether component captures student work (for filtering purposes)\n                component.hasWork = this.ProjectService.componentHasWork(component);\n            }\n        }\n\n        return components;\n    }\n\n    /**\n     * Get the student data for a specific component\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        let componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        let componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    convertToClientTimestamp(time) {\n        return this.ConfigService.convertToClientTimestamp(time);\n    }\n\n    isComponentVisible(componentId) {\n        let result = true;\n\n        let index = this.hiddenComponents.indexOf(componentId);\n        if (index > -1) {\n            result = false;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the component type label for the given component type\n     * @param componentType string\n     * @return string of the component type label\n     */\n    getComponentTypeLabel(componentType) {\n        return this.UtilService.getComponentTypeLabel(componentType);\n    }\n}\n\nWorkgroupNodeGradingController.$inject = [\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nconst WorkgroupNodeGrading = {\n    bindings: {\n        workgroupId: '<',\n        nodeId: '@',\n        hiddenComponents: '<'\n    },\n    template:\n        `<div class=\"grading__item\">\n            <div id=\"component_{{component.id}}_{{$ctrl.workgroupId}}\" class=\"component component--grading\" ng-repeat='component in $ctrl.components | filter:{hasWork: true}'>\n                <div ng-show=\"$ctrl.isComponentVisible(component.id)\">\n                    <h3 class=\"accent-2 md-body-2 gray-lightest-bg component__header\">\n                        {{ $index+1 + '. ' + $ctrl.getComponentTypeLabel(component.type) }}&nbsp;\n                        <component-new-work-badge component-id=\"component.id\"\n                                                  workgroup-id=\"$ctrl.workgroupId\"\n                                                  node-id=\"$ctrl.nodeId\"></component-new-work-badge>\n                    </h3>\n                    <component class=\"component-container\"\n                               node-id='{{$ctrl.nodeId}}'\n                               component-id='{{component.id}}'\n                               component-state='{{$ctrl.getLatestComponentStateByWorkgroupIdAndComponentId($ctrl.workgroupId, component.id)}}'\n                               workgroup-id='{{$ctrl.workgroupId}}'\n                               teacher-workgroup-id='{{$ctrl.teacherWorkgroupId}}'\n                               mode='grading'></component>\n                </div>\n            </div>\n        </div>`,\n    controller: WorkgroupNodeGradingController\n};\n\nexport default WorkgroupNodeGrading;\n"]}