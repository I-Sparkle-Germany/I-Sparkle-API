{"version":3,"sources":["classroomMonitorController.es6"],"names":["ClassroomMonitorController","$mdDialog","$rootScope","$scope","$state","$stateParams","$translate","ConfigService","NotificationService","ProjectService","SessionService","TeacherDataService","TeacherWebSocketService","projectName","getProjectTitle","runId","getRunId","numberProject","menuOpen","showSideMenu","showMonitorToolbar","showStepToolbar","then","translation","views","name","dashboardView","label","dashboardViewLabel","icon","type","projectView","projectViewLabel","studentView","studentViewLabel","notebookView","notebookViewLabel","exportView","exportViewLabel","notesTipsView","notesTipsViewLabel","$on","confirm","parent","angular","element","document","body","title","content","ariaLabel","ok","cancel","show","renewSession","forceLogOut","ev","translations","alert","serverUpdate","textContent","serverUpdateRequestLogoutMessage","targetEvent","event","toState","toParams","fromState","fromParams","processUI","themePath","getThemePath","notifications","$watch","length","newValue","oldValue","context","nodeId","componentId","componentType","category","data","saveEvent","$current","params","showMenu","isApplicationNode","getNewNotifications","filter","notification","timeDismissed","toWorkgroupId","getWorkgroupId","$","dismissNotificationsTitle","dismissNotificationsMessage","yes","no","dismissAllNotifications","newNotifications","map","newNotification","dismissNotification","mouseMoved","$inject"],"mappings":"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","file":"classroomMonitorController.js","sourcesContent":["'use strict';\n\nclass ClassroomMonitorController {\n\n    constructor($mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                $stateParams,\n                $translate,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                SessionService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.SessionService = SessionService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.projectName = this.ProjectService.getProjectTitle();\n        this.runId = this.ConfigService.getRunId();\n\n        this.numberProject = true; // TODO: make dynamic or remove\n\n        this.menuOpen = false; // boolean to indicate whether monitor nav menu is open\n        this.showSideMenu = true; // boolean to indicate whether to show the monitor side menu\n        this.showMonitorToolbar = true; // boolean to indicate whether to show the monitor toolbar\n        this.showStepToolbar = false; // boolean to indicate whether to show the step toolbar\n\n        // ui-views and their corresponding names, labels, and icons\n        this.$translate(['dashboardView', 'dashboardViewLabel', 'projectView', 'projectViewLabel',\n            'studentView', 'studentViewLabel', 'notebookView', 'notebookViewLabel',\n            'exportView', 'exportViewLabel', 'notesTipsView', 'notesTipsViewLabel']).then((translation) => {\n            this.views = {\n                'root.dashboard': {\n                    name: translation.dashboardView,\n                    label: translation.dashboardViewLabel,\n                    icon: 'dashboard',\n                    type: 'primary'\n                },\n                'root.nodeProgress': {\n                    name: translation.projectView,\n                    label: translation.projectViewLabel,\n                    icon: 'assignment_turned_in',\n                    type: 'primary'\n                },\n                'root.studentProgress': {\n                    name: translation.studentView,\n                    label: translation.studentViewLabel,\n                    icon: 'people',\n                    type: 'primary'\n                },\n                'root.notebooks': {\n                    name: translation.notebookView,\n                    label: translation.notebookViewLabel,\n                    icon: 'chrome_reader_mode',\n                    type: 'secondary'\n                },\n                'root.export': {\n                    name: translation.exportView,\n                    label: translation.exportViewLabel,\n                    icon: 'file_download',\n                    type: 'secondary'\n                },\n                'root.notes': {\n                    name: translation.notesTipsView,\n                    label: translation.notesTipsViewLabel,\n                    icon: 'speaker_notes',\n                    type: 'secondary'\n                }\n            };\n        });\n\n        this.$scope.$on('showSessionWarning', () => {\n            // Appending dialog to document.body\n            let confirm = $mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title('Session Timeout')\n                .content('You have been inactive for a long time. Do you want to stay logged in?')\n                .ariaLabel('Session Timeout')\n                .ok('YES')\n                .cancel('No');\n            $mdDialog.show(confirm).then(() => {\n                this.SessionService.renewSession();\n            }, () => {\n                this.SessionService.forceLogOut();\n            });\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showRequestLogout', (ev) => {\n            this.$translate([\"serverUpdate\", \"serverUpdateRequestLogoutMessage\", \"ok\"]).then((translations) => {\n\n                let alert = $mdDialog.confirm()\n                    .parent(angular.element(document.body))\n                    .title(translations.serverUpdate)\n                    .textContent(translations.serverUpdateRequestLogoutMessage)\n                    .ariaLabel(translations.serverUpdate)\n                    .targetEvent(ev)\n                    .ok(translations.ok);\n\n                $mdDialog.show(alert).then(() => {\n                    // do nothing\n                }, () => {\n                    // do nothing\n                });\n\n            });\n        });\n\n        // listen for state change events\n        this.$rootScope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\n            // close the menu when the state changes\n            this.menuOpen = false;\n\n            this.processUI();\n        });\n\n        // update UI items; TODO: remove eventually\n        this.processUI();\n\n        this.themePath = this.ProjectService.getThemePath();\n\n        this.notifications = this.NotificationService.notifications;\n        // watch for changes in notifications\n        this.$scope.$watch(\n            () => {\n                return this.NotificationService.notifications.length;\n            },\n            (newValue, oldValue) => {\n                this.notifications = this.NotificationService.notifications;\n            }\n        );\n\n        // save event when classroom monitor session is started\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"sessionStarted\", data = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Update UI items based on state, show or hide relevant menus and toolbars\n     * TODO: remove/rework this and put items in their own ui states\n     */\n    processUI() {\n        if (this.$state.$current.name === 'root.nodeProgress') {\n            let nodeId = this.$state.params.nodeId;\n            let showMenu = true;\n            let showMonitorToolbar = true;\n            let showStepToolbar = false;\n            if (nodeId) {\n                if (this.ProjectService.isApplicationNode(nodeId)) {\n                    showMenu = false;\n                    showMonitorToolbar = false;\n                    showStepToolbar = true;\n                }\n            }\n            this.showSideMenu = showMenu;\n            this.showMonitorToolbar = showMonitorToolbar;\n            this.showStepToolbar = showStepToolbar;\n        }\n    };\n\n    /**\n     * Returns true iff there are new notifications\n     * TODO: move to TeacherDataService\n     */\n    hasNewNotifications() {\n        return this.getNewNotifications().length > 0;\n    }\n\n    /**\n     * Returns all teacher notifications that have not been dismissed yet\n     * TODO: move to TeacherDataService, take into account shared teacher users\n     */\n    getNewNotifications() {\n        return this.notifications.filter(\n            notification => {\n                return (notification.timeDismissed == null && notification.toWorkgroupId === this.ConfigService.getWorkgroupId());\n            }\n        );\n    }\n\n    /**\n     * Show confirmation dialog before dismissing all notifications\n     */\n    confirmDismissAllNotifications(ev) {\n        if (this.getNewNotifications().length > 1) {\n            this.$translate([\"dismissNotificationsTitle\", \"dismissNotificationsMessage\", \"yes\", \"no\"]).then((translations) => {\n                let confirm = this.$mdDialog.confirm()\n                    .parent(angular.element($('._md-open-menu-container._md-active')))// TODO: hack for now (showing md-dialog on top of md-menu)\n                    .ariaLabel(translations.dismissNotificationsTitle)\n                    .textContent(translations.dismissNotificationsMessage)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(confirm).then(() => {\n                    this.dismissAllNotifications();\n                });\n            });\n        } else {\n            this.dismissAllNotifications();\n        }\n    }\n\n    /**\n     * Dismiss all new notifications\n     */\n    dismissAllNotifications() {\n        let newNotifications = this.getNewNotifications();\n        newNotifications.map((newNotification) => {\n            this.dismissNotification(newNotification);\n        });\n    }\n\n    /**\n     * Dismiss the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.NotificationService.dismissNotification(notification);\n    }\n    /**\n     * The user has moved the mouse so we will notify the Session Service\n     * so that it can refresh the session\n     */\n    mouseMoved() {\n        /*\n         * notify the Session Service that the user has moved the mouse\n         * so we can refresh the session\n         */\n        this.SessionService.mouseMoved();\n    }\n}\n\nClassroomMonitorController.$inject = [\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$translate',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'SessionService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default ClassroomMonitorController;\n"]}