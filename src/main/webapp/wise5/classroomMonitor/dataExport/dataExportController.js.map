{"version":3,"sources":["dataExportController.es6"],"names":["DataExportController","$injector","$rootScope","$scope","$state","AnnotationService","ConfigService","FileSaver","MatchService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","exportStepSelectionType","exportType","componentTypeToComponentService","canViewStudentNames","getPermissions","availableComponentDataExports","setDefaultExportSettings","project","nodeOrderOfProject","getNodeOrderOfProject","projectIdToOrder","idToOrder","projectItems","nodes","context","nodeId","componentId","componentType","category","event","data","saveEvent","exportAllStudentWork","exportLatestStudentWork","exportEvents","exportNotebookItems","exportNotifications","exportStudentAssets","exportOneWorkgroupPerRow","showExportComponentDataPage","exportRawData","exportStudentWork","selectedNodes","selectedNodesMap","getSelectedNodesToExport","length","alert","getSelectedNodesMap","getExport","then","result","workgroups","getClassmateUserInfosSortedByWorkgroupId","runId","getRunId","rows","rowCounter","columnNameToNumber","columnNames","headerRow","c","columnName","push","w","workgroup","workgroupId","periodName","userInfo","getUserInfoByWorkgroupId","extractedWISEIDsAndStudentNames","extractWISEIDsAndStudentNames","users","componentRevisionCounter","componentStates","getComponentStatesByWorkgroupId","getLatestComponentStatesByWorkgroupId","componentState","exportRow","isComponentSelected","row","createStudentWorkExportRow","fileName","generateCSVFile","u","user","id","name","wiseId1","wiseId2","wiseId3","studentName1","studentName2","studentName3","Array","fill","includeStudentNames","getProjectId","getProjectTitle","serverSaveTime","formattedDateTime","convertMillisecondsToFormattedDateTime","clientSaveTime","Date","clientSaveTimeString","toDateString","toLocaleTimeString","getNodePositionAndTitleByNodeId","componentPartNumber","getComponentPositionByNodeIdAndComponentId","component","getComponentByNodeIdAndComponentId","type","prompt","removeHTMLTags","replace","teacherScoreAnnotation","getLatestTeacherScoreAnnotationByStudentWorkId","teacherCommentAnnotation","getLatestTeacherCommentAnnotationByStudentWorkId","autoScoreAnnotation","getLatestAutoScoreAnnotationByStudentWorkId","autoCommentAnnotation","getLatestAutoCommentAnnotationByStudentWorkId","teacherScoreServerSaveTime","teacherScoreServerSaveTimeString","teacherScoreClientSaveTime","teacherScoreClientSaveTimeString","score","value","maxScore","getMaxScoreForComponent","teacherCommentServerSaveTime","teacherCommentServerSaveTimeString","teacherCommentClientSaveTime","teacherCommentClientSaveTimeString","comment","autoScoreServerSaveTime","autoScoreServerSaveTimeString","autoScoreClientSaveTime","autoScoreClientSaveTimeString","autoScore","maxAutoScore","autoCommentServerSaveTime","autoCommentServerSaveTimeString","autoCommentClientSaveTime","autoCommentClientSaveTimeString","autoComment","studentData","isCorrect","getStudentDataString","revisionCounter","getRevisionCounter","incrementRevisionCounter","isSubmit","submitCounter","studentDataString","componentService","getComponentService","nodeIdAndComponentId","csvString","r","cell","JSON","stringify","csvBlob","Blob","saveAs","str","componentEventCount","events","getEventsByWorkgroupId","e","isNodeSelected","createEventExportRow","serverSaveTimeString","stepTitle","response","getEventResponse","toNodeId","exportFilename","COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID","COLUMN_INDEX_NODE_ID","COLUMN_INDEX_COMPONENT_ID","COLUMN_INDEX_STEP_NUMBER","COLUMN_INDEX_STEP_TITLE","COLUMN_INDEX_COMPONENT_PART_NUMBER","COLUMN_INDEX_TYPE","COLUMN_INDEX_STUDENT_DATA","COLUMN_INDEX_WORKGROUP_ID","COLUMN_INDEX_WISE_IDS","COLUMN_INDEX_WISE_ID_1","COLUMN_INDEX_WISE_ID_2","COLUMN_INDEX_WISE_ID_3","COLUMN_INDEX_STUDENT_RESPONSE","hash","reverse","filter","studentWorkRow","hashKey","hasOwnProperty","rowIndex","getNodePositionById","getNodeTitleByNodeId","wiseIDs","wiseIDsArray","split","studentDataJSONCell","content","text","cellIndex","csvUrl","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","window","setTimeout","revokeObjectURL","n","item","node","checked","selectedStep","components","map","selectedComponent","sn","selectedNode","selectedNodeString","nodeItem","ids","childNodeItem","componentItem","doSelect","projectItem","order","selectAll","previewProjectURL","getConfigParam","open","previewStepURL","projectId","projectTitle","startDate","endDate","columnIds","getColumnIdsForOneWorkgroupPerRow","nodeIds","getFlattenedProjectAsNodeIds","descriptionRowHeaders","columnIdToColumnIndex","getColumnIdToColumnIndex","topRows","getOneWorkgroupPerRowTopRows","concat","workgroupRow","getComponentsByNodeId","exportComponent","columnIdPrefix","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","includeStudentWorkIds","includeStudentWorkTimestamps","includeScores","includeComments","latestComponentAnnotations","getLatestComponentAnnotations","scoreAnnotation","commentAnnotation","includeScoreTimestamps","scoreTimestamp","scoreValue","includeCommentTimestamps","commentTimestamp","commentValue","exportNode","isBranchPoint","eventType","latestBranchPathTakenEvent","getLatestEventByWorkgroupIdAndNodeIdAndType","includeBranchPathTakenNodeId","includeBranchPathTaken","branchLetter","getBranchLetter","includeBranchPathTakenStepTitle","includeStudentWork","numberOfColumnsToShift","d","descriptionRowHeader","columnId","numColumns","stepTitleRow","componentPartNumberRow","componentTypeRow","componentPromptRow","nodeIdRow","componentIdRow","columnIdRow","descriptionRow","get","isGroupNode","isNodeInAnyBranchPath","includeAnnotations","includeEvents","cleanupBeforeSave","makeCopyOfJSONObject","removeNamesFromWorkgroup","studentWork","compositeId","getCompositeId","annotations","getAnnotationsToWorkgroupId","annotation","dataJSONString","angular","toJson","blob","userName","displayNames","firstName","lastName","object","tempComponentType","workSelectionType","includeCorrectnessColumns","includeOnlySubmits","exportMatchComponent","generateMatchComponentHeaderRow","generateMatchComponentWorkRows","stepNumber","componentNumber","defaultMatchColumnNames","defaultMatchColumnName","choices","choice","hasCorrectAnswer","populateMatchColumnNames","rowsForWorkgroup","generateMatchComponentWorkRowsForWorkgroup","matchComponentStates","getComponentStatesByWorkgroupIdAndComponentId","matchComponentState","generateMatchComponentWorkRow","buckets","bucket","items","setCorrectnessValue","isIncorrectPosition","$inject"],"mappings":"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","file":"dataExportController.js","sourcesContent":["'use strict';\n\nclass DataExportController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $state,\n                AnnotationService,\n                ConfigService,\n                FileSaver,\n                MatchService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.FileSaver = FileSaver;\n        this.MatchService = MatchService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.exportStepSelectionType = \"exportAllSteps\";\n        this.exportType = null;  // type of export: [latestWork, allWork, events]\n        this.componentTypeToComponentService = {};\n        this.canViewStudentNames = this.ConfigService.getPermissions().canViewStudentNames;\n\n        this.availableComponentDataExports = [\n            'Match'\n        ];\n\n        this.setDefaultExportSettings();\n        this.project = this.ProjectService.project;\n        // create the mapping of node id to order\n        let nodeOrderOfProject = this.ProjectService.getNodeOrderOfProject(this.project);\n        this.projectIdToOrder = nodeOrderOfProject.idToOrder;\n        this.projectItems = nodeOrderOfProject.nodes;\n\n        // save event when data export view is displayed\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"dataExportViewDisplayed\", data = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n    \n    /**\n     * Export all or latest work for this run in CSV format\n     * latestWork, allWork, and events will call this function with a null exportType.\n     */\n    export(exportType = null) {\n        if (exportType == null) {\n            exportType = this.exportType;\n        }\n\n        // save event for this export request\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"UserInteraction\", event = \"exportRequested\", data = {\"exportType\": exportType};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n\n        if (exportType === \"allStudentWork\") {\n            this.exportAllStudentWork();\n        } else if (exportType === \"latestStudentWork\") {\n            this.exportLatestStudentWork();\n        } else if (exportType === \"events\") {\n            this.exportEvents();\n        } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n            this.exportNotebookItems(exportType);\n        } else if (exportType === \"notifications\") {\n            this.exportNotifications();\n        } else if (exportType === \"studentAssets\") {\n            this.exportStudentAssets();\n        } else if (exportType === \"oneWorkgroupPerRow\") {\n            this.exportOneWorkgroupPerRow();\n        } else if (exportType === \"componentData\") {\n            this.showExportComponentDataPage();\n        } else if (exportType === \"rawData\") {\n            this.exportRawData();\n        }\n    }\n\n    /**\n     * Export all the student work\n     */\n    exportAllStudentWork() {\n        this.exportStudentWork(\"allStudentWork\");\n    }\n\n    /**\n     * Export the latest student work\n     */\n    exportLatestStudentWork() {\n        this.exportStudentWork(\"latestStudentWork\");\n    }\n\n    /**\n     * Export all the student work\n     * @param exportType the export type e.g. \"allStudentWork\" or \"latestStudentWork\"\n     */\n    exportStudentWork(exportType) {\n\n        var selectedNodes = null;\n        var selectedNodesMap = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // we are going to export the work for the steps that were selected\n\n            // get the steps that were selected\n            selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            } else {\n                /*\n                 * the user has selected some steps/components so we will\n                 * generate a selected nodes map\n                 */\n                selectedNodesMap = this.getSelectedNodesMap(selectedNodes);\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"allStudentWork\", selectedNodes).then((result) => {\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            // the rows that will show up in the export\n            var rows = [];\n\n            // the counter for the rows\n            var rowCounter = 1;\n\n            // mapping from column name to column number\n            var columnNameToNumber = {};\n\n            // an array of column names\n            var columnNames = [\n                \"#\",\n                \"Workgroup ID\",\n                \"WISE ID 1\",\n                \"Student Name 1\",\n                \"WISE ID 2\",\n                \"Student Name 2\",\n                \"WISE ID 3\",\n                \"Student Name 3\",\n                \"Class Period\",\n                \"Project ID\",\n                \"Project Name\",\n                \"Run ID\",\n                \"Start Date\",\n                \"End Date\",\n                \"Student Work ID\",\n                \"Server Timestamp\",\n                \"Client Timestamp\",\n                \"Node ID\",\n                \"Component ID\",\n                \"Component Part Number\",\n                \"Teacher Score Server Timestamp\",\n                \"Teacher Score Client Timestamp\",\n                \"Teacher Score\",\n                \"Max Teacher Score\",\n                \"Teacher Comment Server Timestamp\",\n                \"Teacher Comment Client Timestamp\",\n                \"Teacher Comment\",\n                \"Auto Score Server Timestamp\",\n                \"Auto Score Client Timestamp\",\n                \"Auto Score\",\n                \"Max Auto Score\",\n                \"Auto Comment Server Timestamp\",\n                \"Auto Comment Client Timestamp\",\n                \"Auto Comment\",\n                \"Step Title\",\n                \"Component Type\",\n                \"Component Prompt\",\n                \"Student Data\",\n                \"Component Revision Counter\",\n                \"Is Correct\",\n                \"Is Submit\",\n                \"Submit Count\",\n                \"Response\"\n            ];\n\n            var headerRow = [];\n\n            // generate the header row by looping through all the column names\n            for (var c = 0; c < columnNames.length; c++) {\n\n                // get a column name\n                var columnName = columnNames[c];\n\n                if (columnName != null) {\n                    // add a mapping from column name to column number\n                    columnNameToNumber[columnName] = c;\n                }\n\n                // add the column name to the header row\n                headerRow.push(columnName);\n            }\n\n            // add the header row to the rows\n            rows.push(headerRow);\n\n            if (workgroups != null) {\n\n                // loop through all the workgroup\n                for (var w = 0; w < workgroups.length; w++) {\n\n                    // get a workgroup\n                    var workgroup = workgroups[w];\n\n                    if (workgroup != null) {\n\n                        // get the workgroup information\n                        var workgroupId = workgroup.workgroupId;\n                        var periodName = workgroup.periodName;\n                        var userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n                        var extractedWISEIDsAndStudentNames = this.extractWISEIDsAndStudentNames(userInfo.users);\n\n                        /*\n                         * a mapping from component to component revision counter.\n                         * the key will be {{nodeId}}_{{componentId}} and the\n                         * value will be a number.\n                         */\n                        var componentRevisionCounter = {};\n\n                        // get the component states for the workgroup\n                        var componentStates = [];\n\n                        if (exportType === \"allStudentWork\") {\n                            componentStates = this.TeacherDataService.getComponentStatesByWorkgroupId(workgroupId);\n                        } else if (exportType === \"latestStudentWork\") {\n                            componentStates = this.TeacherDataService.getLatestComponentStatesByWorkgroupId(workgroupId);\n                        }\n\n                        if (componentStates != null) {\n\n                            // loop through all the component states\n                            for (var c = 0; c < componentStates.length; c++) {\n\n                                // get a component state\n                                var componentState = componentStates[c];\n\n                                if (componentState != null) {\n\n                                    var exportRow = true;\n\n                                    if (this.exportStepSelectionType === \"exportSelectSteps\") {\n                                        // we are only exporting selected steps\n                                        if (!this.isComponentSelected(selectedNodesMap, componentState.nodeId, componentState.componentId)) {\n                                            // the component state is for a step that is not selected\n                                            exportRow = false;\n                                        }\n                                    }\n\n                                    if (exportRow) {\n\n                                        // create the export row\n                                        var row = this.createStudentWorkExportRow(columnNames,\n                                            columnNameToNumber, rowCounter, workgroupId,\n                                            extractedWISEIDsAndStudentNames['wiseId1'],\n                                            extractedWISEIDsAndStudentNames['wiseId2'],\n                                            extractedWISEIDsAndStudentNames['wiseId3'],\n                                            extractedWISEIDsAndStudentNames['studentName1'],\n                                            extractedWISEIDsAndStudentNames['studentName2'],\n                                            extractedWISEIDsAndStudentNames['studentName3'],\n                                            periodName, componentRevisionCounter, componentState);\n\n                                        // add the row to the rows\n                                        rows.push(row);\n\n                                        // increment the row counter\n                                        rowCounter++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            var fileName = \"\";\n\n            // make the file name\n            if (exportType === \"allStudentWork\") {\n                fileName = runId + \"_all_work.csv\";\n            } else if (exportType === \"latestStudentWork\") {\n                fileName = runId + \"_latest_work.csv\";\n            }\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * @param users An array of user objects. Each user object contains an id and name.\n     * @returns {object} An object that contains key/value pairs. The key is wiseIdX\n     * or studentNameX where X is an integer. The values are the corresponding actual\n     * values of wise id and student name.\n     */\n    extractWISEIDsAndStudentNames(users) {\n      let extractedWISEIDsAndStudentNames = {};\n      for (let u = 0; u < users.length; u++) {\n        let user = users[u];\n        extractedWISEIDsAndStudentNames['wiseId' + (u + 1)] = user.id;\n        if (this.canViewStudentNames) {\n          extractedWISEIDsAndStudentNames['studentName' + (u + 1)] = user.name;\n        }\n      }\n      return extractedWISEIDsAndStudentNames;\n    }\n\n    /**\n     * Create the array that will be used as a row in the student work export\n     * @param columnNames all the header column name\n     * @param columnNameToNumber the mapping from column name to column number\n     * @param rowCounter the current row number\n     * @param workgroupId the workgroup id\n     * @param wiseId1 the WISE ID 1\n     * @param wiseId2 the WISE ID 2\n     * @param wiseId3 the WISE ID 3\n     * @param periodName the period name\n     * @param componentRevisionCounter the mapping of component to revision counter\n     * @param componentState the component state\n     * @return an array containing the cells in the row\n     */\n    createStudentWorkExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, studentName1, studentName2, studentName3, periodName, componentRevisionCounter, componentState) {\n\n        // create the row and prepopulate the elements with an empty string\n        var row = new Array(columnNames.length);\n        row.fill(\"\");\n\n        // set the row number\n        row[columnNameToNumber[\"#\"]] = rowCounter;\n\n        // set workgroup id\n        row[columnNameToNumber[\"Workgroup ID\"]] = workgroupId;\n\n        if (wiseId1 != null) {\n            // set the WISE ID 1\n            row[columnNameToNumber[\"WISE ID 1\"]] = wiseId1;\n        }\n        if (studentName1 != null && this.includeStudentNames) {\n            row[columnNameToNumber[\"Student Name 1\"]] = studentName1;\n        }\n        if (wiseId2 != null) {\n            // set the WISE ID 2\n            row[columnNameToNumber[\"WISE ID 2\"]] = wiseId2;\n        }\n        if (studentName2 != null && this.includeStudentNames) {\n            row[columnNameToNumber[\"Student Name 2\"]] = studentName2;\n        }\n        if (wiseId3 != null) {\n            // set the WISE ID 3\n            row[columnNameToNumber[\"WISE ID 3\"]] = wiseId3;\n        }\n        if (studentName3 != null && this.includeStudentNames) {\n          row[columnNameToNumber[\"Student Name 3\"]] = studentName3;\n        }\n\n        row[columnNameToNumber[\"Class Period\"]] = periodName;\n\n        // set the project id\n        row[columnNameToNumber[\"Project ID\"]] = this.ConfigService.getProjectId();\n\n        // set the project name\n        row[columnNameToNumber[\"Project Name\"]] = this.ProjectService.getProjectTitle();\n\n        // set the run id\n        row[columnNameToNumber[\"Run ID\"]] = this.ConfigService.getRunId();\n\n        // set the student work id\n        row[columnNameToNumber[\"Student Work ID\"]] = componentState.id;\n\n        if (componentState.serverSaveTime != null) {\n            // get the server save time\n\n            // get the time stamp as a pretty printed date time string\n            var formattedDateTime = this.UtilService.convertMillisecondsToFormattedDateTime(componentState.serverSaveTime);\n\n            // set the time stamp string e.g. Wed Apr 06 2016 9:05:38 AM\n            row[columnNameToNumber[\"Server Timestamp\"]] = formattedDateTime;\n        }\n\n        if (componentState.clientSaveTime != null) {\n            // get the client save time\n            var clientSaveTime = new Date(componentState.clientSaveTime);\n\n            if (clientSaveTime != null) {\n                // get the time stamp string e.g. Wed Apr 06 2016 9:05:38 AM\n                var clientSaveTimeString = clientSaveTime.toDateString() + \" \" + clientSaveTime.toLocaleTimeString();\n                row[columnNameToNumber[\"Client Timestamp\"]] = clientSaveTimeString;\n            }\n        }\n\n        // set the node id\n        row[columnNameToNumber[\"Node ID\"]] = componentState.nodeId;\n\n        // set the component id\n        row[columnNameToNumber[\"Component ID\"]] = componentState.componentId;\n\n        // set the step title\n        row[columnNameToNumber[\"Step Title\"]] = this.ProjectService.getNodePositionAndTitleByNodeId(componentState.nodeId);\n\n        // get the component part number\n        var componentPartNumber = this.ProjectService.getComponentPositionByNodeIdAndComponentId(componentState.nodeId, componentState.componentId) + 1;\n\n        // set the component part number\n        row[columnNameToNumber[\"Component Part Number\"]] = componentPartNumber;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(componentState.nodeId, componentState.componentId);\n\n        if (component != null) {\n            // set the component type\n            row[columnNameToNumber[\"Component Type\"]] = component.type;\n\n            if (component.prompt != null) {\n                // get the prompt with the html tags removed\n                var prompt = this.UtilService.removeHTMLTags(component.prompt);\n\n                // replace \" with \"\"\n                prompt = prompt.replace(/\"/g, '\"\"');\n\n                // set the prompt with the html tags removed\n                row[columnNameToNumber[\"Component Prompt\"]] = prompt;\n            }\n        }\n\n        // get the annotations\n        var teacherScoreAnnotation = this.AnnotationService.getLatestTeacherScoreAnnotationByStudentWorkId(componentState.id);\n        var teacherCommentAnnotation = this.AnnotationService.getLatestTeacherCommentAnnotationByStudentWorkId(componentState.id);\n        var autoScoreAnnotation = this.AnnotationService.getLatestAutoScoreAnnotationByStudentWorkId(componentState.id);\n        var autoCommentAnnotation = this.AnnotationService.getLatestAutoCommentAnnotationByStudentWorkId(componentState.id);\n\n        if (teacherScoreAnnotation != null) {\n            // handle the teacher score\n\n            if (teacherScoreAnnotation.serverSaveTime != null) {\n                var teacherScoreServerSaveTime = new Date(teacherScoreAnnotation.serverSaveTime);\n\n                if (teacherScoreServerSaveTime != null) {\n                    // get the teacher score server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherScoreServerSaveTimeString = teacherScoreServerSaveTime.toDateString() + \" \" + teacherScoreServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Score Server Timestamp\"]] = teacherScoreServerSaveTimeString;\n                }\n            }\n\n            if (teacherScoreAnnotation.clientSaveTime != null) {\n                var teacherScoreClientSaveTime = new Date(teacherScoreAnnotation.clientSaveTime);\n\n                if (teacherScoreClientSaveTime != null) {\n                    // get the teacher score client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherScoreClientSaveTimeString = teacherScoreClientSaveTime.toDateString() + \" \" + teacherScoreClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Score Client Timestamp\"]] = teacherScoreClientSaveTimeString;\n                }\n            }\n\n            var data = teacherScoreAnnotation.data;\n\n            if (data != null) {\n                // get the teacher score\n                var score = data.value;\n\n                if (score != null) {\n                    // set the teacher score\n                    row[columnNameToNumber[\"Teacher Score\"]] = score;\n                }\n\n                // get the max score if available\n                var maxScore = this.ProjectService.getMaxScoreForComponent(componentState.nodeId, componentState.componentId);\n\n                if (maxScore != null) {\n                    // set the max score\n                    row[columnNameToNumber[\"Max Teacher Score\"]] = maxScore;\n                }\n            }\n        }\n\n        if (teacherCommentAnnotation != null) {\n            // handle the teacher comment\n\n            if (teacherCommentAnnotation.serverSaveTime != null) {\n                var teacherCommentServerSaveTime = new Date(teacherCommentAnnotation.serverSaveTime);\n\n                if (teacherCommentServerSaveTime != null) {\n                    // get the teacher comment server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherCommentServerSaveTimeString = teacherCommentServerSaveTime.toDateString() + \" \" + teacherCommentServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Comment Server Timestamp\"]] = teacherCommentServerSaveTimeString;\n                }\n            }\n\n            if (teacherCommentAnnotation.clientSaveTime != null) {\n                var teacherCommentClientSaveTime = new Date(teacherCommentAnnotation.clientSaveTime);\n\n                if (teacherCommentClientSaveTime != null) {\n                    // get the teacher comment client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherCommentClientSaveTimeString = teacherCommentClientSaveTime.toDateString() + \" \" + teacherCommentClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Comment Client Timestamp\"]] = teacherCommentClientSaveTimeString;\n                }\n            }\n\n            var data = teacherCommentAnnotation.data;\n\n            if (data != null) {\n                // get the teacher comment\n                var comment = data.value;\n\n                if (comment != null) {\n                    // set the teacher comment\n                    row[columnNameToNumber[\"Teacher Comment\"]] = comment;\n                }\n            }\n        }\n\n        if (autoScoreAnnotation != null) {\n            // handle the auto score\n\n            if (autoScoreAnnotation.serverSaveTime != null) {\n                var autoScoreServerSaveTime = new Date(autoScoreAnnotation.serverSaveTime);\n\n                if (autoScoreServerSaveTime != null) {\n                    // get the auto score server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoScoreServerSaveTimeString = autoScoreServerSaveTime.toDateString() + \" \" + autoScoreServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Score Server Timestamp\"]] = autoScoreServerSaveTimeString;\n                }\n            }\n\n            if (autoScoreAnnotation.clientSaveTime != null) {\n                var autoScoreClientSaveTime = new Date(autoScoreAnnotation.clientSaveTime);\n\n                if (autoScoreClientSaveTime != null) {\n                    // get the auto score client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoScoreClientSaveTimeString = autoScoreClientSaveTime.toDateString() + \" \" + autoScoreClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Score Client Timestamp\"]] = autoScoreClientSaveTimeString;\n                }\n            }\n\n            var data = autoScoreAnnotation.data;\n\n            if (data != null) {\n                // get the auto score\n                var autoScore = data.value;\n\n                if (autoScore != null) {\n                    // set the auto score\n                    row[columnNameToNumber[\"Auto Score\"]] = autoScore;\n                }\n\n                // get the max auto score\n                var maxAutoScore = data.maxAutoScore;\n\n                if (maxAutoScore != null) {\n                    // set the max auto score\n                    row[columnNameToNumber[\"Max Auto Score\"]] = maxAutoScore;\n                }\n            }\n        }\n\n        if (autoCommentAnnotation != null) {\n            // handle the auto comment\n\n            if (autoCommentAnnotation.serverSaveTime != null) {\n                var autoCommentServerSaveTime = new Date(autoCommentAnnotation.serverSaveTime);\n\n                if (autoCommentServerSaveTime != null) {\n                    // get the auto comment server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoCommentServerSaveTimeString = autoCommentServerSaveTime.toDateString() + \" \" + autoCommentServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Comment Server Timestamp\"]] = autoCommentServerSaveTimeString;\n                }\n            }\n\n            if (autoCommentAnnotation.clientSaveTime != null) {\n                var autoCommentClientSaveTime = new Date(autoCommentAnnotation.clientSaveTime);\n\n                if (autoCommentClientSaveTime != null) {\n                    // get the auto comment timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoCommentClientSaveTimeString = autoCommentClientSaveTime.toDateString() + \" \" + autoCommentClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Comment Client Timestamp\"]] = autoCommentClientSaveTimeString;\n                }\n            }\n\n            var data = autoCommentAnnotation.data;\n\n            if (data != null) {\n                // get the auto comment\n                var autoComment = data.value;\n\n                if (autoComment != null) {\n                    // set the auto comment\n                    row[columnNameToNumber[\"Auto Comment\"]] = this.UtilService.removeHTMLTags(autoComment);\n                }\n            }\n        }\n\n        var studentData = componentState.studentData;\n\n        if (studentData != null) {\n            // set the student data JSON\n            row[columnNameToNumber[\"Student Data\"]] = studentData;\n\n            var isCorrect = studentData.isCorrect;\n\n            if (isCorrect != null) {\n                // set the is correct value\n                if (isCorrect) {\n                    row[columnNameToNumber[\"Is Correct\"]] = 1;\n                } else {\n                    row[columnNameToNumber[\"Is Correct\"]] = 0;\n                }\n            }\n        }\n        row[columnNameToNumber[\"Response\"]] = this.getStudentDataString(componentState);\n\n        let revisionCounter = this.getRevisionCounter(componentRevisionCounter, componentState.nodeId, componentState.componentId);\n\n        if (componentState.revisionCounter == null) {\n            /*\n             * use the revision counter obtained from the componentRevisionCounter\n             * mapping. this case will happen when we are exporting all student\n             * work.\n             */\n            row[columnNameToNumber[\"Component Revision Counter\"]] = revisionCounter;\n        } else {\n            /*\n             * use the revision counter from the value in the component state.\n             * this case will happen when we are exporting latest student work\n             * because the revision counter needs to be previously calculated\n             * and then set into the component state\n             */\n            row[columnNameToNumber[\"Component Revision Counter\"]] = componentState.revisionCounter;\n        }\n\n        this.incrementRevisionCounter(componentRevisionCounter, componentState.nodeId, componentState.componentId);\n\n        var isSubmit = componentState.isSubmit;\n\n        if (isSubmit) {\n            // set the is submit value\n            row[columnNameToNumber[\"Is Submit\"]] = 1;\n\n            if (studentData != null) {\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // set the submit counter\n                    row[columnNameToNumber[\"Submit Count\"]] = submitCounter;\n                }\n            }\n        } else {\n            // set the is submit value\n            row[columnNameToNumber[\"Is Submit\"]] = 0;\n        }\n\n        return row;\n    }\n\n    /**\n     * Get the plain text representation of the student work.\n     * @param componentState {object} A component state that contains the student work.\n     * @returns {string} A string that can be placed in a csv cell.\n     */\n    getStudentDataString(componentState) {\n      /*\n       * In Excel, if there is a cell with a long string and the cell to the\n       * right of it is empty, the long string will overlap onto cells to the\n       * right until the string ends or hits a cell that contains a value.\n       * To prevent this from occurring, we will default empty cell values to\n       * a string with a space in it. This way all values of cells are limited\n       * to displaying only in its own cell.\n       */\n      let studentDataString = \" \";\n      let componentType = componentState.componentType;\n      let componentService = this.getComponentService(componentType);\n      if (componentService != null && componentService.getStudentDataString != null) {\n        studentDataString = componentService.getStudentDataString(componentState);\n        studentDataString = this.UtilService.removeHTMLTags(studentDataString);\n        studentDataString = studentDataString.replace(/\"/g, '\"\"');\n      } else {\n        studentDataString = componentState.studentData;\n      }\n      return studentDataString;\n    }\n\n    /**\n     * Get the revision number for the next component state revision.\n     * @param componentRevisionCounter The mapping from component to revision\n     * counter.\n     * @param nodeId The node id the component is in.\n     * @param componentId The component id of the component.\n     */\n    getRevisionCounter(componentRevisionCounter, nodeId, componentId) {\n        // create the {{nodeId}}_{{componentId}} key to look up the component revision counter\n        let nodeIdAndComponentId = nodeId + \"_\" + componentId;\n\n        if (componentRevisionCounter[nodeIdAndComponentId] == null) {\n            // initialize the component revision counter for this component to 1 if there is no entry\n            componentRevisionCounter[nodeIdAndComponentId] = 1;\n        }\n\n        return componentRevisionCounter[nodeIdAndComponentId];\n    }\n\n    /**\n     * Increment the revision counter for the given {{nodeId}}_{{componentId}}.\n     * @param componentRevisionCounter The mapping from component to revision\n     * counter.\n     * @param nodeId The node id the component is in.\n     * @param componentId The component id of the component.\n     */\n    incrementRevisionCounter(componentRevisionCounter, nodeId, componentId) {\n        // create the {{nodeId}}_{{componentId}} key to look up the component revision counter\n        let nodeIdAndComponentId = nodeId + \"_\" + componentId;\n\n        if (componentRevisionCounter[nodeIdAndComponentId] == null) {\n            // initialize the component revision counter for this component to 1 if there is no entry\n            componentRevisionCounter[nodeIdAndComponentId] = 1;\n        }\n\n        // get the revision counter\n        let revisionCounter = componentRevisionCounter[nodeIdAndComponentId];\n\n        // increment the revision counter\n        componentRevisionCounter[nodeIdAndComponentId] = revisionCounter + 1;\n    }\n\n    /**\n     * Check if a component is selected\n     * @param selectedNodesMap a map of node id and component id strings\n     * to true\n     * example\n     * {\n     *     \"node1-38fj20egrj\": true,\n     *     \"node1-20dbj2e0sf\": true\n     * }\n     * @param nodeId the node id to check\n     * @param componentId the component id to check\n     * @return whether the component is selected\n     */\n    isComponentSelected(selectedNodesMap, nodeId, componentId) {\n        var result = false;\n\n        if (selectedNodesMap != null) {\n\n            if (nodeId != null && componentId != null &&\n                selectedNodesMap[nodeId + \"-\" + componentId] == true) {\n\n                // the component is selected\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a component is selected\n     * @param selectedNodesMap a map of node id to true\n     * example\n     * {\n     *     \"node1\": true,\n     *     \"node2\": true\n     * }\n     * @param nodeId the node id to check\n     * @param componentId the component id to check\n     * @return whether the node is selected\n     */\n    isNodeSelected(selectedNodesMap, nodeId) {\n        var result = false;\n\n        if (selectedNodesMap != null) {\n\n            if (nodeId != null && selectedNodesMap[nodeId] == true) {\n                // the node is selected\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Generate the csv file and have the client download it\n     * @param rows a 2D array that represents the rows in the export\n     * each row contains an array. the inner array contains strings or\n     * numbers which represent the cell values in the export.\n     * @param fileName the name of the file that will be generated\n     */\n    generateCSVFile(rows, fileName) {\n\n        // used to accumulate the csv string\n        var csvString = \"\";\n\n        if (rows != null) {\n\n            // loop through all the rows\n            for (var r = 0; r < rows.length; r++) {\n                var row = rows[r];\n\n                if (row != null) {\n\n                    // loop through all the cells\n                    for (var c = 0; c < row.length; c++) {\n\n                        // get the cell value\n                        var cell = row[c];\n\n                        if (typeof cell === \"object\") {\n                            /*\n                             * the cell value is an object so we will obtain the\n                             * string representation of the object and wrap it\n                             * in quotes\n                             */\n\n                            // convert the\n                            cell = JSON.stringify(cell);\n\n                            // replace \" with \"\"\n                            cell = cell.replace(/\"/g, '\"\"');\n\n                            if (cell != null && cell.length >= 32767) {\n                                /*\n                                 * the cell value is larger than the allowable\n                                 * excel cell size so we will display the string\n                                 * \"Data Too Large\" instead\n                                 */\n                                cell = \"Data Too Large\";\n                            }\n\n                            // wrap the cell in quotes\n                            cell = '\"' + cell + '\"';\n                        } else if (typeof cell === \"string\") {\n                            // the cell value is a string\n\n                            if (cell != null && cell.length >= 32767) {\n                                /*\n                                 * the cell value is larger than the allowable\n                                 * excel cell size so we will display the string\n                                 * \"Data Too Large\" instead\n                                 */\n                                cell = \"Data Too Large\";\n                            }\n\n                            // wrap the cell in quotes\n                            cell = '\"' + cell + '\"';\n                        }\n\n                        // separate cells with a comma\n                        csvString += cell + \",\";\n                    }\n\n                    // separate lines\n                    csvString += \"\\r\\n\";\n                }\n            }\n        }\n\n        // generate the blob that will be written to the file\n        let csvBlob = new Blob([csvString], {type: 'text/csv'});\n\n        // generate a file and download it to the user's computer\n        this.FileSaver.saveAs(csvBlob, fileName);\n    }\n\n    escapeContent(str) {\n        return str\n            .replace(/[\\n]/g, '\\\\n')\n            .replace(/[\\r]/g, '\\\\r')\n            .replace(/[\\t]/g, '\\\\t');\n    }\n\n    /**\n     * Export the events\n     */\n    exportEvents() {\n\n        var selectedNodes = null;\n        var selectedNodesMap = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // we are going to export the work for the steps that were selected\n\n            // get the steps that were selected\n            selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            } else {\n                /*\n                 * the user has selected some steps/components so we will\n                 * generate a selected nodes map\n                 */\n                selectedNodesMap = this.getSelectedNodesMap(selectedNodes);\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"events\", selectedNodes).then((result) => {\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            // the rows that will show up in the export\n            var rows = [];\n\n            // the counter for the rows\n            var rowCounter = 1;\n\n            // mapping from column name to column number\n            var columnNameToNumber = {};\n\n            // an array of column names\n            var columnNames = [\n                \"#\",\n                \"Workgroup ID\",\n                \"WISE ID 1\",\n                \"Student Name 1\",\n                \"WISE ID 2\",\n                \"Student Name 2\",\n                \"WISE ID 3\",\n                \"Student Name 3\",\n                \"Class Period\",\n                \"Project ID\",\n                \"Project Name\",\n                \"Run ID\",\n                \"Start Date\",\n                \"End Date\",\n                \"Event ID\",\n                \"Server Timestamp\",\n                \"Client Timestamp\",\n                \"Node ID\",\n                \"Component ID\",\n                \"Component Part Number\",\n                \"Step Title\",\n                \"Component Type\",\n                \"Component Prompt\",\n                \"Group Event Counter\",\n                \"Context\",\n                \"Category\",\n                \"Event\",\n                \"Event Data\",\n                \"Response\"\n            ];\n\n            var headerRow = [];\n\n            // generate the header row by looping through all the column names\n            for (var c = 0; c < columnNames.length; c++) {\n\n                // get a column name\n                var columnName = columnNames[c];\n\n                if (columnName != null) {\n                    // add a mapping from column name to column number\n                    columnNameToNumber[columnName] = c;\n                }\n\n                // add the column name to the header row\n                headerRow.push(columnName);\n            }\n\n            // add the header row to the rows\n            rows.push(headerRow);\n\n            if (workgroups != null) {\n\n                // loop through all the workgroup\n                for (var w = 0; w < workgroups.length; w++) {\n\n                    // get a workgroup\n                    var workgroup = workgroups[w];\n\n                    if (workgroup != null) {\n\n                        // get the workgroup information\n                        var workgroupId = workgroup.workgroupId;\n                        var periodName = workgroup.periodName;\n                        var userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n                        var extractedWISEIDsAndStudentNames = this.extractWISEIDsAndStudentNames(userInfo.users);\n\n                        /*\n                         * a mapping from component to component event count.\n                         * the key will be {{nodeId}}_{{componentId}} and the\n                         * value will be a number.\n                         */\n                        var componentEventCount = {};\n\n                        // get the events for the workgroup\n                        var events = [];\n\n                        events = this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\n\n                        if (events != null) {\n\n                            // loop through all the events\n                            for (var e = 0; e < events.length; e++) {\n\n                                // get an event\n                                var event = events[e];\n\n                                if (event != null) {\n\n                                    var exportRow = true;\n\n\n                                    if (this.exportStepSelectionType === \"exportSelectSteps\") {\n                                        // we are only exporting selected steps\n\n                                        if (event.nodeId != null && event.componentId != null) {\n                                            // this is a component event\n\n                                            if (!this.isComponentSelected(selectedNodesMap, event.nodeId, event.componentId)) {\n                                                // the event is for a component that is not selected\n                                                exportRow = false;\n                                            }\n                                        } else if (event.nodeId != null) {\n                                            // this is a node event\n\n                                            if (!this.isNodeSelected(selectedNodesMap, event.nodeId)) {\n                                                // the event is for a node that is not selected\n                                                exportRow = false;\n                                            }\n                                        } else {\n                                            // this is a global event\n                                            exportRow = false;\n                                        }\n                                    }\n\n\n                                    if (exportRow) {\n\n                                        // create the export row\n                                        var row = this.createEventExportRow(columnNames,\n                                            columnNameToNumber, rowCounter, workgroupId,\n                                            extractedWISEIDsAndStudentNames['wiseId1'],\n                                            extractedWISEIDsAndStudentNames['wiseId2'],\n                                            extractedWISEIDsAndStudentNames['wiseId3'],\n                                            extractedWISEIDsAndStudentNames['studentName1'],\n                                            extractedWISEIDsAndStudentNames['studentName2'],\n                                            extractedWISEIDsAndStudentNames['studentName3'],\n                                            periodName, componentEventCount, event);\n\n                                        // add the row to the rows\n                                        rows.push(row);\n\n                                        // increment the row counter\n                                        rowCounter++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            var fileName = runId + \"_events.csv\";\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * Create the array that will be used as a row in the events export\n     * @param columnNames all the header column name\n     * @param columnNameToNumber the mapping from column name to column number\n     * @param rowCounter the current row number\n     * @param workgroupId the workgroup id\n     * @param wiseId1 the WISE ID 1\n     * @param wiseId2 the WISE ID 2\n     * @param wiseId3 the WISE ID 3\n     * @param periodName the period name\n     * @param componentEventCount the mapping of component to event count\n     * @param event the event\n     * @return an array containing the cells in the row\n     */\n    createEventExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3,\n            studentName1, studentName2, studentName3, periodName, componentEventCount, event) {\n\n        // create the row and prepopulate the elements with an empty string\n        var row = new Array(columnNames.length);\n        row.fill(\"\");\n\n        // set the row number\n        row[columnNameToNumber[\"#\"]] = rowCounter;\n\n        // set workgroup id\n        row[columnNameToNumber[\"Workgroup ID\"]] = workgroupId;\n\n        if (wiseId1 != null) {\n            // set the WISE ID 1\n            row[columnNameToNumber[\"WISE ID 1\"]] = wiseId1;\n        }\n        if (studentName1 != null && this.includeStudentNames) {\n          row[columnNameToNumber[\"Student Name 1\"]] = studentName1;\n        }\n        if (wiseId2 != null) {\n            // set the WISE ID 2\n            row[columnNameToNumber[\"WISE ID 2\"]] = wiseId2;\n        }\n        if (studentName2 != null && this.includeStudentNames) {\n          row[columnNameToNumber[\"Student Name 2\"]] = studentName2;\n        }\n        if (wiseId3 != null) {\n            // set the WISE ID 3\n            row[columnNameToNumber[\"WISE ID 3\"]] = wiseId3;\n        }\n        if (studentName3 != null && this.includeStudentNames) {\n          row[columnNameToNumber[\"Student Name 3\"]] = studentName3;\n        }\n\n        row[columnNameToNumber[\"Class Period\"]] = periodName;\n\n        // set the project id\n        row[columnNameToNumber[\"Project ID\"]] = this.ConfigService.getProjectId();\n\n        // set the project name\n        row[columnNameToNumber[\"Project Name\"]] = this.ProjectService.getProjectTitle();\n\n        // set the run id\n        row[columnNameToNumber[\"Run ID\"]] = this.ConfigService.getRunId();\n\n        // set the student work id\n        row[columnNameToNumber[\"Event ID\"]] = event.id;\n\n        if (event.serverSaveTime != null) {\n            // get the server save time\n            var serverSaveTime = new Date(event.serverSaveTime);\n\n            if (serverSaveTime != null) {\n                var serverSaveTimeString = serverSaveTime.toDateString() + \" \" + serverSaveTime.toLocaleTimeString();\n\n                // set the timestamp\n                row[columnNameToNumber[\"Server Timestamp\"]] = serverSaveTimeString;\n            }\n        }\n\n        if (event.clientSaveTime != null) {\n            // get the client save time\n            var clientSaveTime = new Date(event.clientSaveTime);\n\n            if (clientSaveTime != null) {\n                var clientSaveTimeString = clientSaveTime.toDateString() + \" \" + clientSaveTime.toLocaleTimeString();\n\n                row[columnNameToNumber[\"Client Timestamp\"]] = clientSaveTimeString;\n            }\n        }\n\n        if (event.nodeId != null) {\n            // set the node id\n            row[columnNameToNumber[\"Node ID\"]] = event.nodeId;\n        }\n\n        if (event.componentId != null) {\n            // set the component id\n            row[columnNameToNumber[\"Component ID\"]] = event.componentId;\n        }\n\n        var stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(event.nodeId);\n\n        if (stepTitle != null) {\n            // set the step title\n            row[columnNameToNumber[\"Step Title\"]] = stepTitle;\n        }\n\n        // get the component part number\n        var componentPartNumber = this.ProjectService.getComponentPositionByNodeIdAndComponentId(event.nodeId, event.componentId);\n\n        if (componentPartNumber != -1) {\n            // set the component part number\n            row[columnNameToNumber[\"Component Part Number\"]] = componentPartNumber + 1;\n        }\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(event.nodeId, event.componentId);\n\n        if (component != null) {\n            // set the component type\n            row[columnNameToNumber[\"Component Type\"]] = component.type;\n\n            // get the prompt with the html tags removed\n            var prompt = this.UtilService.removeHTMLTags(component.prompt);\n\n            // replace \" with \"\"\n            prompt = prompt.replace(/\"/g, '\"\"');\n\n            // set the prompt with the html tags removed\n            row[columnNameToNumber[\"Component Prompt\"]] = prompt;\n        }\n\n        // create the {{nodeId}}_{{componentId}} key to look up the component event count\n        var nodeIdAndComponentId = event.nodeId + \"_\" + event.componentId;\n\n        if (componentEventCount[nodeIdAndComponentId] == null) {\n            // initialize the component event count for this component to 1 if there is no entry\n            componentEventCount[nodeIdAndComponentId] = 1;\n        }\n\n        // get the revision counter\n        var revisionCounter = componentEventCount[nodeIdAndComponentId];\n        row[columnNameToNumber[\"Group Event Counter\"]] = revisionCounter;\n\n        // increment the revision counter\n        componentEventCount[nodeIdAndComponentId] = revisionCounter + 1;\n\n        // set the context\n        if (event.context != null) {\n            row[columnNameToNumber[\"Context\"]] = event.context;\n        }\n\n        // set the category\n        if (event.category != null) {\n            row[columnNameToNumber[\"Category\"]] = event.category;\n        }\n\n        // set the event\n        if (event.event != null) {\n            row[columnNameToNumber[\"Event\"]] = event.event;\n        }\n\n        // set the event data JSON\n        row[columnNameToNumber[\"Event Data\"]] = event;\n\n        // get the pretty printed representation of the event\n        var response = this.getEventResponse(event);\n\n        // set the response\n        row[columnNameToNumber[\"Response\"]] = response;\n\n        return row;\n    }\n\n    /**\n     * Get the pretty printed representation of the event\n     * @param event the event JSON object\n     * @return the pretty printed representation of the event\n     */\n    getEventResponse(event) {\n\n        var response = \" \";\n\n        if (event != null) {\n            if (event.event == \"branchPathTaken\") {\n                /*\n                 * this is a branch path taken event so we will show the title\n                 * of the first step in the branch path that was taken\n                 */\n                if (event.data != null && event.data.toNodeId != null) {\n\n                    // get the toNodeId\n                    var toNodeId = event.data.toNodeId;\n\n                    // get the step number and title of the toNodeId\n                    var stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(toNodeId);\n\n                    response = stepTitle;\n                }\n            }\n        }\n\n        return response;\n    }\n\n    exportNotebookItems(exportType) {\n\n        this.TeacherDataService.getExport(exportType).then((result) => {\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            exportFilename = runId + \"_notebook.csv\";\n\n            let COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID = 1;\n            let COLUMN_INDEX_NODE_ID = 2;\n            let COLUMN_INDEX_COMPONENT_ID = 3;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_TYPE = 9;\n            let COLUMN_INDEX_STUDENT_DATA = 10;\n            let COLUMN_INDEX_WORKGROUP_ID = 13;\n            let COLUMN_INDEX_WISE_IDS = 17;\n            let COLUMN_INDEX_WISE_ID_1 = 17;\n            let COLUMN_INDEX_WISE_ID_2 = 18;\n            let COLUMN_INDEX_WISE_ID_3 = 19;\n            let COLUMN_INDEX_STUDENT_RESPONSE = 20;\n\n            if (exportType === \"latestNotebookItems\") {\n                let hash = {};  // store latestStudentWork. Assume that key = (localNotebookItemId)\n                result = result.reverse().filter( (studentWorkRow) => {\n                    let hashKey = studentWorkRow[COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                    if (!hash.hasOwnProperty(hashKey)) {\n                        // remember in hash\n                        hash[hashKey] = studentWorkRow;\n                        return true;\n                    } else {\n                        // we already have the latest, so we can disregard this studentWorkRow.\n                        return false;\n                    }\n                }).reverse();\n                exportFilename = runId + \"_latest_notebook_items.csv\";\n            } else if (exportType === \"allNotebookItems\") {\n                exportFilename = runId + \"_all_notebook_items.csv\";\n            }\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                    row[COLUMN_INDEX_STUDENT_RESPONSE] = \"response\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                    // get the student data JSON and extract responses into its own column\n                    let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                    if (row[COLUMN_INDEX_TYPE] === \"report\") {\n                        if (studentDataJSONCell.content != null) {\n                            //row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.content);\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = this.UtilService.removeHTMLTags(studentDataJSONCell.content);\n\n                        } else {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                        }\n                    } else if (row[COLUMN_INDEX_TYPE] === \"note\") {\n                        if (studentDataJSONCell.text != null) {\n                            //row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.text);\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = this.UtilService.removeHTMLTags(studentDataJSONCell.text);\n                        } else {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                        }\n                    }\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    exportNotifications() {\n\n        this.TeacherDataService.getExport(\"notifications\").then((result) => {\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            exportFilename = runId + \"_notifications.csv\";\n\n            let COLUMN_INDEX_NODE_ID = 1;\n            let COLUMN_INDEX_COMPONENT_ID = 2;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_TYPE = 10;\n            let COLUMN_INDEX_WISE_IDS = 21;\n            let COLUMN_INDEX_WISE_ID_1 = 21;\n            let COLUMN_INDEX_WISE_ID_2 = 22;\n            let COLUMN_INDEX_WISE_ID_3 = 23;\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    exportStudentAssets() {\n        this.TeacherDataService.getExport(\"studentAssets\");\n    }\n\n    /**\n     * Get the selected nodes to export\n     * @return an array of objects that contain a nodeId field and maybe also\n     * a componentId field\n     * example\n     * [\n     *     {\n     *         nodeId: \"node1\",\n     *         componentId: \"343b8aesf7\"\n     *     },\n     *     {\n     *         nodeId: \"node2\",\n     *         componentId: \"b34gaf0ug2\"\n     *     },\n     *     {\n     *         nodeId: \"node3\"\n     *     }\n     * ]\n     * Note: \"node3\" means just node3, not components in node2.\n     */\n    getSelectedNodesToExport() {\n        let selectedNodes = [];\n\n        // loop through all the import project items\n        for (let n = 0; n < this.projectItems.length; n++) {\n            let item = this.projectItems[n];\n            if (item.node.type === \"node\") {\n                let nodeId = item.node.id;\n                if (item.checked) {\n                    // this item is checked so we will add it to the array of nodes that we will export\n\n                    // create the object that contains the nodeId\n                    let selectedStep = {\n                        nodeId: nodeId\n                    };\n\n                    selectedNodes.push(selectedStep);\n                }\n                // also check the components\n                if (item.node.components != null && item.node.components.length > 0) {\n                    item.node.components.map((component) => {\n                        if (component.checked) {\n                            // this item is checked so we will add it to the array of nodes that we will export\n\n                            // create the object that contains the nodeId and componentId\n                            let selectedComponent = {\n                                nodeId: nodeId,\n                                componentId: component.id\n                            };\n\n                            selectedNodes.push(selectedComponent);\n                        }\n                    });\n                }\n            }\n        }\n\n        return selectedNodes;\n    }\n\n    /**\n     * Get a mapping of node/component id strings to true.\n     * example if\n     * selectedNodes = [\n     *     {\n     *         nodeId: \"node1\",\n     *         componentId: \"343b8aesf7\"\n     *     },\n     *     {\n     *         nodeId: \"node2\",\n     *         componentId: \"b34gaf0ug2\"\n     *     },\n     *     {\n     *         nodeId: \"node3\"\n     *     }\n     * ]\n     *\n     * this function will return\n     * {\n     *     \"node1-343b8aesf7\": true,\n     *     \"node2-b34gaf0ug2\": true,\n     *     \"node3\": true\n     * }\n     *\n     * @param selectedNodes an array of objects that contain a nodeId field and maybe also\n     * a componentId field\n     * @return a mapping of node/component id strings to true\n     */\n    getSelectedNodesMap(selectedNodes) {\n\n        var selectedNodesMap = {};\n\n        if (selectedNodes != null) {\n\n            // loop through all the selected nodes\n            for (var sn = 0; sn < selectedNodes.length; sn++) {\n                var selectedNode = selectedNodes[sn];\n\n                if (selectedNode != null) {\n                    var nodeId = selectedNode.nodeId;\n                    var componentId = selectedNode.componentId;\n\n                    var selectedNodeString = \"\";\n\n                    if (nodeId != null && componentId != null) {\n                        // create the string like \"node1-343b8aesf7\"\n                        selectedNodeString = nodeId + \"-\" + componentId;\n                    } else if (nodeId != null) {\n                        // create the string like \"node3\"\n                        selectedNodeString = nodeId;\n                    }\n\n                    if (selectedNodeString != null && selectedNodeString != \"\") {\n                        // add the mapping\n                        selectedNodesMap[selectedNodeString] = true;\n                    }\n                }\n            }\n        }\n\n        return selectedNodesMap;\n    }\n\n    /**\n     * Handle node item clicked\n     * @param nodeItem the item object for a given activity or step\n     */\n    nodeItemClicked(nodeItem) {\n\n        if (nodeItem != null) {\n\n            if (nodeItem.node != null) {\n                // the node item is a group or step\n\n                // get the node\n                var node = nodeItem.node;\n\n                if (node.ids != null) {\n                    // this is a group node\n\n                    // loop through all the child node ids\n                    for (var n = 0; n < node.ids.length; n++) {\n\n                        // get a child step id\n                        var nodeId = node.ids[n];\n\n                        // get a child step item\n                        var childNodeItem = this.projectIdToOrder[nodeId];\n\n                        // set the checked value for the step item\n                        childNodeItem.checked = nodeItem.checked;\n\n                        // get all the components in the step\n                        var components = childNodeItem.node.components;\n\n                        if (components != null) {\n\n                            // loop through all the components in the step\n                            for (var c = 0; c < components.length; c++) {\n\n                                // set the checked value for the component item\n                                components[c].checked = nodeItem.checked;\n                            }\n                        }\n                    }\n                } else if (node.components != null) {\n                    // this is a step node\n\n                    if (nodeItem.checked) {\n                        // if this node item is checked, make sure its components are also checked.\n                        if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                            nodeItem.node.components.map((componentItem) => { componentItem.checked = true; });\n                        }\n                    } else {\n                        // if this node item is unchecked, make sure its components are also unchecked.\n                        if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                            nodeItem.node.components.map((componentItem) => { componentItem.checked = false; });\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Handle select all items\n     */\n    selectAll(doSelect = true) {\n        if (this.projectIdToOrder != null) {\n\n            // loop through all the group nodes and step nodes\n            for (let nodeId in this.projectIdToOrder) {\n                let projectItem = this.projectIdToOrder[nodeId];\n                if (projectItem.order != 0) {\n\n                    projectItem.checked = doSelect;\n\n                    if (projectItem.node.type != \"group\") {\n                        // the project item is a step\n\n                        // also check its components\n                        if (projectItem.node != null && projectItem.node.components != null && projectItem.node.components.length > 0) {\n                            projectItem.node.components.map((componentItem) => { componentItem.checked = doSelect; });\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Handle deselect all items\n     */\n    deselectAll() {\n        this.selectAll(false);\n    }\n\n    /**\n     * Preview the project\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n        // open the preview step in a new tab\n        window.open(previewProjectURL);\n    }\n\n    /**\n     * Preview the step\n     * @param node\n     */\n    previewNode(node) {\n\n        if (node != null) {\n\n            // get the node id\n            let nodeId = node.id;\n\n            // get the preview project url\n            let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n\n            // create the url to preview the step\n            let previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n\n    /**\n     * Create a csv export file with one workgroup per row\n     */\n    exportOneWorkgroupPerRow() {\n        var selectedNodes = null;\n\n        /*\n         * holds the mappings from nodeid or nodeid-componentid to a boolean\n         * value of whether the node was selected\n         * example\n         * selectedNodesMap[\"node3\"] = true\n         * selectedNodesMap[\"node4-wt38sdf1d3\"] = true\n         */\n        var selectedNodesMap = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // get the steps that were selected\n            selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            } else {\n                /*\n                 * the user has selected some steps/components so we will\n                 * generate a selected nodes map\n                 */\n                selectedNodesMap = this.getSelectedNodesMap(selectedNodes);\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"oneWorkgroupPerRow\", selectedNodes).then((result) => {\n\n            // the rows in the export\n            var rows = [];\n\n            // get the project id\n            var projectId = this.ConfigService.getProjectId();\n\n            // get the project title\n            var projectTitle = this.ProjectService.getProjectTitle();\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            var startDate = \"\";\n\n            var endDate = \"\";\n\n            // get the column ids that we will use for this export\n            var columnIds = this.getColumnIdsForOneWorkgroupPerRow(selectedNodesMap);\n\n            // get all the step node ids\n            var nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n            // the headers for the description row\n            var descriptionRowHeaders = [\n                \"Workgroup ID\",\n                \"WISE ID 1\",\n                \"Student Name 1\",\n                \"WISE ID 2\",\n                \"Student Name 2\",\n                \"WISE ID 3\",\n                \"Student Name 3\",\n                \"Class Period\",\n                \"Project ID\",\n                \"Project Name\",\n                \"Run ID\",\n                \"Start Date\",\n                \"End Date\"\n            ];\n\n            // generate the mapping from column id to column index\n            var columnIdToColumnIndex = this.getColumnIdToColumnIndex(columnIds, descriptionRowHeaders);\n\n            // generate the top rows that contain the header cells\n            var topRows = this.getOneWorkgroupPerRowTopRows(columnIds, columnIdToColumnIndex, descriptionRowHeaders);\n\n            // add the top rows\n            rows = rows.concat(topRows);\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // loop through all the workgroups\n            for (var w = 0; w < workgroups.length; w++) {\n\n                // get a workgroup\n                var workgroup = workgroups[w];\n\n                if (workgroup != null) {\n\n                    /*\n                     * Create the row for the workgroup and fill each cell with\n                     * a space \" \".\n                     * The array length will be equal to the number of\n                     * description header columns plus a column for the vertical\n                     * headers plus all the columns for the steps/components.\n                     */\n                    var workgroupRow = new Array(descriptionRowHeaders.length + 1 + columnIds.length);\n                    workgroupRow.fill(\" \");\n\n                    // get the workgroup information\n                    var workgroupId = workgroup.workgroupId;\n                    var periodName = workgroup.periodName;\n                    var userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n\n                    workgroupRow[columnIdToColumnIndex[\"Workgroup ID\"]] = workgroupId;\n\n                    var extractedWISEIDsAndStudentNames = this.extractWISEIDsAndStudentNames(userInfo.users);\n                    var wiseId1 = extractedWISEIDsAndStudentNames[\"wiseId1\"];\n                    var wiseId2 = extractedWISEIDsAndStudentNames[\"wiseId2\"];\n                    var wiseId3 = extractedWISEIDsAndStudentNames[\"wiseId3\"];\n                    var studentName1 = extractedWISEIDsAndStudentNames[\"studentName1\"];\n                    var studentName2 = extractedWISEIDsAndStudentNames[\"studentName2\"];\n                    var studentName3 = extractedWISEIDsAndStudentNames[\"studentName3\"];\n\n                    if (wiseId1 != null) {\n                        workgroupRow[columnIdToColumnIndex[\"WISE ID 1\"]] = wiseId1;\n                    }\n                    if (studentName1 != null && this.includeStudentNames) {\n                      workgroupRow[columnIdToColumnIndex[\"Student Name 1\"]] = studentName1;\n                    }\n                    if (wiseId2 != null) {\n                        workgroupRow[columnIdToColumnIndex[\"WISE ID 2\"]] = wiseId2;\n                    }\n                    if (studentName2 != null && this.includeStudentNames) {\n                      workgroupRow[columnIdToColumnIndex[\"Student Name 2\"]] = studentName2;\n                    }\n                    if (wiseId3 != null) {\n                        workgroupRow[columnIdToColumnIndex[\"WISE ID 3\"]] = wiseId3;\n                    }\n                    if (studentName3 != null && this.includeStudentNames) {\n                      workgroupRow[columnIdToColumnIndex[\"Student Name 3\"]] = studentName3;\n                    }\n\n                    workgroupRow[columnIdToColumnIndex[\"Class Period\"]] = periodName;\n                    workgroupRow[columnIdToColumnIndex[\"Project ID\"]] = projectId;\n                    workgroupRow[columnIdToColumnIndex[\"Project Name\"]] = projectTitle;\n                    workgroupRow[columnIdToColumnIndex[\"Run ID\"]] = runId;\n                    workgroupRow[columnIdToColumnIndex[\"Start Date\"]] = startDate;\n                    workgroupRow[columnIdToColumnIndex[\"End Date\"]] = endDate;\n\n                    // loop through all the steps\n                    for (var n = 0; n < nodeIds.length; n++) {\n                        var nodeId = nodeIds[n];\n\n                        // get all the components in the step\n                        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                        if (components != null) {\n\n                            // loop through all the components\n                            for (var c = 0; c < components.length; c++) {\n                                var component = components[c];\n\n                                if (component != null) {\n                                    var componentId = component.id;\n\n                                    if (this.exportComponent(selectedNodesMap, nodeId, componentId)) {\n                                        // the researcher wants to export this component\n\n                                        // get the column prefix\n                                        var columnIdPrefix = nodeId + \"-\" + componentId;\n\n                                        // get the latest component state\n                                        var componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n\n                                        if (componentState != null) {\n                                            if (this.includeStudentWorkIds) {\n                                                // we are exporting student work ids\n                                                workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = componentState.id;\n                                            }\n\n                                            if (this.includeStudentWorkTimestamps) {\n                                                // we are exporting student work timestamps\n\n                                                if (componentState.serverSaveTime != null) {\n                                                    // get the time stamp as a pretty printed date time string\n                                                    var formattedDateTime = this.UtilService.convertMillisecondsToFormattedDateTime(componentState.serverSaveTime);\n\n                                                    // set the time stamp string e.g. Wed Apr 06 2016 9:05:38 AM\n                                                    workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = formattedDateTime;\n                                                }\n                                            }\n\n                                            // set the student data string\n                                            workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = this.getStudentDataString(componentState);\n\n                                            if (this.includeScores || this.includeComments) {\n                                                // we are exporting scores or comments\n\n                                                // get the latest score and comment annotation\n                                                var latestComponentAnnotations = this.AnnotationService.getLatestComponentAnnotations(nodeId, componentId, workgroupId);\n\n                                                if (latestComponentAnnotations != null) {\n                                                    var scoreAnnotation = latestComponentAnnotations.score;\n                                                    var commentAnnotation = latestComponentAnnotations.comment;\n\n                                                    if (scoreAnnotation != null) {\n\n\n                                                        if (this.includeScoreTimestamps) {\n                                                            // we are exporting score timestamps\n\n                                                            // get the score timestamp as a pretty printed date time\n                                                            var scoreTimestamp = this.UtilService.convertMillisecondsToFormattedDateTime(scoreAnnotation.serverSaveTime);\n\n                                                            // set the score timestamp\n                                                            workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = scoreTimestamp;\n                                                        }\n\n                                                        if (this.includeScores) {\n                                                            // we are exporting scores\n\n                                                            if (scoreAnnotation.data != null && scoreAnnotation.data.value != null) {\n\n                                                                var scoreValue = scoreAnnotation.data.value;\n\n                                                                // set the score\n                                                                workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = scoreValue;\n                                                            }\n                                                        }\n                                                    }\n\n                                                    if (commentAnnotation != null) {\n\n                                                        if (this.includeCommentTimestamps) {\n                                                            // we are exporting comment timestamps\n\n                                                            // get the comment timestamp as a pretty printed date time\n                                                            var commentTimestamp = this.UtilService.convertMillisecondsToFormattedDateTime(commentAnnotation.serverSaveTime);\n\n                                                            // set the comment timestamp\n                                                            workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = commentTimestamp;\n                                                        }\n\n                                                        if (this.includeComments) {\n                                                            // we are exporting comments\n\n                                                            if (commentAnnotation.data != null && commentAnnotation.data.value != null) {\n                                                                var commentValue = commentAnnotation.data.value;\n\n                                                                // set the comment\n                                                                workgroupRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = commentValue;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        if (this.exportNode(selectedNodesMap, nodeId)) {\n                            // the researcher wants to export this step\n\n                            if (this.ProjectService.isBranchPoint(nodeId)) {\n                                // this step is a branch point\n\n                                var toNodeId = null;\n                                var stepTitle = null;\n\n                                var eventType = 'branchPathTaken';\n\n                                /*\n                                 * get the latest branchPathTaken event for this\n                                 * step\n                                 */\n                                var latestBranchPathTakenEvent = this.TeacherDataService.getLatestEventByWorkgroupIdAndNodeIdAndType(workgroupId, nodeId, eventType);\n\n                                if (latestBranchPathTakenEvent != null &&\n                                    latestBranchPathTakenEvent.data != null &&\n                                    latestBranchPathTakenEvent.data.toNodeId != null) {\n\n                                    // get the step that the student branched to\n                                    toNodeId = latestBranchPathTakenEvent.data.toNodeId;\n\n                                    // get the title of the step\n                                    stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(toNodeId);\n                                }\n\n                                if (this.includeBranchPathTakenNodeId) {\n                                    // we are exporting the branch path taken node ids\n\n                                    if (toNodeId != null) {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = toNodeId;\n                                    } else {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \" \";\n                                    }\n                                }\n\n                                if (this.includeBranchPathTaken) {\n                                    // we are exporting branch path taken\n\n                                    var branchLetter = this.ProjectService.getBranchLetter(toNodeId);\n\n                                    if (stepTitle != null) {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = branchLetter;\n                                    } else {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \" \";\n                                    }\n                                }\n\n                                if (this.includeBranchPathTakenStepTitle) {\n                                    // we are exporting branch path taken step titles\n\n                                    if (stepTitle != null) {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = stepTitle;\n                                    } else {\n                                        workgroupRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \" \";\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // add this workgroup's row to the array of all rows\n                    rows.push(workgroupRow);\n                }\n            }\n\n            // create the file name\n            var fileName = runId + \"_one_workgroup_per_row.csv\";\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * Get the column ids for the One Workgroup Per Row export\n     * @param selectedNodesMap the nodes that were selected\n     * @return an array of column ids. the column ids will be in the format\n     * nodeId-componentId-studentWork\n     * nodeId-componentId-score\n     * nodeId-componentId-comment\n     */\n    getColumnIdsForOneWorkgroupPerRow(selectedNodesMap) {\n        var columnIds = [];\n\n        // get all the step node ids in order\n        var nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n        if (nodeIds != null) {\n\n            // loop through all the step node ids\n            for (var n = 0; n < nodeIds.length; n++) {\n                var nodeId = nodeIds[n];\n\n                // get the components in the step\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                if (components != null) {\n\n                    // loop through all the components in the step\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            var componentId = component.id;\n\n                            if (this.exportComponent(selectedNodesMap, nodeId, componentId)) {\n                                /*\n                                 * the component was selected so we will create column\n                                 * ids for it\n                                 */\n\n                                var columnIdPrefix = nodeId + \"-\" + componentId;\n\n                                if (this.includeStudentWorkIds) {\n                                    /*\n                                     * we are exporting student work ids so we\n                                     * will create the column id for the student\n                                     * work id\n                                     */\n                                    columnIds.push(columnIdPrefix + \"-studentWorkId\");\n                                }\n\n                                if (this.includeStudentWorkTimestamps) {\n                                    /*\n                                     * we are exporting timestamps so we will\n                                     * create the column id for the timestamp\n                                     */\n                                    columnIds.push(columnIdPrefix + \"-studentWorkTimestamp\");\n                                }\n\n                                if (this.includeStudentWork) {\n                                    // create the column id for the studentWork\n                                    columnIds.push(columnIdPrefix + \"-studentWork\");\n                                }\n\n                                if (this.includeScoreTimestamps) {\n                                    /*\n                                     * we are exporting score timestamps so we\n                                     * will create the column id for the score\n                                     * timestamp\n                                     */\n                                    columnIds.push(columnIdPrefix + \"-scoreTimestamp\");\n                                }\n\n                                if (this.includeScores) {\n                                    // we are exporting scores so we will create the column id for the score\n                                    columnIds.push(columnIdPrefix + \"-score\");\n                                }\n\n                                if (this.includeCommentTimestamps) {\n                                    /*\n                                     * we are exporting comment timestamps so we\n                                     * will create the column id for the comment\n                                     * timestamp\n                                     */\n                                    columnIds.push(columnIdPrefix + \"-commentTimestamp\");\n                                }\n\n                                if (this.includeComments) {\n                                    // we are exporting comments so we will create the column id for the comment\n                                    columnIds.push(columnIdPrefix + \"-comment\");\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (this.exportNode(selectedNodesMap, nodeId)) {\n                    // the step was selected\n\n                    if (this.ProjectService.isBranchPoint(nodeId)) {\n                        // the step is a branch point\n\n                        if (this.includeBranchPathTakenNodeId) {\n                            // we are exporting branch path taken node ids\n                            columnIds.push(nodeId + \"-branchPathTakenNodeId\");\n                        }\n\n                        if (this.includeBranchPathTaken) {\n                            // we are exporting branch path taken\n                            columnIds.push(nodeId + \"-branchPathTaken\");\n                        }\n\n                        if (this.includeBranchPathTakenStepTitle) {\n                            // we are exporting branch path taken step titles\n                            columnIds.push(nodeId + \"-branchPathTakenStepTitle\");\n                        }\n                    }\n                }\n            }\n        }\n\n        return columnIds;\n    }\n\n    /**\n     * Create mappings from column id to column index so that we can easily\n     * insert cell values into the correct column when we fill in the row\n     * for a workgroup\n     * @param columnIds an array of column ids in the order that the\n     * associated columns will appear in the export\n     * @param descriptionRowHeaders an array of headers in the description row\n     * @return an object that contains mappings from column id to column index\n     */\n    getColumnIdToColumnIndex(columnIds, descriptionRowHeaders) {\n\n        /*\n         * the student work columns will start after the description header\n         * columns and vertical headers column\n         */\n        var numberOfColumnsToShift = descriptionRowHeaders.length + 1;\n\n        var columnIdToColumnIndex = {};\n\n        /*\n         * loop through all the description columns\n         * Workgroup ID\n         * WISE ID 1\n         * WISE ID 2\n         * WISE ID 3\n         * Class Period\n         * Project ID\n         * Project Name\n         * Run ID\n         * Start Date\n         * End Date\n         */\n        for (var d = 0; d < descriptionRowHeaders.length; d++) {\n            // get the description column\n            var descriptionRowHeader = descriptionRowHeaders[d];\n\n            // set the column index for the description column\n            columnIdToColumnIndex[descriptionRowHeader] = d;\n        }\n\n        // generate the header row by looping through all the column names\n        for (var c = 0; c < columnIds.length; c++) {\n\n            // get a column name\n            var columnId = columnIds[c];\n\n            if (columnId != null) {\n                /*\n                 * Add a mapping from column name to column index. The columns\n                 * for the components will start after the blank columns and\n                 * after the column that contains the vertical headers for the\n                 * top rows. We need to add +1 for the vertical headers column\n                 * which contains the values Step Title, Component Part Number,\n                 * Component Type, Prompt, Node ID, Component ID, Description.\n                 */\n                columnIdToColumnIndex[columnId] = numberOfColumnsToShift + c;\n            }\n        }\n\n        return columnIdToColumnIndex;\n    }\n\n    /**\n     * Get the top rows in the One Workgroup Per Row export\n     * @param columnIds an array of column ids\n     * @param columnIdToColumnIndex an object containing mappings from column id\n     * to column index\n     * @param descriptionRowHeaders an array containing the description row\n     * headers\n     * @return an array of of the top rows. each top row is also an array\n     */\n    getOneWorkgroupPerRowTopRows(columnIds, columnIdToColumnIndex, descriptionRowHeaders) {\n\n        // get the total number of columns in a row\n        var numColumns = descriptionRowHeaders.length + 1 + columnIds.length;\n\n        // create the top rows\n        var stepTitleRow = new Array(numColumns);\n        var componentPartNumberRow = new Array(numColumns);\n        var componentTypeRow = new Array(numColumns);\n        var componentPromptRow = new Array(numColumns);\n        var nodeIdRow = new Array(numColumns);\n        var componentIdRow = new Array(numColumns);\n        var columnIdRow = new Array(numColumns);\n        var descriptionRow = new Array(numColumns);\n\n        /*\n         * populate the top rows with a space. we do this so that it makes it\n         * easier to view in the export. for example if there is a cell with\n         * text in it and a blank cell to the right of it, excel will display\n         * the text overflow into the blank cell. if we have cells with \" \"\n         * instead of \"\", this overflow will not occur.\n         */\n        stepTitleRow.fill(\" \");\n        componentPartNumberRow.fill(\" \");\n        componentTypeRow.fill(\" \");\n        componentPromptRow.fill(\" \");\n        nodeIdRow.fill(\" \");\n        componentIdRow.fill(\" \");\n        columnIdRow.fill(\" \");\n        descriptionRow.fill(\" \");\n\n        //  set the cell values for the vertical header column\n        stepTitleRow[descriptionRowHeaders.length] = \"Step Title\";\n        componentPartNumberRow[descriptionRowHeaders.length] = \"Component Part Number\";\n        componentTypeRow[descriptionRowHeaders.length] = \"Component Type\";\n        componentPromptRow[descriptionRowHeaders.length] = \"Prompt\";\n        nodeIdRow[descriptionRowHeaders.length] = \"Node ID\";\n        componentIdRow[descriptionRowHeaders.length] = \"Component ID\";\n        columnIdRow[descriptionRowHeaders.length] = \"Column ID\";\n        descriptionRow[descriptionRowHeaders.length] = \"Description\";\n\n        // fill in the headers in the description row\n        for (var d = 0; d < descriptionRowHeaders.length; d++) {\n            descriptionRow[d] = descriptionRowHeaders[d];\n        }\n\n        // get all the step node ids in the order that they appear in the project\n        var nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n        if (nodeIds != null) {\n\n            // loop through all the step node ids\n            for (var n = 0; n < nodeIds.length; n++) {\n                var nodeId = nodeIds[n];\n\n                // get a step title\n                var stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n                // get the components in the step\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                if (components != null) {\n\n                    // loop through all the components in the step\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            var componentId = component.id;\n\n                            // get the column prefix\n                            var columnIdPrefix = nodeId + \"-\" + componentId;\n\n                            // get the prompt with the html tags removed\n                            var prompt = this.UtilService.removeHTMLTags(component.prompt);\n\n                            // replace \" with \"\"\n                            prompt = prompt.replace(/\"/g, '\"\"');\n\n                            if (prompt == \"\") {\n                                prompt = \" \";\n                            }\n\n                            if (this.includeStudentWorkIds) {\n                                // we are exporting student work ids\n\n                                // fill in the top 7 cells in the column for this component score\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = columnIdPrefix + \"-studentWorkId\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkId\"]] = \"Student Work ID\";\n                            }\n\n                            if (this.includeStudentWorkTimestamps) {\n                                // we are exporting timestamps\n\n                                // fill in the top 7 cells in the column for this component score\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = columnIdPrefix + \"-studentWorkTimestamp\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWorkTimestamp\"]] = \"Student Work Timestamp\";\n                            }\n\n                            if (this.includeStudentWork) {\n                                // we are exporting student work\n\n                                // fill in the top 7 cells in the column for this component student work\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = columnIdPrefix + \"-studentWork\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-studentWork\"]] = \"Student Work\";\n                            }\n\n                            if (this.includeScoreTimestamps) {\n                                // we are exporting score timestamps\n\n                                // fill in the top 7 cells in the column for this component score timestamp\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = columnIdPrefix + \"-scoreTimestamp\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-scoreTimestamp\"]] = \"Score Timestamp\";\n                            }\n\n                            if (this.includeScores) {\n                                // we are exporting scores\n\n                                // fill in the top 7 cells in the column for this component score\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = columnIdPrefix + \"-score\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-score\"]] = \"Score\";\n                            }\n\n                            if (this.includeCommentTimestamps) {\n                                // we are exporting comment timestamps\n\n                                // fill in the top 7 cells in the column for this component comment timestamp\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = columnIdPrefix + \"-commentTimestamp\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-commentTimestamp\"]] = \"Comment Timestamp\";\n                            }\n\n                            if (this.includeComments) {\n                                // we are exporting comments\n\n                                // fill in the top 7 cells in the column for this component comment\n                                stepTitleRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = stepTitle;\n                                componentPartNumberRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = (c + 1);\n                                componentTypeRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = component.type;\n                                componentPromptRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = prompt;\n                                nodeIdRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = nodeId;\n                                componentIdRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = componentId;\n                                columnIdRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = columnIdPrefix + \"-comment\";\n                                descriptionRow[columnIdToColumnIndex[columnIdPrefix + \"-comment\"]] = \"Comment\";\n                            }\n                        }\n                    }\n                }\n\n                if (this.includeBranchPathTakenNodeId) {\n                    // we are exporting branch path taken node ids\n\n                    if (this.ProjectService.isBranchPoint(nodeId)) {\n                        // this step is a branch point\n\n                        // fill in the top 7 cells in the column for this step branch path taken node id\n                        stepTitleRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = stepTitle;\n                        componentPartNumberRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \" \";\n                        componentTypeRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \" \";\n                        componentPromptRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \" \";\n                        nodeIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = nodeId;\n                        componentIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \" \";\n                        columnIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = nodeId + \"-branchPathTakenNodeId\";\n                        descriptionRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenNodeId\"]] = \"Branch Path Taken Node ID\";\n                    }\n                }\n\n                if (this.includeBranchPathTaken) {\n                    // we are exporting the branch path taken\n\n                    if (this.ProjectService.isBranchPoint(nodeId)) {\n                        // this step is a branch point\n\n                        // fill in the top 7 cells in the column for this step branch path taken\n                        stepTitleRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = stepTitle;\n                        componentPartNumberRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \" \";\n                        componentTypeRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \" \";\n                        componentPromptRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \" \";\n                        nodeIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = nodeId;\n                        componentIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \" \";\n                        columnIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = nodeId + \"-branchPathTaken\";\n                        descriptionRow[columnIdToColumnIndex[nodeId + \"-branchPathTaken\"]] = \"Branch Path Taken\";\n                    }\n                }\n\n                if (this.includeBranchPathTakenStepTitle) {\n                    // we are exporting branch path taken step titles\n\n                    if (this.ProjectService.isBranchPoint(nodeId)) {\n                        // this step is a branch point\n\n                        // fill in the top 7 cells in the column for this step branch path taken step title\n                        stepTitleRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = stepTitle;\n                        componentPartNumberRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \" \";\n                        componentTypeRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \" \";\n                        componentPromptRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \" \";\n                        nodeIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = nodeId;\n                        componentIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \" \";\n                        columnIdRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = nodeId + \"-branchPathTakenStepTitle\";\n                        descriptionRow[columnIdToColumnIndex[nodeId + \"-branchPathTakenStepTitle\"]] = \"Branch Path Taken Step Title\";\n                    }\n                }\n            }\n        }\n\n        var topRows = [];\n\n        // add all the top rows\n        topRows.push(stepTitleRow);\n        topRows.push(componentPartNumberRow);\n        topRows.push(componentTypeRow);\n        topRows.push(componentPromptRow);\n        topRows.push(nodeIdRow);\n        topRows.push(componentIdRow);\n        topRows.push(columnIdRow);\n        topRows.push(descriptionRow);\n\n        return topRows;\n    }\n\n    /**\n     * Get the component service for a component type\n     * @param componentType the component type\n     * @return the component service or null if it doesn't exist\n     */\n    getComponentService(componentType) {\n\n        var componentService = null;\n\n        if (componentType != null) {\n\n            /*\n             * check our mapping of component type to component service to see\n             * if we have already retrieved the component service before\n             */\n            componentService = this.componentTypeToComponentService[componentType];\n\n            if (componentService == null) {\n                /*\n                 * we have not retrieved this component service before so we\n                 * will get it\n                 */\n                var componentService = this.$injector.get(componentType + 'Service');\n\n                /*\n                 * save the component service to our mapping for easy retrieval\n                 * in the future\n                 */\n                this.componentTypeToComponentService[componentType] = componentService;\n            }\n        }\n\n        return componentService;\n    }\n\n    /**\n     * Check if we want to export this node\n     * @param selectedNodesMap a mapping of node id to boolean value of whether\n     * the researcher has checked the node\n     * @param nodeId the node id\n     * @return whether the node was checked\n     */\n    exportNode(selectedNodesMap, nodeId) {\n        if (selectedNodesMap == null || this.isNodeSelected(selectedNodesMap, nodeId)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Check if we want to export this component\n     * @param selectedNodesMap a mapping of node id to boolean value of whether\n     * the researcher has checked the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return whether the component was checked\n     */\n    exportComponent(selectedNodesMap, nodeId, componentId) {\n        if (selectedNodesMap == null || this.isComponentSelected(selectedNodesMap, nodeId, componentId)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * The \"Export One Workgroup Per Row\" button was clicked so we will display the\n     * view for it\n     */\n    exportOneWorkgroupPerRowClicked() {\n\n        // set the export type\n        this.exportType = 'oneWorkgroupPerRow';\n    }\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * Check if the node is in any branch path\n     * @param nodeId the node id of the node\n     * @return whether the node is in any branch path\n     */\n    isNodeInAnyBranchPath(nodeId) {\n        return this.ProjectService.isNodeInAnyBranchPath(nodeId);\n    }\n\n    /**\n     * The default button was clicked\n     */\n    defaultClicked() {\n        // set the default export settings\n        this.setDefaultExportSettings();\n    }\n\n    /**\n     * The everything button was clicked\n     */\n    everythingClicked() {\n        // enable all the settings\n\n        // settings for one workgroup per row export\n        this.includeStudentWork = true;\n        this.includeStudentWorkIds = true;\n        this.includeStudentNames = true;\n        this.includeStudentWorkTimestamps = true;\n        this.includeBranchPathTaken = true;\n        this.includeBranchPathTakenStepTitle = true;\n        this.includeBranchPathTakenNodeId = true;\n        this.includeScores = true;\n        this.includeScoreTimestamps = true;\n        this.includeComments = true;\n        this.includeCommentTimestamps = true;\n        this.exportStepSelectionType = 'exportAllSteps';\n\n        // settings for raw data export\n        this.includeAnnotations = true;\n        this.includeEvents = true;\n    }\n\n    /**\n     * Set the default export settings\n     */\n    setDefaultExportSettings() {\n        // enable the default settings\n\n        // settings for one workgroup per row export\n        this.includeStudentWork = true;\n        this.includeStudentWorkIds = false;\n        if (this.canViewStudentNames) {\n          this.includeStudentNames = true;\n        } else {\n          this.includeStudentNames = false;\n        }\n        this.includeStudentWorkTimestamps = false;\n        this.includeBranchPathTaken = true;\n        this.includeBranchPathTakenStepTitle = false;\n        this.includeBranchPathTakenNodeId = false;\n        this.includeScores = false;\n        this.includeScoreTimestamps = false;\n        this.includeComments = false;\n        this.includeCommentTimestamps = false;\n        this.exportStepSelectionType = 'exportAllSteps';\n\n        // settings for raw data export\n        this.includeAnnotations = false;\n        this.includeEvents = false;\n\n        /*\n         * remove checked fields that may have been accidentally saved by the\n         * authoring tool or grading tool\n         */\n        this.ProjectService.cleanupBeforeSave();\n    }\n\n    /**\n     * The \"Export Raw Data\" button was clicked\n     */\n    rawDataExportClicked() {\n        // set the export type\n        this.exportType = 'rawData';\n    }\n\n    /**\n     * Export the raw data\n     */\n    exportRawData() {\n        var selectedNodes = null;\n\n        /*\n         * holds the mappings from nodeid or nodeid-componentid to a boolean\n         * value of whether the node was selected\n         * example\n         * selectedNodesMap[\"node3\"] = true\n         * selectedNodesMap[\"node4-wt38sdf1d3\"] = true\n         */\n        var selectedNodesMap = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // get the steps that were selected\n            var selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            } else {\n                /*\n                 * the user has selected some steps/components so we will\n                 * generate a selected nodes map\n                 */\n                selectedNodesMap = this.getSelectedNodesMap(selectedNodes);\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"rawData\", selectedNodes).then((result) => {\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            var data = {};\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // make a copy of the workgroups array to prevent referencing issues\n            workgroups = this.UtilService.makeCopyOfJSONObject(workgroups);\n\n            // loop through all the workgroups\n            for (var w = 0; w < workgroups.length; w++) {\n                var workgroup = workgroups[w];\n\n                if (workgroup != null) {\n                    if (!this.includeStudentNames) {\n                      this.removeNamesFromWorkgroup(workgroup);\n                    }\n\n                    // get the workgroup id\n                    var workgroupId = workgroup.workgroupId;\n\n                    if (this.includeStudentWork) {\n                        // the user wants to export the student work\n                        workgroup.studentWork = [];\n\n                        // get all the component states for the workgroup\n                        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupId(workgroupId);\n\n                        if (componentStates != null) {\n\n                            // loop through all the component states\n                            for (var c = 0; c < componentStates.length; c++) {\n                                var componentState = componentStates[c];\n\n                                if (componentState != null) {\n\n                                    // get the composite id. example 'node2-b34gaf0ug2'\n                                    var compositeId = this.getCompositeId(componentState);\n\n                                    if (selectedNodesMap == null || (compositeId != null && selectedNodesMap[compositeId] == true)) {\n                                        /*\n                                         * we are exporting all steps or the step was selected\n                                         * so we will add the component state\n                                         */\n                                        workgroup.studentWork.push(componentState);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.includeAnnotations) {\n                        // the user wants to export the annotations\n                        workgroup.annotations = [];\n\n                        // get all the annotations for the workgroup\n                        var annotations = this.TeacherDataService.getAnnotationsToWorkgroupId(workgroupId);\n\n                        if (annotations != null) {\n\n                            // loop through all the annotations for the workgroup\n                            for (var a = 0; a < annotations.length; a++) {\n                                var annotation = annotations[a];\n\n                                if (annotation != null) {\n\n                                    // get the composite id. example 'node2-b34gaf0ug2'\n                                    var compositeId = this.getCompositeId(annotation);\n\n                                    if (selectedNodesMap == null || (compositeId != null && selectedNodesMap[compositeId] == true)) {\n                                        /*\n                                         * we are exporting all steps or the step was selected\n                                         * so we will add the annotation\n                                         */\n                                        workgroup.annotations.push(annotation);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.includeEvents) {\n                        // the user wants to export the events\n                        workgroup.events = [];\n\n                        var events = [];\n\n                        // get all the events for the workgroup\n                        var events = this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\n\n                        if (events != null) {\n\n                            // loop through all the events for the workgroup\n                            for (var e = 0; e < events.length; e++) {\n                                var event = events[e];\n\n                                if (event != null) {\n\n                                    // get the composite id. example 'node2-b34gaf0ug2'\n                                    var compositeId = this.getCompositeId(event);\n\n                                    if (selectedNodesMap == null || (compositeId != null && selectedNodesMap[compositeId] == true)) {\n                                        /*\n                                         * we are exporting all steps or the step was selected\n                                         * so we will add the event\n                                         */\n                                        workgroup.events.push(event);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // add the workgroups to the data\n            data.workgroups = workgroups;\n\n            // get the data as a JSON string\n            var dataJSONString = angular.toJson(data, 4);\n\n            // get the data JSON string as a blob\n            var blob = new Blob([dataJSONString]);\n\n            // generate a file and download it to the user's computer\n            this.FileSaver.saveAs(blob, runId + \"_raw_data.json\");\n        });\n    }\n\n    removeNamesFromWorkgroup(workgroup) {\n      delete workgroup.userName;\n      delete workgroup.displayNames;\n      for (let user of workgroup.users) {\n        delete user.name;\n        delete user.firstName;\n        delete user.lastName;\n      }\n    }\n\n    /**\n     * Get the composite id for a given object\n     * @param object a component state, annotation, or event\n     * @return the composite id for the object\n     * example\n     * 'node3'\n     * 'node4-wt38sdf1d3'\n     */\n    getCompositeId(object) {\n        var compositeId = null;\n\n        if (object.nodeId != null) {\n            // the object has a node id\n            compositeId = object.nodeId;\n        }\n\n        if (object.componentId != null) {\n            // the object has a component id\n            compositeId += '-' + object.componentId;\n        }\n\n        return compositeId;\n    }\n\n    /**\n     * Check if a component type has a specific export implemented for it.\n     * @param componentType The component type.\n     * @return Whether the component type has a specific export.\n     */\n    canExportComponentDataType(componentType) {\n        for (let tempComponentType of this.availableComponentDataExports) {\n            if (componentType == tempComponentType) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Show the page where users can export work for a specific component.\n     */\n    showExportComponentDataPage() {\n        this.workSelectionType = 'exportAllWork';\n        this.includeCorrectnessColumns = true;\n        this.includeOnlySubmits = false;\n        this.exportType = 'componentData';\n    }\n\n    /**\n     * Export the work for a specific component.\n     * @param nodeId The node id.\n     * @param component The component content object.\n     */\n    exportComponentClicked(nodeId, component) {\n        if (component.type == 'Match') {\n            this.exportMatchComponent(nodeId, component);\n        }\n    }\n\n    /**\n     * Generate an export for a specific match component.\n     * TODO: Move these Match export functions to the MatchService.\n     * @param nodeId The node id.\n     * @param component The component content object.\n     */\n    exportMatchComponent(nodeId, component) {\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"allStudentWork\").then((result) => {\n            // the column names in the header row\n            let columnNames = [];\n\n            // mapping from column name to column number\n            let columnNameToNumber = {};\n\n            // the rows that will be in the export\n            let rows = [];\n\n            // add the header row to the rows\n            rows.push(this.generateMatchComponentHeaderRow(component, columnNames, columnNameToNumber));\n\n            // add the student work rows\n            rows = rows.concat(this.generateMatchComponentWorkRows(component, columnNames, columnNameToNumber, nodeId));\n\n            // generate the file name of the csv file\n            let fileName = \"\";\n            let runId = this.ConfigService.getRunId();\n            let stepNumber = this.ProjectService.getNodePositionById(nodeId);\n            let componentNumber = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, component.id) + 1;\n            if (this.workSelectionType === 'exportAllWork') {\n                fileName = runId + '_step_' + stepNumber + '_component_' + componentNumber + '_all_match_work.csv';\n            } else if (this.workSelectionType === 'exportLatestWork') {\n                fileName = runId + '_step_' + stepNumber + '_component_' + componentNumber + '_latest_match_work.csv';\n            }\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * Populate the array of header column names.\n     * Populate the mappings of column name to column number.\n     * @param component The component content object.\n     * @param columnNames An array that we will populate with column names.\n     * @param columnNameToNumber An object that we will populate with mappings\n     * of column name to column number.\n     */\n    populateMatchColumnNames(component, columnNames, columnNameToNumber) {\n\n        // an array of column names\n        let defaultMatchColumnNames = [\n            \"#\",\n            \"Workgroup ID\",\n            \"WISE ID 1\",\n            \"Student Name 1\",\n            \"WISE ID 2\",\n            \"Student Name 2\",\n            \"WISE ID 3\",\n            \"Student Name 3\",\n            \"Class Period\",\n            \"Project ID\",\n            \"Project Name\",\n            \"Run ID\",\n            \"Start Date\",\n            \"End Date\",\n            \"Student Work ID\",\n            \"Server Timestamp\",\n            \"Client Timestamp\",\n            \"Node ID\",\n            \"Component ID\",\n            \"Component Part Number\",\n            \"Step Title\",\n            \"Component Type\",\n            \"Component Prompt\",\n            \"Student Data\",\n            \"Component Revision Counter\",\n            \"Is Submit\",\n            \"Submit Count\"\n        ];\n\n        /*\n         * Add the default column names that contain the information about the\n         * student, project, run, node, and component.\n         */\n        for (let c = 0; c < defaultMatchColumnNames.length; c++) {\n            // get a column name\n            let defaultMatchColumnName = defaultMatchColumnNames[c];\n\n            // add a mapping from column name to column number\n            columnNameToNumber[defaultMatchColumnName] = c;\n\n            // add the column name to the header row\n            columnNames.push(defaultMatchColumnName);\n        }\n\n        // Add the header cells for the choices\n        for (let choice of component.choices) {\n            columnNameToNumber[choice.id] = columnNames.length;\n            columnNames.push(choice.value);\n        }\n\n        // Add the header cells for the choice correctness\n        if (this.includeCorrectnessColumns &&\n                this.MatchService.hasCorrectAnswer(component)) {\n            for (let choice of component.choices) {\n                columnNameToNumber[choice.id + '-boolean'] = columnNames.length;\n                columnNames.push(choice.value);\n            }\n            columnNameToNumber['Is Correct'] = columnNames.length;\n            columnNames.push('Is Correct');\n        }\n    }\n\n    /**\n     * Generate the header row.\n     * @param component The component content object.\n     * @param columnNames An array of column names.\n     * @param columnNameToNumber An object containing the mappings from column\n     * name to column number.\n     */\n    generateMatchComponentHeaderRow(component, columnNames, columnNameToNumber) {\n        this.populateMatchColumnNames(component, columnNames, columnNameToNumber);\n        let headerRow = [];\n\n        // generate the header row by looping through all the column names\n        for (let columnName of columnNames) {\n            // add the column name to the header row\n            headerRow.push(columnName);\n        }\n\n        return headerRow;\n    }\n\n    /**\n     * Generate all the rows for all the workgroups.\n     * @param component The component content object.\n     * @param columnNames All the header column names.\n     * @param columnNameToNumber The mapping from column name to column number.\n     * @param nodeId The node id the component is in.\n     * @return An array of rows.\n     */\n    generateMatchComponentWorkRows(component, columnNames, columnNameToNumber, nodeId) {\n        let componentId = component.id;\n\n        // get the workgroups in the class\n        let workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n        // the rows that will show up in the export\n        let rows = [];\n\n        let rowCounter = 1;\n\n        for (let workgroup of workgroups) {\n            let rowsForWorkgroup = this.generateMatchComponentWorkRowsForWorkgroup(component, workgroup, columnNames, columnNameToNumber, nodeId, componentId, rowCounter);\n            rows = rows.concat(rowsForWorkgroup);\n            rowCounter += rowsForWorkgroup.length;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Generate all the rows for a workgroup.\n     * @param component The component content object.\n     * @param workgroup The workgroup.\n     * @param columnNames An array of column name headers.\n     * @param columnNameToNumber The mapping from column name to column number.\n     * @param nodeId The node the component is in.\n     * @param componentId The component id.\n     * @param rowCounter The current row number we will be creating.\n     */\n    generateMatchComponentWorkRowsForWorkgroup(component, workgroup, columnNames, columnNameToNumber, nodeId, componentId, rowCounter) {\n        let rows = [];\n\n        // get the workgroup information\n        let workgroupId = workgroup.workgroupId;\n        let periodName = workgroup.periodName;\n        let userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n        let extractedWISEIDsAndStudentNames = this.extractWISEIDsAndStudentNames(userInfo.users);\n\n        /*\n         * a mapping from component to component revision counter.\n         * the key will be {{nodeId}}_{{componentId}} and the\n         * value will be a number.\n         */\n        let componentRevisionCounter = {};\n\n        let matchComponentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId);\n\n        if (matchComponentStates != null) {\n            for (let c = 0; c < matchComponentStates.length; c++) {\n                let matchComponentState = matchComponentStates[c];\n                let exportRow = true;\n\n                if (this.includeOnlySubmits && !matchComponentState.isSubmit) {\n                    exportRow = false;\n                } else if (this.workSelectionType == 'exportLatestWork' &&\n                        c != matchComponentStates.length - 1) {\n                    /*\n                     * We are only exporting the latest work and this component state\n                     * is not the last component state for this workgroup.\n                     */\n                    exportRow = false;\n                }\n\n                if (exportRow) {\n                    // add the row to the rows that will show up in the export\n                    rows.push(this.generateMatchComponentWorkRow(component,\n                        columnNames, columnNameToNumber, rowCounter, workgroupId,\n                        extractedWISEIDsAndStudentNames['wiseId1'],\n                        extractedWISEIDsAndStudentNames['wiseId2'],\n                        extractedWISEIDsAndStudentNames['wiseId3'],\n                        extractedWISEIDsAndStudentNames['studentName1'],\n                        extractedWISEIDsAndStudentNames['studentName2'],\n                        extractedWISEIDsAndStudentNames['studentName3'],\n                        periodName, componentRevisionCounter, matchComponentState));\n                    rowCounter++;\n                } else {\n                    /*\n                     * We do not want to add this row in the export but\n                     * we still want to increment the revision counter.\n                     */\n                    this.incrementRevisionCounter(componentRevisionCounter, nodeId, componentId);\n                }\n            }\n        }\n\n        return rows;\n    }\n\n    /**\n     * Generate the row for the component state.\n     * @param component The component content object.\n     * @param columnNames All the header column names.\n     * @param columnNameToNumber The mapping from column name to column number.\n     * @param rowCounter The current row number.\n     * @param workgroupId The workgroup id.\n     * @param wiseId1 The WISE ID 1.\n     * @param wiseId2 The WISE ID 2.\n     * @param wiseId3 The WISE ID 3.\n     * @param periodName The period name.\n     * @param componentRevisionCounter The mapping of component to revision counter.\n     * @param matchComponentState The component state.\n     * @return The row with the student work.\n     */\n    generateMatchComponentWorkRow(component, columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, studentName1, studentName2, studentName3, periodName, componentRevisionCounter, matchComponentState) {\n\n        /*\n         * Populate the cells in the row that contain the information about the\n         * student, project, run, step, and component.\n         */\n        let row = this.createStudentWorkExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, studentName1, studentName2, studentName3, periodName, componentRevisionCounter, matchComponentState);\n\n        for (let bucket of matchComponentState.studentData.buckets) {\n\n            // loop through all the choices that the student put in this bucket\n            for (let item of bucket.items) {\n                // put the bucket name in the column corresponding to the choice\n                row[columnNameToNumber[item.id]] = bucket.value;\n\n                if (this.includeCorrectnessColumns &&\n                        this.MatchService.hasCorrectAnswer(component)) {\n                    this.setCorrectnessValue(row, columnNameToNumber, item);\n                }\n            }\n        }\n\n        return row;\n    }\n\n    /**\n     * Set the correctness boolean value into the cell.\n     * @param row The row we are working on.\n     * @param columnNameToNumber The mapping from column name to column number.\n     * @param item The choice object.\n     */\n    setCorrectnessValue(row, columnNameToNumber, item) {\n        let columnName = item.id + '-boolean';\n        if (item.isCorrect == null) {\n            /*\n             * The item does not have an isCorrect field so we will not show\n             * anything in the cell.\n             */\n        } else if (item.isCorrect) {\n            // The student placed the choice in the correct bucket\n            row[columnNameToNumber[columnName]] = 1;\n        } else {\n            if (item.isIncorrectPosition) {\n                /*\n                 * The student placed the choice in the correct bucket but\n                 * in the wrong position.\n                 */\n                row[columnNameToNumber[columnName]] = 2;\n            } else {\n                // The student placed the choice in the wrong bucket\n                row[columnNameToNumber[columnName]] = 0;\n            }\n        }\n    }\n}\n\nDataExportController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AnnotationService',\n    'ConfigService',\n    'FileSaver',\n    'MatchService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService'\n];\n\nexport default DataExportController;\n"]}