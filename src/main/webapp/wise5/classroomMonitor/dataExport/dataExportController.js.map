{"version":3,"sources":["dataExportController.es6"],"names":["DataExportController","$injector","$rootScope","$scope","$state","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","exportStepSelectionType","exportType","retrieveProject","then","projectJSON","project","nodeOrderOfProject","getNodeOrderOfProject","projectIdToOrder","idToOrder","projectItems","nodes","context","nodeId","componentId","componentType","category","event","data","saveEvent","ocpu","seturl","req","call","session","getStdout","returnedCSVString","csvBlob","Blob","type","csvUrl","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","download","runId","click","window","setTimeout","revokeObjectURL","exportAllStudentWork","exportLatestStudentWork","exportEvents","exportNotebookItems","exportNotifications","exportStudentWork","selectedNodes","getSelectedNodesToExport","length","alert","getExport","result","workgroups","getClassmateUserInfosSortedByWorkgroupId","getRunId","rows","rowCounter","columnNameToNumber","columnNames","headerRow","c","columnName","push","w","workgroup","workgroupId","periodName","userInfo","getUserInfoByWorkgroupId","wiseIds","getWISEIds","wiseId1","wiseId2","wiseId3","componentRevisionCounter","componentStates","getComponentStatesByWorkgroupId","getLatestComponentStatesByWorkgroupId","componentState","exportRow","isComponentSelected","row","createStudentWorkExportRow","fileName","generateCSVFile","Array","fill","getProjectId","getProjectTitle","id","serverSaveTime","Date","serverSaveTimeString","toDateString","toLocaleTimeString","clientSaveTime","clientSaveTimeString","getNodePositionAndTitleByNodeId","componentPartNumber","getComponentPositionByNodeIdAndComponentId","component","getComponentByNodeIdAndComponentId","prompt","removeHTMLTags","replace","teacherScoreAnnotation","getLatestTeacherScoreAnnotationByStudentWorkId","teacherCommentAnnotation","getLatestTeacherCommentAnnotationByStudentWorkId","autoScoreAnnotation","getLatestAutoScoreAnnotationByStudentWorkId","autoCommentAnnotation","getLatestAutoCommentAnnotationByStudentWorkId","teacherScoreServerSaveTime","teacherScoreServerSaveTimeString","teacherScoreClientSaveTime","teacherScoreClientSaveTimeString","score","value","maxScore","getMaxScoreForComponent","teacherCommentServerSaveTime","teacherCommentServerSaveTimeString","teacherCommentClientSaveTime","teacherCommentClientSaveTimeString","comment","autoScoreServerSaveTime","autoScoreServerSaveTimeString","autoScoreClientSaveTime","autoScoreClientSaveTimeString","autoScore","maxAutoScore","autoCommentServerSaveTime","autoCommentServerSaveTimeString","autoCommentClientSaveTime","autoCommentClientSaveTimeString","autoComment","studentData","isCorrect","componentService","get","getStudentDataString","studentDataString","nodeIdAndComponentId","revisionCounter","isSubmit","submitCounter","indexOf","csvString","r","cell","JSON","stringify","str","componentEventCount","events","getEventsByWorkgroupId","e","isNodeSelected","createEventExportRow","stepTitle","onlyExportNodes","COLUMN_INDEX_NODE_ID","COLUMN_INDEX_COMPONENT_ID","COLUMN_INDEX_STEP_NUMBER","COLUMN_INDEX_STEP_TITLE","COLUMN_INDEX_COMPONENT_PART_NUMBER","COLUMN_INDEX_DATA","COLUMN_INDEX_WORKGROUP_ID","COLUMN_INDEX_WISE_IDS","COLUMN_INDEX_WISE_ID_1","COLUMN_INDEX_WISE_ID_2","COLUMN_INDEX_WISE_ID_3","exportFilename","rowIndex","searchString","getNodePositionById","getNodeTitleByNodeId","wiseIDs","wiseIDsArray","split","cellIndex","COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID","COLUMN_INDEX_TYPE","COLUMN_INDEX_STUDENT_DATA","COLUMN_INDEX_STUDENT_RESPONSE","hash","reverse","filter","studentWorkRow","hashKey","hasOwnProperty","studentDataJSONCell","content","escapeContent","text","n","item","node","checked","components","map","nodeItem","componentItem","doSelect","projectItem","order","selectAll","previewProjectURL","getConfigParam","open","previewStepURL","$inject"],"mappings":"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","file":"dataExportController.js","sourcesContent":["'use strict';\n\nclass DataExportController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $state,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.exportStepSelectionType = \"exportAllSteps\";\n        this.exportType = null;  // type of export: [latestWork, allWork, events]\n\n        // get the project\n        // create the mapping of node id to order for the import project\n        this.ProjectService.retrieveProject().then((projectJSON) => {\n            this.project = projectJSON;\n            // calculate the node order of the import project\n            let nodeOrderOfProject = this.ProjectService.getNodeOrderOfProject(this.project);\n            this.projectIdToOrder = nodeOrderOfProject.idToOrder;\n            this.projectItems = nodeOrderOfProject.nodes;\n        });\n\n        // save event when data export view is displayed\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"dataExportViewDisplayed\", data = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    hello() {\n        ocpu.seturl(\"//128.32.189.240:81/ocpu/user/wiser/library/wiser/R\");\n        // perform the request\n        var req = ocpu.call(\"hello\", {\n            \"name\": \"Hiroki\"\n        }, (session) => {\n            session.getStdout((returnedCSVString) => {\n                var csvBlob = new Blob([returnedCSVString], {type: 'text/csv'});\n                var csvUrl = URL.createObjectURL(csvBlob);\n                var a = document.createElement(\"a\");\n                document.body.appendChild(a);\n                a.style = \"display: none\";\n                a.href = csvUrl;\n                a.download = \"export_\" + runId + \".csv\";\n                a.click();\n\n                // timeout is required for FF.\n                window.setTimeout(() => {\n                    URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n                }, 3000);\n            });\n        });\n    };\n\n    /**\n     * Export all or latest work for this run in CSV format\n     * latestWork, allWork, and events will call this function with a null exportType.\n     */\n    export(exportType = null) {\n        if (exportType == null) {\n            exportType = this.exportType;\n        }\n\n        // save event for this export request\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"UserInteraction\", event = \"exportRequested\", data = {\"exportType\": exportType};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n\n        /*\n        if ((exportType === \"latestStudentWork\" || exportType === \"allStudentWork\" || exportType === \"events\") && this.exportStepSelectionType !== \"exportAllSteps\") {\n            // get the nodes that were selected\n            let selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                // the user did not select any steps to export\n                alert('Please select a step to export.');\n            }\n            return;\n        }\n\n        if (exportType === \"events\") {\n            // events are handled separately right now\n            this.exportEvents();\n            return;\n        }\n        */\n\n        if (exportType === \"allStudentWork\") {\n            this.exportAllStudentWork();\n        } else if (exportType === \"latestStudentWork\") {\n            this.exportLatestStudentWork();\n        } else if (exportType === \"events\") {\n            this.exportEvents();\n        } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n            this.exportNotebookItems(exportType);\n        } else if (exportType === \"notifications\") {\n            this.exportNotifications();\n        }\n\n        /*\n        this.TeacherDataService.getExport0(exportType).then((result) => {\n            if (result == null) {\n                alert(\"Error retrieving result\");\n                return;\n            }\n\n            if (exportType === \"studentAssets\") {\n                return; // no further processing necessary\n            }\n            let onlyExportNodes = null;  // this varioable is used later when looping through all rows\n            if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                // get the nodes that were selected\n                onlyExportNodes = this.getSelectedNodesToExport();\n            }\n\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            if (exportType === \"latestStudentWork\" || exportType === \"allStudentWork\") {\n                let COLUMN_INDEX_ID = 0;\n                let COLUMN_INDEX_NODE_ID = 1;\n                let COLUMN_INDEX_COMPONENT_ID = 2;\n                let COLUMN_INDEX_COMPONENT_TYPE = 3;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_IS_AUTO_SAVE = 7;\n                let COLUMN_INDEX_IS_SUBMIT = 8;\n                let COLUMN_INDEX_CLIENT_SAVE_TIME = 9;\n                let COLUMN_INDEX_SERVER_SAVE_TIME = 10;\n                let COLUMN_INDEX_STUDENT_DATA = 11;\n                let COLUMN_INDEX_PERIOD_ID = 12;\n                let COLUMN_INDEX_RUN_ID = 13;\n                let COLUMN_INDEX_WORKGROUP_ID = 14;\n                let COLUMN_INDEX_PERIOD_NAME = 15;\n                let COLUMN_INDEX_TEACHER_USERNAME = 16;\n                let COLUMN_INDEX_PROJECT_ID = 17;\n                let COLUMN_INDEX_WISE_IDS = 18;\n                let COLUMN_INDEX_WISE_ID_1 = 18;\n                let COLUMN_INDEX_WISE_ID_2 = 19;\n                let COLUMN_INDEX_WISE_ID_3 = 20;\n                let COLUMN_INDEX_STUDENT_RESPONSE = 21;\n\n                if (exportType === \"latestStudentWork\") {\n                    let hash = {};  // store latestStudentWork. Assume that key = (nodeId, componentId, workgroupId)\n                    result = result.reverse().filter( (studentWorkRow) => {\n                        let hashKey = studentWorkRow[COLUMN_INDEX_NODE_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_COMPONENT_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                        if (!hash.hasOwnProperty(hashKey)) {\n                            // remember in hash\n                            hash[hashKey] = studentWorkRow;\n                            return true;\n                        } else {\n                            // we already have the latest, so we can disregard this studentWorkRow.\n                            return false;\n                        }\n                    }).reverse();\n                    exportFilename = \"latest_work_\" + runId + \".csv\";\n                } else if (exportType === \"allStudentWork\") {\n                    exportFilename = \"all_work_\" + runId + \".csv\";\n                }\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = \"Response\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                            // is user chose certain steps/components to export, see if we need to include this row or not in the export.\n                            // get the nodes that were selected\n                            if (nodeId != null && componentId != null) {\n                                let searchString = nodeId + \"-\" + componentId;\n                                if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                    if (onlyExportNodes.indexOf(searchString) == -1) {\n                                        continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                    }\n                                }\n                            } else if (nodeId != null) {\n                                // only looking for this specific node, not node+component\n                                let searchString = nodeId;\n                                if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                    if (onlyExportNodes.indexOf(searchString) == -1) {\n                                        continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                    }\n                                }\n                            } else if (nodeId == null && componentId == null) {\n                                continue;  // don't add general work to export\n                            }\n                        }\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let workgroupId = row[COLUMN_INDEX_WORKGROUP_ID];\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                        // get the student data JSON and extract responses into its own column\n                        let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = studentDataJSONCell.response || \"\";\n                    }\n\n                    var projectName = this.ProjectService.getProjectTitle();\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n\n            } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n                exportFilename = \"notebook_\" + runId + \".csv\";\n\n                let COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID = 1;\n                let COLUMN_INDEX_NODE_ID = 2;\n                let COLUMN_INDEX_COMPONENT_ID = 3;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_TYPE = 9;\n                let COLUMN_INDEX_STUDENT_DATA = 10;\n                let COLUMN_INDEX_WORKGROUP_ID = 13;\n                let COLUMN_INDEX_WISE_IDS = 17;\n                let COLUMN_INDEX_WISE_ID_1 = 17;\n                let COLUMN_INDEX_WISE_ID_2 = 18;\n                let COLUMN_INDEX_WISE_ID_3 = 19;\n                let COLUMN_INDEX_STUDENT_RESPONSE = 20;\n\n                if (exportType === \"latestNotebookItems\") {\n                    let hash = {};  // store latestStudentWork. Assume that key = (localNotebookItemId)\n                    result = result.reverse().filter( (studentWorkRow) => {\n                        let hashKey = studentWorkRow[COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                        if (!hash.hasOwnProperty(hashKey)) {\n                            // remember in hash\n                            hash[hashKey] = studentWorkRow;\n                            return true;\n                        } else {\n                            // we already have the latest, so we can disregard this studentWorkRow.\n                            return false;\n                        }\n                    }).reverse();\n                    exportFilename = \"latest_notebook_items_\" + runId + \".csv\";\n                } else if (exportType === \"allNotebookItems\") {\n                    exportFilename = \"all_notebook_items_\" + runId + \".csv\";\n                }\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = \"response\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                        // get the student data JSON and extract responses into its own column\n                        let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                        if (row[COLUMN_INDEX_TYPE] === \"report\") {\n                            if (studentDataJSONCell.content != null) {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.content);\n                            } else {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                            }\n                        } else if (row[COLUMN_INDEX_TYPE] === \"note\") {\n                            if (studentDataJSONCell.text != null) {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.text);\n                            } else {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                            }\n                        }\n                    }\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n            } else if (exportType === \"notifications\") {\n                exportFilename = \"notifications_\" + runId + \".csv\";\n\n                let COLUMN_INDEX_NODE_ID = 1;\n                let COLUMN_INDEX_COMPONENT_ID = 2;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_TYPE = 10;\n                let COLUMN_INDEX_WISE_IDS = 21;\n                let COLUMN_INDEX_WISE_ID_1 = 21;\n                let COLUMN_INDEX_WISE_ID_2 = 22;\n                let COLUMN_INDEX_WISE_ID_3 = 23;\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                    }\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n        */\n    }\n\n    /**\n     * Export all the student work\n     */\n    exportAllStudentWork() {\n        this.exportStudentWork(\"allStudentWork\");\n    }\n\n    /**\n     * Export the latest student work\n     */\n    exportLatestStudentWork() {\n        this.exportStudentWork(\"latestStudentWork\");\n    }\n\n    /**\n     * Export all the student work\n     * @param exportType the export type e.g. \"allStudentWork\" or \"latestStudentWork\"\n     */\n    exportStudentWork(exportType) {\n\n        var selectedNodes = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // we are going to export the work for the steps that were selected\n\n            // get the steps that were selected\n            selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"allStudentWork\").then((result) => {\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            // the rows that will show up in the export\n            var rows = [];\n\n            // the counter for the rows\n            var rowCounter = 1;\n\n            // mapping from column name to column number\n            var columnNameToNumber = {};\n\n            // an array of column names\n            var columnNames = [\n                \"#\",\n                \"Workgroup ID\",\n                \"WISE ID 1\",\n                \"WISE ID 2\",\n                \"WISE ID 3\",\n                \"Class Period\",\n                \"Project ID\",\n                \"Project Name\",\n                \"Run ID\",\n                \"Start Date\",\n                \"End Date\",\n                \"Student Work ID\",\n                \"Server Timestamp\",\n                \"Client Timestamp\",\n                \"Node ID\",\n                \"Component ID\",\n                \"Component Part Number\",\n                \"Teacher Score Server Timestamp\",\n                \"Teacher Score Client Timestamp\",\n                \"Teacher Score\",\n                \"Max Teacher Score\",\n                \"Teacher Comment Server Timestamp\",\n                \"Teacher Comment Client Timestamp\",\n                \"Teacher Comment\",\n                \"Auto Score Server Timestamp\",\n                \"Auto Score Client Timestamp\",\n                \"Auto Score\",\n                \"Max Auto Score\",\n                \"Auto Comment Server Timestamp\",\n                \"Auto Comment Client Timestamp\",\n                \"Auto Comment\",\n                \"Step Title\",\n                \"Component Type\",\n                \"Component Prompt\",\n                \"Student Data\",\n                \"Component Revision Counter\",\n                \"Is Correct\",\n                \"Is Submit\",\n                \"Submit Count\",\n                \"Response\"\n            ];\n\n            var headerRow = [];\n\n            // generate the header row by looping through all the column names\n            for (var c = 0; c < columnNames.length; c++) {\n\n                // get a column name\n                var columnName = columnNames[c];\n\n                if (columnName != null) {\n                    // add a mapping from column name to column number\n                    columnNameToNumber[columnName] = c;\n                }\n\n                // add the column name to the header row\n                headerRow.push(columnName);\n            }\n\n            // add the header row to the rows\n            rows.push(headerRow);\n\n            if (workgroups != null) {\n\n                // loop through all the workgroup\n                for (var w = 0; w < workgroups.length; w++) {\n\n                    // get a workgroup\n                    var workgroup = workgroups[w];\n\n                    if (workgroup != null) {\n\n                        // get the workgroup information\n                        var workgroupId = workgroup.workgroupId;\n                        var periodName = workgroup.periodName;\n                        var userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n\n                        // get the WISE IDs\n                        var wiseIds = this.ConfigService.getWISEIds(workgroupId);\n                        var wiseId1 = wiseIds[0];\n                        var wiseId2 = wiseIds[1];\n                        var wiseId3 = wiseIds[2];\n\n                        /*\n                         * a mapping from component to component revision counter.\n                         * the key will be {{nodeId}}_{{componentId}} and the\n                         * value will be a number.\n                         */\n                        var componentRevisionCounter = {};\n\n                        // get the component states for the workgroup\n                        var componentStates = [];\n\n                        if (exportType === \"allStudentWork\") {\n                            componentStates = this.TeacherDataService.getComponentStatesByWorkgroupId(workgroupId);\n                        } else if (exportType === \"latestStudentWork\") {\n                            componentStates = this.TeacherDataService.getLatestComponentStatesByWorkgroupId(workgroupId);\n                        }\n\n                        if (componentStates != null) {\n\n                            // loop through all the component states\n                            for (var c = 0; c < componentStates.length; c++) {\n\n                                // get a component state\n                                var componentState = componentStates[c];\n\n                                if (componentState != null) {\n\n                                    var exportRow = true;\n\n                                    if (this.exportStepSelectionType === \"exportSelectSteps\") {\n                                        // we are only exporting selected steps\n                                        if (!this.isComponentSelected(selectedNodes, componentState.nodeId, componentState.componentId)) {\n                                            // the component state is for a step that is not selected\n                                            exportRow = false;\n                                        }\n                                    }\n\n                                    if (exportRow) {\n\n                                        // create the export row\n                                        var row = this.createStudentWorkExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, periodName, componentRevisionCounter, componentState);\n\n                                        // add the row to the rows\n                                        rows.push(row);\n\n                                        // increment the row counter\n                                        rowCounter++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            var fileName = \"\";\n\n            // make the file name\n            if (exportType === \"allStudentWork\") {\n                fileName = \"all_work_\" + runId + \".csv\";\n            } else if (exportType === \"latestStudentWork\") {\n                fileName = \"latest_work_\" + runId + \".csv\";\n            }\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * Create the array that will be used as a row in the student work export\n     * @param columnNames all the header column name\n     * @param columnNameToNumber the mapping from column name to column number\n     * @param rowCounter the current row number\n     * @param workgroupId the workgroup id\n     * @param wiseId1 the WISE ID 1\n     * @param wiseId2 the WISE ID 2\n     * @param wiseId3 the WISE ID 3\n     * @param periodName the period name\n     * @param componentRevisionCounter the mapping of component to revision counter\n     * @param componentState the component state\n     * @return an array containing the cells in the row\n     */\n    createStudentWorkExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, periodName, componentRevisionCounter, componentState) {\n\n        // create the row and prepopulate the elements with an empty string\n        var row = new Array(columnNames.length);\n        row.fill(\"\");\n\n        // set the row number\n        row[columnNameToNumber[\"#\"]] = rowCounter;\n\n        // set workgroup id\n        row[columnNameToNumber[\"Workgroup ID\"]] = workgroupId;\n\n        if (wiseId1 != null) {\n            // set the WISE ID 1\n            row[columnNameToNumber[\"WISE ID 1\"]] = wiseId1;\n        }\n\n        if (wiseId2 != null) {\n            // set the WISE ID 2\n            row[columnNameToNumber[\"WISE ID 2\"]] = wiseId2;\n        }\n\n        if (wiseId3 != null) {\n            // set the WISE ID 3\n            row[columnNameToNumber[\"WISE ID 3\"]] = wiseId3;\n        }\n\n        row[columnNameToNumber[\"Class Period\"]] = periodName;\n\n        // set the project id\n        row[columnNameToNumber[\"Project ID\"]] = this.ConfigService.getProjectId();\n\n        // set the project name\n        row[columnNameToNumber[\"Project Name\"]] = this.ProjectService.getProjectTitle();\n\n        // set the run id\n        row[columnNameToNumber[\"Run ID\"]] = this.ConfigService.getRunId();\n\n        // set the student work id\n        row[columnNameToNumber[\"Student Work ID\"]] = componentState.id;\n\n        if (componentState.serverSaveTime != null) {\n            // get the server save time\n            var serverSaveTime = new Date(componentState.serverSaveTime);\n\n            if (serverSaveTime != null) {\n                // get the time stamp string e.g. Wed Apr 06 2016 9:05:38 AM\n                var serverSaveTimeString = serverSaveTime.toDateString() + \" \" + serverSaveTime.toLocaleTimeString();\n                row[columnNameToNumber[\"Server Timestamp\"]] = serverSaveTimeString;\n            }\n        }\n\n        if (componentState.clientSaveTime != null) {\n            // get the client save time\n            var clientSaveTime = new Date(componentState.clientSaveTime);\n\n            if (clientSaveTime != null) {\n                // get the time stamp string e.g. Wed Apr 06 2016 9:05:38 AM\n                var clientSaveTimeString = clientSaveTime.toDateString() + \" \" + clientSaveTime.toLocaleTimeString();\n                row[columnNameToNumber[\"Client Timestamp\"]] = clientSaveTimeString;\n            }\n        }\n\n        // set the node id\n        row[columnNameToNumber[\"Node ID\"]] = componentState.nodeId;\n\n        // set the component id\n        row[columnNameToNumber[\"Component ID\"]] = componentState.componentId;\n\n        // set the step title\n        row[columnNameToNumber[\"Step Title\"]] = this.ProjectService.getNodePositionAndTitleByNodeId(componentState.nodeId);\n\n        // get the component part number\n        var componentPartNumber = this.ProjectService.getComponentPositionByNodeIdAndComponentId(componentState.nodeId, componentState.componentId) + 1;\n\n        // set the component part number\n        row[columnNameToNumber[\"Component Part Number\"]] = componentPartNumber;\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(componentState.nodeId, componentState.componentId);\n\n        if (component != null) {\n            // set the component type\n            row[columnNameToNumber[\"Component Type\"]] = component.type;\n\n            if (component.prompt != null) {\n                // get the prompt with the html tags removed\n                var prompt = this.UtilService.removeHTMLTags(component.prompt);\n\n                // replace \" with \"\"\n                prompt = prompt.replace(/\"/g, '\"\"');\n\n                // set the prompt with the html tags removed\n                row[columnNameToNumber[\"Component Prompt\"]] = prompt;\n            }\n        }\n\n        // get the annotations\n        var teacherScoreAnnotation = this.AnnotationService.getLatestTeacherScoreAnnotationByStudentWorkId(componentState.id);\n        var teacherCommentAnnotation = this.AnnotationService.getLatestTeacherCommentAnnotationByStudentWorkId(componentState.id);\n        var autoScoreAnnotation = this.AnnotationService.getLatestAutoScoreAnnotationByStudentWorkId(componentState.id);\n        var autoCommentAnnotation = this.AnnotationService.getLatestAutoCommentAnnotationByStudentWorkId(componentState.id);\n\n        if (teacherScoreAnnotation != null) {\n            // handle the teacher score\n\n            if (teacherScoreAnnotation.serverSaveTime != null) {\n                var teacherScoreServerSaveTime = new Date(teacherScoreAnnotation.serverSaveTime);\n\n                if (teacherScoreServerSaveTime != null) {\n                    // get the teacher score server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherScoreServerSaveTimeString = teacherScoreServerSaveTime.toDateString() + \" \" + teacherScoreServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Score Server Timestamp\"]] = teacherScoreServerSaveTimeString;\n                }\n            }\n\n            if (teacherScoreAnnotation.clientSaveTime != null) {\n                var teacherScoreClientSaveTime = new Date(teacherScoreAnnotation.clientSaveTime);\n\n                if (teacherScoreClientSaveTime != null) {\n                    // get the teacher score client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherScoreClientSaveTimeString = teacherScoreClientSaveTime.toDateString() + \" \" + teacherScoreClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Score Client Timestamp\"]] = teacherScoreClientSaveTimeString;\n                }\n            }\n\n            var data = teacherScoreAnnotation.data;\n\n            if (data != null) {\n                // get the teacher score\n                var score = data.value;\n\n                if (score != null) {\n                    // set the teacher score\n                    row[columnNameToNumber[\"Teacher Score\"]] = score;\n                }\n\n                // get the max score if available\n                var maxScore = this.ProjectService.getMaxScoreForComponent(componentState.nodeId, componentState.componentId);\n\n                if (maxScore != null) {\n                    // set the max score\n                    row[columnNameToNumber[\"Max Teacher Score\"]] = maxScore;\n                }\n            }\n        }\n\n        if (teacherCommentAnnotation != null) {\n            // handle the teacher comment\n\n            if (teacherCommentAnnotation.serverSaveTime != null) {\n                var teacherCommentServerSaveTime = new Date(teacherCommentAnnotation.serverSaveTime);\n\n                if (teacherCommentServerSaveTime != null) {\n                    // get the teacher comment server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherCommentServerSaveTimeString = teacherCommentServerSaveTime.toDateString() + \" \" + teacherCommentServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Comment Server Timestamp\"]] = teacherCommentServerSaveTimeString;\n                }\n            }\n\n            if (teacherCommentAnnotation.clientSaveTime != null) {\n                var teacherCommentClientSaveTime = new Date(teacherCommentAnnotation.clientSaveTime);\n\n                if (teacherCommentClientSaveTime != null) {\n                    // get the teacher comment client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var teacherCommentClientSaveTimeString = teacherCommentClientSaveTime.toDateString() + \" \" + teacherCommentClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Teacher Comment Client Timestamp\"]] = teacherCommentClientSaveTimeString;\n                }\n            }\n\n            var data = teacherCommentAnnotation.data;\n\n            if (data != null) {\n                // get the teacher comment\n                var comment = data.value;\n\n                if (comment != null) {\n                    // set the teacher comment\n                    row[columnNameToNumber[\"Teacher Comment\"]] = comment;\n                }\n            }\n        }\n\n        if (autoScoreAnnotation != null) {\n            // handle the auto score\n\n            if (autoScoreAnnotation.serverSaveTime != null) {\n                var autoScoreServerSaveTime = new Date(autoScoreAnnotation.serverSaveTime);\n\n                if (autoScoreServerSaveTime != null) {\n                    // get the auto score server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoScoreServerSaveTimeString = autoScoreServerSaveTime.toDateString() + \" \" + autoScoreServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Score Server Timestamp\"]] = autoScoreServerSaveTimeString;\n                }\n            }\n\n            if (autoScoreAnnotation.clientSaveTime != null) {\n                var autoScoreClientSaveTime = new Date(autoScoreAnnotation.clientSaveTime);\n\n                if (autoScoreClientSaveTime != null) {\n                    // get the auto score client timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoScoreClientSaveTimeString = autoScoreClientSaveTime.toDateString() + \" \" + autoScoreClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Score Client Timestamp\"]] = autoScoreClientSaveTimeString;\n                }\n            }\n\n            var data = autoScoreAnnotation.data;\n\n            if (data != null) {\n                // get the auto score\n                var autoScore = data.value;\n\n                if (autoScore != null) {\n                    // set the auto score\n                    row[columnNameToNumber[\"Auto Score\"]] = autoScore;\n                }\n\n                // get the max auto score\n                var maxAutoScore = data.maxAutoScore;\n\n                if (maxAutoScore != null) {\n                    // set the max auto score\n                    row[columnNameToNumber[\"Max Auto Score\"]] = maxAutoScore;\n                }\n            }\n        }\n\n        if (autoCommentAnnotation != null) {\n            // handle the auto comment\n\n            if (autoCommentAnnotation.serverSaveTime != null) {\n                var autoCommentServerSaveTime = new Date(autoCommentAnnotation.serverSaveTime);\n\n                if (autoCommentServerSaveTime != null) {\n                    // get the auto comment server timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoCommentServerSaveTimeString = autoCommentServerSaveTime.toDateString() + \" \" + autoCommentServerSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Comment Server Timestamp\"]] = autoCommentServerSaveTimeString;\n                }\n            }\n\n            if (autoCommentAnnotation.clientSaveTime != null) {\n                var autoCommentClientSaveTime = new Date(autoCommentAnnotation.clientSaveTime);\n\n                if (autoCommentClientSaveTime != null) {\n                    // get the auto comment timestamp e.g. Wed Apr 06 2016 9:05:38 AM\n                    var autoCommentClientSaveTimeString = autoCommentClientSaveTime.toDateString() + \" \" + autoCommentClientSaveTime.toLocaleTimeString();\n                    row[columnNameToNumber[\"Auto Comment Client Timestamp\"]] = autoCommentClientSaveTimeString;\n                }\n            }\n\n            var data = autoCommentAnnotation.data;\n\n            if (data != null) {\n                // get the auto comment\n                var autoComment = data.value;\n\n                if (autoComment != null) {\n                    // set the auto comment\n                    row[columnNameToNumber[\"Auto Comment\"]] = this.UtilService.removeHTMLTags(autoComment);\n                }\n            }\n        }\n\n        var studentData = componentState.studentData;\n\n        if (studentData != null) {\n            // set the student data JSON\n            row[columnNameToNumber[\"Student Data\"]] = studentData;\n\n            var isCorrect = studentData.isCorrect;\n\n            if (isCorrect != null) {\n                // set the is correct value\n                if (isCorrect) {\n                    row[columnNameToNumber[\"Is Correct\"]] = 1;\n                } else {\n                    row[columnNameToNumber[\"Is Correct\"]] = 0;\n                }\n            }\n        }\n\n        // get the component type\n        var componentType = componentState.componentType;\n\n        if (componentType != null) {\n            // get the component type service\n            var componentService = this.$injector.get(componentType + 'Service');\n\n            if (componentService != null && componentService.getStudentDataString != null) {\n\n                // get the student data string from the component state\n                var studentDataString = componentService.getStudentDataString(componentState);\n\n                if (studentDataString != null) {\n                    // set the response\n                    row[columnNameToNumber[\"Response\"]] = studentDataString;\n                }\n            }\n        }\n\n        // create the {{nodeId}}_{{componentId}} key to look up the component revision counter\n        var nodeIdAndComponentId = componentState.nodeId + \"_\" + componentState.componentId;\n\n        if (componentRevisionCounter[nodeIdAndComponentId] == null) {\n            // initialize the component revision counter for this component to 1 if there is no entry\n            componentRevisionCounter[nodeIdAndComponentId] = 1;\n        }\n\n        // get the revision counter\n        var revisionCounter = componentRevisionCounter[nodeIdAndComponentId];\n\n        if (componentState.revisionCounter == null) {\n            /*\n             * use the revision counter obtained from the componentRevisionCounter\n             * mapping. this case will happen when we are exporting all student\n             * work.\n             */\n            row[columnNameToNumber[\"Component Revision Counter\"]] = revisionCounter;\n        } else {\n            /*\n             * use the revision counter from the value in the component state.\n             * this case will happen when we are exporting latest student work\n             * because the revision counter needs to be previously calculated\n             * and then set into the component state\n             */\n            row[columnNameToNumber[\"Component Revision Counter\"]] = componentState.revisionCounter;\n        }\n\n        // increment the revision counter\n        componentRevisionCounter[nodeIdAndComponentId] = revisionCounter + 1;\n\n        var isSubmit = componentState.isSubmit;\n\n        if (isSubmit) {\n            // set the is submit value\n            row[columnNameToNumber[\"Is Submit\"]] = 1;\n\n            if (studentData != null) {\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // set the submit counter\n                    row[columnNameToNumber[\"Submit Count\"]] = submitCounter;\n                }\n            }\n        } else {\n            // set the is submit value\n            row[columnNameToNumber[\"Is Submit\"]] = 0;\n        }\n\n        return row;\n    }\n\n    /**\n     * Check if a component is selected\n     * @param selectedNodes an array of node id and component id strings\n     * e.g.\n     * [\"node1-38fj20egrj\", \"node2-c4e5dft0u1\"]\n     * @param nodeId the node id to check\n     * @param componentId the component id to check\n     * @return whether the component is selected\n     */\n    isComponentSelected(selectedNodes, nodeId, componentId) {\n        var result = false;\n\n        if (selectedNodes != null && nodeId != null && componentId != null) {\n\n            // create the node id and component id string\n            var nodeIdAndComponentId = nodeId + \"-\" + componentId;\n\n            // check if the component is selected\n            if (selectedNodes.indexOf(nodeIdAndComponentId) == -1) {\n                // the component is not selected\n                result = false;\n            } else {\n                // the component is selected\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a node is selected\n     * @param selectedNodes an array of node ids\n     * e.g.\n     * [\"node1\", \"node2\"]\n     * @param nodeId the node id to check\n     * @return whether the node is selected\n     */\n    isNodeSelected(selectedNodes, nodeId) {\n        var result = false;\n\n        if (selectedNodes != null && nodeId != null) {\n\n            // check if the node is selected\n            if (selectedNodes.indexOf(nodeId) == -1) {\n                // the node is not selected\n                result = false;\n            } else {\n                // the node is selected\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Generate the csv file and have the client download it\n     * @param rows a 2D array that represents the rows in the export\n     * each row contains an array. the inner array contains strings or\n     * numbers which represent the cell values in the export.\n     * @param fileName the name of the file that will be generated\n     */\n    generateCSVFile(rows, fileName) {\n\n        // used to accumulate the csv string\n        var csvString = \"\";\n\n        if (rows != null) {\n\n            // loop through all the rows\n            for (var r = 0; r < rows.length; r++) {\n                var row = rows[r];\n\n                if (row != null) {\n\n                    // loop through all the cells\n                    for (var c = 0; c < row.length; c++) {\n\n                        // get the cell value\n                        var cell = row[c];\n\n                        if (typeof cell === \"object\") {\n                            /*\n                             * the cell value is an object so we will obtain the\n                             * string representation of the object and wrap it\n                             * in quotes\n                             */\n\n                            // convert the\n                            cell = JSON.stringify(cell);\n\n                            // replace \" with \"\"\n                            cell = cell.replace(/\"/g, '\"\"');\n\n                            if (cell != null && cell.length >= 32767) {\n                                /*\n                                 * the cell value is larger than the allowable\n                                 * excel cell size so we will display the string\n                                 * \"Data Too Large\" instead\n                                 */\n                                cell = \"Data Too Large\";\n                            }\n\n                            // wrap the cell in quotes\n                            cell = '\"' + cell + '\"';\n                        } else if (typeof cell === \"string\") {\n                            // the cell value is a string\n\n                            if (cell != null && cell.length >= 32767) {\n                                /*\n                                 * the cell value is larger than the allowable\n                                 * excel cell size so we will display the string\n                                 * \"Data Too Large\" instead\n                                 */\n                                cell = \"Data Too Large\";\n                            }\n\n                            // wrap the cell in quotes\n                            cell = '\"' + cell + '\"';\n                        }\n\n                        // separate cells with a comma\n                        csvString += cell + \",\";\n                    }\n\n                    // separate lines\n                    csvString += \"\\r\\n\";\n                }\n            }\n        }\n\n        // generate the blob that will be written to the file\n        let csvBlob = new Blob([csvString], {type: 'text/csv'});\n\n        // create a url to the blob object\n        let csvUrl = URL.createObjectURL(csvBlob);\n\n        // create an <a> element\n        let a = document.createElement(\"a\");\n\n        // add the <a> element to the body\n        document.body.appendChild(a);\n\n        // set the url of the <a> element\n        a.href = csvUrl;\n\n        // set the file name\n        a.download = fileName;\n\n        // click the <a> element to download the file\n        a.click();\n\n        // timeout is required for FF.\n        window.setTimeout(() => {\n            URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n        }, 3000);\n    }\n\n    escapeContent(str) {\n        return str\n            .replace(/[\\n]/g, '\\\\n')\n            .replace(/[\\r]/g, '\\\\r')\n            .replace(/[\\t]/g, '\\\\t');\n    }\n\n    /**\n     * Export the events\n     */\n    exportEvents(exportType) {\n\n        var selectedNodes = null;\n\n        if (this.exportStepSelectionType === \"exportSelectSteps\") {\n            // we are going to export the work for the steps that were selected\n\n            // get the steps that were selected\n            selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                /*\n                 * the user did not select any steps to export so we will not\n                 * generate the export\n                 */\n                alert('Please select a step to export.');\n                return;\n            }\n        }\n\n        // request the student data from the server and then generate the export\n        this.TeacherDataService.getExport(\"events\").then((result) => {\n\n            // get the workgroups in the class\n            var workgroups = this.ConfigService.getClassmateUserInfosSortedByWorkgroupId();\n\n            // get the run id\n            var runId = this.ConfigService.getRunId();\n\n            // the rows that will show up in the export\n            var rows = [];\n\n            // the counter for the rows\n            var rowCounter = 1;\n\n            // mapping from column name to column number\n            var columnNameToNumber = {};\n\n            // an array of column names\n            var columnNames = [\n                \"#\",\n                \"Workgroup ID\",\n                \"WISE ID 1\",\n                \"WISE ID 2\",\n                \"WISE ID 3\",\n                \"Class Period\",\n                \"Project ID\",\n                \"Project Name\",\n                \"Run ID\",\n                \"Start Date\",\n                \"End Date\",\n                \"Event ID\",\n                \"Server Timestamp\",\n                \"Client Timestamp\",\n                \"Node ID\",\n                \"Component ID\",\n                \"Component Part Number\",\n                \"Step Title\",\n                \"Component Type\",\n                \"Component Prompt\",\n                \"Group Event Counter\",\n                \"Context\",\n                \"Category\",\n                \"Event\",\n                \"Event Data\"\n            ];\n\n            var headerRow = [];\n\n            // generate the header row by looping through all the column names\n            for (var c = 0; c < columnNames.length; c++) {\n\n                // get a column name\n                var columnName = columnNames[c];\n\n                if (columnName != null) {\n                    // add a mapping from column name to column number\n                    columnNameToNumber[columnName] = c;\n                }\n\n                // add the column name to the header row\n                headerRow.push(columnName);\n            }\n\n            // add the header row to the rows\n            rows.push(headerRow);\n\n            if (workgroups != null) {\n\n                // loop through all the workgroup\n                for (var w = 0; w < workgroups.length; w++) {\n\n                    // get a workgroup\n                    var workgroup = workgroups[w];\n\n                    if (workgroup != null) {\n\n                        // get the workgroup information\n                        var workgroupId = workgroup.workgroupId;\n                        var periodName = workgroup.periodName;\n                        var userInfo = this.ConfigService.getUserInfoByWorkgroupId(workgroupId);\n\n                        // get the WISE IDs\n                        var wiseIds = this.ConfigService.getWISEIds(workgroupId);\n                        var wiseId1 = wiseIds[0];\n                        var wiseId2 = wiseIds[1];\n                        var wiseId3 = wiseIds[2];\n\n                        /*\n                         * a mapping from component to component event count.\n                         * the key will be {{nodeId}}_{{componentId}} and the\n                         * value will be a number.\n                         */\n                        var componentEventCount = {};\n\n                        // get the events for the workgroup\n                        var events = [];\n\n                        events = this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\n\n                        if (events != null) {\n\n                            // loop through all the events\n                            for (var e = 0; e < events.length; e++) {\n\n                                // get an event\n                                var event = events[e];\n\n                                if (event != null) {\n\n                                    var exportRow = true;\n\n                                    if (this.exportStepSelectionType === \"exportSelectSteps\") {\n                                        // we are only exporting selected steps\n\n                                        if (event.nodeId != null && event.componentId != null) {\n                                            // this is a component event\n\n                                            if (!this.isComponentSelected(selectedNodes, event.nodeId, event.componentId)) {\n                                                // the event is for a component that is not selected\n                                                exportRow = false;\n                                            }\n                                        } else if (event.nodeId != null) {\n                                            // this is a node event\n\n                                            if (!this.isNodeSelected(selectedNodes, event.nodeId)) {\n                                                // the event is for a node that is not selected\n                                                exportRow = false;\n                                            }\n                                        } else {\n                                            // this is a global event\n                                            exportRow = false;\n                                        }\n                                    }\n\n                                    if (exportRow) {\n\n                                        // create the export row\n                                        var row = this.createEventExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, periodName, componentEventCount, event);\n\n                                        // add the row to the rows\n                                        rows.push(row);\n\n                                        // increment the row counter\n                                        rowCounter++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            var fileName = \"events_\" + runId;\n\n            // generate the csv file and have the client download it\n            this.generateCSVFile(rows, fileName);\n        });\n    }\n\n    /**\n     * Create the array that will be used as a row in the events export\n     * @param columnNames all the header column name\n     * @param columnNameToNumber the mapping from column name to column number\n     * @param rowCounter the current row number\n     * @param workgroupId the workgroup id\n     * @param wiseId1 the WISE ID 1\n     * @param wiseId2 the WISE ID 2\n     * @param wiseId3 the WISE ID 3\n     * @param periodName the period name\n     * @param componentEventCount the mapping of component to event count\n     * @param event the event\n     * @return an array containing the cells in the row\n     */\n    createEventExportRow(columnNames, columnNameToNumber, rowCounter, workgroupId, wiseId1, wiseId2, wiseId3, periodName, componentEventCount, event) {\n\n        // create the row and prepopulate the elements with an empty string\n        var row = new Array(columnNames.length);\n        row.fill(\"\");\n\n        // set the row number\n        row[columnNameToNumber[\"#\"]] = rowCounter;\n\n        // set workgroup id\n        row[columnNameToNumber[\"Workgroup ID\"]] = workgroupId;\n\n        if (wiseId1 != null) {\n            // set the WISE ID 1\n            row[columnNameToNumber[\"WISE ID 1\"]] = wiseId1;\n        }\n\n        if (wiseId2 != null) {\n            // set the WISE ID 2\n            row[columnNameToNumber[\"WISE ID 2\"]] = wiseId2;\n        }\n\n        if (wiseId3 != null) {\n            // set the WISE ID 3\n            row[columnNameToNumber[\"WISE ID 3\"]] = wiseId3;\n        }\n\n        row[columnNameToNumber[\"Class Period\"]] = periodName;\n\n        // set the project id\n        row[columnNameToNumber[\"Project ID\"]] = this.ConfigService.getProjectId();\n\n        // set the project name\n        row[columnNameToNumber[\"Project Name\"]] = this.ProjectService.getProjectTitle();\n\n        // set the run id\n        row[columnNameToNumber[\"Run ID\"]] = this.ConfigService.getRunId();\n\n        // set the student work id\n        row[columnNameToNumber[\"Event ID\"]] = event.id;\n\n        if (event.serverSaveTime != null) {\n            // get the server save time\n            var serverSaveTime = new Date(event.serverSaveTime);\n\n            if (serverSaveTime != null) {\n                var serverSaveTimeString = serverSaveTime.toDateString() + \" \" + serverSaveTime.toLocaleTimeString();\n\n                // set the timestamp\n                row[columnNameToNumber[\"Server Timestamp\"]] = serverSaveTimeString;\n            }\n        }\n\n        if (event.clientSaveTime != null) {\n            // get the client save time\n            var clientSaveTime = new Date(event.clientSaveTime);\n\n            if (clientSaveTime != null) {\n                var clientSaveTimeString = clientSaveTime.toDateString() + \" \" + clientSaveTime.toLocaleTimeString();\n\n                row[columnNameToNumber[\"Client Timestamp\"]] = clientSaveTimeString;\n            }\n        }\n\n        if (event.nodeId != null) {\n            // set the node id\n            row[columnNameToNumber[\"Node ID\"]] = event.nodeId;\n        }\n\n        if (event.componentId != null) {\n            // set the component id\n            row[columnNameToNumber[\"Component ID\"]] = event.componentId;\n        }\n\n        var stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(event.nodeId);\n\n        if (stepTitle != null) {\n            // set the step title\n            row[columnNameToNumber[\"Step Title\"]] = stepTitle;\n        }\n\n        // get the component part number\n        var componentPartNumber = this.ProjectService.getComponentPositionByNodeIdAndComponentId(event.nodeId, event.componentId);\n\n        if (componentPartNumber != -1) {\n            // set the component part number\n            row[columnNameToNumber[\"Component Part Number\"]] = componentPartNumber + 1;\n        }\n\n        // get the component\n        var component = this.ProjectService.getComponentByNodeIdAndComponentId(event.nodeId, event.componentId);\n\n        if (component != null) {\n            // set the component type\n            row[columnNameToNumber[\"Component Type\"]] = component.type;\n\n            // get the prompt with the html tags removed\n            var prompt = this.UtilService.removeHTMLTags(component.prompt);\n\n            // replace \" with \"\"\n            prompt = prompt.replace(/\"/g, '\"\"');\n\n            // set the prompt with the html tags removed\n            row[columnNameToNumber[\"Component Prompt\"]] = prompt;\n        }\n\n        // create the {{nodeId}}_{{componentId}} key to look up the component event count\n        var nodeIdAndComponentId = event.nodeId + \"_\" + event.componentId;\n\n        if (componentEventCount[nodeIdAndComponentId] == null) {\n            // initialize the component event count for this component to 1 if there is no entry\n            componentEventCount[nodeIdAndComponentId] = 1;\n        }\n\n        // get the revision counter\n        var revisionCounter = componentEventCount[nodeIdAndComponentId];\n        row[columnNameToNumber[\"Group Event Counter\"]] = revisionCounter;\n\n        // increment the revision counter\n        componentEventCount[nodeIdAndComponentId] = revisionCounter + 1;\n\n        // set the context\n        if (event.context != null) {\n            row[columnNameToNumber[\"Context\"]] = event.context;\n        }\n\n        // set the category\n        if (event.category != null) {\n            row[columnNameToNumber[\"Category\"]] = event.category;\n        }\n\n        // set the event\n        if (event.event != null) {\n            row[columnNameToNumber[\"Event\"]] = event.event;\n        }\n\n        // set the event data JSON\n        row[columnNameToNumber[\"Event Data\"]] = event;\n\n        return row;\n    }\n\n    /**\n     * Export all events for this run in CSV format\n     */\n    exportEvents0() {\n\n        this.TeacherDataService.getExport(\"events\").then((result) => {\n            if (result == null) {\n                alert(\"Error retrieving result\");\n                return;\n            }\n            let onlyExportNodes = null;  // this varioable is used later when looping through all rows\n            if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                // get the nodes that were selected\n                onlyExportNodes = this.getSelectedNodesToExport();\n            }\n\n            let COLUMN_INDEX_NODE_ID = 1;\n            let COLUMN_INDEX_COMPONENT_ID = 2;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_DATA = 12;\n            let COLUMN_INDEX_WORKGROUP_ID = 15;\n            let COLUMN_INDEX_WISE_IDS = 19;\n            let COLUMN_INDEX_WISE_ID_1 = 19;\n            let COLUMN_INDEX_WISE_ID_2 = 20;\n            let COLUMN_INDEX_WISE_ID_3 = 21;\n            let runId = this.ConfigService.getRunId();\n\n            let exportFilename = \"events_\" + runId + \".csv\";\n\n            let csvString = \"\";  // resulting csv string\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                        // is user chose certain steps/components to export, see if we need to include this row or not in the export.\n                        // get the nodes that were selected\n                        if (nodeId != null && componentId != null) {\n                            let searchString = nodeId + \"-\" + componentId;\n                            if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                if (onlyExportNodes.indexOf(searchString) == -1) {\n                                    continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                }\n                            }\n                        } else if (nodeId != null) {\n                            // only looking for this specific node, not node+component\n                            let searchString = nodeId;\n                            if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                if (onlyExportNodes.indexOf(searchString) == -1) {\n                                    continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                }\n                            }\n                        } else if (nodeId == null && componentId == null) {\n                            continue;  // don't add general events to export\n                        }\n                    }\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let workgroupId = row[COLUMN_INDEX_WORKGROUP_ID];\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    exportNotebookItems(exportType) {\n\n        this.TeacherDataService.getExport(exportType).then((result) => {\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            exportFilename = \"notebook_\" + runId + \".csv\";\n\n            let COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID = 1;\n            let COLUMN_INDEX_NODE_ID = 2;\n            let COLUMN_INDEX_COMPONENT_ID = 3;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_TYPE = 9;\n            let COLUMN_INDEX_STUDENT_DATA = 10;\n            let COLUMN_INDEX_WORKGROUP_ID = 13;\n            let COLUMN_INDEX_WISE_IDS = 17;\n            let COLUMN_INDEX_WISE_ID_1 = 17;\n            let COLUMN_INDEX_WISE_ID_2 = 18;\n            let COLUMN_INDEX_WISE_ID_3 = 19;\n            let COLUMN_INDEX_STUDENT_RESPONSE = 20;\n\n            if (exportType === \"latestNotebookItems\") {\n                let hash = {};  // store latestStudentWork. Assume that key = (localNotebookItemId)\n                result = result.reverse().filter( (studentWorkRow) => {\n                    let hashKey = studentWorkRow[COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                    if (!hash.hasOwnProperty(hashKey)) {\n                        // remember in hash\n                        hash[hashKey] = studentWorkRow;\n                        return true;\n                    } else {\n                        // we already have the latest, so we can disregard this studentWorkRow.\n                        return false;\n                    }\n                }).reverse();\n                exportFilename = \"latest_notebook_items_\" + runId + \".csv\";\n            } else if (exportType === \"allNotebookItems\") {\n                exportFilename = \"all_notebook_items_\" + runId + \".csv\";\n            }\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                    row[COLUMN_INDEX_STUDENT_RESPONSE] = \"response\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                    // get the student data JSON and extract responses into its own column\n                    let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                    if (row[COLUMN_INDEX_TYPE] === \"report\") {\n                        if (studentDataJSONCell.content != null) {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.content);\n                        } else {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                        }\n                    } else if (row[COLUMN_INDEX_TYPE] === \"note\") {\n                        if (studentDataJSONCell.text != null) {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.text);\n                        } else {\n                            row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                        }\n                    }\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    exportNotifications() {\n\n        this.TeacherDataService.getExport(\"notifications\").then((result) => {\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            exportFilename = \"notifications_\" + runId + \".csv\";\n\n            let COLUMN_INDEX_NODE_ID = 1;\n            let COLUMN_INDEX_COMPONENT_ID = 2;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_TYPE = 10;\n            let COLUMN_INDEX_WISE_IDS = 21;\n            let COLUMN_INDEX_WISE_ID_1 = 21;\n            let COLUMN_INDEX_WISE_ID_2 = 22;\n            let COLUMN_INDEX_WISE_ID_3 = 23;\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    /**\n     * Get the selected nodes to export\n     * @return an array of selected node and component ids that were selected.\n     * ex: [\"node1\", \"node1-abcde\", \"node1-fghij\", \"node2\"], where abcde, fghij are components in node1\n     * \"node2\" means just node2, not components in node2.\n     */\n    getSelectedNodesToExport() {\n        let selectedNodes = [];\n\n        // loop through all the import project items\n        for (let n = 0; n < this.projectItems.length; n++) {\n            let item = this.projectItems[n];\n            if (item.node.type === \"node\") {\n                let nodeId = item.node.id;\n                if (item.checked) {\n                    // this item is checked so we will add it to the array of nodes that we will export\n                    selectedNodes.push(nodeId);\n                }\n                // also check the components\n                if (item.node.components != null && item.node.components.length > 0) {\n                    item.node.components.map((component) => {\n                        if (component.checked) {\n                            selectedNodes.push(nodeId + \"-\" + component.id);\n                        }\n                    });\n                }\n            }\n        }\n\n        return selectedNodes;\n    }\n\n    /**\n     * Handle node item clicked\n     */\n    nodeItemClicked(nodeItem) {\n        if (nodeItem.checked) {\n            // if this node item is checked, make sure its components are also checked.\n            if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                nodeItem.node.components.map((componentItem) => { componentItem.checked = true; });\n            }\n        } else {\n            // if this node item is checked, make sure its components are also unchecked.\n            if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                nodeItem.node.components.map((componentItem) => { componentItem.checked = false; });\n            }\n        }\n    }\n\n    /**\n     * Handle select all items\n     */\n    selectAll(doSelect = true) {\n        if (this.projectIdToOrder != null) {\n            for (let nodeId in this.projectIdToOrder) {\n                let projectItem = this.projectIdToOrder[nodeId];\n                if (projectItem.order != 0 && projectItem.node.type != \"group\") {\n                    projectItem.checked = doSelect;\n                    // also check its components\n                    if (projectItem.node != null && projectItem.node.components != null && projectItem.node.components.length > 0) {\n                        projectItem.node.components.map((componentItem) => { componentItem.checked = doSelect; });\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Handle deselect all items\n     */\n    deselectAll() {\n        this.selectAll(false);\n    }\n\n    /**\n     * Preview the project\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n        // open the preview step in a new tab\n        window.open(previewProjectURL);\n    }\n\n    /**\n     * Preview the step\n     * @param node\n     */\n    previewNode(node) {\n\n        if (node != null) {\n\n            // get the node id\n            let nodeId = node.id;\n\n            // get the preview project url\n            let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n\n            // create the url to preview the step\n            let previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n}\n\nDataExportController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService'\n];\n\nexport default DataExportController;\n"]}