{"version":3,"sources":["dataExportController.es6"],"names":["DataExportController","$rootScope","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","exportStepSelectionType","exportType","retrieveProject","then","projectJSON","project","nodeOrderOfProject","getNodeOrderOfProject","projectIdToOrder","idToOrder","projectItems","nodes","context","nodeId","componentId","componentType","category","event","data","saveEvent","ocpu","seturl","req","call","session","getStdout","returnedCSVString","csvBlob","Blob","type","csvUrl","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","download","runId","click","window","setTimeout","revokeObjectURL","selectedNodes","getSelectedNodesToExport","length","alert","exportEvents","getExport","result","onlyExportNodes","getRunId","exportFilename","csvString","COLUMN_INDEX_NODE_ID","COLUMN_INDEX_COMPONENT_ID","COLUMN_INDEX_STEP_NUMBER","COLUMN_INDEX_STEP_TITLE","COLUMN_INDEX_COMPONENT_PART_NUMBER","COLUMN_INDEX_STUDENT_DATA","COLUMN_INDEX_WORKGROUP_ID","COLUMN_INDEX_WISE_IDS","COLUMN_INDEX_WISE_ID_1","COLUMN_INDEX_WISE_ID_2","COLUMN_INDEX_WISE_ID_3","COLUMN_INDEX_STUDENT_RESPONSE","hash","reverse","filter","studentWorkRow","hashKey","hasOwnProperty","rowIndex","row","searchString","indexOf","getNodePositionById","getNodeTitleByNodeId","getComponentPositionByNodeIdAndComponentId","workgroupId","wiseIDs","wiseIDsArray","split","studentDataJSONCell","response","cellIndex","cell","JSON","stringify","replace","COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID","COLUMN_INDEX_TYPE","content","escapeContent","text","str","COLUMN_INDEX_DATA","n","item","node","id","checked","push","components","map","component","nodeItem","componentItem","doSelect","projectItem","order","selectAll","previewProjectURL","getConfigParam","open","previewStepURL","$inject"],"mappings":"AAAA;;;;;;;;;;;;IAEMA,oB;AAEF,kCAAYC,UAAZ,EACYC,MADZ,EAEYC,MAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,oBALZ,EAMYC,kBANZ,EAOYC,uBAPZ,EAOqC;AAAA;;AAAA;;AACjC,aAAKP,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,oBAAL,GAA4BA,oBAA5B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,uBAAL,GAA+BA,uBAA/B;AACA,aAAKC,uBAAL,GAA+B,gBAA/B;AACA,aAAKC,UAAL,GAAkB,IAAlB,CAViC,CAUR;;AAEzB;AACA;AACA,aAAKL,cAAL,CAAoBM,eAApB,GAAsCC,IAAtC,CAA2C,UAACC,WAAD,EAAiB;AACxD,kBAAKC,OAAL,GAAeD,WAAf;AACA;AACA,gBAAIE,qBAAqB,MAAKV,cAAL,CAAoBW,qBAApB,CAA0C,MAAKF,OAA/C,CAAzB;AACA,kBAAKG,gBAAL,GAAwBF,mBAAmBG,SAA3C;AACA,kBAAKC,YAAL,GAAoBJ,mBAAmBK,KAAvC;AACH,SAND;;AAQA;AACA,YAAIC,UAAU,kBAAd;AAAA,YAAkCC,SAAS,IAA3C;AAAA,YAAiDC,cAAc,IAA/D;AAAA,YAAqEC,gBAAgB,IAArF;AAAA,YACIC,WAAW,YADf;AAAA,YAC6BC,QAAQ,yBADrC;AAAA,YACgEC,OAAO,EADvE;AAEA,aAAKpB,kBAAL,CAAwBqB,SAAxB,CAAkCP,OAAlC,EAA2CC,MAA3C,EAAmDC,WAAnD,EAAgEC,aAAhE,EAA+EC,QAA/E,EAAyFC,KAAzF,EAAgGC,IAAhG;AACH;;;;gCAEO;AACJE,iBAAKC,MAAL,CAAY,qDAAZ;AACA;AACA,gBAAIC,MAAMF,KAAKG,IAAL,CAAU,OAAV,EAAmB;AACzB,wBAAQ;AADiB,aAAnB,EAEP,UAACC,OAAD,EAAa;AACZA,wBAAQC,SAAR,CAAkB,UAACC,iBAAD,EAAuB;AACrC,wBAAIC,UAAU,IAAIC,IAAJ,CAAS,CAACF,iBAAD,CAAT,EAA8B,EAACG,MAAM,UAAP,EAA9B,CAAd;AACA,wBAAIC,SAASC,IAAIC,eAAJ,CAAoBL,OAApB,CAAb;AACA,wBAAIM,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAR;AACAD,6BAASE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,sBAAEK,KAAF,GAAU,eAAV;AACAL,sBAAEM,IAAF,GAAST,MAAT;AACAG,sBAAEO,QAAF,GAAa,YAAYC,KAAZ,GAAoB,MAAjC;AACAR,sBAAES,KAAF;;AAEA;AACAC,2BAAOC,UAAP,CAAkB,YAAM;AACpBb,4BAAIc,eAAJ,CAAoBf,MAApB,EADoB,CACU;AACjC,qBAFD,EAEG,IAFH;AAGH,iBAdD;AAeH,aAlBS,CAAV;AAmBH;;;;;AAED;;;;kCAI0B;AAAA;;AAAA,gBAAnB7B,UAAmB,uEAAN,IAAM;;AACtB,gBAAIA,cAAc,IAAlB,EAAwB;AACpBA,6BAAa,KAAKA,UAAlB;AACH;;AAED;AACA,gBAAIW,UAAU,kBAAd;AAAA,gBAAkCC,SAAS,IAA3C;AAAA,gBAAiDC,cAAc,IAA/D;AAAA,gBAAqEC,gBAAgB,IAArF;AAAA,gBACIC,WAAW,iBADf;AAAA,gBACkCC,QAAQ,iBAD1C;AAAA,gBAC6DC,OAAO,EAAC,cAAcjB,UAAf,EADpE;AAEA,iBAAKH,kBAAL,CAAwBqB,SAAxB,CAAkCP,OAAlC,EAA2CC,MAA3C,EAAmDC,WAAnD,EAAgEC,aAAhE,EAA+EC,QAA/E,EAAyFC,KAAzF,EAAgGC,IAAhG;;AAEA,gBAAI,CAACjB,eAAe,mBAAf,IAAsCA,eAAe,gBAArD,IAAyEA,eAAe,QAAzF,KAAsG,CAAC,KAAKD,uBAAN,KAAkC,gBAA5I,EAA8J;AAC1J;AACA,oBAAI8C,gBAAgB,KAAKC,wBAAL,EAApB;;AAEA,oBAAID,iBAAiB,IAAjB,IAAyBA,cAAcE,MAAd,IAAwB,CAArD,EAAwD;AACpD;AACAC,0BAAM,iCAAN;AACH;AACD;AACH;AACD,gBAAIhD,eAAe,QAAnB,EAA6B;AACzB;AACA,qBAAKiD,YAAL;AACA;AACH;;AAED,iBAAKpD,kBAAL,CAAwBqD,SAAxB,CAAkClD,UAAlC,EAA8CE,IAA9C,CAAmD,UAACiD,MAAD,EAAY;AAC3D,oBAAIA,UAAU,IAAd,EAAoB;AAChBH,0BAAM,yBAAN;AACA;AACH;;AAED,oBAAIhD,eAAe,eAAnB,EAAoC;AAChC,2BADgC,CACxB;AACX;AACD,oBAAIoD,kBAAkB,IAAtB,CAT2D,CAS9B;AAC7B,oBAAI,OAAKrD,uBAAL,KAAiC,gBAArC,EAAuD;AACnD;AACAqD,sCAAkB,OAAKN,wBAAL,EAAlB;AACH;;AAED,oBAAIN,QAAQ,OAAK9C,aAAL,CAAmB2D,QAAnB,EAAZ;AACA,oBAAIC,iBAAiB,EAArB;;AAEA,oBAAIC,YAAY,EAAhB,CAlB2D,CAkBtC;;AAErB,oBAAIvD,eAAe,mBAAf,IAAsCA,eAAe,gBAAzD,EAA2E;AAAA;AACvE,4BAAIwD,uBAAuB,CAA3B;AACA,4BAAIC,4BAA4B,CAAhC;AACA,4BAAIC,2BAA2B,CAA/B;AACA,4BAAIC,0BAA0B,CAA9B;AACA,4BAAIC,qCAAqC,CAAzC;AACA,4BAAIC,4BAA4B,EAAhC;AACA,4BAAIC,4BAA4B,EAAhC;AACA,4BAAIC,wBAAwB,EAA5B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,gCAAgC,EAApC;;AAEA,4BAAInE,eAAe,mBAAnB,EAAwC;AAAA;AACpC,oCAAIoE,OAAO,EAAX,CADoC,CACpB;AAChBjB,yCAASA,OAAOkB,OAAP,GAAiBC,MAAjB,CAAyB,UAACC,cAAD,EAAoB;AAClD,wCAAIC,UAAUD,eAAef,oBAAf,IAAuC,GAAvC,GAA6Ce,eAAed,yBAAf,CAA7C,GAAyF,GAAzF,GAA+Fc,eAAeT,yBAAf,CAA7G;AACA,wCAAI,CAACM,KAAKK,cAAL,CAAoBD,OAApB,CAAL,EAAmC;AAC/B;AACAJ,6CAAKI,OAAL,IAAgBD,cAAhB;AACA,+CAAO,IAAP;AACH,qCAJD,MAIO;AACH;AACA,+CAAO,KAAP;AACH;AACJ,iCAVQ,EAUNF,OAVM,EAAT;AAWAf,iDAAiB,iBAAiBd,KAAjB,GAAyB,MAA1C;AAboC;AAcvC,yBAdD,MAcO,IAAIxC,eAAe,gBAAnB,EAAqC;AACxCsD,6CAAiB,cAAcd,KAAd,GAAsB,MAAvC;AACH;;AAED,6BAAK,IAAIkC,WAAW,CAApB,EAAuBA,WAAWvB,OAAOJ,MAAzC,EAAiD2B,UAAjD,EAA6D;AACzD,gCAAIC,MAAMxB,OAAOuB,QAAP,CAAV;;AAEA,gCAAIA,aAAa,CAAjB,EAAoB;AAChB;AACAC,oCAAIX,sBAAJ,IAA8B,WAA9B;AACAW,oCAAIV,sBAAJ,IAA8B,WAA9B;AACAU,oCAAIT,sBAAJ,IAA8B,WAA9B;AACAS,oCAAIR,6BAAJ,IAAqC,UAArC;AACH,6BAND,MAMO;AACH;AACA,oCAAIvD,UAAS+D,IAAInB,oBAAJ,CAAb;AACA,oCAAI3C,eAAc8D,IAAIlB,yBAAJ,CAAlB;AACA,oCAAI,OAAK1D,uBAAL,KAAiC,gBAArC,EAAuD;AACnD;AACA;AACA,wCAAIa,WAAU,IAAV,IAAkBC,gBAAe,IAArC,EAA2C;AACvC,4CAAI+D,eAAehE,UAAS,GAAT,GAAeC,YAAlC;AACA,4CAAIuC,mBAAmB,IAAnB,IAA2BA,gBAAgBL,MAAhB,GAAyB,CAAxD,EAA2D;AACvD,gDAAIK,gBAAgByB,OAAhB,CAAwBD,YAAxB,KAAyC,CAAC,CAA9C,EAAiD;AAC7C,yDAD6C,CAClC;AACd;AACJ;AACJ,qCAPD,MAOO,IAAIhE,WAAU,IAAd,EAAoB;AACvB;AACA,4CAAIgE,gBAAehE,OAAnB;AACA,4CAAIwC,mBAAmB,IAAnB,IAA2BA,gBAAgBL,MAAhB,GAAyB,CAAxD,EAA2D;AACvD,gDAAIK,gBAAgByB,OAAhB,CAAwBD,aAAxB,KAAyC,CAAC,CAA9C,EAAiD;AAC7C,yDAD6C,CAClC;AACd;AACJ;AACJ,qCARM,MAQA,IAAIhE,WAAU,IAAV,IAAkBC,gBAAe,IAArC,EAA2C;AAC9C,iDAD8C,CACnC;AACd;AACJ;AACD8D,oCAAIjB,wBAAJ,IAAgC,OAAK/D,cAAL,CAAoBmF,mBAApB,CAAwClE,OAAxC,CAAhC;AACA+D,oCAAIhB,uBAAJ,IAA+B,OAAKhE,cAAL,CAAoBoF,oBAApB,CAAyCnE,OAAzC,CAA/B;AACA+D,oCAAIf,kCAAJ,IAA0C,OAAKjE,cAAL,CAAoBqF,0CAApB,CAA+DpE,OAA/D,EAAuEC,YAAvE,IAAsF,CAAhI,CA5BG,CA4BgI;AACnI,oCAAIoE,cAAcN,IAAIb,yBAAJ,CAAlB;AACA,oCAAIoB,UAAUP,IAAIZ,qBAAJ,CAAd;AACA,oCAAIoB,eAAeD,QAAQE,KAAR,CAAc,GAAd,CAAnB;AACAT,oCAAIX,sBAAJ,IAA8BmB,aAAa,CAAb,CAA9B;AACAR,oCAAIV,sBAAJ,IAA8BkB,aAAa,CAAb,KAAmB,EAAjD;AACAR,oCAAIT,sBAAJ,IAA8BiB,aAAa,CAAb,KAAmB,EAAjD;;AAEA;AACA,oCAAIE,sBAAsBV,IAAId,yBAAJ,CAA1B;AACAc,oCAAIR,6BAAJ,IAAqCkB,oBAAoBC,QAApB,IAAgC,EAArE;AACH;;AAED;AACA,iCAAK,IAAIC,YAAY,CAArB,EAAwBA,YAAYZ,IAAI5B,MAAxC,EAAgDwC,WAAhD,EAA6D;AACzD,oCAAIC,OAAOb,IAAIY,SAAJ,CAAX;AACA,oCAAI,QAAOC,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC1BA,2CAAO,OAAOC,KAAKC,SAAL,CAAeF,IAAf,EAAqBG,OAArB,CAA6B,IAA7B,EAAmC,IAAnC,CAAP,GAAkD,IAAzD;AACH,iCAFD,MAEO,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AACjCA,2CAAO,OAAOA,IAAP,GAAc,IAArB;AACH;AACDjC,6CAAaiC,OAAO,GAApB;AACH;AACDjC,yCAAa,MAAb;AACH;AA7FsE;AA+F1E,iBA/FD,MA+FO,IAAIvD,eAAe,qBAAf,IAAwCA,eAAe,kBAA3D,EAA+E;AAAA;AAClFsD,yCAAiB,cAAcd,KAAd,GAAsB,MAAvC;;AAEA,4BAAIoD,sCAAsC,CAA1C;AACA,4BAAIpC,uBAAuB,CAA3B;AACA,4BAAIC,4BAA4B,CAAhC;AACA,4BAAIC,2BAA2B,CAA/B;AACA,4BAAIC,0BAA0B,CAA9B;AACA,4BAAIC,qCAAqC,CAAzC;AACA,4BAAIiC,oBAAoB,CAAxB;AACA,4BAAIhC,4BAA4B,EAAhC;AACA,4BAAIC,4BAA4B,EAAhC;AACA,4BAAIC,wBAAwB,EAA5B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,yBAAyB,EAA7B;AACA,4BAAIC,gCAAgC,EAApC;;AAEA,4BAAInE,eAAe,qBAAnB,EAA0C;AAAA;AACtC,oCAAIoE,OAAO,EAAX,CADsC,CACtB;AAChBjB,yCAASA,OAAOkB,OAAP,GAAiBC,MAAjB,CAAyB,UAACC,cAAD,EAAoB;AAClD,wCAAIC,UAAUD,eAAeqB,mCAAf,IAAsD,GAAtD,GAA4DrB,eAAeT,yBAAf,CAA1E;AACA,wCAAI,CAACM,KAAKK,cAAL,CAAoBD,OAApB,CAAL,EAAmC;AAC/B;AACAJ,6CAAKI,OAAL,IAAgBD,cAAhB;AACA,+CAAO,IAAP;AACH,qCAJD,MAIO;AACH;AACA,+CAAO,KAAP;AACH;AACJ,iCAVQ,EAUNF,OAVM,EAAT;AAWAf,iDAAiB,2BAA2Bd,KAA3B,GAAmC,MAApD;AAbsC;AAczC,yBAdD,MAcO,IAAIxC,eAAe,kBAAnB,EAAuC;AAC1CsD,6CAAiB,wBAAwBd,KAAxB,GAAgC,MAAjD;AACH;;AAED,6BAAK,IAAIkC,WAAW,CAApB,EAAuBA,WAAWvB,OAAOJ,MAAzC,EAAiD2B,UAAjD,EAA6D;AACzD,gCAAIC,MAAMxB,OAAOuB,QAAP,CAAV;;AAEA,gCAAIA,aAAa,CAAjB,EAAoB;AAChB;AACAC,oCAAIX,sBAAJ,IAA8B,WAA9B;AACAW,oCAAIV,sBAAJ,IAA8B,WAA9B;AACAU,oCAAIT,sBAAJ,IAA8B,WAA9B;AACAS,oCAAIR,6BAAJ,IAAqC,UAArC;AACH,6BAND,MAMO;AACH;AACA,oCAAIvD,WAAS+D,IAAInB,oBAAJ,CAAb;AACA,oCAAI3C,gBAAc8D,IAAIlB,yBAAJ,CAAlB;AACAkB,oCAAIjB,wBAAJ,IAAgC,OAAK/D,cAAL,CAAoBmF,mBAApB,CAAwClE,QAAxC,CAAhC;AACA+D,oCAAIhB,uBAAJ,IAA+B,OAAKhE,cAAL,CAAoBoF,oBAApB,CAAyCnE,QAAzC,CAA/B;AACA+D,oCAAIf,kCAAJ,IAA0C,OAAKjE,cAAL,CAAoBqF,0CAApB,CAA+DpE,QAA/D,EAAuEC,aAAvE,IAAsF,CAAhI,CANG,CAMgI;AACnI,oCAAIqE,UAAUP,IAAIZ,qBAAJ,CAAd;AACA,oCAAIoB,eAAeD,QAAQE,KAAR,CAAc,GAAd,CAAnB;AACAT,oCAAIX,sBAAJ,IAA8BmB,aAAa,CAAb,CAA9B;AACAR,oCAAIV,sBAAJ,IAA8BkB,aAAa,CAAb,KAAmB,EAAjD;AACAR,oCAAIT,sBAAJ,IAA8BiB,aAAa,CAAb,KAAmB,EAAjD;;AAEA;AACA,oCAAIE,sBAAsBV,IAAId,yBAAJ,CAA1B;AACA,oCAAIc,IAAIkB,iBAAJ,MAA2B,QAA/B,EAAyC;AACrC,wCAAIR,oBAAoBS,OAApB,IAA+B,IAAnC,EAAyC;AACrCnB,4CAAIR,6BAAJ,IAAqC,OAAK4B,aAAL,CAAmBV,oBAAoBS,OAAvC,CAArC;AACH,qCAFD,MAEO;AACHnB,4CAAIR,6BAAJ,IAAqC,EAArC;AACH;AACJ,iCAND,MAMO,IAAIQ,IAAIkB,iBAAJ,MAA2B,MAA/B,EAAuC;AAC1C,wCAAIR,oBAAoBW,IAApB,IAA4B,IAAhC,EAAsC;AAClCrB,4CAAIR,6BAAJ,IAAqC,OAAK4B,aAAL,CAAmBV,oBAAoBW,IAAvC,CAArC;AACH,qCAFD,MAEO;AACHrB,4CAAIR,6BAAJ,IAAqC,EAArC;AACH;AACJ;AACJ;;AAED;AACA,iCAAK,IAAIoB,YAAY,CAArB,EAAwBA,YAAYZ,IAAI5B,MAAxC,EAAgDwC,WAAhD,EAA6D;AACzD,oCAAIC,OAAOb,IAAIY,SAAJ,CAAX;AACA,oCAAI,QAAOC,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC1BA,2CAAO,OAAOC,KAAKC,SAAL,CAAeF,IAAf,EAAqBG,OAArB,CAA6B,IAA7B,EAAmC,IAAnC,CAAP,GAAkD,IAAzD;AACH,iCAFD,MAEO,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AACjCA,2CAAO,OAAOA,IAAP,GAAc,IAArB;AACH;AACDjC,6CAAaiC,OAAO,GAApB;AACH;AACDjC,yCAAa,MAAb;AACH;AAtFiF;AAuFrF,iBAvFM,MAuFA,IAAIvD,eAAe,eAAnB,EAAoC;AACvCsD,qCAAiB,mBAAmBd,KAAnB,GAA2B,MAA5C;;AAEA,wBAAIgB,uBAAuB,CAA3B;AACA,wBAAIC,4BAA4B,CAAhC;AACA,wBAAIC,2BAA2B,CAA/B;AACA,wBAAIC,0BAA0B,CAA9B;AACA,wBAAIC,qCAAqC,CAAzC;AACA,wBAAIiC,oBAAoB,EAAxB;AACA,wBAAI9B,wBAAwB,EAA5B;AACA,wBAAIC,yBAAyB,EAA7B;AACA,wBAAIC,yBAAyB,EAA7B;AACA,wBAAIC,yBAAyB,EAA7B;;AAEA,yBAAK,IAAIQ,WAAW,CAApB,EAAuBA,WAAWvB,OAAOJ,MAAzC,EAAiD2B,UAAjD,EAA6D;AACzD,4BAAIC,MAAMxB,OAAOuB,QAAP,CAAV;;AAEA,4BAAIA,aAAa,CAAjB,EAAoB;AAChB;AACAC,gCAAIX,sBAAJ,IAA8B,WAA9B;AACAW,gCAAIV,sBAAJ,IAA8B,WAA9B;AACAU,gCAAIT,sBAAJ,IAA8B,WAA9B;AACH,yBALD,MAKO;AACH;AACA,gCAAItD,WAAS+D,IAAInB,oBAAJ,CAAb;AACA,gCAAI3C,gBAAc8D,IAAIlB,yBAAJ,CAAlB;AACAkB,gCAAIjB,wBAAJ,IAAgC,OAAK/D,cAAL,CAAoBmF,mBAApB,CAAwClE,QAAxC,CAAhC;AACA+D,gCAAIhB,uBAAJ,IAA+B,OAAKhE,cAAL,CAAoBoF,oBAApB,CAAyCnE,QAAzC,CAA/B;AACA+D,gCAAIf,kCAAJ,IAA0C,OAAKjE,cAAL,CAAoBqF,0CAApB,CAA+DpE,QAA/D,EAAuEC,aAAvE,IAAsF,CAAhI,CANG,CAMgI;AACnI,gCAAIqE,UAAUP,IAAIZ,qBAAJ,CAAd;AACA,gCAAIoB,eAAeD,QAAQE,KAAR,CAAc,GAAd,CAAnB;AACAT,gCAAIX,sBAAJ,IAA8BmB,aAAa,CAAb,CAA9B;AACAR,gCAAIV,sBAAJ,IAA8BkB,aAAa,CAAb,KAAmB,EAAjD;AACAR,gCAAIT,sBAAJ,IAA8BiB,aAAa,CAAb,KAAmB,EAAjD;AACH;;AAED;AACA,6BAAK,IAAII,YAAY,CAArB,EAAwBA,YAAYZ,IAAI5B,MAAxC,EAAgDwC,WAAhD,EAA6D;AACzD,gCAAIC,OAAOb,IAAIY,SAAJ,CAAX;AACA,gCAAI,QAAOC,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC1BA,uCAAO,OAAOC,KAAKC,SAAL,CAAeF,IAAf,EAAqBG,OAArB,CAA6B,IAA7B,EAAmC,IAAnC,CAAP,GAAkD,IAAzD;AACH,6BAFD,MAEO,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AACjCA,uCAAO,OAAOA,IAAP,GAAc,IAArB;AACH;AACDjC,yCAAaiC,OAAO,GAApB;AACH;AACDjC,qCAAa,MAAb;AACH;AACJ;;AAED,oBAAI7B,UAAU,IAAIC,IAAJ,CAAS,CAAC4B,SAAD,CAAT,EAAsB,EAAC3B,MAAM,UAAP,EAAtB,CAAd;AACA,oBAAIC,SAASC,IAAIC,eAAJ,CAAoBL,OAApB,CAAb;AACA,oBAAIM,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAR;AACAD,yBAASE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,kBAAEM,IAAF,GAAST,MAAT;AACAG,kBAAEO,QAAF,GAAae,cAAb;AACAtB,kBAAES,KAAF;;AAEA;AACAC,uBAAOC,UAAP,CAAkB,YAAM;AACpBb,wBAAIc,eAAJ,CAAoBf,MAApB,EADoB,CACU;AACjC,iBAFD,EAEG,IAFH;AAGH,aAxQD;AAyQH;;;sCAEaoE,G,EAAK;AACf,mBAAOA,IACFN,OADE,CACM,OADN,EACe,KADf,EAEFA,OAFE,CAEM,OAFN,EAEe,KAFf,EAGFA,OAHE,CAGM,OAHN,EAGe,KAHf,CAAP;AAIH;;AAED;;;;;;uCAGe;AAAA;;AAEX,iBAAK9F,kBAAL,CAAwBqD,SAAxB,CAAkC,QAAlC,EAA4ChD,IAA5C,CAAiD,UAACiD,MAAD,EAAY;AACzD,oBAAIA,UAAU,IAAd,EAAoB;AAChBH,0BAAM,yBAAN;AACA;AACH;AACD,oBAAII,kBAAkB,IAAtB,CALyD,CAK5B;AAC7B,oBAAI,OAAKrD,uBAAL,KAAiC,gBAArC,EAAuD;AACnD;AACAqD,sCAAkB,OAAKN,wBAAL,EAAlB;AACH;;AAED,oBAAIU,uBAAuB,CAA3B;AACA,oBAAIC,4BAA4B,CAAhC;AACA,oBAAIC,2BAA2B,CAA/B;AACA,oBAAIC,0BAA0B,CAA9B;AACA,oBAAIC,qCAAqC,CAAzC;AACA,oBAAIsC,oBAAoB,EAAxB;AACA,oBAAIpC,4BAA4B,EAAhC;AACA,oBAAIC,wBAAwB,EAA5B;AACA,oBAAIC,yBAAyB,EAA7B;AACA,oBAAIC,yBAAyB,EAA7B;AACA,oBAAIC,yBAAyB,EAA7B;AACA,oBAAI1B,QAAQ,OAAK9C,aAAL,CAAmB2D,QAAnB,EAAZ;;AAEA,oBAAIC,iBAAiB,YAAYd,KAAZ,GAAoB,MAAzC;;AAEA,oBAAIe,YAAY,EAAhB,CA1ByD,CA0BpC;;AAErB,qBAAK,IAAImB,WAAW,CAApB,EAAuBA,WAAWvB,OAAOJ,MAAzC,EAAiD2B,UAAjD,EAA6D;;AAEzD,wBAAIC,MAAMxB,OAAOuB,QAAP,CAAV;;AAEA,wBAAIA,aAAa,CAAjB,EAAoB;AAChB;AACAC,4BAAIX,sBAAJ,IAA8B,WAA9B;AACAW,4BAAIV,sBAAJ,IAA8B,WAA9B;AACAU,4BAAIT,sBAAJ,IAA8B,WAA9B;AACH,qBALD,MAKO;AACH;AACA,4BAAItD,SAAS+D,IAAInB,oBAAJ,CAAb;AACA,4BAAI3C,cAAc8D,IAAIlB,yBAAJ,CAAlB;AACA,4BAAI,OAAK1D,uBAAL,KAAiC,gBAArC,EAAuD;AACnD;AACA;AACA,gCAAIa,UAAU,IAAV,IAAkBC,eAAe,IAArC,EAA2C;AACvC,oCAAI+D,eAAehE,SAAS,GAAT,GAAeC,WAAlC;AACA,oCAAIuC,mBAAmB,IAAnB,IAA2BA,gBAAgBL,MAAhB,GAAyB,CAAxD,EAA2D;AACvD,wCAAIK,gBAAgByB,OAAhB,CAAwBD,YAAxB,KAAyC,CAAC,CAA9C,EAAiD;AAC7C,iDAD6C,CAClC;AACd;AACJ;AACJ,6BAPD,MAOO,IAAIhE,UAAU,IAAd,EAAoB;AACvB;AACA,oCAAIgE,iBAAehE,MAAnB;AACA,oCAAIwC,mBAAmB,IAAnB,IAA2BA,gBAAgBL,MAAhB,GAAyB,CAAxD,EAA2D;AACvD,wCAAIK,gBAAgByB,OAAhB,CAAwBD,cAAxB,KAAyC,CAAC,CAA9C,EAAiD;AAC7C,iDAD6C,CAClC;AACd;AACJ;AACJ,6BARM,MAQA,IAAIhE,UAAU,IAAV,IAAkBC,eAAe,IAArC,EAA2C;AAC9C,yCAD8C,CACnC;AACd;AACJ;AACD8D,4BAAIjB,wBAAJ,IAAgC,OAAK/D,cAAL,CAAoBmF,mBAApB,CAAwClE,MAAxC,CAAhC;AACA+D,4BAAIhB,uBAAJ,IAA+B,OAAKhE,cAAL,CAAoBoF,oBAApB,CAAyCnE,MAAzC,CAA/B;AACA+D,4BAAIf,kCAAJ,IAA0C,OAAKjE,cAAL,CAAoBqF,0CAApB,CAA+DpE,MAA/D,EAAuEC,WAAvE,IAAsF,CAAhI,CA5BG,CA4BgI;AACnI,4BAAIoE,cAAcN,IAAIb,yBAAJ,CAAlB;AACA,4BAAIoB,UAAUP,IAAIZ,qBAAJ,CAAd;AACA,4BAAIoB,eAAeD,QAAQE,KAAR,CAAc,GAAd,CAAnB;AACAT,4BAAIX,sBAAJ,IAA8BmB,aAAa,CAAb,CAA9B;AACAR,4BAAIV,sBAAJ,IAA8BkB,aAAa,CAAb,KAAmB,EAAjD;AACAR,4BAAIT,sBAAJ,IAA8BiB,aAAa,CAAb,KAAmB,EAAjD;AACH;;AAED;AACA,yBAAK,IAAII,YAAY,CAArB,EAAwBA,YAAYZ,IAAI5B,MAAxC,EAAgDwC,WAAhD,EAA6D;AACzD,4BAAIC,OAAOb,IAAIY,SAAJ,CAAX;AACA,4BAAI,QAAOC,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC1BA,mCAAO,OAAOC,KAAKC,SAAL,CAAeF,IAAf,EAAqBG,OAArB,CAA6B,IAA7B,EAAmC,IAAnC,CAAP,GAAkD,IAAzD;AACH,yBAFD,MAEO,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AACjCA,mCAAO,OAAOA,IAAP,GAAc,IAArB;AACH;AACDjC,qCAAaiC,OAAO,GAApB;AACH;AACDjC,iCAAa,MAAb;AACH;;AAED,oBAAI7B,UAAU,IAAIC,IAAJ,CAAS,CAAC4B,SAAD,CAAT,EAAsB,EAAC3B,MAAM,UAAP,EAAtB,CAAd;AACA,oBAAIC,SAASC,IAAIC,eAAJ,CAAoBL,OAApB,CAAb;AACA,oBAAIM,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAR;AACAD,yBAASE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,kBAAEM,IAAF,GAAST,MAAT;AACAG,kBAAEO,QAAF,GAAae,cAAb;AACAtB,kBAAES,KAAF;;AAEA;AACAC,uBAAOC,UAAP,CAAkB,YAAM;AACpBb,wBAAIc,eAAJ,CAAoBf,MAApB,EADoB,CACU;AACjC,iBAFD,EAEG,IAFH;AAGH,aAnGD;AAoGH;;AAED;;;;;;;;;mDAM2B;AACvB,gBAAIgB,gBAAgB,EAApB;;AAEA;AACA,iBAAK,IAAIsD,IAAI,CAAb,EAAgBA,IAAI,KAAK1F,YAAL,CAAkBsC,MAAtC,EAA8CoD,GAA9C,EAAmD;AAC/C,oBAAIC,OAAO,KAAK3F,YAAL,CAAkB0F,CAAlB,CAAX;AACA,oBAAIC,KAAKC,IAAL,CAAUzE,IAAV,KAAmB,MAAvB,EAA+B;AAAA;AAC3B,4BAAIhB,SAASwF,KAAKC,IAAL,CAAUC,EAAvB;AACA,4BAAIF,KAAKG,OAAT,EAAkB;AACd;AACA1D,0CAAc2D,IAAd,CAAmB5F,MAAnB;AACH;AACD;AACA,4BAAIwF,KAAKC,IAAL,CAAUI,UAAV,IAAwB,IAAxB,IAAgCL,KAAKC,IAAL,CAAUI,UAAV,CAAqB1D,MAArB,GAA8B,CAAlE,EAAqE;AACjEqD,iCAAKC,IAAL,CAAUI,UAAV,CAAqBC,GAArB,CAAyB,UAACC,SAAD,EAAe;AACpC,oCAAIA,UAAUJ,OAAd,EAAuB;AACnB1D,kDAAc2D,IAAd,CAAmB5F,SAAS,GAAT,GAAe+F,UAAUL,EAA5C;AACH;AACJ,6BAJD;AAKH;AAb0B;AAc9B;AACJ;;AAED,mBAAOzD,aAAP;AACH;;AAED;;;;;;wCAGgB+D,Q,EAAU;AACtB,gBAAIA,SAASL,OAAb,EAAsB;AAClB;AACA,oBAAIK,SAASP,IAAT,IAAiB,IAAjB,IAAyBO,SAASP,IAAT,CAAcI,UAAd,IAA4B,IAArD,IAA6DG,SAASP,IAAT,CAAcI,UAAd,CAAyB1D,MAAzB,GAAkC,CAAnG,EAAsG;AAClG6D,6BAASP,IAAT,CAAcI,UAAd,CAAyBC,GAAzB,CAA6B,UAACG,aAAD,EAAmB;AAAEA,sCAAcN,OAAd,GAAwB,IAAxB;AAA+B,qBAAjF;AACH;AACJ,aALD,MAKO;AACH;AACA,oBAAIK,SAASP,IAAT,IAAiB,IAAjB,IAAyBO,SAASP,IAAT,CAAcI,UAAd,IAA4B,IAArD,IAA6DG,SAASP,IAAT,CAAcI,UAAd,CAAyB1D,MAAzB,GAAkC,CAAnG,EAAsG;AAClG6D,6BAASP,IAAT,CAAcI,UAAd,CAAyBC,GAAzB,CAA6B,UAACG,aAAD,EAAmB;AAAEA,sCAAcN,OAAd,GAAwB,KAAxB;AAAgC,qBAAlF;AACH;AACJ;AACJ;;AAED;;;;;;oCAG2B;AAAA,gBAAjBO,QAAiB,uEAAN,IAAM;;AACvB,gBAAI,KAAKvG,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,qBAAK,IAAIK,MAAT,IAAmB,KAAKL,gBAAxB,EAA0C;AACtC,wBAAIwG,cAAc,KAAKxG,gBAAL,CAAsBK,MAAtB,CAAlB;AACA,wBAAImG,YAAYC,KAAZ,IAAqB,CAArB,IAA0BD,YAAYV,IAAZ,CAAiBzE,IAAjB,IAAyB,OAAvD,EAAgE;AAC5DmF,oCAAYR,OAAZ,GAAsBO,QAAtB;AACA;AACA,4BAAIC,YAAYV,IAAZ,IAAoB,IAApB,IAA4BU,YAAYV,IAAZ,CAAiBI,UAAjB,IAA+B,IAA3D,IAAmEM,YAAYV,IAAZ,CAAiBI,UAAjB,CAA4B1D,MAA5B,GAAqC,CAA5G,EAA+G;AAC3GgE,wCAAYV,IAAZ,CAAiBI,UAAjB,CAA4BC,GAA5B,CAAgC,UAACG,aAAD,EAAmB;AAAEA,8CAAcN,OAAd,GAAwBO,QAAxB;AAAmC,6BAAxF;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;;sCAGc;AACV,iBAAKG,SAAL,CAAe,KAAf;AACH;;AAED;;;;;;yCAGiB;AACb,gBAAIC,oBAAoB,KAAKxH,aAAL,CAAmByH,cAAnB,CAAkC,mBAAlC,CAAxB;AACA;AACAzE,mBAAO0E,IAAP,CAAYF,iBAAZ;AACH;;AAED;;;;;;;oCAIYb,I,EAAM;;AAEd,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIzF,SAASyF,KAAKC,EAAlB;;AAEA;AACA,oBAAIY,oBAAoB,KAAKxH,aAAL,CAAmByH,cAAnB,CAAkC,mBAAlC,CAAxB;;AAEA;AACA,oBAAIE,iBAAkBH,oBAAoB,QAApB,GAA+BtG,MAArD;;AAEA;AACA8B,uBAAO0E,IAAP,CAAYC,cAAZ;AACH;AACJ;;;;;;AAGL/H,qBAAqBgI,OAArB,GAA+B,CAC3B,YAD2B,EAE3B,QAF2B,EAG3B,QAH2B,EAI3B,eAJ2B,EAK3B,gBAL2B,EAM3B,sBAN2B,EAO3B,oBAP2B,EAQ3B,yBAR2B,CAA/B;;kBAWehI,oB","file":"dataExportController.js","sourcesContent":["'use strict';\n\nclass DataExportController {\n\n    constructor($rootScope,\n                $scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.exportStepSelectionType = \"exportAllSteps\";\n        this.exportType = null;  // type of export: [latestWork, allWork, events]\n\n        // get the project\n        // create the mapping of node id to order for the import project\n        this.ProjectService.retrieveProject().then((projectJSON) => {\n            this.project = projectJSON;\n            // calculate the node order of the import project\n            let nodeOrderOfProject = this.ProjectService.getNodeOrderOfProject(this.project);\n            this.projectIdToOrder = nodeOrderOfProject.idToOrder;\n            this.projectItems = nodeOrderOfProject.nodes;\n        });\n\n        // save event when data export view is displayed\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"dataExportViewDisplayed\", data = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    hello() {\n        ocpu.seturl(\"//128.32.189.240:81/ocpu/user/wiser/library/wiser/R\");\n        // perform the request\n        var req = ocpu.call(\"hello\", {\n            \"name\": \"Hiroki\"\n        }, (session) => {\n            session.getStdout((returnedCSVString) => {\n                var csvBlob = new Blob([returnedCSVString], {type: 'text/csv'});\n                var csvUrl = URL.createObjectURL(csvBlob);\n                var a = document.createElement(\"a\");\n                document.body.appendChild(a);\n                a.style = \"display: none\";\n                a.href = csvUrl;\n                a.download = \"export_\" + runId + \".csv\";\n                a.click();\n\n                // timeout is required for FF.\n                window.setTimeout(() => {\n                    URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n                }, 3000);\n            });\n        });\n    };\n\n    /**\n     * Export all or latest work for this run in CSV format\n     * latestWork, allWork, and events will call this function with a null exportType.\n     */\n    export(exportType = null) {\n        if (exportType == null) {\n            exportType = this.exportType;\n        }\n\n        // save event for this export request\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"UserInteraction\", event = \"exportRequested\", data = {\"exportType\": exportType};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n\n        if ((exportType === \"latestStudentWork\" || exportType === \"allStudentWork\" || exportType === \"events\") && !this.exportStepSelectionType === \"exportAllSteps\") {\n            // get the nodes that were selected\n            let selectedNodes = this.getSelectedNodesToExport();\n\n            if (selectedNodes == null || selectedNodes.length == 0) {\n                // the user did not select any steps to export\n                alert('Please select a step to export.');\n            }\n            return;\n        }\n        if (exportType === \"events\") {\n            // events are handled separately right now\n            this.exportEvents();\n            return;\n        }\n\n        this.TeacherDataService.getExport(exportType).then((result) => {\n            if (result == null) {\n                alert(\"Error retrieving result\");\n                return;\n            }\n\n            if (exportType === \"studentAssets\") {\n                return; // no further processing necessary\n            }\n            let onlyExportNodes = null;  // this varioable is used later when looping through all rows\n            if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                // get the nodes that were selected\n                onlyExportNodes = this.getSelectedNodesToExport();\n            }\n\n            let runId = this.ConfigService.getRunId();\n            let exportFilename = \"\";\n\n            let csvString = \"\";  // resulting csv string\n\n            if (exportType === \"latestStudentWork\" || exportType === \"allStudentWork\") {\n                let COLUMN_INDEX_NODE_ID = 1;\n                let COLUMN_INDEX_COMPONENT_ID = 2;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_STUDENT_DATA = 11;\n                let COLUMN_INDEX_WORKGROUP_ID = 14;\n                let COLUMN_INDEX_WISE_IDS = 18;\n                let COLUMN_INDEX_WISE_ID_1 = 18;\n                let COLUMN_INDEX_WISE_ID_2 = 19;\n                let COLUMN_INDEX_WISE_ID_3 = 20;\n                let COLUMN_INDEX_STUDENT_RESPONSE = 21;\n\n                if (exportType === \"latestStudentWork\") {\n                    let hash = {};  // store latestStudentWork. Assume that key = (nodeId, componentId, workgroupId)\n                    result = result.reverse().filter( (studentWorkRow) => {\n                        let hashKey = studentWorkRow[COLUMN_INDEX_NODE_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_COMPONENT_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                        if (!hash.hasOwnProperty(hashKey)) {\n                            // remember in hash\n                            hash[hashKey] = studentWorkRow;\n                            return true;\n                        } else {\n                            // we already have the latest, so we can disregard this studentWorkRow.\n                            return false;\n                        }\n                    }).reverse();\n                    exportFilename = \"latest_work_\" + runId + \".csv\";\n                } else if (exportType === \"allStudentWork\") {\n                    exportFilename = \"all_work_\" + runId + \".csv\";\n                }\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = \"response\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                            // is user chose certain steps/components to export, see if we need to include this row or not in the export.\n                            // get the nodes that were selected\n                            if (nodeId != null && componentId != null) {\n                                let searchString = nodeId + \"-\" + componentId;\n                                if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                    if (onlyExportNodes.indexOf(searchString) == -1) {\n                                        continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                    }\n                                }\n                            } else if (nodeId != null) {\n                                // only looking for this specific node, not node+component\n                                let searchString = nodeId;\n                                if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                    if (onlyExportNodes.indexOf(searchString) == -1) {\n                                        continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                    }\n                                }\n                            } else if (nodeId == null && componentId == null) {\n                                continue;  // don't add general work to export\n                            }\n                        }\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let workgroupId = row[COLUMN_INDEX_WORKGROUP_ID];\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                        // get the student data JSON and extract responses into its own column\n                        let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = studentDataJSONCell.response || \"\";\n                    }\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n\n            } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n                exportFilename = \"notebook_\" + runId + \".csv\";\n\n                let COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID = 1;\n                let COLUMN_INDEX_NODE_ID = 2;\n                let COLUMN_INDEX_COMPONENT_ID = 3;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_TYPE = 9;\n                let COLUMN_INDEX_STUDENT_DATA = 10;\n                let COLUMN_INDEX_WORKGROUP_ID = 13;\n                let COLUMN_INDEX_WISE_IDS = 17;\n                let COLUMN_INDEX_WISE_ID_1 = 17;\n                let COLUMN_INDEX_WISE_ID_2 = 18;\n                let COLUMN_INDEX_WISE_ID_3 = 19;\n                let COLUMN_INDEX_STUDENT_RESPONSE = 20;\n\n                if (exportType === \"latestNotebookItems\") {\n                    let hash = {};  // store latestStudentWork. Assume that key = (localNotebookItemId)\n                    result = result.reverse().filter( (studentWorkRow) => {\n                        let hashKey = studentWorkRow[COLUMN_INDEX_LOCAL_NOTEBOOK_ITEM_ID] + \"_\" + studentWorkRow[COLUMN_INDEX_WORKGROUP_ID];\n                        if (!hash.hasOwnProperty(hashKey)) {\n                            // remember in hash\n                            hash[hashKey] = studentWorkRow;\n                            return true;\n                        } else {\n                            // we already have the latest, so we can disregard this studentWorkRow.\n                            return false;\n                        }\n                    }).reverse();\n                    exportFilename = \"latest_notebook_items_\" + runId + \".csv\";\n                } else if (exportType === \"allNotebookItems\") {\n                    exportFilename = \"all_notebook_items_\" + runId + \".csv\";\n                }\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                        row[COLUMN_INDEX_STUDENT_RESPONSE] = \"response\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n\n                        // get the student data JSON and extract responses into its own column\n                        let studentDataJSONCell = row[COLUMN_INDEX_STUDENT_DATA];\n                        if (row[COLUMN_INDEX_TYPE] === \"report\") {\n                            if (studentDataJSONCell.content != null) {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.content);\n                            } else {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                            }\n                        } else if (row[COLUMN_INDEX_TYPE] === \"note\") {\n                            if (studentDataJSONCell.text != null) {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = this.escapeContent(studentDataJSONCell.text);\n                            } else {\n                                row[COLUMN_INDEX_STUDENT_RESPONSE] = \"\";\n                            }\n                        }\n                    }\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n            } else if (exportType === \"notifications\") {\n                exportFilename = \"notifications_\" + runId + \".csv\";\n\n                let COLUMN_INDEX_NODE_ID = 1;\n                let COLUMN_INDEX_COMPONENT_ID = 2;\n                let COLUMN_INDEX_STEP_NUMBER = 4;\n                let COLUMN_INDEX_STEP_TITLE = 5;\n                let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n                let COLUMN_INDEX_TYPE = 10;\n                let COLUMN_INDEX_WISE_IDS = 21;\n                let COLUMN_INDEX_WISE_ID_1 = 21;\n                let COLUMN_INDEX_WISE_ID_2 = 22;\n                let COLUMN_INDEX_WISE_ID_3 = 23;\n\n                for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n                    let row = result[rowIndex];\n\n                    if (rowIndex === 0) {\n                        // append additional header columns\n                        row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                        row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                        row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                    } else {\n                        // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                        let nodeId = row[COLUMN_INDEX_NODE_ID];\n                        let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                        row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                        row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                        row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                        let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                        let wiseIDsArray = wiseIDs.split(\",\");\n                        row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                        row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                        row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                    }\n\n                    // append row to csvString\n                    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                        let cell = row[cellIndex];\n                        if (typeof cell === \"object\") {\n                            cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                        } else if (typeof cell === \"string\") {\n                            cell = \"\\\"\" + cell + \"\\\"\";\n                        }\n                        csvString += cell + \",\";\n                    }\n                    csvString += \"\\r\\n\";\n                }\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    escapeContent(str) {\n        return str\n            .replace(/[\\n]/g, '\\\\n')\n            .replace(/[\\r]/g, '\\\\r')\n            .replace(/[\\t]/g, '\\\\t');\n    }\n\n    /**\n     * Export all events for this run in CSV format\n     */\n    exportEvents() {\n\n        this.TeacherDataService.getExport(\"events\").then((result) => {\n            if (result == null) {\n                alert(\"Error retrieving result\");\n                return;\n            }\n            let onlyExportNodes = null;  // this varioable is used later when looping through all rows\n            if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                // get the nodes that were selected\n                onlyExportNodes = this.getSelectedNodesToExport();\n            }\n\n            let COLUMN_INDEX_NODE_ID = 1;\n            let COLUMN_INDEX_COMPONENT_ID = 2;\n            let COLUMN_INDEX_STEP_NUMBER = 4;\n            let COLUMN_INDEX_STEP_TITLE = 5;\n            let COLUMN_INDEX_COMPONENT_PART_NUMBER = 6;\n            let COLUMN_INDEX_DATA = 12;\n            let COLUMN_INDEX_WORKGROUP_ID = 15;\n            let COLUMN_INDEX_WISE_IDS = 19;\n            let COLUMN_INDEX_WISE_ID_1 = 19;\n            let COLUMN_INDEX_WISE_ID_2 = 20;\n            let COLUMN_INDEX_WISE_ID_3 = 21;\n            let runId = this.ConfigService.getRunId();\n\n            let exportFilename = \"events_\" + runId + \".csv\";\n\n            let csvString = \"\";  // resulting csv string\n\n            for (let rowIndex = 0; rowIndex < result.length; rowIndex++) {\n\n                let row = result[rowIndex];\n\n                if (rowIndex === 0) {\n                    // append additional header columns\n                    row[COLUMN_INDEX_WISE_ID_1] = \"WISE ID 1\";\n                    row[COLUMN_INDEX_WISE_ID_2] = \"WISE ID 2\";\n                    row[COLUMN_INDEX_WISE_ID_3] = \"WISE ID 3\";\n                } else {\n                    // for all non-header rows, fill in step numbers, titles, and component part numbers.\n                    let nodeId = row[COLUMN_INDEX_NODE_ID];\n                    let componentId = row[COLUMN_INDEX_COMPONENT_ID];\n                    if (this.exportStepSelectionType !== \"exportAllSteps\") {\n                        // is user chose certain steps/components to export, see if we need to include this row or not in the export.\n                        // get the nodes that were selected\n                        if (nodeId != null && componentId != null) {\n                            let searchString = nodeId + \"-\" + componentId;\n                            if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                if (onlyExportNodes.indexOf(searchString) == -1) {\n                                    continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                }\n                            }\n                        } else if (nodeId != null) {\n                            // only looking for this specific node, not node+component\n                            let searchString = nodeId;\n                            if (onlyExportNodes != null && onlyExportNodes.length > 0) {\n                                if (onlyExportNodes.indexOf(searchString) == -1) {\n                                    continue;  // user didn't select this node to export, so ignore this row and keep looping\n                                }\n                            }\n                        } else if (nodeId == null && componentId == null) {\n                            continue;  // don't add general events to export\n                        }\n                    }\n                    row[COLUMN_INDEX_STEP_NUMBER] = this.ProjectService.getNodePositionById(nodeId);\n                    row[COLUMN_INDEX_STEP_TITLE] = this.ProjectService.getNodeTitleByNodeId(nodeId);\n                    row[COLUMN_INDEX_COMPONENT_PART_NUMBER] = this.ProjectService.getComponentPositionByNodeIdAndComponentId(nodeId, componentId) + 1; // make it 1-indexed for researchers\n                    let workgroupId = row[COLUMN_INDEX_WORKGROUP_ID];\n                    let wiseIDs = row[COLUMN_INDEX_WISE_IDS];\n                    let wiseIDsArray = wiseIDs.split(\",\");\n                    row[COLUMN_INDEX_WISE_ID_1] = wiseIDsArray[0];\n                    row[COLUMN_INDEX_WISE_ID_2] = wiseIDsArray[1] || \"\";\n                    row[COLUMN_INDEX_WISE_ID_3] = wiseIDsArray[2] || \"\";\n                }\n\n                // append row to csvString\n                for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n                    let cell = row[cellIndex];\n                    if (typeof cell === \"object\") {\n                        cell = \"\\\"\" + JSON.stringify(cell).replace(/\"/g, '\"\"') + \"\\\"\";\n                    } else if (typeof cell === \"string\") {\n                        cell = \"\\\"\" + cell + \"\\\"\";\n                    }\n                    csvString += cell + \",\";\n                }\n                csvString += \"\\r\\n\";\n            }\n\n            let csvBlob = new Blob([csvString], {type: 'text/csv'});\n            let csvUrl = URL.createObjectURL(csvBlob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.href = csvUrl;\n            a.download = exportFilename;\n            a.click();\n\n            // timeout is required for FF.\n            window.setTimeout(() => {\n                URL.revokeObjectURL(csvUrl);  // tell browser to release URL reference\n            }, 3000);\n        });\n    }\n\n    /**\n     * Get the selected nodes to export\n     * @return an array of selected node and component ids that were selected.\n     * ex: [\"node1\", \"node1-abcde\", \"node1-fghij\", \"node2\"], where abcde, fghij are components in node1\n     * \"node2\" means just node2, not components in node2.\n     */\n    getSelectedNodesToExport() {\n        let selectedNodes = [];\n\n        // loop through all the import project items\n        for (let n = 0; n < this.projectItems.length; n++) {\n            let item = this.projectItems[n];\n            if (item.node.type === \"node\") {\n                let nodeId = item.node.id;\n                if (item.checked) {\n                    // this item is checked so we will add it to the array of nodes that we will export\n                    selectedNodes.push(nodeId);\n                }\n                // also check the components\n                if (item.node.components != null && item.node.components.length > 0) {\n                    item.node.components.map((component) => {\n                        if (component.checked) {\n                            selectedNodes.push(nodeId + \"-\" + component.id);\n                        }\n                    });\n                }\n            }\n        }\n\n        return selectedNodes;\n    }\n\n    /**\n     * Handle node item clicked\n     */\n    nodeItemClicked(nodeItem) {\n        if (nodeItem.checked) {\n            // if this node item is checked, make sure its components are also checked.\n            if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                nodeItem.node.components.map((componentItem) => { componentItem.checked = true; });\n            }\n        } else {\n            // if this node item is checked, make sure its components are also unchecked.\n            if (nodeItem.node != null && nodeItem.node.components != null && nodeItem.node.components.length > 0) {\n                nodeItem.node.components.map((componentItem) => { componentItem.checked = false; });\n            }\n        }\n    }\n\n    /**\n     * Handle select all items\n     */\n    selectAll(doSelect = true) {\n        if (this.projectIdToOrder != null) {\n            for (let nodeId in this.projectIdToOrder) {\n                let projectItem = this.projectIdToOrder[nodeId];\n                if (projectItem.order != 0 && projectItem.node.type != \"group\") {\n                    projectItem.checked = doSelect;\n                    // also check its components\n                    if (projectItem.node != null && projectItem.node.components != null && projectItem.node.components.length > 0) {\n                        projectItem.node.components.map((componentItem) => { componentItem.checked = doSelect; });\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Handle deselect all items\n     */\n    deselectAll() {\n        this.selectAll(false);\n    }\n\n    /**\n     * Preview the project\n     */\n    previewProject() {\n        let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n        // open the preview step in a new tab\n        window.open(previewProjectURL);\n    }\n\n    /**\n     * Preview the step\n     * @param node\n     */\n    previewNode(node) {\n\n        if (node != null) {\n\n            // get the node id\n            let nodeId = node.id;\n\n            // get the preview project url\n            let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n\n            // create the url to preview the step\n            let previewStepURL  = previewProjectURL + \"#/vle/\" + nodeId;\n\n            // open the preview step in a new tab\n            window.open(previewStepURL);\n        }\n    }\n}\n\nDataExportController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default DataExportController;\n"]}