{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","calendarIsOpenTemporaryStorage","itemsTemporaryStorage","workgroupsStorage","editStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","showStudentsStorage","timeDiffStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadAchievements","$on","event","args","studentAchievement","addOrUpdateAchievement","data","id","updateMilestoneCompletion","currentPeriod","i","achievements","length","achievementsObject","getAchievements","isEnabled","items","projectAchievement","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","milestone","projectAchievements","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","splice","saveProject","push","a","achievement","workgroups","numberOfStudentsCompleted","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","achievementId","achievementIdToAchievements","getAchievementIdToAchievementsMappings","studentAchievementsForAchievementId","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","template","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n    constructor($injector,\n                $filter,\n                $mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                AchievementService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService,\n                moment) {\n\n        this.$injector = $injector;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AchievementService = AchievementService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.moment = moment;\n\n        this.$translate = this.$filter('translate');\n\n        /*\n         * Arrays used to temporarily store milestone display values. We add\n         * fields to the milestone objects but we don't want to save those\n         * fields when we save the milestones to the server. We remove the\n         * fields from the milestones and then save the milestones to the\n         * server. After we save the milestones, we add the fields back into\n         * the milestones.\n         */\n        this.calendarIsOpenTemporaryStorage = [];\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.editStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.showStudentsStorage = [];\n        this.timeDiffStorage = [];\n\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n        this.setWorkgroupsInCurrentPeriod();\n\n        // load the achievements and perform additional calculations\n        this.loadAchievements();\n\n        // listen for the newStudentAchievement event\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\n\n            if (args) {\n                // get the student achievement that was saved to the server\n                let studentAchievement = args.studentAchievement;\n\n                if (studentAchievement != null) {\n\n                    // add the student achievement to our local copy of the student achievements\n                    this.AchievementService.addOrUpdateAchievement(studentAchievement);\n\n                    if (studentAchievement.data != null && studentAchievement.data.id != null) {\n                        // update the milestone in the UI with the new student achievement information\n                        this.updateMilestoneCompletion(studentAchievement.data.id);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for current period changed event\n         */\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            this.periodId = args.currentPeriod.periodId;\n\n            // update the completion status for all the project achievements\n            for (let i = 0; i < this.achievements.length; i++) {\n                this.setWorkgroupsInCurrentPeriod();\n                this.updateMilestoneCompletion(this.achievements[i].id);\n            }\n        });\n    }\n\n    /**\n     * Load the achievements and perform additional calculations\n     */\n    loadAchievements() {\n      const achievementsObject = this.ProjectService.getAchievements();\n      if (achievementsObject.isEnabled && achievementsObject.items) {\n        this.achievements = achievementsObject.items;\n        for (let projectAchievement of this.achievements) {\n          this.updateMilestoneCompletion(projectAchievement.id);\n\n          // get all the activities and steps in the project\n          projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n          if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n            /*\n             * loop through all the node ids that are required\n             * to be completed for this achievement\n             */\n            for (let nodeId of projectAchievement.params.nodeIds) {\n              if (projectAchievement.items[nodeId] != null) {\n                projectAchievement.items[nodeId].checked = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Check if the given milestone date is before the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isBeforeDay(date, percentageCompleted) {\n        let result = false;\n\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isBefore(this.moment(), 'day');\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the given milestone date is the same as the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isSameDay(date, percentageCompleted) {\n        let result = false;\n\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isSame(this.moment(), 'day');\n        }\n\n        return result;\n    }\n\n    /**\n     * Create a new milestone\n     * @return a milestone object\n     */\n    createMilestone() {\n        let milestone = null;\n\n        // get the project achievements\n        let projectAchievements = this.ProjectService.getAchievementItems();\n\n        if (projectAchievements != null) {\n\n            // get the time of tomorrow at 3pm\n            let tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\n\n            // create a new milestone object\n            milestone = {\n                id: this.AchievementService.getAvailableAchievementId(),\n                name: '',\n                description: '',\n                type: \"milestone\",\n                params: {\n                    nodeIds: [],\n                    targetDate: tomorrow.valueOf()\n                },\n                icon: {\n                    image: \"\"\n                },\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\n                isVisible: true\n            };\n        }\n\n        return milestone;\n    }\n\n    /**\n     * Delete a milestone\n     * @param milestone the milestone to delete\n     */\n    deleteMilestone(milestone, $event) {\n\n        if (milestone) {\n            let title = milestone.name;\n            let label = this.$translate('DELETE_MILESTONE');\n            let msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\n            let yes = this.$translate('YES');\n            let cancel = this.$translate('CANCEL')\n\n            let confirm = this.$mdDialog.confirm()\n                .title(title)\n                .textContent(msg)\n                .ariaLabel(label)\n                .targetEvent($event)\n                .ok(yes)\n                .cancel(cancel);\n\n            this.$mdDialog.show(confirm).then(() => {\n                let achievements = this.achievements;\n                let index = -1;\n\n                // find the matching achievement index\n                for (let i = 0; i < achievements.length; i++) {\n                    if (achievements[i].id === milestone.id) {\n                        index = i;\n                        break;\n                    }\n                }\n\n                if (index > -1) {\n                    // remove the milestone\n                    this.achievements.splice(index, 1);\n\n                    // save the project to the server\n                    this.saveProject();\n                }\n            }, () => {\n            });\n        }\n    }\n\n    saveMilestone(milestone) {\n        let index = -1;\n\n        for (let i = 0; i < this.achievements.length; i++) {\n            if (this.achievements[i].id === milestone.id) {\n                index = i;\n                this.achievements[i] = milestone;\n                break;\n            }\n        }\n\n        if (index < 0) {\n            // get the project achievements\n            let projectAchievements = this.ProjectService.getAchievementItems();\n\n            if (projectAchievements && milestone) {\n\n                // add the milestone object to the array of achievements\n                projectAchievements.push(milestone);\n            }\n        }\n\n        // save the project\n        this.saveProject();\n\n        // reload the achievements\n        this.loadAchievements();\n    }\n\n    /**\n     * Remove the temporary fields from the milestone objects and store\n     * them in temporary storage arrays so that we can load the fields back\n     * in later\n     */\n    clearTempFields() {\n\n        /*\n         * these array will store the temporary fields. the index of the arrays\n         * corresponds to the index of the achievement. for example the percentageCompletedStorage\n         * value for the first achievement will be stored in\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\n         * achievement will be stored in this.percentageCompletedStorage[1].\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n\n        // loop through all the achievements\n        for (var a = 0; a < this.achievements.length; a++) {\n\n            // get an achievement\n            var achievement = this.achievements[a];\n\n            // save the field values in the temprary storage arrays\n            this.workgroupsStorage.push(achievement.workgroups);\n            this.numberOfStudentsCompletedStorage.push(achievement.numberOfStudentsCompleted);\n            this.percentageCompletedStorage.push(achievement.percentageCompleted);\n\n            // delete the field from the achievement\n            delete achievement.items;\n            delete achievement.workgroups;\n            delete achievement.numberOfStudentsCompleted;\n            delete achievement.percentageCompleted;\n        }\n    }\n\n    /**\n     * Restore the temporary fields into the achievement objects\n     */\n    restoreTempFields() {\n\n        // loop through all the achievements\n        for (var a = 0; a < this.achievements.length; a++) {\n\n            // get an achievement\n            var achievement = this.achievements[a];\n\n            // set the fields back into the achievement object\n            achievement.items = this.itemsTemporaryStorage[a];\n            achievement.workgroups = this.workgroupsStorage[a];\n            achievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n            achievement.percentageCompleted = this.percentageCompletedStorage[a];\n        }\n\n        // clear the temporary storage arrays\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n    }\n\n    /**\n     * Save the project to the server\n     */\n    saveProject() {\n\n        // clear the temp fields and remember them\n        this.clearTempFields();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n\n        // restore the temp fields\n        this.restoreTempFields();\n    }\n\n    /**\n     * Get the user names for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return the user names in the workgroup\n     */\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\n    }\n\n    setWorkgroupsInCurrentPeriod() {\n        // get the workgroup ids\n        let workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\n        this.workgroupIds = [];\n\n        // filter out workgroups not in the current period\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\n            let currentId = workgroupIdsInRun[i];\n            let currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\n\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\n                this.workgroupIds.push(currentId);\n            }\n        }\n\n        // the number of students in the run\n        this.numberOfStudentsInRun = this.workgroupIds.length;\n    }\n\n    /**\n     * Update the student completion information for this milestone\n     * @param achievementId the achievement id to update\n     */\n    updateMilestoneCompletion(achievementId) {\n      for (let projectAchievement of this.achievements) {\n        if (projectAchievement.id === achievementId) {\n          const achievementIdToAchievements = this.AchievementService.getAchievementIdToAchievementsMappings();\n          const studentAchievementsForAchievementId = achievementIdToAchievements[projectAchievement.id];\n\n          const workgroupIdsCompleted = [];\n          const achievementTimes = [];\n          const workgroupIdsNotCompleted = [];\n\n          for (let studentAchievement of studentAchievementsForAchievementId) {\n            const currentWorkgroupId = studentAchievement.workgroupId;\n            // check if workgroup is in current period\n            if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\n              workgroupIdsCompleted.push(currentWorkgroupId);\n              achievementTimes.push(studentAchievement.achievementTime);\n            }\n          }\n\n          for (let workgroupId of this.workgroupIds) {\n            if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\n              workgroupIdsNotCompleted.push(workgroupId);\n            }\n          }\n\n          projectAchievement.workgroups = [];\n\n          for (let c = 0; c < workgroupIdsCompleted.length; c++) {\n            const workgroupId = workgroupIdsCompleted[c];\n            const achievementTime = achievementTimes[c];\n            const workgroupObject = {\n              workgroupId: workgroupId,\n              displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n              achievementTime: achievementTime,\n              completed: true\n            };\n            projectAchievement.workgroups.push(workgroupObject);\n          }\n\n          /*\n           * loop through all the workgroups that have not\n           * completed the achievement\n           */\n          for (let workgroupId of workgroupIdsNotCompleted) {\n            const workgroupObject = {\n              workgroupId: workgroupId,\n              displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n              achievementTime: null,\n              completed: false\n            };\n\n            projectAchievement.workgroups.push(workgroupObject);\n          }\n          projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\n          projectAchievement.percentageCompleted =\n              parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n        }\n      }\n    }\n\n    /**\n     * Open a dialog with the milestone details (list with workgroups statuses\n     * for the given milestone)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    showMilestoneDetails(milestone, $event) {\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\"></milestone-details>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\n                    <md-button class=\"warn\"\n                               ng-click=\"delete()\"\n                               aria-label=\"{{ 'DELETE' | translate }}\">\n                        {{ 'DELETE' | translate }}\n                    </md-button>\n                    <span flex></span>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"edit()\"\n                               aria-label=\"{{ 'EDIT' | translate }}\">\n                        {{ 'EDIT' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"close()\"\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\n                            {{ 'CLOSE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone details in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\n                    $scope.milestone = milestone;\n                    $scope.event = $event;\n\n                    // close the popup\n                    $scope.close = function() {\n                        $mdDialog.hide();\n                    }\n\n                    // edit the milestone\n                    $scope.edit = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\n                    }\n\n                    // delete the milestone\n                    $scope.delete = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\n                    }\n\n                    $scope.onShowWorkgroup = function(workgroup) {\n                        $mdDialog.hide();\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\n                        $state.go('root.nodeProgress');\n                    }\n                }\n            ]\n        }).then((data) => {\n            if (data && data.action && data.milestone) {\n                if (data.action === 'edit') {\n                    let milestone = angular.copy(data.milestone);\n                    this.editMilestone(milestone, data.$event);\n                } else if (data.action === 'delete') {\n                    this.deleteMilestone(data.milestone);\n                }\n            }\n        }, () => {});;\n    }\n\n    /**\n     * Open a dialog to edit milestone details (or create a new one)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    editMilestone(milestone, $event) {\n        let editMode = milestone ? true : false;\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\n\n        if (!editMode) {\n            milestone = this.createMilestone();\n        }\n\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"close()\"\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\n                        {{ 'CANCEL' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"save()\"\n                               aria-label=\"{{ 'SAVE' | translate }}\">\n                            {{ 'SAVE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone edit form in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                editMode: editMode,\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\n                    $scope.editMode = editMode;\n                    $scope.milestone = milestone;\n                    $scope.$event = $event;\n                    $scope.valid = editMode;\n\n                    $scope.$translate = $filter('translate');\n\n                    // close the popup\n                    $scope.close = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\n                    }\n\n                    // save the milestone\n                    $scope.save = function() {\n                        if ($scope.valid) {\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\n                        } else {\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\n                        }\n                    }\n\n                    $scope.onChange = function(milestone, valid) {\n                        $scope.milestone = milestone;\n                        $scope.valid = valid;\n                    }\n                }\n            ]\n        }).then((data) => {\n            if (data) {\n                if (data.milestone && data.save) {\n                    this.saveMilestone(data.milestone);\n                }\n            }\n        }, () => {});\n    }\n}\n\nMilestonesController.$inject = [\n    '$injector',\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AchievementService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService',\n    'moment'\n];\n\nexport default MilestonesController;\n"]}