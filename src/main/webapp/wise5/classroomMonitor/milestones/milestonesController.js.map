{"version":3,"sources":["src/main/webapp/wise5/classroomMonitor/milestones/milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","itemsTemporaryStorage","workgroupsStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadProjectAchievements","$on","event","args","studentAchievement","addOrUpdateStudentAchievement","updateMilestoneCompletion","achievementId","currentPeriod","projectAchievements","projectAchievement","id","getAchievements","isEnabled","items","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","milestone","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","i","length","splice","saveProject","push","workgroups","numberOfStudentsCompleted","a","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","getProjectAchievementById","achievementIdToStudentAchievements","getAchievementIdToStudentAchievementsMappings","studentAchievements","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","isCompletionReached","report","generateReport","generatedReport","setReportAvailable","satisfyMinPercentage","satisfyMinNumWorkgroups","reportAvailable","isReportAvailable","referencedComponents","getSatisfyCriteriaReferencedComponents","aggregateAutoScores","Object","values","referencedComponent","componentId","calculateAggregateAutoScores","template","chooseTemplate","templates","templateContent","content","keys","componentAggregate","subScoreId","regex","RegExp","milestoneData","calculateMilestoneData","milestoneCategories","calculateMilestoneCategories","categories","JSON","stringify","replace","data","components","satisfyCriteria","satisfyCriterion","component","subScoreAggregate","colors5Scores","colors3Scores","scoreKeys","counts","scoreKeysSorted","sort","b","scoreKey","scoreKeyCount","scoreKeyPercentage","Math","floor","scoreCount","scoreKeyColor","scoreData","aggregate","scoreAnnotations","getAllLatestScoreAnnotations","scoreAnnotation","addDataToAggregate","annotation","scores","subScore","scoreSum","average","subScoreVal","score","isTemplateMatch","matchedCriteria","isTemplateCriterionSatisfied","satisfyConditional","function","isPercentOfScoresGreaterThan","isPercentOfScoresGreaterThanOrEqualTo","isPercentOfScoresLessThan","isPercentOfScoresLessThanOrEqualTo","isPercentOfScoresEqualTo","isPercentOfScoresNotEqualTo","aggregateData","getAggregateData","possibleScores","getPossibleScores","sum","getGreaterThanSum","isPercentThresholdSatisfied","possibleScore","value","getGreaterThanOrEqualToSum","getLessThanSum","getLessThanOrEqualToSum","getEqualToSum","getNotEqualToSum","targetVariable","map","Number","percentOfScores","percentThreshold","scoreName","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","onVisitNodeGrading","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\r\n\r\nclass MilestonesController {\r\n\r\n    constructor($injector,\r\n                $filter,\r\n                $mdDialog,\r\n                $rootScope,\r\n                $scope,\r\n                $state,\r\n                AchievementService,\r\n                AnnotationService,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService,\r\n                UtilService,\r\n                moment) {\r\n\r\n        this.$injector = $injector;\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.AchievementService = AchievementService;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n        this.UtilService = UtilService;\r\n        this.moment = moment;\r\n        this.$translate = this.$filter('translate');\r\n\r\n        /*\r\n         * Arrays used to temporarily store milestone display values. We add\r\n         * fields to the milestone objects but we don't want to save those\r\n         * fields when we save the milestones to the server. We remove the\r\n         * fields from the milestones and then save the milestones to the\r\n         * server. After we save the milestones, we add the fields back into\r\n         * the milestones.\r\n         */\r\n        this.itemsTemporaryStorage = [];\r\n        this.workgroupsStorage = [];\r\n        this.numberOfStudentsCompletedStorage = [];\r\n        this.percentageCompletedStorage = [];\r\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\r\n        this.setWorkgroupsInCurrentPeriod();\r\n        this.loadProjectAchievements();\r\n\r\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\r\n          if (args) {\r\n            const studentAchievement = args.studentAchievement;\r\n            this.AchievementService.addOrUpdateStudentAchievement(studentAchievement);\r\n            this.updateMilestoneCompletion(studentAchievement.achievementId);\r\n          }\r\n        });\r\n\r\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\r\n            this.periodId = args.currentPeriod.periodId;\r\n\r\n            // update the completion status for all the project projectAchievements\r\n            for (let projectAchievement of this.projectAchievements) {\r\n              this.setWorkgroupsInCurrentPeriod();\r\n              this.updateMilestoneCompletion(projectAchievement.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the projectAchievements and perform additional calculations\r\n     */\r\n    loadProjectAchievements() {\r\n      const projectAchievements = this.ProjectService.getAchievements();\r\n      if (projectAchievements.isEnabled) {\r\n        this.projectAchievements = projectAchievements.items;\r\n        for (let projectAchievement of this.projectAchievements) {\r\n          this.updateMilestoneCompletion(projectAchievement.id);\r\n\r\n          // get all the activities and steps in the project\r\n          projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\r\n          if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\r\n            /*\r\n             * loop through all the node ids that are required\r\n             * to be completed for this project achievement\r\n             */\r\n            for (let nodeId of projectAchievement.params.nodeIds) {\r\n              if (projectAchievement.items[nodeId] != null) {\r\n                projectAchievement.items[nodeId].checked = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check if the given milestone date is before the current day (and\r\n     * milestone completion is less than 100%)\r\n     * @param date a date string or object\r\n     * @param percentageCompleted Number percent completed\r\n     * @return Boolean whether given date is before today\r\n     */\r\n    isBeforeDay(date, percentageCompleted) {\r\n        let result = false;\r\n        if (date && percentageCompleted < 100) {\r\n            result = this.moment(date).isBefore(this.moment(), 'day');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if the given milestone date is the same as the current day (and\r\n     * milestone completion is less than 100%)\r\n     * @param date a date string or object\r\n     * @param percentageCompleted Number percent completed\r\n     * @return Boolean whether given date is before today\r\n     */\r\n    isSameDay(date, percentageCompleted) {\r\n        let result = false;\r\n        if (date && percentageCompleted < 100) {\r\n            result = this.moment(date).isSame(this.moment(), 'day');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new milestone\r\n     * @return a milestone object\r\n     */\r\n    createMilestone() {\r\n        let projectAchievements = this.ProjectService.getAchievementItems();\r\n        if (projectAchievements != null) {\r\n            // get the time of tomorrow at 3pm\r\n            const tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\r\n            return {\r\n                id: this.AchievementService.getAvailableAchievementId(),\r\n                name: '',\r\n                description: '',\r\n                type: \"milestone\",\r\n                params: {\r\n                    nodeIds: [],\r\n                    targetDate: tomorrow.valueOf()\r\n                },\r\n                icon: {\r\n                    image: \"\"\r\n                },\r\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\r\n                isVisible: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Delete a milestone\r\n     * @param milestone the milestone to delete\r\n     */\r\n    deleteMilestone(milestone, $event) {\r\n        if (milestone) {\r\n            const title = milestone.name;\r\n            const label = this.$translate('DELETE_MILESTONE');\r\n            const msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\r\n            const yes = this.$translate('YES');\r\n            const cancel = this.$translate('CANCEL')\r\n\r\n            const confirm = this.$mdDialog.confirm()\r\n                .title(title)\r\n                .textContent(msg)\r\n                .ariaLabel(label)\r\n                .targetEvent($event)\r\n                .ok(yes)\r\n                .cancel(cancel);\r\n\r\n            this.$mdDialog.show(confirm).then(() => {\r\n                let projectAchievements = this.projectAchievements;\r\n                let index = -1;\r\n                for (let i = 0; i < projectAchievements.length; i++) {\r\n                    if (projectAchievements[i].id === milestone.id) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (index > -1) {\r\n                    this.projectAchievements.splice(index, 1);\r\n                    this.saveProject();\r\n                }\r\n            }, () => {\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    saveMilestone(milestone) {\r\n        let index = -1;\r\n        for (let i = 0; i < this.projectAchievements.length; i++) {\r\n            if (this.projectAchievements[i].id === milestone.id) {\r\n                index = i;\r\n                this.projectAchievements[i] = milestone;\r\n                break;\r\n            }\r\n        }\r\n        if (index < 0) {\r\n            let projectAchievements = this.ProjectService.getAchievementItems();\r\n            if (projectAchievements && milestone) {\r\n                projectAchievements.push(milestone);\r\n            }\r\n        }\r\n        this.saveProject();\r\n        this.loadProjectAchievements();\r\n    }\r\n\r\n    /**\r\n     * Remove the temporary fields from the milestone objects and store\r\n     * them in temporary storage arrays so that we can load the fields back\r\n     * in later\r\n     */\r\n    clearTempFields() {\r\n        /*\r\n         * these array will store the temporary fields. the index of the arrays corresponds to the\r\n         * index of the project achievement. for example the percentageCompletedStorage value for\r\n         * the first project project achievement will be stored in\r\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\r\n         * project project achievement will be stored in this.percentageCompletedStorage[1].\r\n         */\r\n        this.itemsTemporaryStorage = [];\r\n        this.workgroupsStorage = [];\r\n        this.numberOfStudentsCompletedStorage = [];\r\n        this.percentageCompletedStorage = [];\r\n\r\n        for (let projectAchievement of this.projectAchievements) {\r\n          // save the field values in the temporary storage arrays\r\n          this.workgroupsStorage.push(projectAchievement.workgroups);\r\n          this.numberOfStudentsCompletedStorage.push(projectAchievement.numberOfStudentsCompleted);\r\n          this.percentageCompletedStorage.push(projectAchievement.percentageCompleted);\r\n\r\n          // delete the field from the projectAchievement\r\n          delete projectAchievement.items;\r\n          delete projectAchievement.workgroups;\r\n          delete projectAchievement.numberOfStudentsCompleted;\r\n          delete projectAchievement.percentageCompleted;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore the temporary fields into the achievement objects\r\n     */\r\n    restoreTempFields() {\r\n      for (let a = 0; a < this.projectAchievements.length; a++) {\r\n        const projectAchievement = this.projectAchievements[a];\r\n        // set the fields back into the achievement object\r\n        projectAchievement.items = this.itemsTemporaryStorage[a];\r\n        projectAchievement.workgroups = this.workgroupsStorage[a];\r\n        projectAchievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\r\n        projectAchievement.percentageCompleted = this.percentageCompletedStorage[a];\r\n      }\r\n      this.itemsTemporaryStorage = [];\r\n      this.workgroupsStorage = [];\r\n      this.numberOfStudentsCompletedStorage = [];\r\n      this.percentageCompletedStorage = [];\r\n    }\r\n\r\n    /**\r\n     * Save the project to the server\r\n     */\r\n    saveProject() {\r\n        this.clearTempFields();\r\n        this.ProjectService.saveProject();\r\n        this.restoreTempFields();\r\n    }\r\n\r\n    /**\r\n     * Get the user names for a workgroup id\r\n     * @param workgroupId the workgroup id\r\n     * @return the user names in the workgroup\r\n     */\r\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\r\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    setWorkgroupsInCurrentPeriod() {\r\n        const workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\r\n        this.workgroupIds = [];\r\n\r\n        // filter out workgroups not in the current period\r\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\r\n            const currentId = workgroupIdsInRun[i];\r\n            const currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\r\n\r\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\r\n                this.workgroupIds.push(currentId);\r\n            }\r\n        }\r\n        this.numberOfStudentsInRun = this.workgroupIds.length;\r\n    }\r\n\r\n    /**\r\n     * Update the student completion information for this milestone\r\n     * @param achievementId the achievement id to update\r\n     */\r\n    updateMilestoneCompletion(achievementId) {\r\n      const projectAchievement = this.getProjectAchievementById(achievementId);\r\n      const achievementIdToStudentAchievements = this.AchievementService.getAchievementIdToStudentAchievementsMappings();\r\n      const studentAchievements = achievementIdToStudentAchievements[projectAchievement.id];\r\n      const workgroupIdsCompleted = [];\r\n      const achievementTimes = [];\r\n      const workgroupIdsNotCompleted = [];\r\n\r\n      for (let studentAchievement of studentAchievements) {\r\n        const currentWorkgroupId = studentAchievement.workgroupId;\r\n        // check if workgroup is in current period\r\n        if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\r\n          workgroupIdsCompleted.push(currentWorkgroupId);\r\n          achievementTimes.push(studentAchievement.achievementTime);\r\n        }\r\n      }\r\n\r\n      for (let workgroupId of this.workgroupIds) {\r\n        if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\r\n          workgroupIdsNotCompleted.push(workgroupId);\r\n        }\r\n      }\r\n\r\n      projectAchievement.workgroups = [];\r\n\r\n      for (let c = 0; c < workgroupIdsCompleted.length; c++) {\r\n        const workgroupId = workgroupIdsCompleted[c];\r\n        const achievementTime = achievementTimes[c];\r\n        const workgroupObject = {\r\n          workgroupId: workgroupId,\r\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\r\n          achievementTime: achievementTime,\r\n          completed: true\r\n        };\r\n        projectAchievement.workgroups.push(workgroupObject);\r\n      }\r\n\r\n      /*\r\n       * loop through all the workgroups that have not\r\n       * completed the achievement\r\n       */\r\n      for (let workgroupId of workgroupIdsNotCompleted) {\r\n        const workgroupObject = {\r\n          workgroupId: workgroupId,\r\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\r\n          achievementTime: null,\r\n          completed: false\r\n        };\r\n        projectAchievement.workgroups.push(workgroupObject);\r\n      }\r\n\r\n      projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\r\n      projectAchievement.percentageCompleted =\r\n        parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\r\n      if (projectAchievement.type === 'milestoneReport') {\r\n        if (this.isCompletionReached(projectAchievement)) {\r\n          const report = this.generateReport(projectAchievement);\r\n          if (report != null) {\r\n            projectAchievement.generatedReport = this.generateReport(projectAchievement);\r\n            this.setReportAvailable(projectAchievement, true);\r\n          } else {\r\n            delete projectAchievement.generatedReport;\r\n            this.setReportAvailable(projectAchievement, false);\r\n          }\r\n        } else {\r\n          this.setReportAvailable(projectAchievement, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    isCompletionReached(projectAchievement) {\r\n      return projectAchievement.percentageCompleted >= projectAchievement.satisfyMinPercentage &&\r\n          projectAchievement.numberOfStudentsCompleted >= projectAchievement.satisfyMinNumWorkgroups;\r\n    }\r\n\r\n    setReportAvailable(projectAchievement, reportAvailable) {\r\n      projectAchievement.isReportAvailable = reportAvailable;\r\n    }\r\n\r\n    generateReport(projectAchievement) {\r\n      const referencedComponents = this.getSatisfyCriteriaReferencedComponents(projectAchievement);\r\n      const aggregateAutoScores = {};\r\n      for (const referencedComponent of Object.values(referencedComponents)) {\r\n        const nodeId = referencedComponent.nodeId;\r\n        const componentId = referencedComponent.componentId;\r\n        aggregateAutoScores[componentId] = this.calculateAggregateAutoScores(nodeId, componentId, this.periodId);\r\n      }\r\n      const template = this.chooseTemplate(projectAchievement.report.templates, aggregateAutoScores);\r\n      let templateContent = template.content;\r\n      if (templateContent != null) {\r\n        for (let componentId of Object.keys(aggregateAutoScores)) {\r\n          const componentAggregate = aggregateAutoScores[componentId];\r\n          for (let subScoreId of Object.keys(componentAggregate)) {\r\n            const regex = new RegExp(`milestone-report-graph.*id=\"(${subScoreId})\"`, 'g');\r\n            const milestoneData = this.calculateMilestoneData(componentAggregate[subScoreId], subScoreId);\r\n            const milestoneCategories = this.calculateMilestoneCategories(subScoreId);\r\n            const categories = JSON.stringify(milestoneCategories).replace(/\\\"/g, '\\'');\r\n            const data = JSON.stringify(milestoneData).replace(/\\\"/g, '\\'');\r\n            templateContent = templateContent.replace(regex,\r\n                `$& categories=\\\"${categories}\\\" data=\\\"${data}\\\"`);\r\n          }\r\n        }\r\n      }\r\n      return templateContent;\r\n    }\r\n\r\n    getSatisfyCriteriaReferencedComponents(projectAchievement) {\r\n      const components = {};\r\n      const templates = projectAchievement.report.templates;\r\n      for (const template of templates) {\r\n        for (const satisfyCriterion of template.satisfyCriteria) {\r\n          const nodeId = satisfyCriterion.nodeId;\r\n          const componentId = satisfyCriterion.componentId;\r\n          const component = {\r\n            nodeId: nodeId,\r\n            componentId: componentId\r\n          };\r\n          components[nodeId + '_' + componentId] = component;\r\n        }\r\n      }\r\n      return components;\r\n    }\r\n\r\n    calculateMilestoneCategories(subScoreId) {\r\n      if (subScoreId === 'ki') {\r\n        return ['1','2','3','4','5'];\r\n      } else {\r\n        return ['0','1','2'];\r\n      }\r\n    }\r\n\r\n    calculateMilestoneData(subScoreAggregate, subScoreId) {\r\n      const colors5Scores = ['red', 'orange', 'yellow', 'darkseagreen', 'green'];\r\n      const colors3Scores = ['red', 'yellow', 'green'];\r\n      const scoreKeys = Object.keys(subScoreAggregate.counts);\r\n      const scoreKeysSorted = scoreKeys.sort((a, b) => { return parseInt(a) - parseInt(b);});\r\n      const data = [];\r\n      for (let scoreKey of scoreKeysSorted) {\r\n        const scoreKeyCount = subScoreAggregate.counts[scoreKey];\r\n        const scoreKeyPercentage = Math.floor(100 * scoreKeyCount / subScoreAggregate.scoreCount);\r\n        const scoreKeyColor = subScoreId === 'ki' ? colors5Scores[scoreKey] : colors3Scores[scoreKey];\r\n        const scoreData = {'y': scoreKeyPercentage, 'color': scoreKeyColor, 'count': scoreKeyCount };\r\n        data.push(scoreData);\r\n      }\r\n      return data;\r\n    }\r\n\r\n    calculateAggregateAutoScores(nodeId, componentId, periodId) {\r\n      const aggregate = {};\r\n      const scoreAnnotations = this.AnnotationService.getAllLatestScoreAnnotations(nodeId, componentId, periodId);\r\n      for (let scoreAnnotation of scoreAnnotations) {\r\n        if (scoreAnnotation.type === 'autoScore') {\r\n          this.addDataToAggregate(aggregate, scoreAnnotation);\r\n        }\r\n      }\r\n      return aggregate;\r\n    }\r\n\r\n    addDataToAggregate(aggregate, annotation) {\r\n      for (let subScore of annotation.data.scores) {\r\n        if (aggregate[subScore.id] == null) {\r\n          if (subScore.id === 'ki') {\r\n            aggregate[subScore.id] = {\r\n              scoreSum: 0,\r\n              scoreCount: 0,\r\n              counts: {\r\n                1: 0,\r\n                2: 0,\r\n                3: 0,\r\n                4: 0,\r\n                5: 0\r\n              },\r\n              average: 0\r\n            };\r\n          } else {\r\n            aggregate[subScore.id] = {\r\n              scoreSum: 0,\r\n              scoreCount: 0,\r\n              counts: {\r\n                0: 0,\r\n                1: 0,\r\n                2: 0\r\n              },\r\n              average: 0\r\n            };\r\n          }\r\n        }\r\n        const subScoreVal = subScore.score;\r\n        aggregate[subScore.id].counts[subScoreVal]++;\r\n        aggregate[subScore.id].scoreSum += subScoreVal;\r\n        aggregate[subScore.id].scoreCount++;\r\n        aggregate[subScore.id].average = aggregate[subScore.id].scoreSum / aggregate[subScore.id].scoreCount;\r\n      }\r\n      return aggregate;\r\n    }\r\n\r\n    chooseTemplate(templates, aggregateAutoScores) {\r\n      for (let template of templates) {\r\n        if (this.isTemplateMatch(template, aggregateAutoScores)) {\r\n          return template;\r\n        }\r\n      }\r\n      return {\r\n        content: null\r\n      };\r\n    }\r\n\r\n    isTemplateMatch(template, aggregateAutoScores) {\r\n      const matchedCriteria = [];\r\n      for (let satisfyCriterion of template.satisfyCriteria) {\r\n        if (this.isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores)) {\r\n          matchedCriteria.push(satisfyCriterion);\r\n        }\r\n      }\r\n      if (template.satisfyConditional === 'all') {\r\n        return matchedCriteria.length === template.satisfyCriteria.length;\r\n      } else if (template.satisfyConditional === 'any') {\r\n        return matchedCriteria.length > 0;\r\n      }\r\n    }\r\n\r\n    isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores) {\r\n      if (satisfyCriterion.function === 'percentOfScoresGreaterThan') {\r\n        return this.isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores);\r\n      } else if (satisfyCriterion.function === 'percentOfScoresGreaterThanOrEqualTo') {\r\n        return this.isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\r\n      } else if (satisfyCriterion.function === 'percentOfScoresLessThan') {\r\n        return this.isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores);\r\n      } else if (satisfyCriterion.function === 'percentOfScoresLessThanOrEqualTo') {\r\n        return this.isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\r\n      } else if (satisfyCriterion.function === 'percentOfScoresEqualTo') {\r\n        return this.isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores);\r\n      } else if (satisfyCriterion.function === 'percentOfScoresNotEqualTo') {\r\n        return this.isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores);\r\n      }\r\n    }\r\n\r\n    isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore > satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore >= satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getLessThanSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getLessThanSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore < satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore <= satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getEqualToSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore === satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores) {\r\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\r\n      const possibleScores = this.getPossibleScores(aggregateData);\r\n      const sum = this.getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores);\r\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\r\n    }\r\n\r\n    getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\r\n      let sum = 0;\r\n      for (const possibleScore of possibleScores) {\r\n        if (possibleScore !== satisfyCriterion.value) {\r\n          sum += aggregateData.counts[possibleScore];\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    getAggregateData(satisfyCriterion, aggregateAutoScores) {\r\n      const component = aggregateAutoScores[satisfyCriterion.componentId];\r\n      return component[satisfyCriterion.targetVariable];\r\n    }\r\n\r\n    getPossibleScores(aggregateData) {\r\n      return Object.keys(aggregateData.counts).map(Number).sort();\r\n    }\r\n\r\n    isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum) {\r\n      const percentOfScores = 100 * sum / aggregateData.scoreCount;\r\n      return percentOfScores > satisfyCriterion.percentThreshold;\r\n    }\r\n\r\n    getProjectAchievementById(achievementId) {\r\n      for (let projectAchievement of this.projectAchievements) {\r\n        if (projectAchievement.id === achievementId) {\r\n          return projectAchievement;\r\n        }\r\n      }\r\n      return {};\r\n    }\r\n\r\n    generateName(scoreName) {\r\n      if (scoreName === 'ki') {\r\n        return `name=\"KI Score\"`;\r\n      } else if (scoreName === 'science') {\r\n        return `name=\"Science Score\"`;\r\n      } else if (scoreName === 'engineering') {\r\n        return `name=\"Engineering Score\"`;\r\n      }\r\n    }\r\n\r\n    generateCategories(scoreName) {\r\n      if (scoreName === 'ki') {\r\n        return `categories=\"['1', '2', '3', '4', '5']\"`;\r\n      } else {\r\n        return `categories=\"['1', '2', '3']\"`;\r\n      }\r\n    }\r\n\r\n    generateData(scoreName) {\r\n      if (scoreName === 'ki') {\r\n        return `name=\"KI Score\"`;\r\n      } else if (scoreName === 'science') {\r\n        return `name=\"Science Score\"`;\r\n      } else if (scoreName === 'engineering') {\r\n        return `name=\"Engineering Score\"`;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Open a dialog with the milestone details (list with workgroups statuses\r\n     * for the given milestone)\r\n     * @param milestone the milestone object to show\r\n     * @param $event the event that triggered the function call\r\n     */\r\n    showMilestoneDetails(milestone, $event) {\r\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\r\n        let template =\r\n            `<md-dialog class=\"dialog--wider\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>${ title }</h2>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\r\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\" on-visit-node-grading=\"onVisitNodeGrading()\"></milestone-details>\r\n                </md-dialog-content>\r\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\r\n                    <md-button class=\"warn\"\r\n                               ng-click=\"delete()\"\r\n                               aria-label=\"{{ 'DELETE' | translate }}\">\r\n                        {{ 'DELETE' | translate }}\r\n                    </md-button>\r\n                    <span flex></span>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"edit()\"\r\n                               aria-label=\"{{ 'EDIT' | translate }}\">\r\n                        {{ 'EDIT' | translate }}\r\n                    </md-button>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"close()\"\r\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\r\n                            {{ 'CLOSE' | translate }}\r\n                        </md-button>\r\n                    </md-dialog-actions>\r\n            </md-dialog>`;\r\n\r\n        // display the milestone details in a dialog\r\n        this.$mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            template: template,\r\n            ariaLabel: title,\r\n            fullscreen: true,\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true,\r\n            locals: {\r\n                $event, $event,\r\n                milestone: milestone\r\n            },\r\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\r\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\r\n                    $scope.milestone = milestone;\r\n                    $scope.event = $event;\r\n\r\n                    $scope.close = function() {\r\n                        $mdDialog.hide();\r\n                    };\r\n\r\n                    $scope.edit = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\r\n                    };\r\n\r\n                    $scope.delete = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\r\n                    };\r\n\r\n                    $scope.onShowWorkgroup = function(workgroup) {\r\n                        $mdDialog.hide();\r\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\r\n                        $state.go('root.nodeProgress');\r\n                    };\r\n\r\n                    $scope.onVisitNodeGrading = function() {\r\n                      $mdDialog.hide();\r\n                    }\r\n                }\r\n            ]\r\n        }).then((data) => {\r\n            if (data && data.action && data.milestone) {\r\n                if (data.action === 'edit') {\r\n                    let milestone = angular.copy(data.milestone);\r\n                    this.editMilestone(milestone, data.$event);\r\n                } else if (data.action === 'delete') {\r\n                    this.deleteMilestone(data.milestone);\r\n                }\r\n            }\r\n        }, () => {});;\r\n    }\r\n\r\n    /**\r\n     * Open a dialog to edit milestone details (or create a new one)\r\n     * @param milestone the milestone object to show\r\n     * @param $event the event that triggered the function call\r\n     */\r\n    editMilestone(milestone, $event) {\r\n        let editMode = milestone ? true : false;\r\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\r\n\r\n        if (!editMode) {\r\n            milestone = this.createMilestone();\r\n        }\r\n\r\n        let template =\r\n            `<md-dialog class=\"dialog--wide\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>${ title }</h2>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\r\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\r\n                </md-dialog-content>\r\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\r\n                    <md-button ng-click=\"close()\"\r\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\r\n                        {{ 'CANCEL' | translate }}\r\n                    </md-button>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"save()\"\r\n                               aria-label=\"{{ 'SAVE' | translate }}\">\r\n                            {{ 'SAVE' | translate }}\r\n                        </md-button>\r\n                    </md-dialog-actions>\r\n            </md-dialog>`;\r\n\r\n        // display the milestone edit form in a dialog\r\n        this.$mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            template: template,\r\n            ariaLabel: title,\r\n            fullscreen: true,\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true,\r\n            locals: {\r\n                editMode: editMode,\r\n                $event, $event,\r\n                milestone: milestone\r\n            },\r\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\r\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\r\n                    $scope.editMode = editMode;\r\n                    $scope.milestone = milestone;\r\n                    $scope.$event = $event;\r\n                    $scope.valid = editMode;\r\n\r\n                    $scope.$translate = $filter('translate');\r\n\r\n                    $scope.close = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\r\n                    };\r\n\r\n                    $scope.save = function() {\r\n                        if ($scope.valid) {\r\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\r\n                        } else {\r\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\r\n                        }\r\n                    };\r\n\r\n                    $scope.onChange = function(milestone, valid) {\r\n                        $scope.milestone = milestone;\r\n                        $scope.valid = valid;\r\n                    };\r\n                }\r\n            ]\r\n        }).then((data) => {\r\n            if (data) {\r\n                if (data.milestone && data.save) {\r\n                    this.saveMilestone(data.milestone);\r\n                }\r\n            }\r\n        }, () => {});\r\n    }\r\n}\r\n\r\nMilestonesController.$inject = [\r\n    '$injector',\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$state',\r\n    'AchievementService',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService',\r\n    'UtilService',\r\n    'moment'\r\n];\r\n\r\nexport default MilestonesController;\r\n"]}