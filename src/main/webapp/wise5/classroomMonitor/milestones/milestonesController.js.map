{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$rootScope","$scope","$state","AchievementService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","calendarIsOpenTemporaryStorage","itemsTemporaryStorage","workgroupsStorage","editStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","showStudentsStorage","timeDiffStorage","loadAchievements","achievementsObject","getAchievements","achievementIdToAchievements","getAchievementIdToAchievementsMappings","workgroupIds","getClassmateWorkgroupIds","numberOfStudentsInRun","length","isEnabled","items","achievements","a","projectAchievement","params","targetDateTemp","Date","targetDate","timeDiff","calculateTimeDiff","studentAchievementsForAchievementId","id","edit","undefined","calendarIsOpen","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","s","studentAchievement","push","workgroupId","achievementTime","w","indexOf","workgroups","c","workgroupObject","completed","n","numberOfStudentsCompleted","percentageCompleted","parseInt","makeCopyOfJSONObject","idToOrder","nodeIds","nodeId","checked","date","fromNow","replace","projectAchievements","getAchievementItems","tomorrow","add","hours","minutes","seconds","newMilestone","getAvailableAchievementId","name","description","type","valueOf","icon","image","isVisible","saveProject","milestone","item","$key","splice","groupId","showSteps","childIds","getChildNodeIdsById","childId","show","index","answer","confirm","getTime","achievement","showStudents","clearTempFields","restoreTempFields","isGroupNode","getNodePositionById","getNodeTitleByNodeId","getDisplayUserNamesByWorkgroupId","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $state,\n                AchievementService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService,\n                moment) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AchievementService = AchievementService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.moment = moment;\n\n        /*\n         * Arrays used to temporarily store milestone display values. We add\n         * fields to the milestone objects but we don't want to save those\n         * fields when we save the milestones to the server. We remove the\n         * fields from the milestones and then save the milestones to the\n         * server. After we save the milestones, we add the fields back into\n         * the milestones.\n         */\n        this.calendarIsOpenTemporaryStorage = [];\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.editStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.showStudentsStorage = [];\n        this.timeDiffStorage = [];\n\n        // load the achievements and perform additional calculations\n        this.loadAchievements();\n    }\n\n    /**\n     * Load the achievements and perform additional calculations\n     */\n    loadAchievements() {\n\n        // get the project achievements object\n        var achievementsObject = this.ProjectService.getAchievements();\n\n        // get the student achievements\n        var achievementIdToAchievements = this.AchievementService.getAchievementIdToAchievementsMappings();\n\n        // get the workgroup ids\n        var workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n        // the number of students in the run\n        this.numberOfStudentsInRun = workgroupIds.length;\n\n        if (achievementsObject != null) {\n\n            if (achievementsObject.isEnabled) {\n\n                if (achievementsObject.items) {\n\n                    // get the project achievements\n                    this.achievements = achievementsObject.items;\n\n                    // loop through all the project achievements\n                    for (var a = 0; a < this.achievements.length; a++) {\n\n                        // get a project achievement\n                        var projectAchievement = this.achievements[a];\n\n                        if (projectAchievement != null) {\n\n                            // calculate the target date as a Date() object\n                            projectAchievement.params.targetDateTemp = new Date(projectAchievement.params.targetDate);\n\n                            /*\n                             * calculate the time difference between now and the\n                             * target date\n                             */\n                            var timeDiff = this.calculateTimeDiff(projectAchievement.params.targetDate);\n\n                            projectAchievement.timeDiff = timeDiff;\n\n                            // get the student achievements for this achievement id\n                            var studentAchievementsForAchievementId = achievementIdToAchievements[projectAchievement.id];\n\n                            if (projectAchievement.edit === null || projectAchievement.edit === undefined) {\n                                // initialize the edit field\n                                projectAchievement.edit = false;\n                            }\n\n                            if (projectAchievement.calendarIsOpen === null || projectAchievement.calendarIsOpen === undefined) {\n                                // initialize the calendarIsOpen field\n                                projectAchievement.calendarIsOpen = false;\n                            }\n\n                            var workgroupIdsCompleted = [];\n                            var achievementTimes = [];\n                            var workgroupIdsNotCompleted = [];\n\n                            /*\n                             * loop through all the student achievements for\n                             * this achievement id\n                             */\n                            for (var s = 0; s < studentAchievementsForAchievementId.length; s++) {\n                                var studentAchievement = studentAchievementsForAchievementId[s];\n\n                                if (studentAchievement != null) {\n                                    /*\n                                     * add the workgroup id to the array of workgroup ids that\n                                     * have completed the achievement\n                                     */\n                                    workgroupIdsCompleted.push(studentAchievement.workgroupId);\n\n                                    // add the achievement time to the achievement times array\n                                    achievementTimes.push(studentAchievement.achievementTime);\n                                }\n                            }\n\n                            /*\n                             * loop through all the workgroup ids to find the\n                             * workgroup ids that have not completed the\n                             * achievement\n                             */\n                            for (var w = 0; w < workgroupIds.length; w++) {\n                                var workgroupId = workgroupIds[w];\n\n                                if (workgroupIdsCompleted.indexOf(workgroupId) == -1) {\n                                    // this workgroup has not completed the achievement\n\n                                    /*\n                                     * add the workgroup id to the array of workgroup ids that\n                                     * have not completed the achievement\n                                     */\n                                    workgroupIdsNotCompleted.push(workgroupId);\n                                }\n                            }\n\n                            projectAchievement.workgroups = [];\n\n                            /*\n                             * loop through all the workgroups that have\n                             * completed the achievement\n                             */\n                            for (var c = 0; c < workgroupIdsCompleted.length; c++) {\n                                var workgroupId = workgroupIdsCompleted[c];\n                                var achievementTime = achievementTimes[c];\n\n                                /*\n                                 * create an object used for displaying\n                                 * information about the workgroup\n                                 */\n                                var workgroupObject = {\n                                    workgroupId: workgroupId,\n                                    achievementTime: achievementTime,\n                                    completed: true\n                                };\n\n                                projectAchievement.workgroups.push(workgroupObject);\n                            }\n\n                            /*\n                             * loop through all the workgroups that have not\n                             * completed the achievement\n                             */\n                            for (var n = 0; n < workgroupIdsNotCompleted.length; n++) {\n                                var workgroupId = workgroupIdsNotCompleted[n];\n\n                                /*\n                                 * create an object used for displaying\n                                 * information about the workgroup\n                                 */\n                                var workgroupObject = {\n                                    workgroupId: workgroupId,\n                                    achievementTime: null,\n                                    completed: false\n                                };\n\n                                projectAchievement.workgroups.push(workgroupObject);\n                            }\n\n                            /*\n                             * calculate the number of workgroups that completed\n                             * the achievement\n                             */\n                            projectAchievement.numberOfStudentsCompleted = studentAchievementsForAchievementId.length;\n\n                            /*\n                             * calculate the percentage of workgroups that have\n                             * completed the achievement\n                             */\n                            projectAchievement.percentageCompleted = parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n\n                            // get all the activities and steps in the project\n                            projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n                            if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n\n                                /*\n                                 * loop through all the node ids that are required\n                                 * to be completed for this achievement\n                                 */\n                                for (var n = 0; n < projectAchievement.params.nodeIds.length; n++) {\n                                    var nodeId = projectAchievement.params.nodeIds[n];\n\n                                    if (projectAchievement.items[nodeId] != null) {\n                                        // check the checkbox corresponding to the node id\n                                        projectAchievement.items[nodeId].checked = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate the time difference between now and the date\n     * @param date a date in milliseconds since the epoch\n     * @return a string that contains a human readable time difference\n     * example \"2 days ago\", or \"in 3 days\"\n     */\n    calculateTimeDiff(date) {\n\n        // get the time difference from now\n        var timeDiff = this.moment(date).fromNow();\n\n        /*\n         * there seems to be a bug in moment where if the date is in the future\n         * the timeDiff will be something like \"in 3 days ago\" when it should\n         * only be \"in 3 days\". if the timeDiff string starts with \"in\", we will\n         * remove the \" ago\" from the end of the string\n         */\n        if (timeDiff.indexOf(\"in\") != -1) {\n            timeDiff = timeDiff.replace(\" ago\", \"\");\n        }\n\n        return timeDiff\n    }\n\n    /**\n     * Create a new milestone\n     */\n    createMilestone() {\n\n        // get the project achievements\n        var projectAchievements = this.ProjectService.getAchievementItems();\n\n        if (projectAchievements != null) {\n\n            // get the time of tomorrow at 3pm\n            var tomorrow = this.moment().add('days', 1).hours(15).minutes(0).seconds(0);\n\n            // create a new milestone object\n            var newMilestone = {\n                id: this.AchievementService.getAvailableAchievementId(),\n                name: '',\n                description: '',\n                type: \"milestone\",\n                params: {\n                    nodeIds: [],\n                    targetDate: tomorrow.valueOf()\n                },\n                icon: {\n                    image: \"\"\n                },\n                isVisible: true,\n                edit: true\n            };\n\n            // add the milestone object to the array of achievements\n            projectAchievements.push(newMilestone);\n\n            // reload the achievements\n            this.loadAchievements();\n\n            // save the project to the server\n            this.saveProject();\n        }\n    }\n\n    /**\n     * The edit button for a milestone was clicked\n     * @param milestone the milestone to edit\n     */\n    editMilestoneClicked(milestone) {\n        milestone.edit = true;\n    }\n\n    /**\n     * The checkbox for an activity or step was clicked\n     * @param milestone the milestone that is being edited\n     * @param item the activity or step that was clicked\n     */\n    itemClicked(milestone, item) {\n\n        if (milestone != null &&\n            milestone.params != null &&\n            milestone.params.nodeIds != null) {\n\n            // get the node ids that are currently required for the milestone\n            var nodeIds = milestone.params.nodeIds;\n\n            // get the node id of the item that was clicked\n            var nodeId = item.$key;\n\n            if (item.checked) {\n                if (nodeIds.indexOf(nodeId) == -1) {\n                    // add the node id\n                    milestone.params.nodeIds.push(nodeId);\n                }\n            } else {\n                // remove the node id\n\n                // loop through all the node ids and remove the node id\n                for (var n = nodeIds.length - 1; n >= 0; n--) {\n                    if (nodeId == nodeIds[n]) {\n                        nodeIds.splice(n, 1);\n                    }\n                }\n            }\n        }\n\n        // save the project to the server\n        this.saveProject();\n    }\n\n    /**\n     * Show the steps for an activity\n     * @param groupId the node id for the activity\n     * @param milestone the milestone object that is being edited\n     */\n    showStepsClicked(groupId, milestone) {\n\n        if (groupId != null && milestone != null) {\n\n            /*\n             * set the showSteps field to true so that we will now see the\n             * \"Hide Steps\" button\n             */\n            milestone.items[groupId].showSteps = true;\n\n            // get all the child ids of the group\n            var childIds = this.ProjectService.getChildNodeIdsById(groupId);\n\n            // loop through all the child ids\n            for (var c = 0; c < childIds.length; c++) {\n                var childId = childIds[c];\n\n                if (milestone.items[childId] != null) {\n                    // show the step\n                    milestone.items[childId].show = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Hide the steps for an activity\n     * @param groupId the node id for the activity\n     * @param milestone the milestone object that is being edited\n     */\n    hideStepsClicked(groupId, milestone) {\n\n        if (groupId != null && milestone != null) {\n\n            /*\n             * set the showSteps field to false so that we will now see the\n             * \"Show Steps\" button\n             */\n            milestone.items[groupId].showSteps = false;\n\n            // get all the child ids of the group\n            var childIds = this.ProjectService.getChildNodeIdsById(groupId);\n\n            // loop through all the child ids\n            for (var c = 0; c < childIds.length; c++) {\n                var childId = childIds[c];\n\n                if (milestone.items[childId] != null) {\n                    // hide the step\n                    milestone.items[childId].show = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a milestone\n     * @param index the index of the milestone to delete\n     * @param milestone the milestone to delete\n     */\n    deleteMilestone(index, milestone) {\n\n        var name = \"\";\n\n        if (milestone != null) {\n            // get the name of the milestone\n            name = milestone.name;\n        }\n\n        // ask to make sure the author wants to delete the milestone\n        var answer = confirm(\"Are you sure you want to delete this milestone?\\n\\n\" + name);\n\n        if (answer) {\n            // remove the milestone\n            this.achievements.splice(index, 1);\n\n            // save the project to the server\n            this.saveProject();\n        }\n    }\n\n    /**\n     * The save button for a milestone was clicked\n     * @param milestone the milestone to save\n     */\n    saveMilestoneClicked(milestone) {\n\n        // do not show the edit view for the milestone anymore\n        milestone.edit = false;\n\n        // save the project to the server\n        this.saveProject();\n    }\n\n    /**\n     * The milestone due date changed\n     * @param milestone the milestone that has changed\n     */\n    milestoneDateChanged(milestone) {\n\n        // get the due date\n        milestone.params.targetDate = milestone.params.targetDateTemp.getTime();\n\n        // calculate the time difference from now to the due date\n        milestone.timeDiff = this.calculateTimeDiff(milestone.params.targetDate);\n\n        // save the project to the server\n        this.saveProject();\n    }\n\n    /**\n     * Remove the temporary fields from the milestone objects and store\n     * them in temporary storage arrays so that we can load the fields back\n     * in later\n     */\n    clearTempFields() {\n\n        /*\n         * these array will store the temporary fields. the index of the arrays\n         * corresponds to the index of the achievement. for example the calendarIsOpen\n         * value for the first achievement will be stored in\n         * this.calendarIsOpenTemporaryStorage[0]. the calendarIsOpen value for the second\n         * achievement will be stored in this.calendarIsOpenTemporaryStorage[1].\n         */\n        this.calendarIsOpenTemporaryStorage = [];\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.editStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.showStudentsStorage = [];\n        this.timeDiffStorage = [];\n\n        // loop through all the achievements\n        for (var a = 0; a < this.achievements.length; a++) {\n\n            // get an achievement\n            var achievement = this.achievements[a];\n\n            // save the field values in the temprary storage arrays\n            this.calendarIsOpenTemporaryStorage.push(achievement.calendarIsOpen);\n            this.itemsTemporaryStorage.push(achievement.items);\n            this.workgroupsStorage.push(achievement.workgroups);\n            this.editStorage.push(achievement.edit);\n            this.numberOfStudentsCompletedStorage.push(achievement.numberOfStudentsCompleted);\n            this.percentageCompletedStorage.push(achievement.percentageCompleted);\n            this.showStudentsStorage.push(achievement.showStudents);\n            this.timeDiffStorage.push(achievement.timeDiff);\n\n            // delete the field from the achievement\n            delete achievement.params.targetDateTemp;\n            delete achievement.calendarIsOpen;\n            delete achievement.items;\n            delete achievement.workgroups;\n            delete achievement.edit;\n            delete achievement.numberOfStudentsCompleted;\n            delete achievement.percentageCompleted;\n            delete achievement.showStudents;\n            delete achievement.timeDiff;\n        }\n    }\n\n    /**\n     * Restore the temporary fields into the achievement objects\n     */\n    restoreTempFields() {\n\n        // loop through all the achievements\n        for (var a = 0; a < this.achievements.length; a++) {\n\n            // get an achievement\n            var achievement = this.achievements[a];\n\n            // recalculate the target date object\n            achievement.params.targetDateTemp = new Date(achievement.params.targetDate);\n\n            // set the fields back into the achievement object\n            achievement.calendarIsOpen = this.calendarIsOpenTemporaryStorage[a];\n            achievement.items = this.itemsTemporaryStorage[a];\n            achievement.workgroups = this.workgroupsStorage[a];\n            achievement.edit = this.editStorage[a];\n            achievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n            achievement.percentageCompleted = this.percentageCompletedStorage[a];\n            achievement.showStudents = this.showStudentsStorage[a];\n            achievement.timeDiff = this.timeDiffStorage[a];\n        }\n\n        // clear the temporary storage arrays\n        this.calendarIsOpenTemporaryStorage = [];\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.editStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.showStudentsStorage = [];\n        this.timeDiffStorage = [];\n    }\n\n    /**\n     * The open calendar button was clicked\n     * @param milestone the milestone that we will edit the due date for\n     */\n    openCalendar(milestone) {\n\n        // open the calendar for the milestone\n        milestone.calendarIsOpen = true;\n    };\n\n    /**\n     * The close calendar button was clicked\n     * @param milestone the milestone that we were editing\n     */\n    closeCalendar(milestone) {\n\n        // close the calendar for the milestone\n        milestone.calendarIsOpen = false;\n    }\n\n    /**\n     * Save the project to the server\n     */\n    saveProject() {\n\n        // clear the temp fields and remember them\n        this.clearTempFields();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n\n        // restore the temp fields\n        this.restoreTempFields();\n    }\n\n    /**\n     * Check if a node id is for a group\n     * @param nodeId\n     * @returns whether the node is a group node\n     */\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    /**\n     * Get the node position\n     * @param nodeId the node id\n     * @returns the node position\n     */\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Get the node title for a node\n     * @param nodeId the node id\n     * @returns the node title\n     */\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    /**\n     * Get the user names for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return the user names in the workgroup\n     */\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Show which students have completed the milestone\n     * @param milestone the milestone\n     */\n    showStudents(milestone) {\n        milestone.showStudents = true;\n    }\n\n    /**\n     * Hide which students have completed the milestone\n     * @parma milestone the milestone\n     */\n    hideStudents(milestone) {\n        milestone.showStudents = false;\n    }\n}\n\nMilestonesController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AchievementService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService',\n    'moment'\n];\n\nexport default MilestonesController;\n"]}