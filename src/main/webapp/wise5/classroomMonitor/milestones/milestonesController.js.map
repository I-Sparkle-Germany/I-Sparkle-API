{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","itemsTemporaryStorage","workgroupsStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadProjectAchievements","$on","event","args","studentAchievement","addOrUpdateStudentAchievement","data","id","updateMilestoneCompletion","currentPeriod","projectAchievements","projectAchievement","getAchievements","isEnabled","items","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","milestone","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","i","length","splice","saveProject","push","workgroups","numberOfStudentsCompleted","a","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","achievementId","getProjectAchievementById","achievementIdToStudentAchievements","getAchievementIdToStudentAchievementsMappings","studentAchievements","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","isCompletionReached","report","generateReport","generatedReport","setReportAvailable","satisfyMinPercentage","satisfyMinNumWorkgroups","reportAvailable","isReportAvailable","reportVariables","variables","reportVariableValues","aggregateAutoScores","satisfyCriteria","satisfyCriterion","componentId","calculateAggregateAutoScores","reportVariable","varValue","value","function","getAverageAutoScore","template","chooseTemplate","templates","templateContent","content","Object","keys","componentAggregate","subScoreId","regex","RegExp","milestoneData","calculateMilestoneData","milestoneCategories","calculateMilestoneCategories","categories","JSON","stringify","replace","console","log","subScoreAggregate","colors5Scores","colors3Scores","scoreKeys","counts","scoreKeysSorted","sort","b","scoreKey","scoreKeyCount","scoreKeyPercentage","Math","floor","scoreCount","scoreKeyColor","scoreData","aggregate","scoreAnnotations","getAllLatestScoreAnnotations","scoreAnnotation","addDataToAggregate","annotation","scores","subScore","scoreSum","average","subScoreVal","score","isTemplateMatch","matchedCriteria","isTemplateCriterionSatisfied","satisfyConditional","targetValue","targetVariable","scoreName","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n    constructor($injector,\n                $filter,\n                $mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                AchievementService,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService,\n                moment) {\n\n        this.$injector = $injector;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AchievementService = AchievementService;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.moment = moment;\n        this.$translate = this.$filter('translate');\n\n        /*\n         * Arrays used to temporarily store milestone display values. We add\n         * fields to the milestone objects but we don't want to save those\n         * fields when we save the milestones to the server. We remove the\n         * fields from the milestones and then save the milestones to the\n         * server. After we save the milestones, we add the fields back into\n         * the milestones.\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n        this.setWorkgroupsInCurrentPeriod();\n        this.loadProjectAchievements();\n\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\n          if (args) {\n            const studentAchievement = args.studentAchievement;\n            this.AchievementService.addOrUpdateStudentAchievement(studentAchievement);\n            if (studentAchievement.data != null && studentAchievement.data.id != null) {\n              this.updateMilestoneCompletion(studentAchievement.data.id);\n            }\n          }\n        });\n\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            this.periodId = args.currentPeriod.periodId;\n\n            // update the completion status for all the project projectAchievements\n            for (let projectAchievement of this.projectAchievements) {\n              this.setWorkgroupsInCurrentPeriod();\n              this.updateMilestoneCompletion(projectAchievement.id);\n            }\n        });\n    }\n\n    /**\n     * Load the projectAchievements and perform additional calculations\n     */\n    loadProjectAchievements() {\n      const projectAchievements = this.ProjectService.getAchievements();\n      if (projectAchievements.isEnabled) {\n        this.projectAchievements = projectAchievements.items;\n        for (let projectAchievement of this.projectAchievements) {\n          this.updateMilestoneCompletion(projectAchievement.id);\n\n          // get all the activities and steps in the project\n          projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n          if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n            /*\n             * loop through all the node ids that are required\n             * to be completed for this project achievement\n             */\n            for (let nodeId of projectAchievement.params.nodeIds) {\n              if (projectAchievement.items[nodeId] != null) {\n                projectAchievement.items[nodeId].checked = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Check if the given milestone date is before the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isBeforeDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isBefore(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Check if the given milestone date is the same as the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isSameDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isSame(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Create a new milestone\n     * @return a milestone object\n     */\n    createMilestone() {\n        let projectAchievements = this.ProjectService.getAchievementItems();\n        if (projectAchievements != null) {\n            // get the time of tomorrow at 3pm\n            const tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\n            return {\n                id: this.AchievementService.getAvailableAchievementId(),\n                name: '',\n                description: '',\n                type: \"milestone\",\n                params: {\n                    nodeIds: [],\n                    targetDate: tomorrow.valueOf()\n                },\n                icon: {\n                    image: \"\"\n                },\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\n                isVisible: true\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Delete a milestone\n     * @param milestone the milestone to delete\n     */\n    deleteMilestone(milestone, $event) {\n        if (milestone) {\n            const title = milestone.name;\n            const label = this.$translate('DELETE_MILESTONE');\n            const msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\n            const yes = this.$translate('YES');\n            const cancel = this.$translate('CANCEL')\n\n            const confirm = this.$mdDialog.confirm()\n                .title(title)\n                .textContent(msg)\n                .ariaLabel(label)\n                .targetEvent($event)\n                .ok(yes)\n                .cancel(cancel);\n\n            this.$mdDialog.show(confirm).then(() => {\n                let projectAchievements = this.projectAchievements;\n                let index = -1;\n                for (let i = 0; i < projectAchievements.length; i++) {\n                    if (projectAchievements[i].id === milestone.id) {\n                        index = i;\n                        break;\n                    }\n                }\n\n                if (index > -1) {\n                    this.projectAchievements.splice(index, 1);\n                    this.saveProject();\n                }\n            }, () => {\n\n            });\n        }\n    }\n\n    saveMilestone(milestone) {\n        let index = -1;\n        for (let i = 0; i < this.projectAchievements.length; i++) {\n            if (this.projectAchievements[i].id === milestone.id) {\n                index = i;\n                this.projectAchievements[i] = milestone;\n                break;\n            }\n        }\n        if (index < 0) {\n            let projectAchievements = this.ProjectService.getAchievementItems();\n            if (projectAchievements && milestone) {\n                projectAchievements.push(milestone);\n            }\n        }\n        this.saveProject();\n        this.loadProjectAchievements();\n    }\n\n    /**\n     * Remove the temporary fields from the milestone objects and store\n     * them in temporary storage arrays so that we can load the fields back\n     * in later\n     */\n    clearTempFields() {\n        /*\n         * these array will store the temporary fields. the index of the arrays corresponds to the\n         * index of the project achievement. for example the percentageCompletedStorage value for\n         * the first project project achievement will be stored in\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\n         * project project achievement will be stored in this.percentageCompletedStorage[1].\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n\n        for (let projectAchievement of this.projectAchievements) {\n          // save the field values in the temporary storage arrays\n          this.workgroupsStorage.push(projectAchievement.workgroups);\n          this.numberOfStudentsCompletedStorage.push(projectAchievement.numberOfStudentsCompleted);\n          this.percentageCompletedStorage.push(projectAchievement.percentageCompleted);\n\n          // delete the field from the projectAchievement\n          delete projectAchievement.items;\n          delete projectAchievement.workgroups;\n          delete projectAchievement.numberOfStudentsCompleted;\n          delete projectAchievement.percentageCompleted;\n        }\n    }\n\n    /**\n     * Restore the temporary fields into the achievement objects\n     */\n    restoreTempFields() {\n      for (let a = 0; a < this.projectAchievements.length; a++) {\n        const projectAchievement = this.projectAchievements[a];\n        // set the fields back into the achievement object\n        projectAchievement.items = this.itemsTemporaryStorage[a];\n        projectAchievement.workgroups = this.workgroupsStorage[a];\n        projectAchievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n        projectAchievement.percentageCompleted = this.percentageCompletedStorage[a];\n      }\n      this.itemsTemporaryStorage = [];\n      this.workgroupsStorage = [];\n      this.numberOfStudentsCompletedStorage = [];\n      this.percentageCompletedStorage = [];\n    }\n\n    /**\n     * Save the project to the server\n     */\n    saveProject() {\n        this.clearTempFields();\n        this.ProjectService.saveProject();\n        this.restoreTempFields();\n    }\n\n    /**\n     * Get the user names for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return the user names in the workgroup\n     */\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\n    }\n\n    setWorkgroupsInCurrentPeriod() {\n        const workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\n        this.workgroupIds = [];\n\n        // filter out workgroups not in the current period\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\n            const currentId = workgroupIdsInRun[i];\n            const currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\n\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\n                this.workgroupIds.push(currentId);\n            }\n        }\n        this.numberOfStudentsInRun = this.workgroupIds.length;\n    }\n\n    /**\n     * Update the student completion information for this milestone\n     * @param achievementId the achievement id to update\n     */\n    updateMilestoneCompletion(achievementId) {\n      const projectAchievement = this.getProjectAchievementById(achievementId);\n      const achievementIdToStudentAchievements = this.AchievementService.getAchievementIdToStudentAchievementsMappings();\n      const studentAchievements = achievementIdToStudentAchievements[projectAchievement.id];\n      const workgroupIdsCompleted = [];\n      const achievementTimes = [];\n      const workgroupIdsNotCompleted = [];\n\n      for (let studentAchievement of studentAchievements) {\n        const currentWorkgroupId = studentAchievement.workgroupId;\n        // check if workgroup is in current period\n        if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\n          workgroupIdsCompleted.push(currentWorkgroupId);\n          achievementTimes.push(studentAchievement.achievementTime);\n        }\n      }\n\n      for (let workgroupId of this.workgroupIds) {\n        if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\n          workgroupIdsNotCompleted.push(workgroupId);\n        }\n      }\n\n      projectAchievement.workgroups = [];\n\n      for (let c = 0; c < workgroupIdsCompleted.length; c++) {\n        const workgroupId = workgroupIdsCompleted[c];\n        const achievementTime = achievementTimes[c];\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: achievementTime,\n          completed: true\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      /*\n       * loop through all the workgroups that have not\n       * completed the achievement\n       */\n      for (let workgroupId of workgroupIdsNotCompleted) {\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: null,\n          completed: false\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\n      projectAchievement.percentageCompleted =\n        parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n      if (projectAchievement.type === 'milestoneReport') {\n        if (this.isCompletionReached(projectAchievement)) {\n          const report = this.generateReport(projectAchievement);\n          if (report != null) {\n            projectAchievement.generatedReport = this.generateReport(projectAchievement);\n            this.setReportAvailable(projectAchievement, true);\n          } else {\n            delete projectAchievement.generatedReport;\n            this.setReportAvailable(projectAchievement, false);\n          }\n        }\n      }\n    }\n\n    isCompletionReached(projectAchievement) {\n      return projectAchievement.percentageCompleted >= projectAchievement.satisfyMinPercentage &&\n          projectAchievement.numberOfStudentsCompleted >= projectAchievement.satisfyMinNumWorkgroups;\n    }\n\n    setReportAvailable(projectAchievement, reportAvailable) {\n      projectAchievement.isReportAvailable = reportAvailable;\n    }\n\n    generateReport(projectAchievement) {\n      const reportVariables = projectAchievement.report.variables;\n      const reportVariableValues = {};\n      const aggregateAutoScores = {};\n      for (let satisfyCriterion of projectAchievement.satisfyCriteria) {\n        aggregateAutoScores[satisfyCriterion.componentId] = this.calculateAggregateAutoScores(satisfyCriterion.nodeId,\n            satisfyCriterion.componentId, this.periodId);\n      }\n\n      for (let reportVariable of reportVariables) {\n        const varValue = reportVariable.value;\n        if (varValue === 'annotation.score') {\n        } else if (varValue === 'annotation.autoScore') {\n        } else if (varValue === 'annotation.autoScore.ki' && reportVariable.function === 'average') {\n          reportVariableValues[reportVariable.name] = this.AnnotationService.getAverageAutoScore(\n              reportVariable.nodeId, reportVariable.componentId, this.periodId, 'ki');\n        } else if (varValue === 'annotation.autoScore.science' && reportVariable.function === 'average') {\n          reportVariableValues[reportVariable.name] = this.AnnotationService.getAverageAutoScore(\n              reportVariable.nodeId, reportVariable.componentId, this.periodId, 'science');\n        } else if (varValue === 'annotation.autoScore.engineering') {\n\n        }\n      }\n      const template = this.chooseTemplate(projectAchievement.report.templates, reportVariableValues);\n      let templateContent = template.content;\n      if (templateContent != null) {\n        for (let componentId of Object.keys(aggregateAutoScores)) {\n          const componentAggregate = aggregateAutoScores[componentId];\n          for (let subScoreId of Object.keys(componentAggregate)) {\n            const regex = new RegExp(`milestone-report-graph.*id=\"(${subScoreId})\"`, 'g');\n            const milestoneData = this.calculateMilestoneData(componentAggregate[subScoreId], subScoreId);\n            const milestoneCategories = this.calculateMilestoneCategories(subScoreId);\n            const categories = JSON.stringify(milestoneCategories).replace(/\\\"/g, '\\'');\n            const data = JSON.stringify(milestoneData).replace(/\\\"/g, '\\'');\n            templateContent = templateContent.replace(regex,\n                `$& categories=\\\"${categories}\\\" data=\\\"${data}\\\"`);\n          }\n        }\n      }\n      console.log(templateContent);\n      return templateContent;\n    }\n\n    calculateMilestoneCategories(subScoreId) {\n      if (subScoreId === 'ki') {\n        return ['0','1','2','3','4','5'];\n      } else {\n        return ['0','1','2','3'];\n      }\n    }\n\n    calculateMilestoneData(subScoreAggregate, subScoreId) {\n      const colors5Scores = ['black', 'red', 'orange', 'yellow', 'darkseagreen', 'green'];\n      const colors3Scores = ['black', 'red', 'yellow', 'green'];\n      const scoreKeys = Object.keys(subScoreAggregate.counts);\n      const scoreKeysSorted = scoreKeys.sort((a, b) => { return parseInt(a) - parseInt(b);});\n      const data = [];\n      for (let scoreKey of scoreKeysSorted) {\n        const scoreKeyCount = subScoreAggregate.counts[scoreKey];\n        const scoreKeyPercentage = Math.floor(100 * scoreKeyCount / subScoreAggregate.scoreCount);\n        const scoreKeyColor = subScoreId === 'ki' ? colors5Scores[scoreKey] : colors3Scores[scoreKey];\n        const scoreData = {'y': scoreKeyPercentage, 'color': scoreKeyColor };\n        data.push(scoreData);\n      }\n      return data;\n    }\n\n    calculateAggregateAutoScores(nodeId, componentId, periodId) {\n      const aggregate = {};\n      const scoreAnnotations = this.AnnotationService.getAllLatestScoreAnnotations(nodeId, componentId, periodId);\n      for (let scoreAnnotation of scoreAnnotations) {\n        if (scoreAnnotation.type === 'autoScore') {\n          this.addDataToAggregate(aggregate, scoreAnnotation);\n        }\n      }\n      return aggregate;\n    }\n\n    addDataToAggregate(aggregate, annotation) {\n      for (let subScore of annotation.data.scores) {\n        if (aggregate[subScore.id] == null) {\n          if (subScore.id === 'ki') {\n            aggregate[subScore.id] = {\n              scoreSum: 0,\n              scoreCount: 0,\n              counts: {\n                0: 0,\n                1: 0,\n                2: 0,\n                3: 0,\n                4: 0,\n                5: 0\n              },\n              average: 0\n            };\n          } else {\n            aggregate[subScore.id] = {\n              scoreSum: 0,\n              scoreCount: 0,\n              counts: {\n                0: 0,\n                1: 0,\n                2: 0,\n                3: 0\n              },\n              average: 0\n            };\n          }\n        }\n        const subScoreVal = subScore.score;\n        aggregate[subScore.id].counts[subScoreVal]++;\n        aggregate[subScore.id].scoreSum += subScoreVal;\n        aggregate[subScore.id].scoreCount++;\n        aggregate[subScore.id].average = aggregate[subScore.id].scoreSum / aggregate[subScore.id].scoreCount;\n      }\n      return aggregate;\n    }\n\n    chooseTemplate(templates, reportVariableValues) {\n      for (let template of templates) {\n        if (this.isTemplateMatch(template, reportVariableValues)) {\n          return template;\n        }\n      }\n      return {\n        content: null\n      };\n    }\n\n    isTemplateMatch(template, reportVariableValues) {\n      const matchedCriteria = [];\n      for (let satisfyCriterion of template.satisfyCriteria) {\n        if (this.isTemplateCriterionSatisfied(satisfyCriterion, reportVariableValues)) {\n          matchedCriteria.push(satisfyCriterion);\n        }\n      }\n      if (template.satisfyConditional === 'all') {\n        return matchedCriteria.length === template.satisfyCriteria.length;\n      } else if (template.satisfyConditional === 'any') {\n        return matchedCriteria.length > 0;\n      }\n    }\n\n    isTemplateCriterionSatisfied(satisfyCriterion, reportVariableValues) {\n      const targetValue = reportVariableValues[satisfyCriterion.targetVariable];\n      if (satisfyCriterion.function === 'greaterThanOrEqualTo') {\n        return targetValue >= satisfyCriterion.value;\n      } else if (satisfyCriterion.function === 'lessThanOrEqualTo') {\n        return targetValue <= satisfyCriterion.value;\n      }\n    }\n\n    getProjectAchievementById(achievementId) {\n      for (let projectAchievement of this.projectAchievements) {\n        if (projectAchievement.id === achievementId) {\n          return projectAchievement;\n        }\n      }\n      return {};\n    }\n\n    generateName(scoreName) {\n      if (scoreName === 'ki') {\n        return `name=\"KI Score\"`;\n      } else if (scoreName === 'science') {\n        return `name=\"Science Score\"`;\n      } else if (scoreName === 'engineering') {\n        return `name=\"Engineering Score\"`;\n      }\n    }\n\n    generateCategories(scoreName) {\n      if (scoreName === 'ki') {\n        return `categories=\"['1', '2', '3', '4', '5']\"`;\n      } else {\n        return `categories=\"['1', '2', '3']\"`;\n      }\n    }\n\n    generateData(scoreName) {\n      if (scoreName === 'ki') {\n        return `name=\"KI Score\"`;\n      } else if (scoreName === 'science') {\n        return `name=\"Science Score\"`;\n      } else if (scoreName === 'engineering') {\n        return `name=\"Engineering Score\"`;\n      }\n    }\n\n    /**\n     * Open a dialog with the milestone details (list with workgroups statuses\n     * for the given milestone)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    showMilestoneDetails(milestone, $event) {\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\"></milestone-details>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\n                    <md-button class=\"warn\"\n                               ng-click=\"delete()\"\n                               aria-label=\"{{ 'DELETE' | translate }}\">\n                        {{ 'DELETE' | translate }}\n                    </md-button>\n                    <span flex></span>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"edit()\"\n                               aria-label=\"{{ 'EDIT' | translate }}\">\n                        {{ 'EDIT' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"close()\"\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\n                            {{ 'CLOSE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone details in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\n                    $scope.milestone = milestone;\n                    $scope.event = $event;\n\n                    $scope.close = function() {\n                        $mdDialog.hide();\n                    };\n\n                    $scope.edit = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\n                    };\n\n                    $scope.delete = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\n                    };\n\n                    $scope.onShowWorkgroup = function(workgroup) {\n                        $mdDialog.hide();\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\n                        $state.go('root.nodeProgress');\n                    };\n                }\n            ]\n        }).then((data) => {\n            if (data && data.action && data.milestone) {\n                if (data.action === 'edit') {\n                    let milestone = angular.copy(data.milestone);\n                    this.editMilestone(milestone, data.$event);\n                } else if (data.action === 'delete') {\n                    this.deleteMilestone(data.milestone);\n                }\n            }\n        }, () => {});;\n    }\n\n    /**\n     * Open a dialog to edit milestone details (or create a new one)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    editMilestone(milestone, $event) {\n        let editMode = milestone ? true : false;\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\n\n        if (!editMode) {\n            milestone = this.createMilestone();\n        }\n\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"close()\"\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\n                        {{ 'CANCEL' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"save()\"\n                               aria-label=\"{{ 'SAVE' | translate }}\">\n                            {{ 'SAVE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone edit form in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                editMode: editMode,\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\n                    $scope.editMode = editMode;\n                    $scope.milestone = milestone;\n                    $scope.$event = $event;\n                    $scope.valid = editMode;\n\n                    $scope.$translate = $filter('translate');\n\n                    $scope.close = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\n                    };\n\n                    $scope.save = function() {\n                        if ($scope.valid) {\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\n                        } else {\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\n                        }\n                    };\n\n                    $scope.onChange = function(milestone, valid) {\n                        $scope.milestone = milestone;\n                        $scope.valid = valid;\n                    };\n                }\n            ]\n        }).then((data) => {\n            if (data) {\n                if (data.milestone && data.save) {\n                    this.saveMilestone(data.milestone);\n                }\n            }\n        }, () => {});\n    }\n}\n\nMilestonesController.$inject = [\n    '$injector',\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AchievementService',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService',\n    'moment'\n];\n\nexport default MilestonesController;\n"]}