{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","itemsTemporaryStorage","workgroupsStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadProjectAchievements","$on","event","args","studentAchievement","addOrUpdateStudentAchievement","updateMilestoneCompletion","achievementId","currentPeriod","projectAchievements","projectAchievement","id","getAchievements","isEnabled","items","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","milestone","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","i","length","splice","saveProject","push","workgroups","numberOfStudentsCompleted","a","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","getProjectAchievementById","achievementIdToStudentAchievements","getAchievementIdToStudentAchievementsMappings","studentAchievements","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","isCompletionReached","report","generateReport","generatedReport","setReportAvailable","satisfyMinPercentage","satisfyMinNumWorkgroups","reportAvailable","isReportAvailable","referencedComponents","getSatisfyCriteriaReferencedComponents","aggregateAutoScores","Object","values","referencedComponent","componentId","calculateAggregateAutoScores","template","chooseTemplate","templates","templateContent","content","keys","componentAggregate","subScoreId","regex","RegExp","milestoneData","calculateMilestoneData","milestoneCategories","calculateMilestoneCategories","categories","JSON","stringify","replace","data","components","satisfyCriteria","satisfyCriterion","component","subScoreAggregate","colors5Scores","colors3Scores","scoreKeys","counts","scoreKeysSorted","sort","b","scoreKey","scoreKeyCount","scoreKeyPercentage","Math","floor","scoreCount","scoreKeyColor","scoreData","aggregate","scoreAnnotations","getAllLatestScoreAnnotations","scoreAnnotation","addDataToAggregate","annotation","scores","subScore","scoreSum","average","subScoreVal","score","isTemplateMatch","matchedCriteria","isTemplateCriterionSatisfied","satisfyConditional","function","isPercentOfScoresGreaterThan","isPercentOfScoresGreaterThanOrEqualTo","isPercentOfScoresLessThan","isPercentOfScoresLessThanOrEqualTo","isPercentOfScoresEqualTo","isPercentOfScoresNotEqualTo","aggregateData","getAggregateData","possibleScores","getPossibleScores","sum","getGreaterThanSum","isPercentThresholdSatisfied","possibleScore","value","getGreaterThanOrEqualToSum","getLessThanSum","getLessThanOrEqualToSum","getEqualToSum","getNotEqualToSum","targetVariable","map","Number","percentOfScores","percentThreshold","scoreName","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","onVisitNodeGrading","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n    constructor($injector,\n                $filter,\n                $mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                AchievementService,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService,\n                moment) {\n\n        this.$injector = $injector;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AchievementService = AchievementService;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.moment = moment;\n        this.$translate = this.$filter('translate');\n\n        /*\n         * Arrays used to temporarily store milestone display values. We add\n         * fields to the milestone objects but we don't want to save those\n         * fields when we save the milestones to the server. We remove the\n         * fields from the milestones and then save the milestones to the\n         * server. After we save the milestones, we add the fields back into\n         * the milestones.\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n        this.setWorkgroupsInCurrentPeriod();\n        this.loadProjectAchievements();\n\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\n          if (args) {\n            const studentAchievement = args.studentAchievement;\n            this.AchievementService.addOrUpdateStudentAchievement(studentAchievement);\n            this.updateMilestoneCompletion(studentAchievement.achievementId);\n          }\n        });\n\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            this.periodId = args.currentPeriod.periodId;\n\n            // update the completion status for all the project projectAchievements\n            for (let projectAchievement of this.projectAchievements) {\n              this.setWorkgroupsInCurrentPeriod();\n              this.updateMilestoneCompletion(projectAchievement.id);\n            }\n        });\n    }\n\n    /**\n     * Load the projectAchievements and perform additional calculations\n     */\n    loadProjectAchievements() {\n      const projectAchievements = this.ProjectService.getAchievements();\n      if (projectAchievements.isEnabled) {\n        this.projectAchievements = projectAchievements.items;\n        for (let projectAchievement of this.projectAchievements) {\n          this.updateMilestoneCompletion(projectAchievement.id);\n\n          // get all the activities and steps in the project\n          projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n          if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n            /*\n             * loop through all the node ids that are required\n             * to be completed for this project achievement\n             */\n            for (let nodeId of projectAchievement.params.nodeIds) {\n              if (projectAchievement.items[nodeId] != null) {\n                projectAchievement.items[nodeId].checked = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Check if the given milestone date is before the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isBeforeDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isBefore(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Check if the given milestone date is the same as the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isSameDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isSame(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Create a new milestone\n     * @return a milestone object\n     */\n    createMilestone() {\n        let projectAchievements = this.ProjectService.getAchievementItems();\n        if (projectAchievements != null) {\n            // get the time of tomorrow at 3pm\n            const tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\n            return {\n                id: this.AchievementService.getAvailableAchievementId(),\n                name: '',\n                description: '',\n                type: \"milestone\",\n                params: {\n                    nodeIds: [],\n                    targetDate: tomorrow.valueOf()\n                },\n                icon: {\n                    image: \"\"\n                },\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\n                isVisible: true\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Delete a milestone\n     * @param milestone the milestone to delete\n     */\n    deleteMilestone(milestone, $event) {\n        if (milestone) {\n            const title = milestone.name;\n            const label = this.$translate('DELETE_MILESTONE');\n            const msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\n            const yes = this.$translate('YES');\n            const cancel = this.$translate('CANCEL')\n\n            const confirm = this.$mdDialog.confirm()\n                .title(title)\n                .textContent(msg)\n                .ariaLabel(label)\n                .targetEvent($event)\n                .ok(yes)\n                .cancel(cancel);\n\n            this.$mdDialog.show(confirm).then(() => {\n                let projectAchievements = this.projectAchievements;\n                let index = -1;\n                for (let i = 0; i < projectAchievements.length; i++) {\n                    if (projectAchievements[i].id === milestone.id) {\n                        index = i;\n                        break;\n                    }\n                }\n\n                if (index > -1) {\n                    this.projectAchievements.splice(index, 1);\n                    this.saveProject();\n                }\n            }, () => {\n\n            });\n        }\n    }\n\n    saveMilestone(milestone) {\n        let index = -1;\n        for (let i = 0; i < this.projectAchievements.length; i++) {\n            if (this.projectAchievements[i].id === milestone.id) {\n                index = i;\n                this.projectAchievements[i] = milestone;\n                break;\n            }\n        }\n        if (index < 0) {\n            let projectAchievements = this.ProjectService.getAchievementItems();\n            if (projectAchievements && milestone) {\n                projectAchievements.push(milestone);\n            }\n        }\n        this.saveProject();\n        this.loadProjectAchievements();\n    }\n\n    /**\n     * Remove the temporary fields from the milestone objects and store\n     * them in temporary storage arrays so that we can load the fields back\n     * in later\n     */\n    clearTempFields() {\n        /*\n         * these array will store the temporary fields. the index of the arrays corresponds to the\n         * index of the project achievement. for example the percentageCompletedStorage value for\n         * the first project project achievement will be stored in\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\n         * project project achievement will be stored in this.percentageCompletedStorage[1].\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n\n        for (let projectAchievement of this.projectAchievements) {\n          // save the field values in the temporary storage arrays\n          this.workgroupsStorage.push(projectAchievement.workgroups);\n          this.numberOfStudentsCompletedStorage.push(projectAchievement.numberOfStudentsCompleted);\n          this.percentageCompletedStorage.push(projectAchievement.percentageCompleted);\n\n          // delete the field from the projectAchievement\n          delete projectAchievement.items;\n          delete projectAchievement.workgroups;\n          delete projectAchievement.numberOfStudentsCompleted;\n          delete projectAchievement.percentageCompleted;\n        }\n    }\n\n    /**\n     * Restore the temporary fields into the achievement objects\n     */\n    restoreTempFields() {\n      for (let a = 0; a < this.projectAchievements.length; a++) {\n        const projectAchievement = this.projectAchievements[a];\n        // set the fields back into the achievement object\n        projectAchievement.items = this.itemsTemporaryStorage[a];\n        projectAchievement.workgroups = this.workgroupsStorage[a];\n        projectAchievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n        projectAchievement.percentageCompleted = this.percentageCompletedStorage[a];\n      }\n      this.itemsTemporaryStorage = [];\n      this.workgroupsStorage = [];\n      this.numberOfStudentsCompletedStorage = [];\n      this.percentageCompletedStorage = [];\n    }\n\n    /**\n     * Save the project to the server\n     */\n    saveProject() {\n        this.clearTempFields();\n        this.ProjectService.saveProject();\n        this.restoreTempFields();\n    }\n\n    /**\n     * Get the user names for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return the user names in the workgroup\n     */\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\n    }\n\n    setWorkgroupsInCurrentPeriod() {\n        const workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\n        this.workgroupIds = [];\n\n        // filter out workgroups not in the current period\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\n            const currentId = workgroupIdsInRun[i];\n            const currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\n\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\n                this.workgroupIds.push(currentId);\n            }\n        }\n        this.numberOfStudentsInRun = this.workgroupIds.length;\n    }\n\n    /**\n     * Update the student completion information for this milestone\n     * @param achievementId the achievement id to update\n     */\n    updateMilestoneCompletion(achievementId) {\n      const projectAchievement = this.getProjectAchievementById(achievementId);\n      const achievementIdToStudentAchievements = this.AchievementService.getAchievementIdToStudentAchievementsMappings();\n      const studentAchievements = achievementIdToStudentAchievements[projectAchievement.id];\n      const workgroupIdsCompleted = [];\n      const achievementTimes = [];\n      const workgroupIdsNotCompleted = [];\n\n      for (let studentAchievement of studentAchievements) {\n        const currentWorkgroupId = studentAchievement.workgroupId;\n        // check if workgroup is in current period\n        if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\n          workgroupIdsCompleted.push(currentWorkgroupId);\n          achievementTimes.push(studentAchievement.achievementTime);\n        }\n      }\n\n      for (let workgroupId of this.workgroupIds) {\n        if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\n          workgroupIdsNotCompleted.push(workgroupId);\n        }\n      }\n\n      projectAchievement.workgroups = [];\n\n      for (let c = 0; c < workgroupIdsCompleted.length; c++) {\n        const workgroupId = workgroupIdsCompleted[c];\n        const achievementTime = achievementTimes[c];\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: achievementTime,\n          completed: true\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      /*\n       * loop through all the workgroups that have not\n       * completed the achievement\n       */\n      for (let workgroupId of workgroupIdsNotCompleted) {\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: null,\n          completed: false\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\n      projectAchievement.percentageCompleted =\n        parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n      if (projectAchievement.type === 'milestoneReport') {\n        if (this.isCompletionReached(projectAchievement)) {\n          const report = this.generateReport(projectAchievement);\n          if (report != null) {\n            projectAchievement.generatedReport = this.generateReport(projectAchievement);\n            this.setReportAvailable(projectAchievement, true);\n          } else {\n            delete projectAchievement.generatedReport;\n            this.setReportAvailable(projectAchievement, false);\n          }\n        } else {\n          this.setReportAvailable(projectAchievement, false);\n        }\n      }\n    }\n\n    isCompletionReached(projectAchievement) {\n      return projectAchievement.percentageCompleted >= projectAchievement.satisfyMinPercentage &&\n          projectAchievement.numberOfStudentsCompleted >= projectAchievement.satisfyMinNumWorkgroups;\n    }\n\n    setReportAvailable(projectAchievement, reportAvailable) {\n      projectAchievement.isReportAvailable = reportAvailable;\n    }\n\n    generateReport(projectAchievement) {\n      const referencedComponents = this.getSatisfyCriteriaReferencedComponents(projectAchievement);\n      const aggregateAutoScores = {};\n      for (const referencedComponent of Object.values(referencedComponents)) {\n        const nodeId = referencedComponent.nodeId;\n        const componentId = referencedComponent.componentId;\n        aggregateAutoScores[componentId] = this.calculateAggregateAutoScores(nodeId, componentId, this.periodId);\n      }\n      const template = this.chooseTemplate(projectAchievement.report.templates, aggregateAutoScores);\n      let templateContent = template.content;\n      if (templateContent != null) {\n        for (let componentId of Object.keys(aggregateAutoScores)) {\n          const componentAggregate = aggregateAutoScores[componentId];\n          for (let subScoreId of Object.keys(componentAggregate)) {\n            const regex = new RegExp(`milestone-report-graph.*id=\"(${subScoreId})\"`, 'g');\n            const milestoneData = this.calculateMilestoneData(componentAggregate[subScoreId], subScoreId);\n            const milestoneCategories = this.calculateMilestoneCategories(subScoreId);\n            const categories = JSON.stringify(milestoneCategories).replace(/\\\"/g, '\\'');\n            const data = JSON.stringify(milestoneData).replace(/\\\"/g, '\\'');\n            templateContent = templateContent.replace(regex,\n                `$& categories=\\\"${categories}\\\" data=\\\"${data}\\\"`);\n          }\n        }\n      }\n      return templateContent;\n    }\n\n    getSatisfyCriteriaReferencedComponents(projectAchievement) {\n      const components = {};\n      const templates = projectAchievement.report.templates;\n      for (const template of templates) {\n        for (const satisfyCriterion of template.satisfyCriteria) {\n          const nodeId = satisfyCriterion.nodeId;\n          const componentId = satisfyCriterion.componentId;\n          const component = {\n            nodeId: nodeId,\n            componentId: componentId\n          };\n          components[nodeId + '_' + componentId] = component;\n        }\n      }\n      return components;\n    }\n\n    calculateMilestoneCategories(subScoreId) {\n      if (subScoreId === 'ki') {\n        return ['1','2','3','4','5'];\n      } else {\n        return ['0','1','2','3'];\n      }\n    }\n\n    calculateMilestoneData(subScoreAggregate, subScoreId) {\n      const colors5Scores = ['red', 'orange', 'yellow', 'darkseagreen', 'green'];\n      const colors3Scores = ['red', 'yellow', 'green'];\n      const scoreKeys = Object.keys(subScoreAggregate.counts);\n      const scoreKeysSorted = scoreKeys.sort((a, b) => { return parseInt(a) - parseInt(b);});\n      const data = [];\n      for (let scoreKey of scoreKeysSorted) {\n        const scoreKeyCount = subScoreAggregate.counts[scoreKey];\n        const scoreKeyPercentage = Math.floor(100 * scoreKeyCount / subScoreAggregate.scoreCount);\n        const scoreKeyColor = subScoreId === 'ki' ? colors5Scores[scoreKey] : colors3Scores[scoreKey];\n        const scoreData = {'y': scoreKeyPercentage, 'color': scoreKeyColor, 'count': scoreKeyCount };\n        data.push(scoreData);\n      }\n      return data;\n    }\n\n    calculateAggregateAutoScores(nodeId, componentId, periodId) {\n      const aggregate = {};\n      const scoreAnnotations = this.AnnotationService.getAllLatestScoreAnnotations(nodeId, componentId, periodId);\n      for (let scoreAnnotation of scoreAnnotations) {\n        if (scoreAnnotation.type === 'autoScore') {\n          this.addDataToAggregate(aggregate, scoreAnnotation);\n        }\n      }\n      return aggregate;\n    }\n\n    addDataToAggregate(aggregate, annotation) {\n      for (let subScore of annotation.data.scores) {\n        if (aggregate[subScore.id] == null) {\n          if (subScore.id === 'ki') {\n            aggregate[subScore.id] = {\n              scoreSum: 0,\n              scoreCount: 0,\n              counts: {\n                1: 0,\n                2: 0,\n                3: 0,\n                4: 0,\n                5: 0\n              },\n              average: 0\n            };\n          } else {\n            aggregate[subScore.id] = {\n              scoreSum: 0,\n              scoreCount: 0,\n              counts: {\n                0: 0,\n                1: 0,\n                2: 0,\n                3: 0\n              },\n              average: 0\n            };\n          }\n        }\n        const subScoreVal = subScore.score;\n        aggregate[subScore.id].counts[subScoreVal]++;\n        aggregate[subScore.id].scoreSum += subScoreVal;\n        aggregate[subScore.id].scoreCount++;\n        aggregate[subScore.id].average = aggregate[subScore.id].scoreSum / aggregate[subScore.id].scoreCount;\n      }\n      return aggregate;\n    }\n\n    chooseTemplate(templates, aggregateAutoScores) {\n      for (let template of templates) {\n        if (this.isTemplateMatch(template, aggregateAutoScores)) {\n          return template;\n        }\n      }\n      return {\n        content: null\n      };\n    }\n\n    isTemplateMatch(template, aggregateAutoScores) {\n      const matchedCriteria = [];\n      for (let satisfyCriterion of template.satisfyCriteria) {\n        if (this.isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores)) {\n          matchedCriteria.push(satisfyCriterion);\n        }\n      }\n      if (template.satisfyConditional === 'all') {\n        return matchedCriteria.length === template.satisfyCriteria.length;\n      } else if (template.satisfyConditional === 'any') {\n        return matchedCriteria.length > 0;\n      }\n    }\n\n    isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores) {\n      if (satisfyCriterion.function === 'percentOfScoresGreaterThan') {\n        return this.isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores);\n      } else if (satisfyCriterion.function === 'percentOfScoresGreaterThanOrEqualTo') {\n        return this.isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\n      } else if (satisfyCriterion.function === 'percentOfScoresLessThan') {\n        return this.isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores);\n      } else if (satisfyCriterion.function === 'percentOfScoresLessThanOrEqualTo') {\n        return this.isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\n      } else if (satisfyCriterion.function === 'percentOfScoresEqualTo') {\n        return this.isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores);\n      } else if (satisfyCriterion.function === 'percentOfScoresNotEqualTo') {\n        return this.isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores);\n      }\n    }\n\n    isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore > satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore >= satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getLessThanSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getLessThanSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore < satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore <= satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore === satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores) {\n      const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n      const possibleScores = this.getPossibleScores(aggregateData);\n      const sum = this.getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n      return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n    }\n\n    getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n      let sum = 0;\n      for (const possibleScore of possibleScores) {\n        if (possibleScore !== satisfyCriterion.value) {\n          sum += aggregateData.counts[possibleScore];\n        }\n      }\n      return sum;\n    }\n\n    getAggregateData(satisfyCriterion, aggregateAutoScores) {\n      const component = aggregateAutoScores[satisfyCriterion.componentId];\n      return component[satisfyCriterion.targetVariable];\n    }\n\n    getPossibleScores(aggregateData) {\n      return Object.keys(aggregateData.counts).map(Number).sort();\n    }\n\n    isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum) {\n      const percentOfScores = 100 * sum / aggregateData.scoreCount;\n      return percentOfScores >= satisfyCriterion.percentThreshold;\n    }\n\n    getProjectAchievementById(achievementId) {\n      for (let projectAchievement of this.projectAchievements) {\n        if (projectAchievement.id === achievementId) {\n          return projectAchievement;\n        }\n      }\n      return {};\n    }\n\n    generateName(scoreName) {\n      if (scoreName === 'ki') {\n        return `name=\"KI Score\"`;\n      } else if (scoreName === 'science') {\n        return `name=\"Science Score\"`;\n      } else if (scoreName === 'engineering') {\n        return `name=\"Engineering Score\"`;\n      }\n    }\n\n    generateCategories(scoreName) {\n      if (scoreName === 'ki') {\n        return `categories=\"['1', '2', '3', '4', '5']\"`;\n      } else {\n        return `categories=\"['0', '1', '2', '3']\"`;\n      }\n    }\n\n    generateData(scoreName) {\n      if (scoreName === 'ki') {\n        return `name=\"KI Score\"`;\n      } else if (scoreName === 'science') {\n        return `name=\"Science Score\"`;\n      } else if (scoreName === 'engineering') {\n        return `name=\"Engineering Score\"`;\n      }\n    }\n\n    /**\n     * Open a dialog with the milestone details (list with workgroups statuses\n     * for the given milestone)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    showMilestoneDetails(milestone, $event) {\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\n        let template =\n            `<md-dialog class=\"dialog--wider\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\" on-visit-node-grading=\"onVisitNodeGrading()\"></milestone-details>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\n                    <md-button class=\"warn\"\n                               ng-click=\"delete()\"\n                               aria-label=\"{{ 'DELETE' | translate }}\">\n                        {{ 'DELETE' | translate }}\n                    </md-button>\n                    <span flex></span>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"edit()\"\n                               aria-label=\"{{ 'EDIT' | translate }}\">\n                        {{ 'EDIT' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"close()\"\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\n                            {{ 'CLOSE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone details in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\n                    $scope.milestone = milestone;\n                    $scope.event = $event;\n\n                    $scope.close = function() {\n                        $mdDialog.hide();\n                    };\n\n                    $scope.edit = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\n                    };\n\n                    $scope.delete = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\n                    };\n\n                    $scope.onShowWorkgroup = function(workgroup) {\n                        $mdDialog.hide();\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\n                        $state.go('root.nodeProgress');\n                    };\n\n                    $scope.onVisitNodeGrading = function() {\n                      $mdDialog.hide();\n                    }\n                }\n            ]\n        }).then((data) => {\n            if (data && data.action && data.milestone) {\n                if (data.action === 'edit') {\n                    let milestone = angular.copy(data.milestone);\n                    this.editMilestone(milestone, data.$event);\n                } else if (data.action === 'delete') {\n                    this.deleteMilestone(data.milestone);\n                }\n            }\n        }, () => {});;\n    }\n\n    /**\n     * Open a dialog to edit milestone details (or create a new one)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    editMilestone(milestone, $event) {\n        let editMode = milestone ? true : false;\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\n\n        if (!editMode) {\n            milestone = this.createMilestone();\n        }\n\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"close()\"\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\n                        {{ 'CANCEL' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"save()\"\n                               aria-label=\"{{ 'SAVE' | translate }}\">\n                            {{ 'SAVE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone edit form in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                editMode: editMode,\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\n                    $scope.editMode = editMode;\n                    $scope.milestone = milestone;\n                    $scope.$event = $event;\n                    $scope.valid = editMode;\n\n                    $scope.$translate = $filter('translate');\n\n                    $scope.close = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\n                    };\n\n                    $scope.save = function() {\n                        if ($scope.valid) {\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\n                        } else {\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\n                        }\n                    };\n\n                    $scope.onChange = function(milestone, valid) {\n                        $scope.milestone = milestone;\n                        $scope.valid = valid;\n                    };\n                }\n            ]\n        }).then((data) => {\n            if (data) {\n                if (data.milestone && data.save) {\n                    this.saveMilestone(data.milestone);\n                }\n            }\n        }, () => {});\n    }\n}\n\nMilestonesController.$inject = [\n    '$injector',\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AchievementService',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService',\n    'moment'\n];\n\nexport default MilestonesController;\n"]}