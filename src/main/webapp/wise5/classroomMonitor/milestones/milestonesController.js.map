{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","calendarIsOpenTemporaryStorage","itemsTemporaryStorage","workgroupsStorage","editStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","showStudentsStorage","timeDiffStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadAchievements","$on","event","args","studentAchievement","addOrUpdateAchievement","data","id","updateMilestoneCompletion","currentPeriod","i","achievements","length","achievementsObject","getAchievements","isEnabled","items","a","projectAchievement","makeCopyOfJSONObject","idToOrder","params","nodeIds","n","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","milestone","projectAchievements","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","splice","saveProject","achievementId","push","achievement","workgroups","numberOfStudentsCompleted","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","achievementIdToAchievements","getAchievementIdToAchievementsMappings","studentAchievementsForAchievementId","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","s","currentWorkgroupId","indexOf","achievementTime","w","c","workgroupObject","displayNames","completed","parseInt","template","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\r\n\r\nclass MilestonesController {\r\n\r\n    constructor($injector,\r\n                $filter,\r\n                $mdDialog,\r\n                $rootScope,\r\n                $scope,\r\n                $state,\r\n                AchievementService,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService,\r\n                UtilService,\r\n                moment) {\r\n\r\n        this.$injector = $injector;\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.AchievementService = AchievementService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n        this.UtilService = UtilService;\r\n        this.moment = moment;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        /*\r\n         * Arrays used to temporarily store milestone display values. We add\r\n         * fields to the milestone objects but we don't want to save those\r\n         * fields when we save the milestones to the server. We remove the\r\n         * fields from the milestones and then save the milestones to the\r\n         * server. After we save the milestones, we add the fields back into\r\n         * the milestones.\r\n         */\r\n        this.calendarIsOpenTemporaryStorage = [];\r\n        this.itemsTemporaryStorage = [];\r\n        this.workgroupsStorage = [];\r\n        this.editStorage = [];\r\n        this.numberOfStudentsCompletedStorage = [];\r\n        this.percentageCompletedStorage = [];\r\n        this.showStudentsStorage = [];\r\n        this.timeDiffStorage = [];\r\n\r\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\r\n        this.setWorkgroupsInCurrentPeriod();\r\n\r\n        // load the achievements and perform additional calculations\r\n        this.loadAchievements();\r\n\r\n        // listen for the newStudentAchievement event\r\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\r\n\r\n            if (args) {\r\n                // get the student achievement that was saved to the server\r\n                let studentAchievement = args.studentAchievement;\r\n\r\n                if (studentAchievement != null) {\r\n\r\n                    // add the student achievement to our local copy of the student achievements\r\n                    this.AchievementService.addOrUpdateAchievement(studentAchievement);\r\n\r\n                    if (studentAchievement.data != null && studentAchievement.data.id != null) {\r\n                        // update the milestone in the UI with the new student achievement information\r\n                        this.updateMilestoneCompletion(studentAchievement.data.id);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for current period changed event\r\n         */\r\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\r\n            this.periodId = args.currentPeriod.periodId;\r\n\r\n            // update the completion status for all the project achievements\r\n            for (let i = 0; i < this.achievements.length; i++) {\r\n                this.setWorkgroupsInCurrentPeriod();\r\n                this.updateMilestoneCompletion(this.achievements[i].id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the achievements and perform additional calculations\r\n     */\r\n    loadAchievements() {\r\n\r\n        // get the project achievements object\r\n        var achievementsObject = this.ProjectService.getAchievements();\r\n\r\n        if (achievementsObject != null) {\r\n\r\n            if (achievementsObject.isEnabled) {\r\n\r\n                if (achievementsObject.items) {\r\n\r\n                    // get the project achievements\r\n                    this.achievements = achievementsObject.items;\r\n\r\n                    // loop through all the project achievements\r\n                    for (var a = 0; a < this.achievements.length; a++) {\r\n\r\n                        // get a project achievement\r\n                        var projectAchievement = this.achievements[a];\r\n\r\n                        if (projectAchievement != null) {\r\n\r\n                            // update the student completion information for this milestone\r\n                            this.updateMilestoneCompletion(projectAchievement.id);\r\n\r\n                            // get all the activities and steps in the project\r\n                            projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\r\n\r\n                            if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\r\n\r\n                                /*\r\n                                 * loop through all the node ids that are required\r\n                                 * to be completed for this achievement\r\n                                 */\r\n                                for (var n = 0; n < projectAchievement.params.nodeIds.length; n++) {\r\n                                    var nodeId = projectAchievement.params.nodeIds[n];\r\n\r\n                                    if (projectAchievement.items[nodeId] != null) {\r\n                                        // check the checkbox corresponding to the node id\r\n                                        projectAchievement.items[nodeId].checked = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the given milestone date is before the current day (and\r\n     * milestone completion is less than 100%)\r\n     * @param date a date string or object\r\n     * @param percentageCompleted Number percent completed\r\n     * @return Boolean whether given date is before today\r\n     */\r\n    isBeforeDay(date, percentageCompleted) {\r\n        let result = false;\r\n\r\n        if (date && percentageCompleted < 100) {\r\n            result = this.moment(date).isBefore(this.moment(), 'day');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if the given milestone date is the same as the current day (and\r\n     * milestone completion is less than 100%)\r\n     * @param date a date string or object\r\n     * @param percentageCompleted Number percent completed\r\n     * @return Boolean whether given date is before today\r\n     */\r\n    isSameDay(date, percentageCompleted) {\r\n        let result = false;\r\n\r\n        if (date && percentageCompleted < 100) {\r\n            result = this.moment(date).isSame(this.moment(), 'day');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new milestone\r\n     * @return a milestone object\r\n     */\r\n    createMilestone() {\r\n        let milestone = null;\r\n\r\n        // get the project achievements\r\n        let projectAchievements = this.ProjectService.getAchievementItems();\r\n\r\n        if (projectAchievements != null) {\r\n\r\n            // get the time of tomorrow at 3pm\r\n            let tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\r\n\r\n            // create a new milestone object\r\n            milestone = {\r\n                id: this.AchievementService.getAvailableAchievementId(),\r\n                name: '',\r\n                description: '',\r\n                type: \"milestone\",\r\n                params: {\r\n                    nodeIds: [],\r\n                    targetDate: tomorrow.valueOf()\r\n                },\r\n                icon: {\r\n                    image: \"\"\r\n                },\r\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\r\n                isVisible: true\r\n            };\r\n        }\r\n\r\n        return milestone;\r\n    }\r\n\r\n    /**\r\n     * Delete a milestone\r\n     * @param milestone the milestone to delete\r\n     */\r\n    deleteMilestone(milestone, $event) {\r\n\r\n        if (milestone) {\r\n            let title = milestone.name;\r\n            let label = this.$translate('DELETE_MILESTONE');\r\n            let msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\r\n            let yes = this.$translate('YES');\r\n            let cancel = this.$translate('CANCEL')\r\n\r\n            let confirm = this.$mdDialog.confirm()\r\n                .title(title)\r\n                .textContent(msg)\r\n                .ariaLabel(label)\r\n                .targetEvent($event)\r\n                .ok(yes)\r\n                .cancel(cancel);\r\n\r\n            this.$mdDialog.show(confirm).then(() => {\r\n                let achievements = this.achievements;\r\n                let index = -1;\r\n\r\n                // find the matching achievement index\r\n                for (let i = 0; i < achievements.length; i++) {\r\n                    if (achievements[i].id === milestone.id) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (index > -1) {\r\n                    // remove the milestone\r\n                    this.achievements.splice(index, 1);\r\n\r\n                    // save the project to the server\r\n                    this.saveProject();\r\n                }\r\n            }, () => {\r\n            });\r\n        }\r\n    }\r\n\r\n    saveMilestone(milestone) {\r\n        let index = -1;\r\n\r\n        for (let i = 0; i < this.achievements.length; i++) {\r\n            let achievementId = this.achievements[i].id;\r\n\r\n            if (milestone.id === achievementId) {\r\n                index = i;\r\n                this.achievements[i] = milestone;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index < 0) {\r\n            // get the project achievements\r\n            let projectAchievements = this.ProjectService.getAchievementItems();\r\n\r\n            if (projectAchievements && milestone) {\r\n\r\n                // add the milestone object to the array of achievements\r\n                projectAchievements.push(milestone);\r\n            }\r\n        }\r\n\r\n        // save the project\r\n        this.saveProject();\r\n\r\n        // reload the achievements\r\n        this.loadAchievements();\r\n    }\r\n\r\n    /**\r\n     * Remove the temporary fields from the milestone objects and store\r\n     * them in temporary storage arrays so that we can load the fields back\r\n     * in later\r\n     */\r\n    clearTempFields() {\r\n\r\n        /*\r\n         * these array will store the temporary fields. the index of the arrays\r\n         * corresponds to the index of the achievement. for example the percentageCompletedStorage\r\n         * value for the first achievement will be stored in\r\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\r\n         * achievement will be stored in this.percentageCompletedStorage[1].\r\n         */\r\n        this.itemsTemporaryStorage = [];\r\n        this.workgroupsStorage = [];\r\n        this.numberOfStudentsCompletedStorage = [];\r\n        this.percentageCompletedStorage = [];\r\n\r\n        // loop through all the achievements\r\n        for (var a = 0; a < this.achievements.length; a++) {\r\n\r\n            // get an achievement\r\n            var achievement = this.achievements[a];\r\n\r\n            // save the field values in the temprary storage arrays\r\n            this.workgroupsStorage.push(achievement.workgroups);\r\n            this.numberOfStudentsCompletedStorage.push(achievement.numberOfStudentsCompleted);\r\n            this.percentageCompletedStorage.push(achievement.percentageCompleted);\r\n\r\n            // delete the field from the achievement\r\n            delete achievement.items;\r\n            delete achievement.workgroups;\r\n            delete achievement.numberOfStudentsCompleted;\r\n            delete achievement.percentageCompleted;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore the temporary fields into the achievement objects\r\n     */\r\n    restoreTempFields() {\r\n\r\n        // loop through all the achievements\r\n        for (var a = 0; a < this.achievements.length; a++) {\r\n\r\n            // get an achievement\r\n            var achievement = this.achievements[a];\r\n\r\n            // set the fields back into the achievement object\r\n            achievement.items = this.itemsTemporaryStorage[a];\r\n            achievement.workgroups = this.workgroupsStorage[a];\r\n            achievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\r\n            achievement.percentageCompleted = this.percentageCompletedStorage[a];\r\n        }\r\n\r\n        // clear the temporary storage arrays\r\n        this.itemsTemporaryStorage = [];\r\n        this.workgroupsStorage = [];\r\n        this.numberOfStudentsCompletedStorage = [];\r\n        this.percentageCompletedStorage = [];\r\n    }\r\n\r\n    /**\r\n     * Save the project to the server\r\n     */\r\n    saveProject() {\r\n\r\n        // clear the temp fields and remember them\r\n        this.clearTempFields();\r\n\r\n        // save the project to the server\r\n        this.ProjectService.saveProject();\r\n\r\n        // restore the temp fields\r\n        this.restoreTempFields();\r\n    }\r\n\r\n    /**\r\n     * Get the user names for a workgroup id\r\n     * @param workgroupId the workgroup id\r\n     * @return the user names in the workgroup\r\n     */\r\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\r\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    setWorkgroupsInCurrentPeriod() {\r\n        // get the workgroup ids\r\n        let workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\r\n        this.workgroupIds = [];\r\n\r\n        // filter out workgroups not in the current period\r\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\r\n            let currentId = workgroupIdsInRun[i];\r\n            let currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\r\n\r\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\r\n                this.workgroupIds.push(currentId);\r\n            }\r\n        }\r\n\r\n        // the number of students in the run\r\n        this.numberOfStudentsInRun = this.workgroupIds.length;\r\n    }\r\n\r\n    /**\r\n     * Update the student completion information for this milestone\r\n     * @param achievementId the achievement id to update\r\n     */\r\n    updateMilestoneCompletion(achievementId) {\r\n        if (achievementId != null) {\r\n\r\n            // loop through all the project achievements\r\n            for (var a = 0; a < this.achievements.length; a++) {\r\n                var projectAchievement = this.achievements[a];\r\n\r\n                if (achievementId == projectAchievement.id) {\r\n                    // we have found the milestone we want to update\r\n\r\n                    // get the student achievements\r\n                    var achievementIdToAchievements = this.AchievementService.getAchievementIdToAchievementsMappings();\r\n\r\n                    // get the student achievements for this achievement id\r\n                    var studentAchievementsForAchievementId = achievementIdToAchievements[projectAchievement.id];\r\n\r\n                    var workgroupIdsCompleted = [];\r\n                    var achievementTimes = [];\r\n                    var workgroupIdsNotCompleted = [];\r\n\r\n                    /*\r\n                     * loop through all the student achievements for\r\n                     * this achievement id\r\n                     */\r\n                    for (var s = 0; s < studentAchievementsForAchievementId.length; s++) {\r\n                        var studentAchievement = studentAchievementsForAchievementId[s];\r\n\r\n                        if (studentAchievement != null) {\r\n                            let currentWorkgroupId = studentAchievement.workgroupId;\r\n\r\n                            // check if workgroup is in current period\r\n                            if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\r\n                                /*\r\n                                 * add the workgroup id to the array of workgroup ids that\r\n                                 * have completed the achievement\r\n                                 */\r\n                                workgroupIdsCompleted.push(currentWorkgroupId);\r\n\r\n                                // add the achievement time to the achievement times array\r\n                                achievementTimes.push(studentAchievement.achievementTime);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * loop through all the workgroup ids to find the\r\n                     * workgroup ids that have not completed the\r\n                     * achievement\r\n                     */\r\n                     for (var w = 0; w < this.workgroupIds.length; w++) {\r\n                        var workgroupId = this.workgroupIds[w];\r\n                        if (workgroupIdsCompleted.indexOf(workgroupId) == -1) {\r\n                            // this workgroup has not completed the achievement\r\n\r\n                            /*\r\n                             * add the workgroup id to the array of workgroup ids that\r\n                             * have not completed the achievement\r\n                             */\r\n                            workgroupIdsNotCompleted.push(workgroupId);\r\n                        }\r\n                    }\r\n\r\n                    projectAchievement.workgroups = [];\r\n\r\n                    /*\r\n                     * loop through all the workgroups that have\r\n                     * completed the achievement\r\n                     */\r\n                    for (var c = 0; c < workgroupIdsCompleted.length; c++) {\r\n                        var workgroupId = workgroupIdsCompleted[c];\r\n                        var achievementTime = achievementTimes[c];\r\n\r\n                        /*\r\n                         * create an object used for displaying\r\n                         * information about the workgroup\r\n                         */\r\n                        var workgroupObject = {\r\n                            workgroupId: workgroupId,\r\n                            displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\r\n                            achievementTime: achievementTime,\r\n                            completed: true\r\n                        };\r\n\r\n                        projectAchievement.workgroups.push(workgroupObject);\r\n                    }\r\n\r\n                    /*\r\n                     * loop through all the workgroups that have not\r\n                     * completed the achievement\r\n                     */\r\n                    for (var n = 0; n < workgroupIdsNotCompleted.length; n++) {\r\n                        var workgroupId = workgroupIdsNotCompleted[n];\r\n\r\n                        /*\r\n                         * create an object used for displaying\r\n                         * information about the workgroup\r\n                         */\r\n                        var workgroupObject = {\r\n                            workgroupId: workgroupId,\r\n                            displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\r\n                            achievementTime: null,\r\n                            completed: false\r\n                        };\r\n\r\n                        projectAchievement.workgroups.push(workgroupObject);\r\n                    }\r\n\r\n                    /*\r\n                     * calculate the number of workgroups that completed\r\n                     * the achievement\r\n                     */\r\n                    projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\r\n\r\n                    /*\r\n                     * calculate the percentage of workgroups that have\r\n                     * completed the achievement\r\n                     */\r\n                    projectAchievement.percentageCompleted = parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open a dialog with the milestone details (list with workgroups statuses\r\n     * for the given milestone)\r\n     * @param milestone the milestone object to show\r\n     * @param $event the event that triggered the function call\r\n     */\r\n    showMilestoneDetails(milestone, $event) {\r\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\r\n        let template =\r\n            `<md-dialog class=\"dialog--wide\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>${ title }</h2>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\r\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\"></milestone-details>\r\n                </md-dialog-content>\r\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\r\n                    <md-button class=\"warn\"\r\n                               ng-click=\"delete()\"\r\n                               aria-label=\"{{ 'DELETE' | translate }}\">\r\n                        {{ 'DELETE' | translate }}\r\n                    </md-button>\r\n                    <span flex></span>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"edit()\"\r\n                               aria-label=\"{{ 'EDIT' | translate }}\">\r\n                        {{ 'EDIT' | translate }}\r\n                    </md-button>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"close()\"\r\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\r\n                            {{ 'CLOSE' | translate }}\r\n                        </md-button>\r\n                    </md-dialog-actions>\r\n            </md-dialog>`;\r\n\r\n        // display the milestone details in a dialog\r\n        this.$mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            template: template,\r\n            ariaLabel: title,\r\n            fullscreen: true,\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true,\r\n            locals: {\r\n                $event, $event,\r\n                milestone: milestone\r\n            },\r\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\r\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\r\n                    $scope.milestone = milestone;\r\n                    $scope.event = $event;\r\n\r\n                    // close the popup\r\n                    $scope.close = function() {\r\n                        $mdDialog.hide();\r\n                    }\r\n\r\n                    // edit the milestone\r\n                    $scope.edit = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\r\n                    }\r\n\r\n                    // delete the milestone\r\n                    $scope.delete = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\r\n                    }\r\n\r\n                    $scope.onShowWorkgroup = function(workgroup) {\r\n                        $mdDialog.hide();\r\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\r\n                        $state.go('root.nodeProgress');\r\n                    }\r\n                }\r\n            ]\r\n        }).then((data) => {\r\n            if (data && data.action && data.milestone) {\r\n                if (data.action === 'edit') {\r\n                    let milestone = angular.copy(data.milestone);\r\n                    this.editMilestone(milestone, data.$event);\r\n                } else if (data.action === 'delete') {\r\n                    this.deleteMilestone(data.milestone);\r\n                }\r\n            }\r\n        }, () => {});;\r\n    }\r\n\r\n    /**\r\n     * Open a dialog to edit milestone details (or create a new one)\r\n     * @param milestone the milestone object to show\r\n     * @param $event the event that triggered the function call\r\n     */\r\n    editMilestone(milestone, $event) {\r\n        let editMode = milestone ? true : false;\r\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\r\n\r\n        if (!editMode) {\r\n            milestone = this.createMilestone();\r\n        }\r\n\r\n        let template =\r\n            `<md-dialog class=\"dialog--wide\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>${ title }</h2>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\r\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\r\n                </md-dialog-content>\r\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\r\n                    <md-button ng-click=\"close()\"\r\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\r\n                        {{ 'CANCEL' | translate }}\r\n                    </md-button>\r\n                    <md-button class=\"md-primary\"\r\n                               ng-click=\"save()\"\r\n                               aria-label=\"{{ 'SAVE' | translate }}\">\r\n                            {{ 'SAVE' | translate }}\r\n                        </md-button>\r\n                    </md-dialog-actions>\r\n            </md-dialog>`;\r\n\r\n        // display the milestone edit form in a dialog\r\n        this.$mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            template: template,\r\n            ariaLabel: title,\r\n            fullscreen: true,\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true,\r\n            locals: {\r\n                editMode: editMode,\r\n                $event, $event,\r\n                milestone: milestone\r\n            },\r\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\r\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\r\n                    $scope.editMode = editMode;\r\n                    $scope.milestone = milestone;\r\n                    $scope.$event = $event;\r\n                    $scope.valid = editMode;\r\n\r\n                    $scope.$translate = $filter('translate');\r\n\r\n                    // close the popup\r\n                    $scope.close = function() {\r\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\r\n                    }\r\n\r\n                    // save the milestone\r\n                    $scope.save = function() {\r\n                        if ($scope.valid) {\r\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\r\n                        } else {\r\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\r\n                        }\r\n                    }\r\n\r\n                    $scope.onChange = function(milestone, valid) {\r\n                        $scope.milestone = milestone;\r\n                        $scope.valid = valid;\r\n                    }\r\n                }\r\n            ]\r\n        }).then((data) => {\r\n            if (data) {\r\n                if (data.milestone && data.save) {\r\n                    this.saveMilestone(data.milestone);\r\n                }\r\n            }\r\n        }, () => {});\r\n    }\r\n}\r\n\r\nMilestonesController.$inject = [\r\n    '$injector',\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$state',\r\n    'AchievementService',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService',\r\n    'UtilService',\r\n    'moment'\r\n];\r\n\r\nexport default MilestonesController;\r\n"]}