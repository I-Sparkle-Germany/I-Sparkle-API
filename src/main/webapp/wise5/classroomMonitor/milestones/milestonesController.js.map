{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","itemsTemporaryStorage","workgroupsStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadProjectAchievements","$on","event","args","studentAchievement","addOrUpdateStudentAchievement","updateMilestoneCompletion","achievementId","currentPeriod","projectAchievements","projectAchievement","id","getAchievements","isEnabled","items","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","milestone","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","i","length","splice","saveProject","push","workgroups","numberOfStudentsCompleted","a","clearTempFields","restoreTempFields","workgroupId","getDisplayUsernamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","getProjectAchievementById","achievementIdToStudentAchievements","getAchievementIdToStudentAchievementsMappings","studentAchievements","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","isCompletionReached","report","generateReport","generatedReport","setReportAvailable","satisfyMinPercentage","satisfyMinNumWorkgroups","reportAvailable","isReportAvailable","referencedComponents","getSatisfyCriteriaReferencedComponents","aggregateAutoScores","Object","values","referencedComponent","componentId","calculateAggregateAutoScores","template","chooseTemplate","templates","templateContent","content","keys","componentAggregate","subScoreIndex","subScoreId","regex","RegExp","milestoneData","calculateMilestoneData","milestoneCategories","calculateMilestoneCategories","categories","JSON","stringify","replace","data","components","satisfyCriteria","satisfyCriterion","component","subScoreAggregate","mainColor","subColor1","subColor2","scoreKeys","counts","scoreKeysSorted","sort","b","color","step","opacity","scoreKey","scoreKeyCount","scoreKeyPercentage","Math","floor","scoreCount","scoreKeyColor","rgbToHex","scoreData","aggregate","scoreAnnotations","getAllLatestScoreAnnotations","scoreAnnotation","addDataToAggregate","annotation","scores","subScore","scoreSum","average","subScoreVal","score","isTemplateMatch","matchedCriteria","isTemplateCriterionSatisfied","satisfyConditional","function","isPercentOfScoresGreaterThan","isPercentOfScoresGreaterThanOrEqualTo","isPercentOfScoresLessThan","isPercentOfScoresLessThanOrEqualTo","isPercentOfScoresEqualTo","isPercentOfScoresNotEqualTo","aggregateData","getAggregateData","possibleScores","getPossibleScores","sum","getGreaterThanSum","isPercentThresholdSatisfied","possibleScore","value","getGreaterThanOrEqualToSum","getLessThanSum","getLessThanOrEqualToSum","getEqualToSum","getNotEqualToSum","targetVariable","map","Number","percentOfScores","percentThreshold","scoreName","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","onVisitNodeGrading","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n  constructor($injector,\n              $filter,\n              $mdDialog,\n              $rootScope,\n              $scope,\n              $state,\n              AchievementService,\n              AnnotationService,\n              ConfigService,\n              ProjectService,\n              StudentStatusService,\n              TeacherDataService,\n              TeacherWebSocketService,\n              UtilService,\n              moment) {\n\n    this.$injector = $injector;\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.AchievementService = AchievementService;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentStatusService = StudentStatusService;\n    this.TeacherDataService = TeacherDataService;\n    this.TeacherWebSocketService = TeacherWebSocketService;\n    this.UtilService = UtilService;\n    this.moment = moment;\n    this.$translate = this.$filter('translate');\n\n    /*\n     * Arrays used to temporarily store milestone display values. We add\n     * fields to the milestone objects but we don't want to save those\n     * fields when we save the milestones to the server. We remove the\n     * fields from the milestones and then save the milestones to the\n     * server. After we save the milestones, we add the fields back into\n     * the milestones.\n     */\n    this.itemsTemporaryStorage = [];\n    this.workgroupsStorage = [];\n    this.numberOfStudentsCompletedStorage = [];\n    this.percentageCompletedStorage = [];\n    this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n    this.setWorkgroupsInCurrentPeriod();\n    this.loadProjectAchievements();\n\n    this.$rootScope.$on('newStudentAchievement', (event, args) => {\n      if (args) {\n        const studentAchievement = args.studentAchievement;\n        this.AchievementService.addOrUpdateStudentAchievement(studentAchievement);\n        this.updateMilestoneCompletion(studentAchievement.achievementId);\n      }\n    });\n\n    this.$scope.$on('currentPeriodChanged', (event, args) => {\n      this.periodId = args.currentPeriod.periodId;\n\n      // update the completion status for all the project projectAchievements\n      for (let projectAchievement of this.projectAchievements) {\n        this.setWorkgroupsInCurrentPeriod();\n        this.updateMilestoneCompletion(projectAchievement.id);\n      }\n    });\n  }\n\n  /**\n   * Load the projectAchievements and perform additional calculations\n   */\n  loadProjectAchievements() {\n    const projectAchievements = this.ProjectService.getAchievements();\n    if (projectAchievements.isEnabled) {\n      this.projectAchievements = projectAchievements.items;\n      for (let projectAchievement of this.projectAchievements) {\n        this.updateMilestoneCompletion(projectAchievement.id);\n\n        // get all the activities and steps in the project\n        projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n        if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n          /*\n           * loop through all the node ids that are required\n           * to be completed for this project achievement\n           */\n          for (let nodeId of projectAchievement.params.nodeIds) {\n            if (projectAchievement.items[nodeId] != null) {\n              projectAchievement.items[nodeId].checked = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the given milestone date is before the current day (and\n   * milestone completion is less than 100%)\n   * @param date a date string or object\n   * @param percentageCompleted Number percent completed\n   * @return Boolean whether given date is before today\n   */\n  isBeforeDay(date, percentageCompleted) {\n    let result = false;\n    if (date && percentageCompleted < 100) {\n      result = this.moment(date).isBefore(this.moment(), 'day');\n    }\n    return result;\n  }\n\n  /**\n   * Check if the given milestone date is the same as the current day (and\n   * milestone completion is less than 100%)\n   * @param date a date string or object\n   * @param percentageCompleted Number percent completed\n   * @return Boolean whether given date is before today\n   */\n  isSameDay(date, percentageCompleted) {\n    let result = false;\n    if (date && percentageCompleted < 100) {\n      result = this.moment(date).isSame(this.moment(), 'day');\n    }\n    return result;\n  }\n\n  /**\n   * Create a new milestone\n   * @return a milestone object\n   */\n  createMilestone() {\n    let projectAchievements = this.ProjectService.getAchievementItems();\n    if (projectAchievements != null) {\n      // get the time of tomorrow at 3pm\n      const tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\n      return {\n        id: this.AchievementService.getAvailableAchievementId(),\n        name: '',\n        description: '',\n        type: \"milestone\",\n        params: {\n          nodeIds: [],\n          targetDate: tomorrow.valueOf()\n        },\n        icon: {\n          image: \"\"\n        },\n        items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\n        isVisible: true\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Delete a milestone\n   * @param milestone the milestone to delete\n   */\n  deleteMilestone(milestone, $event) {\n    if (milestone) {\n      const title = milestone.name;\n      const label = this.$translate('DELETE_MILESTONE');\n      const msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\n      const yes = this.$translate('YES');\n      const cancel = this.$translate('CANCEL')\n\n      const confirm = this.$mdDialog.confirm()\n        .title(title)\n        .textContent(msg)\n        .ariaLabel(label)\n        .targetEvent($event)\n        .ok(yes)\n        .cancel(cancel);\n\n      this.$mdDialog.show(confirm).then(() => {\n        let projectAchievements = this.projectAchievements;\n        let index = -1;\n        for (let i = 0; i < projectAchievements.length; i++) {\n          if (projectAchievements[i].id === milestone.id) {\n            index = i;\n            break;\n          }\n        }\n\n        if (index > -1) {\n          this.projectAchievements.splice(index, 1);\n          this.saveProject();\n        }\n      }, () => {\n\n      });\n    }\n  }\n\n  saveMilestone(milestone) {\n    let index = -1;\n    for (let i = 0; i < this.projectAchievements.length; i++) {\n      if (this.projectAchievements[i].id === milestone.id) {\n        index = i;\n        this.projectAchievements[i] = milestone;\n        break;\n      }\n    }\n    if (index < 0) {\n      let projectAchievements = this.ProjectService.getAchievementItems();\n      if (projectAchievements && milestone) {\n        projectAchievements.push(milestone);\n      }\n    }\n    this.saveProject();\n    this.loadProjectAchievements();\n  }\n\n  /**\n   * Remove the temporary fields from the milestone objects and store\n   * them in temporary storage arrays so that we can load the fields back\n   * in later\n   */\n  clearTempFields() {\n    /*\n     * these array will store the temporary fields. the index of the arrays corresponds to the\n     * index of the project achievement. for example the percentageCompletedStorage value for\n     * the first project project achievement will be stored in\n     * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\n     * project project achievement will be stored in this.percentageCompletedStorage[1].\n     */\n    this.itemsTemporaryStorage = [];\n    this.workgroupsStorage = [];\n    this.numberOfStudentsCompletedStorage = [];\n    this.percentageCompletedStorage = [];\n\n    for (let projectAchievement of this.projectAchievements) {\n      // save the field values in the temporary storage arrays\n      this.workgroupsStorage.push(projectAchievement.workgroups);\n      this.numberOfStudentsCompletedStorage.push(projectAchievement.numberOfStudentsCompleted);\n      this.percentageCompletedStorage.push(projectAchievement.percentageCompleted);\n\n      // delete the field from the projectAchievement\n      delete projectAchievement.items;\n      delete projectAchievement.workgroups;\n      delete projectAchievement.numberOfStudentsCompleted;\n      delete projectAchievement.percentageCompleted;\n    }\n  }\n\n  /**\n   * Restore the temporary fields into the achievement objects\n   */\n  restoreTempFields() {\n    for (let a = 0; a < this.projectAchievements.length; a++) {\n      const projectAchievement = this.projectAchievements[a];\n      // set the fields back into the achievement object\n      projectAchievement.items = this.itemsTemporaryStorage[a];\n      projectAchievement.workgroups = this.workgroupsStorage[a];\n      projectAchievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n      projectAchievement.percentageCompleted = this.percentageCompletedStorage[a];\n    }\n    this.itemsTemporaryStorage = [];\n    this.workgroupsStorage = [];\n    this.numberOfStudentsCompletedStorage = [];\n    this.percentageCompletedStorage = [];\n  }\n\n  /**\n   * Save the project to the server\n   */\n  saveProject() {\n    this.clearTempFields();\n    this.ProjectService.saveProject();\n    this.restoreTempFields();\n  }\n\n  /**\n   * Get the user names for a workgroup id\n   * @param workgroupId the workgroup id\n   * @return the user names in the workgroup\n   */\n  getDisplayUsernamesByWorkgroupId(workgroupId) {\n    return this.ConfigService.getDisplayUsernamesByWorkgroupId(workgroupId);\n  }\n\n  setWorkgroupsInCurrentPeriod() {\n    const workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\n    this.workgroupIds = [];\n\n    // filter out workgroups not in the current period\n    for (let i = 0; i < workgroupIdsInRun.length; i++) {\n      const currentId = workgroupIdsInRun[i];\n      const currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\n\n      if (this.periodId === -1 || currentPeriodId === this.periodId) {\n        this.workgroupIds.push(currentId);\n      }\n    }\n    this.numberOfStudentsInRun = this.workgroupIds.length;\n  }\n\n  /**\n   * Update the student completion information for this milestone\n   * @param achievementId the achievement id to update\n   */\n  updateMilestoneCompletion(achievementId) {\n    const projectAchievement = this.getProjectAchievementById(achievementId);\n    const achievementIdToStudentAchievements = this.AchievementService.getAchievementIdToStudentAchievementsMappings();\n    const studentAchievements = achievementIdToStudentAchievements[projectAchievement.id];\n    const workgroupIdsCompleted = [];\n    const achievementTimes = [];\n    const workgroupIdsNotCompleted = [];\n\n    for (let studentAchievement of studentAchievements) {\n      const currentWorkgroupId = studentAchievement.workgroupId;\n      // check if workgroup is in current period\n      if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\n        workgroupIdsCompleted.push(currentWorkgroupId);\n        achievementTimes.push(studentAchievement.achievementTime);\n      }\n    }\n\n    for (let workgroupId of this.workgroupIds) {\n      if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\n        workgroupIdsNotCompleted.push(workgroupId);\n      }\n    }\n\n    projectAchievement.workgroups = [];\n\n    for (let c = 0; c < workgroupIdsCompleted.length; c++) {\n      const workgroupId = workgroupIdsCompleted[c];\n      const achievementTime = achievementTimes[c];\n      const workgroupObject = {\n        workgroupId: workgroupId,\n        displayNames: this.getDisplayUsernamesByWorkgroupId(workgroupId),\n        achievementTime: achievementTime,\n        completed: true\n      };\n      projectAchievement.workgroups.push(workgroupObject);\n    }\n\n    /*\n     * loop through all the workgroups that have not\n     * completed the achievement\n     */\n    for (let workgroupId of workgroupIdsNotCompleted) {\n      const workgroupObject = {\n        workgroupId: workgroupId,\n        displayNames: this.getDisplayUsernamesByWorkgroupId(workgroupId),\n        achievementTime: null,\n        completed: false\n      };\n      projectAchievement.workgroups.push(workgroupObject);\n    }\n\n    projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\n    projectAchievement.percentageCompleted =\n      parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n    if (projectAchievement.type === 'milestoneReport') {\n      if (this.isCompletionReached(projectAchievement)) {\n        const report = this.generateReport(projectAchievement);\n        if (report != null) {\n          projectAchievement.generatedReport = this.generateReport(projectAchievement);\n          this.setReportAvailable(projectAchievement, true);\n        } else {\n          delete projectAchievement.generatedReport;\n          this.setReportAvailable(projectAchievement, false);\n        }\n      } else {\n        this.setReportAvailable(projectAchievement, false);\n      }\n    }\n  }\n\n  isCompletionReached(projectAchievement) {\n    return projectAchievement.percentageCompleted >= projectAchievement.satisfyMinPercentage &&\n      projectAchievement.numberOfStudentsCompleted >= projectAchievement.satisfyMinNumWorkgroups;\n  }\n\n  setReportAvailable(projectAchievement, reportAvailable) {\n    projectAchievement.isReportAvailable = reportAvailable;\n  }\n\n  generateReport(projectAchievement) {\n    const referencedComponents = this.getSatisfyCriteriaReferencedComponents(projectAchievement);\n    const aggregateAutoScores = {};\n    for (const referencedComponent of Object.values(referencedComponents)) {\n      const nodeId = referencedComponent.nodeId;\n      const componentId = referencedComponent.componentId;\n      aggregateAutoScores[componentId] = this.calculateAggregateAutoScores(nodeId, componentId, this.periodId);\n    }\n    const template = this.chooseTemplate(projectAchievement.report.templates, aggregateAutoScores);\n    let templateContent = template.content;\n    if (templateContent != null) {\n      for (let componentId of Object.keys(aggregateAutoScores)) {\n        const componentAggregate = aggregateAutoScores[componentId];\n        let subScoreIndex = 0;\n        for (let subScoreId of Object.keys(componentAggregate)) {\n          const regex = new RegExp(`milestone-report-graph.*id=\"(${subScoreId})\"`, 'g');\n          let index = 0;\n          if (subScoreId !== 'ki') {\n            subScoreIndex++;\n            index = subScoreIndex;\n          }\n          const milestoneData = this.calculateMilestoneData(componentAggregate[subScoreId], index);\n          const milestoneCategories = this.calculateMilestoneCategories(subScoreId);\n          const categories = JSON.stringify(milestoneCategories).replace(/\\\"/g, '\\'');\n          const data = JSON.stringify(milestoneData).replace(/\\\"/g, '\\'');\n          templateContent = templateContent.replace(regex,\n            `$& categories=\\\"${categories}\\\" data=\\\"${data}\\\"`);\n        }\n      }\n    }\n    return templateContent;\n  }\n\n  getSatisfyCriteriaReferencedComponents(projectAchievement) {\n    const components = {};\n    const templates = projectAchievement.report.templates;\n    for (const template of templates) {\n      for (const satisfyCriterion of template.satisfyCriteria) {\n        const nodeId = satisfyCriterion.nodeId;\n        const componentId = satisfyCriterion.componentId;\n        const component = {\n          nodeId: nodeId,\n          componentId: componentId\n        };\n        components[nodeId + '_' + componentId] = component;\n      }\n    }\n    return components;\n  }\n\n  calculateMilestoneCategories(subScoreId) {\n    if (subScoreId === 'ki') {\n      return ['1','2','3','4','5'];\n    } else {\n      return ['1','2','3'];\n    }\n  }\n\n  calculateMilestoneData(subScoreAggregate, subScoreIndex) {\n    const mainColor = 'rgb(255,143,0)';\n    const subColor1 = 'rgb(0,105,92)';\n    const subColor2 = 'rgb(106,27,154)';\n    const scoreKeys = Object.keys(subScoreAggregate.counts);\n    const scoreKeysSorted = scoreKeys.sort((a, b) => { return parseInt(a) - parseInt(b);});\n    const data = [];\n    let color = mainColor;\n    if (subScoreIndex > 0) {\n      color = subScoreIndex % 2 === 0 ? subColor1 : subColor2;\n    }\n    let step = (100/scoreKeysSorted.length)/100;\n    let opacity = 0;\n    for (let scoreKey of scoreKeysSorted) {\n      opacity = opacity + step;\n      const scoreKeyCount = subScoreAggregate.counts[scoreKey];\n      const scoreKeyPercentage = Math.floor(100 * scoreKeyCount / subScoreAggregate.scoreCount);\n      const scoreKeyColor = this.UtilService.rgbToHex(color, opacity);\n      const scoreData = {'y': scoreKeyPercentage, 'color': scoreKeyColor, 'count': scoreKeyCount };\n      data.push(scoreData);\n    }\n    return data;\n  }\n\n  calculateAggregateAutoScores(nodeId, componentId, periodId) {\n    const aggregate = {};\n    const scoreAnnotations = this.AnnotationService.getAllLatestScoreAnnotations(nodeId, componentId, periodId);\n    for (let scoreAnnotation of scoreAnnotations) {\n      if (scoreAnnotation.type === 'autoScore') {\n        this.addDataToAggregate(aggregate, scoreAnnotation);\n      }\n    }\n    return aggregate;\n  }\n\n  addDataToAggregate(aggregate, annotation) {\n    for (let subScore of annotation.data.scores) {\n      if (aggregate[subScore.id] == null) {\n        if (subScore.id === 'ki') {\n          aggregate[subScore.id] = {\n            scoreSum: 0,\n            scoreCount: 0,\n            counts: {\n              1: 0,\n              2: 0,\n              3: 0,\n              4: 0,\n              5: 0\n            },\n            average: 0\n          };\n        } else {\n          aggregate[subScore.id] = {\n            scoreSum: 0,\n            scoreCount: 0,\n            counts: {\n              1: 0,\n              2: 0,\n              3: 0\n            },\n            average: 0\n          };\n        }\n      }\n      const subScoreVal = subScore.score;\n      aggregate[subScore.id].counts[subScoreVal]++;\n      aggregate[subScore.id].scoreSum += subScoreVal;\n      aggregate[subScore.id].scoreCount++;\n      aggregate[subScore.id].average = aggregate[subScore.id].scoreSum / aggregate[subScore.id].scoreCount;\n    }\n    return aggregate;\n  }\n\n  chooseTemplate(templates, aggregateAutoScores) {\n    for (let template of templates) {\n      if (this.isTemplateMatch(template, aggregateAutoScores)) {\n        return template;\n      }\n    }\n    return {\n      content: null\n    };\n  }\n\n  isTemplateMatch(template, aggregateAutoScores) {\n    const matchedCriteria = [];\n    for (let satisfyCriterion of template.satisfyCriteria) {\n      if (this.isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores)) {\n        matchedCriteria.push(satisfyCriterion);\n      }\n    }\n    if (template.satisfyConditional === 'all') {\n      return matchedCriteria.length === template.satisfyCriteria.length;\n    } else if (template.satisfyConditional === 'any') {\n      return matchedCriteria.length > 0;\n    }\n  }\n\n  isTemplateCriterionSatisfied(satisfyCriterion, aggregateAutoScores) {\n    if (satisfyCriterion.function === 'percentOfScoresGreaterThan') {\n      return this.isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores);\n    } else if (satisfyCriterion.function === 'percentOfScoresGreaterThanOrEqualTo') {\n      return this.isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\n    } else if (satisfyCriterion.function === 'percentOfScoresLessThan') {\n      return this.isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores);\n    } else if (satisfyCriterion.function === 'percentOfScoresLessThanOrEqualTo') {\n      return this.isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores);\n    } else if (satisfyCriterion.function === 'percentOfScoresEqualTo') {\n      return this.isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores);\n    } else if (satisfyCriterion.function === 'percentOfScoresNotEqualTo') {\n      return this.isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores);\n    }\n  }\n\n  isPercentOfScoresGreaterThan(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getGreaterThanSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore > satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  isPercentOfScoresGreaterThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getGreaterThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore >= satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  isPercentOfScoresLessThan(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getLessThanSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getLessThanSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore < satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  isPercentOfScoresLessThanOrEqualTo(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getLessThanOrEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore <= satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  isPercentOfScoresEqualTo(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore === satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  isPercentOfScoresNotEqualTo(satisfyCriterion, aggregateAutoScores) {\n    const aggregateData = this.getAggregateData(satisfyCriterion, aggregateAutoScores);\n    const possibleScores = this.getPossibleScores(aggregateData);\n    const sum = this.getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores);\n    return this.isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum);\n  }\n\n  getNotEqualToSum(satisfyCriterion, aggregateData, possibleScores) {\n    let sum = 0;\n    for (const possibleScore of possibleScores) {\n      if (possibleScore !== satisfyCriterion.value) {\n        sum += aggregateData.counts[possibleScore];\n      }\n    }\n    return sum;\n  }\n\n  getAggregateData(satisfyCriterion, aggregateAutoScores) {\n    const component = aggregateAutoScores[satisfyCriterion.componentId];\n    return component[satisfyCriterion.targetVariable];\n  }\n\n  getPossibleScores(aggregateData) {\n    return Object.keys(aggregateData.counts).map(Number).sort();\n  }\n\n  isPercentThresholdSatisfied(satisfyCriterion, aggregateData, sum) {\n    const percentOfScores = 100 * sum / aggregateData.scoreCount;\n    return percentOfScores >= satisfyCriterion.percentThreshold;\n  }\n\n  getProjectAchievementById(achievementId) {\n    for (let projectAchievement of this.projectAchievements) {\n      if (projectAchievement.id === achievementId) {\n        return projectAchievement;\n      }\n    }\n    return {};\n  }\n\n  generateName(scoreName) {\n    if (scoreName === 'ki') {\n      return `name=\"KI Score\"`;\n    } else if (scoreName === 'science') {\n      return `name=\"Science Score\"`;\n    } else if (scoreName === 'engineering') {\n      return `name=\"Engineering Score\"`;\n    }\n  }\n\n  generateCategories(scoreName) {\n    if (scoreName === 'ki') {\n      return `categories=\"['1', '2', '3', '4', '5']\"`;\n    } else {\n      return `categories=\"['0', '1', '2', '3']\"`;\n    }\n  }\n\n  generateData(scoreName) {\n    if (scoreName === 'ki') {\n      return `name=\"KI Score\"`;\n    } else if (scoreName === 'science') {\n      return `name=\"Science Score\"`;\n    } else if (scoreName === 'engineering') {\n      return `name=\"Engineering Score\"`;\n    }\n  }\n\n  /**\n   * Open a dialog with the milestone details (list with workgroups statuses\n   * for the given milestone)\n   * @param milestone the milestone object to show\n   * @param $event the event that triggered the function call\n   */\n  showMilestoneDetails(milestone, $event) {\n    let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\n    let template =\n      `<md-dialog class=\"dialog--wider\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\" on-visit-node-grading=\"onVisitNodeGrading()\"></milestone-details>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\n                    <md-button class=\"warn\"\n                               ng-click=\"delete()\"\n                               ng-if=\"!milestone.type === 'milestoneReport'\"\n                               aria-label=\"{{ 'DELETE' | translate }}\">\n                        {{ 'DELETE' | translate }}\n                    </md-button>\n                    <span flex></span>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"edit()\"\n                               ng-if=\"!milestone.type === 'milestoneReport'\"\n                               aria-label=\"{{ 'EDIT' | translate }}\">\n                        {{ 'EDIT' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"close()\"\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\n                            {{ 'CLOSE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n    // display the milestone details in a dialog\n    this.$mdDialog.show({\n      parent: angular.element(document.body),\n      template: template,\n      ariaLabel: title,\n      fullscreen: true,\n      targetEvent: $event,\n      clickOutsideToClose: true,\n      escapeToClose: true,\n      locals: {\n        $event, $event,\n        milestone: milestone\n      },\n      controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\n        function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\n          $scope.milestone = milestone;\n          $scope.event = $event;\n\n          $scope.close = function() {\n            $mdDialog.hide();\n          };\n\n          $scope.edit = function() {\n            $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\n          };\n\n          $scope.delete = function() {\n            $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\n          };\n\n          $scope.onShowWorkgroup = function(workgroup) {\n            $mdDialog.hide();\n            TeacherDataService.setCurrentWorkgroup(workgroup);\n            $state.go('root.nodeProgress');\n          };\n\n          $scope.onVisitNodeGrading = function() {\n            $mdDialog.hide();\n          }\n        }\n      ]\n    }).then((data) => {\n      if (data && data.action && data.milestone) {\n        if (data.action === 'edit') {\n          let milestone = angular.copy(data.milestone);\n          this.editMilestone(milestone, data.$event);\n        } else if (data.action === 'delete') {\n          this.deleteMilestone(data.milestone);\n        }\n      }\n    }, () => {});;\n  }\n\n  /**\n   * Open a dialog to edit milestone details (or create a new one)\n   * @param milestone the milestone object to show\n   * @param $event the event that triggered the function call\n   */\n  editMilestone(milestone, $event) {\n    let editMode = milestone ? true : false;\n    let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\n\n    if (!editMode) {\n      milestone = this.createMilestone();\n    }\n\n    let template =\n      `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"close()\"\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\n                        {{ 'CANCEL' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"save()\"\n                               aria-label=\"{{ 'SAVE' | translate }}\">\n                            {{ 'SAVE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n    // display the milestone edit form in a dialog\n    this.$mdDialog.show({\n      parent: angular.element(document.body),\n      template: template,\n      ariaLabel: title,\n      fullscreen: true,\n      targetEvent: $event,\n      clickOutsideToClose: true,\n      escapeToClose: true,\n      locals: {\n        editMode: editMode,\n        $event, $event,\n        milestone: milestone\n      },\n      controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\n        function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\n          $scope.editMode = editMode;\n          $scope.milestone = milestone;\n          $scope.$event = $event;\n          $scope.valid = editMode;\n\n          $scope.$translate = $filter('translate');\n\n          $scope.close = function() {\n            $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\n          };\n\n          $scope.save = function() {\n            if ($scope.valid) {\n              $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\n            } else {\n              alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\n            }\n          };\n\n          $scope.onChange = function(milestone, valid) {\n            $scope.milestone = milestone;\n            $scope.valid = valid;\n          };\n        }\n      ]\n    }).then((data) => {\n      if (data) {\n        if (data.milestone && data.save) {\n          this.saveMilestone(data.milestone);\n        }\n      }\n    }, () => {});\n  }\n}\n\nMilestonesController.$inject = [\n  '$injector',\n  '$filter',\n  '$mdDialog',\n  '$rootScope',\n  '$scope',\n  '$state',\n  'AchievementService',\n  'AnnotationService',\n  'ConfigService',\n  'ProjectService',\n  'StudentStatusService',\n  'TeacherDataService',\n  'TeacherWebSocketService',\n  'UtilService',\n  'moment'\n];\n\nexport default MilestonesController;\n"]}