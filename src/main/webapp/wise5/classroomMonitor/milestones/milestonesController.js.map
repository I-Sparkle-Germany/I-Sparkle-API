{"version":3,"sources":["milestonesController.es6"],"names":["MilestonesController","$injector","$filter","$mdDialog","$rootScope","$scope","$state","AchievementService","AnnotationService","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","UtilService","moment","$translate","itemsTemporaryStorage","workgroupsStorage","numberOfStudentsCompletedStorage","percentageCompletedStorage","periodId","getCurrentPeriod","setWorkgroupsInCurrentPeriod","loadProjectAchievements","$on","event","args","studentAchievement","addOrUpdateStudentAchievement","data","id","updateMilestoneCompletion","currentPeriod","projectAchievements","projectAchievement","getAchievements","isEnabled","items","makeCopyOfJSONObject","idToOrder","params","nodeIds","nodeId","checked","date","percentageCompleted","result","isBefore","isSame","getAchievementItems","tomorrow","add","hours","minutes","seconds","getAvailableAchievementId","name","description","type","targetDate","valueOf","icon","image","isVisible","milestone","$event","title","label","msg","yes","cancel","confirm","textContent","ariaLabel","targetEvent","ok","show","then","index","i","length","splice","saveProject","push","workgroups","numberOfStudentsCompleted","a","clearTempFields","restoreTempFields","workgroupId","getDisplayUserNamesByWorkgroupId","workgroupIdsInRun","getClassmateWorkgroupIds","workgroupIds","currentId","currentPeriodId","getPeriodIdByWorkgroupId","numberOfStudentsInRun","achievementId","getProjectAchievementById","achievementIdToStudentAchievements","getAchievementIdToStudentAchievementsMappings","studentAchievements","workgroupIdsCompleted","achievementTimes","workgroupIdsNotCompleted","currentWorkgroupId","indexOf","achievementTime","c","workgroupObject","displayNames","completed","parseInt","completionReached","report","generateReport","generatedReport","setReportAvailable","satisfyMinPercentage","reportAvailable","isReportAvailable","reportVariables","variables","reportVariableValues","reportVariable","varValue","value","function","getAverageAutoScore","componentId","template","chooseTemplate","templates","content","isTemplateMatch","matchedCriteria","satisfyCriteria","satisfyCriterion","isTemplateCriterionSatisfied","satisfyConditional","targetValue","targetVariable","parent","angular","element","document","body","fullscreen","clickOutsideToClose","escapeToClose","locals","controller","DialogController","close","hide","edit","action","delete","onShowWorkgroup","workgroup","setCurrentWorkgroup","go","copy","editMilestone","deleteMilestone","editMode","createMilestone","valid","save","alert","onChange","saveMilestone","$inject"],"mappings":"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","file":"milestonesController.js","sourcesContent":["'use strict';\n\nclass MilestonesController {\n\n    constructor($injector,\n                $filter,\n                $mdDialog,\n                $rootScope,\n                $scope,\n                $state,\n                AchievementService,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService,\n                UtilService,\n                moment) {\n\n        this.$injector = $injector;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.AchievementService = AchievementService;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n        this.moment = moment;\n        this.$translate = this.$filter('translate');\n\n        /*\n         * Arrays used to temporarily store milestone display values. We add\n         * fields to the milestone objects but we don't want to save those\n         * fields when we save the milestones to the server. We remove the\n         * fields from the milestones and then save the milestones to the\n         * server. After we save the milestones, we add the fields back into\n         * the milestones.\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n        this.setWorkgroupsInCurrentPeriod();\n        this.loadProjectAchievements();\n\n        this.$rootScope.$on('newStudentAchievement', (event, args) => {\n          if (args) {\n            const studentAchievement = args.studentAchievement;\n            this.AchievementService.addOrUpdateStudentAchievement(studentAchievement);\n            if (studentAchievement.data != null && studentAchievement.data.id != null) {\n              this.updateMilestoneCompletion(studentAchievement.data.id);\n            }\n          }\n        });\n\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            this.periodId = args.currentPeriod.periodId;\n\n            // update the completion status for all the project projectAchievements\n            for (let projectAchievement of this.projectAchievements) {\n              this.setWorkgroupsInCurrentPeriod();\n              this.updateMilestoneCompletion(projectAchievement.id);\n            }\n        });\n    }\n\n    /**\n     * Load the projectAchievements and perform additional calculations\n     */\n    loadProjectAchievements() {\n      const projectAchievements = this.ProjectService.getAchievements();\n      if (projectAchievements.isEnabled) {\n        this.projectAchievements = projectAchievements.items;\n        for (let projectAchievement of this.projectAchievements) {\n          this.updateMilestoneCompletion(projectAchievement.id);\n\n          // get all the activities and steps in the project\n          projectAchievement.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n          if (projectAchievement.params != null && projectAchievement.params.nodeIds != null) {\n            /*\n             * loop through all the node ids that are required\n             * to be completed for this project achievement\n             */\n            for (let nodeId of projectAchievement.params.nodeIds) {\n              if (projectAchievement.items[nodeId] != null) {\n                projectAchievement.items[nodeId].checked = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Check if the given milestone date is before the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isBeforeDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isBefore(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Check if the given milestone date is the same as the current day (and\n     * milestone completion is less than 100%)\n     * @param date a date string or object\n     * @param percentageCompleted Number percent completed\n     * @return Boolean whether given date is before today\n     */\n    isSameDay(date, percentageCompleted) {\n        let result = false;\n        if (date && percentageCompleted < 100) {\n            result = this.moment(date).isSame(this.moment(), 'day');\n        }\n        return result;\n    }\n\n    /**\n     * Create a new milestone\n     * @return a milestone object\n     */\n    createMilestone() {\n        let projectAchievements = this.ProjectService.getAchievementItems();\n        if (projectAchievements != null) {\n            // get the time of tomorrow at 3pm\n            const tomorrow = this.moment().add('days', 1).hours(23).minutes(11).seconds(59);\n            return {\n                id: this.AchievementService.getAvailableAchievementId(),\n                name: '',\n                description: '',\n                type: \"milestone\",\n                params: {\n                    nodeIds: [],\n                    targetDate: tomorrow.valueOf()\n                },\n                icon: {\n                    image: \"\"\n                },\n                items: this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder),\n                isVisible: true\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Delete a milestone\n     * @param milestone the milestone to delete\n     */\n    deleteMilestone(milestone, $event) {\n        if (milestone) {\n            const title = milestone.name;\n            const label = this.$translate('DELETE_MILESTONE');\n            const msg = this.$translate('DELETE_MILESTONE_CONFIRM', { name: milestone.name });\n            const yes = this.$translate('YES');\n            const cancel = this.$translate('CANCEL')\n\n            const confirm = this.$mdDialog.confirm()\n                .title(title)\n                .textContent(msg)\n                .ariaLabel(label)\n                .targetEvent($event)\n                .ok(yes)\n                .cancel(cancel);\n\n            this.$mdDialog.show(confirm).then(() => {\n                let projectAchievements = this.projectAchievements;\n                let index = -1;\n                for (let i = 0; i < projectAchievements.length; i++) {\n                    if (projectAchievements[i].id === milestone.id) {\n                        index = i;\n                        break;\n                    }\n                }\n\n                if (index > -1) {\n                    this.projectAchievements.splice(index, 1);\n                    this.saveProject();\n                }\n            }, () => {\n\n            });\n        }\n    }\n\n    saveMilestone(milestone) {\n        let index = -1;\n        for (let i = 0; i < this.projectAchievements.length; i++) {\n            if (this.projectAchievements[i].id === milestone.id) {\n                index = i;\n                this.projectAchievements[i] = milestone;\n                break;\n            }\n        }\n        if (index < 0) {\n            let projectAchievements = this.ProjectService.getAchievementItems();\n            if (projectAchievements && milestone) {\n                projectAchievements.push(milestone);\n            }\n        }\n        this.saveProject();\n        this.loadProjectAchievements();\n    }\n\n    /**\n     * Remove the temporary fields from the milestone objects and store\n     * them in temporary storage arrays so that we can load the fields back\n     * in later\n     */\n    clearTempFields() {\n        /*\n         * these array will store the temporary fields. the index of the arrays corresponds to the\n         * index of the project achievement. for example the percentageCompletedStorage value for\n         * the first project project achievement will be stored in\n         * this.percentageCompletedStorage[0]. the percentageCompletedStorage value for the second\n         * project project achievement will be stored in this.percentageCompletedStorage[1].\n         */\n        this.itemsTemporaryStorage = [];\n        this.workgroupsStorage = [];\n        this.numberOfStudentsCompletedStorage = [];\n        this.percentageCompletedStorage = [];\n\n        for (let projectAchievement of this.projectAchievements) {\n          // save the field values in the temporary storage arrays\n          this.workgroupsStorage.push(projectAchievement.workgroups);\n          this.numberOfStudentsCompletedStorage.push(projectAchievement.numberOfStudentsCompleted);\n          this.percentageCompletedStorage.push(projectAchievement.percentageCompleted);\n\n          // delete the field from the projectAchievement\n          delete projectAchievement.items;\n          delete projectAchievement.workgroups;\n          delete projectAchievement.numberOfStudentsCompleted;\n          delete projectAchievement.percentageCompleted;\n        }\n    }\n\n    /**\n     * Restore the temporary fields into the achievement objects\n     */\n    restoreTempFields() {\n      for (let a = 0; a < this.projectAchievements.length; a++) {\n        const projectAchievement = this.projectAchievements[a];\n        // set the fields back into the achievement object\n        projectAchievement.items = this.itemsTemporaryStorage[a];\n        projectAchievement.workgroups = this.workgroupsStorage[a];\n        projectAchievement.numberOfStudentsCompleted = this.numberOfStudentsCompletedStorage[a];\n        projectAchievement.percentageCompleted = this.percentageCompletedStorage[a];\n      }\n      this.itemsTemporaryStorage = [];\n      this.workgroupsStorage = [];\n      this.numberOfStudentsCompletedStorage = [];\n      this.percentageCompletedStorage = [];\n    }\n\n    /**\n     * Save the project to the server\n     */\n    saveProject() {\n        this.clearTempFields();\n        this.ProjectService.saveProject();\n        this.restoreTempFields();\n    }\n\n    /**\n     * Get the user names for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return the user names in the workgroup\n     */\n    getDisplayUserNamesByWorkgroupId(workgroupId) {\n        return this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\n    }\n\n    setWorkgroupsInCurrentPeriod() {\n        const workgroupIdsInRun = this.ConfigService.getClassmateWorkgroupIds();\n        this.workgroupIds = [];\n\n        // filter out workgroups not in the current period\n        for (let i = 0; i < workgroupIdsInRun.length; i++) {\n            const currentId = workgroupIdsInRun[i];\n            const currentPeriodId = this.ConfigService.getPeriodIdByWorkgroupId(currentId);\n\n            if (this.periodId === -1 || currentPeriodId === this.periodId) {\n                this.workgroupIds.push(currentId);\n            }\n        }\n        this.numberOfStudentsInRun = this.workgroupIds.length;\n    }\n\n    /**\n     * Update the student completion information for this milestone\n     * @param achievementId the achievement id to update\n     */\n    updateMilestoneCompletion(achievementId) {\n      const projectAchievement = this.getProjectAchievementById(achievementId);\n      const achievementIdToStudentAchievements = this.AchievementService.getAchievementIdToStudentAchievementsMappings();\n      const studentAchievements = achievementIdToStudentAchievements[projectAchievement.id];\n      const workgroupIdsCompleted = [];\n      const achievementTimes = [];\n      const workgroupIdsNotCompleted = [];\n\n      for (let studentAchievement of studentAchievements) {\n        const currentWorkgroupId = studentAchievement.workgroupId;\n        // check if workgroup is in current period\n        if (this.workgroupIds.indexOf(currentWorkgroupId) > -1) {\n          workgroupIdsCompleted.push(currentWorkgroupId);\n          achievementTimes.push(studentAchievement.achievementTime);\n        }\n      }\n\n      for (let workgroupId of this.workgroupIds) {\n        if (workgroupIdsCompleted.indexOf(workgroupId) === -1) {\n          workgroupIdsNotCompleted.push(workgroupId);\n        }\n      }\n\n      projectAchievement.workgroups = [];\n\n      for (let c = 0; c < workgroupIdsCompleted.length; c++) {\n        const workgroupId = workgroupIdsCompleted[c];\n        const achievementTime = achievementTimes[c];\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: achievementTime,\n          completed: true\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      /*\n       * loop through all the workgroups that have not\n       * completed the achievement\n       */\n      for (let workgroupId of workgroupIdsNotCompleted) {\n        const workgroupObject = {\n          workgroupId: workgroupId,\n          displayNames: this.getDisplayUserNamesByWorkgroupId(workgroupId),\n          achievementTime: null,\n          completed: false\n        };\n        projectAchievement.workgroups.push(workgroupObject);\n      }\n\n      projectAchievement.numberOfStudentsCompleted = workgroupIdsCompleted.length;\n      projectAchievement.percentageCompleted =\n        parseInt(100 * projectAchievement.numberOfStudentsCompleted / this.numberOfStudentsInRun);\n      if (projectAchievement.type === 'milestoneReport') {\n        if (this.completionReached(projectAchievement)) {\n          const report = this.generateReport(projectAchievement);\n          if (report != null) {\n            projectAchievement.generatedReport = this.generateReport(projectAchievement);\n            this.setReportAvailable(projectAchievement, true);\n          } else {\n            delete projectAchievement.generatedReport;\n            this.setReportAvailable(projectAchievement, false);\n          }\n        }\n      }\n    }\n\n    completionReached(projectAchievement) {\n      return projectAchievement.percentageCompleted >= projectAchievement.satisfyMinPercentage;\n    }\n\n    setReportAvailable(projectAchievement, reportAvailable) {\n      projectAchievement.isReportAvailable = reportAvailable;\n    }\n\n    generateReport(projectAchievement) {\n      const reportVariables = projectAchievement.report.variables;\n      const reportVariableValues = {};\n      for (let reportVariable of reportVariables) {\n        const varValue = reportVariable.value;\n        if (varValue === 'annotation.score') {\n        } else if (varValue === 'annotation.autoScore') {\n        } else if (varValue === 'annotation.autoScore.ki' && reportVariable.function === 'average') {\n          reportVariableValues[reportVariable.name] = this.AnnotationService.getAverageAutoScore(\n              reportVariable.nodeId, reportVariable.componentId, this.periodId, 'ki');\n        } else if (varValue === 'annotation.autoScore.science' && reportVariable.function === 'average') {\n          reportVariableValues[reportVariable.name] = this.AnnotationService.getAverageAutoScore(\n              reportVariable.nodeId, reportVariable.componentId, this.periodId, 'science');\n        } else if (varValue === 'annotation.autoScore.engineering') {\n\n        }\n      }\n      const template = this.chooseTemplate(projectAchievement.report.templates, reportVariableValues);\n      return template.content;\n    }\n\n    chooseTemplate(templates, reportVariableValues) {\n      for (let template of templates) {\n        if (this.isTemplateMatch(template, reportVariableValues)) {\n          return template;\n        }\n      }\n      return {\n        content: null\n      };\n    }\n\n    isTemplateMatch(template, reportVariableValues) {\n      const matchedCriteria = [];\n      for (let satisfyCriterion of template.satisfyCriteria) {\n        if (this.isTemplateCriterionSatisfied(satisfyCriterion, reportVariableValues)) {\n          matchedCriteria.push(satisfyCriterion);\n        }\n      }\n      if (template.satisfyConditional === 'all') {\n        return matchedCriteria.length === template.satisfyCriteria.length;\n      } else if (template.satisfyConditional === 'any') {\n        return matchedCriteria.length > 0;\n      }\n    }\n\n    isTemplateCriterionSatisfied(satisfyCriterion, reportVariableValues) {\n      const targetValue = reportVariableValues[satisfyCriterion.targetVariable];\n      if (satisfyCriterion.function === 'greaterThanOrEqualTo') {\n        return targetValue >= satisfyCriterion.value;\n      } else if (satisfyCriterion.function === 'lessThanOrEqualTo') {\n        return targetValue <= satisfyCriterion.value;\n      }\n    }\n\n    getProjectAchievementById(achievementId) {\n      for (let projectAchievement of this.projectAchievements) {\n        if (projectAchievement.id === achievementId) {\n          return projectAchievement;\n        }\n      }\n      return {};\n    }\n\n    /**\n     * Open a dialog with the milestone details (list with workgroups statuses\n     * for the given milestone)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    showMilestoneDetails(milestone, $event) {\n        let title = this.$translate('MILESTONE_DETAILS_TITLE', { name: milestone.name });\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-details milestone=\"milestone\" on-show-workgroup=\"onShowWorkgroup(value)\"></milestone-details>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"start center\">\n                    <md-button class=\"warn\"\n                               ng-click=\"delete()\"\n                               aria-label=\"{{ 'DELETE' | translate }}\">\n                        {{ 'DELETE' | translate }}\n                    </md-button>\n                    <span flex></span>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"edit()\"\n                               aria-label=\"{{ 'EDIT' | translate }}\">\n                        {{ 'EDIT' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"close()\"\n                               aria-label=\"{{ 'CLOSE' | translate }}\">\n                            {{ 'CLOSE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone details in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$state', '$mdDialog', 'milestone', '$event', 'TeacherDataService',\n                function DialogController($scope, $state, $mdDialog, milestone, $event, TeacherDataService) {\n                    $scope.milestone = milestone;\n                    $scope.event = $event;\n\n                    $scope.close = function() {\n                        $mdDialog.hide();\n                    };\n\n                    $scope.edit = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'edit', $event: $event });\n                    };\n\n                    $scope.delete = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, action: 'delete' });\n                    };\n\n                    $scope.onShowWorkgroup = function(workgroup) {\n                        $mdDialog.hide();\n                        TeacherDataService.setCurrentWorkgroup(workgroup);\n                        $state.go('root.nodeProgress');\n                    };\n                }\n            ]\n        }).then((data) => {\n            if (data && data.action && data.milestone) {\n                if (data.action === 'edit') {\n                    let milestone = angular.copy(data.milestone);\n                    this.editMilestone(milestone, data.$event);\n                } else if (data.action === 'delete') {\n                    this.deleteMilestone(data.milestone);\n                }\n            }\n        }, () => {});;\n    }\n\n    /**\n     * Open a dialog to edit milestone details (or create a new one)\n     * @param milestone the milestone object to show\n     * @param $event the event that triggered the function call\n     */\n    editMilestone(milestone, $event) {\n        let editMode = milestone ? true : false;\n        let title = editMode ? this.$translate('EDIT_MILESTONE') : this.$translate('ADD_MILESTONE');\n\n        if (!editMode) {\n            milestone = this.createMilestone();\n        }\n\n        let template =\n            `<md-dialog class=\"dialog--wide\">\n                <md-toolbar>\n                    <div class=\"md-toolbar-tools\">\n                        <h2>${ title }</h2>\n                    </div>\n                </md-toolbar>\n                <md-dialog-content class=\"gray-lighter-bg md-dialog-content\">\n                    <milestone-edit milestone=\"milestone\" on-change=\"onChange(milestone, valid)\"></milestone-edit>\n                </md-dialog-content>\n                <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                    <md-button ng-click=\"close()\"\n                               aria-label=\"{{ 'CANCEL' | translate }}\">\n                        {{ 'CANCEL' | translate }}\n                    </md-button>\n                    <md-button class=\"md-primary\"\n                               ng-click=\"save()\"\n                               aria-label=\"{{ 'SAVE' | translate }}\">\n                            {{ 'SAVE' | translate }}\n                        </md-button>\n                    </md-dialog-actions>\n            </md-dialog>`;\n\n        // display the milestone edit form in a dialog\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            template: template,\n            ariaLabel: title,\n            fullscreen: true,\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true,\n            locals: {\n                editMode: editMode,\n                $event, $event,\n                milestone: milestone\n            },\n            controller: ['$scope', '$mdDialog', '$filter', 'milestone', 'editMode', '$event',\n                function DialogController($scope, $mdDialog, $filter, milestone, editMode, $event) {\n                    $scope.editMode = editMode;\n                    $scope.milestone = milestone;\n                    $scope.$event = $event;\n                    $scope.valid = editMode;\n\n                    $scope.$translate = $filter('translate');\n\n                    $scope.close = function() {\n                        $mdDialog.hide({ milestone: $scope.milestone, $event: $scope.$event });\n                    };\n\n                    $scope.save = function() {\n                        if ($scope.valid) {\n                            $mdDialog.hide({ milestone: $scope.milestone, save: true, $event: $scope.$event });\n                        } else {\n                            alert($scope.$translate('MILESTONE_EDIT_INVALID_ALERT'));\n                        }\n                    };\n\n                    $scope.onChange = function(milestone, valid) {\n                        $scope.milestone = milestone;\n                        $scope.valid = valid;\n                    };\n                }\n            ]\n        }).then((data) => {\n            if (data) {\n                if (data.milestone && data.save) {\n                    this.saveMilestone(data.milestone);\n                }\n            }\n        }, () => {});\n    }\n}\n\nMilestonesController.$inject = [\n    '$injector',\n    '$filter',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    'AchievementService',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService',\n    'UtilService',\n    'moment'\n];\n\nexport default MilestonesController;\n"]}