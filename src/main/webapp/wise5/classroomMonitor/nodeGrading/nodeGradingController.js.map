{"version":3,"sources":["nodeGradingController.es6"],"names":[],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($state, $stateParams, AnnotationService, ConfigService, NodeService, ProjectService, TeacherDataService) {\n\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        this.nodeTitle = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        this.periods = [];\n\n        var node = this.ProjectService.getNodeById(this.nodeId);\n\n        if (node != null) {\n            var position = this.ProjectService.getPositionById(this.nodeId);\n\n            if (position != null) {\n                this.nodeTitle = position + ' ' + node.title;\n            } else {\n                this.nodeTitle = node.title;\n            }\n\n\n            // field that will hold the node content\n            this.nodeContent = node;\n        }\n\n        this.workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n        \n        this.canViewStudentNames = true;\n        this.canGradeStudentWork = true;\n        \n        // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n        var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n        \n        if (role === 'owner') {\n            // the teacher is the owner of the run and has full access\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'write') {\n            // the teacher is a shared teacher that can grade the student work\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'read') {\n            // the teacher is a shared teacher that can only view the student work\n            this.canViewStudentNames = false;\n            this.canGradeStudentWork = false;\n        }\n\n        this.annotationMappings = {};\n\n        this.componentStateHistory = [];\n        // initialize the periods\n        this.initializePeriods();\n\n        // scroll to the top of the page when the page loads\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\n    }\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    };\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    };\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n    };\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    };\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    };\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n}\n\nNodeGradingController.$inject = ['$state', '$stateParams', 'AnnotationService', 'ConfigService', 'NodeService', 'ProjectService', 'TeacherDataService'];\n\nexport default NodeGradingController;"]}