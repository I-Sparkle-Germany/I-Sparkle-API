{"version":3,"sources":["nodeGradingController.es6"],"names":[],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($state, $stateParams, AnnotationService, ConfigService, NodeService, ProjectService, TeacherDataService) {\n\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        this.nodeTitle = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        this.periods = [];\n\n        var node = this.ProjectService.getNodeById(this.nodeId);\n\n        if (node != null) {\n            var position = this.ProjectService.getPositionById(this.nodeId);\n\n            if (position != null) {\n                this.nodeTitle = position + ' ' + node.title;\n            } else {\n                this.nodeTitle = node.title;\n            }\n\n\n            // field that will hold the node content\n            this.nodeContent = node;\n        }\n\n        // render components in show student work only mode\n        //this.mode = \"showStudentWorkOnly\";\n\n        //var vleStates = this.TeacherDataService.getVLEStates();\n        var vleStates = null;\n\n        this.workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n        this.annotationMappings = {};\n\n        this.componentStateHistory = [];\n        // initialize the periods\n        this.initializePeriods();\n\n        // scroll to the top of the page when the page loads\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\n    }\n\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    };\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    };\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        var annotation = this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n        return annotation;\n    };\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    };\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    };\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n}\n\nNodeGradingController.$inject = ['$state', '$stateParams', 'AnnotationService', 'ConfigService', 'NodeService', 'ProjectService', 'TeacherDataService'];\n\nexport default NodeGradingController;"]}