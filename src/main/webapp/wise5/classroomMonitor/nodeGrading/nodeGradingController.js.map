{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$filter","$mdDialog","$scope","$stateParams","AnnotationService","ConfigService","NodeService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","nodeId","maxScore","getMaxScoreForNode","nodeHasWork","sort","nodeGradingSort","hiddenComponents","retrieveStudentDataByNodeId","then","nodeContent","teacherWorkgroupId","getWorkgroupId","node","getNodeById","workgroups","getClassmateUserInfos","workgroupsById","workVisibilityById","workgroupInViewById","permissions","getPermissions","canViewStudentNames","setWorkgroupsById","nRubrics","getNumberOfRubricsByNodeId","document","body","scrollTop","documentElement","$on","event","args","notification","type","workgroupId","toWorkgroupId","updateWorkgroup","annotation","studentWork","context","componentId","componentType","category","data","saveEvent","l","length","i","id","init","workgroup","alertNotifications","getAlertNotificationsByWorkgroupId","hasAlert","hasNewAlert","workgroupHasNewAlert","completionStatus","getNodeCompletionStatusByWorkgroupId","hasNewWork","isVisible","getWorkgroupCompletionStatus","score","getNodeScoreByWorkgroupId","angular","copy","getAlertNotifications","newAlert","alert","timeDismissed","isCompleted","latestWorkTime","getLatestWorkTimeByWorkgroupId","latestAnnotationTime","getLatestAnnotationTimeByWorkgroupId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","isVisited","time","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getScore","hasWork","status","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","completionPct","averageScore","getNodeAverageScore","show","currentPeriodId","currentWorkgroup","getCurrentWorkgroup","parseInt","target","viewportOffsetTop","newViewportOffsetTop","getBoundingClientRect","top","delta","content","$event","showNodeInfo","value","orderBy","isExpandAll","inview","$inject"],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                $stateParams,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService,\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        // the max score for the node\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        this.nodeHasWork = this.ProjectService.nodeHasWork(this.nodeId);\n\n        this.sort = this.TeacherDataService.nodeGradingSort;\n\n        this.hiddenComponents = [];\n\n        // TODO: add loading indicator\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\n\n            // field that will hold the node content\n            this.nodeContent = null;\n\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // field that will hold the node content\n                this.nodeContent = node;\n            }\n\n            this.workgroups = this.ConfigService.getClassmateUserInfos();\n            this.workgroupsById = {}; // object that will hold workgroup names, statuses, scores, notifications, etc.\n            this.workVisibilityById = {}; // object that specifies whether student work is visible for each workgroup\n            this.workgroupInViewById = {}; // object that holds whether the workgroup is in view or not\n\n            let permissions = this.ConfigService.getPermissions();\n            this.canViewStudentNames = permissions.canViewStudentNames;\n\n            this.setWorkgroupsById();\n\n            this.nRubrics = this.ProjectService.getNumberOfRubricsByNodeId(this.nodeId);\n\n            // scroll to the top of the page when the page loads\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        });\n\n        this.$scope.$on('projectSaved', (event, args) => {\n            this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        });\n\n        this.$scope.$on('notificationChanged', (event, notification) => {\n            if (notification.type === 'CRaterResult') {\n                // a CRaterResult notification has changed\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                let workgroupId = notification.toWorkgroupId;\n                if (this.workgroupsById[workgroupId]) {\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('annotationReceived', (event, args) => {\n            let annotation = args.annotation;\n\n            if (annotation) {\n                let workgroupId = annotation.toWorkgroupId;\n                let nodeId = annotation.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new annotation for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('studentWorkReceived', (event, args) => {\n            let studentWork = args.studentWork;\n\n            if (studentWork != null) {\n                let workgroupId = studentWork.workgroupId;\n                let nodeId = studentWork.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new componentState for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        // save event when node grading view is displayed and save the nodeId that is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"nodeGradingViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Build the workgroupsById object\n     */\n    setWorkgroupsById() {\n        let l = this.workgroups.length;\n        for (let i = 0; i < l; i++) {\n            let id = this.workgroups[i].workgroupId;\n            this.workgroupsById[id] = this.workgroups[i];\n            this.workVisibilityById[id] = false;\n\n            this.updateWorkgroup(id, true);\n        }\n    }\n\n    /**\n     * Update statuses, scores, notifications, etc. for a workgroup object. Also check if we need to hide student\n     * names because logged-in user does not have the right permissions\n     * @param workgroupID a workgroup ID number\n     * @param init Boolean whether we're in controller initialization or not\n     */\n    updateWorkgroup(workgroupId, init) {\n        let workgroup = this.workgroupsById[workgroupId];\n\n        if (workgroup) {\n            let alertNotifications = this.getAlertNotificationsByWorkgroupId(workgroupId);\n            workgroup.hasAlert = alertNotifications.length;\n            workgroup.hasNewAlert = this.workgroupHasNewAlert(alertNotifications);\n            let completionStatus = this.getNodeCompletionStatusByWorkgroupId(workgroupId);\n            workgroup.hasNewWork = completionStatus.hasNewWork;\n            workgroup.isVisible = completionStatus.isVisible ? 1 : 0;\n            workgroup.completionStatus = this.getWorkgroupCompletionStatus(completionStatus);\n            workgroup.score = this.getNodeScoreByWorkgroupId(workgroupId);\n\n            if (!init) {\n                this.workgroupsById[workgroupId] = angular.copy(workgroup);\n            }\n        }\n    }\n\n    getAlertNotificationsByWorkgroupId(workgroupId) {\n        let args = {};\n        args.nodeId = this.nodeId;\n        args.toWorkgroupId = workgroupId;\n        return this.NotificationService.getAlertNotifications(args);\n    }\n\n    workgroupHasNewAlert(alertNotifications) {\n        let newAlert = false;\n\n        let l = alertNotifications.length;\n        for (let i = 0; i < l; i++) {\n            let alert = alertNotifications[i];\n            if (!alert.timeDismissed) {\n                newAlert = true;\n                break;\n            }\n        }\n\n        return newAlert;\n    }\n\n    /**\n     * Returns an object with node completion status, latest work time, and latest annotation time\n     * for a workgroup for the current node\n     * @param workgroupId a workgroup ID number\n     * @returns Object with completion, latest work time, latest annotation time\n     */\n    getNodeCompletionStatusByWorkgroupId(workgroupId) {\n        let isCompleted = false;\n        let isVisible = false;\n\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\n        let latestWorkTime = this.getLatestWorkTimeByWorkgroupId(workgroupId);\n\n        let latestAnnotationTime = this.getLatestAnnotationTimeByWorkgroupId(workgroupId);\n        let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n        if (studentStatus != null) {\n            let nodeStatus = studentStatus.nodeStatuses[this.nodeId];\n            if (nodeStatus) {\n                isVisible = nodeStatus.isVisible;\n                if (latestWorkTime) {\n                    // workgroup has at least one componentState for this node, so check if node is completed\n                    isCompleted = nodeStatus.isCompleted;\n                }\n\n                if (!this.ProjectService.nodeHasWork(this.nodeId)) {\n                    // the step does not generate any work so completion = visited\n                    isCompleted = nodeStatus.isVisited;\n                }\n            }\n        }\n\n        return {\n            isCompleted: isCompleted,\n            isVisible: isVisible,\n            latestWorkTime: latestWorkTime,\n            latestAnnotationTime: latestAnnotationTime\n        };\n    }\n\n    getLatestWorkTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(this.nodeId);\n        let n = componentStates.length-1;\n\n        // loop through component states for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let componentState = componentStates[i];\n            if (componentState.workgroupId === workgroupId) {\n                // componentState is for given workgroupId\n                time = componentState.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    getLatestAnnotationTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(this.nodeId);\n        let n = annotations.length-1;\n\n        // loop through annotations for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let annotation = annotations[i];\n            // TODO: support checking for annotations from shared teachers\n            if (annotation.toWorkgroupId === workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\n                time = annotation.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * Returns the score for the current node for a given workgroupID\n     * @param workgroupId a workgroup ID number\n     * @returns Number score value (defaults to -1 if workgroup has no score)\n     */\n    getNodeScoreByWorkgroupId(workgroupId) {\n        let score = this.AnnotationService.getScore(workgroupId, this.nodeId);\n        return (typeof score === 'number' ? score : -1);\n    }\n\n    /**\n     * Returns a numerical status value for a given completion status object depending on node completion\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\n     * @param completionStatus Object\n     * @returns Integer status value\n     */\n    getWorkgroupCompletionStatus(completionStatus) {\n        let hasWork = completionStatus.latestWorkTime !== null;\n        let isCompleted = completionStatus.isCompleted;\n        let isVisible = completionStatus.isVisible;\n\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\n        let status = 0; // default\n\n        if (!isVisible) {\n            status = -1;\n        } else if (isCompleted) {\n            status = 2;\n        } else if (hasWork) {\n            status = 1;\n        }\n\n        return status;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId).completionPct;\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the average score for the node\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\n\n        if (averageScore === null) {\n            averageScore = 'N/A';\n        } else {\n            averageScore = this.$filter('number')(averageScore, 1);\n        }\n\n        return averageScore;\n    }\n\n    /**\n     * Checks whether a workgroup should be shown\n     * @param workgroupId the workgroupId to look for\n     * @returns boolean whether the workgroup should be shown\n     */\n    isWorkgroupShown(workgroupId) {\n        let show = false;\n\n        let currentPeriodId = this.getCurrentPeriod().periodId;\n        let workgroup = this.workgroupsById[workgroupId];\n        let periodId = workgroup.periodId;\n\n        if (currentPeriodId === -1 || currentPeriodId === periodId) {\n            // workgroup is in current period\n            let currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\n            if (currentWorkgroup) {\n                // there is a currently selected workgroup, so check if this one matches\n                if (currentWorkgroup.workgroupId === parseInt(workgroupId)) {\n                    // workgroupIds match, so show this one\n                    show = true;\n                }\n            } else {\n                // there is no currently selected workgroup, so show this one\n                show = true;\n            }\n        }\n\n        return show;\n    }\n\n    updateScroll(target, viewportOffsetTop) {\n        let newViewportOffsetTop = target.getBoundingClientRect().top;\n        let delta = viewportOffsetTop - newViewportOffsetTop;\n        let scrollTop = content.scrollTop;\n        content.scrollTop = scrollTop - delta;\n    }\n\n    /**\n     * Show the rubric in the grading view. We will show the step rubric and the\n     * component rubrics.\n     */\n    showRubric($event) {\n        this.NodeService.showNodeInfo(this.nodeId, $event);\n    }\n\n    setSort(value) {\n\n        switch (value) {\n            case 'team':\n                if (this.sort === 'team') {\n                    this.sort = '-team';\n                } else {\n                    this.sort = 'team';\n                }\n                break;\n            case 'status':\n                if (this.sort === 'status') {\n                    this.sort = '-status';\n                } else {\n                    this.sort = 'status';\n                }\n                break;\n            case 'score':\n                if (this.sort === 'score') {\n                    this.sort = '-score';\n                } else {\n                    this.sort = 'score';\n                }\n                break;\n        }\n\n        // update value in the teacher data service so we can persist across view instances and current node changes\n        this.TeacherDataService.nodeGradingSort = this.sort;\n    }\n\n    getOrderBy() {\n        let orderBy = [];\n\n        switch (this.sort) {\n            case 'team':\n                orderBy = ['-isVisible', 'workgroupId'];\n                break;\n            case '-team':\n                orderBy = ['-isVisible', '-workgroupId'];\n                break;\n            case 'status':\n                orderBy = ['-isVisible', 'completionStatus', 'workgroupId'];\n                break;\n            case '-status':\n                orderBy = ['-isVisible', '-completionStatus', 'workgroupId'];\n                break;\n            case 'score':\n                orderBy = ['-isVisible', 'score', 'workgroupId'];\n                break;\n            case '-score':\n                orderBy = ['-isVisible', '-score', 'workgroupId'];\n                break;\n        }\n\n        return orderBy;\n    }\n\n    /**\n     * Expand all workgroups to show student work\n     */\n    expandAll() {\n\n        // loop through all the workgroups\n        for (let i = 0; i < this.workgroups.length; i++) {\n\n            // get a workgroup id\n            let id = this.workgroups[i].workgroupId;\n\n            // check if the workgroup is currently in view\n            if (this.workgroupInViewById[id]) {\n                // the workgroup is currently in view so we will expand it\n                this.workVisibilityById[id] = true;\n            }\n        }\n\n        /*\n         * set the boolean flag to denote that we are currently expanding\n         * all the workgroups\n         */\n        this.isExpandAll = true;\n    }\n\n    /**\n     * Collapse all workgroups to hide student work\n     */\n    collapseAll() {\n        let n = this.workgroups.length;\n\n        for (let i = 0; i < n; i++) {\n            let id = this.workgroups[i].workgroupId;\n            this.workVisibilityById[id] = false;\n        }\n\n        /*\n         * set the boolean flag to denote that we are not currently expanding\n         * all the workgroups\n         */\n        this.isExpandAll = false;\n    }\n\n    onUpdateExpand(workgroupId, value) {\n        this.workVisibilityById[workgroupId] = value;\n    }\n\n    onUpdateHiddenComponents(value) {\n        this.hiddenComponents = angular.copy(value);\n    }\n\n    /**\n     * A workgroup row has either come into view or gone out of view\n     * @param workgroupId the workgroup id that has come into view or gone out\n     * of view\n     * @param inview whether the row is in view or not\n     */\n    workgroupInView(workgroupId, inview) {\n\n        // remember whether the workgroup is in view or not\n        this.workgroupInViewById[workgroupId] = inview;\n\n        if (this.isExpandAll) {\n            // we are currently in expand all mode\n\n            if (inview) {\n                // the workgroup row is in view so we will expand it\n                this.workVisibilityById[workgroupId] = true;\n            }\n        }\n    }\n}\n\nNodeGradingController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    '$stateParams',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nexport default NodeGradingController;\n"]}