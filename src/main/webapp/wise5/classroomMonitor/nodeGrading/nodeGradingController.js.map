{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$filter","$scope","$state","$stateParams","$timeout","AnnotationService","ConfigService","NodeService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","nodeId","maxScore","getMaxScoreForNode","hasMaxScore","startNodeId","getStartNodeId","rootNode","getRootNode","hiddenComponents","retrieveStudentDataByNodeId","then","nodeContent","teacherWorkgroupId","getWorkgroupId","periods","node","getNodeById","workgroupIds","getClassmateWorkgroupIds","workgroupsById","workVisibilityById","canViewStudentNames","canGradeStudentWork","role","getTeacherRole","annotationMappings","componentStateHistory","setWorkgroupsById","document","body","scrollTop","documentElement","$on","event","notification","type","workgroupId","toWorkgroupId","updateWorkgroup","status","previousComponentState","args","annotation","studentWork","context","componentId","componentType","category","data","saveEvent","l","length","i","id","init","workgroup","alertNotifications","getAlertNotificationsByWorkgroupId","hasAlert","hasNewAlert","workgroupHasNewAlert","completionStatus","getNodeCompletionStatusByWorkgroupId","latestWorkTime","getWorkgroupCompletionStatus","score","getNodeScoreByWorkgroupId","usernames","getUsernamesByWorkgroupId","angular","copy","getAlertNotifications","newAlert","alert","timeDismissed","isCompleted","getLatestWorkTimeByWorkgroupId","latestAnnotationTime","getLatestAnnotationTimeByWorkgroupId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","time","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getScore","names","getUserNamesByWorkgroupId","name","hasWork","getComponentTemplatePath","components","isDisabled","c","component","lockAfterSubmit","getComponents","tempComponent","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","getComponentStatesByWorkgroupIdAndNodeId","getUserNameByWorkgroupId","stepWorkId","getAnnotationByStepWorkIdAndType","saveAnnotation","getPeriodIdByWorkgroupId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","averageScore","getNodeAverageScore","count","getWorkgroupIdsOnNode","periodName","value","target","viewportOffsetTop","getBoundingClientRect","top","updateScroll","newViewportOffsetTop","delta","content","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,qB;AAEF,mCAAYC,OAAZ,EACYC,MADZ,EAEYC,MAFZ,EAGYC,YAHZ,EAIYC,QAJZ,EAKYC,iBALZ,EAMYC,aANZ,EAOYC,WAPZ,EAQYC,mBARZ,EASYC,cATZ,EAUYC,oBAVZ,EAWYC,kBAXZ,EAWgC;AAAA;;AAAA;;AAE5B,aAAKX,OAAL,GAAeA,OAAf;AACA,aAAKE,MAAL,GAAcA,MAAd;AACA,aAAKD,MAAL,GAAcA,MAAd;AACA,aAAKE,YAAL,GAAoBA,YAApB;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,oBAAL,GAA4BA,oBAA5B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA,aAAKC,UAAL,GAAkB,KAAKZ,OAAL,CAAa,WAAb,CAAlB;;AAEA,aAAKa,MAAL,GAAc,KAAKV,YAAL,CAAkBU,MAAhC;;AAEA;AACA,aAAKC,QAAL,GAAgB,KAAKL,cAAL,CAAoBM,kBAApB,CAAuC,KAAKF,MAA5C,CAAhB;AACA,aAAKG,WAAL,GAAoB,OAAO,KAAKF,QAAZ,KAAyB,QAA7C;;AAEA,YAAIG,cAAc,KAAKR,cAAL,CAAoBS,cAApB,EAAlB;AACA,aAAKC,QAAL,GAAgB,KAAKV,cAAL,CAAoBW,WAApB,CAAgCH,WAAhC,CAAhB;;AAEA,aAAKI,gBAAL,GAAwB,EAAxB;;AAEA;AACA,aAAKV,kBAAL,CAAwBW,2BAAxB,CAAoD,KAAKT,MAAzD,EAAiEU,IAAjE,CAAsE,kBAAU;;AAE5E;AACA,kBAAKC,WAAL,GAAmB,IAAnB;;AAEA,kBAAKC,kBAAL,GAA0B,MAAKnB,aAAL,CAAmBoB,cAAnB,EAA1B;;AAEA,kBAAKC,OAAL,GAAe,EAAf;;AAEA,gBAAIC,OAAO,MAAKnB,cAAL,CAAoBoB,WAApB,CAAgC,MAAKhB,MAArC,CAAX;;AAEA,gBAAIe,QAAQ,IAAZ,EAAkB;;AAEd;AACA,sBAAKJ,WAAL,GAAmBI,IAAnB;AACH;;AAED,kBAAKE,YAAL,GAAoB,MAAKxB,aAAL,CAAmByB,wBAAnB,EAApB;AACA,kBAAKC,cAAL,GAAsB,EAAtB,CAlB4E,CAkBlD;AAC1B,kBAAKC,kBAAL,GAA0B,EAA1B,CAnB4E,CAmB9C;;AAE9B,kBAAKC,mBAAL,GAA2B,IAA3B;AACA,kBAAKC,mBAAL,GAA2B,IAA3B;;AAEA;AACA,gBAAIC,OAAO,MAAK9B,aAAL,CAAmB+B,cAAnB,CAAkC,MAAKZ,kBAAvC,CAAX;;AAEA,gBAAIW,SAAS,OAAb,EAAsB;AAClB;AACA,sBAAKF,mBAAL,GAA2B,IAA3B;AACA,sBAAKC,mBAAL,GAA2B,IAA3B;AACH,aAJD,MAIO,IAAIC,SAAS,OAAb,EAAsB;AACzB;AACA,sBAAKF,mBAAL,GAA2B,IAA3B;AACA,sBAAKC,mBAAL,GAA2B,IAA3B;AACH,aAJM,MAIA,IAAIC,SAAS,MAAb,EAAqB;AACxB;AACA,sBAAKF,mBAAL,GAA2B,KAA3B;AACA,sBAAKC,mBAAL,GAA2B,KAA3B;AACH;;AAED,kBAAKG,kBAAL,GAA0B,EAA1B;;AAEA,kBAAKC,qBAAL,GAA6B,EAA7B;;AAEA,kBAAKC,iBAAL;;AAEA;AACAC,qBAASC,IAAT,CAAcC,SAAd,GAA0BF,SAASG,eAAT,CAAyBD,SAAzB,GAAqC,CAA/D;AACH,SAjDD;;AAmDA,aAAK1C,MAAL,CAAY4C,GAAZ,CAAgB,mBAAhB,EAAqC,UAACC,KAAD,EAAQC,YAAR,EAAyB;AAC1D,gBAAIA,aAAaC,IAAb,KAAsB,cAA1B,EAA0C;AACtC;AACA;AACA,oBAAIC,cAAcF,aAAaG,aAA/B;AACA,oBAAI,MAAKlB,cAAL,CAAoBiB,WAApB,CAAJ,EAAsC;AAClC,0BAAKE,eAAL,CAAqBF,WAArB;AACH;AACJ;AACJ,SATD;;AAWA,aAAKhD,MAAL,CAAY4C,GAAZ,CAAgB,qBAAhB,EAAuC,UAACC,KAAD,EAAQC,YAAR,EAAyB;AAC5D,gBAAIA,aAAaC,IAAb,KAAsB,cAA1B,EAA0C;AACtC;AACA;AACA,oBAAIC,cAAcF,aAAaG,aAA/B;AACA,oBAAI,MAAKlB,cAAL,CAAoBiB,WAApB,CAAJ,EAAsC;AAClC,0BAAKE,eAAL,CAAqBF,WAArB;AACH;AACJ;AACJ,SATD;;AAWA,aAAKhD,MAAL,CAAY4C,GAAZ,CAAgB,uBAAhB,EAAyC,UAACC,KAAD,EAAQM,MAAR,EAAmB;AACxD;AACA,gBAAIH,cAAcG,OAAOH,WAAzB;AACA,gBAAIpC,SAASuC,OAAOC,sBAAP,CAA8BxC,MAA3C;AACA,gBAAIA,WAAW,MAAKA,MAAhB,IAA0B,MAAKmB,cAAL,CAAoBiB,WAApB,CAA9B,EAAgE;AAC5D;AACA,sBAAKE,eAAL,CAAqBF,WAArB;AACH;AACJ,SARD;;AAUA,aAAKhD,MAAL,CAAY4C,GAAZ,CAAgB,oBAAhB,EAAsC,UAACC,KAAD,EAAQQ,IAAR,EAAiB;AACnD,gBAAIC,aAAaD,KAAKC,UAAtB;;AAEA,gBAAIA,UAAJ,EAAgB;AACZ,oBAAIN,cAAcM,WAAWL,aAA7B;AACA,oBAAIrC,UAAS0C,WAAW1C,MAAxB;AACA,oBAAIA,YAAW,MAAKA,MAAhB,IAA0B,MAAKmB,cAAL,CAAoBiB,WAApB,CAA9B,EAAgE;AAC5D;AACA,0BAAKE,eAAL,CAAqBF,WAArB;AACH;AACJ;AACJ,SAXD;;AAaA,aAAKhD,MAAL,CAAY4C,GAAZ,CAAgB,qBAAhB,EAAuC,UAACC,KAAD,EAAQQ,IAAR,EAAiB;AACpD,gBAAIE,cAAcF,KAAKE,WAAvB;;AAEA,gBAAIA,eAAe,IAAnB,EAAyB;AACrB,oBAAIP,cAAcO,YAAYP,WAA9B;AACA,oBAAIpC,WAAS2C,YAAY3C,MAAzB;AACA,oBAAIA,aAAW,MAAKA,MAAhB,IAA0B,MAAKmB,cAAL,CAAoBiB,WAApB,CAA9B,EAAgE;AAC5D;AACA,0BAAKE,eAAL,CAAqBF,WAArB;AACH;AACJ;AACJ,SAXD;;AAaA;AACA,YAAIQ,UAAU,kBAAd;AAAA,YAAkC5C,SAAS,KAAKA,MAAhD;AAAA,YAAwD6C,cAAc,IAAtE;AAAA,YAA4EC,gBAAgB,IAA5F;AAAA,YACIC,WAAW,YADf;AAAA,YAC6Bd,QAAQ,0BADrC;AAAA,YACiEe,OAAO,EAAEhD,QAAQ,KAAKA,MAAf,EADxE;AAEA,aAAKF,kBAAL,CAAwBmD,SAAxB,CAAkCL,OAAlC,EAA2C5C,MAA3C,EAAmD6C,WAAnD,EAAgEC,aAAhE,EAA+EC,QAA/E,EAAyFd,KAAzF,EAAgGe,IAAhG;AACH;;AAED;;;;;;;4CAGoB;AAChB,gBAAIE,IAAI,KAAKjC,YAAL,CAAkBkC,MAA1B;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,oBAAIC,KAAK,KAAKpC,YAAL,CAAkBmC,CAAlB,CAAT;AACA,qBAAKjC,cAAL,CAAoBkC,EAApB,IAA0B,EAA1B;AACA,qBAAKjC,kBAAL,CAAwBiC,EAAxB,IAA8B,KAA9B;;AAEA,qBAAKf,eAAL,CAAqBe,EAArB,EAAyB,IAAzB;AACH;AACJ;;AAED;;;;;;;;wCAKgBjB,W,EAAakB,I,EAAM;AAC/B,gBAAIC,YAAY,KAAKpC,cAAL,CAAoBiB,WAApB,CAAhB;;AAEA,gBAAImB,SAAJ,EAAe;AACX,oBAAIC,qBAAqB,KAAKC,kCAAL,CAAwCrB,WAAxC,CAAzB;AACAmB,0BAAUG,QAAV,GAAqBF,mBAAmBL,MAAxC;AACAI,0BAAUI,WAAV,GAAwB,KAAKC,oBAAL,CAA0BJ,kBAA1B,CAAxB;AACA,oBAAIK,mBAAmB,KAAKC,oCAAL,CAA0C1B,WAA1C,CAAvB;AACAmB,0BAAUQ,cAAV,GAA2BF,iBAAiBE,cAA5C;AACAR,0BAAUM,gBAAV,GAA6B,KAAKG,4BAAL,CAAkCH,gBAAlC,CAA7B;AACAN,0BAAUU,KAAV,GAAkB,KAAKC,yBAAL,CAA+B9B,WAA/B,CAAlB;AACAmB,0BAAUY,SAAV,GAAsB,KAAKC,yBAAL,CAA+BhC,WAA/B,CAAtB;;AAEA,oBAAI,CAACkB,IAAL,EAAW;AACP,yBAAKnC,cAAL,CAAoBiB,WAApB,IAAmCiC,QAAQC,IAAR,CAAaf,SAAb,CAAnC;AACH;AACJ;AACJ;;;2DAEkCnB,W,EAAa;AAC5C,gBAAIK,OAAO,EAAX;AACAA,iBAAKzC,MAAL,GAAc,KAAKA,MAAnB;AACAyC,iBAAKL,WAAL,GAAmBA,WAAnB;AACA,mBAAO,KAAKzC,mBAAL,CAAyB4E,qBAAzB,CAA+C9B,IAA/C,CAAP;AACH;;;6CAEoBe,kB,EAAoB;AACrC,gBAAIgB,WAAW,KAAf;;AAEA,gBAAItB,IAAIM,mBAAmBL,MAA3B;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,oBAAIqB,QAAQjB,mBAAmBJ,CAAnB,CAAZ;AACA,oBAAI,CAACqB,MAAMC,aAAX,EAA0B;AACtBF,+BAAW,IAAX;AACA;AACH;AACJ;;AAED,mBAAOA,QAAP;AACH;;AAED;;;;;;;;;6DAMqCpC,W,EAAa;AAC9C,gBAAIuC,cAAc,KAAlB;;AAEA;AACA,gBAAIZ,iBAAiB,KAAKa,8BAAL,CAAoCxC,WAApC,CAArB;AACA,gBAAIyC,uBAAuB,KAAKC,oCAAL,CAA0C1C,WAA1C,CAA3B;;AAEA,gBAAI2B,cAAJ,EAAoB;AAChB;AACA,oBAAIgB,gBAAgB,KAAKlF,oBAAL,CAA0BmF,8BAA1B,CAAyD5C,WAAzD,CAApB;AACA,oBAAI6C,aAAaF,cAAcG,YAAd,CAA2B,KAAKlF,MAAhC,CAAjB;;AAEA,oBAAIiF,UAAJ,EAAgB;AACZN,kCAAcM,WAAWN,WAAzB;AACH;AACJ;;AAED,mBAAO;AACHA,6BAAaA,WADV;AAEHZ,gCAAgBA,cAFb;AAGHc,sCAAsBA;AAHnB,aAAP;AAKH;;;uDAE8BzC,W,EAAa;AACxC,gBAAI+C,OAAO,IAAX;AACA,gBAAIC,kBAAkB,KAAKtF,kBAAL,CAAwBuF,0BAAxB,CAAmD,KAAKrF,MAAxD,CAAtB;AACA,gBAAIsF,IAAIF,gBAAgBjC,MAAhB,GAAuB,CAA/B;;AAEA;AACA,iBAAK,IAAIC,IAAIkC,CAAb,EAAgBlC,IAAI,CAAC,CAArB,EAAwBA,GAAxB,EAA6B;AACzB,oBAAImC,iBAAiBH,gBAAgBhC,CAAhB,CAArB;AACA,oBAAImC,eAAenD,WAAf,KAA+BA,WAAnC,EAAgD;AAC5C;AACA+C,2BAAOI,eAAeC,cAAtB;AACA;AACH;AACJ;;AAED,mBAAOL,IAAP;AACH;;;6DAEoC/C,W,EAAa;AAC9C,gBAAI+C,OAAO,IAAX;AACA,gBAAIM,cAAc,KAAK3F,kBAAL,CAAwB4F,sBAAxB,CAA+C,KAAK1F,MAApD,CAAlB;AACA,gBAAIsF,IAAIG,YAAYtC,MAAZ,GAAmB,CAA3B;;AAEA;AACA,iBAAK,IAAIC,IAAIkC,CAAb,EAAgBlC,IAAI,CAAC,CAArB,EAAwBA,GAAxB,EAA6B;AACzB,oBAAIV,aAAa+C,YAAYrC,CAAZ,CAAjB;AACA;AACA,oBAAIV,WAAWL,aAAX,KAA6BD,WAA7B,IAA4CM,WAAWiD,eAAX,KAA+B,KAAKlG,aAAL,CAAmBoB,cAAnB,EAA/E,EAAoH;AAChHsE,2BAAOzC,WAAW8C,cAAlB;AACA;AACH;AACJ;;AAED,mBAAOL,IAAP;AACH;;AAED;;;;;;;;kDAK0B/C,W,EAAa;AACnC,gBAAI6B,QAAQ,KAAKzE,iBAAL,CAAuBoG,QAAvB,CAAgCxD,WAAhC,EAA6C,KAAKpC,MAAlD,CAAZ;AACA,mBAAQ,OAAOiE,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,CAAC,CAA7C;AACH;;AAED;;;;;;;;kDAK0B7B,W,EAAa;AACnC,gBAAI+B,YAAY,EAAhB;AACA,gBAAI,KAAK9C,mBAAT,EAA8B;AAC1B,oBAAIwE,QAAQ,KAAKpG,aAAL,CAAmBqG,yBAAnB,CAA6C1D,WAA7C,CAAZ;AACA,oBAAIc,IAAI2C,MAAM1C,MAAd;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,wBAAI2C,OAAOF,MAAM,CAAN,EAASE,IAApB;AACA5B,iCAAa4B,IAAb;;AAEA,wBAAI3C,IAAKF,IAAE,CAAX,EAAe;AACXiB,qCAAa,IAAb;AACH;AACJ;AACJ,aAXD,MAWO;AACH;AACAA,4BAAY,KAAKpE,UAAL,CAAgB,QAAhB,EAA0B,EAACqC,aAAa,KAAKA,WAAnB,EAA1B,CAAZ;AACH;;AAED,mBAAO+B,SAAP;AACH;;AAED;;;;;;;;;qDAM6BN,gB,EAAkB;AAC3C,gBAAImC,UAAUnC,iBAAiBE,cAAjB,KAAoC,IAAlD;AACA,gBAAIY,cAAcd,iBAAiBc,WAAnC;;AAEA;AACA,gBAAIpC,SAAS,CAAb,CAL2C,CAK3B;;AAEhB,gBAAIoC,WAAJ,EAAiB;AACbpC,yBAAS,CAAT;AACH,aAFD,MAEO,IAAIyD,OAAJ,EAAa;AAChBzD,yBAAS,CAAT;AACH;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;iDAKyBO,a,EAAe;AACpC,mBAAO,KAAKpD,WAAL,CAAiBuG,wBAAjB,CAA0CnD,aAA1C,CAAP;AACH;;AAED;;;;;;;wCAIgB;AACZ,gBAAIoD,aAAa,IAAjB;;AAEA,gBAAI,KAAKvF,WAAL,IAAoB,IAAxB,EAA8B;AAC1BuF,6BAAa,KAAKvF,WAAL,CAAiBuF,UAA9B;AACH;;AAED,gBAAIA,cAAc,IAAd,IAAsB,KAAKC,UAA/B,EAA2C;AACvC,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,WAAW/C,MAA/B,EAAuCiD,GAAvC,EAA4C;AACxC,wBAAIC,YAAYH,WAAWE,CAAX,CAAhB;;AAEAC,8BAAUF,UAAV,GAAuB,IAAvB;AACH;AACJ;;AAED,gBAAID,cAAc,IAAd,IAAsB,KAAKvF,WAAL,CAAiB2F,eAA3C,EAA4D;AACxD,qBAAKF,IAAI,CAAT,EAAYA,IAAIF,WAAW/C,MAA3B,EAAmCiD,GAAnC,EAAwC;AACpCC,gCAAYH,WAAWE,CAAX,CAAZ;;AAEAC,8BAAUC,eAAV,GAA4B,IAA5B;AACH;AACJ;;AAED,mBAAOJ,UAAP;AACH;;;yCAEgBrD,W,EAAa;AAC1B,gBAAIwD,YAAY,IAAhB;;AAEA,gBAAIxD,eAAe,IAAnB,EAAyB;AACrB,oBAAIqD,aAAa,KAAKK,aAAL,EAAjB;;AAEA,oBAAIL,cAAc,IAAlB,EAAwB;AACpB,yBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,WAAW/C,MAA/B,EAAuCiD,GAAvC,EAA4C;AACxC,4BAAII,gBAAgBN,WAAWE,CAAX,CAApB;;AAEA,4BAAII,iBAAiB,IAArB,EAA2B;AACvB,gCAAI3D,gBAAgB2D,cAAcnD,EAAlC,EAAsC;AAClCgD,4CAAYG,aAAZ;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAOH,SAAP;AACH;;AAED;;;;;;;;;2EAMmDjE,W,EAAcS,W,EAAa;AAC1E,gBAAI0C,iBAAiB,IAArB;;AAEA,gBAAInD,eAAe,IAAf,IAAuBS,eAAe,IAA1C,EAAgD;AAC5C;AACA0C,iCAAiB,KAAKzF,kBAAL,CAAwB2G,wDAAxB,CAAiFrE,WAAjF,EAA8F,KAAKpC,MAAnG,EAA2G6C,WAA3G,CAAjB;AACH;;AAED,mBAAO0C,cAAP;AACH;;AAED;;;;;;;;;oFAM4DnD,W,EAAapC,M,EAAQ6C,W,EAAa;AAC1F,gBAAI0C,iBAAiB,IAArB;;AAEA,gBAAInD,eAAe,IAAf,IAAuBpC,UAAU,IAAjC,IAAyC6C,eAAe,IAA5D,EAAkE;;AAE9D;AACA0C,iCAAiB,KAAKzF,kBAAL,CAAwB2G,wDAAxB,CAAiFrE,WAAjF,EAA8FpC,MAA9F,EAAsG6C,WAAtG,CAAjB;AACH;;AAED,mBAAO0C,cAAP;AACH;;;iEAEwCnD,W,EAAapC,M,EAAQ;AAC1D,gBAAIoF,kBAAkB,KAAKtF,kBAAL,CAAwB4G,wCAAxB,CAAiEtE,WAAjE,EAA8EpC,MAA9E,CAAtB;;AAEA;;AAEA,mBAAOoF,eAAP;AACH;;;iDAEwBhD,W,EAAa;AAClC,mBAAO,KAAK3C,aAAL,CAAmBkH,wBAAnB,CAA4CvE,WAA5C,CAAP;AACH;;;yDAEgCwE,U,EAAYzE,I,EAAM;AAC/C,mBAAO,KAAK3C,iBAAL,CAAuBqH,gCAAvB,CAAwDD,UAAxD,EAAoEzE,IAApE,CAAP;AACH;;;2DAEkCC,W,EAAapC,M,EAAQ;AACpD,gBAAIiE,QAAQ,KAAKzE,iBAAL,CAAuBoG,QAAvB,CAAgCxD,WAAhC,EAA6CpC,MAA7C,CAAZ;AACA,mBAAQ,OAAOiE,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,GAA5C;AACH;;;qCAEY2C,U,EAAY;AACrB,gBAAIlE,aAAa,KAAKjB,kBAAL,CAAwBmF,aAAa,QAArC,CAAjB;AACA,iBAAKpH,iBAAL,CAAuBsH,cAAvB,CAAsCpE,UAAtC;AACH;;;uCAEckE,U,EAAY;AACvB,gBAAIlE,aAAa,KAAKjB,kBAAL,CAAwBmF,aAAa,UAArC,CAAjB;AACA,iBAAKpH,iBAAL,CAAuBsH,cAAvB,CAAsCpE,UAAtC;AACH;;;qDAE4B;AACzB,iBAAKgE,wCAAL;AACH;;AAED;;;;;;;;iDAKyBtE,W,EAAa;AAClC,mBAAO,KAAK3C,aAAL,CAAmBsH,wBAAnB,CAA4C3E,WAA5C,CAAP;AACH;;AAED;;;;;;2CAGmB;AACf,mBAAO,KAAKtC,kBAAL,CAAwBkH,gBAAxB,EAAP;AACH;;AAED;;;;;;;;0CAKkBhH,M,EAAQ;AACtB;AACA,gBAAIiH,gBAAgB,KAAKD,gBAAL,EAApB;AACA,gBAAIE,WAAWD,cAAcC,QAA7B;;AAEA;AACA,gBAAIC,uBAAuB,KAAKtH,oBAAL,CAA0BuH,iBAA1B,CAA4CpH,MAA5C,EAAoDkH,QAApD,CAA3B;;AAEA,mBAAOC,oBAAP;AACH;;AAED;;;;;;;;8CAKsB;AAClB;AACA,gBAAIF,gBAAgB,KAAKnH,kBAAL,CAAwBkH,gBAAxB,EAApB;AACA,gBAAIE,WAAWD,cAAcC,QAA7B;;AAEA;AACA,gBAAIG,eAAe,KAAKxH,oBAAL,CAA0ByH,mBAA1B,CAA8C,KAAKtH,MAAnD,EAA2DkH,QAA3D,CAAnB;;AAEA,mBAAQG,iBAAiB,IAAjB,GAAwB,KAAxB,GAAgC,KAAKlI,OAAL,CAAa,QAAb,EAAuBkI,YAAvB,EAAqC,CAArC,CAAxC;AACH;;AAED;;;;;;;sDAI8B;AAC1B;AACA,gBAAIJ,gBAAgB,KAAKD,gBAAL,EAApB;AACA,gBAAIE,WAAWD,cAAcC,QAA7B;;AAEA;AACA,gBAAIK,QAAQ,KAAK1H,oBAAL,CAA0B2H,qBAA1B,CAAgD,KAAKlH,QAAL,CAAc+C,EAA9D,EAAkE6D,QAAlE,EAA4E/D,MAAxF;;AAEA,mBAAOoE,KAAP;AACH;;AAED;;;;;;;;mDAK2BnF,W,EAAa;AACpC,mBAAQ,KAAK4E,gBAAL,GAAwBS,UAAxB,KAAuC,KAAvC,IACJ,KAAKV,wBAAL,CAA8B3E,WAA9B,MAA+C,KAAK4E,gBAAL,GAAwBE,QAD3E;AAEH;;;uCAEc9E,W,EAAasF,K,EAAO;AAC/B,iBAAKtG,kBAAL,CAAwBgB,WAAxB,IAAuC,CAAC,KAAKhB,kBAAL,CAAwBgB,WAAxB,CAAxC;AACH;;;iDAEwBsF,K,EAAOzF,K,EAAO;AAAA;;AACnC,gBAAI0F,SAAS1F,MAAM0F,MAAnB;AACA,gBAAIC,oBAAoBD,OAAOE,qBAAP,GAA+BC,GAAvD;;AAEA,iBAAKtH,gBAAL,GAAwBkH,KAAxB;AACA,iBAAKlH,gBAAL,GAAwB6D,QAAQC,IAAR,CAAa,KAAK9D,gBAAlB,CAAxB;;AAEA,iBAAKjB,QAAL,CAAc,YAAM;AAChB,uBAAKwI,YAAL,CAAkBJ,MAAlB,EAA0BC,iBAA1B;AACH,aAFD,EAEG,GAFH;AAIH;;;qCAEYD,M,EAAQC,iB,EAAmB;AACpC,gBAAII,uBAAuBL,OAAOE,qBAAP,GAA+BC,GAA1D;AACA,gBAAIG,QAAQL,oBAAoBI,oBAAhC;AACA,gBAAIlG,YAAYoG,QAAQpG,SAAxB;AACAoG,oBAAQpG,SAAR,GAAoBA,YAAYmG,KAAhC;AACH;;;;;;AAGL/I,sBAAsBiJ,OAAtB,GAAgC,CAC5B,SAD4B,EAE5B,QAF4B,EAG5B,QAH4B,EAI5B,cAJ4B,EAK5B,UAL4B,EAM5B,mBAN4B,EAO5B,eAP4B,EAQ5B,aAR4B,EAS5B,qBAT4B,EAU5B,gBAV4B,EAW5B,sBAX4B,EAY5B,oBAZ4B,CAAhC;;kBAeejJ,qB","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($filter,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$filter = $filter;\n        this.$state = $state;\n        this.$scope = $scope;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        // the max score for the node\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        this.hasMaxScore = (typeof this.maxScore === 'number');\n\n        let startNodeId = this.ProjectService.getStartNodeId();\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.hiddenComponents = [];\n\n        // TODO: add loading indicator\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\n\n            // field that will hold the node content\n            this.nodeContent = null;\n\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            this.periods = [];\n\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // field that will hold the node content\n                this.nodeContent = node;\n            }\n\n            this.workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n            this.workgroupsById = {}; // object that will hold workgroup names, statuses, scores, notifications, etc.\n            this.workVisibilityById = {}; // object that specifies whether student work is visible for each workgroup\n\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n\n            // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n            var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n\n            if (role === 'owner') {\n                // the teacher is the owner of the run and has full access\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'write') {\n                // the teacher is a shared teacher that can grade the student work\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'read') {\n                // the teacher is a shared teacher that can only view the student work\n                this.canViewStudentNames = false;\n                this.canGradeStudentWork = false;\n            }\n\n            this.annotationMappings = {};\n\n            this.componentStateHistory = [];\n\n            this.setWorkgroupsById();\n\n            // scroll to the top of the page when the page loads\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        });\n\n        this.$scope.$on('notificationAdded', (event, notification) => {\n            if (notification.type === 'CRaterResult') {\n                // there is a new CRaterResult notification\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                let workgroupId = notification.toWorkgroupId;\n                if (this.workgroupsById[workgroupId]) {\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('notificationChanged', (event, notification) => {\n            if (notification.type === 'CRaterResult') {\n                // a CRaterResult notification has changed\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                let workgroupId = notification.toWorkgroupId;\n                if (this.workgroupsById[workgroupId]) {\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('studentStatusReceived', (event, status) => {\n            // new student status received\n            let workgroupId = status.workgroupId;\n            let nodeId = status.previousComponentState.nodeId;\n            if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                // a workgroup has a new componentState for this node\n                this.updateWorkgroup(workgroupId);\n            }\n        });\n\n        this.$scope.$on('annotationReceived', (event, args) => {\n            let annotation = args.annotation;\n\n            if (annotation) {\n                let workgroupId = annotation.toWorkgroupId;\n                let nodeId = annotation.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new annotation for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('studentWorkReceived', (event, args) => {\n            let studentWork = args.studentWork;\n\n            if (studentWork != null) {\n                let workgroupId = studentWork.workgroupId;\n                let nodeId = studentWork.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new componentState for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        // save event when node grading view is displayed and save the nodeId that is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"nodeGradingViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Build the workgroupsById object\n     */\n    setWorkgroupsById() {\n        let l = this.workgroupIds.length;\n        for (let i = 0; i < l; i++) {\n            let id = this.workgroupIds[i];\n            this.workgroupsById[id] = {};\n            this.workVisibilityById[id] = false;\n\n            this.updateWorkgroup(id, true);\n        }\n    }\n\n    /**\n     * Update statuses, scores, notifications, etc. for a workgroup object\n     * @param workgroupID a workgroup ID number\n     * @param init Boolean whether we're in controller initialization or not\n     */\n    updateWorkgroup(workgroupId, init) {\n        let workgroup = this.workgroupsById[workgroupId];\n\n        if (workgroup) {\n            let alertNotifications = this.getAlertNotificationsByWorkgroupId(workgroupId);\n            workgroup.hasAlert = alertNotifications.length;\n            workgroup.hasNewAlert = this.workgroupHasNewAlert(alertNotifications);\n            let completionStatus = this.getNodeCompletionStatusByWorkgroupId(workgroupId);\n            workgroup.latestWorkTime = completionStatus.latestWorkTime;\n            workgroup.completionStatus = this.getWorkgroupCompletionStatus(completionStatus);\n            workgroup.score = this.getNodeScoreByWorkgroupId(workgroupId);\n            workgroup.usernames = this.getUsernamesByWorkgroupId(workgroupId);\n\n            if (!init) {\n                this.workgroupsById[workgroupId] = angular.copy(workgroup);\n            }\n        }\n    }\n\n    getAlertNotificationsByWorkgroupId(workgroupId) {\n        let args = {};\n        args.nodeId = this.nodeId;\n        args.workgroupId = workgroupId;\n        return this.NotificationService.getAlertNotifications(args);\n    }\n\n    workgroupHasNewAlert(alertNotifications) {\n        let newAlert = false;\n\n        let l = alertNotifications.length;\n        for (let i = 0; i < l; i++) {\n            let alert = alertNotifications[i];\n            if (!alert.timeDismissed) {\n                newAlert = true;\n                break;\n            }\n        }\n\n        return newAlert;\n    }\n\n    /**\n     * Returns an object with node completion status, latest work time, and latest annotation time\n     * for a workgroup for the current node\n     * @param workgroupId a workgroup ID number\n     * @returns Object with completion, latest work time, latest annotation time\n     */\n    getNodeCompletionStatusByWorkgroupId(workgroupId) {\n        let isCompleted = false;\n\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\n        let latestWorkTime = this.getLatestWorkTimeByWorkgroupId(workgroupId);\n        let latestAnnotationTime = this.getLatestAnnotationTimeByWorkgroupId(workgroupId);\n\n        if (latestWorkTime) {\n            // workgroup has at least one componentState for this node, so check if node is completed\n            let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n            let nodeStatus = studentStatus.nodeStatuses[this.nodeId];\n\n            if (nodeStatus) {\n                isCompleted = nodeStatus.isCompleted;\n            }\n        }\n\n        return {\n            isCompleted: isCompleted,\n            latestWorkTime: latestWorkTime,\n            latestAnnotationTime: latestAnnotationTime\n        };\n    }\n\n    getLatestWorkTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(this.nodeId);\n        let n = componentStates.length-1;\n\n        // loop through component states for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let componentState = componentStates[i];\n            if (componentState.workgroupId === workgroupId) {\n                // componentState is for given workgroupId\n                time = componentState.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    getLatestAnnotationTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(this.nodeId);\n        let n = annotations.length-1;\n\n        // loop through annotations for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let annotation = annotations[i];\n            // TODO: support checking for annotations from shared teachers\n            if (annotation.toWorkgroupId === workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\n                time = annotation.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * Returns the score for the current node for a given workgroupID\n     * @param workgroupId a workgroup ID number\n     * @returns Number score value (defaults to -1 if workgroup has no score)\n     */\n    getNodeScoreByWorkgroupId(workgroupId) {\n        let score = this.AnnotationService.getScore(workgroupId, this.nodeId);\n        return (typeof score === 'number' ? score : -1);\n    }\n\n    /**\n     * Returns the usernames for a given workgroupId\n     * @param workgroupId a workgroup ID number\n     * @returns String the workgroup usernames\n     */\n    getUsernamesByWorkgroupId(workgroupId) {\n        let usernames = '';\n        if (this.canViewStudentNames) {\n            let names = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n            let l = names.length;\n            for (let i = 0; i < l; i++) {\n                let name = names[0].name;\n                usernames += name;\n\n                if (i < (l-1)) {\n                    usernames += ', ';\n                }\n            }\n        } else {\n            // current user is not allowed to view student names, so return string with workgroupId\n            usernames = this.$translate('teamId', {workgroupId: this.workgroupId});\n        }\n\n        return usernames;\n    }\n\n    /**\n     * Returns a numerical status value for a given completion status object depending on node completion\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\n     * @param completionStatus Object\n     * @returns Integer status value\n     */\n    getWorkgroupCompletionStatus(completionStatus) {\n        let hasWork = completionStatus.latestWorkTime !== null;\n        let isCompleted = completionStatus.isCompleted;\n        \n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\n        let status = 0; // default\n\n        if (isCompleted) {\n            status = 2;\n        } else if (hasWork) {\n            status = 1;\n        }\n\n        return status;\n    }\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    }\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    }\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    }\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    }\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n    }\n\n    getNodeScoreByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        let score = this.AnnotationService.getScore(workgroupId, nodeId);\n        return (typeof score === 'number' ? score : '-');\n    }\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    }\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the average score for the node\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\n\n        return (averageScore === null ? 'N/A' : this.$filter('number')(averageScore, 1));\n    }\n\n    /**\n     * Get the number of students in the current period\n     * @returns the number of students that are in the period\n     */\n    getNumberOfStudentsInPeriod() {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        let count = this.StudentStatusService.getWorkgroupIdsOnNode(this.rootNode.id, periodId).length;\n\n        return count;\n    }\n\n    /**\n     * Checks whether a workgroup is in the current period\n     * @param workgroupId the workgroupId to look for\n     * @returns boolean whether the workgroup is in the current period\n     */\n    isWorkgroupInCurrentPeriod(workgroupId) {\n        return (this.getCurrentPeriod().periodName === \"All\" ||\n            this.getPeriodIdByWorkgroupId(workgroupId) === this.getCurrentPeriod().periodId);\n    }\n\n    onUpdateExpand(workgroupId, value) {\n        this.workVisibilityById[workgroupId] = !this.workVisibilityById[workgroupId];\n    }\n\n    onUpdateHiddenComponents(value, event) {\n        let target = event.target;\n        let viewportOffsetTop = target.getBoundingClientRect().top;\n\n        this.hiddenComponents = value;\n        this.hiddenComponents = angular.copy(this.hiddenComponents);\n\n        this.$timeout(() => {\n            this.updateScroll(target, viewportOffsetTop);\n        }, 100);\n\n    }\n\n    updateScroll(target, viewportOffsetTop) {\n        let newViewportOffsetTop = target.getBoundingClientRect().top;\n        let delta = viewportOffsetTop - newViewportOffsetTop;\n        let scrollTop = content.scrollTop;\n        content.scrollTop = scrollTop - delta; \n    }\n}\n\nNodeGradingController.$inject = [\n    '$filter',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nexport default NodeGradingController;\n"]}