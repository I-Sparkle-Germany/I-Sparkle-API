{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$filter","$state","$stateParams","AnnotationService","ConfigService","NodeService","ProjectService","StudentStatusService","TeacherDataService","nodeId","maxScore","getMaxScoreForNode","hasMaxScore","retrieveStudentDataByNodeId","then","nodeContent","teacherWorkgroupId","getWorkgroupId","periods","node","getNodeById","workgroupIds","getClassmateWorkgroupIds","canViewStudentNames","canGradeStudentWork","role","getTeacherRole","annotationMappings","componentStateHistory","document","body","scrollTop","documentElement","context","componentId","componentType","category","event","data","saveEvent","getComponentTemplatePath","components","isDisabled","c","length","component","lockAfterSubmit","getComponents","tempComponent","id","workgroupId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","componentStates","getComponentStatesByWorkgroupIdAndNodeId","getUserNameByWorkgroupId","stepWorkId","type","getAnnotationByStepWorkIdAndType","score","getScore","annotation","saveAnnotation","getPeriodIdByWorkgroupId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","averageScore","getNodeAverageScore","periodName","$inject"],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($filter,\n                $state,\n                $stateParams,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$filter = $filter;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        // the max score for the node\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        this.hasMaxScore = (typeof this.maxScore === 'number');\n\n        // TODO: add loading indicator\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\n\n            // field that will hold the node content\n            this.nodeContent = null;\n\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            this.periods = [];\n\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // field that will hold the node content\n                this.nodeContent = node;\n            }\n\n            this.workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n\n            // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n            var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n\n            if (role === 'owner') {\n                // the teacher is the owner of the run and has full access\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'write') {\n                // the teacher is a shared teacher that can grade the student work\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'read') {\n                // the teacher is a shared teacher that can only view the student work\n                this.canViewStudentNames = false;\n                this.canGradeStudentWork = false;\n            }\n\n            this.annotationMappings = {};\n\n            this.componentStateHistory = [];\n\n            // scroll to the top of the page when the page loads\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        });\n\n        // save event when node grading view is displayed and save the nodeId that is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"studentProgressViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    }\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    }\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    }\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    }\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n    }\n\n    getNodeScoreByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        let score = this.AnnotationService.getScore(workgroupId, nodeId);\n        return (typeof score === 'number' ? score : '-');\n    }\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    }\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the average score for the node\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\n\n        return (averageScore === null ? 'N/A' : this.$filter('number')(averageScore, 1));\n    }\n\n    /**\n     * Checks whether a workgroup is in the current period\n     * @param workgroupId the workgroupId to look for\n     * @returns boolean whether the workgroup is in the current period\n     */\n    isWorkgroupInCurrentPeriod(workgroupId) {\n        return (this.getCurrentPeriod().periodName === \"All\" ||\n            this.getPeriodIdByWorkgroupId(workgroupId) === this.getCurrentPeriod().periodId);\n    }\n}\n\nNodeGradingController.$inject = [\n    '$filter',\n    '$state',\n    '$stateParams',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nexport default NodeGradingController;\n"]}