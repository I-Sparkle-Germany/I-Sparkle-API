{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$state","$stateParams","AnnotationService","ConfigService","NodeService","ProjectService","StudentStatusService","TeacherDataService","nodeId","retrieveStudentDataByNodeId","then","nodeTitle","nodeContent","teacherWorkgroupId","getWorkgroupId","periods","node","getNodeById","position","getPositionById","title","workgroupIds","getClassmateWorkgroupIds","canViewStudentNames","canGradeStudentWork","role","getTeacherRole","annotationMappings","componentStateHistory","document","body","scrollTop","documentElement","componentType","getComponentTemplatePath","components","isDisabled","c","length","component","lockAfterSubmit","componentId","getComponents","tempComponent","id","workgroupId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","componentStates","getComponentStatesByWorkgroupIdAndNodeId","getUserNameByWorkgroupId","stepWorkId","type","getAnnotationByStepWorkIdAndType","annotation","saveAnnotation","getPeriodIdByWorkgroupId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","$inject"],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($state,\n                $stateParams,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        // TODO: add loading indicator\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\n            this.nodeTitle = null;\n\n            // field that will hold the node content\n            this.nodeContent = null;\n\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            this.periods = [];\n\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n                var position = this.ProjectService.getPositionById(this.nodeId);\n\n                if (position != null) {\n                    this.nodeTitle = position + ' ' + node.title;\n                } else {\n                    this.nodeTitle = node.title;\n                }\n\n\n                // field that will hold the node content\n                this.nodeContent = node;\n            }\n\n            this.workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n\n            // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n            var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n\n            if (role === 'owner') {\n                // the teacher is the owner of the run and has full access\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'write') {\n                // the teacher is a shared teacher that can grade the student work\n                this.canViewStudentNames = true;\n                this.canGradeStudentWork = true;\n            } else if (role === 'read') {\n                // the teacher is a shared teacher that can only view the student work\n                this.canViewStudentNames = false;\n                this.canGradeStudentWork = false;\n            }\n\n            this.annotationMappings = {};\n\n            this.componentStateHistory = [];\n\n            // scroll to the top of the page when the page loads\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        });\n    }\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    }\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    }\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    }\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    }\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n    }\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    }\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n}\n\nNodeGradingController.$inject = [\n    '$state',\n    '$stateParams',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nexport default NodeGradingController;\n"]}