{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$filter","$mdDialog","$scope","$state","$stateParams","$timeout","AnnotationService","ConfigService","NodeService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","nodeId","maxScore","getMaxScoreForNode","nodeHasWork","startNodeId","getStartNodeId","rootNode","getRootNode","sort","nodeGradingSort","hiddenComponents","showRubricButton","retrieveStudentDataByNodeId","then","nodeContent","teacherWorkgroupId","getWorkgroupId","periods","node","getNodeById","workgroups","getClassmateUserInfos","workgroupsById","workVisibilityById","workgroupInViewById","canViewStudentNames","canGradeStudentWork","permissions","getPermissions","annotationMappings","componentStateHistory","setWorkgroupsById","nodeHasRubric","document","body","scrollTop","documentElement","$on","event","args","notification","type","workgroupId","toWorkgroupId","updateWorkgroup","annotation","studentWork","context","componentId","componentType","category","data","saveEvent","l","length","i","id","init","workgroup","alertNotifications","getAlertNotificationsByWorkgroupId","hasAlert","hasNewAlert","workgroupHasNewAlert","completionStatus","getNodeCompletionStatusByWorkgroupId","hasNewWork","getWorkgroupCompletionStatus","score","getNodeScoreByWorkgroupId","angular","copy","getAlertNotifications","newAlert","alert","timeDismissed","isCompleted","latestWorkTime","getLatestWorkTimeByWorkgroupId","latestAnnotationTime","getLatestAnnotationTimeByWorkgroupId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","isVisited","time","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getScore","hasWork","status","getComponentTemplatePath","components","isDisabled","c","component","lockAfterSubmit","getComponents","tempComponent","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","getComponentStatesByWorkgroupIdAndNodeId","getUserNameByWorkgroupId","stepWorkId","getAnnotationByStepWorkIdAndType","saveAnnotation","getPeriodIdByWorkgroupId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","averageScore","getNodeAverageScore","count","getWorkgroupIdsOnNode","show","currentPeriodId","currentWorkgroup","getCurrentWorkgroup","parseInt","target","viewportOffsetTop","newViewportOffsetTop","getBoundingClientRect","top","delta","content","nodeRubric","rubric","componentRubric","$event","stepNumberAndTitle","getNodePositionAndTitleByNodeId","rubricTitle","dialogHeader","dialogActions","dialogContent","dialogString","template","fullscreen","controller","DialogController","openInNewWindow","w","window","open","windowHeader","rubricContent","getElementById","innerHTML","windowString","write","hide","close","targetEvent","clickOutsideToClose","escapeToClose","value","orderBy","isExpandAll","updateScroll","inview","$inject"],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\n\nclass NodeGradingController {\n\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                $state,\n                $stateParams,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService) {\n\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$state = $state;\n        this.$scope = $scope;\n        this.$stateParams = $stateParams;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.nodeId = this.$stateParams.nodeId;\n\n        // the max score for the node\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        this.nodeHasWork = this.ProjectService.nodeHasWork(this.nodeId);\n\n        let startNodeId = this.ProjectService.getStartNodeId();\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.sort = this.TeacherDataService.nodeGradingSort;\n\n        this.hiddenComponents = [];\n\n        this.showRubricButton = false;\n\n        // TODO: add loading indicator\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\n\n            // field that will hold the node content\n            this.nodeContent = null;\n\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            this.periods = [];\n\n            var node = this.ProjectService.getNodeById(this.nodeId);\n\n            if (node != null) {\n\n                // field that will hold the node content\n                this.nodeContent = node;\n            }\n\n            this.workgroups = this.ConfigService.getClassmateUserInfos();\n            this.workgroupsById = {}; // object that will hold workgroup names, statuses, scores, notifications, etc.\n            this.workVisibilityById = {}; // object that specifies whether student work is visible for each workgroup\n            this.workgroupInViewById = {}; // object that holds whether the workgroup is in view or not\n\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n\n            let permissions = this.ConfigService.getPermissions();\n            this.canViewStudentNames = permissions.canViewStudentNames;\n            this.canGradeStudentWork = permissions.canGradeStudentWork;\n\n            this.annotationMappings = {};\n\n            this.componentStateHistory = [];\n\n            this.setWorkgroupsById();\n\n            this.showRubricButton = this.nodeHasRubric();\n\n            // scroll to the top of the page when the page loads\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        });\n\n        this.$scope.$on('projectSaved', (event, args) => {\n            // update maxScore\n            this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\n        });\n\n        this.$scope.$on('notificationAdded', (event, notification) => {\n            if (notification.type === 'CRaterResult') {\n                // there is a new CRaterResult notification\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                let workgroupId = notification.toWorkgroupId;\n                if (this.workgroupsById[workgroupId]) {\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('notificationChanged', (event, notification) => {\n            if (notification.type === 'CRaterResult') {\n                // a CRaterResult notification has changed\n                // TODO: expand to encompass other notification types that should be shown to teacher\n                let workgroupId = notification.toWorkgroupId;\n                if (this.workgroupsById[workgroupId]) {\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('annotationReceived', (event, args) => {\n            let annotation = args.annotation;\n\n            if (annotation) {\n                let workgroupId = annotation.toWorkgroupId;\n                let nodeId = annotation.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new annotation for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        this.$scope.$on('studentWorkReceived', (event, args) => {\n            let studentWork = args.studentWork;\n\n            if (studentWork != null) {\n                let workgroupId = studentWork.workgroupId;\n                let nodeId = studentWork.nodeId;\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\n                    // a workgroup has a new componentState for this node\n                    this.updateWorkgroup(workgroupId);\n                }\n            }\n        });\n\n        // save event when node grading view is displayed and save the nodeId that is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"nodeGradingViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Build the workgroupsById object\n     */\n    setWorkgroupsById() {\n        let l = this.workgroups.length;\n        for (let i = 0; i < l; i++) {\n            let id = this.workgroups[i].workgroupId;\n            this.workgroupsById[id] = this.workgroups[i];\n            this.workVisibilityById[id] = false;\n\n            this.updateWorkgroup(id, true);\n        }\n    }\n\n    /**\n     * Update statuses, scores, notifications, etc. for a workgroup object\n     * @param workgroupID a workgroup ID number\n     * @param init Boolean whether we're in controller initialization or not\n     */\n    updateWorkgroup(workgroupId, init) {\n        let workgroup = this.workgroupsById[workgroupId];\n\n        if (workgroup) {\n            let alertNotifications = this.getAlertNotificationsByWorkgroupId(workgroupId);\n            workgroup.hasAlert = alertNotifications.length;\n            workgroup.hasNewAlert = this.workgroupHasNewAlert(alertNotifications);\n            let completionStatus = this.getNodeCompletionStatusByWorkgroupId(workgroupId);\n            workgroup.hasNewWork = completionStatus.hasNewWork;\n            workgroup.completionStatus = this.getWorkgroupCompletionStatus(completionStatus);\n            workgroup.score = this.getNodeScoreByWorkgroupId(workgroupId);\n\n            if (!init) {\n                this.workgroupsById[workgroupId] = angular.copy(workgroup);\n            }\n        }\n    }\n\n    getAlertNotificationsByWorkgroupId(workgroupId) {\n        let args = {};\n        args.nodeId = this.nodeId;\n        args.workgroupId = workgroupId;\n        return this.NotificationService.getAlertNotifications(args);\n    }\n\n    workgroupHasNewAlert(alertNotifications) {\n        let newAlert = false;\n\n        let l = alertNotifications.length;\n        for (let i = 0; i < l; i++) {\n            let alert = alertNotifications[i];\n            if (!alert.timeDismissed) {\n                newAlert = true;\n                break;\n            }\n        }\n\n        return newAlert;\n    }\n\n    /**\n     * Returns an object with node completion status, latest work time, and latest annotation time\n     * for a workgroup for the current node\n     * @param workgroupId a workgroup ID number\n     * @returns Object with completion, latest work time, latest annotation time\n     */\n    getNodeCompletionStatusByWorkgroupId(workgroupId) {\n        let isCompleted = false;\n\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\n        let latestWorkTime = this.getLatestWorkTimeByWorkgroupId(workgroupId);\n\n        let latestAnnotationTime = this.getLatestAnnotationTimeByWorkgroupId(workgroupId);\n        let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n        if (studentStatus != null) {\n            let nodeStatus = studentStatus.nodeStatuses[this.nodeId];\n\n            if (latestWorkTime) {\n                // workgroup has at least one componentState for this node, so check if node is completed\n\n                if (nodeStatus) {\n                    isCompleted = nodeStatus.isCompleted;\n                }\n            }\n\n            if (!this.ProjectService.nodeHasWork(this.nodeId)) {\n                // the step does not generate any work so completion = visited\n                if (nodeStatus) {\n                    isCompleted = nodeStatus.isVisited;\n                }\n            }\n        }\n\n        return {\n            isCompleted: isCompleted,\n            latestWorkTime: latestWorkTime,\n            latestAnnotationTime: latestAnnotationTime\n        };\n    }\n\n    getLatestWorkTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(this.nodeId);\n        let n = componentStates.length-1;\n\n        // loop through component states for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let componentState = componentStates[i];\n            if (componentState.workgroupId === workgroupId) {\n                // componentState is for given workgroupId\n                time = componentState.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    getLatestAnnotationTimeByWorkgroupId(workgroupId) {\n        let time = null;\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(this.nodeId);\n        let n = annotations.length-1;\n\n        // loop through annotations for this node, starting with most recent\n        for (let i = n; i > -1; i--) {\n            let annotation = annotations[i];\n            // TODO: support checking for annotations from shared teachers\n            if (annotation.toWorkgroupId === workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\n                time = annotation.serverSaveTime;\n                break;\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * Returns the score for the current node for a given workgroupID\n     * @param workgroupId a workgroup ID number\n     * @returns Number score value (defaults to -1 if workgroup has no score)\n     */\n    getNodeScoreByWorkgroupId(workgroupId) {\n        let score = this.AnnotationService.getScore(workgroupId, this.nodeId);\n        return (typeof score === 'number' ? score : -1);\n    }\n\n    /**\n     * Returns a numerical status value for a given completion status object depending on node completion\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\n     * @param completionStatus Object\n     * @returns Integer status value\n     */\n    getWorkgroupCompletionStatus(completionStatus) {\n        let hasWork = completionStatus.latestWorkTime !== null;\n        let isCompleted = completionStatus.isCompleted;\n\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\n        let status = 0; // default\n\n        if (isCompleted) {\n            status = 2;\n        } else if (hasWork) {\n            status = 1;\n        }\n\n        return status;\n    }\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    }\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    }\n\n    getComponentById(componentId) {\n        var component = null;\n\n        if (componentId != null) {\n            var components = this.getComponents();\n\n            if (components != null) {\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        if (componentId === tempComponent.id) {\n                            component = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return component;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && componentId != null) {\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @param the workgroupId id of Workgroup who created the component state\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\n\n        return componentStates;\n    }\n\n    getUserNameByWorkgroupId(workgroupId) {\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\n    }\n\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\n    }\n\n    getNodeScoreByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        let score = this.AnnotationService.getScore(workgroupId, nodeId);\n        return (typeof score === 'number' ? score : '-');\n    }\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    setupComponentStateHistory() {\n        this.getComponentStatesByWorkgroupIdAndNodeId()\n    }\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id for the workgroup id\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore() {\n        // get the currently selected period\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the average score for the node\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\n\n        if (averageScore === null) {\n            averageScore = 'N/A';\n        } else {\n            averageScore = this.$filter('number')(averageScore, 1);\n        }\n\n        return averageScore;\n    }\n\n    /**\n     * Get the number of students in the current period\n     * @returns the number of students that are in the period\n     */\n    getNumberOfStudentsInPeriod() {\n        // get the currently selected period\n        let currentPeriod = this.getCurrentPeriod();\n        let periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        let count = this.StudentStatusService.getWorkgroupIdsOnNode(this.rootNode.id, periodId).length;\n\n        return count;\n    }\n\n    /**\n     * Checks whether a workgroup should be shown\n     * @param workgroupId the workgroupId to look for\n     * @returns boolean whether the workgroup should be shown\n     */\n    isWorkgroupShown(workgroupId) {\n        let show = false;\n\n        let currentPeriodId = this.getCurrentPeriod().periodId;\n        let workgroup = this.workgroupsById[workgroupId];\n        let periodId = workgroup.periodId;\n\n        if (currentPeriodId === -1 || currentPeriodId === periodId) {\n            // workgroup is in current period\n            let currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\n            if (currentWorkgroup) {\n                // there is a currently selected workgroup, so check if this one matches\n                if (currentWorkgroup.workgroupId === parseInt(workgroupId)) {\n                    // workgroupIds match, so show this one\n                    show = true;\n                }\n            } else {\n                // there is no currently selected workgroup, so show this one\n                show = true;\n            }\n        }\n\n        return show;\n    }\n\n    updateScroll(target, viewportOffsetTop) {\n        let newViewportOffsetTop = target.getBoundingClientRect().top;\n        let delta = viewportOffsetTop - newViewportOffsetTop;\n        let scrollTop = content.scrollTop;\n        content.scrollTop = scrollTop - delta;\n    }\n\n    /**\n     * Check if the step has a rubric or if any of the components in the step\n     * have a rubric\n     * @return whether the step or any of its components have a rubric\n     */\n    nodeHasRubric() {\n\n        if (this.nodeContent != null) {\n\n            // get the step rubric if any\n            var nodeRubric = this.nodeContent.rubric;\n\n            if (nodeRubric != null && nodeRubric != '') {\n                // the step has a rubric\n                return true;\n            }\n\n            // get the components\n            var components = this.nodeContent.components;\n\n            if (components != null && components.length != 0) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get a component rubric\n                        var componentRubric = component.rubric;\n\n                        if (componentRubric != null && componentRubric != '') {\n                            // a component has a rubric\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Show the rubric in the grading view. We will show the step rubric and the\n     * component rubrics.\n     */\n    showRubric($event) {\n\n        // get the step number and title\n        let stepNumberAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId);\n        let rubricTitle = this.$translate('stepInfo');\n\n        /*\n         * create the header for the popup that contains the project title,\n         * 'Open in New Tab' button, and 'Close' button\n         */\n        let dialogHeader =\n            `<md-toolbar>\n                <div class=\"md-toolbar-tools gray-darkest-bg\">\n                    <h2>${ stepNumberAndTitle }</h2>\n                </div>\n            </md-toolbar>`;\n\n        let dialogActions =\n            `<md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                <md-button class=\"md-primary\" ng-click=\"openInNewWindow()\" aria-label=\"{{ 'openInNewWindow' | translate }}\">{{ 'openInNewWindow' | translate }}</md-button>\n                <md-button class=\"md-primary\" ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\n            </md-dialog-actions>`;\n\n        let dialogContent =\n            `<md-dialog-content class=\"gray-lighter-bg\">\n                <div class=\"md-dialog-content\" id=\"nodeInfo_${ this.nodeId }\">\n                    <node-info node-id=\"${ this.nodeId }\"></node-info>\n                </div>\n            </md-dialog-content>`;\n\n        // create the dialog string\n        let dialogString = `<md-dialog class=\"dialog--wider\" aria-label=\"${ stepNumberAndTitle } - ${ rubricTitle }\">${ dialogHeader }${  dialogContent }${ dialogActions }</md-dialog>`;\n        let nodeId = this.nodeId;\n\n        // display the rubric in a popup\n        this.$mdDialog.show({\n            template : dialogString,\n            fullscreen: true,\n            controller: ['$scope', '$mdDialog',\n                function DialogController($scope, $mdDialog) {\n\n                    // display the rubric in a new tab\n                    $scope.openInNewWindow = function() {\n\n                        // open a new tab\n                        let w = window.open('', '_blank');\n\n                        /*\n                         * create the header for the new window that contains the project title\n                         */\n                        let windowHeader =\n                            `<md-toolbar class=\"layout-row\">\n                                <div class=\"md-toolbar-tools gray-darkest-bg\" style=\"color: #ffffff;\">\n                                    <h2>${ stepNumberAndTitle }</h2>\n                                </div>\n                            </md-toolbar>`;\n\n                        let rubricContent = document.getElementById('nodeInfo_' + nodeId).innerHTML;\n\n                        // create the window string\n                        let windowString =\n                            `<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' />\n                            <link rel='stylesheet' href='../wise5/themes/default/style/monitor.css'>\n                            <link rel='stylesheet' href='../wise5/themes/default/style/angular-material.css'>\n                            <link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' />\n                            <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic%7CMaterial+Icons\" media=\"all\">\n                            <body class=\"layout-column\">\n                                <div class=\"layout-column\">${ windowHeader }<md-content class=\"md-padding\">${ rubricContent }</div></md-content></div>\n                            </body>`;\n\n                        // write the rubric content to the new tab\n                        w.document.write(windowString);\n\n                        // close the popup\n                        $mdDialog.hide();\n                    }\n\n                    // close the popup\n                    $scope.close = () => {\n                        $mdDialog.hide();\n                    }\n                }\n            ],\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true\n        });\n    }\n\n    setSort(value) {\n\n        switch (value) {\n            case 'team':\n                if (this.sort === 'team') {\n                    this.sort = '-team';\n                } else {\n                    this.sort = 'team';\n                }\n                break;\n            case 'status':\n                if (this.sort === 'status') {\n                    this.sort = '-status';\n                } else {\n                    this.sort = 'status';\n                }\n                break;\n            case 'score':\n                if (this.sort === 'score') {\n                    this.sort = '-score';\n                } else {\n                    this.sort = 'score';\n                }\n                break;\n        }\n\n        // update value in the teacher data service so we can persist across view instances and current node changes\n        this.TeacherDataService.nodeGradingSort = this.sort;\n    }\n\n    getOrderBy() {\n        let orderBy = [];\n\n        switch (this.sort) {\n            case 'team':\n                orderBy = ['displayNames'];\n                break;\n            case '-team':\n                orderBy = ['-displayNames'];\n                break;\n            case 'status':\n                orderBy = ['completionStatus', 'displayNames'];\n                break;\n            case '-status':\n                orderBy = ['-completionStatus', 'displayNames'];\n                break;\n            case 'score':\n                orderBy = ['score', 'displayNames'];\n                break;\n            case '-score':\n                orderBy = ['-score', 'displayNames'];\n                break;\n        }\n\n        return orderBy;\n    }\n\n    /**\n     * Expand all workgroups to show student work\n     */\n    expandAll() {\n\n        // loop through all the workgroups\n        for (let i = 0; i < this.workgroups.length; i++) {\n\n            // get a workgroup id\n            let id = this.workgroups[i].workgroupId;\n\n            // check if the workgroup is currently in view\n            if (this.workgroupInViewById[id]) {\n                // the workgroup is currently in view so we will expand it\n                this.workVisibilityById[id] = true;\n            }\n        }\n\n        /*\n         * set the boolean flag to denote that we are currently expanding\n         * all the workgroups\n         */\n        this.isExpandAll = true;\n    }\n\n    /**\n     * Collapse all workgroups to hide student work\n     */\n    collapseAll() {\n        let n = this.workgroups.length;\n\n        for (let i = 0; i < n; i++) {\n            let id = this.workgroups[i].workgroupId;\n            this.workVisibilityById[id] = false;\n        }\n\n        /*\n         * set the boolean flag to denote that we are not currently expanding\n         * all the workgroups\n         */\n        this.isExpandAll = false;\n    }\n\n    onUpdateExpand(workgroupId, value) {\n        this.workVisibilityById[workgroupId] = !this.workVisibilityById[workgroupId];\n    }\n\n    onUpdateHiddenComponents(value, event) {\n        let target = event.target;\n        let viewportOffsetTop = target.getBoundingClientRect().top;\n\n        this.hiddenComponents = value;\n        this.hiddenComponents = angular.copy(this.hiddenComponents);\n\n        this.$timeout(() => {\n            this.updateScroll(target, viewportOffsetTop);\n        }, 200);\n\n    }\n\n    /**\n     * A workgroup row has either come into view or gone out of view\n     * @param workgroupId the workgroup id that has come into view or gone out\n     * of view\n     * @param inview whether the row is in view or not\n     */\n    workgroupInView(workgroupId, inview) {\n\n        // remember whether the workgroup is in view or not\n        this.workgroupInViewById[workgroupId] = inview;\n\n        if (this.isExpandAll) {\n            // we are currently in expand all mode\n\n            if (inview) {\n                // the workgroup row is in view so we will expand it\n                this.workVisibilityById[workgroupId] = true;\n            }\n        }\n    }\n}\n\nNodeGradingController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService'\n];\n\nexport default NodeGradingController;\n"]}