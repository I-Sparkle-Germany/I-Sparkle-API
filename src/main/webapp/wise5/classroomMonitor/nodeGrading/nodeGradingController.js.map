{"version":3,"sources":["nodeGradingController.es6"],"names":["NodeGradingController","$filter","$mdDialog","$scope","$state","$stateParams","$timeout","AnnotationService","ConfigService","NodeService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","nodeId","maxScore","getMaxScoreForNode","nodeHasWork","startNodeId","getStartNodeId","rootNode","getRootNode","sort","nodeGradingSort","hiddenComponents","showRubricButton","retrieveStudentDataByNodeId","then","nodeContent","teacherWorkgroupId","getWorkgroupId","periods","node","getNodeById","getComponentIdsWithoutWork","workgroups","getClassmateUserInfos","workgroupsById","workVisibilityById","workgroupInViewById","canViewStudentNames","canGradeStudentWork","permissions","getPermissions","annotationMappings","componentStateHistory","setWorkgroupsById","nodeHasRubric","document","body","scrollTop","documentElement","$on","event","args","notification","type","workgroupId","toWorkgroupId","updateWorkgroup","annotation","studentWork","context","componentId","componentType","category","data","saveEvent","l","length","i","id","init","workgroup","alertNotifications","getAlertNotificationsByWorkgroupId","hasAlert","hasNewAlert","workgroupHasNewAlert","completionStatus","getNodeCompletionStatusByWorkgroupId","hasNewWork","getWorkgroupCompletionStatus","score","getNodeScoreByWorkgroupId","angular","copy","getAlertNotifications","newAlert","alert","timeDismissed","isCompleted","latestWorkTime","getLatestWorkTimeByWorkgroupId","latestAnnotationTime","getLatestAnnotationTimeByWorkgroupId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","isVisited","time","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getScore","hasWork","status","getComponentTemplatePath","components","isDisabled","c","component","lockAfterSubmit","componentIds","componentHasWork","push","getComponents","tempComponent","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","getComponentStatesByWorkgroupIdAndNodeId","getUserNameByWorkgroupId","stepWorkId","getAnnotationByStepWorkIdAndType","saveAnnotation","getPeriodIdByWorkgroupId","getCurrentPeriod","currentPeriod","periodId","completionPercentage","getNodeCompletion","averageScore","getNodeAverageScore","count","getWorkgroupIdsOnNode","show","currentPeriodId","currentWorkgroup","getCurrentWorkgroup","parseInt","target","viewportOffsetTop","newViewportOffsetTop","getBoundingClientRect","top","delta","content","nodeRubric","rubric","componentRubric","$event","stepNumberAndTitle","getNodePositionAndTitleByNodeId","rubricTitle","dialogHeader","dialogActions","windowHeader","rubricContent","replaceAssetPaths","dialogContent","dialogString","windowString","template","fullscreen","controller","DialogController","openInNewWindow","w","window","open","write","hide","close","targetEvent","clickOutsideToClose","escapeToClose","value","orderBy","isExpandAll","updateScroll","inview","$inject"],"mappings":"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","file":"nodeGradingController.js","sourcesContent":["'use strict';\r\n\r\nclass NodeGradingController {\r\n\r\n    constructor($filter,\r\n                $mdDialog,\r\n                $scope,\r\n                $state,\r\n                $stateParams,\r\n                $timeout,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NodeService,\r\n                NotificationService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$state = $state;\r\n        this.$scope = $scope;\r\n        this.$stateParams = $stateParams;\r\n        this.$timeout = $timeout;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NodeService = NodeService;\r\n        this.NotificationService = NotificationService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.nodeId = this.$stateParams.nodeId;\r\n\r\n        // the max score for the node\r\n        this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\r\n        this.nodeHasWork = this.ProjectService.nodeHasWork(this.nodeId);\r\n\r\n        let startNodeId = this.ProjectService.getStartNodeId();\r\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\r\n\r\n        this.sort = this.TeacherDataService.nodeGradingSort;\r\n\r\n        this.hiddenComponents = [];\r\n\r\n        this.showRubricButton = false;\r\n\r\n        // TODO: add loading indicator\r\n        this.TeacherDataService.retrieveStudentDataByNodeId(this.nodeId).then(result => {\r\n\r\n            // field that will hold the node content\r\n            this.nodeContent = null;\r\n\r\n            this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n            this.periods = [];\r\n\r\n            var node = this.ProjectService.getNodeById(this.nodeId);\r\n\r\n            if (node != null) {\r\n\r\n                // field that will hold the node content\r\n                this.nodeContent = node;\r\n            }\r\n\r\n            this.hiddenComponents = this.getComponentIdsWithoutWork();\r\n\r\n            this.workgroups = this.ConfigService.getClassmateUserInfos();\r\n            this.workgroupsById = {}; // object that will hold workgroup names, statuses, scores, notifications, etc.\r\n            this.workVisibilityById = {}; // object that specifies whether student work is visible for each workgroup\r\n            this.workgroupInViewById = {}; // object that holds whether the workgroup is in view or not\r\n\r\n            this.canViewStudentNames = true;\r\n            this.canGradeStudentWork = true;\r\n\r\n            let permissions = this.ConfigService.getPermissions();\r\n            this.canViewStudentNames = permissions.canViewStudentNames;\r\n            this.canGradeStudentWork = permissions.canGradeStudentWork;\r\n\r\n            this.annotationMappings = {};\r\n\r\n            this.componentStateHistory = [];\r\n\r\n            this.setWorkgroupsById();\r\n\r\n            this.showRubricButton = this.nodeHasRubric();\r\n\r\n            // scroll to the top of the page when the page loads\r\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\r\n        });\r\n\r\n        this.$scope.$on('projectSaved', (event, args) => {\r\n            // update maxScore\r\n            this.maxScore = this.ProjectService.getMaxScoreForNode(this.nodeId);\r\n        });\r\n\r\n        this.$scope.$on('notificationAdded', (event, notification) => {\r\n            if (notification.type === 'CRaterResult') {\r\n                // there is a new CRaterResult notification\r\n                // TODO: expand to encompass other notification types that should be shown to teacher\r\n                let workgroupId = notification.toWorkgroupId;\r\n                if (this.workgroupsById[workgroupId]) {\r\n                    this.updateWorkgroup(workgroupId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('notificationChanged', (event, notification) => {\r\n            if (notification.type === 'CRaterResult') {\r\n                // a CRaterResult notification has changed\r\n                // TODO: expand to encompass other notification types that should be shown to teacher\r\n                let workgroupId = notification.toWorkgroupId;\r\n                if (this.workgroupsById[workgroupId]) {\r\n                    this.updateWorkgroup(workgroupId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('annotationReceived', (event, args) => {\r\n            let annotation = args.annotation;\r\n\r\n            if (annotation) {\r\n                let workgroupId = annotation.toWorkgroupId;\r\n                let nodeId = annotation.nodeId;\r\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\r\n                    // a workgroup has a new annotation for this node\r\n                    this.updateWorkgroup(workgroupId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('studentWorkReceived', (event, args) => {\r\n            let studentWork = args.studentWork;\r\n\r\n            if (studentWork != null) {\r\n                let workgroupId = studentWork.workgroupId;\r\n                let nodeId = studentWork.nodeId;\r\n                if (nodeId === this.nodeId && this.workgroupsById[workgroupId]) {\r\n                    // a workgroup has a new componentState for this node\r\n                    this.updateWorkgroup(workgroupId);\r\n                }\r\n            }\r\n        });\r\n\r\n        // save event when node grading view is displayed and save the nodeId that is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"nodeGradingViewDisplayed\", data = { nodeId: this.nodeId };\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    /**\r\n     * Build the workgroupsById object\r\n     */\r\n    setWorkgroupsById() {\r\n        let l = this.workgroups.length;\r\n        for (let i = 0; i < l; i++) {\r\n            let id = this.workgroups[i].workgroupId;\r\n            this.workgroupsById[id] = this.workgroups[i];\r\n            this.workVisibilityById[id] = false;\r\n\r\n            this.updateWorkgroup(id, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update statuses, scores, notifications, etc. for a workgroup object\r\n     * @param workgroupID a workgroup ID number\r\n     * @param init Boolean whether we're in controller initialization or not\r\n     */\r\n    updateWorkgroup(workgroupId, init) {\r\n        let workgroup = this.workgroupsById[workgroupId];\r\n\r\n        if (workgroup) {\r\n            let alertNotifications = this.getAlertNotificationsByWorkgroupId(workgroupId);\r\n            workgroup.hasAlert = alertNotifications.length;\r\n            workgroup.hasNewAlert = this.workgroupHasNewAlert(alertNotifications);\r\n            let completionStatus = this.getNodeCompletionStatusByWorkgroupId(workgroupId);\r\n            workgroup.hasNewWork = completionStatus.hasNewWork;\r\n            workgroup.completionStatus = this.getWorkgroupCompletionStatus(completionStatus);\r\n            workgroup.score = this.getNodeScoreByWorkgroupId(workgroupId);\r\n\r\n            if (!init) {\r\n                this.workgroupsById[workgroupId] = angular.copy(workgroup);\r\n            }\r\n        }\r\n    }\r\n\r\n    getAlertNotificationsByWorkgroupId(workgroupId) {\r\n        let args = {};\r\n        args.nodeId = this.nodeId;\r\n        args.workgroupId = workgroupId;\r\n        return this.NotificationService.getAlertNotifications(args);\r\n    }\r\n\r\n    workgroupHasNewAlert(alertNotifications) {\r\n        let newAlert = false;\r\n\r\n        let l = alertNotifications.length;\r\n        for (let i = 0; i < l; i++) {\r\n            let alert = alertNotifications[i];\r\n            if (!alert.timeDismissed) {\r\n                newAlert = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return newAlert;\r\n    }\r\n\r\n    /**\r\n     * Returns an object with node completion status, latest work time, and latest annotation time\r\n     * for a workgroup for the current node\r\n     * @param workgroupId a workgroup ID number\r\n     * @returns Object with completion, latest work time, latest annotation time\r\n     */\r\n    getNodeCompletionStatusByWorkgroupId(workgroupId) {\r\n        let isCompleted = false;\r\n\r\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\r\n        let latestWorkTime = this.getLatestWorkTimeByWorkgroupId(workgroupId);\r\n\r\n        let latestAnnotationTime = this.getLatestAnnotationTimeByWorkgroupId(workgroupId);\r\n        let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\r\n        if (studentStatus != null) {\r\n            let nodeStatus = studentStatus.nodeStatuses[this.nodeId];\r\n\r\n            if (latestWorkTime) {\r\n                // workgroup has at least one componentState for this node, so check if node is completed\r\n\r\n                if (nodeStatus) {\r\n                    isCompleted = nodeStatus.isCompleted;\r\n                }\r\n            }\r\n\r\n            if (!this.ProjectService.nodeHasWork(this.nodeId)) {\r\n                // the step does not generate any work so completion = visited\r\n                if (nodeStatus) {\r\n                    isCompleted = nodeStatus.isVisited;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            isCompleted: isCompleted,\r\n            latestWorkTime: latestWorkTime,\r\n            latestAnnotationTime: latestAnnotationTime\r\n        };\r\n    }\r\n\r\n    getLatestWorkTimeByWorkgroupId(workgroupId) {\r\n        let time = null;\r\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(this.nodeId);\r\n        let n = componentStates.length-1;\r\n\r\n        // loop through component states for this node, starting with most recent\r\n        for (let i = n; i > -1; i--) {\r\n            let componentState = componentStates[i];\r\n            if (componentState.workgroupId === workgroupId) {\r\n                // componentState is for given workgroupId\r\n                time = componentState.serverSaveTime;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    getLatestAnnotationTimeByWorkgroupId(workgroupId) {\r\n        let time = null;\r\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(this.nodeId);\r\n        let n = annotations.length-1;\r\n\r\n        // loop through annotations for this node, starting with most recent\r\n        for (let i = n; i > -1; i--) {\r\n            let annotation = annotations[i];\r\n            // TODO: support checking for annotations from shared teachers\r\n            if (annotation.toWorkgroupId === workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\r\n                time = annotation.serverSaveTime;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    /**\r\n     * Returns the score for the current node for a given workgroupID\r\n     * @param workgroupId a workgroup ID number\r\n     * @returns Number score value (defaults to -1 if workgroup has no score)\r\n     */\r\n    getNodeScoreByWorkgroupId(workgroupId) {\r\n        let score = this.AnnotationService.getScore(workgroupId, this.nodeId);\r\n        return (typeof score === 'number' ? score : -1);\r\n    }\r\n\r\n    /**\r\n     * Returns a numerical status value for a given completion status object depending on node completion\r\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\r\n     * @param completionStatus Object\r\n     * @returns Integer status value\r\n     */\r\n    getWorkgroupCompletionStatus(completionStatus) {\r\n        let hasWork = completionStatus.latestWorkTime !== null;\r\n        let isCompleted = completionStatus.isCompleted;\r\n\r\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\r\n        let status = 0; // default\r\n\r\n        if (isCompleted) {\r\n            status = 2;\r\n        } else if (hasWork) {\r\n            status = 1;\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Get the html template for the component\r\n     * @param componentType the component type\r\n     * @return the path to the html template for the component\r\n     */\r\n    getComponentTemplatePath(componentType) {\r\n        return this.NodeService.getComponentTemplatePath(componentType);\r\n    }\r\n\r\n    /**\r\n     * Get the components for this node.\r\n     * @return an array that contains the content for the components\r\n     */\r\n    getComponents() {\r\n        var components = null;\r\n\r\n        if (this.nodeContent != null) {\r\n            components = this.nodeContent.components;\r\n        }\r\n\r\n        if (components != null && this.isDisabled) {\r\n            for (var c = 0; c < components.length; c++) {\r\n                var component = components[c];\r\n\r\n                component.isDisabled = true;\r\n            }\r\n        }\r\n\r\n        if (components != null && this.nodeContent.lockAfterSubmit) {\r\n            for (c = 0; c < components.length; c++) {\r\n                component = components[c];\r\n\r\n                component.lockAfterSubmit = true;\r\n            }\r\n        }\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Gets the Ids of comonponents in this node that don't capture student work\r\n     * @return array of component Ids\r\n     */\r\n    getComponentIdsWithoutWork() {\r\n        let components = [];\r\n        let componentIds = [];\r\n\r\n        if (this.nodeContent) {\r\n            components = this.nodeContent.components;\r\n        }\r\n\r\n        if (components) {\r\n            let n = components.length;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                let component = components[i];\r\n                let hasWork = this.ProjectService.componentHasWork(component);\r\n                if (!hasWork) {\r\n                    componentIds.push(component.id);\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentIds;\r\n    }\r\n\r\n    getComponentById(componentId) {\r\n        var component = null;\r\n\r\n        if (componentId != null) {\r\n            var components = this.getComponents();\r\n\r\n            if (components != null) {\r\n                for (var c = 0; c < components.length; c++) {\r\n                    var tempComponent = components[c];\r\n\r\n                    if (tempComponent != null) {\r\n                        if (componentId === tempComponent.id) {\r\n                            component = tempComponent;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return component;\r\n    }\r\n\r\n    /**\r\n     * Get the student data for a specific part\r\n     * @param the componentId\r\n     * @param the workgroupId id of Workgroup who created the component state\r\n     * @return the student data for the given component\r\n     */\r\n    getLatestComponentStateByWorkgroupIdAndComponentId(workgroupId,  componentId) {\r\n        var componentState = null;\r\n\r\n        if (workgroupId != null && componentId != null) {\r\n            // get the latest component state for the component\r\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, this.nodeId, componentId);\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    /**\r\n     * Get the student data for a specific part\r\n     * @param the componentId\r\n     * @param the workgroupId id of Workgroup who created the component state\r\n     * @return the student data for the given component\r\n     */\r\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\r\n        var componentState = null;\r\n\r\n        if (workgroupId != null && nodeId != null && componentId != null) {\r\n\r\n            // get the latest component state for the component\r\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n\r\n        //AnnotationService.populateAnnotationMappings(this.annotationMappings, workgroupId, componentStates);\r\n\r\n        return componentStates;\r\n    }\r\n\r\n    getUserNameByWorkgroupId(workgroupId) {\r\n        return this.ConfigService.getUserNameByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    getAnnotationByStepWorkIdAndType(stepWorkId, type) {\r\n        return this.AnnotationService.getAnnotationByStepWorkIdAndType(stepWorkId, type);\r\n    }\r\n\r\n    getNodeScoreByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n        let score = this.AnnotationService.getScore(workgroupId, nodeId);\r\n        return (typeof score === 'number' ? score : '-');\r\n    }\r\n\r\n    scoreChanged(stepWorkId) {\r\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\r\n        this.AnnotationService.saveAnnotation(annotation);\r\n    }\r\n\r\n    commentChanged(stepWorkId) {\r\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\r\n        this.AnnotationService.saveAnnotation(annotation);\r\n    }\r\n\r\n    setupComponentStateHistory() {\r\n        this.getComponentStatesByWorkgroupIdAndNodeId()\r\n    }\r\n\r\n    /**\r\n     * Get the period id for a workgroup id\r\n     * @param workgroupId the workgroup id\r\n     * @returns the period id for the workgroup id\r\n     */\r\n    getPeriodIdByWorkgroupId(workgroupId) {\r\n        return this.ConfigService.getPeriodIdByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    /**\r\n     * Get the current period\r\n     */\r\n    getCurrentPeriod() {\r\n        return this.TeacherDataService.getCurrentPeriod();\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the class or period that has completed the node\r\n     * @param nodeId the node id\r\n     * @returns the percentage of the class or period that has completed the node\r\n     */\r\n    getNodeCompletion(nodeId) {\r\n        // get the currently selected period\r\n        let currentPeriod = this.getCurrentPeriod();\r\n        let periodId = currentPeriod.periodId;\r\n\r\n        // get the percentage of the class or period that has completed the node\r\n        let completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\r\n\r\n        return completionPercentage;\r\n    }\r\n\r\n    /**\r\n     * Get the average score for the node\r\n     * @param nodeId the node id\r\n     * @returns the average score for the node\r\n     */\r\n    getNodeAverageScore() {\r\n        // get the currently selected period\r\n        let currentPeriod = this.TeacherDataService.getCurrentPeriod();\r\n        let periodId = currentPeriod.periodId;\r\n\r\n        // get the average score for the node\r\n        let averageScore = this.StudentStatusService.getNodeAverageScore(this.nodeId, periodId);\r\n\r\n        if (averageScore === null) {\r\n            averageScore = 'N/A';\r\n        } else {\r\n            averageScore = this.$filter('number')(averageScore, 1);\r\n        }\r\n\r\n        return averageScore;\r\n    }\r\n\r\n    /**\r\n     * Get the number of students in the current period\r\n     * @returns the number of students that are in the period\r\n     */\r\n    getNumberOfStudentsInPeriod() {\r\n        // get the currently selected period\r\n        let currentPeriod = this.getCurrentPeriod();\r\n        let periodId = currentPeriod.periodId;\r\n\r\n        // get the number of students that are on the node in the period\r\n        let count = this.StudentStatusService.getWorkgroupIdsOnNode(this.rootNode.id, periodId).length;\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a workgroup should be shown\r\n     * @param workgroupId the workgroupId to look for\r\n     * @returns boolean whether the workgroup should be shown\r\n     */\r\n    isWorkgroupShown(workgroupId) {\r\n        let show = false;\r\n\r\n        let currentPeriodId = this.getCurrentPeriod().periodId;\r\n        let workgroup = this.workgroupsById[workgroupId];\r\n        let periodId = workgroup.periodId;\r\n\r\n        if (currentPeriodId === -1 || currentPeriodId === periodId) {\r\n            // workgroup is in current period\r\n            let currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\r\n            if (currentWorkgroup) {\r\n                // there is a currently selected workgroup, so check if this one matches\r\n                if (currentWorkgroup.workgroupId === parseInt(workgroupId)) {\r\n                    // workgroupIds match, so show this one\r\n                    show = true;\r\n                }\r\n            } else {\r\n                // there is no currently selected workgroup, so show this one\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    }\r\n\r\n    updateScroll(target, viewportOffsetTop) {\r\n        let newViewportOffsetTop = target.getBoundingClientRect().top;\r\n        let delta = viewportOffsetTop - newViewportOffsetTop;\r\n        let scrollTop = content.scrollTop;\r\n        content.scrollTop = scrollTop - delta;\r\n    }\r\n\r\n    /**\r\n     * Check if the step has a rubric or if any of the components in the step\r\n     * have a rubric\r\n     * @return whether the step or any of its components have a rubric\r\n     */\r\n    nodeHasRubric() {\r\n\r\n        if (this.nodeContent != null) {\r\n\r\n            // get the step rubric if any\r\n            var nodeRubric = this.nodeContent.rubric;\r\n\r\n            if (nodeRubric != null && nodeRubric != '') {\r\n                // the step has a rubric\r\n                return true;\r\n            }\r\n\r\n            // get the components\r\n            var components = this.nodeContent.components;\r\n\r\n            if (components != null && components.length != 0) {\r\n\r\n                // loop through all the components\r\n                for (var c = 0; c < components.length; c++) {\r\n                    var component = components[c];\r\n\r\n                    if (component != null) {\r\n\r\n                        // get a component rubric\r\n                        var componentRubric = component.rubric;\r\n\r\n                        if (componentRubric != null && componentRubric != '') {\r\n                            // a component has a rubric\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Show the rubric in the grading view. We will show the step rubric and the\r\n     * component rubrics.\r\n     */\r\n    showRubric($event) {\r\n\r\n        // get the step number and title\r\n        let stepNumberAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId);\r\n        let rubricTitle = this.$translate('stepTips');\r\n\r\n        // get the node icon; TODO: add node icon once we have a <node-icon> angular component\r\n        //let nodeIcon = this.ProjectService.getNodeIconByNodeId(this.nodeId);\r\n\r\n        /*\r\n         * create the header for the popup that contains the project title,\r\n         * 'Open in New Tab' button, and 'Close' button\r\n         */\r\n        let dialogHeader =\r\n            `<md-toolbar md-theme=\"light\">\r\n                <div class=\"md-toolbar-tools\">\r\n                    <h2 class=\"overflow--ellipsis\">` + stepNumberAndTitle + `</h2>\r\n                    <span flex>&nbsp;</span>\r\n                    <span class=\"accent-2 md-subhead\">` + rubricTitle + `</span>\r\n                </div>\r\n            </md-toolbar>`;\r\n\r\n        let dialogActions =\r\n            `<md-dialog-actions layout=\"row\" layout-align=\"end center\">\r\n                <md-button class=\"md-primary\" ng-click=\"openInNewWindow()\" aria-label=\"{{ 'openInNewWindow' | translate }}\">{{ 'openInNewWindow' | translate }}</md-button>\r\n                <md-button ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\r\n            </md-dialog-actions>`;\r\n\r\n        /*\r\n         * create the header for the new window that contains the project title\r\n         */\r\n        let windowHeader =\r\n            `<md-toolbar style=\"background-color: #ffffff; border-bottom: 1px solid rgba(0,0,0,0.13);\" class=\"layout-row\">\r\n                <div class=\"md-toolbar-tools\">\r\n                    <h2>` + stepNumberAndTitle + `</h2>\r\n                    <span class=\"flex\">&nbsp;</span>\r\n                    <span class=\"accent-2 md-subhead\">` + rubricTitle + `</span>\r\n                </div>\r\n            </md-toolbar>`;\r\n\r\n        // create the string that will hold the rubric content\r\n        let rubricContent = '<md-list class=\"md-whiteframe-1dp\" style=\"background-color: #ffffff; padding-top: 8px; padding-bottom: 8px;\">';\r\n\r\n        // get the step rubric\r\n        let nodeRubric = this.nodeContent.rubric;\r\n\r\n        if (nodeRubric != null) {\r\n            rubricContent += '<md-list-item class=\"md-no-proxy\"><div class=\"md-list-item-text\">' + nodeRubric + '</div></md-list-item>';\r\n        }\r\n\r\n        // get the components\r\n        let components = this.nodeContent.components;\r\n\r\n        if (components != null && components.length != 0) {\r\n\r\n            // loop through all the components\r\n            for (let c = 0; c < components.length; c++) {\r\n                let component = components[c];\r\n\r\n                if (component != null) {\r\n\r\n                    // get a component rubric\r\n                    let componentRubric = component.rubric;\r\n\r\n                    if (componentRubric != null && componentRubric != '') {\r\n\r\n                        // append the component rubric\r\n                        rubricContent += '<md-list-item class=\"md-no-proxy\"><div class=\"md-list-item-text\" style=\"padding-top: 16px; padding-bottom: 16px;\">' + componentRubric + '</div></md-list-item>';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        rubricContent += '</md-list>';\r\n\r\n        // inject the asset paths into the rubrics\r\n        rubricContent = this.ProjectService.replaceAssetPaths(rubricContent);\r\n\r\n        let dialogContent =\r\n            `<md-dialog-content class=\"gray-lighter-bg\">\r\n                <div class=\"md-dialog-content\">` + rubricContent + `</div>\r\n            </md-dialog-content>`;\r\n\r\n        // create the dialog string\r\n        let dialogString = `<md-dialog class=\"dialog--wider\" aria-label=\"` + stepNumberAndTitle + ` - ` + rubricTitle + `\">` + dialogHeader + dialogContent + dialogActions + `</md-dialog>`;\r\n\r\n        // create the window string\r\n        let windowString =\r\n            `<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' />\r\n            <link rel='stylesheet' href='../wise5/themes/default/style/monitor.css'>\r\n            <link rel='stylesheet' href='../wise5/themes/default/style/angular-material.css'>\r\n            <link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' />\r\n            <body class=\"layout-column\">\r\n                <div class=\"layout-column\">` + windowHeader + `<md-content class=\"md-padding\">` + rubricContent + `</div></md-content></div>\r\n            </body>`;\r\n\r\n        // display the rubric in a popup\r\n        this.$mdDialog.show({\r\n            template : dialogString,\r\n            fullscreen: true,\r\n            controller: ['$scope', '$mdDialog',\r\n                function DialogController($scope, $mdDialog) {\r\n\r\n                    // display the rubric in a new tab\r\n                    $scope.openInNewWindow = function() {\r\n\r\n                        // open a new tab\r\n                        let w = window.open('', '_blank');\r\n\r\n                        // write the rubric content to the new tab\r\n                        w.document.write(windowString);\r\n\r\n                        // close the popup\r\n                        $mdDialog.hide();\r\n                    }\r\n\r\n                    // close the popup\r\n                    $scope.close = () => {\r\n                        $mdDialog.hide();\r\n                    }\r\n                }\r\n            ],\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true\r\n        });\r\n    }\r\n\r\n    setSort(value) {\r\n\r\n        switch (value) {\r\n            case 'team':\r\n                if (this.sort === 'team') {\r\n                    this.sort = '-team';\r\n                } else {\r\n                    this.sort = 'team';\r\n                }\r\n                break;\r\n            case 'status':\r\n                if (this.sort === 'status') {\r\n                    this.sort = '-status';\r\n                } else {\r\n                    this.sort = 'status';\r\n                }\r\n                break;\r\n            case 'score':\r\n                if (this.sort === 'score') {\r\n                    this.sort = '-score';\r\n                } else {\r\n                    this.sort = 'score';\r\n                }\r\n                break;\r\n        }\r\n\r\n        // update value in the teacher data service so we can persist across view instances and current node changes\r\n        this.TeacherDataService.nodeGradingSort = this.sort;\r\n    }\r\n\r\n    getOrderBy() {\r\n        let orderBy = [];\r\n\r\n        switch (this.sort) {\r\n            case 'team':\r\n                orderBy = ['displayNames'];\r\n                break;\r\n            case '-team':\r\n                orderBy = ['-displayNames'];\r\n                break;\r\n            case 'status':\r\n                orderBy = ['completionStatus', 'displayNames'];\r\n                break;\r\n            case '-status':\r\n                orderBy = ['-completionStatus', 'displayNames'];\r\n                break;\r\n            case 'score':\r\n                orderBy = ['score', 'displayNames'];\r\n                break;\r\n            case '-score':\r\n                orderBy = ['-score', 'displayNames'];\r\n                break;\r\n        }\r\n\r\n        return orderBy;\r\n    }\r\n\r\n    /**\r\n     * Expand all workgroups to show student work\r\n     */\r\n    expandAll() {\r\n\r\n        // loop through all the workgroups\r\n        for (let i = 0; i < this.workgroups.length; i++) {\r\n\r\n            // get a workgroup id\r\n            let id = this.workgroups[i].workgroupId;\r\n\r\n            // check if the workgroup is currently in view\r\n            if (this.workgroupInViewById[id]) {\r\n                // the workgroup is currently in view so we will expand it\r\n                this.workVisibilityById[id] = true;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * set the boolean flag to denote that we are currently expanding\r\n         * all the workgroups\r\n         */\r\n        this.isExpandAll = true;\r\n    }\r\n\r\n    /**\r\n     * Collapse all workgroups to hide student work\r\n     */\r\n    collapseAll() {\r\n        let n = this.workgroups.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let id = this.workgroups[i].workgroupId;\r\n            this.workVisibilityById[id] = false;\r\n        }\r\n\r\n        /*\r\n         * set the boolean flag to denote that we are not currently expanding\r\n         * all the workgroups\r\n         */\r\n        this.isExpandAll = false;\r\n    }\r\n\r\n    onUpdateExpand(workgroupId, value) {\r\n        this.workVisibilityById[workgroupId] = !this.workVisibilityById[workgroupId];\r\n    }\r\n\r\n    onUpdateHiddenComponents(value, event) {\r\n        let target = event.target;\r\n        let viewportOffsetTop = target.getBoundingClientRect().top;\r\n\r\n        this.hiddenComponents = value;\r\n        this.hiddenComponents = angular.copy(this.hiddenComponents);\r\n\r\n        this.$timeout(() => {\r\n            this.updateScroll(target, viewportOffsetTop);\r\n        }, 200);\r\n\r\n    }\r\n\r\n    /**\r\n     * A workgroup row has either come into view or gone out of view\r\n     * @param workgroupId the workgroup id that has come into view or gone out\r\n     * of view\r\n     * @param inview whether the row is in view or not\r\n     */\r\n    workgroupInView(workgroupId, inview) {\r\n\r\n        // remember whether the workgroup is in view or not\r\n        this.workgroupInViewById[workgroupId] = inview;\r\n\r\n        if (this.isExpandAll) {\r\n            // we are currently in expand all mode\r\n\r\n            if (inview) {\r\n                // the workgroup row is in view so we will expand it\r\n                this.workVisibilityById[workgroupId] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nNodeGradingController.$inject = [\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$scope',\r\n    '$state',\r\n    '$stateParams',\r\n    '$timeout',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NodeService',\r\n    'NotificationService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService'\r\n];\r\n\r\nexport default NodeGradingController;\r\n"]}