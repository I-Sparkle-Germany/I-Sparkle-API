{"version":3,"sources":["nodeProgressController.es6"],"names":[],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($scope, $state, ConfigService, ProjectService, TeacherDataService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.currentGroup = null;\n        this.items = null;\n        this.periods = [];\n\n        // initialize the periods\n        this.initializePeriods();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                var nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                var currentNodeId = currentNode.id;\n\n                if (this.ProjectService.isGroupNode(currentNodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                } else if (this.ProjectService.isApplicationNode(currentNodeId)) {\n                    // current node is an application node\n                    // load the step grading view\n                    this.$state.go('root.nodeGrading', {nodeId: currentNodeId});\n                }\n            }\n\n            this.$scope.$apply();\n        });\n\n        var startNodeId = this.ProjectService.getStartNodeId();\n        var rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = rootNode;\n\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n    }\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    nodeClicked(nodeId) {\n        this.$state.go('root.nodeGrading', {nodeId:nodeId});\n    };\n}\n\nNodeProgressController.$inject = ['$scope', '$state', 'ConfigService', 'ProjectService', 'TeacherDataService'];\n\nexport default NodeProgressController;"]}