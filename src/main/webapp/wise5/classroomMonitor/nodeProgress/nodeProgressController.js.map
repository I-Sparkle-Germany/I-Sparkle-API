{"version":3,"sources":["nodeProgressController.es6"],"names":[],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.currentGroup = null;\n        this.items = null;\n        this.periods = [];\n\n        // initialize the periods\n        this.initializePeriods();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                var nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                var currentNodeId = currentNode.id;\n\n                if (this.ProjectService.isGroupNode(currentNodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                } else if (this.ProjectService.isApplicationNode(currentNodeId)) {\n                    // current node is an application node\n                    // load the step grading view\n                    this.$state.go('root.nodeGrading', {nodeId: currentNodeId});\n                }\n            }\n\n            this.$scope.$apply();\n        });\n\n        var startNodeId = this.ProjectService.getStartNodeId();\n        var rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = rootNode;\n\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n    }\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    nodeClicked(nodeId) {\n        this.$state.go('root.nodeGrading', {nodeId:nodeId});\n    };\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getNumberOfStudentsOnNode(nodeId, periodId);\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there are any online students on the node\n     * @param nodeId the node id\n     * @returns whether there are any online students on the node\n     */\n    isWorkgroupOnlineOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the workgroup ids that are online\n        var studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        // check if there are any online students on the node in the period\n        var isOnline = this.StudentStatusService.isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId);\n\n        return isOnline;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the max score for the node\n        var nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n        // get the average score for the node\n        var averageScore = this.StudentStatusService.getNodeAverageScore(nodeId, periodId);\n\n        var averageScoreDisplay = null;\n\n        if (averageScore != null && nodeMaxScore != null) {\n            // create the average score display e.g. 8/10\n            averageScoreDisplay = averageScore + '/' + nodeMaxScore;\n        }\n\n        return averageScoreDisplay;\n    }\n}\n\nNodeProgressController.$inject = [\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}