{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$filter","$mdDialog","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","$translate","currentGroup","currentWorkgroup","getCurrentWorkgroup","items","idToOrder","maxScore","getMaxScore","nodeId","stateParams","stateParamNodeId","params","rootNode","id","setCurrentNodeByNodeId","startNodeId","getStartNodeId","getRootNode","currentGroupId","currentgroupid","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","currentPeriod","getCurrentPeriod","showRubricButton","projectHasRubric","$on","event","args","previousNode","currentNode","type","setCurrentNode","isGroupNode","go","toState","toParams","fromState","fromParams","toNodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","setCurrentWorkgroup","context","componentId","componentType","category","data","saveEvent","periodId","count","getWorkgroupIdsOnNode","length","completionPercentage","getNodeCompletion","projectRubric","getProjectRubric","$event","projectTitle","getProjectTitle","rubricTitle","dialogHeader","dialogActions","windowHeader","rubricContent","rubric","replaceAssetPaths","dialogContent","dialogString","windowString","show","template","fullscreen","controller","DialogController","openInNewWindow","w","window","open","write","hide","close","targetEvent","clickOutsideToClose","escapeToClose","color","getAvatarColorForWorkgroupId","workgroupId","completion","status","getStudentStatusForWorkgroupId","projectCompletion","names","getDisplayNamesByWorkgroupId","num","userInfo","getUserInfoByWorkgroupId","userNames","userName","split","score","getTotalScoreByWorkgroupId","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\r\n\r\nclass NodeProgressController {\r\n\r\n    constructor($filter,\r\n                $mdDialog,\r\n                $scope,\r\n                $state,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.currentGroup = null;\r\n\r\n        // the current workgroup\r\n        this.currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\r\n\r\n        this.items = this.ProjectService.idToOrder;\r\n\r\n        this.maxScore = this.ProjectService.getMaxScore();\r\n\r\n        this.nodeId = null;\r\n        let stateParams = null;\r\n        let stateParamNodeId = null;\r\n\r\n        if (this.$state != null) {\r\n            stateParams = this.$state.params;\r\n        }\r\n\r\n        if (stateParams != null) {\r\n            stateParamNodeId = stateParams.nodeId;\r\n        }\r\n\r\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\r\n            this.nodeId = stateParamNodeId;\r\n        }\r\n\r\n        if (this.nodeId == null || this.nodeId === '') {\r\n            this.nodeId = this.ProjectService.rootNode.id;\r\n        }\r\n\r\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\r\n\r\n        let startNodeId = this.ProjectService.getStartNodeId();\r\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\r\n\r\n        this.currentGroup = this.rootNode;\r\n\r\n        if (this.currentGroup != null) {\r\n            this.currentGroupId = this.currentGroup.id;\r\n            this.$scope.currentgroupid = this.currentGroupId;\r\n        }\r\n\r\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\r\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\r\n\r\n        var branches = this.ProjectService.getBranches();\r\n\r\n        let currentPeriod = this.getCurrentPeriod();\r\n\r\n        this.showRubricButton = false;\r\n\r\n        if (this.projectHasRubric()) {\r\n            this.showRubricButton = true;\r\n        }\r\n\r\n        /**\r\n         * Listen for current node changed event\r\n         */\r\n        this.$scope.$on('currentNodeChanged', (event, args) => {\r\n            let previousNode = args.previousNode;\r\n            let currentNode = args.currentNode;\r\n            if (previousNode != null && previousNode.type === 'group') {\r\n                let nodeId = previousNode.id;\r\n            }\r\n\r\n            if (currentNode != null) {\r\n\r\n                this.nodeId = currentNode.id;\r\n                this.TeacherDataService.setCurrentNode(currentNode);\r\n\r\n                if (this.isGroupNode(this.nodeId)) {\r\n                    // current node is a group\r\n\r\n                    this.currentGroup = currentNode;\r\n                    this.currentGroupId = this.currentGroup.id;\r\n                    this.$scope.currentgroupid = this.currentGroupId;\r\n                //} else if (this.isApplicationNode(this.nodeId)) {\r\n                }\r\n            }\r\n\r\n            this.$state.go('root.nodeProgress', {nodeId: this.nodeId});\r\n        });\r\n\r\n        // listen for the currentWorkgroupChanged event\r\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\r\n            this.currentWorkgroup = args.currentWorkgroup;\r\n        });\r\n\r\n        /**\r\n         * Listen for state change event\r\n         */\r\n        this.$scope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\r\n            let toNodeId = toParams.nodeId;\r\n            let fromNodeId = fromParams.nodeId;\r\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\r\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\r\n            }\r\n\r\n            if (toState.name === 'root.project') {\r\n                let nodeId = toParams.nodeId;\r\n                if (this.ProjectService.isApplicationNode(nodeId)) {\r\n                    // scroll to top when viewing a new step\r\n                    document.getElementById('content').scrollTop = 0;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('$destroy', () => {\r\n            // set the currently selected workgroup to null on state exit\r\n            this.TeacherDataService.setCurrentWorkgroup(null);\r\n        });\r\n\r\n        // save event when node progress view is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"nodeProgressViewDisplayed\", data = { nodeId: this.nodeId };\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    isGroupNode(nodeId) {\r\n        return this.ProjectService.isGroupNode(nodeId);\r\n    }\r\n\r\n    isApplicationNode(nodeId) {\r\n        return this.ProjectService.isApplicationNode(nodeId);\r\n    }\r\n\r\n    /**\r\n     * Get the current period\r\n     */\r\n    getCurrentPeriod() {\r\n        return this.TeacherDataService.getCurrentPeriod();\r\n    }\r\n\r\n    /**\r\n     * Get the number of students on the node\r\n     * @param nodeId the node id\r\n     * @returns the number of students that are on the node\r\n     */\r\n    getNumberOfStudentsOnNode(nodeId) {\r\n        // get the currently selected period\r\n        var currentPeriod = this.getCurrentPeriod();\r\n        var periodId = currentPeriod.periodId;\r\n\r\n        // get the number of students that are on the node in the period\r\n        var count = this.StudentStatusService.getWorkgroupIdsOnNode(nodeId, periodId).length;\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the class or period that has completed the node\r\n     * @param nodeId the node id\r\n     * @returns the percentage of the class or period that has completed the node\r\n     */\r\n    getNodeCompletion(nodeId) {\r\n        // get the currently selected period\r\n        var currentPeriod = this.getCurrentPeriod();\r\n        var periodId = currentPeriod.periodId;\r\n\r\n        // get the percentage of the class or period that has completed the node\r\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\r\n\r\n        return completionPercentage;\r\n    }\r\n\r\n    /**\r\n     * Check if the project has a rubric\r\n     * @return whether the project has a rubric\r\n     */\r\n    projectHasRubric() {\r\n\r\n        // get the project rubric\r\n        var projectRubric = this.ProjectService.getProjectRubric();\r\n\r\n        if (projectRubric != null && projectRubric != '') {\r\n            // the project has a rubric\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Show the project rubric\r\n     */\r\n    showRubric($event) {\r\n\r\n        // get the project title\r\n        let projectTitle = this.ProjectService.getProjectTitle();\r\n        let rubricTitle = this.$translate('projectInfo');\r\n\r\n        /*\r\n         * create the header for the popup that contains the project title,\r\n         * 'Open in New Tab' button, and 'Close' button\r\n         */\r\n        let dialogHeader =\r\n            `<md-toolbar>\r\n                <div class=\"md-toolbar-tools\">\r\n                    <h2 class=\"overflow--ellipsis\">${ projectTitle }</h2>\r\n                    <span flex>&nbsp;</span>\r\n                    <span class=\"md-subhead\">${ rubricTitle }</span>\r\n                </div>\r\n            </md-toolbar>`;\r\n\r\n        let dialogActions =\r\n            `<md-dialog-actions layout=\"row\" layout-align=\"end center\">\r\n                <md-button class=\"md-primary\" ng-click=\"openInNewWindow()\" aria-label=\"{{ 'openInNewWindow' | translate }}\">{{ 'openInNewWindow' | translate }}</md-button>\r\n                <md-button class=\"md-primary\" ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\r\n            </md-dialog-actions>`;\r\n\r\n        /*\r\n         * create the header for the new window that contains the project title\r\n         */\r\n        let windowHeader =\r\n            `<md-toolbar class=\"layout-row\">\r\n                <div class=\"md-toolbar-tools\" style=\"color: #ffffff;\">\r\n                    <h2>${ projectTitle }</h2>\r\n                    <span class=\"flex\">&nbsp;</span>\r\n                    <span class=\"md-subhead\">${ rubricTitle }</span>\r\n                </div>\r\n            </md-toolbar>`;\r\n\r\n        // create the string that will hold the rubric content\r\n        let rubricContent = '<md-content class=\"md-whiteframe-1dp md-padding\" style=\"background-color: #ffffff;\">';\r\n\r\n        // get the project rubric\r\n        let rubric = this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\r\n\r\n        if (rubric != null) {\r\n            rubricContent += rubric + '</md-content>';\r\n        }\r\n\r\n        let dialogContent =\r\n            `<md-dialog-content class=\"gray-lighter-bg\">\r\n                <div class=\"md-dialog-content\">${ rubricContent }</div>\r\n            </md-dialog-content>`;\r\n\r\n        // create the dialog string\r\n        let dialogString = `<md-dialog class=\"dialog--wider\" aria-label=\"${ projectTitle } - ${ rubricTitle }\">${ dialogHeader }${ dialogContent }${ dialogActions }</md-dialog>`;\r\n\r\n        // create the window string\r\n        let windowString =\r\n            `<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' />\r\n            <link rel='stylesheet' href='../wise5/themes/default/style/monitor.css'>\r\n            <link rel='stylesheet' href='../wise5/themes/default/style/angular-material.css'>\r\n            <link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' />\r\n            <body class=\"layout-column\">\r\n                <div class=\"layout-column\">${ windowHeader }<md-content class=\"md-padding\">${ rubricContent }</div></md-content></div>\r\n            </body>`;\r\n\r\n        // display the rubric in a popup\r\n        this.$mdDialog.show({\r\n            template : dialogString,\r\n            fullscreen: true,\r\n            controller: ['$scope', '$mdDialog',\r\n                function DialogController($scope, $mdDialog) {\r\n\r\n                    // display the rubric in a new tab\r\n                    $scope.openInNewWindow = function() {\r\n\r\n                        // open a new tab\r\n                        let w = window.open('', '_blank');\r\n\r\n                        // write the rubric content to the new tab\r\n                        w.document.write(windowString);\r\n\r\n                        // close the popup\r\n                        $mdDialog.hide();\r\n                    }\r\n\r\n                    // close the popup\r\n                    $scope.close = () => {\r\n                        $mdDialog.hide();\r\n                    }\r\n                }\r\n            ],\r\n            targetEvent: $event,\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the avatar color the currently selected workgroup\r\n     * @return color string or null\r\n     */\r\n    getCurrentWorkgroupAvatarColor() {\r\n        let color = '';\r\n        if (this.currentWorkgroup) {\r\n            color = this.ConfigService.getAvatarColorForWorkgroupId(this.currentWorkgroup.workgroupId);\r\n        }\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the project completion for the currently selected workgroup\r\n     * @return completion object or null\r\n     */\r\n    getCurrentWorkgroupCompletion() {\r\n        let completion = null;\r\n\r\n        if (this.currentWorkgroup) {\r\n            // get the workgroup's studentStatus\r\n            let status = this.StudentStatusService.getStudentStatusForWorkgroupId(this.currentWorkgroup.workgroupId);\r\n            if (status) {\r\n                completion = status.projectCompletion;\r\n            }\r\n        }\r\n\r\n        return completion;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the display names for the currently selected workgroup\r\n     * @return names string or null\r\n     */\r\n    getCurrentWorkgroupDisplayNames() {\r\n        let names = '';\r\n        if (this.currentWorkgroup) {\r\n            names = this.ConfigService.getDisplayNamesByWorkgroupId(this.currentWorkgroup.workgroupId);\r\n        }\r\n        return names;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the number of students in the currently selected workgroup\r\n     * @return number of students or null\r\n     */\r\n    getCurrentWorkgroupNumberOfStudents() {\r\n        let num = null;\r\n\r\n        if (this.currentWorkgroup) {\r\n            let userInfo = this.ConfigService.getUserInfoByWorkgroupId(this.currentWorkgroup.workgroupId);\r\n\r\n            if (userInfo != null) {\r\n                let userNames = userInfo.userName.split(':');\r\n                num = userNames.length;\r\n            }\r\n        }\r\n\r\n        return num;\r\n    };\r\n\r\n    /**\r\n     * Gets and returns the total project score for the currently selected workgroup\r\n     * @return score object or null\r\n     */\r\n    getCurrentWorkgroupScore() {\r\n        let score = null;\r\n\r\n        if (this.currentWorkgroup) {\r\n            score = this.TeacherDataService.getTotalScoreByWorkgroupId(this.currentWorkgroup.workgroupId);\r\n        }\r\n\r\n        return score;\r\n    }\r\n}\r\n\r\nNodeProgressController.$inject = [\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$scope',\r\n    '$state',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService'\r\n];\r\n\r\nexport default NodeProgressController;\r\n"]}