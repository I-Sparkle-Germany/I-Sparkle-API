{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","currentGroup","items","periods","initializePeriods","idToOrder","$on","event","args","previousNode","currentNode","type","nodeId","id","currentNodeId","isGroupNode","currentGroupId","currentgroupid","isApplicationNode","go","$apply","startNodeId","getStartNodeId","rootNode","getRootNode","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","getNodeTitleByNodeId","getNodePositionById","allPeriodOption","periodId","periodName","push","concat","getPeriods","getCurrentPeriod","length","setCurrentPeriod","period","currentPeriod","count","getNumberOfStudentsOnNode","completionPercentage","getNodeCompletion","studentsOnline","getStudentsOnline","isOnline","isWorkgroupOnlineOnNode","nodeMaxScore","getMaxScoreForNode","averageScore","getNodeAverageScore","averageScoreDisplay","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.currentGroup = null;\n        this.items = null;\n        this.periods = [];\n\n        // initialize the periods\n        this.initializePeriods();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                var nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                var currentNodeId = currentNode.id;\n\n                if (this.ProjectService.isGroupNode(currentNodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                } else if (this.ProjectService.isApplicationNode(currentNodeId)) {\n                    // current node is an application node\n                    // load the step grading view\n                    this.$state.go('root.nodeGrading', {nodeId: currentNodeId});\n                }\n            }\n\n            this.$scope.$apply();\n        });\n\n        var startNodeId = this.ProjectService.getStartNodeId();\n        var rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = rootNode;\n\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n    }\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    nodeClicked(nodeId) {\n        this.$state.go('root.nodeGrading', {nodeId:nodeId});\n    };\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getNumberOfStudentsOnNode(nodeId, periodId);\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there are any online students on the node\n     * @param nodeId the node id\n     * @returns whether there are any online students on the node\n     */\n    isWorkgroupOnlineOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the workgroup ids that are online\n        var studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        // check if there are any online students on the node in the period\n        var isOnline = this.StudentStatusService.isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId);\n\n        return isOnline;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the max score for the node\n        var nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n        // get the average score for the node\n        var averageScore = this.StudentStatusService.getNodeAverageScore(nodeId, periodId);\n\n        var averageScoreDisplay = null;\n\n        if (averageScore != null && nodeMaxScore != null) {\n            // create the average score display e.g. 8/10\n            averageScoreDisplay = averageScore + '/' + nodeMaxScore;\n        }\n\n        return averageScoreDisplay;\n    }\n}\n\nNodeProgressController.$inject = [\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}