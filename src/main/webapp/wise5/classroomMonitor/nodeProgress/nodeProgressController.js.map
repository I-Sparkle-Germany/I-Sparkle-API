{"version":3,"sources":["nodeProgressController.es6"],"names":[],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.currentGroup = null;\n        this.items = null;\n        this.periods = [];\n\n        // initialize the periods\n        this.initializePeriods();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                var nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                var currentNodeId = currentNode.id;\n\n                if (this.ProjectService.isGroupNode(currentNodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                } else if (this.ProjectService.isApplicationNode(currentNodeId)) {\n                    // current node is an application node\n                    // load the step grading view\n                    this.$state.go('root.nodeGrading', {nodeId: currentNodeId});\n                }\n            }\n\n            this.$scope.$apply();\n        });\n\n        var startNodeId = this.ProjectService.getStartNodeId();\n        var rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = rootNode;\n\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n    }\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    nodeClicked(nodeId) {\n        this.$state.go('root.nodeGrading', {nodeId:nodeId});\n    };\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getNumberOfStudentsOnNode(nodeId, periodId);\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there are any online students on the node\n     * @param nodeId the node id\n     * @returns whether there are any online students on the node\n     */\n    isWorkgroupOnlineOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the workgroup ids that are online\n        var studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        // check if there are any online students on the node in the period\n        var isOnline = this.StudentStatusService.isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId);\n\n        return isOnline;\n    }\n\n    /**\n     * Get the average score for the node\n     * @param nodeId the node id\n     * @returns the average score for the node\n     */\n    getNodeAverageScore(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the max score for the node\n        var nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n        // get the average score for the node\n        var averageScore = this.StudentStatusService.getNodeAverageScore(nodeId, periodId);\n\n        var averageScoreDisplay = null;\n\n        if (averageScore != null && nodeMaxScore != null) {\n            // create the average score display e.g. 8/10\n            averageScoreDisplay = averageScore + '/' + nodeMaxScore;\n        }\n\n        return averageScoreDisplay;\n    }\n}\n\nNodeProgressController.$inject = [\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}