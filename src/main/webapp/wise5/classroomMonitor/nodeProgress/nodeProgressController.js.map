{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$filter","$mdDialog","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","$translate","currentGroup","currentWorkgroup","getCurrentWorkgroup","items","idToOrder","maxScore","getMaxScore","nodeId","stateParams","stateParamNodeId","params","rootNode","id","setCurrentNodeByNodeId","startNodeId","getStartNodeId","getRootNode","currentGroupId","currentgroupid","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","currentPeriod","getCurrentPeriod","isPaused","isPeriodPaused","periodId","showRubricButton","projectHasRubric","$on","event","args","previousNode","currentNode","type","setCurrentNode","isGroupNode","go","toState","toParams","fromState","fromParams","toNodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","setCurrentWorkgroup","context","componentId","componentType","category","data","saveEvent","count","getWorkgroupIdsOnNode","length","completionPercentage","getNodeCompletion","pauseScreensChanged","projectRubric","getProjectRubric","$event","projectTitle","getProjectTitle","rubricTitle","dialogHeader","dialogActions","windowHeader","rubricContent","rubric","replaceAssetPaths","dialogContent","dialogString","windowString","show","template","fullscreen","controller","DialogController","openInNewWindow","w","window","open","write","hide","close","targetEvent","clickOutsideToClose","escapeToClose","color","getAvatarColorForWorkgroupId","workgroupId","completion","status","getStudentStatusForWorkgroupId","projectCompletion","names","getDisplayNamesByWorkgroupId","num","userInfo","getUserInfoByWorkgroupId","userNames","userName","split","score","getTotalScoreByWorkgroupId","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.$translate = this.$filter('translate');\n\n        this.currentGroup = null;\n\n        // the current workgroup\n        this.currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.nodeId = null;\n        let stateParams = null;\n        let stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            this.nodeId = stateParamNodeId;\n        }\n\n        if (this.nodeId == null || this.nodeId === '') {\n            this.nodeId = this.ProjectService.rootNode.id;\n        }\n\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        let startNodeId = this.ProjectService.getStartNodeId();\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = this.rootNode;\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n\n        let currentPeriod = this.getCurrentPeriod();\n\n        if (currentPeriod) {\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        }\n\n        this.showRubricButton = false;\n\n        if (this.projectHasRubric()) {\n            this.showRubricButton = true;\n        }\n\n        /**\n         * Listen for current node changed event\n         */\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            let previousNode = args.previousNode;\n            let currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                let nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                this.nodeId = currentNode.id;\n                this.TeacherDataService.setCurrentNode(currentNode);\n\n                if (this.isGroupNode(this.nodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                //} else if (this.isApplicationNode(this.nodeId)) {\n                }\n            }\n\n            this.$state.go('root.nodeProgress', {nodeId: this.nodeId});\n        });\n\n        /**\n         * Listen for current period changed event\n         */\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            let currentPeriod = args.currentPeriod;\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        });\n\n        // listen for the currentWorkgroupChanged event\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\n            this.currentWorkgroup = args.currentWorkgroup;\n        });\n\n        /**\n         * Listen for state change event\n         */\n        this.$scope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\n            let toNodeId = toParams.nodeId;\n            let fromNodeId = fromParams.nodeId;\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n            }\n\n            if (toState.name === 'root.project') {\n                let nodeId = toParams.nodeId;\n                if (this.ProjectService.isApplicationNode(nodeId)) {\n                    // scroll to top when viewing a new step\n                    document.getElementById('content').scrollTop = 0;\n                }\n            }\n        });\n\n        this.$scope.$on('$destroy', () => {\n            // set the currently selected workgroup to null on state exit\n            this.TeacherDataService.setCurrentWorkgroup(null);\n        });\n\n        // save event when node progress view is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"nodeProgressViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    }\n\n    isApplicationNode(nodeId) {\n        return this.ProjectService.isApplicationNode(nodeId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getWorkgroupIdsOnNode(nodeId, periodId).length;\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * The pause screen status was changed. Update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n        this.TeacherDataService.pauseScreensChanged(isPaused);\n    }\n\n    /**\n     * Check if the project has a rubric\n     * @return whether the project has a rubric\n     */\n    projectHasRubric() {\n\n        // get the project rubric\n        var projectRubric = this.ProjectService.getProjectRubric();\n\n        if (projectRubric != null && projectRubric != '') {\n            // the project has a rubric\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Show the project rubric\n     */\n    showRubric($event) {\n\n        // get the project title\n        let projectTitle = this.ProjectService.getProjectTitle();\n        let rubricTitle = this.$translate('projectInfo');\n\n        // get the node icon; TODO: add node icon once we have a <node-icon> angular component\n        //let nodeIcon = this.ProjectService.getNodeIconByNodeId(this.nodeId);\n\n        /*\n         * create the header for the popup that contains the project title,\n         * 'Open in New Tab' button, and 'Close' button\n         */\n        let dialogHeader =\n            `<md-toolbar md-theme=\"light\">\n                <div class=\"md-toolbar-tools\">\n                    <h2 class=\"overflow--ellipsis\">` + projectTitle + `</h2>\n                    <span flex>&nbsp;</span>\n                    <span class=\"accent-2 md-subhead\">` + rubricTitle + `</span>\n                </div>\n            </md-toolbar>`;\n\n        let dialogActions =\n            `<md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                <md-button class=\"md-primary\" ng-click=\"openInNewWindow()\" aria-label=\"{{ 'openInNewWindow' | translate }}\">{{ 'openInNewWindow' | translate }}</md-button>\n                <md-button ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\n            </md-dialog-actions>`;\n\n        /*\n         * create the header for the new window that contains the project title\n         */\n        let windowHeader =\n            `<md-toolbar style=\"background-color: #ffffff; border-bottom: 1px solid rgba(0,0,0,0.13);\" class=\"layout-row\">\n                <div class=\"md-toolbar-tools\">\n                    <h2>` + projectTitle + `</h2>\n                    <span class=\"flex\">&nbsp;</span>\n                    <span class=\"accent-2 md-subhead\">` + rubricTitle + `</span>\n                </div>\n            </md-toolbar>`;\n\n        // create the string that will hold the rubric content\n        let rubricContent = '<md-content class=\"md-whiteframe-1dp md-padding\" style=\"background-color: #ffffff;\">';\n\n        // get the project rubric\n        let rubric = this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n        if (rubric != null) {\n            rubricContent += rubric + '</md-content>';\n        }\n\n        let dialogContent =\n            `<md-dialog-content class=\"gray-lighter-bg\">\n                <div class=\"md-dialog-content\">` + rubricContent + `</div>\n            </md-dialog-content>`;\n\n        // create the dialog string\n        let dialogString = `<md-dialog class=\"dialog--wider\" aria-label=\"` + projectTitle + ` - ` + rubricTitle + `\">` + dialogHeader + dialogContent + dialogActions + `</md-dialog>`;\n\n        // create the window string\n        let windowString =\n            `<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' />\n            <link rel='stylesheet' href='../wise5/themes/default/style/monitor.css'>\n            <link rel='stylesheet' href='../wise5/themes/default/style/angular-material.css'>\n            <link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' />\n            <body class=\"layout-column\">\n                <div class=\"layout-column\">` + windowHeader + `<md-content class=\"md-padding\">` + rubricContent + `</div></md-content></div>\n            </body>`;\n\n        // display the rubric in a popup\n        this.$mdDialog.show({\n            template : dialogString,\n            fullscreen: true,\n            controller: ['$scope', '$mdDialog',\n                function DialogController($scope, $mdDialog) {\n\n                    // display the rubric in a new tab\n                    $scope.openInNewWindow = function() {\n\n                        // open a new tab\n                        let w = window.open('', '_blank');\n\n                        // write the rubric content to the new tab\n                        w.document.write(windowString);\n\n                        // close the popup\n                        $mdDialog.hide();\n                    }\n\n                    // close the popup\n                    $scope.close = () => {\n                        $mdDialog.hide();\n                    }\n                }\n            ],\n            targetEvent: $event,\n            clickOutsideToClose: true,\n            escapeToClose: true\n        });\n    }\n\n    /**\n     * Gets and returns the avatar color the currently selected workgroup\n     * @return color string or null\n     */\n    getCurrentWorkgroupAvatarColor() {\n        let color = '';\n        if (this.currentWorkgroup) {\n            color = this.ConfigService.getAvatarColorForWorkgroupId(this.currentWorkgroup.workgroupId);\n        }\n        return color;\n    }\n\n    /**\n     * Gets and returns the project completion for the currently selected workgroup\n     * @return completion object or null\n     */\n    getCurrentWorkgroupCompletion() {\n        let completion = null;\n\n        if (this.currentWorkgroup) {\n            // get the workgroup's studentStatus\n            let status = this.StudentStatusService.getStudentStatusForWorkgroupId(this.currentWorkgroup.workgroupId);\n            if (status) {\n                completion = status.projectCompletion;\n            }\n        }\n\n        return completion;\n    }\n\n    /**\n     * Gets and returns the display names for the currently selected workgroup\n     * @return names string or null\n     */\n    getCurrentWorkgroupDisplayNames() {\n        let names = '';\n        if (this.currentWorkgroup) {\n            names = this.ConfigService.getDisplayNamesByWorkgroupId(this.currentWorkgroup.workgroupId);\n        }\n        return names;\n    }\n\n    /**\n     * Gets and returns the number of students in the currently selected workgroup\n     * @return number of students or null\n     */\n    getCurrentWorkgroupNumberOfStudents() {\n        let num = null;\n\n        if (this.currentWorkgroup) {\n            let userInfo = this.ConfigService.getUserInfoByWorkgroupId(this.currentWorkgroup.workgroupId);\n\n            if (userInfo != null) {\n                let userNames = userInfo.userName.split(':');\n                num = userNames.length;\n            }\n        }\n\n        return num;\n    };\n\n    /**\n     * Gets and returns the total project score for the currently selected workgroup\n     * @return score object or null\n     */\n    getCurrentWorkgroupScore() {\n        let score = null;\n\n        if (this.currentWorkgroup) {\n            score = this.TeacherDataService.getTotalScoreByWorkgroupId(this.currentWorkgroup.workgroupId);\n        }\n\n        return score;\n    }\n}\n\nNodeProgressController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}