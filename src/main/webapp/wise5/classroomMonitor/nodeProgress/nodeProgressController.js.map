{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$mdDialog","$scope","$state","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","currentGroup","items","idToOrder","nodeId","stateParams","stateParamNodeId","params","rootNode","id","setCurrentNodeByNodeId","startNodeId","getStartNodeId","getRootNode","currentGroupId","currentgroupid","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","currentPeriod","getCurrentPeriod","isPaused","isPeriodPaused","periodId","showRubricButton","projectHasRubric","$on","event","args","previousNode","currentNode","type","setCurrentNode","isGroupNode","go","toState","toParams","fromState","fromParams","toNodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","context","componentId","componentType","category","data","saveEvent","count","getWorkgroupIdsOnNode","length","completionPercentage","getNodeCompletion","pauseScreensChanged","projectRubric","getProjectRubric","getProjectTitle","replaceAssetPaths","show","template","clickOutsideToClose","escapeToClose","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($mdDialog,\n                $scope,\n                $state,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.currentGroup = null;\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.nodeId = null;\n        let stateParams = null;\n        let stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            this.nodeId = stateParamNodeId;\n        }\n\n        if (this.nodeId == null || this.nodeId === '') {\n            this.nodeId = this.ProjectService.rootNode.id;\n        }\n\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        let startNodeId = this.ProjectService.getStartNodeId();\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = this.rootNode;\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n\n        let currentPeriod = this.getCurrentPeriod();\n\n        if (currentPeriod) {\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        }\n\n        this.showRubricButton = false;\n\n        if (this.projectHasRubric()) {\n            this.showRubricButton = true;\n        }\n\n        /**\n         * Listen for current node changed event\n         */\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            let previousNode = args.previousNode;\n            let currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                let nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                this.nodeId = currentNode.id;\n                this.TeacherDataService.setCurrentNode(currentNode);\n\n                if (this.isGroupNode(this.nodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                //} else if (this.isApplicationNode(this.nodeId)) {\n                }\n            }\n\n            this.$state.go('root.nodeProgress', {nodeId: this.nodeId});\n        });\n\n        /**\n         * Listen for current period changed event\n         */\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            let currentPeriod = args.currentPeriod;\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        });\n\n        /**\n         * Listen for state change event\n         */\n        this.$scope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\n            let toNodeId = toParams.nodeId;\n            let fromNodeId = fromParams.nodeId;\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n            }\n\n            if (toState.name === 'root.project') {\n                let nodeId = toParams.nodeId;\n                if (this.ProjectService.isApplicationNode(nodeId)) {\n                    // scroll to top when viewing a new step\n                    document.getElementById('content').scrollTop = 0;\n                }\n            }\n        });\n\n        // save event when node progress view is displayed\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"nodeProgressViewDisplayed\", data = { nodeId: this.nodeId };\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    }\n\n    isApplicationNode(nodeId) {\n        return this.ProjectService.isApplicationNode(nodeId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getWorkgroupIdsOnNode(nodeId, periodId).length;\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * The pause screen status was changed. Update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n        this.TeacherDataService.pauseScreensChanged(isPaused);\n    }\n\n    /**\n     * Check if the project has a rubric\n     * @return whether the project has a rubric\n     */\n    projectHasRubric() {\n\n        // get the project rubric\n        var projectRubric = this.ProjectService.getProjectRubric();\n\n        if (projectRubric != null && projectRubric != '') {\n            // the project has a rubric\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Show the rubric in the grading view. We will show the step rubric and the\n     * component rubrics.\n     */\n    showProjectRubric() {\n\n        var projectRubric = \"<div style='margin-left:30px;margin-right:30px;margin-top:30px;margin-bottom:30px;'>\";\n\n        // get the project title\n        projectRubric += '<h3>' + this.ProjectService.getProjectTitle() + '</h3>';\n\n        // get the project rubric\n        projectRubric += this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\n\n        projectRubric += '</div>';\n\n        // display the rubrics in a popup\n        this.$mdDialog.show({\n            template: projectRubric,\n            clickOutsideToClose: true,\n            escapeToClose: true\n        });\n    }\n}\n\nNodeProgressController.$inject = [\n    '$mdDialog',\n    '$scope',\n    '$state',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}