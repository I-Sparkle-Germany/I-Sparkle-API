{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$scope","$state","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","currentGroup","items","idToOrder","nodeId","stateParams","stateParamNodeId","params","rootNode","id","setCurrentNodeByNodeId","startNodeId","getStartNodeId","getRootNode","currentGroupId","currentgroupid","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","currentPeriod","getCurrentPeriod","isPaused","isPeriodPaused","periodId","$on","event","args","previousNode","currentNode","type","setCurrentNode","isGroupNode","go","toState","toParams","fromState","fromParams","toNodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","count","getWorkgroupIdsOnNode","length","completionPercentage","getNodeCompletion","pauseScreensChanged","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\n\nclass NodeProgressController {\n\n    constructor($scope,\n                $state,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.currentGroup = null;\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.nodeId = null;\n        let stateParams = null;\n        let stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            this.nodeId = stateParamNodeId;\n        }\n\n        if (this.nodeId == null || this.nodeId === '') {\n            this.nodeId = this.ProjectService.rootNode.id;\n        }\n\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n        let startNodeId = this.ProjectService.getStartNodeId();\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = this.rootNode;\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n\n        let currentPeriod = this.getCurrentPeriod();\n\n        if (currentPeriod) {\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        }\n\n        /**\n         * Listen for current node changed event\n         */\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            let previousNode = args.previousNode;\n            let currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                let nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                this.nodeId = currentNode.id;\n                this.TeacherDataService.setCurrentNode(currentNode);\n\n                if (this.isGroupNode(this.nodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                //} else if (this.isApplicationNode(this.nodeId)) {\n                }\n            }\n\n            this.$state.go('root.nodeProgress', {nodeId: this.nodeId});\n        });\n\n        /**\n         * Listen for current period changed event\n         */\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\n            let currentPeriod = args.currentPeriod;\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\n        });\n\n        /**\n         * Listen for state change event\n         */\n        this.$scope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\n            let toNodeId = toParams.nodeId;\n            let fromNodeId = fromParams.nodeId;\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n            }\n\n            if (toState.name === 'root.project') {\n                let nodeId = toParams.nodeId;\n                if (this.ProjectService.isApplicationNode(nodeId)) {\n                    // scroll to top when viewing a new step\n                    document.getElementById('content').scrollTop = 0;\n                }\n            }\n        });\n    }\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    }\n\n    isApplicationNode(nodeId) {\n        return this.ProjectService.isApplicationNode(nodeId);\n    }\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    }\n\n    /**\n     * Get the number of students on the node\n     * @param nodeId the node id\n     * @returns the number of students that are on the node\n     */\n    getNumberOfStudentsOnNode(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the number of students that are on the node in the period\n        var count = this.StudentStatusService.getWorkgroupIdsOnNode(nodeId, periodId).length;\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the class or period that has completed the node\n     * @param nodeId the node id\n     * @returns the percentage of the class or period that has completed the node\n     */\n    getNodeCompletion(nodeId) {\n        // get the currently selected period\n        var currentPeriod = this.getCurrentPeriod();\n        var periodId = currentPeriod.periodId;\n\n        // get the percentage of the class or period that has completed the node\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\n\n        return completionPercentage;\n    }\n\n    /**\n     * The pause screen status was changed. Update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n        this.TeacherDataService.pauseScreensChanged(isPaused);\n    }\n}\n\nNodeProgressController.$inject = [\n    '$scope',\n    '$state',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default NodeProgressController;\n"]}