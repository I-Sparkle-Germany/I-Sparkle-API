{"version":3,"sources":["nodeProgressController.es6"],"names":["NodeProgressController","$mdDialog","$scope","$state","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","currentGroup","currentWorkgroup","getCurrentWorkgroup","items","idToOrder","maxScore","getMaxScore","nodeId","stateParams","stateParamNodeId","params","rootNode","id","setCurrentNodeByNodeId","startNodeId","getStartNodeId","getRootNode","currentGroupId","currentgroupid","flattenedProjectNodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","currentPeriod","getCurrentPeriod","isPaused","isPeriodPaused","periodId","showRubricButton","projectHasRubric","$on","event","args","previousNode","currentNode","type","setCurrentNode","isGroupNode","go","toState","toParams","fromState","fromParams","toNodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","setCurrentWorkgroup","context","componentId","componentType","category","data","saveEvent","completion","status","getStudentStatusForWorkgroupId","workgroupId","projectCompletion","score","getTotalScoreByWorkgroupId","count","getWorkgroupIdsOnNode","length","completionPercentage","getNodeCompletion","pauseScreensChanged","projectRubric","getProjectRubric","projectTitle","getProjectTitle","popupHeader","tabHeader","rubricContent","replaceAssetPaths","popupContent","tabContent","show","template","controller","DialogController","openRubricInNewTab","w","window","open","write","hide","closeRubric","clickOutsideToClose","escapeToClose","$inject"],"mappings":"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","file":"nodeProgressController.js","sourcesContent":["'use strict';\r\n\r\nclass NodeProgressController {\r\n\r\n    constructor($mdDialog,\r\n                $scope,\r\n                $state,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService) {\r\n\r\n        this.$mdDialog = $mdDialog;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n        this.currentGroup = null;\r\n\r\n        // the current workgroup\r\n        this.currentWorkgroup = this.TeacherDataService.getCurrentWorkgroup();\r\n\r\n        this.items = this.ProjectService.idToOrder;\r\n\r\n        this.maxScore = this.ProjectService.getMaxScore();\r\n\r\n        this.nodeId = null;\r\n        let stateParams = null;\r\n        let stateParamNodeId = null;\r\n\r\n        if (this.$state != null) {\r\n            stateParams = this.$state.params;\r\n        }\r\n\r\n        if (stateParams != null) {\r\n            stateParamNodeId = stateParams.nodeId;\r\n        }\r\n\r\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\r\n            this.nodeId = stateParamNodeId;\r\n        }\r\n\r\n        if (this.nodeId == null || this.nodeId === '') {\r\n            this.nodeId = this.ProjectService.rootNode.id;\r\n        }\r\n\r\n        this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\r\n\r\n        let startNodeId = this.ProjectService.getStartNodeId();\r\n        this.rootNode = this.ProjectService.getRootNode(startNodeId);\r\n\r\n        this.currentGroup = this.rootNode;\r\n\r\n        if (this.currentGroup != null) {\r\n            this.currentGroupId = this.currentGroup.id;\r\n            this.$scope.currentgroupid = this.currentGroupId;\r\n        }\r\n\r\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\r\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\r\n\r\n        var branches = this.ProjectService.getBranches();\r\n\r\n        let currentPeriod = this.getCurrentPeriod();\r\n\r\n        if (currentPeriod) {\r\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\r\n        }\r\n\r\n        this.showRubricButton = false;\r\n\r\n        if (this.projectHasRubric()) {\r\n            this.showRubricButton = true;\r\n        }\r\n\r\n        /**\r\n         * Listen for current node changed event\r\n         */\r\n        this.$scope.$on('currentNodeChanged', (event, args) => {\r\n            let previousNode = args.previousNode;\r\n            let currentNode = args.currentNode;\r\n            if (previousNode != null && previousNode.type === 'group') {\r\n                let nodeId = previousNode.id;\r\n            }\r\n\r\n            if (currentNode != null) {\r\n\r\n                this.nodeId = currentNode.id;\r\n                this.TeacherDataService.setCurrentNode(currentNode);\r\n\r\n                if (this.isGroupNode(this.nodeId)) {\r\n                    // current node is a group\r\n\r\n                    this.currentGroup = currentNode;\r\n                    this.currentGroupId = this.currentGroup.id;\r\n                    this.$scope.currentgroupid = this.currentGroupId;\r\n                //} else if (this.isApplicationNode(this.nodeId)) {\r\n                }\r\n            }\r\n\r\n            this.$state.go('root.nodeProgress', {nodeId: this.nodeId});\r\n        });\r\n\r\n        /**\r\n         * Listen for current period changed event\r\n         */\r\n        this.$scope.$on('currentPeriodChanged', (event, args) => {\r\n            let currentPeriod = args.currentPeriod;\r\n            this.isPaused = this.TeacherDataService.isPeriodPaused(currentPeriod.periodId);\r\n        });\r\n\r\n        // listen for the currentWorkgroupChanged event\r\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\r\n            this.currentWorkgroup = args.currentWorkgroup;\r\n        });\r\n\r\n        /**\r\n         * Listen for state change event\r\n         */\r\n        this.$scope.$on('$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) => {\r\n            let toNodeId = toParams.nodeId;\r\n            let fromNodeId = fromParams.nodeId;\r\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\r\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\r\n            }\r\n\r\n            if (toState.name === 'root.project') {\r\n                let nodeId = toParams.nodeId;\r\n                if (this.ProjectService.isApplicationNode(nodeId)) {\r\n                    // scroll to top when viewing a new step\r\n                    document.getElementById('content').scrollTop = 0;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('$destroy', () => {\r\n            // set the currently selected workgroup to null on state exit\r\n            this.TeacherDataService.setCurrentWorkgroup(null);\r\n        });\r\n\r\n        // save event when node progress view is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = this.nodeId, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"nodeProgressViewDisplayed\", data = { nodeId: this.nodeId };\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the studentStatus object for the currently selected workgroup\r\n     * @return studentStatus object or null\r\n     */\r\n    getCurrentWorkgroupCompletion() {\r\n        let completion = null;\r\n\r\n        if (this.currentWorkgroup) {\r\n            // get the workgroup's studentStatus\r\n            let status = this.StudentStatusService.getStudentStatusForWorkgroupId(this.currentWorkgroup.workgroupId);\r\n            if (status) {\r\n                completion = status.projectCompletion;\r\n            }\r\n        }\r\n\r\n        return completion;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the total project score for the currently selected workgroup\r\n     * @return score object or null\r\n     */\r\n    getCurrentWorkgroupScore() {\r\n        let score = null;\r\n\r\n        if (this.currentWorkgroup) {\r\n            score = this.TeacherDataService.getTotalScoreByWorkgroupId(this.currentWorkgroup.workgroupId);\r\n        }\r\n\r\n        return score;\r\n    }\r\n\r\n    isGroupNode(nodeId) {\r\n        return this.ProjectService.isGroupNode(nodeId);\r\n    }\r\n\r\n    isApplicationNode(nodeId) {\r\n        return this.ProjectService.isApplicationNode(nodeId);\r\n    }\r\n\r\n    /**\r\n     * Get the current period\r\n     */\r\n    getCurrentPeriod() {\r\n        return this.TeacherDataService.getCurrentPeriod();\r\n    }\r\n\r\n    /**\r\n     * Get the number of students on the node\r\n     * @param nodeId the node id\r\n     * @returns the number of students that are on the node\r\n     */\r\n    getNumberOfStudentsOnNode(nodeId) {\r\n        // get the currently selected period\r\n        var currentPeriod = this.getCurrentPeriod();\r\n        var periodId = currentPeriod.periodId;\r\n\r\n        // get the number of students that are on the node in the period\r\n        var count = this.StudentStatusService.getWorkgroupIdsOnNode(nodeId, periodId).length;\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the class or period that has completed the node\r\n     * @param nodeId the node id\r\n     * @returns the percentage of the class or period that has completed the node\r\n     */\r\n    getNodeCompletion(nodeId) {\r\n        // get the currently selected period\r\n        var currentPeriod = this.getCurrentPeriod();\r\n        var periodId = currentPeriod.periodId;\r\n\r\n        // get the percentage of the class or period that has completed the node\r\n        var completionPercentage = this.StudentStatusService.getNodeCompletion(nodeId, periodId);\r\n\r\n        return completionPercentage;\r\n    }\r\n\r\n    /**\r\n     * The pause screen status was changed. Update period(s) accordingly.\r\n     */\r\n    pauseScreensChanged(isPaused) {\r\n        this.TeacherDataService.pauseScreensChanged(isPaused);\r\n    }\r\n\r\n    /**\r\n     * Check if the project has a rubric\r\n     * @return whether the project has a rubric\r\n     */\r\n    projectHasRubric() {\r\n\r\n        // get the project rubric\r\n        var projectRubric = this.ProjectService.getProjectRubric();\r\n\r\n        if (projectRubric != null && projectRubric != '') {\r\n            // the project has a rubric\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Show the rubric in the grading view. We will show the step rubric and the\r\n     * component rubrics.\r\n     */\r\n    showRubric() {\r\n\r\n        // get the project title\r\n        var projectTitle = this.ProjectService.getProjectTitle();\r\n\r\n        /*\r\n         * create the header for the popup that contains the project title,\r\n         * 'Open in New Tab' button, and 'Close' button\r\n         */\r\n        var popupHeader = \"<div style='display: flex; margin-left: 30px; margin-right: 30px; margin-top: 30px; margin-bottom: 30px;'><div style='flex: 50%'><h3>\" + projectTitle + \"</h3></div><div style='flex: 50%; text-align: right'><md-button class='md-primary md-raised' ng-click='openRubricInNewTab()' translate='openInNewTab'></md-button> <md-button class='md-primary md-raised' ng-click='closeRubric()' translate='CLOSE'></md-button></div></div>\";\r\n\r\n        /*\r\n         * create the header for the new tab that contains the project title\r\n         */\r\n        var tabHeader = \"<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' /><link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' /><div style='display: flex; margin-left: 30px; margin-right: 30px; margin-top: 30px; margin-bottom: 30px;'><h1>\" + projectTitle + \"</h1></div>\";\r\n\r\n        // create the div that will hold the rubric content\r\n        var rubricContent = \"<div style='margin-left:30px;margin-right:30px;margin-top:30px;margin-bottom:30px;'>\";\r\n\r\n        // get the rubric content\r\n        rubricContent += this.ProjectService.replaceAssetPaths(this.ProjectService.getProjectRubric());\r\n\r\n        rubricContent += '</div>';\r\n\r\n        // create the popup content\r\n        var popupContent = popupHeader + rubricContent;\r\n\r\n        // create the tab content\r\n        var tabContent = tabHeader + rubricContent;\r\n\r\n        // display the rubric in a popup\r\n        this.$mdDialog.show({\r\n            template: popupContent,\r\n            controller: ['$scope', '$mdDialog',\r\n                function DialogController($scope, $mdDialog) {\r\n\r\n                    // display the rubric in a new tab\r\n                    $scope.openRubricInNewTab = function() {\r\n\r\n                        // open a new tab\r\n                        var w = window.open('', '_blank');\r\n\r\n                        // write the rubric content to the new tab\r\n                        w.document.write(tabContent);\r\n\r\n                        // close the popup\r\n                        $mdDialog.hide();\r\n                    }\r\n\r\n                    // close the popup\r\n                    $scope.closeRubric = function() {\r\n                        $mdDialog.hide();\r\n                    }\r\n                }\r\n            ],\r\n            clickOutsideToClose: true,\r\n            escapeToClose: true\r\n        });\r\n    }\r\n}\r\n\r\nNodeProgressController.$inject = [\r\n    '$mdDialog',\r\n    '$scope',\r\n    '$state',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService'\r\n];\r\n\r\nexport default NodeProgressController;\r\n"]}