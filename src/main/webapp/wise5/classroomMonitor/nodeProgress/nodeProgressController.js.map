{"version":3,"sources":["nodeProgressController.es6"],"names":[],"mappings":";;;;;;;;;;IAAM,sBAAsB;AACxB,aADE,sBAAsB,CACZ,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,kBAAkB,EAAE;8BAD7E,sBAAsB;;AAEpB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,aAAa,GAAG,aAAa,CAAC;AACnC,YAAI,CAAC,cAAc,GAAG,cAAc,CAAC;AACrC,YAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAC7C,YAAI,CAAC,KAAK,GAAG,eAAe,CAAC;AAC7B,YAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,YAAI,CAAC,OAAO,GAAG,EAAE;;;AAAC,AAGlB,YAAI,CAAC,iBAAiB,EAAE,CAAC;;AAEzB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;;AAE3C,YAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE;AAC3E,gBAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AACrC,gBAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACnC,gBAAI,YAAY,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,EAAE;AACvD,oBAAI,MAAM,GAAG,YAAY,CAAC,EAAE,CAAC;aAChC;;AAED,gBAAI,WAAW,IAAI,IAAI,EAAE;;AAErB,oBAAI,aAAa,GAAG,WAAW,CAAC,EAAE,CAAC;;AAEnC,oBAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE;;;AAGhD,wBAAI,CAAC,YAAY,GAAG,WAAW,CAAC;AAChC,wBAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;AAC3C,wBAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;iBACpD,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;;;AAG7D,wBAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,aAAa,EAAC,CAAC,CAAC;iBAC/D;aACJ;;AAED,gBAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SACxB,CAAC,CAAC,CAAC;;AAEJ,YAAI,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;AACvD,YAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;;AAE5D,YAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;;AAG7B,YAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;AAC3B,gBAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;AAC3C,gBAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;SACpD;;AAED,YAAI,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,4BAA4B,EAAE;;;AAAC,AAGjF,YAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;KACpD;;iBA3DC,sBAAsB;;6CA6DH,MAAM,EAAE;AACzB,mBAAO,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;SAC3D;;;oCAEW,MAAM,EAAE;AAChB,mBAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAClD;;;4CAEmB,MAAM,EAAE;AACxB,mBAAO,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;SAC1D;;;;;;;4CAKmB;;;AAGhB,gBAAI,eAAe,GAAG;AAClB,wBAAQ,EAAE,CAAC,CAAC;AACZ,0BAAU,EAAE,KAAK;aACpB,CAAC;;AAEF,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;;AAEnC,gBAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;;;AAAC,AAGpE,gBAAI,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,EAAE;AACjC,oBAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;;AAEjD,wBAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC1C;aACJ;SACJ;;;;;;;;yCAMgB,MAAM,EAAE;AACrB,gBAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACpD;;;;;;;2CAKkB;AACf,mBAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;SACrD;;;oCAEW,MAAM,EAAE;;AAEhB,gBAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,EAAC,MAAM,EAAC,MAAM,EAAC,CAAC,CAAC;SACvD;;;WAnHC,sBAAsB;;;AAqH5B,sBAAsB,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,eAAe,EAAE,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;;kBAEhG,sBAAsB","file":"nodeProgressController.js","sourcesContent":["class NodeProgressController {\n    constructor($scope, $state, ConfigService, ProjectService, TeacherDataService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.title = 'Grade By Step';\n        this.currentGroup = null;\n        this.items = null;\n        this.periods = [];\n\n        // initialize the periods\n        this.initializePeriods();\n\n        this.items = this.ProjectService.idToOrder;\n\n        this.$scope.$on('currentNodeChanged', angular.bind(this, function(event, args) {\n            var previousNode = args.previousNode;\n            var currentNode = args.currentNode;\n            if (previousNode != null && previousNode.type === 'group') {\n                var nodeId = previousNode.id;\n            }\n\n            if (currentNode != null) {\n\n                var currentNodeId = currentNode.id;\n\n                if (this.ProjectService.isGroupNode(currentNodeId)) {\n                    // current node is a group\n\n                    this.currentGroup = currentNode;\n                    this.currentGroupId = this.currentGroup.id;\n                    this.$scope.currentgroupid = this.currentGroupId;\n                } else if (this.ProjectService.isApplicationNode(currentNodeId)) {\n                    // current node is an application node\n                    // load the step grading view\n                    this.$state.go('root.nodeGrading', {nodeId: currentNodeId});\n                }\n            }\n\n            this.$scope.$apply();\n        }));\n\n        var startNodeId = this.ProjectService.getStartNodeId();\n        var rootNode = this.ProjectService.getRootNode(startNodeId);\n\n        this.currentGroup = rootNode;\n\n\n        if (this.currentGroup != null) {\n            this.currentGroupId = this.currentGroup.id;\n            this.$scope.currentgroupid = this.currentGroupId;\n        }\n\n        var flattenedProjectNodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n        //console.log(JSON.stringify(flattenedProjectNodeIds, null, 4));\n\n        var branches = this.ProjectService.getBranches();\n    }\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    nodeClicked(nodeId) {\n\n        this.$state.go('root.nodeGrading', {nodeId:nodeId});\n    };\n}\nNodeProgressController.$inject = ['$scope', '$state', 'ConfigService', 'ProjectService', 'TeacherDataService'];\n\nexport default NodeProgressController;"]}