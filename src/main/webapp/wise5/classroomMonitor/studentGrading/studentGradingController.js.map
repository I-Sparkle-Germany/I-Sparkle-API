{"version":3,"sources":["studentGradingController.es6"],"names":["StudentGradingController","$filter","$mdDialog","$mdMedia","$scope","$stateParams","AnnotationService","ConfigService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","document","body","scrollTop","documentElement","$translate","sort","nodeGradingSort","permissions","getPermissions","workgroupId","parseInt","nodeIds","getFlattenedProjectAsNodeIds","branches","getBranches","avatarColor","getAvatarColorForWorkgroupId","displayNames","getDisplayNamesByWorkgroupId","maxScore","getMaxScoreForWorkgroupId","totalScore","getTotalScoreByWorkgroupId","projectCompletion","getStudentProjectCompletion","$on","event","args","notification","type","toWorkgroupId","nodeId","nodesById","annotation","studentStatus","studentWork","context","componentId","componentType","category","data","saveEvent","result","isNodeIdInABranch","branchPaths","getBranchPathsByNodeId","bp","length","branchPathHasWork","branchPath","n","nodeIdInBranch","componentStates","getComponentStatesByWorkgroupIdAndNodeId","getNodePositionAndTitleByNodeId","getEventsByWorkgroupId","getEventsByWorkgroupIdAndNodeId","getAnnotationsToWorkgroupId","getAnnotationsToWorkgroupIdAndNodeId","stepWorkId","annotationMappings","saveAnnotation","getComponentsByNodeId","componentState","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","$inject"],"mappings":"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","file":"studentGradingController.js","sourcesContent":["'use strict';\r\n\r\nclass StudentGradingController {\r\n\r\n  constructor($filter,\r\n              $mdDialog,\r\n              $mdMedia,\r\n              $scope,\r\n              $stateParams,\r\n              AnnotationService,\r\n              ConfigService,\r\n              NotificationService,\r\n              ProjectService,\r\n              StudentStatusService,\r\n              TeacherDataService) {\r\n\r\n    this.$filter = $filter;\r\n    this.$mdDialog = $mdDialog;\r\n    $scope.$mdMedia = $mdMedia;\r\n    this.$scope = $scope;\r\n    this.$stateParams = $stateParams;\r\n    this.AnnotationService = AnnotationService;\r\n    this.ConfigService = ConfigService;\r\n    this.NotificationService = NotificationService;\r\n    this.ProjectService = ProjectService;\r\n    this.StudentStatusService = StudentStatusService;\r\n    this.TeacherDataService = TeacherDataService;\r\n\r\n    // scroll to the top of the page\r\n    document.body.scrollTop = document.documentElement.scrollTop = 0;\r\n\r\n    this.$translate = this.$filter('translate');\r\n\r\n    this.sort = this.TeacherDataService.nodeGradingSort;\r\n    //this.hiddenComponents = [];\r\n    this.permissions = this.ConfigService.getPermissions();\r\n    this.workgroupId = parseInt(this.$stateParams.workgroupId);\r\n    this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\r\n    this.branches = this.ProjectService.getBranches();\r\n    this.avatarColor = this.ConfigService.getAvatarColorForWorkgroupId(this.workgroupId);\r\n    this.displayNames = this.ConfigService.getDisplayNamesByWorkgroupId(this.workgroupId);\r\n    let maxScore = this.StudentStatusService.getMaxScoreForWorkgroupId(this.workgroupId);\r\n    this.maxScore = maxScore ? maxScore : 0;\r\n    this.totalScore = this.TeacherDataService.getTotalScoreByWorkgroupId(this.workgroupId);\r\n    this.projectCompletion = this.StudentStatusService.getStudentProjectCompletion(this.workgroupId, true);\r\n\r\n    this.$scope.$on('projectSaved', (event, args) => {\r\n        // update project maxScore\r\n        this.maxScore = this.StudentStatusService.getMaxScoreForWorkgroupId(this.workgroupId);\r\n\r\n        // update max scores for all nodes\r\n        //this.updateNodeMaxScores();\r\n    });\r\n\r\n    this.$scope.$on('notificationAdded', (event, notification) => {\r\n        if (notification.type === 'CRaterResult') {\r\n            // there is a new CRaterResult notification\r\n            // TODO: expand to encompass other notification types that should be shown to teacher\r\n            let workgroupId = notification.toWorkgroupId;\r\n            let nodeId = notification.nodeId;\r\n            if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n              // update the node with the new notification\r\n              //this.updateNode(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.$scope.$on('notificationChanged', (event, notification) => {\r\n        if (notification.type === 'CRaterResult') {\r\n            // a CRaterResult notification has changed\r\n            // TODO: expand to encompass other notification types that should be shown to teacher\r\n            let workgroupId = notification.toWorkgroupId;\r\n            let nodeId = notification.nodeId;\r\n            if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                // update the node with the new notification\r\n                //this.updateNode(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.$scope.$on('annotationReceived', (event, args) => {\r\n        let annotation = args.annotation;\r\n\r\n        if (annotation) {\r\n            let workgroupId = annotation.toWorkgroupId;\r\n            let nodeId = annotation.nodeId;\r\n            if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                // update the total score for the workgroup\r\n                this.totalScore = this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\r\n\r\n                // update the node with the new annotation\r\n                //this.updateNode(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    // listen for the studentStatusReceived event\r\n    this.$scope.$on('studentStatusReceived', (event, args) => {\r\n        // get the workgroup id\r\n        let studentStatus = args.studentStatus;\r\n        let workgroupId = studentStatus.workgroupId;\r\n\r\n        if (workgroupId === this.workgroupId) {\r\n            // update project completion for workgroup\r\n            this.projectCompletion = this.StudentStatusService.getStudentProjectCompletion(this.workgroupId, true);\r\n        }\r\n    });\r\n\r\n    this.$scope.$on('studentWorkReceived', (event, args) => {\r\n        let studentWork = args.studentWork;\r\n\r\n        if (studentWork != null) {\r\n            let workgroupId = studentWork.workgroupId;\r\n            let nodeId = studentWork.nodeId;\r\n            if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                // update the node with the new componentState\r\n                //this.updateNode(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    // save event when student grading view is displayed\r\n    let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n        category = \"Navigation\", event = \"studentGradingViewDisplayed\", data = { workgroupId: this.workgroupId };\r\n    this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n  }\r\n\r\n  /**\r\n   * Check if we should show the given node id for the student. We will\r\n   * determine whether to show a node id or not by checking to see if\r\n   * the node id is in a branch. If the node id is not in a branch we\r\n   * will show it. If the node id is in a branch, we need to check which\r\n   * branch paths the node id is in. If the node id is in a branch path\r\n   * and the student has work for any node id in the branch path, we will\r\n   * show the node id passed into this function.\r\n   * @param nodeId the node id\r\n   * @return whether to show the node for this student\r\n   */\r\n  showNodeIdForStudent(nodeId) {\r\n      var result = false;\r\n\r\n      if (this.ProjectService.isNodeIdInABranch(this.branches, nodeId)) {\r\n          /*\r\n           * node is in a branch so we will check if we should show\r\n           * the node for this student. if the student has work in any\r\n           * step in the branch path, we will show all the nodes in the\r\n           * branch.\r\n           */\r\n\r\n          // get the branches this node id is in\r\n          var branchPaths = this.ProjectService.getBranchPathsByNodeId(this.branches, nodeId);\r\n\r\n          // loop through all the branch paths that this node id is in\r\n          for (var bp = 0; bp < branchPaths.length; bp++) {\r\n              var branchPathHasWork = false;\r\n\r\n              // get a branch path\r\n              var branchPath = branchPaths[bp];\r\n\r\n              // loop through all the node ids in the branch path\r\n              for (var n = 0; n < branchPath.length; n++) {\r\n\r\n                  // get a node id in the branch path\r\n                  var nodeIdInBranch = branchPath[n];\r\n\r\n                  // get the work for this student for the node id\r\n                  var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(this.workgroupId, nodeIdInBranch);\r\n\r\n                  if (componentStates != null && componentStates.length > 0) {\r\n                      /*\r\n                       * the student has work for the step so we will say\r\n                       * the branch path has work and that the node id\r\n                       * passed into the function should be shown\r\n                       */\r\n                      result = true;\r\n                  }\r\n              }\r\n          }\r\n\r\n      } else {\r\n          // node is not in a branch so we will show it\r\n          result = true;\r\n      }\r\n\r\n      return result;\r\n  };\r\n\r\n  getNodePositionAndTitleByNodeId(nodeId) {\r\n      return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n  };\r\n\r\n  getEventsByWorkgroupId(workgroupId) {\r\n      return this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\r\n  };\r\n\r\n  getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n      return this.TeacherDataService.getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n  };\r\n\r\n  getAnnotationsToWorkgroupId(workgroupId) {\r\n      return this.TeacherDataService.getAnnotationsToWorkgroupId(workgroupId);\r\n  };\r\n\r\n  getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n      return this.TeacherDataService.getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n  };\r\n\r\n  getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n      return this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n  };\r\n\r\n  scoreChanged(stepWorkId) {\r\n      var annotation = this.annotationMappings[stepWorkId + '-score'];\r\n      this.AnnotationService.saveAnnotation(annotation);\r\n  };\r\n\r\n  commentChanged(stepWorkId) {\r\n      var annotation = this.annotationMappings[stepWorkId + '-comment'];\r\n      this.AnnotationService.saveAnnotation(annotation);\r\n  }\r\n\r\n  getComponentsByNodeId(nodeId) {\r\n      return this.ProjectService.getComponentsByNodeId(nodeId);\r\n  }\r\n\r\n  /**\r\n   * Get the student data for a specific student for a specific component\r\n   * @param workgroupId the workgroupId id of Workgroup who created the component state\r\n   * @param nodeId the node id\r\n   * @param componentId the componentId the component id\r\n   * @return the student data for the given component\r\n   */\r\n  getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\r\n      var componentState = null;\r\n\r\n      if (workgroupId != null && nodeId != null && componentId != null) {\r\n\r\n          // get the latest component state for the component\r\n          componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\r\n      }\r\n\r\n      return componentState;\r\n  }\r\n\r\n  /**\r\n   * Gets and returns the total project score for the currently selected workgroup\r\n   * @return score object or null\r\n   */\r\n  getCurrentWorkgroupScore() {\r\n      return this.TeacherDataService.getTotalScoreByWorkgroupId(this.workgroupId);\r\n  }\r\n}\r\n\r\nStudentGradingController.$inject = [\r\n  '$filter',\r\n  '$mdDialog',\r\n  '$mdMedia',\r\n  '$scope',\r\n  '$stateParams',\r\n  'AnnotationService',\r\n  'ConfigService',\r\n  'NotificationService',\r\n  'ProjectService',\r\n  'StudentStatusService',\r\n  'TeacherDataService'\r\n];\r\n\r\nexport default StudentGradingController;\r\n"]}