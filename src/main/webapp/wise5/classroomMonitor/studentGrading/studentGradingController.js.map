{"version":3,"sources":["studentGradingController.es6"],"names":[],"mappings":"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","file":"studentGradingController.js","sourcesContent":["'use strict';\n\nclass StudentGradingController {\n\n    constructor($mdDialog,\n                $stateParams,\n                AnnotationService,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                TeacherDataService) {\n\n        this.$mdDialog = $mdDialog;\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.annotationMappings = {};\n\n        this.workgroupId = parseInt(this.$stateParams.workgroupId);\n\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n        this.branches = this.ProjectService.getBranches();\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        this.canViewStudentNames = true;\n        this.canGradeStudentWork = true;\n        \n        // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n        var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n        \n        if (role === 'owner') {\n            // the teacher is the owner of the run and has full access\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'write') {\n            // the teacher is a shared teacher that can grade the student work\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'read') {\n            // the teacher is a shared teacher that can only view the student work\n            this.canViewStudentNames = false;\n            this.canGradeStudentWork = false;\n        }\n        \n        if (this.canViewStudentNames) {\n            // display the student name\n            this.userName = this.ConfigService.getUserNameByWorkgroupId(this.workgroupId);\n        } else {\n            // do not display the student name. instead display the workgroup id.\n            this.userName = this.workgroupId;\n        }\n\n        // scroll to the top of the page when the page loads2\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\n    }\n\n    /**\n     * Check if we should show the given node id for the student. We will\n     * determine whether to show a node id or not by checking to see if\n     * the node id is in a branch. If the node id is not in a branch we\n     * will show it. If the node id is in a branch, we need to check which\n     * branch paths the node id is in. If the node id is in a branch path\n     * and the student has work for any node id in the branch path, we will\n     * show the node id passed into this function.\n     * @param nodeId the node id\n     * @return whether to show the node for this student\n     */\n    showNodeIdForStudent(nodeId) {\n        var result = false;\n\n        if (this.ProjectService.isNodeIdInABranch(this.branches, nodeId)) {\n            /*\n             * node is in a branch so we will check if we should show\n             * the node for this student. if the student has work in any\n             * step in the branch path, we will show all the nodes in the\n             * branch.\n             */\n\n            // get the branches this node id is in\n            var branchPaths = this.ProjectService.getBranchPathsByNodeId(this.branches, nodeId);\n\n            // loop through all the branch paths that this node id is in\n            for (var bp = 0; bp < branchPaths.length; bp++) {\n                var branchPathHasWork = false;\n\n                // get a branch path\n                var branchPath = branchPaths[bp];\n\n                // loop through all the node ids in the branch path\n                for (var n = 0; n < branchPath.length; n++) {\n\n                    // get a node id in the branch path\n                    var nodeIdInBranch = branchPath[n];\n\n                    // get the work for this student for the node id\n                    var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(this.workgroupId, nodeIdInBranch);\n\n                    if (componentStates != null && componentStates.length > 0) {\n                        /*\n                         * the student has work for the step so we will say\n                         * the branch path has work and that the node id\n                         * passed into the function should be shown\n                         */\n                        result = true;\n                    }\n                }\n            }\n\n        } else {\n            // node is not in a branch so we will show it\n            result = true;\n        }\n\n        return result;\n    };\n\n    getNodePositionAndTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    };\n\n    getEventsByWorkgroupId(workgroupId) {\n        return this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        return this.TeacherDataService.getAnnotationsToWorkgroupId(workgroupId);\n    };\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    };\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Get the student data for a specific student for a specific component\n     * @param workgroupId the workgroupId id of Workgroup who created the component state\n     * @param nodeId the node id\n     * @param componentId the componentId the component id\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    }\n\n    showNotebookReport($event) {\n        this.NotebookService.retrieveNotebookItems(this.workgroupId).then((notebookItems) => {\n            // assume only one report for now\n            let reportItemId = this.NotebookService.config.itemTypes.report.notes[0].reportId;\n            let reportItem = this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(reportItemId);\n            let reportItemContent = reportItem.content.content;\n            this.$mdDialog.show(this.$mdDialog.alert({\n                title: reportItem.content.title,\n                htmlContent: reportItemContent,\n                ok: 'Close',\n                targetEvent: $event\n            })).finally(() => { alert = undefined; });\n        });\n    }\n}\n\nStudentGradingController.$inject = [\n    '$mdDialog',\n    '$stateParams',\n    'AnnotationService',\n    'ConfigService',\n    'NotebookService',\n    'ProjectService',\n    'TeacherDataService'\n];\n\nexport default StudentGradingController;"]}