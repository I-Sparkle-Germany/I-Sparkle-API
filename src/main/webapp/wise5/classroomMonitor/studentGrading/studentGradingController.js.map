{"version":3,"sources":["studentGradingController.es6"],"names":[],"mappings":"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","file":"studentGradingController.js","sourcesContent":["define(['app'], function(app) {\n\n    app\n    .$controllerProvider\n    .register('StudentGradingController', ['$state', '$stateParams', 'AnnotationService', 'ConfigService', 'ProjectService', 'TeacherDataService',\n                                            function ($state, $stateParams, AnnotationService, ConfigService, ProjectService, TeacherDataService) {\n\n        this.annotationMappings = {};\n\n        this.workgroupId = parseInt($stateParams.workgroupId);\n\n        this.userName = ConfigService.getUserNameByWorkgroupId(this.workgroupId);\n\n        this.nodeIds = ProjectService.getFlattenedProjectAsNodeIds();\n\n        this.branches = ProjectService.getBranches();\n\n        this.teacherWorkgroupId = ConfigService.getWorkgroupId();\n\n        /**\n         * Check if we should show the given node id for the student. We will\n         * determine whether to show a node id or not by checking to see if\n         * the node id is in a branch. If the node id is not in a branch we\n         * will show it. If the node id is in a branch, we need to check which\n         * branch paths the node id is in. If the node id is in a branch path\n         * and the student has work for any node id in the branch path, we will\n         * show the node id passed into this function.\n         * @param nodeId the node id\n         * @return whether to show the node for this student\n         */\n        this.showNodeIdForStudent = function(nodeId) {\n            var result = false;\n\n            if (ProjectService.isNodeIdInABranch(this.branches, nodeId)) {\n                /*\n                 * node is in a branch so we will check if we should show\n                 * the node for this student. if the student has work in any\n                 * step in the branch path, we will show all the nodes in the\n                 * branch.\n                 */\n\n                // get the branches this node id is in\n                var branchPaths = ProjectService.getBranchPathsByNodeId(this.branches, nodeId);\n\n                // loop through all the branch paths that this node id is in\n                for (var bp = 0; bp < branchPaths.length; bp++) {\n                    var branchPathHasWork = false;\n\n                    // get a branch path\n                    var branchPath = branchPaths[bp];\n\n                    // loop through all the node ids in the branch path\n                    for (var n = 0; n < branchPath.length; n++) {\n\n                        // get a node id in the branch path\n                        var nodeIdInBranch = branchPath[n];\n\n                        // get the work for this student for the node id\n                        var componentStates = TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(this.workgroupId, nodeIdInBranch);\n\n                        if (componentStates != null && componentStates.length > 0) {\n                            /*\n                             * the student has work for the step so we will say\n                             * the branch path has work and that the node id\n                             * passed into the function should be shown\n                             */\n                            result = true;\n                        }\n                    }\n                }\n\n            } else {\n                // node is not in a branch so we will show it\n                result = true;\n            }\n\n            return result;\n        };\n\n        this.getNodePositionAndTitleByNodeId = function(nodeId) {\n            return ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        };\n\n        this.getEventsByWorkgroupId = function(workgroupId) {\n            return TeacherDataService.getEventsByWorkgroupId(workgroupId);\n        };\n\n        this.getEventsByWorkgroupIdAndNodeId = function(workgroupId, nodeId) {\n            return TeacherDataService.getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId);\n        };\n\n        this.getAnnotationsToWorkgroupId = function(workgroupId) {\n            return TeacherDataService.getAnnotationsToWorkgroupId(workgroupId);\n        };\n\n        this.getAnnotationsToWorkgroupIdAndNodeId = function(workgroupId, nodeId) {\n            return TeacherDataService.getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId);\n        };\n\n        this.getComponentStatesByWorkgroupIdAndNodeId = function(workgroupId, nodeId) {\n            return TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n        };\n\n        this.scoreChanged = function(stepWorkId) {\n            var annotation = this.annotationMappings[stepWorkId + '-score'];\n            AnnotationService.saveAnnotation(annotation);\n        };\n\n        this.commentChanged = function(stepWorkId) {\n            var annotation = this.annotationMappings[stepWorkId + '-comment'];\n            AnnotationService.saveAnnotation(annotation);\n        }\n\n        this.getComponentsByNodeId = function(nodeId) {\n            return ProjectService.getComponentsByNodeId(nodeId);\n        }\n\n        /**\n         * Get the student data for a specific student for a specific component\n         * @param workgroupId the workgroupId id of Workgroup who created the component state\n         * @param nodeId the node id\n         * @param componentId the componentId the component id\n         * @return the student data for the given component\n         */\n        this.getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId = function(workgroupId, nodeId, componentId) {\n            var componentState = null;\n\n            if (workgroupId != null && nodeId != null && componentId != null) {\n\n                // get the latest component state for the component\n                componentState = TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n            }\n\n            return componentState;\n        };\n\n        // scroll to the top of the page when the page loads\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\n    }]);\n\n});"]}