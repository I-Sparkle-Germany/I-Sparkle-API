{"version":3,"sources":["studentGradingController.es6"],"names":["StudentGradingController","$filter","$mdDialog","$mdMedia","$scope","$state","$stateParams","AnnotationService","ConfigService","NotificationService","ProjectService","StudentStatusService","TeacherDataService","$translate","document","body","scrollTop","documentElement","sort","studentGradingSort","stepGradingSort","permissions","getPermissions","workgroupId","parseInt","avatarColor","getAvatarColorForWorkgroupId","displayNames","getDisplayNamesByWorkgroupId","maxScore","getMaxScoreForWorkgroupId","totalScore","getTotalScoreByWorkgroupId","projectCompletion","getStudentProjectCompletion","showNonWorkNodes","nodeIds","getFlattenedProjectAsNodeIds","nodesById","nodeVisibilityById","nodesInViewById","setNodesById","$on","event","args","updateNodeMaxScores","notification","type","toWorkgroupId","nodeId","updateNode","annotation","studentWork","workgroup","currentWorkgroup","go","context","componentId","componentType","category","data","saveEvent","l","length","i","id","isApplicationNode","node","getNodeById","init","alertNotifications","getAlertNotificationsByNodeId","hasAlert","hasNewAlert","nodeHasNewAlert","completionStatus","getNodeCompletionStatusByNodeId","hasWork","nodeHasWork","hasNewWork","isVisible","getNodeCompletionStatus","score","getNodeScoreByNodeId","hasScore","getMaxScoreForNode","hasMaxScore","scorePct","toFixed","order","getOrderById","show","isNodeShown","angular","copy","getAlertNotifications","newAlert","alert","timeDismissed","isCompleted","latestWorkTime","getLatestWorkTimeByNodeId","latestAnnotationTime","getLatestAnnotationTimeByNodeId","studentStatus","getStudentStatusForWorkgroupId","nodeStatus","nodeStatuses","isVisited","status","time","componentStates","getComponentStatesByNodeId","n","componentState","serverSaveTime","annotations","getAnnotationsByNodeId","fromWorkgroupId","getWorkgroupId","getScore","getLatestComponentStateByWorkgroupIdNodeIdAndComponentId","currentStep","getCurrentStep","value","orderBy","isExpandAll","inview","$inject"],"mappings":"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","file":"studentGradingController.js","sourcesContent":["'use strict';\r\n\r\nclass StudentGradingController {\r\n\r\n    constructor($filter,\r\n                $mdDialog,\r\n                $mdMedia,\r\n                $scope,\r\n                $state,\r\n                $stateParams,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NotificationService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService) {\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        $scope.$mdMedia = $mdMedia;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.$stateParams = $stateParams;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NotificationService = NotificationService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // scroll to the top of the page\r\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\r\n\r\n        this.sort = this.TeacherDataService.studentGradingSort;\r\n        this.TeacherDataService.stepGradingSort = this.sort;\r\n        this.permissions = this.ConfigService.getPermissions();\r\n        this.workgroupId = parseInt(this.$stateParams.workgroupId);\r\n        this.avatarColor = this.ConfigService.getAvatarColorForWorkgroupId(this.workgroupId);\r\n        this.displayNames = this.ConfigService.getDisplayNamesByWorkgroupId(this.workgroupId);\r\n        let maxScore = this.StudentStatusService.getMaxScoreForWorkgroupId(this.workgroupId);\r\n        this.maxScore = maxScore ? maxScore : 0;\r\n        this.totalScore = this.TeacherDataService.getTotalScoreByWorkgroupId(this.workgroupId);\r\n        this.projectCompletion = this.StudentStatusService.getStudentProjectCompletion(this.workgroupId, true);\r\n        this.showNonWorkNodes = false;\r\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\r\n        this.nodesById = {}; // object that will hold node names, statuses, scores, notifications, etc.\r\n        this.nodeVisibilityById = {}; // object that specifies whether student work is visible for each node\r\n        this.nodesInViewById = {}; // object that holds whether the node is in view or not\r\n\r\n        this.setNodesById();\r\n\r\n        this.$scope.$on('projectSaved', (event, args) => {\r\n            // project info has changed, so update max scores\r\n            this.maxScore = this.StudentStatusService.getMaxScoreForWorkgroupId(this.workgroupId);\r\n            this.updateNodeMaxScores();\r\n        });\r\n\r\n        this.$scope.$on('notificationAdded', (event, notification) => {\r\n          if (notification.type === 'CRaterResult') {\r\n              // there is a new CRaterResult notification\r\n              // TODO: expand to encompass other notification types that should be shown to teacher\r\n              let workgroupId = notification.toWorkgroupId;\r\n              let nodeId = notification.nodeId;\r\n              if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                this.updateNode(nodeId);\r\n              }\r\n          }\r\n        });\r\n\r\n        this.$scope.$on('notificationChanged', (event, notification) => {\r\n            if (notification.type === 'CRaterResult') {\r\n                // a CRaterResult notification has changed\r\n                // TODO: expand to encompass other notification types that should be shown to teacher\r\n                let workgroupId = notification.toWorkgroupId;\r\n                let nodeId = notification.nodeId;\r\n                if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                    this.updateNode(nodeId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('annotationReceived', (event, args) => {\r\n            // a new annotation has been received, so update corresponding node\r\n            let annotation = args.annotation;\r\n            if (annotation) {\r\n                let workgroupId = annotation.toWorkgroupId;\r\n                let nodeId = annotation.nodeId;\r\n                if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                    this.totalScore = this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\r\n                    this.updateNode(nodeId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('studentWorkReceived', (event, args) => {\r\n            // new student work has been received, so update corresponding node\r\n            let studentWork = args.studentWork;\r\n            if (studentWork != null) {\r\n                let workgroupId = studentWork.workgroupId;\r\n                let nodeId = studentWork.nodeId;\r\n                if (workgroupId === this.workgroupId && this.nodesById[nodeId]) {\r\n                    this.updateNode(nodeId);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\r\n            // the current workgroup has chnged, so reload the view\r\n            let workgroup = args.currentWorkgroup;\r\n            if (currentWorkgroup != null) {\r\n                this.$state.go('root.team', {workgroupId: workgroup.workgroupId});\r\n            }\r\n        });\r\n\r\n        // save event when student grading view is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"studentGradingViewDisplayed\", data = { workgroupId: this.workgroupId };\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    /**\r\n     * Build the nodesById object; don't include group nodes\r\n     */\r\n    setNodesById() {\r\n        let l = this.nodeIds.length;\r\n        for (let i = 0; i < l; i++) {\r\n            let id = this.nodeIds[i];\r\n            let isApplicationNode = this.ProjectService.isApplicationNode(id);\r\n            if (isApplicationNode) {\r\n              let node = this.ProjectService.getNodeById(id);\r\n              this.nodesById[id] = node;\r\n              this.nodeVisibilityById[id] = false;\r\n              this.updateNode(id, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update statuses, scores, notifications, etc. for a node object\r\n     * @param nodeID a node ID number\r\n     * @param init Boolean whether we're in controller initialization or not\r\n     */\r\n    updateNode(nodeId, init) {\r\n        let node = this.nodesById[nodeId];\r\n\r\n        if (node) {\r\n            let alertNotifications = this.getAlertNotificationsByNodeId(nodeId);\r\n            node.hasAlert = alertNotifications.length > 0;\r\n            node.hasNewAlert = this.nodeHasNewAlert(alertNotifications);\r\n            let completionStatus = this.getNodeCompletionStatusByNodeId(nodeId);\r\n            node.hasWork = this.ProjectService.nodeHasWork(nodeId);\r\n            node.hasNewWork = completionStatus.hasNewWork;\r\n            node.isVisible = completionStatus.isVisible ? 1 : 0;\r\n            node.completionStatus = this.getNodeCompletionStatus(completionStatus);\r\n            node.score = this.getNodeScoreByNodeId(nodeId);\r\n            node.hasScore = node.score > -1;\r\n            node.maxScore = this.ProjectService.getMaxScoreForNode(nodeId);\r\n            if (node.maxScore > 0) {\r\n              node.hasMaxScore = true;\r\n              node.scorePct = node.score > -1 ? +((node.score / node.maxScore).toFixed(2)) : 0;\r\n            } else {\r\n              node.hasMaxScore = false;\r\n              node.scorePct = 0;\r\n            }\r\n            node.order = this.ProjectService.getOrderById(nodeId);\r\n            node.show = this.isNodeShown(nodeId);\r\n\r\n            if (!init) {\r\n                this.nodesById[nodeId] = angular.copy(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    getAlertNotificationsByNodeId(nodeId) {\r\n        let args = {};\r\n        args.nodeId = nodeId;\r\n        args.toWorkgroupId = this.workgroupId;\r\n        return this.NotificationService.getAlertNotifications(args);\r\n    }\r\n\r\n    nodeHasNewAlert(alertNotifications) {\r\n        let newAlert = false;\r\n\r\n        let l = alertNotifications.length;\r\n        for (let i = 0; i < l; i++) {\r\n            let alert = alertNotifications[i];\r\n            if (!alert.timeDismissed) {\r\n                newAlert = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return newAlert;\r\n    }\r\n\r\n    /**\r\n     * Returns an object with node completion status, latest work time, and latest annotation time\r\n     * for a workgroup for the current node\r\n     * @param nodeId a node ID number\r\n     * @returns Object with completion, latest work time, latest annotation time\r\n     */\r\n    getNodeCompletionStatusByNodeId(nodeId) {\r\n        let isCompleted = false;\r\n        let isVisible = false;\r\n\r\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time?\r\n        let latestWorkTime = this.getLatestWorkTimeByNodeId(nodeId);\r\n\r\n        let latestAnnotationTime = this.getLatestAnnotationTimeByNodeId(nodeId);\r\n        let studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(this.workgroupId);\r\n        if (studentStatus != null) {\r\n            let nodeStatus = studentStatus.nodeStatuses[nodeId];\r\n            if (nodeStatus) {\r\n                isVisible = nodeStatus.isVisible;\r\n                if (latestWorkTime) {\r\n                    // workgroup has at least one componentState for this node, so check if node is completed\r\n                    isCompleted = nodeStatus.isCompleted;\r\n                }\r\n\r\n                if (!this.ProjectService.nodeHasWork(nodeId)) {\r\n                    // the step does not generate any work so completion = visited\r\n                    isCompleted = nodeStatus.isVisited;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            isCompleted: isCompleted,\r\n            isVisible: isVisible,\r\n            latestWorkTime: latestWorkTime,\r\n            latestAnnotationTime: latestAnnotationTime\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns a numerical status value for a given completion status object depending on node completion\r\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\r\n     * @param completionStatus Object\r\n     * @returns Integer status value\r\n     */\r\n    getNodeCompletionStatus(completionStatus) {\r\n        let hasWork = completionStatus.latestWorkTime !== null;\r\n        let isCompleted = completionStatus.isCompleted;\r\n        let isVisible = completionStatus.isVisible;\r\n\r\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\r\n        let status = 0; // default\r\n\r\n        if (!isVisible) {\r\n            status = -1;\r\n        } else if (isCompleted) {\r\n            status = 2;\r\n        } else if (hasWork) {\r\n            status = 1;\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    getLatestWorkTimeByNodeId(nodeId) {\r\n        let time = null;\r\n        let componentStates = this.TeacherDataService.getComponentStatesByNodeId(nodeId);\r\n        let n = componentStates.length-1;\r\n\r\n        // loop through component states for this node, starting with most recent\r\n        for (let i = n; i > -1; i--) {\r\n            let componentState = componentStates[i];\r\n            if (componentState.workgroupId === this.workgroupId) {\r\n                // componentState is for given workgroupId\r\n                time = componentState.serverSaveTime;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    getLatestAnnotationTimeByNodeId(nodeId) {\r\n        let time = null;\r\n        let annotations = this.TeacherDataService.getAnnotationsByNodeId(nodeId);\r\n        let n = annotations.length-1;\r\n\r\n        // loop through annotations for this node, starting with most recent\r\n        for (let i = n; i > -1; i--) {\r\n            let annotation = annotations[i];\r\n            // TODO: support checking for annotations from shared teachers\r\n            if (annotation.toWorkgroupId === this.workgroupId && annotation.fromWorkgroupId === this.ConfigService.getWorkgroupId()) {\r\n                time = annotation.serverSaveTime;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    /**\r\n     * Returns the score for the current workgroup for a given nodeId\r\n     * @param nodeId a node ID number\r\n     * @returns Number score value (defaults to -1 if node has no score)\r\n     */\r\n    getNodeScoreByNodeId(nodeId) {\r\n        let score = this.AnnotationService.getScore(this.workgroupId, nodeId);\r\n        return (typeof score === 'number' ? score : -1);\r\n    }\r\n\r\n    /**\r\n     * Returns a numerical status value for a given completion status object depending on node completion\r\n     * Available status values are: 0 (not visited/no work; default), 1 (partially completed), 2 (completed)\r\n     * @param completionStatus Object\r\n     * @returns Integer status value\r\n     */\r\n    getWorkgroupCompletionStatus(completionStatus) {\r\n        let hasWork = completionStatus.latestWorkTime !== null;\r\n        let isCompleted = completionStatus.isCompleted;\r\n        let isVisible = completionStatus.isVisible;\r\n\r\n        // TODO: store this info in the nodeStatus so we don't have to calculate every time (and can use more widely)?\r\n        let status = 0; // default\r\n\r\n        if (!isVisible) {\r\n            status = -1;\r\n        } else if (isCompleted) {\r\n            status = 2;\r\n        } else if (hasWork) {\r\n            status = 1;\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Get the student data for a specific part\r\n     * @param the componentId\r\n     * @param the nodeId id of node we're looking for\r\n     * @return the student data for the given component\r\n     */\r\n    getLatestComponentStateByNodeIdAndComponentId(nodeId,  componentId) {\r\n        var componentState = null;\r\n\r\n        if (nodeId != null && componentId != null) {\r\n            // get the latest component state for the component\r\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(this.workgroupId, nodeId, componentId);\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a node should be shown\r\n     * @param nodeId the node Id to look for\r\n     * @returns boolean whether the workgroup should be shown\r\n     */\r\n    isNodeShown(nodeId) {\r\n        let show = false;\r\n        let node = this.nodesById[nodeId];\r\n\r\n        if (node.isVisible && (node.hasWork || this.showNonWorkNodes)) {\r\n            let currentStep = this.TeacherDataService.getCurrentStep();\r\n            if (currentStep) {\r\n                // there is a currently selected step, so check if this one matches\r\n                if (currentStep.nodeId === parseInt(nodeId)) {\r\n                    show = true;\r\n                }\r\n            } else {\r\n                // there is no currently selected step, so show this one\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the total project score for the currently selected workgroup\r\n     * @return score object or null\r\n     */\r\n    getCurrentWorkgroupScore() {\r\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(this.workgroupId);\r\n    }\r\n\r\n    setSort(value) {\r\n\r\n        switch (value) {\r\n            case 'step':\r\n                if (this.sort === 'step') {\r\n                    this.sort = '-step';\r\n                } else {\r\n                    this.sort = 'step';\r\n                }\r\n                break;\r\n            case 'status':\r\n                if (this.sort === 'status') {\r\n                    this.sort = '-status';\r\n                } else {\r\n                    this.sort = 'status';\r\n                }\r\n                break;\r\n            case 'score':\r\n                if (this.sort === 'score') {\r\n                    this.sort = '-score';\r\n                } else {\r\n                    this.sort = 'score';\r\n                }\r\n                break;\r\n        }\r\n\r\n        // update value in the teacher data service so we can persist across view instances and workgroup changes\r\n        this.TeacherDataService.studentGradingSort = this.sort;\r\n    }\r\n\r\n    getOrderBy() {\r\n        let orderBy = [];\r\n\r\n        switch (this.sort) {\r\n            case 'step':\r\n                orderBy = ['-isVisible', 'order'];\r\n                break;\r\n            case '-step':\r\n                orderBy = ['-isVisible', '-order'];\r\n                break;\r\n            case 'status':\r\n                orderBy = ['-isVisible', 'completionStatus', 'order'];\r\n                break;\r\n            case '-status':\r\n                orderBy = ['-isVisible', '-completionStatus', 'order'];\r\n                break;\r\n            case 'score':\r\n                orderBy = ['-isVisible', '-hasScore', 'scorePct', 'score', '-hasMaxScore', '-maxScore', 'order'];\r\n                break;\r\n            case '-score':\r\n                orderBy = ['-isVisible', '-hasScore', '-scorePct', 'score', '-hasMaxScore', '-maxScore', 'order'];\r\n                break;\r\n        }\r\n\r\n        return orderBy;\r\n    }\r\n\r\n    /**\r\n     * Expand all nodes to show student work\r\n     */\r\n    expandAll() {\r\n\r\n        // loop through all the workgroups\r\n        for (let i = 0; i < this.nodeIds.length; i++) {\r\n\r\n            // get a node id\r\n            let id = this.nodeIds[i];\r\n\r\n            // check if the node is currently in view\r\n            if (this.nodesInViewById[id]) {\r\n                // the node is currently in view so we will expand it\r\n                this.nodeVisibilityById[id] = true;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * set the boolean flag to denote that we are currently expanding\r\n         * all the nodes\r\n         */\r\n        this.isExpandAll = true;\r\n    }\r\n\r\n    /**\r\n     * Collapse all nodes to hide student work\r\n     */\r\n    collapseAll() {\r\n        let n = this.nodeIds.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let id = this.nodeIds[i];\r\n            this.nodeVisibilityById[id] = false;\r\n        }\r\n\r\n        /*\r\n         * set the boolean flag to denote that we are not currently expanding\r\n         * all the nodes\r\n         */\r\n        this.isExpandAll = false;\r\n    }\r\n\r\n    onUpdateExpand(nodeId, value) {\r\n        this.nodeVisibilityById[nodeId] = value;\r\n    }\r\n\r\n    /**\r\n     * A node row has either come into view or gone out of view\r\n     * @param nodeId the node id that has come into view or gone out\r\n     * of view\r\n     * @param inview whether the row is in view or not\r\n     */\r\n    stepInView(nodeId, inview) {\r\n\r\n        // remember whether the node is in view or not\r\n        this.nodesInViewById[nodeId] = inview;\r\n\r\n        // if we're in expand all mode, expand node row if it's in view\r\n        if (this.isExpandAll) {\r\n            if (inview) {\r\n                this.nodeVisibilityById[nodeId] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nStudentGradingController.$inject = [\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$mdMedia',\r\n    '$scope',\r\n    '$state',\r\n    '$stateParams',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NotificationService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService'\r\n];\r\n\r\nexport default StudentGradingController;\r\n"]}