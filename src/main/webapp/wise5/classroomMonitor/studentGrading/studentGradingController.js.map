{"version":3,"sources":["studentGradingController.es6"],"names":[],"mappings":"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","file":"studentGradingController.js","sourcesContent":["'use strict';\n\nclass StudentGradingController {\n\n    constructor($stateParams,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                TeacherDataService) {\n\n        this.$stateParams = $stateParams;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n\n        this.annotationMappings = {};\n\n        this.workgroupId = parseInt(this.$stateParams.workgroupId);\n\n        this.userName = this.ConfigService.getUserNameByWorkgroupId(this.workgroupId);\n\n        this.nodeIds = this.ProjectService.getFlattenedProjectAsNodeIds();\n\n        this.branches = this.ProjectService.getBranches();\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // scroll to the top of the page when the page loads2\n        document.body.scrollTop = document.documentElement.scrollTop = 0;\n    }\n\n    /**\n     * Check if we should show the given node id for the student. We will\n     * determine whether to show a node id or not by checking to see if\n     * the node id is in a branch. If the node id is not in a branch we\n     * will show it. If the node id is in a branch, we need to check which\n     * branch paths the node id is in. If the node id is in a branch path\n     * and the student has work for any node id in the branch path, we will\n     * show the node id passed into this function.\n     * @param nodeId the node id\n     * @return whether to show the node for this student\n     */\n    showNodeIdForStudent(nodeId) {\n        var result = false;\n\n        if (this.ProjectService.isNodeIdInABranch(this.branches, nodeId)) {\n            /*\n             * node is in a branch so we will check if we should show\n             * the node for this student. if the student has work in any\n             * step in the branch path, we will show all the nodes in the\n             * branch.\n             */\n\n            // get the branches this node id is in\n            var branchPaths = this.ProjectService.getBranchPathsByNodeId(this.branches, nodeId);\n\n            // loop through all the branch paths that this node id is in\n            for (var bp = 0; bp < branchPaths.length; bp++) {\n                var branchPathHasWork = false;\n\n                // get a branch path\n                var branchPath = branchPaths[bp];\n\n                // loop through all the node ids in the branch path\n                for (var n = 0; n < branchPath.length; n++) {\n\n                    // get a node id in the branch path\n                    var nodeIdInBranch = branchPath[n];\n\n                    // get the work for this student for the node id\n                    var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(this.workgroupId, nodeIdInBranch);\n\n                    if (componentStates != null && componentStates.length > 0) {\n                        /*\n                         * the student has work for the step so we will say\n                         * the branch path has work and that the node id\n                         * passed into the function should be shown\n                         */\n                        result = true;\n                    }\n                }\n            }\n\n        } else {\n            // node is not in a branch so we will show it\n            result = true;\n        }\n\n        return result;\n    };\n\n    getNodePositionAndTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    };\n\n    getEventsByWorkgroupId(workgroupId) {\n        return this.TeacherDataService.getEventsByWorkgroupId(workgroupId);\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        return this.TeacherDataService.getAnnotationsToWorkgroupId(workgroupId);\n    };\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        return this.TeacherDataService.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    };\n\n    scoreChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-score'];\n        this.AnnotationService.saveAnnotation(annotation);\n    };\n\n    commentChanged(stepWorkId) {\n        var annotation = this.annotationMappings[stepWorkId + '-comment'];\n        this.AnnotationService.saveAnnotation(annotation);\n    }\n\n    getComponentsByNodeId(nodeId) {\n        return this.ProjectService.getComponentsByNodeId(nodeId);\n    }\n\n    /**\n     * Get the student data for a specific student for a specific component\n     * @param workgroupId the workgroupId id of Workgroup who created the component state\n     * @param nodeId the node id\n     * @param componentId the componentId the component id\n     * @return the student data for the given component\n     */\n    getLatestComponentStateByWorkgroupIdAndNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var componentState = null;\n\n        if (workgroupId != null && nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.TeacherDataService.getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId);\n        }\n\n        return componentState;\n    };\n}\n\nStudentGradingController.$inject = [\n    '$stateParams',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService'\n];\n\nexport default StudentGradingController;"]}