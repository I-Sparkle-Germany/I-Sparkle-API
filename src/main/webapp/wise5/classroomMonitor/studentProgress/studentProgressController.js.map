{"version":3,"sources":["studentProgressController.es6"],"names":["StudentProgressController","$rootScope","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","teacherWorkgroupId","getWorkgroupId","sort","studentProgressSort","setCurrentWorkgroup","permissions","getPermissions","studentsOnline","getStudentsOnline","students","initializeStudents","$on","event","args","studentStatus","workgroupId","updateTimeSpentForWorkgroupId","updateTeam","data","indexOfWorkgroupId","indexOf","splice","currentWorkgroup","updateTimeSpentInterval","studentTimeSpent","updateTimeSpent","updateTimeSpentIntervalId","setInterval","$apply","context","nodeId","componentId","componentType","category","saveEvent","getCurrentNodePositionAndNodeTitleForWorkgroupId","getStudentProjectCompletion","workgroup","show","currentPeriod","getCurrentPeriod","periodId","getTotalScoreByWorkgroupId","timeSpent","s","length","currentClientTimestamp","Date","getTime","getStudentStatusForWorkgroupId","postTimestamp","currentServerTimestamp","convertToServerTimestamp","totalSeconds","Math","floor","hours","minutes","seconds","timeSpentText","i","teams","team","id","workgroups","getClassmateUserInfos","x","userName","displayNames","getDisplayUserNamesByWorkgroupId","periodName","push","isOnline","isWorkgroupOnline","location","getCurrentNodeForWorkgroupId","getStudentTimeSpent","completion","score","getStudentTotalScore","maxScore","getMaxScoreForWorkgroupId","scorePct","go","value","orderBy","$inject"],"mappings":"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","file":"studentProgressController.js","sourcesContent":["'use strict';\r\n\r\nclass StudentProgressController {\r\n\r\n    constructor($rootScope,\r\n                $scope,\r\n                $state,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService) {\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n\r\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n        // get the current sort order\r\n        this.sort = this.TeacherDataService.studentProgressSort;\r\n\r\n        // initialize the current workgroup to null\r\n        this.TeacherDataService.setCurrentWorkgroup(null);\r\n\r\n        // get the teacher permissions\r\n        this.permissions = this.ConfigService.getPermissions();\r\n\r\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\r\n        this.students = [];\r\n        this.initializeStudents();\r\n\r\n        // listen for the studentsOnlineReceived event\r\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\r\n            this.studentsOnline = args.studentsOnline;\r\n\r\n            // update the students\r\n            this.initializeStudents();\r\n        });\r\n\r\n        // listen for the studentStatusReceived event\r\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\r\n            // get the workgroup id\r\n            let studentStatus = args.studentStatus;\r\n            let workgroupId = studentStatus.workgroupId;\r\n\r\n            // update the time spent for the workgroup\r\n            this.updateTimeSpentForWorkgroupId(workgroupId);\r\n\r\n            // update team data\r\n            this.updateTeam(workgroupId);\r\n        });\r\n\r\n        // listen for the studentDisconnected event\r\n        this.$rootScope.$on('studentDisconnected', (event, args) => {\r\n            var data = args.data;\r\n            var workgroupId = data.workgroupId;\r\n\r\n            var studentsOnline = this.studentsOnline;\r\n\r\n            var indexOfWorkgroupId = studentsOnline.indexOf(workgroupId);\r\n\r\n            if (indexOfWorkgroupId != -1) {\r\n                // remove the workgroup from the students online list\r\n                studentsOnline.splice(indexOfWorkgroupId, 1);\r\n\r\n                // update team data\r\n                this.updateTeam(workgroupId);\r\n            }\r\n        });\r\n\r\n        // listen for the currentWorkgroupChanged event\r\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\r\n            this.currentWorkgroup = args.currentWorkgroup;\r\n        });\r\n\r\n        // how often to update the time spent values in the view\r\n        this.updateTimeSpentInterval = 10000;\r\n\r\n        // mapping of workgroup id to time spent\r\n        this.studentTimeSpent = {};\r\n\r\n        // update the time spent values in the view\r\n        this.updateTimeSpent();\r\n\r\n        // update the time spent values every x seconds\r\n        this.updateTimeSpentIntervalId = setInterval(() => {\r\n            // update the time spent values in the view\r\n            this.updateTimeSpent();\r\n\r\n            // refresh the view\r\n            this.$scope.$apply();\r\n        }, this.updateTimeSpentInterval);\r\n\r\n        // save event when student progress view is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"studentProgressViewDisplayed\", data = {};\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    getCurrentNodeForWorkgroupId(workgroupId) {\r\n        return this.StudentStatusService.getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId);\r\n    };\r\n\r\n    /**\r\n     * Get project completion data for the given workgroup (only include nodes\r\n     * with student work)\r\n     * @param workgroupId the workgroup id\r\n     * @return object with completed, total, and percent completed (integer\r\n     * between 0 and 100)\r\n     */\r\n    getStudentProjectCompletion(workgroupId) {\r\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId, true);\r\n    };\r\n\r\n    isWorkgroupOnline(workgroupId) {\r\n        return this.studentsOnline.indexOf(workgroupId) != -1;\r\n    };\r\n\r\n    isWorkgroupShown(workgroup) {\r\n        let show = false;\r\n\r\n        let currentPeriod = this.getCurrentPeriod().periodId;\r\n\r\n        if (currentPeriod === -1 || workgroup.periodId === this.getCurrentPeriod().periodId) {\r\n            if (this.currentWorkgroup) {\r\n                if (workgroup.workgroupId === this.currentWorkgroup.workgroupId) {\r\n                    show = true;\r\n                }\r\n            } else {\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    }\r\n\r\n    /**\r\n     * Get the current period\r\n     */\r\n    getCurrentPeriod() {\r\n        return this.TeacherDataService.getCurrentPeriod();\r\n    };\r\n\r\n    getStudentTotalScore(workgroupId) {\r\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    /**\r\n     * Get the time spent for a workgroup\r\n     */\r\n    getStudentTimeSpent(workgroupId) {\r\n        let timeSpent = null;\r\n\r\n        if (this.studentTimeSpent) {\r\n            timeSpent = this.studentTimeSpent[workgroupId];\r\n        }\r\n\r\n        return timeSpent;\r\n    }\r\n\r\n    /**\r\n     * Update the time spent values in the view\r\n     */\r\n    updateTimeSpent() {\r\n        var studentsOnline = this.studentsOnline;\r\n\r\n        if (studentsOnline != null) {\r\n\r\n            // loop through all the workgroups that are online\r\n            for (var s = 0; s < studentsOnline.length; s++) {\r\n                var workgroupId = studentsOnline[s];\r\n\r\n                if (workgroupId != null) {\r\n                    // update the time spent for the workgroup\r\n                    this.updateTimeSpentForWorkgroupId(workgroupId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the time spent for the workgroup\r\n     * @workgroupId the workgroup id\r\n     */\r\n    updateTimeSpentForWorkgroupId(workgroupId) {\r\n\r\n        if (workgroupId != null) {\r\n            // get the current client timestamp\r\n            var currentClientTimestamp = new Date().getTime();\r\n\r\n            // get the student status\r\n            var studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\r\n\r\n            if (studentStatus != null) {\r\n\r\n                // get the time the student status was posted to the server\r\n                var postTimestamp = studentStatus.postTimestamp;\r\n\r\n                /*\r\n                 * convert the current client timestamp to a server timestamp\r\n                 * this is requied in cases where the client and server clocks\r\n                 * are not synchronized\r\n                 */\r\n                var currentServerTimestamp = this.ConfigService.convertToServerTimestamp(currentClientTimestamp);\r\n\r\n                // get the amount of time the student has been on the step\r\n                var timeSpent = currentServerTimestamp - postTimestamp;\r\n\r\n                // get the total amount of seconds the student has been on the step\r\n                var totalSeconds = Math.floor(timeSpent / 1000);\r\n\r\n                // get the hours, minutes, and seconds\r\n                var hours = Math.floor((totalSeconds % 86400) / 3600);\r\n                var minutes = Math.floor(((totalSeconds % 86400) % 3600) / 60);\r\n                var seconds = totalSeconds % 60;\r\n\r\n                if (hours < 0) {\r\n                    hours = 0;\r\n                }\r\n\r\n                if (minutes < 0) {\r\n                    minutes = 0;\r\n                }\r\n\r\n                if (seconds < 0) {\r\n                    seconds = 0;\r\n                }\r\n\r\n                var timeSpentText = '';\r\n\r\n                if (hours > 0) {\r\n                    timeSpentText += (hours + ':');\r\n                }\r\n\r\n                if (hours > 0) {\r\n                    // there are hours\r\n\r\n                    if (minutes == 0) {\r\n                        // fill with zeroes\r\n                        timeSpentText += '00:';\r\n                    } else if (minutes > 0 && minutes < 10) {\r\n                        // add a leading zero\r\n                        timeSpentText += '0' + minutes + ':';\r\n                    } else {\r\n                        timeSpentText += minutes + ':';\r\n                    }\r\n                } else {\r\n                    // there are no hours\r\n\r\n                    timeSpentText += minutes + ':';\r\n                }\r\n\r\n                if (seconds == 0) {\r\n                    // fill with zeroes\r\n                    timeSpentText += '00';\r\n                } else if (seconds > 0 && seconds < 10) {\r\n                    // add a leading zero\r\n                    timeSpentText += ('0' + seconds);\r\n                } else {\r\n                    timeSpentText += seconds;\r\n                }\r\n\r\n                // update the mapping of workgroup id to time spent\r\n                //this.studentTimeSpent[workgroupId] = timeSpentText;\r\n\r\n                // update the timeSpent for the team with the matching workgroupID\r\n                for (let i = 0; i < this.teams.length; i++) {\r\n                    let team = this.teams[i];\r\n                    let id = team.workgroupId;\r\n\r\n                    if (workgroupId === id) {\r\n                        team.timeSpent = timeSpentText;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the array of workgroups in the run\r\n     */\r\n    initializeStudents() {\r\n        this.teams = [];\r\n\r\n        // get the workgroups\r\n        let workgroups = this.ConfigService.getClassmateUserInfos();\r\n\r\n        // loop through all the workgroups\r\n        for (let x = 0; x < workgroups.length; x++) {\r\n            let workgroup = workgroups[x];\r\n\r\n            if (workgroup != null) {\r\n                let workgroupId = workgroup.workgroupId;\r\n                let userName = workgroup.userName;\r\n                let displayNames = this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId);\r\n                let team = {\r\n                    periodId: workgroup.periodId,\r\n                    periodName: workgroup.periodName,\r\n                    workgroupId: workgroupId,\r\n                    userName: displayNames\r\n                };\r\n                this.teams.push(team);\r\n                this.updateTeam(workgroupId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update data for team with the given workgroup id\r\n     * @param workgroupId\r\n     */\r\n    updateTeam(workgroupId) {\r\n        let isOnline = this.isWorkgroupOnline(workgroupId);\r\n        let location = this.getCurrentNodeForWorkgroupId(workgroupId);\r\n        let timeSpent = this.getStudentTimeSpent(workgroupId);\r\n        let completion = this.getStudentProjectCompletion(workgroupId);\r\n        let score = this.getStudentTotalScore(workgroupId);\r\n        let maxScore = this.StudentStatusService.getMaxScoreForWorkgroupId(workgroupId);\r\n        maxScore = maxScore ? maxScore : 0;\r\n\r\n        for (let i = 0; i < this.teams.length; i++) {\r\n            let team = this.teams[i];\r\n\r\n            if (team.workgroupId === workgroupId) {\r\n                team.isOnline = isOnline;\r\n                team.location = location;\r\n                team.timeSpent = timeSpent;\r\n                team.completion = completion;\r\n                team.score = score;\r\n                team.maxScore = maxScore;\r\n                team.scorePct = maxScore ? (score/maxScore) : score;\r\n            }\r\n        }\r\n    }\r\n\r\n    showStudentGradingView(workgroup) {\r\n        this.$state.go('root.team', {workgroupId: workgroup.workgroupId});\r\n    }\r\n\r\n    setSort(value) {\r\n        if (this.sort === value) {\r\n            this.sort = '-' + value;\r\n        } else {\r\n            this.sort = value;\r\n        }\r\n\r\n        // update value in the teacher data service so we can persist across views\r\n        this.TeacherDataService.studentProgressSort = this.sort;\r\n    }\r\n\r\n    getOrderBy() {\r\n        let orderBy = [];\r\n\r\n        switch (this.sort) {\r\n            case 'team':\r\n                orderBy = ['workgroupId', 'userName'];\r\n                break;\r\n            case '-team':\r\n                orderBy = ['-workgroupId', 'userName'];\r\n                break;\r\n            case 'student':\r\n                orderBy = ['userName', 'workgroupId'];\r\n                break;\r\n            case '-student':\r\n                orderBy = ['-userName', 'workgroupId'];\r\n                break;\r\n            case 'score':\r\n                orderBy = ['scorePct', 'userName'];\r\n                break;\r\n            case '-score':\r\n                orderBy = ['-scorePct', 'userName'];\r\n                break;\r\n            case 'completion':\r\n                orderBy = ['completion.completionPct', 'userName'];\r\n                break;\r\n            case '-completion':\r\n                orderBy = ['-completion.completionPct', 'userName'];\r\n                break;\r\n            case 'location':\r\n                orderBy = ['location', 'userName'];\r\n                break;\r\n            case '-location':\r\n                orderBy = ['-location', 'userName'];\r\n                break;\r\n            case 'time':\r\n                orderBy = ['-online', '-timeSpent', 'userName'];\r\n                break;\r\n            case '-time':\r\n                orderBy = ['-online', 'timeSpent', 'userName'];\r\n                break;\r\n            case 'online':\r\n                orderBy = ['online', 'userName'];\r\n                break;\r\n            case '-online':\r\n                orderBy = ['-online', 'userName'];\r\n                break;\r\n        }\r\n\r\n        return orderBy;\r\n    }\r\n}\r\n\r\nStudentProgressController.$inject = [\r\n    '$rootScope',\r\n    '$scope',\r\n    '$state',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService'\r\n];\r\n\r\nexport default StudentProgressController;\r\n"]}