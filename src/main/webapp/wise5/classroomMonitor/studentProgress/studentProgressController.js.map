{"version":3,"sources":["studentProgressController.es6"],"names":["StudentProgressController","$rootScope","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","teacherWorkgroupId","getWorkgroupId","sort","studentProgressSort","setCurrentWorkgroup","canViewStudentNames","canGradeStudentWork","role","getTeacherRole","studentsOnline","getStudentsOnline","students","initializeStudents","studentStatuses","getStudentStatuses","maxScore","getMaxScore","periods","allPeriodOption","periodId","periodName","push","concat","getPeriods","getCurrentPeriod","length","setCurrentPeriod","$on","event","args","$apply","studentStatus","workgroupId","updateTimeSpentForWorkgroupId","data","indexOfWorkgroupId","indexOf","splice","currentWorkgroup","updateTimeSpentInterval","studentTimeSpent","updateTimeSpent","updateTimeSpentIntervalId","setInterval","context","nodeId","componentId","componentType","category","saveEvent","getCurrentNodePositionAndNodeTitleForWorkgroupId","getStudentProjectCompletion","workgroup","show","currentPeriod","displayNames","period","$broadcast","getTotalScoreByWorkgroupId","timeSpent","s","currentClientTimestamp","Date","getTime","getStudentStatusForWorkgroupId","postTimestamp","currentServerTimestamp","convertToServerTimestamp","totalSeconds","Math","floor","hours","minutes","seconds","timeSpentText","i","student","id","workgroups","getClassmateUserInfos","x","isOnline","isWorkgroupOnline","userName","getDisplayUserNamesByWorkgroupId","split","userIds","displayName","names","user","userId","online","location","getCurrentNodeForWorkgroupId","getStudentTimeSpent","completion","score","getStudentTotalScore","go","value","nodeGradingSort","orderBy","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,yB;AAEF,uCAAYC,UAAZ,EACYC,MADZ,EAEYC,MAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,oBALZ,EAMYC,kBANZ,EAOYC,uBAPZ,EAOqC;AAAA;;AAAA;;AACjC,aAAKP,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,oBAAL,GAA4BA,oBAA5B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,uBAAL,GAA+BA,uBAA/B;;AAEA,aAAKC,kBAAL,GAA0B,KAAKL,aAAL,CAAmBM,cAAnB,EAA1B;;AAEA;AACA,aAAKC,IAAL,GAAY,KAAKJ,kBAAL,CAAwBK,mBAApC;;AAEA;AACA,aAAKL,kBAAL,CAAwBM,mBAAxB,CAA4C,IAA5C;;AAEA,aAAKC,mBAAL,GAA2B,IAA3B;AACA,aAAKC,mBAAL,GAA2B,IAA3B;;AAEA;AACA,YAAIC,OAAO,KAAKZ,aAAL,CAAmBa,cAAnB,CAAkC,KAAKR,kBAAvC,CAAX;;AAEA,YAAIO,SAAS,OAAb,EAAsB;AAClB;AACA,iBAAKF,mBAAL,GAA2B,IAA3B;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACH,SAJD,MAIO,IAAIC,SAAS,OAAb,EAAsB;AACzB;AACA,iBAAKF,mBAAL,GAA2B,IAA3B;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACH,SAJM,MAIA,IAAIC,SAAS,MAAb,EAAqB;AACxB;AACA,iBAAKF,mBAAL,GAA2B,KAA3B;AACA,iBAAKC,mBAAL,GAA2B,KAA3B;AACH;;AAED,aAAKG,cAAL,GAAsB,KAAKV,uBAAL,CAA6BW,iBAA7B,EAAtB;;AAEA,aAAKC,QAAL,GAAgB,EAAhB;AACA,aAAKC,kBAAL;;AAEA,aAAKC,eAAL,GAAuB,KAAKhB,oBAAL,CAA0BiB,kBAA1B,EAAvB;;AAEA,aAAKC,QAAL,GAAgB,KAAKnB,cAAL,CAAoBoB,WAApB,EAAhB;AACA,YAAI,KAAKD,QAAL,KAAkB,IAAtB,EAA4B;AACxB,iBAAKA,QAAL,GAAgB,CAAhB;AACH;;AAED,aAAKE,OAAL,GAAe,EAAf;;AAEA;AACA,YAAIC,kBAAkB;AAClBC,sBAAU,CAAC,CADO;AAElBC,wBAAY;AAFM,SAAtB;;AAKA,aAAKH,OAAL,CAAaI,IAAb,CAAkBH,eAAlB;;AAEA,aAAKD,OAAL,GAAe,KAAKA,OAAL,CAAaK,MAAb,CAAoB,KAAK3B,aAAL,CAAmB4B,UAAnB,EAApB,CAAf;;AAEA;AACA,YAAI,KAAKC,gBAAL,MAA2B,IAA/B,EAAqC;AACjC,gBAAI,KAAKP,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAaQ,MAAb,GAAsB,CAAlD,EAAqD;AACjD;AACA,qBAAKC,gBAAL,CAAsB,KAAKT,OAAL,CAAa,CAAb,CAAtB;AACH;AACJ;;AAED;AACA,aAAKzB,UAAL,CAAgBmC,GAAhB,CAAoB,wBAApB,EAA8C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC3D,kBAAKpB,cAAL,GAAsBoB,KAAKpB,cAA3B;;AAEA;AACA,kBAAKG,kBAAL;;AAEA;AACA,kBAAKnB,MAAL,CAAYqC,MAAZ;AACH,SARD;;AAUA;AACA,aAAKtC,UAAL,CAAgBmC,GAAhB,CAAoB,uBAApB,EAA6C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC1D;AACA,gBAAIE,gBAAgBF,KAAKE,aAAzB;AACA,gBAAIC,cAAcD,cAAcC,WAAhC;;AAEA;AACA,kBAAKC,6BAAL,CAAmCD,WAAnC;;AAEA;AACA,kBAAKpB,kBAAL;;AAEA;AACA,kBAAKnB,MAAL,CAAYqC,MAAZ;AACH,SAbD;;AAeA;AACA,aAAKtC,UAAL,CAAgBmC,GAAhB,CAAoB,qBAApB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxD,gBAAIK,OAAOL,KAAKK,IAAhB;AACA,gBAAIF,cAAcE,KAAKF,WAAvB;;AAEA,gBAAIvB,iBAAiB,MAAKA,cAA1B;;AAEA,gBAAI0B,qBAAqB1B,eAAe2B,OAAf,CAAuBJ,WAAvB,CAAzB;;AAEA,gBAAIG,sBAAsB,CAAC,CAA3B,EAA8B;AAC1B;AACA1B,+BAAe4B,MAAf,CAAsBF,kBAAtB,EAA0C,CAA1C;;AAEA;AACA,sBAAKvB,kBAAL;;AAEA;AACA,sBAAKnB,MAAL,CAAYqC,MAAZ;AACH;AACJ,SAlBD;;AAoBA;AACA,aAAKrC,MAAL,CAAYkC,GAAZ,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxD,kBAAKS,gBAAL,GAAwBT,KAAKS,gBAA7B;AACH,SAFD;;AAIA;AACA,aAAKC,uBAAL,GAA+B,KAA/B;;AAEA;AACA,aAAKC,gBAAL,GAAwB,EAAxB;;AAEA;AACA,aAAKC,eAAL;;AAEA;AACA,aAAKC,yBAAL,GAAiCC,YAAY,YAAM;AAC/C;AACA,kBAAKF,eAAL;;AAEA;AACA,kBAAKhD,MAAL,CAAYqC,MAAZ;AACH,SANgC,EAM9B,KAAKS,uBANyB,CAAjC;;AAQA;AACA,YAAIK,UAAU,kBAAd;AAAA,YAAkCC,SAAS,IAA3C;AAAA,YAAiDC,cAAc,IAA/D;AAAA,YAAqEC,gBAAgB,IAArF;AAAA,YACIC,WAAW,YADf;AAAA,YAC6BpB,QAAQ,8BADrC;AAAA,YACqEM,OAAO,EAD5E;AAEA,aAAKpC,kBAAL,CAAwBmD,SAAxB,CAAkCL,OAAlC,EAA2CC,MAA3C,EAAmDC,WAAnD,EAAgEC,aAAhE,EAA+EC,QAA/E,EAAyFpB,KAAzF,EAAgGM,IAAhG;AACH;;;;qDAE4BF,W,EAAa;AACtC,mBAAO,KAAKnC,oBAAL,CAA0BqD,gDAA1B,CAA2ElB,WAA3E,CAAP;AACH;;;oDAE2BA,W,EAAa;AACrC,mBAAO,KAAKnC,oBAAL,CAA0BsD,2BAA1B,CAAsDnB,WAAtD,CAAP;AACH;;;0CAEiBA,W,EAAa;AAC3B,mBAAO,KAAKvB,cAAL,CAAoB2B,OAApB,CAA4BJ,WAA5B,KAA4C,CAAC,CAApD;AACH;;;yCAEgBoB,S,EAAW;AACxB,gBAAIC,OAAO,KAAX;;AAEA,gBAAIC,gBAAgB,KAAK9B,gBAAL,GAAwBL,QAA5C;;AAEA,gBAAImC,kBAAkB,CAAC,CAAnB,IAAwBF,UAAUjC,QAAV,KAAuB,KAAKK,gBAAL,GAAwBL,QAA3E,EAAqF;AACjF,oBAAI,KAAKmB,gBAAT,EAA2B;AACvB,wBAAIc,UAAUG,YAAV,KAA2B,KAAKjB,gBAAL,CAAsBiB,YAArD,EAAmE;AAC/DF,+BAAO,IAAP;AACH;AACJ,iBAJD,MAIO;AACHA,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAOA,IAAP;AACH;;AAED;;;;;;;yCAIiBG,M,EAAQ;AACrB,iBAAK1D,kBAAL,CAAwB4B,gBAAxB,CAAyC8B,MAAzC;AACA,iBAAKhE,UAAL,CAAgBiE,UAAhB,CAA2B,eAA3B,EAA4C,EAACD,QAAQA,MAAT,EAA5C;AACH;;;;;AAED;;;2CAGmB;AACf,mBAAO,KAAK1D,kBAAL,CAAwB0B,gBAAxB,EAAP;AACH;;;6CAEoBQ,W,EAAa;AAC9B,mBAAO,KAAKlC,kBAAL,CAAwB4D,0BAAxB,CAAmD1B,WAAnD,CAAP;AACH;;AAED;;;;;;4CAGoBA,W,EAAa;AAC7B,gBAAI2B,YAAY,IAAhB;;AAEA,gBAAI,KAAKnB,gBAAT,EAA2B;AACvBmB,4BAAY,KAAKnB,gBAAL,CAAsBR,WAAtB,CAAZ;AACH;;AAED,mBAAO2B,SAAP;AACH;;AAED;;;;;;0CAGkB;AACd,gBAAIlD,iBAAiB,KAAKA,cAA1B;;AAEA,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,qBAAK,IAAImD,IAAI,CAAb,EAAgBA,IAAInD,eAAegB,MAAnC,EAA2CmC,GAA3C,EAAgD;AAC5C,wBAAI5B,cAAcvB,eAAemD,CAAf,CAAlB;;AAEA,wBAAI5B,eAAe,IAAnB,EAAyB;AACrB;AACA,6BAAKC,6BAAL,CAAmCD,WAAnC;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;sDAI8BA,W,EAAa;;AAEvC,gBAAIA,eAAe,IAAnB,EAAyB;AACrB;AACA,oBAAI6B,yBAAyB,IAAIC,IAAJ,GAAWC,OAAX,EAA7B;;AAEA;AACA,oBAAIhC,gBAAgB,KAAKlC,oBAAL,CAA0BmE,8BAA1B,CAAyDhC,WAAzD,CAApB;;AAEA,oBAAID,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,wBAAIkC,gBAAgBlC,cAAckC,aAAlC;;AAEA;;;;;AAKA,wBAAIC,yBAAyB,KAAKvE,aAAL,CAAmBwE,wBAAnB,CAA4CN,sBAA5C,CAA7B;;AAEA;AACA,wBAAIF,YAAYO,yBAAyBD,aAAzC;;AAEA;AACA,wBAAIG,eAAeC,KAAKC,KAAL,CAAWX,YAAY,IAAvB,CAAnB;;AAEA;AACA,wBAAIY,QAAQF,KAAKC,KAAL,CAAYF,eAAe,KAAhB,GAAyB,IAApC,CAAZ;AACA,wBAAII,UAAUH,KAAKC,KAAL,CAAaF,eAAe,KAAhB,GAAyB,IAA1B,GAAkC,EAA7C,CAAd;AACA,wBAAIK,UAAUL,eAAe,EAA7B;;AAEA,wBAAIG,QAAQ,CAAZ,EAAe;AACXA,gCAAQ,CAAR;AACH;;AAED,wBAAIC,UAAU,CAAd,EAAiB;AACbA,kCAAU,CAAV;AACH;;AAED,wBAAIC,UAAU,CAAd,EAAiB;AACbA,kCAAU,CAAV;AACH;;AAED,wBAAIC,gBAAgB,EAApB;;AAEA,wBAAIH,QAAQ,CAAZ,EAAe;AACXG,yCAAkBH,QAAQ,GAA1B;AACH;;AAED,wBAAIA,QAAQ,CAAZ,EAAe;AACX;;AAEA,4BAAIC,WAAW,CAAf,EAAkB;AACd;AACAE,6CAAiB,KAAjB;AACH,yBAHD,MAGO,IAAIF,UAAU,CAAV,IAAeA,UAAU,EAA7B,EAAiC;AACpC;AACAE,6CAAiB,MAAMF,OAAN,GAAgB,GAAjC;AACH,yBAHM,MAGA;AACHE,6CAAiBF,UAAU,GAA3B;AACH;AACJ,qBAZD,MAYO;AACH;;AAEAE,yCAAiBF,UAAU,GAA3B;AACH;;AAED,wBAAIC,WAAW,CAAf,EAAkB;AACd;AACAC,yCAAiB,IAAjB;AACH,qBAHD,MAGO,IAAID,UAAU,CAAV,IAAeA,UAAU,EAA7B,EAAiC;AACpC;AACAC,yCAAkB,MAAMD,OAAxB;AACH,qBAHM,MAGA;AACHC,yCAAiBD,OAAjB;AACH;;AAED;AACA;;AAEA;AACA,yBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKhE,QAAL,CAAcc,MAAlC,EAA0CkD,GAA1C,EAA+C;AAC3C,4BAAIC,UAAU,KAAKjE,QAAL,CAAcgE,CAAd,CAAd;AACA,4BAAIE,KAAKD,QAAQ5C,WAAjB;;AAEA,4BAAIA,gBAAgB6C,EAApB,EAAwB;AACpBD,oCAAQjB,SAAR,GAAoBe,aAApB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;;;6CAIqB;AACjB,gBAAI/D,WAAW,EAAf;;AAEA;AACA,gBAAImE,aAAa,KAAKnF,aAAL,CAAmBoF,qBAAnB,EAAjB;;AAEA;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,WAAWrD,MAA/B,EAAuCuD,GAAvC,EAA4C;AACxC,oBAAI5B,YAAY0B,WAAWE,CAAX,CAAhB;;AAEA,oBAAI5B,aAAa,IAAjB,EAAuB;AACnB,wBAAIpB,cAAcoB,UAAUpB,WAA5B;AACA,wBAAIiD,WAAW,KAAKC,iBAAL,CAAuBlD,WAAvB,CAAf;;AAEA,wBAAImD,WAAW/B,UAAU+B,QAAzB;AACA,wBAAI5B,eAAe,KAAK5D,aAAL,CAAmByF,gCAAnB,CAAoDpD,WAApD,EAAiEqD,KAAjE,CAAuE,IAAvE,CAAnB;AACA,wBAAIC,UAAUlC,UAAUkC,OAAxB;;AAEA,yBAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIW,QAAQ7D,MAA5B,EAAoCkD,GAApC,EAAyC;AACrC,4BAAIE,KAAKS,QAAQX,CAAR,CAAT;AACA,4BAAIY,cAAc,EAAlB;;AAEA,4BAAI,KAAKlF,mBAAT,EAA8B;AAC1B;AACA,gCAAImF,QAAQjC,aAAaoB,CAAb,EAAgBU,KAAhB,CAAsB,GAAtB,CAAZ;AACAE,0CAAcC,MAAM,CAAN,IAAW,IAAX,GAAkBA,MAAM,CAAN,CAAhC;AACH,yBAJD,MAIO;AACHD,0CAAc,aAAaV,EAA3B;AACH;;AAED,4BAAIY,OAAO;AACPC,oCAAQb,EADD;AAEP1D,sCAAUiC,UAAUjC,QAFb;AAGPC,wCAAYgC,UAAUhC,UAHf;AAIPY,yCAAaoB,UAAUpB,WAJhB;AAKPuB,0CAAcgC,WALP;AAMPJ,sCAAUI,WANH;AAOPI,oCAAQV,QAPD;AAQPW,sCAAU,KAAKC,4BAAL,CAAkCzC,UAAUpB,WAA5C,CARH;AASP2B,uCAAW,KAAKmC,mBAAL,CAAyB1C,UAAUpB,WAAnC,CATJ;AAUP+D,wCAAY,KAAK5C,2BAAL,CAAiCC,UAAUpB,WAA3C,CAVL;AAWPgE,mCAAO,KAAKC,oBAAL,CAA0B7C,UAAUpB,WAApC;AAXA,yBAAX;AAaArB,iCAASU,IAAT,CAAcoE,IAAd;AACH;AAEJ;AACJ;;AAED,iBAAK9E,QAAL,GAAgBA,QAAhB;AACH;;;iDAEwByC,S,EAAW;AAChC,iBAAKtD,kBAAL,CAAwBM,mBAAxB,CAA4CgD,SAA5C;AACA,iBAAK1D,MAAL,CAAYwG,EAAZ,CAAe,mBAAf;AACH;;;gCAEOC,K,EAAO;AACX,gBAAI,KAAKjG,IAAL,KAAciG,KAAlB,EAAyB;AACrB,qBAAKjG,IAAL,GAAY,MAAMiG,KAAlB;AACH,aAFD,MAEO;AACH,qBAAKjG,IAAL,GAAYiG,KAAZ;AACH;;AAED;AACA,iBAAKrG,kBAAL,CAAwBsG,eAAxB,GAA0C,KAAKlG,IAA/C;AACH;;;qCAEY;AACT,gBAAImG,UAAU,EAAd;;AAEA,oBAAQ,KAAKnG,IAAb;AACI,qBAAK,MAAL;AACImG,8BAAU,CAAC,aAAD,EAAgB,UAAhB,CAAV;AACA;AACJ,qBAAK,OAAL;AACIA,8BAAU,CAAC,cAAD,EAAiB,UAAjB,CAAV;AACA;AACJ,qBAAK,SAAL;AACIA,8BAAU,CAAC,UAAD,EAAa,aAAb,CAAV;AACA;AACJ,qBAAK,UAAL;AACIA,8BAAU,CAAC,WAAD,EAAc,aAAd,CAAV;AACA;AACJ,qBAAK,OAAL;AACIA,8BAAU,CAAC,OAAD,EAAU,UAAV,CAAV;AACA;AACJ,qBAAK,QAAL;AACIA,8BAAU,CAAC,QAAD,EAAW,UAAX,CAAV;AACA;AACJ,qBAAK,YAAL;AACIA,8BAAU,CAAC,YAAD,EAAe,UAAf,CAAV;AACA;AACJ,qBAAK,aAAL;AACIA,8BAAU,CAAC,aAAD,EAAgB,UAAhB,CAAV;AACA;AACJ,qBAAK,UAAL;AACIA,8BAAU,CAAC,UAAD,EAAa,UAAb,CAAV;AACA;AACJ,qBAAK,WAAL;AACIA,8BAAU,CAAC,WAAD,EAAc,UAAd,CAAV;AACA;AACJ,qBAAK,MAAL;AACIA,8BAAU,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAAV;AACA;AACJ,qBAAK,OAAL;AACIA,8BAAU,CAAC,SAAD,EAAY,WAAZ,EAAyB,UAAzB,CAAV;AACA;AACJ,qBAAK,QAAL;AACIA,8BAAU,CAAC,QAAD,EAAW,UAAX,CAAV;AACA;AACJ,qBAAK,SAAL;AACIA,8BAAU,CAAC,SAAD,EAAY,UAAZ,CAAV;AACA;AA1CR;;AA6CA,mBAAOA,OAAP;AACH;;;;;;AAGL9G,0BAA0B+G,OAA1B,GAAoC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,QAHgC,EAIhC,eAJgC,EAKhC,gBALgC,EAMhC,sBANgC,EAOhC,oBAPgC,EAQhC,yBARgC,CAApC;;kBAWe/G,yB","file":"studentProgressController.js","sourcesContent":["'use strict';\r\n\r\nclass StudentProgressController {\r\n\r\n    constructor($rootScope,\r\n                $scope,\r\n                $state,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentStatusService,\r\n                TeacherDataService,\r\n                TeacherWebSocketService) {\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$state = $state;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentStatusService = StudentStatusService;\r\n        this.TeacherDataService = TeacherDataService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n\r\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n        // get the current sort order\r\n        this.sort = this.TeacherDataService.studentProgressSort;\r\n\r\n        // initialize the current workgroup\r\n        this.TeacherDataService.setCurrentWorkgroup(null);\r\n\r\n        this.canViewStudentNames = true;\r\n        this.canGradeStudentWork = true;\r\n\r\n        // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\r\n        var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\r\n\r\n        if (role === 'owner') {\r\n            // the teacher is the owner of the run and has full access\r\n            this.canViewStudentNames = true;\r\n            this.canGradeStudentWork = true;\r\n        } else if (role === 'write') {\r\n            // the teacher is a shared teacher that can grade the student work\r\n            this.canViewStudentNames = true;\r\n            this.canGradeStudentWork = true;\r\n        } else if (role === 'read') {\r\n            // the teacher is a shared teacher that can only view the student work\r\n            this.canViewStudentNames = false;\r\n            this.canGradeStudentWork = false;\r\n        }\r\n\r\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\r\n\r\n        this.students = [];\r\n        this.initializeStudents();\r\n\r\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\r\n\r\n        this.maxScore = this.ProjectService.getMaxScore();\r\n        if (this.maxScore === null) {\r\n            this.maxScore = 0;\r\n        }\r\n\r\n        this.periods = [];\r\n\r\n        // create an option for all periods\r\n        var allPeriodOption = {\r\n            periodId: -1,\r\n            periodName: 'All'\r\n        };\r\n\r\n        this.periods.push(allPeriodOption);\r\n\r\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\r\n\r\n        // set the current period if it hasn't been set yet\r\n        if (this.getCurrentPeriod() == null) {\r\n            if (this.periods != null && this.periods.length > 0) {\r\n                // set it to the all periods option\r\n                this.setCurrentPeriod(this.periods[0]);\r\n            }\r\n        }\r\n\r\n        // listen for the studentsOnlineReceived event\r\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\r\n            this.studentsOnline = args.studentsOnline;\r\n\r\n            // update the students\r\n            this.initializeStudents();\r\n\r\n            // refresh the view\r\n            this.$scope.$apply();\r\n        });\r\n\r\n        // listen for the studentStatusReceived event\r\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\r\n            // get the workgroup id\r\n            let studentStatus = args.studentStatus;\r\n            let workgroupId = studentStatus.workgroupId;\r\n\r\n            // update the time spent for the workgroup\r\n            this.updateTimeSpentForWorkgroupId(workgroupId);\r\n\r\n            // update the students\r\n            this.initializeStudents();\r\n\r\n            // refresh the view\r\n            this.$scope.$apply();\r\n        });\r\n\r\n        // listen for the studentDisconnected event\r\n        this.$rootScope.$on('studentDisconnected', (event, args) => {\r\n            var data = args.data;\r\n            var workgroupId = data.workgroupId;\r\n\r\n            var studentsOnline = this.studentsOnline;\r\n\r\n            var indexOfWorkgroupId = studentsOnline.indexOf(workgroupId);\r\n\r\n            if (indexOfWorkgroupId != -1) {\r\n                // remove the workgroup from the students online list\r\n                studentsOnline.splice(indexOfWorkgroupId, 1);\r\n\r\n                // update the students\r\n                this.initializeStudents();\r\n\r\n                // refresh the view\r\n                this.$scope.$apply();\r\n            }\r\n        });\r\n\r\n        // listen for the currentWorkgroupChanged event\r\n        this.$scope.$on('currentWorkgroupChanged', (event, args) => {\r\n            this.currentWorkgroup = args.currentWorkgroup;\r\n        });\r\n\r\n        // how often to update the time spent values in the view\r\n        this.updateTimeSpentInterval = 10000;\r\n\r\n        // mapping of workgroup id to time spent\r\n        this.studentTimeSpent = {};\r\n\r\n        // update the time spent values in the view\r\n        this.updateTimeSpent();\r\n\r\n        // update the time spent values every x seconds\r\n        this.updateTimeSpentIntervalId = setInterval(() => {\r\n            // update the time spent values in the view\r\n            this.updateTimeSpent();\r\n\r\n            // refresh the view\r\n            this.$scope.$apply();\r\n        }, this.updateTimeSpentInterval);\r\n\r\n        // save event when student progress view is displayed\r\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n            category = \"Navigation\", event = \"studentProgressViewDisplayed\", data = {};\r\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    getCurrentNodeForWorkgroupId(workgroupId) {\r\n        return this.StudentStatusService.getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId);\r\n    };\r\n\r\n    getStudentProjectCompletion(workgroupId) {\r\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\r\n    };\r\n\r\n    isWorkgroupOnline(workgroupId) {\r\n        return this.studentsOnline.indexOf(workgroupId) != -1;\r\n    };\r\n\r\n    isWorkgroupShown(workgroup) {\r\n        let show = false;\r\n\r\n        let currentPeriod = this.getCurrentPeriod().periodId;\r\n\r\n        if (currentPeriod === -1 || workgroup.periodId === this.getCurrentPeriod().periodId) {\r\n            if (this.currentWorkgroup) {\r\n                if (workgroup.displayNames === this.currentWorkgroup.displayNames) {\r\n                    show = true;\r\n                }\r\n            } else {\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    }\r\n\r\n    /**\r\n     * Set the current period\r\n     * @param period the period object\r\n     */\r\n    setCurrentPeriod(period) {\r\n        this.TeacherDataService.setCurrentPeriod(period);\r\n        this.$rootScope.$broadcast('periodChanged', {period: period});\r\n    };\r\n\r\n    /**\r\n     * Get the current period\r\n     */\r\n    getCurrentPeriod() {\r\n        return this.TeacherDataService.getCurrentPeriod();\r\n    };\r\n\r\n    getStudentTotalScore(workgroupId) {\r\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\r\n    }\r\n\r\n    /**\r\n     * Get the time spent for a workgroup\r\n     */\r\n    getStudentTimeSpent(workgroupId) {\r\n        let timeSpent = null;\r\n\r\n        if (this.studentTimeSpent) {\r\n            timeSpent = this.studentTimeSpent[workgroupId];\r\n        }\r\n\r\n        return timeSpent;\r\n    }\r\n\r\n    /**\r\n     * Update the time spent values in the view\r\n     */\r\n    updateTimeSpent() {\r\n        var studentsOnline = this.studentsOnline;\r\n\r\n        if (studentsOnline != null) {\r\n\r\n            // loop through all the workgroups that are online\r\n            for (var s = 0; s < studentsOnline.length; s++) {\r\n                var workgroupId = studentsOnline[s];\r\n\r\n                if (workgroupId != null) {\r\n                    // update the time spent for the workgroup\r\n                    this.updateTimeSpentForWorkgroupId(workgroupId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the time spent for the workgroup\r\n     * @workgroupId the workgroup id\r\n     */\r\n    updateTimeSpentForWorkgroupId(workgroupId) {\r\n\r\n        if (workgroupId != null) {\r\n            // get the current client timestamp\r\n            var currentClientTimestamp = new Date().getTime();\r\n\r\n            // get the student status\r\n            var studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\r\n\r\n            if (studentStatus != null) {\r\n\r\n                // get the time the student status was posted to the server\r\n                var postTimestamp = studentStatus.postTimestamp;\r\n\r\n                /*\r\n                 * convert the current client timestamp to a server timestamp\r\n                 * this is requied in cases where the client and server clocks\r\n                 * are not synchronized\r\n                 */\r\n                var currentServerTimestamp = this.ConfigService.convertToServerTimestamp(currentClientTimestamp);\r\n\r\n                // get the amount of time the student has been on the step\r\n                var timeSpent = currentServerTimestamp - postTimestamp;\r\n\r\n                // get the total amount of seconds the student has been on the step\r\n                var totalSeconds = Math.floor(timeSpent / 1000);\r\n\r\n                // get the hours, minutes, and seconds\r\n                var hours = Math.floor((totalSeconds % 86400) / 3600);\r\n                var minutes = Math.floor(((totalSeconds % 86400) % 3600) / 60);\r\n                var seconds = totalSeconds % 60;\r\n\r\n                if (hours < 0) {\r\n                    hours = 0;\r\n                }\r\n\r\n                if (minutes < 0) {\r\n                    minutes = 0;\r\n                }\r\n\r\n                if (seconds < 0) {\r\n                    seconds = 0;\r\n                }\r\n\r\n                var timeSpentText = '';\r\n\r\n                if (hours > 0) {\r\n                    timeSpentText += (hours + ':');\r\n                }\r\n\r\n                if (hours > 0) {\r\n                    // there are hours\r\n\r\n                    if (minutes == 0) {\r\n                        // fill with zeroes\r\n                        timeSpentText += '00:';\r\n                    } else if (minutes > 0 && minutes < 10) {\r\n                        // add a leading zero\r\n                        timeSpentText += '0' + minutes + ':';\r\n                    } else {\r\n                        timeSpentText += minutes + ':';\r\n                    }\r\n                } else {\r\n                    // there are no hours\r\n\r\n                    timeSpentText += minutes + ':';\r\n                }\r\n\r\n                if (seconds == 0) {\r\n                    // fill with zeroes\r\n                    timeSpentText += '00';\r\n                } else if (seconds > 0 && seconds < 10) {\r\n                    // add a leading zero\r\n                    timeSpentText += ('0' + seconds);\r\n                } else {\r\n                    timeSpentText += seconds;\r\n                }\r\n\r\n                // update the mapping of workgroup id to time spent\r\n                //this.studentTimeSpent[workgroupId] = timeSpentText;\r\n\r\n                // update the timeSpent for the students with the matching workgroupID\r\n                for (let i = 0; i < this.students.length; i++) {\r\n                    let student = this.students[i];\r\n                    let id = student.workgroupId;\r\n\r\n                    if (workgroupId === id) {\r\n                        student.timeSpent = timeSpentText;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the array of students in the run. Split workgroups into\r\n     * individual student objects.\r\n     */\r\n    initializeStudents() {\r\n        let students = [];\r\n\r\n        // get the workgroups\r\n        let workgroups = this.ConfigService.getClassmateUserInfos();\r\n\r\n        // loop through all the workgroups\r\n        for (let x = 0; x < workgroups.length; x++) {\r\n            let workgroup = workgroups[x];\r\n\r\n            if (workgroup != null) {\r\n                let workgroupId = workgroup.workgroupId;\r\n                let isOnline = this.isWorkgroupOnline(workgroupId);\r\n\r\n                let userName = workgroup.userName;\r\n                let displayNames = this.ConfigService.getDisplayUserNamesByWorkgroupId(workgroupId).split(', ');\r\n                let userIds = workgroup.userIds;\r\n\r\n                for (let i = 0; i < userIds.length; i++) {\r\n                    let id = userIds[i];\r\n                    let displayName = '';\r\n\r\n                    if (this.canViewStudentNames) {\r\n                        // put user display name in 'lastName, firstName' order\r\n                        let names = displayNames[i].split(' ');\r\n                        displayName = names[1] + ', ' + names[0];\r\n                    } else {\r\n                        displayName = 'Student ' + id;\r\n                    }\r\n\r\n                    let user = {\r\n                        userId: id,\r\n                        periodId: workgroup.periodId,\r\n                        periodName: workgroup.periodName,\r\n                        workgroupId: workgroup.workgroupId,\r\n                        displayNames: displayName,\r\n                        userName: displayName,\r\n                        online: isOnline,\r\n                        location: this.getCurrentNodeForWorkgroupId(workgroup.workgroupId),\r\n                        timeSpent: this.getStudentTimeSpent(workgroup.workgroupId),\r\n                        completion: this.getStudentProjectCompletion(workgroup.workgroupId),\r\n                        score: this.getStudentTotalScore(workgroup.workgroupId)\r\n                    };\r\n                    students.push(user);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.students = students;\r\n    }\r\n\r\n    showWorkgroupProjectView(workgroup) {\r\n        this.TeacherDataService.setCurrentWorkgroup(workgroup);\r\n        this.$state.go('root.nodeProgress');\r\n    }\r\n\r\n    setSort(value) {\r\n        if (this.sort === value) {\r\n            this.sort = '-' + value;\r\n        } else {\r\n            this.sort = value;\r\n        }\r\n\r\n        // update value in the teacher data service so we can persist across views\r\n        this.TeacherDataService.nodeGradingSort = this.sort;\r\n    }\r\n\r\n    getOrderBy() {\r\n        let orderBy = [];\r\n\r\n        switch (this.sort) {\r\n            case 'team':\r\n                orderBy = ['workgroupId', 'userName'];\r\n                break;\r\n            case '-team':\r\n                orderBy = ['-workgroupId', 'userName'];\r\n                break;\r\n            case 'student':\r\n                orderBy = ['userName', 'workgroupId'];\r\n                break;\r\n            case '-student':\r\n                orderBy = ['-userName', 'workgroupId'];\r\n                break;\r\n            case 'score':\r\n                orderBy = ['score', 'userName'];\r\n                break;\r\n            case '-score':\r\n                orderBy = ['-score', 'userName'];\r\n                break;\r\n            case 'completion':\r\n                orderBy = ['completion', 'userName'];\r\n                break;\r\n            case '-completion':\r\n                orderBy = ['-completion', 'userName'];\r\n                break;\r\n            case 'location':\r\n                orderBy = ['location', 'userName'];\r\n                break;\r\n            case '-location':\r\n                orderBy = ['-location', 'userName'];\r\n                break;\r\n            case 'time':\r\n                orderBy = ['-online', '-timeSpent', 'userName'];\r\n                break;\r\n            case '-time':\r\n                orderBy = ['-online', 'timeSpent', 'userName'];\r\n                break;\r\n            case 'online':\r\n                orderBy = ['online', 'userName'];\r\n                break;\r\n            case '-online':\r\n                orderBy = ['-online', 'userName'];\r\n                break;\r\n        }\r\n\r\n        return orderBy;\r\n    }\r\n}\r\n\r\nStudentProgressController.$inject = [\r\n    '$rootScope',\r\n    '$scope',\r\n    '$state',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentStatusService',\r\n    'TeacherDataService',\r\n    'TeacherWebSocketService'\r\n];\r\n\r\nexport default StudentProgressController;\r\n"]}