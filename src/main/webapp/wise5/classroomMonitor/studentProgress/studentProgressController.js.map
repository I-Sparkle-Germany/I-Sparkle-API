{"version":3,"sources":["studentProgressController.es6"],"names":[],"mappings":";;;;;;;;;;IAAM;AACF,aADE,yBACF,CAAY,UAAZ,EACY,MADZ,EAEY,aAFZ,EAGY,oBAHZ,EAIY,kBAJZ,EAKY,uBALZ,EAKqC;8BANnC,2BAMmC;;AACjC,aAAK,UAAL,GAAkB,UAAlB,CADiC;AAEjC,aAAK,MAAL,GAAc,MAAd,CAFiC;AAGjC,aAAK,aAAL,GAAqB,aAArB,CAHiC;AAIjC,aAAK,oBAAL,GAA4B,oBAA5B,CAJiC;AAKjC,aAAK,kBAAL,GAA0B,kBAA1B,CALiC;AAMjC,aAAK,uBAAL,GAA+B,uBAA/B,CANiC;;AAQjC,aAAK,KAAL,GAAa,mBAAb,CARiC;;AAUjC,aAAK,UAAL,GAAkB,KAAK,aAAL,CAAmB,qBAAnB,EAAlB,CAViC;;AAYjC,aAAK,eAAL,GAAuB,KAAK,oBAAL,CAA0B,kBAA1B,EAAvB,CAZiC;;AAcjC,aAAK,OAAL,GAAe,EAAf;;;AAdiC,YAiB7B,kBAAkB;AAClB,sBAAU,CAAC,CAAD;AACV,wBAAY,KAAZ;SAFA,CAjB6B;;AAsBjC,aAAK,OAAL,CAAa,IAAb,CAAkB,eAAlB,EAtBiC;;AAwBjC,aAAK,OAAL,GAAe,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,aAAL,CAAmB,UAAnB,EAApB,CAAf;;;AAxBiC,YA2B7B,KAAK,gBAAL,MAA2B,IAA3B,EAAiC;AACjC,gBAAI,KAAK,OAAL,IAAgB,IAAhB,IAAwB,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,EAAyB;;AAEjD,qBAAK,gBAAL,CAAsB,KAAK,OAAL,CAAa,CAAb,CAAtB,EAFiD;aAArD;SADJ;;AAOA,aAAK,cAAL,GAAsB,KAAK,uBAAL,CAA6B,iBAA7B,EAAtB;;;;;AAlCiC,kBAuCjC,CAAW,GAAX,CAAe,wBAAf,EAAyC,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AAC/E,iBAAK,cAAL,GAAsB,KAAK,cAAL,CADyD;SAAvB,CAA5D,EAvCiC;KALrC;;iBADE;;2CAmDiB;AACf,mBAAO,KAAK,oBAAL,CAA0B,gBAA1B,EAAP,CADe;;;;qDAIU,aAAa;AACtC,mBAAO,KAAK,oBAAL,CAA0B,iCAA1B,CAA4D,WAA5D,CAAP,CADsC;;;;oDAId,aAAa;AACrC,mBAAO,KAAK,oBAAL,CAA0B,2BAA1B,CAAsD,WAAtD,CAAP,CADqC;;;;0CAIvB,WAAW;AACzB,gBAAI,cAAc,UAAU,WAAV,CADO;;AAGzB,iBAAK,MAAL,CAAY,EAAZ,CAAe,qBAAf,EAAsC,EAAC,aAAa,WAAb,EAAvC,EAHyB;;;;0CAMX,aAAa;AAC3B,mBAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,WAA5B,KAA4C,CAAC,CAAD,CADxB;;;;;;;;;yCAQd,QAAQ;AACrB,iBAAK,kBAAL,CAAwB,gBAAxB,CAAyC,MAAzC,EADqB;;;;;;;;2CAON;AACf,mBAAO,KAAK,kBAAL,CAAwB,gBAAxB,EAAP,CADe;;;;WApFjB;;;AA0FN,0BAA0B,OAA1B,GAAoC,CAAC,YAAD,EAAe,QAAf,EAAyB,eAAzB,EAA0C,sBAA1C,EAAkE,oBAAlE,EAAuF,yBAAvF,CAApC;;kBAEe","file":"studentProgressController.js","sourcesContent":["class StudentProgressController {\n    constructor($rootScope,\n                $state,\n                ConfigService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.title = 'Grade By Student ';\n\n        this.workgroups = this.ConfigService.getClassmateUserInfos();\n\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\n\n        this.periods = [];\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        /**\n         * Listen for the studentsOnlineReceived event\n         */\n        $rootScope.$on('studentsOnlineReceived', angular.bind(this, function (event, args) {\n            this.studentsOnline = args.studentsOnline;\n        }));\n\n    }\n\n    getNewNodeVisits() {\n        return this.StudentStatusService.getNewNodeVisits();\n    };\n\n    getCurrentNodeForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getCurrentNodeTitleForWorkgroupId(workgroupId);\n    };\n\n    getStudentProjectCompletion(workgroupId) {\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\n    };\n\n    studentRowClicked(workgroup) {\n        var workgroupId = workgroup.workgroupId;\n\n        this.$state.go('root.studentGrading', {workgroupId: workgroupId});\n    };\n\n    isWorkgroupOnline(workgroupId) {\n        return this.studentsOnline.indexOf(workgroupId) != -1;\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n}\n\nStudentProgressController.$inject = ['$rootScope', '$state', 'ConfigService', 'StudentStatusService', 'TeacherDataService','TeacherWebSocketService'];\n\nexport default StudentProgressController;"]}