{"version":3,"sources":["studentProgressController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM;AAEF,aAFE,yBAEF,CAAY,UAAZ,EACY,MADZ,EAEY,aAFZ,EAGY,cAHZ,EAIY,oBAJZ,EAKY,kBALZ,EAMY,uBANZ,EAMqC;;;8BARnC,2BAQmC;;AACjC,aAAK,UAAL,GAAkB,UAAlB,CADiC;AAEjC,aAAK,MAAL,GAAc,MAAd,CAFiC;AAGjC,aAAK,aAAL,GAAqB,aAArB,CAHiC;AAIjC,aAAK,cAAL,GAAsB,cAAtB,CAJiC;AAKjC,aAAK,oBAAL,GAA4B,oBAA5B,CALiC;AAMjC,aAAK,kBAAL,GAA0B,kBAA1B,CANiC;AAOjC,aAAK,uBAAL,GAA+B,uBAA/B,CAPiC;;AASjC,aAAK,UAAL,GAAkB,KAAK,aAAL,CAAmB,qBAAnB,EAAlB,CATiC;;AAWjC,aAAK,eAAL,GAAuB,KAAK,oBAAL,CAA0B,kBAA1B,EAAvB,CAXiC;;AAajC,aAAK,QAAL,GAAgB,KAAK,cAAL,CAAoB,WAApB,EAAhB,CAbiC;;AAejC,aAAK,OAAL,GAAe,EAAf;;;AAfiC,YAkB7B,kBAAkB;AAClB,sBAAU,CAAC,CAAD;AACV,wBAAY,KAAZ;SAFA,CAlB6B;;AAuBjC,aAAK,OAAL,CAAa,IAAb,CAAkB,eAAlB,EAvBiC;;AAyBjC,aAAK,OAAL,GAAe,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,aAAL,CAAmB,UAAnB,EAApB,CAAf;;;AAzBiC,YA4B7B,KAAK,gBAAL,MAA2B,IAA3B,EAAiC;AACjC,gBAAI,KAAK,OAAL,IAAgB,IAAhB,IAAwB,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,EAAyB;;AAEjD,qBAAK,gBAAL,CAAsB,KAAK,OAAL,CAAa,CAAb,CAAtB,EAFiD;aAArD;SADJ;;AAOA,aAAK,cAAL,GAAsB,KAAK,uBAAL,CAA6B,iBAA7B,EAAtB;;;;;AAnCiC,kBAwCjC,CAAW,GAAX,CAAe,wBAAf,EAAyC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACtD,kBAAK,cAAL,GAAsB,KAAK,cAAL,CADgC;SAAjB,CAAzC,CAxCiC;KANrC;;iBAFE;;2CAsDiB;AACf,mBAAO,KAAK,oBAAL,CAA0B,gBAA1B,EAAP,CADe;;;;qDAIU,aAAa;AACtC,mBAAO,KAAK,oBAAL,CAA0B,iCAA1B,CAA4D,WAA5D,CAAP,CADsC;;;;oDAId,aAAa;AACrC,mBAAO,KAAK,oBAAL,CAA0B,2BAA1B,CAAsD,WAAtD,CAAP,CADqC;;;;0CAIvB,WAAW;AACzB,gBAAI,cAAc,UAAU,WAAV,CADO;;AAGzB,iBAAK,MAAL,CAAY,EAAZ,CAAe,qBAAf,EAAsC,EAAC,aAAa,WAAb,EAAvC,EAHyB;;;;0CAMX,aAAa;AAC3B,mBAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,WAA5B,KAA4C,CAAC,CAAD,CADxB;;;;;;;;;;yCAQd,QAAQ;AACrB,iBAAK,kBAAL,CAAwB,gBAAxB,CAAyC,MAAzC,EADqB;;;;;;;;;2CAON;AACf,mBAAO,KAAK,kBAAL,CAAwB,gBAAxB,EAAP,CADe;;;;6CAIE,aAAa;AAC9B,mBAAO,KAAK,kBAAL,CAAwB,0BAAxB,CAAmD,WAAnD,CAAP,CAD8B;;;;WA3FhC;;;AAgGN,0BAA0B,OAA1B,GAAoC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,eAHgC,EAIhC,gBAJgC,EAKhC,sBALgC,EAMhC,oBANgC,EAOhC,yBAPgC,CAApC;;kBAUe","file":"studentProgressController.js","sourcesContent":["'use strict';\n\nclass StudentProgressController {\n\n    constructor($rootScope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.workgroups = this.ConfigService.getClassmateUserInfos();\n\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\n\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.periods = [];\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        /**\n         * Listen for the studentsOnlineReceived event\n         */\n        $rootScope.$on('studentsOnlineReceived', (event, args) => {\n            this.studentsOnline = args.studentsOnline;\n        });\n\n    }\n\n    getNewNodeVisits() {\n        return this.StudentStatusService.getNewNodeVisits();\n    };\n\n    getCurrentNodeForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getCurrentNodeTitleForWorkgroupId(workgroupId);\n    };\n\n    getStudentProjectCompletion(workgroupId) {\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\n    };\n\n    studentRowClicked(workgroup) {\n        var workgroupId = workgroup.workgroupId;\n\n        this.$state.go('root.studentGrading', {workgroupId: workgroupId});\n    };\n\n    isWorkgroupOnline(workgroupId) {\n        return this.studentsOnline.indexOf(workgroupId) != -1;\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    getStudentTotalScore(workgroupId) {\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\n    }\n}\n\nStudentProgressController.$inject = [\n    '$rootScope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default StudentProgressController;"]}