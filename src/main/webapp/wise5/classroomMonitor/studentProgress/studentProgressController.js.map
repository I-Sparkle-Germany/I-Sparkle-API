{"version":3,"sources":["studentProgressController.es6"],"names":[],"mappings":"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","file":"studentProgressController.js","sourcesContent":["'use strict';\n\nclass StudentProgressController {\n\n    constructor($rootScope,\n                $scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        this.workgroups = this.sortWorkgroupsByOnline();\n\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\n\n        this.maxScore = this.ProjectService.getMaxScore();\n        \n        this.canViewStudentNames = true;\n        this.canGradeStudentWork = true;\n        \n        // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n        var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n        \n        if (role === 'owner') {\n            // the teacher is the owner of the run and has full access\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'write') {\n            // the teacher is a shared teacher that can grade the student work\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'read') {\n            // the teacher is a shared teacher that can only view the student work\n            this.canViewStudentNames = false;\n            this.canGradeStudentWork = false;\n        }\n\n        this.periods = [];\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n\n        // listen for the studentsOnlineReceived event\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\n            this.studentsOnline = args.studentsOnline;\n\n            // update the workgroup order\n            this.workgroups = this.sortWorkgroupsByOnline();\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentStatusReceived event\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\n            // get the workgroup id\n            var studentStatus = args.studentStatus;\n            var workgroupId = studentStatus.workgroupId;\n\n            // update the time spent for the workgroup\n            this.updateTimeSpentForWorkgroupId(workgroupId);\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentDisconnected event\n        this.$rootScope.$on('studentDisconnected', (event, args) => {\n            var data = args.data;\n            var workgroupId = data.workgroupId;\n\n            var studentsOnline = this.studentsOnline;\n\n            var indexOfWorkgroupId = studentsOnline.indexOf(workgroupId);\n\n            if (indexOfWorkgroupId != -1) {\n                // remove the workgroup from the students online list\n                studentsOnline.splice(indexOfWorkgroupId, 1);\n\n                // update the workgroup order\n                this.workgroups = this.sortWorkgroupsByOnline();\n\n                // refresh the view\n                this.$scope.$apply();\n            }\n        });\n\n        // how often to update the time spent values in the view\n        this.updateTimeSpentInterval = 10000;\n\n        // mapping of workgroup id to time spent\n        this.studentTimeSpent = {};\n\n        // update the time spent values in the view\n        this.updateTimeSpent();\n\n        // update the time spent values every x seconds\n        this.updateTimeSpentIntervalId = setInterval(angular.bind(this, function() {\n            // update the time spent values in the view\n            this.updateTimeSpent();\n\n            // refresh the view\n            this.$scope.$apply();\n        }), this.updateTimeSpentInterval);\n    }\n\n    getCurrentNodeForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId);\n    };\n\n    getStudentProjectCompletion(workgroupId) {\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\n    };\n\n    studentRowClicked(workgroup) {\n        var workgroupId = workgroup.workgroupId;\n\n        this.$state.go('root.studentGrading', {workgroupId: workgroupId});\n    };\n\n    isWorkgroupOnline(workgroupId) {\n        return this.studentsOnline.indexOf(workgroupId) != -1;\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n        this.$rootScope.$broadcast('periodChanged', {period: period});\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    getStudentTotalScore(workgroupId) {\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the time spent for a workgroup\n     */\n    getStudentTimeSpent(workgroupId) {\n        var timeSpent = this.studentTimeSpent[workgroupId];\n        return timeSpent;\n    }\n\n    /**\n     * Update the time spent values in the view\n     */\n    updateTimeSpent() {\n        var studentsOnline = this.studentsOnline;\n\n        if (studentsOnline != null) {\n\n            // loop through all the workgroups that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n                    // update the time spent for the workgroup\n                    this.updateTimeSpentForWorkgroupId(workgroupId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the time spent for the workgroup\n     * @workgroupId the workgroup id\n     */\n    updateTimeSpentForWorkgroupId(workgroupId) {\n\n        if (workgroupId != null) {\n            // get the current client timestamp\n            var currentClientTimestamp = new Date().getTime();\n\n            // get the student status\n            var studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n\n            if (studentStatus != null) {\n\n                // get the time the student status was posted to the server\n                var postTimestamp = studentStatus.postTimestamp;\n\n                /*\n                 * convert the current client timestamp to a server timestamp\n                 * this is requied in cases where the client and server clocks\n                 * are not synchronized\n                 */\n                var currentServerTimestamp = this.ConfigService.convertToServerTimestamp(currentClientTimestamp);\n\n                // get the amount of time the student has been on the step\n                var timeSpent = currentServerTimestamp - postTimestamp;\n\n                // get the total amount of seconds the student has been on the step\n                var totalSeconds = Math.floor(timeSpent / 1000);\n\n                // get the hours, minutes, and seconds\n                var hours = Math.floor((totalSeconds % 86400) / 3600);\n                var minutes = Math.floor(((totalSeconds % 86400) % 3600) / 60);\n                var seconds = totalSeconds % 60;\n\n                if (hours < 0) {\n                    hours = 0;\n                }\n\n                if (minutes < 0) {\n                    minutes = 0;\n                }\n\n                if (seconds < 0) {\n                    seconds = 0;\n                }\n\n                var timeSpentText = '';\n\n                if (hours > 0) {\n                    timeSpentText += (hours + ':');\n                }\n\n                if (hours > 0) {\n                    // there are hours\n\n                    if (minutes == 0) {\n                        // fill with zeroes\n                        timeSpentText += '00:';\n                    } else if (minutes > 0 && minutes < 10) {\n                        // add a leading zero\n                        timeSpentText += '0' + minutes + ':';\n                    } else {\n                        timeSpentText += minutes + ':';\n                    }\n                } else {\n                    // there are no hours\n\n                    timeSpentText += minutes + ':';\n                }\n\n                if (seconds == 0) {\n                    // fill with zeroes\n                    timeSpentText += '00';\n                } else if (seconds > 0 && seconds < 10) {\n                    // add a leading zero\n                    timeSpentText += ('0' + seconds);\n                } else {\n                    timeSpentText += seconds;\n                }\n\n                // update the mapping of workgroup id to time spent\n                this.studentTimeSpent[workgroupId] = timeSpentText;\n            }\n        }\n    }\n\n    /**\n     * Sort the workgroups. Place the online workgroups sorted alphabetically at\n     * the top and the offline workgroups sorted alphabetically at the bottom.\n     * @returns a list of workgroup objects with the online workgroups first\n     * and the offline workgroups after\n     */\n    sortWorkgroupsByOnline() {\n\n        var workgroupsOnline = [];\n        var workgroupsOffline = [];\n\n        // get the workgroups sorted alphabetically\n        var workgroups = this.ConfigService.getClassmateUserInfos();\n\n        // loop through all the workgroups\n        for (var x = 0; x < workgroups.length; x++) {\n            var workgroup = workgroups[x];\n\n            if (workgroup != null) {\n                if (this.isWorkgroupOnline(workgroup.workgroupId)) {\n                    // the workroup is online\n                    workgroupsOnline.push(workgroup);\n                } else {\n                    // the workgroup is offline\n                    workgroupsOffline.push(workgroup);\n                }\n            }\n        }\n\n        // join the workgroup arrays together\n        var workgroupsSorted = workgroupsOnline.concat(workgroupsOffline);\n\n        return workgroupsSorted;\n    }\n}\n\nStudentProgressController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default StudentProgressController;\n"]}