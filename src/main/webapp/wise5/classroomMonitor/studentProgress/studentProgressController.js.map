{"version":3,"sources":["studentProgressController.es6"],"names":["StudentProgressController","$rootScope","$scope","$state","ConfigService","ProjectService","StudentStatusService","TeacherDataService","TeacherWebSocketService","teacherWorkgroupId","getWorkgroupId","studentsOnline","getStudentsOnline","workgroups","sortWorkgroupsByOnline","studentStatuses","getStudentStatuses","maxScore","getMaxScore","canViewStudentNames","canGradeStudentWork","role","getTeacherRole","periods","allPeriodOption","periodId","periodName","push","concat","getPeriods","getCurrentPeriod","length","setCurrentPeriod","$on","event","args","$apply","studentStatus","workgroupId","updateTimeSpentForWorkgroupId","data","indexOfWorkgroupId","indexOf","splice","updateTimeSpentInterval","studentTimeSpent","updateTimeSpent","updateTimeSpentIntervalId","setInterval","context","nodeId","componentId","componentType","category","saveEvent","getCurrentNodePositionAndNodeTitleForWorkgroupId","getStudentProjectCompletion","workgroup","go","period","$broadcast","getTotalScoreByWorkgroupId","timeSpent","s","currentClientTimestamp","Date","getTime","getStudentStatusForWorkgroupId","postTimestamp","currentServerTimestamp","convertToServerTimestamp","totalSeconds","Math","floor","hours","minutes","seconds","timeSpentText","workgroupsOnline","workgroupsOffline","getClassmateUserInfos","x","isWorkgroupOnline","workgroupsSorted","setCurrentWorkgroup","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,yB;AAEF,uCAAYC,UAAZ,EACYC,MADZ,EAEYC,MAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,oBALZ,EAMYC,kBANZ,EAOYC,uBAPZ,EAOqC;AAAA;;AAAA;;AACjC,aAAKP,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,oBAAL,GAA4BA,oBAA5B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,uBAAL,GAA+BA,uBAA/B;;AAEA,aAAKC,kBAAL,GAA0B,KAAKL,aAAL,CAAmBM,cAAnB,EAA1B;;AAEA,aAAKC,cAAL,GAAsB,KAAKH,uBAAL,CAA6BI,iBAA7B,EAAtB;;AAEA,aAAKC,UAAL,GAAkB,KAAKC,sBAAL,EAAlB;;AAEA,aAAKC,eAAL,GAAuB,KAAKT,oBAAL,CAA0BU,kBAA1B,EAAvB;;AAEA,aAAKC,QAAL,GAAgB,KAAKZ,cAAL,CAAoBa,WAApB,EAAhB;;AAEA,aAAKC,mBAAL,GAA2B,IAA3B;AACA,aAAKC,mBAAL,GAA2B,IAA3B;;AAEA;AACA,YAAIC,OAAO,KAAKjB,aAAL,CAAmBkB,cAAnB,CAAkC,KAAKb,kBAAvC,CAAX;;AAEA,YAAIY,SAAS,OAAb,EAAsB;AAClB;AACA,iBAAKF,mBAAL,GAA2B,IAA3B;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACH,SAJD,MAIO,IAAIC,SAAS,OAAb,EAAsB;AACzB;AACA,iBAAKF,mBAAL,GAA2B,IAA3B;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACH,SAJM,MAIA,IAAIC,SAAS,MAAb,EAAqB;AACxB;AACA,iBAAKF,mBAAL,GAA2B,KAA3B;AACA,iBAAKC,mBAAL,GAA2B,KAA3B;AACH;;AAED,aAAKG,OAAL,GAAe,EAAf;;AAEA;AACA,YAAIC,kBAAkB;AAClBC,sBAAU,CAAC,CADO;AAElBC,wBAAY;AAFM,SAAtB;;AAKA,aAAKH,OAAL,CAAaI,IAAb,CAAkBH,eAAlB;;AAEA,aAAKD,OAAL,GAAe,KAAKA,OAAL,CAAaK,MAAb,CAAoB,KAAKxB,aAAL,CAAmByB,UAAnB,EAApB,CAAf;;AAEA;AACA,YAAI,KAAKC,gBAAL,MAA2B,IAA/B,EAAqC;AACjC,gBAAI,KAAKP,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAaQ,MAAb,GAAsB,CAAlD,EAAqD;AACjD;AACA,qBAAKC,gBAAL,CAAsB,KAAKT,OAAL,CAAa,CAAb,CAAtB;AACH;AACJ;;AAED;AACA,aAAKtB,UAAL,CAAgBgC,GAAhB,CAAoB,wBAApB,EAA8C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC3D,kBAAKxB,cAAL,GAAsBwB,KAAKxB,cAA3B;;AAEA;AACA,kBAAKE,UAAL,GAAkB,MAAKC,sBAAL,EAAlB;;AAEA;AACA,kBAAKZ,MAAL,CAAYkC,MAAZ;AACH,SARD;;AAUA;AACA,aAAKnC,UAAL,CAAgBgC,GAAhB,CAAoB,uBAApB,EAA6C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC1D;AACA,gBAAIE,gBAAgBF,KAAKE,aAAzB;AACA,gBAAIC,cAAcD,cAAcC,WAAhC;;AAEA;AACA,kBAAKC,6BAAL,CAAmCD,WAAnC;;AAEA;AACA,kBAAKpC,MAAL,CAAYkC,MAAZ;AACH,SAVD;;AAYA;AACA,aAAKnC,UAAL,CAAgBgC,GAAhB,CAAoB,qBAApB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxD,gBAAIK,OAAOL,KAAKK,IAAhB;AACA,gBAAIF,cAAcE,KAAKF,WAAvB;;AAEA,gBAAI3B,iBAAiB,MAAKA,cAA1B;;AAEA,gBAAI8B,qBAAqB9B,eAAe+B,OAAf,CAAuBJ,WAAvB,CAAzB;;AAEA,gBAAIG,sBAAsB,CAAC,CAA3B,EAA8B;AAC1B;AACA9B,+BAAegC,MAAf,CAAsBF,kBAAtB,EAA0C,CAA1C;;AAEA;AACA,sBAAK5B,UAAL,GAAkB,MAAKC,sBAAL,EAAlB;;AAEA;AACA,sBAAKZ,MAAL,CAAYkC,MAAZ;AACH;AACJ,SAlBD;;AAoBA;AACA,aAAKQ,uBAAL,GAA+B,KAA/B;;AAEA;AACA,aAAKC,gBAAL,GAAwB,EAAxB;;AAEA;AACA,aAAKC,eAAL;;AAEA;AACA,aAAKC,yBAAL,GAAiCC,YAAY,YAAM;AAC/C;AACA,kBAAKF,eAAL;;AAEA;AACA,kBAAK5C,MAAL,CAAYkC,MAAZ;AACH,SANgC,EAM9B,KAAKQ,uBANyB,CAAjC;;AAQA;AACA,YAAIK,UAAU,kBAAd;AAAA,YAAkCC,SAAS,IAA3C;AAAA,YAAiDC,cAAc,IAA/D;AAAA,YAAqEC,gBAAgB,IAArF;AAAA,YACIC,WAAW,YADf;AAAA,YAC6BnB,QAAQ,8BADrC;AAAA,YACqEM,OAAO,EAD5E;AAEA,aAAKjC,kBAAL,CAAwB+C,SAAxB,CAAkCL,OAAlC,EAA2CC,MAA3C,EAAmDC,WAAnD,EAAgEC,aAAhE,EAA+EC,QAA/E,EAAyFnB,KAAzF,EAAgGM,IAAhG;AACH;;;;qDAE4BF,W,EAAa;AACtC,mBAAO,KAAKhC,oBAAL,CAA0BiD,gDAA1B,CAA2EjB,WAA3E,CAAP;AACH;;;oDAE2BA,W,EAAa;AACrC,mBAAO,KAAKhC,oBAAL,CAA0BkD,2BAA1B,CAAsDlB,WAAtD,CAAP;AACH;;;0CAEiBmB,S,EAAW;AACzB,gBAAInB,cAAcmB,UAAUnB,WAA5B;;AAEA,iBAAKnC,MAAL,CAAYuD,EAAZ,CAAe,qBAAf,EAAsC,EAACpB,aAAaA,WAAd,EAAtC;AACH;;;0CAEiBA,W,EAAa;AAC3B,mBAAO,KAAK3B,cAAL,CAAoB+B,OAApB,CAA4BJ,WAA5B,KAA4C,CAAC,CAApD;AACH;;;;;AAED;;;;yCAIiBqB,M,EAAQ;AACrB,iBAAKpD,kBAAL,CAAwByB,gBAAxB,CAAyC2B,MAAzC;AACA,iBAAK1D,UAAL,CAAgB2D,UAAhB,CAA2B,eAA3B,EAA4C,EAACD,QAAQA,MAAT,EAA5C;AACH;;;;;AAED;;;2CAGmB;AACf,mBAAO,KAAKpD,kBAAL,CAAwBuB,gBAAxB,EAAP;AACH;;;6CAEoBQ,W,EAAa;AAC9B,mBAAO,KAAK/B,kBAAL,CAAwBsD,0BAAxB,CAAmDvB,WAAnD,CAAP;AACH;;AAED;;;;;;4CAGoBA,W,EAAa;AAC7B,gBAAIwB,YAAY,KAAKjB,gBAAL,CAAsBP,WAAtB,CAAhB;AACA,mBAAOwB,SAAP;AACH;;AAED;;;;;;0CAGkB;AACd,gBAAInD,iBAAiB,KAAKA,cAA1B;;AAEA,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,qBAAK,IAAIoD,IAAI,CAAb,EAAgBA,IAAIpD,eAAeoB,MAAnC,EAA2CgC,GAA3C,EAAgD;AAC5C,wBAAIzB,cAAc3B,eAAeoD,CAAf,CAAlB;;AAEA,wBAAIzB,eAAe,IAAnB,EAAyB;AACrB;AACA,6BAAKC,6BAAL,CAAmCD,WAAnC;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;sDAI8BA,W,EAAa;;AAEvC,gBAAIA,eAAe,IAAnB,EAAyB;AACrB;AACA,oBAAI0B,yBAAyB,IAAIC,IAAJ,GAAWC,OAAX,EAA7B;;AAEA;AACA,oBAAI7B,gBAAgB,KAAK/B,oBAAL,CAA0B6D,8BAA1B,CAAyD7B,WAAzD,CAApB;;AAEA,oBAAID,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,wBAAI+B,gBAAgB/B,cAAc+B,aAAlC;;AAEA;;;;;AAKA,wBAAIC,yBAAyB,KAAKjE,aAAL,CAAmBkE,wBAAnB,CAA4CN,sBAA5C,CAA7B;;AAEA;AACA,wBAAIF,YAAYO,yBAAyBD,aAAzC;;AAEA;AACA,wBAAIG,eAAeC,KAAKC,KAAL,CAAWX,YAAY,IAAvB,CAAnB;;AAEA;AACA,wBAAIY,QAAQF,KAAKC,KAAL,CAAYF,eAAe,KAAhB,GAAyB,IAApC,CAAZ;AACA,wBAAII,UAAUH,KAAKC,KAAL,CAAaF,eAAe,KAAhB,GAAyB,IAA1B,GAAkC,EAA7C,CAAd;AACA,wBAAIK,UAAUL,eAAe,EAA7B;;AAEA,wBAAIG,QAAQ,CAAZ,EAAe;AACXA,gCAAQ,CAAR;AACH;;AAED,wBAAIC,UAAU,CAAd,EAAiB;AACbA,kCAAU,CAAV;AACH;;AAED,wBAAIC,UAAU,CAAd,EAAiB;AACbA,kCAAU,CAAV;AACH;;AAED,wBAAIC,gBAAgB,EAApB;;AAEA,wBAAIH,QAAQ,CAAZ,EAAe;AACXG,yCAAkBH,QAAQ,GAA1B;AACH;;AAED,wBAAIA,QAAQ,CAAZ,EAAe;AACX;;AAEA,4BAAIC,WAAW,CAAf,EAAkB;AACd;AACAE,6CAAiB,KAAjB;AACH,yBAHD,MAGO,IAAIF,UAAU,CAAV,IAAeA,UAAU,EAA7B,EAAiC;AACpC;AACAE,6CAAiB,MAAMF,OAAN,GAAgB,GAAjC;AACH,yBAHM,MAGA;AACHE,6CAAiBF,UAAU,GAA3B;AACH;AACJ,qBAZD,MAYO;AACH;;AAEAE,yCAAiBF,UAAU,GAA3B;AACH;;AAED,wBAAIC,WAAW,CAAf,EAAkB;AACd;AACAC,yCAAiB,IAAjB;AACH,qBAHD,MAGO,IAAID,UAAU,CAAV,IAAeA,UAAU,EAA7B,EAAiC;AACpC;AACAC,yCAAkB,MAAMD,OAAxB;AACH,qBAHM,MAGA;AACHC,yCAAiBD,OAAjB;AACH;;AAED;AACA,yBAAK/B,gBAAL,CAAsBP,WAAtB,IAAqCuC,aAArC;AACH;AACJ;AACJ;;AAED;;;;;;;;;iDAMyB;;AAErB,gBAAIC,mBAAmB,EAAvB;AACA,gBAAIC,oBAAoB,EAAxB;;AAEA;AACA,gBAAIlE,aAAa,KAAKT,aAAL,CAAmB4E,qBAAnB,EAAjB;;AAEA;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIpE,WAAWkB,MAA/B,EAAuCkD,GAAvC,EAA4C;AACxC,oBAAIxB,YAAY5C,WAAWoE,CAAX,CAAhB;;AAEA,oBAAIxB,aAAa,IAAjB,EAAuB;AACnB,wBAAI,KAAKyB,iBAAL,CAAuBzB,UAAUnB,WAAjC,CAAJ,EAAmD;AAC/C;AACAwC,yCAAiBnD,IAAjB,CAAsB8B,SAAtB;AACH,qBAHD,MAGO;AACH;AACAsB,0CAAkBpD,IAAlB,CAAuB8B,SAAvB;AACH;AACJ;AACJ;;AAED;AACA,gBAAI0B,mBAAmBL,iBAAiBlD,MAAjB,CAAwBmD,iBAAxB,CAAvB;;AAEA,mBAAOI,gBAAP;AACH;;;iDAEwB1B,S,EAAW;AAChC,iBAAKlD,kBAAL,CAAwB6E,mBAAxB,CAA4C3B,SAA5C;AACA,iBAAKtD,MAAL,CAAYuD,EAAZ,CAAe,mBAAf;AACH;;;;;;AAGL1D,0BAA0BqF,OAA1B,GAAoC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,QAHgC,EAIhC,eAJgC,EAKhC,gBALgC,EAMhC,sBANgC,EAOhC,oBAPgC,EAQhC,yBARgC,CAApC;;kBAWerF,yB","file":"studentProgressController.js","sourcesContent":["'use strict';\n\nclass StudentProgressController {\n\n    constructor($rootScope,\n                $scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.teacherWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        this.workgroups = this.sortWorkgroupsByOnline();\n\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\n\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.canViewStudentNames = true;\n        this.canGradeStudentWork = true;\n\n        // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n        var role = this.ConfigService.getTeacherRole(this.teacherWorkgroupId);\n\n        if (role === 'owner') {\n            // the teacher is the owner of the run and has full access\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'write') {\n            // the teacher is a shared teacher that can grade the student work\n            this.canViewStudentNames = true;\n            this.canGradeStudentWork = true;\n        } else if (role === 'read') {\n            // the teacher is a shared teacher that can only view the student work\n            this.canViewStudentNames = false;\n            this.canGradeStudentWork = false;\n        }\n\n        this.periods = [];\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n\n        // listen for the studentsOnlineReceived event\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\n            this.studentsOnline = args.studentsOnline;\n\n            // update the workgroup order\n            this.workgroups = this.sortWorkgroupsByOnline();\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentStatusReceived event\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\n            // get the workgroup id\n            let studentStatus = args.studentStatus;\n            let workgroupId = studentStatus.workgroupId;\n\n            // update the time spent for the workgroup\n            this.updateTimeSpentForWorkgroupId(workgroupId);\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentDisconnected event\n        this.$rootScope.$on('studentDisconnected', (event, args) => {\n            var data = args.data;\n            var workgroupId = data.workgroupId;\n\n            var studentsOnline = this.studentsOnline;\n\n            var indexOfWorkgroupId = studentsOnline.indexOf(workgroupId);\n\n            if (indexOfWorkgroupId != -1) {\n                // remove the workgroup from the students online list\n                studentsOnline.splice(indexOfWorkgroupId, 1);\n\n                // update the workgroup order\n                this.workgroups = this.sortWorkgroupsByOnline();\n\n                // refresh the view\n                this.$scope.$apply();\n            }\n        });\n\n        // how often to update the time spent values in the view\n        this.updateTimeSpentInterval = 10000;\n\n        // mapping of workgroup id to time spent\n        this.studentTimeSpent = {};\n\n        // update the time spent values in the view\n        this.updateTimeSpent();\n\n        // update the time spent values every x seconds\n        this.updateTimeSpentIntervalId = setInterval(() => {\n            // update the time spent values in the view\n            this.updateTimeSpent();\n\n            // refresh the view\n            this.$scope.$apply();\n        }, this.updateTimeSpentInterval);\n\n        // save event when student progress view is displayed\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"Navigation\", event = \"studentProgressViewDisplayed\", data = {};\n        this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    getCurrentNodeForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId);\n    };\n\n    getStudentProjectCompletion(workgroupId) {\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\n    };\n\n    studentRowClicked(workgroup) {\n        var workgroupId = workgroup.workgroupId;\n\n        this.$state.go('root.studentGrading', {workgroupId: workgroupId});\n    };\n\n    isWorkgroupOnline(workgroupId) {\n        return this.studentsOnline.indexOf(workgroupId) != -1;\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n        this.$rootScope.$broadcast('periodChanged', {period: period});\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    getStudentTotalScore(workgroupId) {\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the time spent for a workgroup\n     */\n    getStudentTimeSpent(workgroupId) {\n        var timeSpent = this.studentTimeSpent[workgroupId];\n        return timeSpent;\n    }\n\n    /**\n     * Update the time spent values in the view\n     */\n    updateTimeSpent() {\n        var studentsOnline = this.studentsOnline;\n\n        if (studentsOnline != null) {\n\n            // loop through all the workgroups that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n                    // update the time spent for the workgroup\n                    this.updateTimeSpentForWorkgroupId(workgroupId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the time spent for the workgroup\n     * @workgroupId the workgroup id\n     */\n    updateTimeSpentForWorkgroupId(workgroupId) {\n\n        if (workgroupId != null) {\n            // get the current client timestamp\n            var currentClientTimestamp = new Date().getTime();\n\n            // get the student status\n            var studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n\n            if (studentStatus != null) {\n\n                // get the time the student status was posted to the server\n                var postTimestamp = studentStatus.postTimestamp;\n\n                /*\n                 * convert the current client timestamp to a server timestamp\n                 * this is requied in cases where the client and server clocks\n                 * are not synchronized\n                 */\n                var currentServerTimestamp = this.ConfigService.convertToServerTimestamp(currentClientTimestamp);\n\n                // get the amount of time the student has been on the step\n                var timeSpent = currentServerTimestamp - postTimestamp;\n\n                // get the total amount of seconds the student has been on the step\n                var totalSeconds = Math.floor(timeSpent / 1000);\n\n                // get the hours, minutes, and seconds\n                var hours = Math.floor((totalSeconds % 86400) / 3600);\n                var minutes = Math.floor(((totalSeconds % 86400) % 3600) / 60);\n                var seconds = totalSeconds % 60;\n\n                if (hours < 0) {\n                    hours = 0;\n                }\n\n                if (minutes < 0) {\n                    minutes = 0;\n                }\n\n                if (seconds < 0) {\n                    seconds = 0;\n                }\n\n                var timeSpentText = '';\n\n                if (hours > 0) {\n                    timeSpentText += (hours + ':');\n                }\n\n                if (hours > 0) {\n                    // there are hours\n\n                    if (minutes == 0) {\n                        // fill with zeroes\n                        timeSpentText += '00:';\n                    } else if (minutes > 0 && minutes < 10) {\n                        // add a leading zero\n                        timeSpentText += '0' + minutes + ':';\n                    } else {\n                        timeSpentText += minutes + ':';\n                    }\n                } else {\n                    // there are no hours\n\n                    timeSpentText += minutes + ':';\n                }\n\n                if (seconds == 0) {\n                    // fill with zeroes\n                    timeSpentText += '00';\n                } else if (seconds > 0 && seconds < 10) {\n                    // add a leading zero\n                    timeSpentText += ('0' + seconds);\n                } else {\n                    timeSpentText += seconds;\n                }\n\n                // update the mapping of workgroup id to time spent\n                this.studentTimeSpent[workgroupId] = timeSpentText;\n            }\n        }\n    }\n\n    /**\n     * Sort the workgroups. Place the online workgroups sorted alphabetically at\n     * the top and the offline workgroups sorted alphabetically at the bottom.\n     * @returns a list of workgroup objects with the online workgroups first\n     * and the offline workgroups after\n     */\n    sortWorkgroupsByOnline() {\n\n        var workgroupsOnline = [];\n        var workgroupsOffline = [];\n\n        // get the workgroups sorted alphabetically\n        var workgroups = this.ConfigService.getClassmateUserInfos();\n\n        // loop through all the workgroups\n        for (var x = 0; x < workgroups.length; x++) {\n            var workgroup = workgroups[x];\n\n            if (workgroup != null) {\n                if (this.isWorkgroupOnline(workgroup.workgroupId)) {\n                    // the workroup is online\n                    workgroupsOnline.push(workgroup);\n                } else {\n                    // the workgroup is offline\n                    workgroupsOffline.push(workgroup);\n                }\n            }\n        }\n\n        // join the workgroup arrays together\n        var workgroupsSorted = workgroupsOnline.concat(workgroupsOffline);\n\n        return workgroupsSorted;\n    }\n\n    showWorkgroupProjectView(workgroup) {\n        this.TeacherDataService.setCurrentWorkgroup(workgroup);\n        this.$state.go('root.nodeProgress');\n    }\n}\n\nStudentProgressController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default StudentProgressController;\n"]}