{"version":3,"sources":["studentProgressController.es6"],"names":[],"mappings":"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","file":"studentProgressController.js","sourcesContent":["'use strict';\n\nclass StudentProgressController {\n\n    constructor($rootScope,\n                $scope,\n                $state,\n                ConfigService,\n                ProjectService,\n                StudentStatusService,\n                TeacherDataService,\n                TeacherWebSocketService) {\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentStatusService = StudentStatusService;\n        this.TeacherDataService = TeacherDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.studentsOnline = this.TeacherWebSocketService.getStudentsOnline();\n\n        this.workgroups = this.sortWorkgroupsByOnline();\n\n        this.studentStatuses = this.StudentStatusService.getStudentStatuses();\n\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.periods = [];\n\n        // create an option for all periods\n        var allPeriodOption = {\n            periodId: -1,\n            periodName: 'All'\n        };\n\n        this.periods.push(allPeriodOption);\n\n        this.periods = this.periods.concat(this.ConfigService.getPeriods());\n\n        // set the current period if it hasn't been set yet\n        if (this.getCurrentPeriod() == null) {\n            if (this.periods != null && this.periods.length > 0) {\n                // set it to the all periods option\n                this.setCurrentPeriod(this.periods[0]);\n            }\n        }\n\n        // listen for the studentsOnlineReceived event\n        this.$rootScope.$on('studentsOnlineReceived', (event, args) => {\n            this.studentsOnline = args.studentsOnline;\n\n            // update the workgroup order\n            this.workgroups = this.sortWorkgroupsByOnline();\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentStatusReceived event\n        this.$rootScope.$on('studentStatusReceived', (event, args) => {\n            // get the workgroup id\n            var studentStatus = args.studentStatus;\n            var workgroupId = studentStatus.workgroupId;\n\n            // update the time spent for the workgroup\n            this.updateTimeSpentForWorkgroupId(workgroupId);\n\n            // refresh the view\n            this.$scope.$apply();\n        });\n\n        // listen for the studentDisconnected event\n        this.$rootScope.$on('studentDisconnected', (event, args) => {\n            var data = args.data;\n            var workgroupId = data.workgroupId;\n\n            var studentsOnline = this.studentsOnline;\n\n            var indexOfWorkgroupId = studentsOnline.indexOf(workgroupId);\n\n            if (indexOfWorkgroupId != -1) {\n                // remove the workgroup from the students online list\n                studentsOnline.splice(indexOfWorkgroupId, 1);\n\n                // update the workgroup order\n                this.workgroups = this.sortWorkgroupsByOnline();\n\n                // refresh the view\n                this.$scope.$apply();\n            }\n        });\n\n        // how often to update the time spent values in the view\n        this.updateTimeSpentInterval = 10000;\n\n        // mapping of workgroup id to time spent\n        this.studentTimeSpent = {};\n\n        // update the time spent values in the view\n        this.updateTimeSpent();\n\n        // update the time spent values every x seconds\n        this.updateTimeSpentIntervalId = setInterval(angular.bind(this, function() {\n            // update the time spent values in the view\n            this.updateTimeSpent();\n\n            // refresh the view\n            this.$scope.$apply();\n        }), this.updateTimeSpentInterval);\n    }\n\n    getNewNodeVisits() {\n        return this.StudentStatusService.getNewNodeVisits();\n    };\n\n    getCurrentNodeForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getCurrentNodeTitleForWorkgroupId(workgroupId);\n    };\n\n    getStudentProjectCompletion(workgroupId) {\n        return this.StudentStatusService.getStudentProjectCompletion(workgroupId);\n    };\n\n    studentRowClicked(workgroup) {\n        var workgroupId = workgroup.workgroupId;\n\n        this.$state.go('root.studentGrading', {workgroupId: workgroupId});\n    };\n\n    isWorkgroupOnline(workgroupId) {\n        return this.studentsOnline.indexOf(workgroupId) != -1;\n    };\n\n    /**\n     * Set the current period\n     * @param period the period object\n     */\n    setCurrentPeriod(period) {\n        this.TeacherDataService.setCurrentPeriod(period);\n    };\n\n    /**\n     * Get the current period\n     */\n    getCurrentPeriod() {\n        return this.TeacherDataService.getCurrentPeriod();\n    };\n\n    getStudentTotalScore(workgroupId) {\n        return this.TeacherDataService.getTotalScoreByWorkgroupId(workgroupId);\n    }\n\n    /**\n     * Get the time spent for a workgroup\n     */\n    getStudentTimeSpent(workgroupId) {\n        var timeSpent = this.studentTimeSpent[workgroupId];\n        return timeSpent;\n    }\n\n    /**\n     * Update the time spent values in the view\n     */\n    updateTimeSpent() {\n        var studentsOnline = this.studentsOnline;\n\n        if (studentsOnline != null) {\n\n            // loop through all the workgroups that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n                    // update the time spent for the workgroup\n                    this.updateTimeSpentForWorkgroupId(workgroupId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the time spent for the workgroup\n     * @workgroupId the workgroup id\n     */\n    updateTimeSpentForWorkgroupId(workgroupId) {\n\n        if (workgroupId != null) {\n            // get the current client timestamp\n            var currentClientTimestamp = new Date().getTime();\n\n            // get the student status\n            var studentStatus = this.StudentStatusService.getStudentStatusForWorkgroupId(workgroupId);\n\n            if (studentStatus != null) {\n\n                // get the time the student status was posted to the server\n                var postTimestamp = studentStatus.postTimestamp;\n\n                /*\n                 * convert the current client timestamp to a server timestamp\n                 * this is requied in cases where the client and server clocks\n                 * are not synchronized\n                 */\n                var currentServerTimestamp = this.ConfigService.convertToServerTimestamp(currentClientTimestamp);\n\n                // get the amount of time the student has been on the step\n                var timeSpent = currentServerTimestamp - postTimestamp;\n\n                // get the total amount of seconds the student has been on the step\n                var totalSeconds = Math.floor(timeSpent / 1000);\n\n                // get the hours, minutes, and seconds\n                var hours = Math.floor((totalSeconds % 86400) / 3600);\n                var minutes = Math.floor(((totalSeconds % 86400) % 3600) / 60);\n                var seconds = totalSeconds % 60;\n\n                if (hours < 0) {\n                    hours = 0;\n                }\n\n                if (minutes < 0) {\n                    minutes = 0;\n                }\n\n                if (seconds < 0) {\n                    seconds = 0;\n                }\n\n                var timeSpentText = '';\n\n                if (hours > 0) {\n                    timeSpentText += (hours + ':');\n                }\n\n                if (hours > 0) {\n                    // there are hours\n\n                    if (minutes == 0) {\n                        // fill with zeroes\n                        timeSpentText += '00:';\n                    } else if (minutes > 0 && minutes < 10) {\n                        // add a leading zero\n                        timeSpentText += '0' + minutes + ':';\n                    } else {\n                        timeSpentText += minutes + ':';\n                    }\n                } else {\n                    // there are no hours\n\n                    timeSpentText += minutes + ':';\n                }\n\n                if (seconds == 0) {\n                    // fill with zeroes\n                    timeSpentText += '00';\n                } else if (seconds > 0 && seconds < 10) {\n                    // add a leading zero\n                    timeSpentText += ('0' + seconds);\n                } else {\n                    timeSpentText += seconds;\n                }\n\n                // update the mapping of workgroup id to time spent\n                this.studentTimeSpent[workgroupId] = timeSpentText;\n            }\n        }\n    }\n\n    /**\n     * Sort the workgroups. Place the online workgroups sorted alphabetically at\n     * the top and the offline workgroups sorted alphabetically at the bottom.\n     * @returns a list of workgroup objects with the online workgroups first\n     * and the offline workgroups after\n     */\n    sortWorkgroupsByOnline() {\n\n        var workgroupsOnline = [];\n        var workgroupsOffline = [];\n\n        // get the workgroups sorted alphabetically\n        var workgroups = this.ConfigService.getClassmateUserInfos();\n\n        // loop through all the workgroups\n        for (var x = 0; x < workgroups.length; x++) {\n            var workgroup = workgroups[x];\n\n            if (workgroup != null) {\n                if (this.isWorkgroupOnline(workgroup.workgroupId)) {\n                    // the workroup is online\n                    workgroupsOnline.push(workgroup);\n                } else {\n                    // the workgroup is offline\n                    workgroupsOffline.push(workgroup);\n                }\n            }\n        }\n\n        // join the workgroup arrays together\n        var workgroupsSorted = workgroupsOnline.concat(workgroupsOffline);\n\n        return workgroupsSorted;\n    }\n}\n\nStudentProgressController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$state',\n    'ConfigService',\n    'ProjectService',\n    'StudentStatusService',\n    'TeacherDataService',\n    'TeacherWebSocketService'\n];\n\nexport default StudentProgressController;\n"]}