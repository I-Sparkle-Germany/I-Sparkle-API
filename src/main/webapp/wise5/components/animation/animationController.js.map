{"version":3,"sources":["animationController.es6"],"names":["AnimationController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnimationService","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","attachments","onlyShowWork","latestAnnotations","messageDialog","idToSVGObject","originalComponentContent","width","height","pixelsPerXUnit","pixelsPerYUnit","dataXOriginInPixels","dataYOriginInPixels","animationState","coordinateSystem","idToAnimationState","realTimePerDataTime","speedSliderValue","componentState","svgId","nodeId","componentId","initializeCoordinates","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","workgroupId","id","isDisabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","angular","bind","setup","isDirty","animationController","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","updateObjectDatasFromDataSources","script","retrieveScript","Function","call","$broadcast","submit","widthInPixels","widthInUnits","heightInPixels","heightInUnits","draw","SVG","createObjects","objects","o","length","object","label","svgObject","image","text","initializeObjectPosition","load","x","pixelX","y","pixelY","data","dataX","dataY","dataXToPixelX","dataYToPixelY","isUsingCartesianCoordinateSystem","convertToCartesianCoordinateSystem","attr","firstDataPoint","firstDataPointT","t","firstDataPointX","firstDataPointY","firstDataPointXInPixels","firstDataPointYInPixels","initializeObjectImages","initializeObjectPositions","animateObject","timerText","fill","dataSource","updateObjectDataFromDataSource","getLatestComponentStateByNodeIdAndComponentId","setDataFromGraphComponentState","setDataFromTableComponentState","trialIndex","seriesIndex","tColumnIndex","xColumnIndex","yColumnIndex","studentData","trials","trial","series","singleSeries","seriesData","d","seriesDataPoint","animationDataPoint","push","thisAnimationController","currentDataPoint","xPixel","yPixel","nextDataPoint","nextT","nextX","nextY","nextXPixel","nextYPixel","tDiff","animate","during","pos","morph","eased","situation","elapsedTime","displayAndBroadcastTime","after","dynamicallyCalculatedImage","getImageBasedOnMovement","move","afterAll","checkIfAllAnimatingIsDone","currentTime","Date","getTime","lastBroadcastTime","displayTime","parseInt","showTime","$emit","currentX","currentY","imageMovingRight","imageMovingLeft","imageMovingUp","imageMovingDown","areAnyObjectsAnimating","$digest","response","processLatestSubmit","latestState","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","$translate","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","createNewComponentState","copy","createComponentStateAdditionalProcessing","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotation","createAutoScoreAnnotation","createAutoCommentAnnotation","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","numRows","numColumns","result","isCRaterEnabled","isCRaterScoreOnSave","isCRaterScoreOnSubmit","isCRaterScoreOnChange","isCRaterScoreOnExit","exitListener","getComponentStatesByNodeIdAndComponentId","startAnimation","pause","play","jumpToEnd","clearQueue","stop","resetButtonClicked","keys","Object","k","key","remove","getComponentByNodeIdAndComponentId","componentStates","mergedComponentState","mergedResponse","c","$inject"],"mappings":"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","file":"animationController.js","sourcesContent":["'use strict';\n\nimport ComponentController from '../componentController';\nimport 'svg.js';\n\nclass AnimationController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnimationService,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.AnimationService = AnimationService;\n    this.CRaterService = CRaterService;\n    this.NotificationService = NotificationService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether we're only showing the student work\n    // TODO: refactor. do we need this?\n    this.onlyShowWork = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // mapping from object id to svg object\n    this.idToSVGObject = {};\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the default width and height\n    this.width = 800;\n    this.height = 600;\n\n    // the default pixels per unit\n    this.pixelsPerXUnit = 1;\n    this.pixelsPerYUnit = 1;\n\n    // the default data origin in pixels\n    this.dataXOriginInPixels = 0;\n    this.dataYOriginInPixels = 0;\n\n    // the current state of the animation ('playing', 'paused', or 'stopped')\n    this.animationState = 'stopped';\n\n    // the coordinate system to use ('screen' or 'cartesian')\n    this.coordinateSystem = 'screen';\n\n    // mapping from id to whether the object is animating\n    this.idToAnimationState = {};\n\n    /*\n     * milliseconds per data time\n     * example\n     * The data time can be labelled with any unit of time such as seconds,\n     * minutes, hours, days, years, etc.\n     * If realTimePerDataTime is 100, that means for 1 data time, 100\n     * milliseconds will pass in real time.\n     */\n    this.realTimePerDataTime = 100;\n\n    // the speed slider value\n    this.speedSliderValue = 3;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    // get the svg id\n    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n\n    // initialize all the coordinates\n    this.initializeCoordinates();\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading') {\n\n      // get the svg id\n      if (componentState != null) {\n        this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n      } else {\n\n        this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n      }\n\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'onlyShowWork') {\n      this.onlyShowWork = true;\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'authoring') {\n\n    }\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.AnimationService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /*\n     * Call the setup() function after a timeout so that angular has a\n     * chance to set the svg element id before we start using it. If we\n     * don't wait for the timeout, the svg id won't be set when we try\n     * to start referencing the svg element.\n     */\n    this.$timeout(angular.bind(this, this.setup));\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.animationController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.animationController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.animationController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.animationController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = (connectedComponent, connectedComponentParams, componentState) => {\n\n      if (connectedComponent != null && componentState != null) {\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        if (componentType === 'Graph') {\n\n          // update the object datas\n          this.updateObjectDatasFromDataSources(componentState);\n        }\n      }\n    };\n\n    // load script for this component, if any\n    let script = this.componentContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Initialize the coordinates of the svg div\n   */\n  initializeCoordinates() {\n\n    if (this.componentContent.widthInPixels != null && this.componentContent.widthInPixels != '') {\n      // get the width of the canvas in pixels\n      this.width = this.componentContent.widthInPixels;\n\n      // get the ratio of pixels per x unit\n      this.pixelsPerXUnit = this.componentContent.widthInPixels / this.componentContent.widthInUnits;\n    }\n\n    if (this.componentContent.heightInPixels != null && this.componentContent.heightInPixels != '') {\n      // get the height of the canvas in pixels\n      this.height = this.componentContent.heightInPixels;\n\n      // get the ratio of pixels per y unit\n      this.pixelsPerYUnit = this.componentContent.heightInPixels / this.componentContent.heightInUnits;\n    }\n\n    if (this.componentContent.dataXOriginInPixels != null && this.componentContent.dataXOriginInPixels != '') {\n      // get the data x origin in pixels\n      this.dataXOriginInPixels = this.componentContent.dataXOriginInPixels;\n    }\n\n    if (this.componentContent.dataYOriginInPixels != null && this.componentContent.dataYOriginInPixels != '') {\n      // get the data y origin in pixels\n      this.dataYOriginInPixels = this.componentContent.dataYOriginInPixels;\n    }\n\n    if (this.componentContent.coordinateSystem != null && this.componentContent.coordinateSystem != '') {\n      // get the coordinate system\n      this.coordinateSystem = this.componentContent.coordinateSystem;\n    }\n  }\n\n  /**\n   * Setup the objects\n   */\n  setup() {\n    // get the svg.js draw handle\n    this.draw = SVG(this.svgId);\n\n    // create the objects\n    this.createObjects();\n\n    // if an object uses data from another data source, update its data\n    this.updateObjectDatasFromDataSources();\n  }\n\n  /**\n   * Create the objects in the svg world\n   */\n  createObjects() {\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n            let type = object.type;\n            let label = object.label;\n\n            let svgObject = null;\n\n            if (type == 'image') {\n              // get the image file name\n              let image = object.image;\n\n              // get the width and the height\n              let width = object.width;\n              let height = object.height;\n\n              // create the image in the svg world\n              svgObject = this.draw.image(image, width, height);\n            } else if (type == 'text') {\n\n              /*\n               * if the text field is null, change it to an empty\n               * string otherwise this.draw.text(null) will return\n               * an empty string and cause problems later\n               */\n              if (object.text == null) {\n                object.text = '';\n              }\n\n              // get the text\n              let text = object.text;\n\n              // create the text object in the svg world\n              svgObject = this.draw.text(text);\n            }\n\n            // add an entry in our id to svg object mapping\n            this.idToSVGObject[id] = svgObject;\n\n            // add an entry in our id to animation state mapping\n            this.idToAnimationState[id] = false;\n\n            // initialize the svg object position\n            this.initializeObjectPosition(object);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the object images\n   */\n  initializeObjectImages() {\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          let id = object.id;\n          let type = object.type;\n\n          // get the image file name\n          let image = object.image;\n\n          if (type == 'image') {\n            // the object is an image\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            // load the image into the svg object\n            svgObject.load(image);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the object positions\n   */\n  initializeObjectPositions() {\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          // initialize the object position\n          this.initializeObjectPosition(object);\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert a data x value to a pixel x value\n   * @param x an x value in data units\n   * @return the x value converted to a pixel coordinate\n   */\n  dataXToPixelX(x) {\n\n    // default the pixel x to start at the data x origin\n    let pixelX = this.dataXOriginInPixels;\n\n    if (x != null) {\n\n      // convert the x value to pixels and shift it by the x origin\n      pixelX += x * this.pixelsPerXUnit;\n    }\n\n    return pixelX;\n  }\n\n  /**\n   * Convert a data y value to a pixel y value\n   * @param y an y value in data units\n   * @return the y value converted to a pixel coordinate\n   */\n  dataYToPixelY(y) {\n\n    // default the pixel y to start at the data y origin\n    let pixelY = this.dataYOriginInPixels;\n\n    if (y != null) {\n      // convert the y value to pixels and shift it by the y origin\n      pixelY += y * this.pixelsPerYUnit;\n    }\n\n    return pixelY;\n  }\n\n  /**\n   * Initialize the object position in the svg world\n   * @param object the authored object\n   */\n  initializeObjectPosition(object) {\n    let id = object.id;\n    let label = object.label;\n    let data = object.data;\n    let dataX = object.dataX;\n    let dataY = object.dataY;\n    let pixelX = object.pixelX;\n    let pixelY = object.pixelY;\n\n    let x = 0;\n    let y = 0;\n\n    if (dataX != null) {\n      // the dataX position was provided\n\n      // convert the data x value to a pixel x value\n      x = this.dataXToPixelX(dataX);\n    } else if (pixelX != null) {\n      // the pixelX position was provided\n      x = pixelX;\n    }\n\n    if (dataY != null) {\n      // the dataY position was provided\n\n      // convert the data y value to a pixel y value\n      y = this.dataYToPixelY(dataY);\n    } else if (pixelY != null) {\n      // the pixelY position was provided\n      y = pixelY;\n    }\n\n    if (this.isUsingCartesianCoordinateSystem()) {\n      /*\n       * we are using the cartesian coordinate system so we need to modify\n       * the y value\n       */\n      y = this.convertToCartesianCoordinateSystem(y);\n    }\n\n    // get the svg object\n    let svgObject = this.idToSVGObject[id];\n\n    if (svgObject != null) {\n\n      // set the x and y pixel position\n      svgObject.attr({ x: x, y: y });\n\n      if (data != null && data.length > 0) {\n        // there is data for this object\n\n        // get the first data point\n        var firstDataPoint = data[0];\n\n        if (firstDataPoint != null) {\n\n          let firstDataPointT = firstDataPoint.t;\n          let firstDataPointX = firstDataPoint.x;\n          let firstDataPointY = firstDataPoint.y;\n\n          if (firstDataPointT === 0) {\n            /*\n             * there is a first data point with t == 0 so we will\n             * use it as the starting position\n             */\n\n            if (firstDataPointX != null && firstDataPointX != '' && typeof firstDataPointX != 'undefined') {\n              // convert the data x value to a pixel x value\n              let firstDataPointXInPixels = this.dataXToPixelX(firstDataPointX);\n              svgObject.attr('x', firstDataPointXInPixels);\n            }\n\n            if (firstDataPointY != null && firstDataPointY != '' && typeof firstDataPointY != 'undefined') {\n              // convert the data y value to a pixel y value\n              let firstDataPointYInPixels = this.dataYToPixelY(firstDataPointY);\n\n              if (this.isUsingCartesianCoordinateSystem()) {\n                /*\n                 * we are using the cartesian coordinate system so we need to modify\n                 * the y value\n                 */\n                firstDataPointYInPixels = this.convertToCartesianCoordinateSystem(firstDataPointYInPixels);\n              }\n\n              svgObject.attr('y', firstDataPointYInPixels);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Start the animation\n   */\n  startAnimation() {\n\n    // set the images back to their starting images in case they have changed\n    this.initializeObjectImages();\n\n    // put the objects in their starting positions\n    this.initializeObjectPositions();\n\n    if (this.componentContent != null) {\n\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n\n            // animate the object\n            this.animateObject(object);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the time on the svg div\n   * @param t the time\n   */\n  showTime(t) {\n\n    if (this.timerText == null) {\n      // initialize the timer text\n      this.timerText = this.draw.text('0').attr({ fill: '#f03' });\n    }\n\n    // get the width of the svg div\n    let width = this.width;\n\n    // set the x position near the top right of the svg div\n    let x = width - 30;\n    let y = 0;\n\n    // set the text that the student will see\n    this.timerText.text(t + '');\n\n    if (t >= 10) {\n      // shift the text to the left if there are two digits\n      x = width - 38;\n    } else if (t >= 100) {\n      // shift the text to the left more if there are three digits\n      x = width - 46;\n    }\n\n    // set the position of the text\n    this.timerText.attr({ x: x, y: y });\n  }\n\n  /**\n   * Update the object data from their data source\n   * @param componentState (optional) a component state which may be the\n   * data source for one of the objects\n   */\n  updateObjectDatasFromDataSources(componentState) {\n\n    if (this.componentContent != null) {\n\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n\n            if (object.dataSource != null) {\n              // the object gets its data from a data source\n              this.updateObjectDataFromDataSource(object, componentState);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the data from its data source\n   * @param object update the data for this object\n   * @param componentState (optional) The component state to get the data\n   * from. If this is not provided, we will look up the latest component\n   * state.\n   */\n  updateObjectDataFromDataSource(object, componentState) {\n\n    if (object != null) {\n\n      // get the data source details\n      let dataSource = object.dataSource;\n\n      if (dataSource != null) {\n        let nodeId = dataSource.nodeId;\n        let componentId = dataSource.componentId;\n\n        if (componentState == null) {\n          // the component state was not passed in so we will get it\n          componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n          // the component state matches the data source\n\n          if (componentState.componentType == 'Graph') {\n            this.setDataFromGraphComponentState(object, componentState);\n          } else if (componentState.componentType == 'Table') {\n            this.setDataFromTableComponentState(object, componentState);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the data from the graph component state\n   * @param object set the data into this object\n   * @param componentState\n   */\n  setDataFromGraphComponentState(object, componentState) {\n    if (object != null) {\n\n      // get the data source specification\n      let dataSource = object.dataSource;\n\n      if (dataSource != null) {\n        let nodeId = dataSource.nodeId;\n        let componentId = dataSource.componentId;\n        let trialIndex = dataSource.trialIndex;\n        let seriesIndex = dataSource.seriesIndex;\n        let tColumnIndex = dataSource.tColumnIndex;\n        let xColumnIndex = dataSource.xColumnIndex;\n        let yColumnIndex = dataSource.yColumnIndex;\n\n        if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n          // the component state matches the data source\n\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n            let trials = studentData.trials;\n\n            if (trials != null) {\n\n              // get the trial we ant\n              let trial = trials[trialIndex];\n\n              if (trial != null) {\n                let series = trial.series;\n\n                if (series != null) {\n\n                  // get the series we want\n                  let singleSeries = series[seriesIndex];\n\n                  if (singleSeries != null) {\n                    let seriesData = singleSeries.data;\n\n                    if (seriesData != null) {\n\n                      // array to store our animation data\n                      let data = [];\n\n                      // loop through all the points in the series\n                      for (let d = 0; d < seriesData.length; d++) {\n                        let seriesDataPoint = seriesData[d];\n\n                        // create a data point\n                        let animationDataPoint = {};\n\n                        if (tColumnIndex != null) {\n                          // get the t value\n                          animationDataPoint.t = seriesDataPoint[tColumnIndex];\n                        }\n\n                        if (xColumnIndex != null) {\n                          // get the x value\n                          animationDataPoint.x = seriesDataPoint[xColumnIndex];\n                        }\n\n                        if (yColumnIndex != null) {\n                          // get the y value\n                          animationDataPoint.y = seriesDataPoint[yColumnIndex];\n                        }\n\n                        // add the data point to the array\n                        data.push(animationDataPoint);\n                      }\n\n                      // set the data into the object\n                      object.data = data;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  setDataFromTableComponentState() {\n\n  }\n\n  /**\n   * Move the object\n   * @param object the authored object\n   */\n  animateObject(object) {\n\n    if (object != null) {\n      let id = object.id;\n      let data = object.data;\n\n      if (data != null) {\n\n        // get the svg object\n        let svgObject = this.idToSVGObject[id];\n\n        if (svgObject != null) {\n\n          /*\n           * this will hold SVG.FX object that is returned from\n           * calling animate()\n           */\n          let animateObject = null;\n\n          let thisAnimationController = this;\n\n          // loop through all the data\n          for (let d = 0; d < data.length; d++) {\n\n            // get the current point\n            let currentDataPoint = data[d];\n            let t = currentDataPoint.t;\n            let x = currentDataPoint.x;\n            let y = currentDataPoint.y;\n            let image = currentDataPoint.image;\n\n            // convert the data values to pixels\n            let xPixel = this.dataXToPixelX(x);\n            let yPixel = this.dataYToPixelY(y);\n\n            // get the next point\n            let nextDataPoint = data[d + 1];\n            let nextT = null;\n            let nextX = null;\n            let nextY = null;\n            let nextXPixel = null;\n            let nextYPixel = null;\n\n            if (nextDataPoint != null) {\n              nextT = nextDataPoint.t;\n              nextX = nextDataPoint.x;\n              nextY = nextDataPoint.y;\n\n              // convert the data values to pixels\n              nextXPixel = this.dataXToPixelX(nextX);\n              nextYPixel = this.dataYToPixelY(nextY);\n            }\n\n            if (this.isUsingCartesianCoordinateSystem()) {\n              /*\n               * we are using the cartesian coordinate system so we need to modify\n               * the y value\n               */\n              yPixel = this.convertToCartesianCoordinateSystem(yPixel);\n              nextYPixel = this.convertToCartesianCoordinateSystem(nextYPixel);\n            }\n\n            // set the animation state to true for the object\n            this.idToAnimationState[id] = true;\n\n            let tDiff = 0;\n\n            if (nextT != null && nextT != '') {\n              /*\n               * calculate the time difference so we know how long we should make\n               * it take to move to the new position\n               */\n              tDiff = nextT - t;\n            }\n\n            if (d == 0) {\n              // this is the first data point\n\n              if (t == 0) {\n                /*\n                 * immediately set the position since we are at\n                 * time 0\n                 */\n\n                // set the position\n                svgObject.attr({ x: xPixel, y: yPixel });\n              } else {\n                /*\n                 * the first data point is not at time 0 so we will\n                 * need to wait until time t before we set the\n                 * position of the object\n                 */\n                animateObject = svgObject.animate(t * this.realTimePerDataTime).during(function(pos, morph, eased, situation) {\n\n                  // calculate the amount of time that has elapsed\n                  let elapsedTime = t * pos;\n\n                  // display and broadcast the elapsed time\n                  thisAnimationController.displayAndBroadcastTime(elapsedTime);\n                }).after(function() {\n                  // set the position\n                  this.attr({ x: xPixel, y: yPixel });\n                });\n              }\n            }\n\n            if (image != null && image != '') {\n              /*\n               * there is an image specified for this data point\n               * so we will change to that image\n               */\n\n              if (animateObject == null) {\n                /*\n                 * there is no animateObject yet so we will\n                 * change the image immediately\n                 */\n                svgObject.load(image);\n              } else {\n                /*\n                 * change the image after all the existing\n                 * animations\n                 */\n                animateObject = animateObject.after(function() {\n                  this.load(image);\n                });\n              }\n            } else if (nextDataPoint != null) {\n              /*\n               * there is a next data point so we will see if we\n               * can determine what image to show based upon the\n               * movement of the object\n               */\n\n              // get the image to show based upon the movement\n              let dynamicallyCalculatedImage = this.getImageBasedOnMovement(object, currentDataPoint, nextDataPoint);\n\n              if (dynamicallyCalculatedImage != null) {\n                if (animateObject == null) {\n                  /*\n                   * there is no animateObject yet so we will\n                   * change the image immediately\n                   */\n                  svgObject.load(dynamicallyCalculatedImage);\n                } else {\n                  /*\n                   * change the image after all the existing\n                   * animations\n                   */\n                  animateObject = animateObject.after(function() {\n                    this.load(dynamicallyCalculatedImage);\n                  });\n                }\n              }\n            }\n\n            if (d != data.length - 1) {\n              // this is a data point that is not the last\n\n              // move the image to the next position\n              animateObject = svgObject.animate(tDiff * this.realTimePerDataTime).move(nextXPixel, nextYPixel).during(function(pos, morph, eased, situation) {\n\n                // calculate the elapsed time\n                let elapsedTime = t + (tDiff * pos);\n\n                // display and broadcast the elapsed time\n                thisAnimationController.displayAndBroadcastTime(elapsedTime);\n              });\n            }\n\n            if (d == data.length - 1) {\n              // this is the last data point\n\n              // after all the animations are done on the object we will perform some processing\n              animateObject = animateObject.afterAll(() => {\n\n                /*\n                 * we are done animating this object so we will\n                 * set the animation state to false for the\n                 * object\n                 */\n                this.idToAnimationState[id] = false;\n\n                // check if all svg objects are done animating\n                this.checkIfAllAnimatingIsDone();\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Display and broadcast the time\n   * @param t the time\n   */\n  displayAndBroadcastTime(t) {\n\n    let currentTime = new Date().getTime();\n\n    if (this.lastBroadcastTime == null) {\n      this.lastBroadcastTime = currentTime;\n    }\n\n    if (currentTime - this.lastBroadcastTime > 100) {\n      /*\n       * Remove the digits after the first decimal place.\n       * example\n       * 12.817 will be changed to 12.8\n       */\n      let displayTime = parseInt(t * 10) / 10;\n\n      // show the time on the svg div\n      this.showTime(displayTime);\n\n      // create a component state with the time in it\n      let componentState = {};\n      componentState.t = t;\n\n      /*\n       * broadcast the component state with the time in it\n       * so other components can know the elapsed time\n       */\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n\n      this.lastBroadcastTime = currentTime;\n    }\n  }\n\n  /**\n   * Get the image based upon the movement of the object\n   * @param object the object that is being moved\n   * @param currentDataPoint the current data point\n   * @param nextDataPoint the next data point\n   */\n  getImageBasedOnMovement(object, currentDataPoint, nextDataPoint) {\n\n    let image = null;\n\n    if (currentDataPoint != null && nextDataPoint != null) {\n\n      let currentX = currentDataPoint.x;\n      let currentY = currentDataPoint.y;\n\n      let nextX = nextDataPoint.x;\n      let nextY = nextDataPoint.y;\n\n      if (currentY == nextY) {\n        // there is no change in y\n\n        if (currentX == nextX) {\n          // there is no change in x\n\n          // the image is staying in place\n        } else if (currentX < nextX) {\n          // x is moving to the right\n          if (object.imageMovingRight != null && object.imageMovingRight != '') {\n            image = object.imageMovingRight;\n          }\n        } else if (currentX > nextX) {\n          // x is moving to the left\n          if (object.imageMovingLeft != null && object.imageMovingLeft != '') {\n            image = object.imageMovingLeft;\n          }\n        }\n      } else if (currentX == nextX) {\n        // there is no change in x\n\n        if (currentY == nextY) {\n          // there is no change in y\n\n          // the image is staying in place\n        } else if (currentY < nextY) {\n          // y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // y is moving up\n            if (object.imageMovingUp != null && object.imageMovingUp != '') {\n              image = object.imageMovingUp;\n            }\n          } else {\n            // y is moving down\n            if (object.imageMovingDown != null && object.imageMovingDown != '') {\n              image = object.imageMovingDown;\n            }\n          }\n        } else if (currentY > nextY) {\n          // y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // y is moving down\n            if (object.imageMovingDown != null && object.imageMovingDown != '') {\n              image = object.imageMovingDown;\n            }\n          } else {\n            // y is moving up\n            if (object.imageMovingUp != null && object.imageMovingUp != '') {\n              image = object.imageMovingUp;\n            }\n          }\n        }\n      } else {\n        // there is a change in x and y\n\n        // TODO: fill out these if/else cases by setting the appropriate image\n\n        if (currentX < nextX && currentY < nextY) {\n          // x is getting larger and y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving up to the right\n          } else {\n            // the image is moving down to the right\n          }\n        } else if (currentX < nextX && currentY > nextY) {\n          // x is getting larger and y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving down to the right\n          } else {\n            // the image is moving up to the right\n          }\n        } else if (currentX > nextX && currentY > nextY) {\n          // x is getting smaller and y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving down to the left\n          } else {\n            // the image is moving up to the left\n          }\n        } else if (currentX > nextX && currentY < nextY) {\n          // x is getting smaller and y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving up to the right\n          } else {\n            // the image is moving down to the right\n          }\n        }\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Check if all svg objects are done animating. If there are not svg objects\n   * animating, we will set the animationState to 'stopped'.\n   */\n  checkIfAllAnimatingIsDone() {\n\n    // check if there are any other objects that are still animating\n    if (!this.areAnyObjectsAnimating()) {\n      // there are no objects animating\n\n      // set the animation state to 'stopped'\n      this.animationState = 'stopped';\n\n      // perform a digest after a timeout so that the buttons update\n      this.$timeout(() => {\n        this.$scope.$digest();\n      });\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var response = studentData.response;\n\n        if (response != null) {\n          // populate the text the student previously typed\n          this.studentResponse = response;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('animation.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('animation.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('animation.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.setSaveMessage('', null);\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  // TODO: remove attachments. not used in this component\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  // TODO: remove CRater\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n    });\n  };\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions() {\n    // get the component states for this component\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  };\n\n  /**\n   * The play button was clicked\n   */\n  playButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'playing';\n\n    // start the animation\n    this.startAnimation();\n  }\n\n  /**\n   * The pause button was clicked\n   */\n  pauseButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'paused';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n\n              // pause the object from animating\n              svgObject.pause();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The resume button was clicked\n   */\n  resumeButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'playing';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n              /*\n               * Check if the object still needs to be animated or\n               * if it has already finished performing all of its\n               * animation. We only need to play it if it still\n               * has more animating.\n               */\n              if (this.idToAnimationState[id]) {\n                // resume playing the object animation\n                svgObject.play();\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The reset button was clicked\n   */\n  resetButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'stopped';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n\n              let jumpToEnd = true;\n              let clearQueue = true;\n\n              /*\n               * Check if the object still needs to be animated or\n               * if it has already finished performing all of its\n               * animation. We only need to play it if it still\n               * has more animating.\n               */\n              if (this.idToAnimationState[id]) {\n                /*\n                 * We need to play it in case it is currently paused.\n                 * There is a minor bug in the animation library\n                 * which is caused if you pause an animation and\n                 * then stop the animation. Then if you try to play the\n                 * animation, the animation will not play. We avoid\n                 * this problem by making sure the object animation\n                 * is playing when we stop it.\n                 */\n                svgObject.play();\n              }\n\n              // stop the object from animating\n              svgObject.stop(jumpToEnd, clearQueue);\n            }\n          }\n        }\n      }\n    }\n\n    this.$timeout(() => {\n      // set the display time to 0\n      this.displayAndBroadcastTime(0);\n\n      // set the images back to their starting images in case they have changed\n      this.initializeObjectImages();\n\n      // put the objects in their starting positions\n      this.initializeObjectPositions();\n    }, 100);\n  }\n\n  /**\n   * Check if any of the objects are animating\n   * @return whether any of the objects are animating\n   */\n  areAnyObjectsAnimating() {\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            /*\n             * check if the object still needs to be animated or if\n             * it has already finished performing all of its\n             * animating\n             */\n            if (this.idToAnimationState[id]) {\n              // an object is animating\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Whether we are using the cartesian coordinate system\n   * @return whether we are using the cartesian coordinate system\n   */\n  isUsingCartesianCoordinateSystem() {\n\n    if (this.coordinateSystem == 'cartesian') {\n      // we are using the cartesian coordinate system\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Convert the y value to the cartesian coordinate system\n   * @param y the pixel y value in the screen coordinate system\n   * @return the pixel y value in the cartesian coordinate system\n   */\n  convertToCartesianCoordinateSystem(y) {\n    return this.height - y;\n  }\n\n  /**\n   * The student changed the speed slider value\n   */\n  speedSliderChanged() {\n\n    if (this.speedSliderValue == 1) {\n      this.realTimePerDataTime = 10000;\n    } else if (this.speedSliderValue == 2) {\n      this.realTimePerDataTime = 1000;\n    } else if (this.speedSliderValue == 3) {\n      this.realTimePerDataTime = 100;\n    } else if (this.speedSliderValue == 4) {\n      this.realTimePerDataTime = 10;\n    } else if (this.speedSliderValue == 5) {\n      this.realTimePerDataTime = 1;\n    }\n\n    // reset the animation\n    this.resetButtonClicked();\n  }\n\n  /**\n   * Remove all the objects from the svg div\n   */\n  removeAllObjects() {\n\n    if (this.idToSVGObject != null) {\n\n      // get all the object ids\n      var keys = Object.keys(this.idToSVGObject);\n\n      if (keys != null) {\n\n        // loop through all the keys\n        for (var k = 0; k < keys.length; k++) {\n          var key = keys[k];\n\n          // get the svg object\n          var svgObject = this.idToSVGObject[key];\n\n          if (svgObject != null) {\n            // remove the svg object from the svg div\n            svgObject.remove();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   */\n  getComponentByNodeIdAndComponentId(nodeId, componentId) {\n    return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n  }\n\n  /**\n   * Create a component state with the merged student data\n   * @param componentStates an array of component states\n   * @return a component state with the merged student data\n   */\n  createMergedComponentState(componentStates) {\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedResponse = '';\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n\n          }\n        }\n      }\n      if (mergedResponse != null && mergedResponse != '') {\n        mergedComponentState.studentData = {};\n      }\n    }\n    return mergedComponentState;\n  }\n};\n\nAnimationController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnimationService',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AnimationController;\n"]}