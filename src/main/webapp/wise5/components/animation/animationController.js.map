{"version":3,"sources":["animationController.es6"],"names":["AnimationController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnimationService","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","onlyShowWork","latestAnnotations","messageDialog","submitCounter","showAdvancedAuthoring","showJSONAuthoring","idToSVGObject","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","width","height","pixelsPerXUnit","pixelsPerYUnit","dataXOriginInPixels","dataYOriginInPixels","animationState","coordinateSystem","idToAnimationState","realTimePerDataTime","speedSliderValue","componentState","svgId","initializeCoordinates","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","starterSentence","removeAllObjects","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","angular","animationController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","targetObject","image","imageMovingLeft","imageMovingRight","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","authoringViewComponentChanged","hide","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","updateObjectDatasFromDataSources","script","retrieveScript","Function","call","widthInPixels","widthInUnits","heightInPixels","heightInUnits","draw","SVG","createObjects","objects","o","length","object","label","svgObject","initializeObjectPosition","load","x","pixelX","y","pixelY","data","dataX","dataY","dataXToPixelX","dataYToPixelY","isUsingCartesianCoordinateSystem","convertToCartesianCoordinateSystem","attr","firstDataPoint","firstDataPointT","t","firstDataPointX","firstDataPointY","firstDataPointXInPixels","firstDataPointYInPixels","initializeObjectImages","initializeObjectPositions","animateObject","timerText","fill","dataSource","updateObjectDataFromDataSource","getLatestComponentStateByNodeIdAndComponentId","setDataFromGraphComponentState","setDataFromTableComponentState","trialIndex","seriesIndex","tColumnIndex","xColumnIndex","yColumnIndex","studentData","trials","trial","series","singleSeries","seriesData","d","seriesDataPoint","animationDataPoint","push","thisAnimationController","currentDataPoint","xPixel","yPixel","nextDataPoint","nextT","nextX","nextY","nextXPixel","nextYPixel","tDiff","animate","during","pos","morph","eased","situation","elapsedTime","displayAndBroadcastTime","after","dynamicallyCalculatedImage","getImageBasedOnMovement","move","afterAll","checkIfAllAnimatingIsDone","displayTime","parseInt","showTime","currentX","currentY","imageMovingUp","imageMovingDown","areAnyObjectsAnimating","$digest","response","processLatestSubmit","latestState","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","annotations","score","concepts","previousScore","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","setShowSubmitButtonValue","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","startAnimation","pause","play","jumpToEnd","clearQueue","stop","keys","Object","k","key","remove","newObject","generateKey","newDataPoint","dataPoint","popup","$broadcast","$inject"],"mappings":"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","file":"animationController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\n\nclass AnimationController {\n\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnimationService,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnimationService = AnimationService;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // whether we're only showing the student work\n        this.onlyShowWork = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // mapping from object id to svg object\n        this.idToSVGObject = {};\n\n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        // the default width and height\n        this.width = 800;\n        this.height = 600;\n\n        // the default pixels per unit\n        this.pixelsPerXUnit = 1;\n        this.pixelsPerYUnit = 1;\n\n        // the default data origin in pixels\n        this.dataXOriginInPixels = 0;\n        this.dataYOriginInPixels = 0;\n\n        // the current state of the animation ('playing', 'paused', or 'stopped')\n        this.animationState = 'stopped';\n\n        // the coordinate system to use ('screen' or 'cartesian')\n        this.coordinateSystem = 'screen';\n\n        // mapping from id to whether the object is animating\n        this.idToAnimationState = {};\n\n        /*\n         * milliseconds per data time\n         * example\n         * The data time can be labelled with any unit of time such as seconds,\n         * minutes, hours, days, years, etc.\n         * If realTimePerDataTime is 100, that means for 1 data time, 100\n         * milliseconds will pass in real time.\n         */\n        this.realTimePerDataTime = 100;\n\n        // the speed slider value\n        this.speedSliderValue = 3;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the svg id\n            this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n\n            // initialize all the coordinates\n            this.initializeCoordinates();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n\n                // get the svg id\n                if (componentState != null) {\n                    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n                } else {\n\n                    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n                }\n\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.onlyShowWork = true;\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    // inject the asset paths into the new component content\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * reset the values so that the preview is refreshed with\n                     * the new content\n                     */\n                    this.submitCounter = 0;\n                    this.studentResponse = '';\n                    this.latestAnnotations = null;\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                    if (this.componentContent.starterSentence != null) {\n                        /*\n                         * the student has not done any work and there is a starter sentence\n                         * so we will populate the textarea with the starter sentence\n                         */\n                        this.studentResponse = this.componentContent.starterSentence;\n                    }\n\n                    // remove all the old objects\n                    this.removeAllObjects();\n\n                    // initialize all the coordinates\n                    this.initializeCoordinates();\n\n                    // re-render the svg div\n                    this.setup();\n                }.bind(this), true);\n            }\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /*\n         * Call the setup() function after a timeout so that angular has a\n         * chance to set the svg element id before we start using it. If we\n         * don't wait for the timeout, the svg id won't be set when we try\n         * to start referencing the svg element.\n         */\n        this.$timeout(angular.bind(this, this.setup));\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.animationController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.animationController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.animationController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.animationController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'image') {\n                                // the target is the image\n                                if (args.targetObject != null) {\n                                    args.targetObject.image = fileName;\n                                }\n                            } else if (args.target == 'imageMovingLeft') {\n                                // the target is the image moving left\n                                if (args.targetObject != null) {\n                                    args.targetObject.imageMovingLeft = fileName;\n                                }\n                            } else if (args.target == 'imageMovingRight') {\n                                // the target is the image moving right\n                                if (args.targetObject != null) {\n                                    args.targetObject.imageMovingRight = fileName;\n                                }\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = (connectedComponent, connectedComponentParams, componentState) => {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Graph') {\n\n                    // update the object datas\n                    this.updateObjectDatasFromDataSources(componentState);\n                }\n            }\n        };\n\n        // load script for this component, if any\n        let script = this.componentContent.script;\n        if (script != null) {\n            this.ProjectService.retrieveScript(script).then((script) => {\n                new Function(script).call(this);\n            });\n        }\n    }\n\n    /**\n     * Initialize the coordinates of the svg div\n     */\n    initializeCoordinates() {\n\n        if (this.componentContent.widthInPixels != null && this.componentContent.widthInPixels != '') {\n            // get the width of the canvas in pixels\n            this.width = this.componentContent.widthInPixels;\n\n            // get the ratio of pixels per x unit\n            this.pixelsPerXUnit = this.componentContent.widthInPixels / this.componentContent.widthInUnits;\n        }\n\n        if (this.componentContent.heightInPixels != null && this.componentContent.heightInPixels != '') {\n            // get the height of the canvas in pixels\n            this.height = this.componentContent.heightInPixels;\n\n            // get the ratio of pixels per y unit\n            this.pixelsPerYUnit = this.componentContent.heightInPixels / this.componentContent.heightInUnits;\n        }\n\n        if (this.componentContent.dataXOriginInPixels != null && this.componentContent.dataXOriginInPixels != '') {\n            // get the data x origin in pixels\n            this.dataXOriginInPixels = this.componentContent.dataXOriginInPixels;\n        }\n\n        if (this.componentContent.dataYOriginInPixels != null && this.componentContent.dataYOriginInPixels != '') {\n            // get the data y origin in pixels\n            this.dataYOriginInPixels = this.componentContent.dataYOriginInPixels;\n        }\n\n        if (this.componentContent.coordinateSystem != null && this.componentContent.coordinateSystem != '') {\n            // get the coordinate system\n            this.coordinateSystem = this.componentContent.coordinateSystem;\n        }\n    }\n\n    /**\n     * Setup the objects\n     */\n    setup() {\n        // get the svg.js draw handle\n        this.draw = SVG(this.svgId);\n\n        // create the objects\n        this.createObjects();\n\n        // if an object uses data from another data source, update its data\n        this.updateObjectDatasFromDataSources();\n    }\n\n    /**\n     * Create the objects in the svg world\n     */\n    createObjects() {\n\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n                        let id = object.id;\n                        let type = object.type;\n                        let label = object.label;\n\n                        let svgObject = null;\n\n                        if (type == 'image') {\n                            // get the image file name\n                            let image = object.image;\n\n                            // get the width and the height\n                            let width = object.width;\n                            let height = object.height;\n\n                            // create the image in the svg world\n                            svgObject = this.draw.image(image, width, height);\n                        } else if (type == 'text') {\n\n                            /*\n                             * if the text field is null, change it to an empty\n                             * string otherwise this.draw.text(null) will return\n                             * an empty string and cause problems later\n                             */\n                            if (object.text == null) {\n                                object.text = '';\n                            }\n\n                            // get the text\n                            let text = object.text;\n\n                            // create the text object in the svg world\n                            svgObject = this.draw.text(text);\n                        }\n\n                        // add an entry in our id to svg object mapping\n                        this.idToSVGObject[id] = svgObject;\n\n                        // add an entry in our id to animation state mapping\n                        this.idToAnimationState[id] = false;\n\n                        // initialize the svg object position\n                        this.initializeObjectPosition(object);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialize the object images\n     */\n    initializeObjectImages() {\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    let id = object.id;\n                    let type = object.type;\n\n                    // get the image file name\n                    let image = object.image;\n\n                    if (type == 'image') {\n                        // the object is an image\n\n                        // get the svg object\n                        let svgObject = this.idToSVGObject[id];\n\n                        // load the image into the svg object\n                        svgObject.load(image);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialize the object positions\n     */\n    initializeObjectPositions() {\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    // initialize the object position\n                    this.initializeObjectPosition(object);\n                }\n            }\n        }\n    }\n\n    /**\n     * Convert a data x value to a pixel x value\n     * @param x an x value in data units\n     * @return the x value converted to a pixel coordinate\n     */\n    dataXToPixelX(x) {\n\n        // default the pixel x to start at the data x origin\n        let pixelX = this.dataXOriginInPixels;\n\n        if (x != null) {\n\n            // convert the x value to pixels and shift it by the x origin\n            pixelX += x * this.pixelsPerXUnit;\n        }\n\n        return pixelX;\n    }\n\n    /**\n     * Convert a data y value to a pixel y value\n     * @param y an y value in data units\n     * @return the y value converted to a pixel coordinate\n     */\n    dataYToPixelY(y) {\n\n        // default the pixel y to start at the data y origin\n        let pixelY = this.dataYOriginInPixels;\n\n        if (y != null) {\n            // convert the y value to pixels and shift it by the y origin\n            pixelY += y * this.pixelsPerYUnit;\n        }\n\n        return pixelY;\n    }\n\n    /**\n     * Initialize the object position in the svg world\n     * @param object the authored object\n     */\n    initializeObjectPosition(object) {\n        let id = object.id;\n        let label = object.label;\n        let data = object.data;\n        let dataX = object.dataX;\n        let dataY = object.dataY;\n        let pixelX = object.pixelX;\n        let pixelY = object.pixelY;\n\n        let x = 0;\n        let y = 0;\n\n        if (dataX != null) {\n            // the dataX position was provided\n\n            // convert the data x value to a pixel x value\n            x = this.dataXToPixelX(dataX);\n        } else if (pixelX != null) {\n            // the pixelX position was provided\n            x = pixelX;\n        }\n\n        if (dataY != null) {\n            // the dataY position was provided\n\n            // convert the data y value to a pixel y value\n            y = this.dataYToPixelY(dataY);\n        } else if (pixelY != null) {\n            // the pixelY position was provided\n            y = pixelY;\n        }\n\n        if (this.isUsingCartesianCoordinateSystem()) {\n            /*\n             * we are using the cartesian coordinate system so we need to modify\n             * the y value\n             */\n            y = this.convertToCartesianCoordinateSystem(y);\n        }\n\n        // get the svg object\n        let svgObject = this.idToSVGObject[id];\n\n        if (svgObject != null) {\n\n            // set the x and y pixel position\n            svgObject.attr({ x: x, y: y });\n\n            if (data != null && data.length > 0) {\n                // there is data for this object\n\n                // get the first data point\n                var firstDataPoint = data[0];\n\n                if (firstDataPoint != null) {\n\n                    let firstDataPointT = firstDataPoint.t;\n                    let firstDataPointX = firstDataPoint.x;\n                    let firstDataPointY = firstDataPoint.y;\n\n                    if (firstDataPointT === 0) {\n                        /*\n                         * there is a first data point with t == 0 so we will\n                         * use it as the starting position\n                         */\n\n                        if (firstDataPointX != null && firstDataPointX != '' && typeof firstDataPointX != 'undefined') {\n                            // convert the data x value to a pixel x value\n                            let firstDataPointXInPixels = this.dataXToPixelX(firstDataPointX);\n                            svgObject.attr('x', firstDataPointXInPixels);\n                        }\n\n                        if (firstDataPointY != null && firstDataPointY != '' && typeof firstDataPointY != 'undefined') {\n                            // convert the data y value to a pixel y value\n                            let firstDataPointYInPixels = this.dataYToPixelY(firstDataPointY);\n\n                            if (this.isUsingCartesianCoordinateSystem()) {\n                                /*\n                                 * we are using the cartesian coordinate system so we need to modify\n                                 * the y value\n                                 */\n                                firstDataPointYInPixels = this.convertToCartesianCoordinateSystem(firstDataPointYInPixels);\n                            }\n\n                            svgObject.attr('y', firstDataPointYInPixels);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Start the animation\n     */\n    startAnimation() {\n\n        // set the images back to their starting images in case they have changed\n        this.initializeObjectImages();\n\n        // put the objects in their starting positions\n        this.initializeObjectPositions();\n\n        if (this.componentContent != null) {\n\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n\n                        // animate the object\n                        this.animateObject(object);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Show the time on the svg div\n     * @param t the time\n     */\n    showTime(t) {\n\n        if (this.timerText == null) {\n            // initialize the timer text\n            this.timerText = this.draw.text(\"0\").attr({ fill: '#f03' });\n        }\n\n        // get the width of the svg div\n        let width = this.width;\n\n        // set the x position near the top right of the svg div\n        let x = width - 30;\n        let y = 0;\n\n        // set the text that the student will see\n        this.timerText.text(t + \"\");\n\n        if (t >= 10) {\n            // shift the text to the left if there are two digits\n            x = width - 38;\n        } else if (t >= 100) {\n            // shift the text to the left more if there are three digits\n            x = width - 46;\n        }\n\n        // set the position of the text\n        this.timerText.attr({ x: x, y: y });\n    }\n\n    /**\n     * Update the object data from their data source\n     * @param componentState (optional) a component state which may be the\n     * data source for one of the objects\n     */\n    updateObjectDatasFromDataSources(componentState) {\n\n        if (this.componentContent != null) {\n\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n\n                        if (object.dataSource != null) {\n                            // the object gets its data from a data source\n                            this.updateObjectDataFromDataSource(object, componentState);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the data from its data source\n     * @param object update the data for this object\n     * @param componentState (optional) The component state to get the data\n     * from. If this is not provided, we will look up the latest component\n     * state.\n     */\n    updateObjectDataFromDataSource(object, componentState) {\n\n        if (object != null) {\n\n            // get the data source details\n            let dataSource = object.dataSource;\n\n            if (dataSource != null) {\n                let nodeId = dataSource.nodeId;\n                let componentId = dataSource.componentId;\n\n                if (componentState == null) {\n                    // the component state was not passed in so we will get it\n                    componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n                }\n\n                if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n                    // the component state matches the data source\n\n                    if (componentState.componentType == 'Graph') {\n                        this.setDataFromGraphComponentState(object, componentState);\n                    } else if (componentState.componentType == 'Table') {\n                        this.setDataFromTableComponentState(object, componentState);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the data from the graph component state\n     * @param object set the data into this object\n     * @param componentState\n     */\n    setDataFromGraphComponentState(object, componentState) {\n        if (object != null) {\n\n            // get the data source specification\n            let dataSource = object.dataSource;\n\n            if (dataSource != null) {\n                let nodeId = dataSource.nodeId;\n                let componentId = dataSource.componentId;\n                let trialIndex = dataSource.trialIndex;\n                let seriesIndex = dataSource.seriesIndex;\n                let tColumnIndex = dataSource.tColumnIndex;\n                let xColumnIndex = dataSource.xColumnIndex;\n                let yColumnIndex = dataSource.yColumnIndex;\n\n                if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n                    // the component state matches the data source\n\n                    let studentData = componentState.studentData;\n\n                    if (studentData != null) {\n                        let trials = studentData.trials;\n\n                        if (trials != null) {\n\n                            // get the trial we ant\n                            let trial = trials[trialIndex];\n\n                            if (trial != null) {\n                                let series = trial.series;\n\n                                if (series != null) {\n\n                                    // get the series we want\n                                    let singleSeries = series[seriesIndex];\n\n                                    if (singleSeries != null) {\n                                        let seriesData = singleSeries.data;\n\n                                        if (seriesData != null) {\n\n                                            // array to store our animation data\n                                            let data = [];\n\n                                            // loop through all the points in the series\n                                            for (let d = 0; d < seriesData.length; d++) {\n                                                let seriesDataPoint = seriesData[d];\n\n                                                // create a data point\n                                                let animationDataPoint = {};\n\n                                                if (tColumnIndex != null) {\n                                                    // get the t value\n                                                    animationDataPoint.t = seriesDataPoint[tColumnIndex];\n                                                }\n\n                                                if (xColumnIndex != null) {\n                                                    // get the x value\n                                                    animationDataPoint.x = seriesDataPoint[xColumnIndex];\n                                                }\n\n                                                if (yColumnIndex != null) {\n                                                    // get the y value\n                                                    animationDataPoint.y = seriesDataPoint[yColumnIndex];\n                                                }\n\n                                                // add the data point to the array\n                                                data.push(animationDataPoint);\n                                            }\n\n                                            // set the data into the object\n                                            object.data = data;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    setDataFromTableComponentState() {\n\n    }\n\n    /**\n     * Move the object\n     * @param object the authored object\n     */\n    animateObject(object) {\n\n        if (object != null) {\n            let id = object.id;\n            let data = object.data;\n\n            if (data != null) {\n\n                // get the svg object\n                let svgObject = this.idToSVGObject[id];\n\n                if (svgObject != null) {\n\n                    /*\n                     * this will hold SVG.FX object that is returned from\n                     * calling animate()\n                     */\n                    let animateObject = null;\n\n                    let thisAnimationController = this;\n\n                    // loop through all the data\n                    for (let d = 0; d < data.length; d++) {\n\n                        // get the current point\n                        let currentDataPoint = data[d];\n                        let t = currentDataPoint.t;\n                        let x = currentDataPoint.x;\n                        let y = currentDataPoint.y;\n                        let image = currentDataPoint.image;\n\n                        // convert the data values to pixels\n                        let xPixel = this.dataXToPixelX(x);\n                        let yPixel = this.dataYToPixelY(y);\n\n                        // get the next point\n                        let nextDataPoint = data[d + 1];\n                        let nextT = null;\n                        let nextX = null;\n                        let nextY = null;\n                        let nextXPixel = null;\n                        let nextYPixel = null;\n\n                        if (nextDataPoint != null) {\n                            nextT = nextDataPoint.t;\n                            nextX = nextDataPoint.x;\n                            nextY = nextDataPoint.y;\n\n                            // convert the data values to pixels\n                            nextXPixel = this.dataXToPixelX(nextX);\n                            nextYPixel = this.dataYToPixelY(nextY);\n                        }\n\n                        if (this.isUsingCartesianCoordinateSystem()) {\n                            /*\n                             * we are using the cartesian coordinate system so we need to modify\n                             * the y value\n                             */\n                            yPixel = this.convertToCartesianCoordinateSystem(yPixel);\n                            nextYPixel = this.convertToCartesianCoordinateSystem(nextYPixel);\n                        }\n\n                        // set the animation state to true for the object\n                        this.idToAnimationState[id] = true;\n\n                        let tDiff = 0;\n\n                        if (nextT != null && nextT != '') {\n                            /*\n                             * calculate the time difference so we know how long we should make\n                             * it take to move to the new position\n                             */\n                            tDiff = nextT - t;\n                        }\n\n                        if (d == 0) {\n                            // this is the first data point\n\n                            if (t == 0) {\n                                /*\n                                 * immediately set the position since we are at\n                                 * time 0\n                                 */\n\n                                // set the position\n                                svgObject.attr({ x: xPixel, y: yPixel });\n                            } else {\n                                /*\n                                 * the first data point is not at time 0 so we will\n                                 * need to wait until time t before we set the\n                                 * position of the object\n                                 */\n                                animateObject = svgObject.animate(t * this.realTimePerDataTime).during(function(pos, morph, eased, situation) {\n\n                                    // calculate the amount of time that has elapsed\n                                    let elapsedTime = t * pos;\n\n                                    // display and broadcast the elapsed time\n                                    thisAnimationController.displayAndBroadcastTime(elapsedTime);\n                                }).after(function() {\n                                    // set the position\n                                    this.attr({ x: xPixel, y: yPixel });\n                                });\n                            }\n                        }\n\n                        if (image != null && image != '') {\n                            /*\n                             * there is an image specified for this data point\n                             * so we will change to that image\n                             */\n\n                            if (animateObject == null) {\n                                /*\n                                 * there is no animateObject yet so we will\n                                 * change the image immediately\n                                 */\n                                svgObject.load(image);\n                            } else {\n                                /*\n                                 * change the image after all the existing\n                                 * animations\n                                 */\n                                animateObject = animateObject.after(function() {\n                                    this.load(image);\n                                });\n                            }\n                        } else if (nextDataPoint != null) {\n                            /*\n                             * there is a next data point so we will see if we\n                             * can determine what image to show based upon the\n                             * movement of the object\n                             */\n\n                            // get the image to show based upon the movement\n                            let dynamicallyCalculatedImage = this.getImageBasedOnMovement(object, currentDataPoint, nextDataPoint);\n\n                            if (dynamicallyCalculatedImage != null) {\n                                if (animateObject == null) {\n                                    /*\n                                     * there is no animateObject yet so we will\n                                     * change the image immediately\n                                     */\n                                    svgObject.load(dynamicallyCalculatedImage);\n                                } else {\n                                    /*\n                                     * change the image after all the existing\n                                     * animations\n                                     */\n                                    animateObject = animateObject.after(function() {\n                                        this.load(dynamicallyCalculatedImage);\n                                    });\n                                }\n                            }\n                        }\n\n                        if (d != data.length - 1) {\n                            // this is a data point that is not the last\n\n                            // move the image to the next position\n                            animateObject = svgObject.animate(tDiff * this.realTimePerDataTime).move(nextXPixel, nextYPixel).during(function(pos, morph, eased, situation) {\n\n                                // calculate the elapsed time\n                                let elapsedTime = t + (tDiff * pos);\n\n                                // display and broadcast the elapsed time\n                                thisAnimationController.displayAndBroadcastTime(elapsedTime);\n                            });\n                        }\n\n                        if (d == data.length - 1) {\n                            // this is the last data point\n\n                            // after all the animations are done on the object we will perform some processing\n                            animateObject = animateObject.afterAll(() => {\n\n                                /*\n                                 * we are done animating this object so we will\n                                 * set the animation state to false for the\n                                 * object\n                                 */\n                                this.idToAnimationState[id] = false;\n\n                                // check if all svg objects are done animating\n                                this.checkIfAllAnimatingIsDone();\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Display and broadcast the time\n     * @param t the time\n     */\n    displayAndBroadcastTime(t) {\n        /*\n         * Remove the digits after the first decimal place.\n         * example\n         * 12.817 will be changed to 12.8\n         */\n        let displayTime = parseInt(t * 10) / 10;\n\n        // show the time on the svg div\n        this.showTime(displayTime);\n\n        // create a component state with the time in it\n        let componentState = {};\n        componentState.t = t;\n\n        /*\n         * broadcast the component state with the time in it\n         * so other components can know the elapsed time\n         */\n        this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    }\n\n    /**\n     * Get the image based upon the movement of the object\n     * @param object the object that is being moved\n     * @param currentDataPoint the current data point\n     * @param nextDataPoint the next data point\n     */\n    getImageBasedOnMovement(object, currentDataPoint, nextDataPoint) {\n\n        let image = null;\n\n        if (currentDataPoint != null && nextDataPoint != null) {\n\n            let currentX = currentDataPoint.x;\n            let currentY = currentDataPoint.y;\n\n            let nextX = nextDataPoint.x;\n            let nextY = nextDataPoint.y;\n\n            if (currentY == nextY) {\n                // there is no change in y\n\n                if (currentX == nextX) {\n                    // there is no change in x\n\n                    // the image is staying in place\n                } else if (currentX < nextX) {\n                    // x is moving to the right\n                    if (object.imageMovingRight != null && object.imageMovingRight != '') {\n                        image = object.imageMovingRight;\n                    }\n                } else if (currentX > nextX) {\n                    // x is moving to the left\n                    if (object.imageMovingLeft != null && object.imageMovingLeft != '') {\n                        image = object.imageMovingLeft;\n                    }\n                }\n            } else if (currentX == nextX) {\n                // there is no change in x\n\n                if (currentY == nextY) {\n                    // there is no change in y\n\n                    // the image is staying in place\n                } else if (currentY < nextY) {\n                    // y is getting larger\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // y is moving up\n                        if (object.imageMovingUp != null && object.imageMovingUp != '') {\n                            image = object.imageMovingUp;\n                        }\n                    } else {\n                        // y is moving down\n                        if (object.imageMovingDown != null && object.imageMovingDown != '') {\n                            image = object.imageMovingDown;\n                        }\n                    }\n                } else if (currentY > nextY) {\n                    // y is getting smaller\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // y is moving down\n                        if (object.imageMovingDown != null && object.imageMovingDown != '') {\n                            image = object.imageMovingDown;\n                        }\n                    } else {\n                        // y is moving up\n                        if (object.imageMovingUp != null && object.imageMovingUp != '') {\n                            image = object.imageMovingUp;\n                        }\n                    }\n                }\n            } else {\n                // there is a change in x and y\n\n                // TODO: fill out these if/else cases by setting the appropriate image\n\n                if (currentX < nextX && currentY < nextY) {\n                    // x is getting larger and y is getting larger\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // the image is moving up to the right\n                    } else {\n                        // the image is moving down to the right\n                    }\n                } else if (currentX < nextX && currentY > nextY) {\n                    // x is getting larger and y is getting smaller\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // the image is moving down to the right\n                    } else {\n                        // the image is moving up to the right\n                    }\n                } else if (currentX > nextX && currentY > nextY) {\n                    // x is getting smaller and y is getting smaller\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // the image is moving down to the left\n                    } else {\n                        // the image is moving up to the left\n                    }\n                } else if (currentX > nextX && currentY < nextY) {\n                    // x is getting smaller and y is getting larger\n\n                    if (this.isUsingCartesianCoordinateSystem()) {\n                        // the image is moving up to the right\n                    } else {\n                        // the image is moving down to the right\n                    }\n                }\n            }\n        }\n\n        return image;\n    }\n\n    /**\n     * Check if all svg objects are done animating. If there are not svg objects\n     * animating, we will set the animationState to 'stopped'.\n     */\n    checkIfAllAnimatingIsDone() {\n\n        // check if there are any other objects that are still animating\n        if (!this.areAnyObjectsAnimating()) {\n            // there are no objects animating\n\n            // set the animation state to 'stopped'\n            this.animationState = 'stopped';\n\n            // perform a digest after a timeout so that the buttons update\n            this.$timeout(() => {\n                this.$scope.$digest();\n            });\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n\n                    // the student does not have any more chances to submit\n                    alert(this.$translate('animation.youHaveNoMoreChances'));\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('animation.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                } else if (numberOfSubmitsLeft > 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('animation.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the response into the component state\n        var studentData = {};\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the flag for whether the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit' && componentState.isSubmit) {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"' + this.$translate('animation.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('animation.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        let score = data.score;\n                        let concepts = data.concepts;\n                        let previousScore = null;\n\n                        if (score != null) {\n\n                            // create the auto score annotation\n                            let autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n                            let annotationGroupForScore = null;\n\n                            if (this.$scope.$parent.nodeController != null) {\n                                // get the previous score and comment annotations\n                                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                                if (latestAnnotations != null && latestAnnotations.score != null &&\n                                    latestAnnotations.score.data != null) {\n\n                                    // get the previous score annotation value\n                                    previousScore = latestAnnotations.score.data.value;\n                                }\n\n                                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                                    let globalAnnotationMaxCount = 0;\n                                    if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                                        globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                                    }\n                                    // get the annotation properties for the score that the student got.\n                                    annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                                    // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                                    if (annotationGroupForScore != null) {\n                                        let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                                        annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                                        if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                                            // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                                            annotationGroupForScore = null;\n                                        }\n                                    }\n\n                                    if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                                        // check if this annotation is global and what criteria needs to be met to un-globalize.\n                                        annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                                            // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                                            // so we can compare it when we check for criteria satisfaction.\n                                            if (unGlobalizeCriteria.params != null) {\n                                                unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                                            }\n                                        });\n                                    }\n\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoScoreAnnotation's data\n                                        angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                            }\n\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            if (this.mode === 'authoring') {\n                                if (this.latestAnnotations == null) {\n                                    this.latestAnnotations = {};\n                                }\n\n                                /*\n                                 * we are in the authoring view so we will set the\n                                 * latest score annotation manually\n                                 */\n                                this.latestAnnotations.score = autoScoreAnnotation;\n                            }\n\n                            var autoComment = null;\n\n                            // get the submit counter\n                            var submitCounter = this.submitCounter;\n\n                            if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                                /*\n                                 * this step has multiple attempt scoring rules and this is\n                                 * a subsequent submit\n                                 */\n                                // get the feedback based upon the previous score and current score\n                                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n                            } else {\n                                // get the feedback text\n                                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            }\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                                if (this.componentContent.enableGlobalAnnotations) {\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoCommentAnnotation's data\n                                        angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                                componentState.annotations.push(autoCommentAnnotation);\n\n                                if (this.mode === 'authoring') {\n                                    if (this.latestAnnotations == null) {\n                                        this.latestAnnotations = {};\n                                    }\n\n                                    /*\n                                     * we are in the authoring view so we will set the\n                                     * latest comment annotation manually\n                                     */\n                                    this.latestAnnotations.comment = autoCommentAnnotation;\n                                }\n                            }\n                            if (this.componentContent.enableNotifications) {\n                                // get the notification properties for the score that the student got.\n                                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                                if (notificationForScore != null) {\n                                    notificationForScore.score = score;\n                                    notificationForScore.nodeId = this.nodeId;\n                                    notificationForScore.componentId = this.componentId;\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\n                                }\n                            }\n\n                            // display global annotations dialog if needed\n                            if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                                this.$scope.$emit('displayGlobalAnnotations');\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * hide the dialog that tells the student to wait since\n                 * the work has been scored.\n                 */\n                this.$mdDialog.hide();\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n            // if there are any additionalProcessingFunctions for this node and component, call all of them\n            let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n            let allPromises = [];\n            for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n                let additionalProcessingFunction = additionalProcessingFunctions[i];\n                let defer = this.$q.defer();\n                let promise = defer.promise;\n                allPromises.push(promise);\n                additionalProcessingFunction(defer, componentState, action);\n            }\n            this.$q.all(allPromises).then(() => {\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.AnimationService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n\n    /**\n     * Add a scoring rule\n     */\n    authoringAddScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // create a scoring rule object\n            var newScoringRule = {};\n            newScoringRule.score = \"\";\n            newScoringRule.feedbackText = \"\";\n\n            // add the new scoring rule object\n            this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a scoring rule up\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the top\n            if (index != 0) {\n                // the scoring rule is not at the top so we can move it up\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a scoring rule down\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the end\n            if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a scoring rule\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // get the scoring rule\n            var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n            if (scoringRule != null) {\n\n                // get the score and feedback text\n                var score = scoringRule.score;\n                var feedbackText = scoringRule.feedbackText;\n\n                // make sure the author really wants to delete the scoring rule\n                //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n                var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the scoring rule\n                    this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n     * we can add different types in the future.\n     */\n    authoringAddNotification() {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // create a new notification\n            let newNotification = {\n                notificationType: \"CRaterResult\",\n                enableCriteria: {\n                    scoreSequence: [\"\", \"\"]\n                },\n                isAmbient: false,\n                dismissCode: \"apple\",\n                isNotifyTeacher: true,\n                isNotifyStudent: true,\n                notificationMessageToStudent: \"{{username}}, \" + this.$translate('animation.youGotAScoreOf') + \" {{score}}. \" + this.$translate('animation.pleaseTalkToYourTeacher') + \".\",\n                notificationMessageToTeacher: \"{{username}} \" + this.$translate('animation.gotAScoreOf') + \" {{score}}.\"\n            };\n\n            // add the new notification\n            this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n            // the author has made changes so we will save the component content\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Add a multiple attempt scoring rule\n     */\n    authoringAddMultipleAttemptScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // create a new multiple attempt scoring rule\n            var newMultipleAttemptScoringRule = {};\n            newMultipleAttemptScoringRule.scoreSequence = [\"\", \"\"];\n            newMultipleAttemptScoringRule.feedbackText = \"\";\n\n            // add the new multiple attempt scoring rule\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule up\n     * @param index\n     */\n    authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not already at the top\n            if (index != 0) {\n                // the multiple attempt scoring rule is not at the top\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule down\n     * @param index the index of the multiple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not at the end\n            if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n                // the multiple attempt scoring rule is not at the end\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a multiple attempt scoring rule\n     * @param index the index of the mulitple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // get the multiple attempt scoring rule\n            var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n            if (multipleAttemptScoringRule != null) {\n\n                // get the score sequence\n                var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // get the feedback text\n                var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n                // make sure the author really wants to delete the multiple attempt scoring rule\n                var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the multiple attempt scoring rule\n                    this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Move a notification up\n     * @param index of the notification\n     */\n    authoringViewNotificationUpClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not already at the top\n            if (index != 0) {\n                // the notification is not at the top\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index back\n                this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a notification down\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDownClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not at the end\n            if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n                // the notification is not at the end\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index forward\n                this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a notification\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDeleteClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // get the notification\n            var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n            if (notification != null) {\n\n                // get the score sequence\n                var scoreSequence = notification.enableCriteria.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // make sure the author really wants to delete the notification\n                var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n                if (answer) {\n                    // the author answered yes to delete the notification\n                    this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                    // the author has made changes so we will save the component content\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable CRater\" checkbox was clicked\n     */\n    authoringViewEnableCRaterClicked() {\n\n        if (this.authoringComponentContent.enableCRater) {\n            // CRater was turned on\n\n            if (this.authoringComponentContent.cRater == null) {\n                /*\n                 * the cRater object does not exist in the component content\n                 * so we will create it\n                 */\n\n                // create the cRater object\n                var cRater = {};\n                cRater.itemType = \"CRATER\";\n                cRater.itemId = \"\";\n                cRater.scoreOn = \"submit\";\n                cRater.showScore = true;\n                cRater.showFeedback = true;\n                cRater.scoringRules = [];\n                cRater.enableMultipleAttemptScoringRules = false;\n                cRater.multipleAttemptScoringRules = []\n\n                // set the cRater object into the component content\n                this.authoringComponentContent.cRater = cRater;\n            }\n\n            // turn on the submit button\n            //this.authoringComponentContent.showSubmitButton = true;\n            this.setShowSubmitButtonValue(true);\n        } else {\n            // CRater was turned off\n\n            // turn off the submit button\n            this.setShowSubmitButtonValue(false);\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n     */\n    enableMultipleAttemptScoringRulesClicked() {\n\n        // get the cRater object from the component content\n        var cRater = this.authoringComponentContent.cRater;\n\n        if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n            /*\n             * the multiple attempt scoring rules array does not exist so\n             * we will create it\n             */\n            cRater.multipleAttemptScoringRules = [];\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Notifications\" checkbox was clicked\n     */\n    authoringViewEnableNotificationsClicked() {\n\n        if (this.authoringComponentContent.enableNotifications) {\n            // Notifications was turned on\n\n            if (this.authoringComponentContent.notificationSettings == null) {\n                /*\n                 * the NotificationSettings object does not exist in the component content\n                 * so we will create it\n                 */\n                this.authoringComponentContent.notificationSettings = {\n                    notifications: []\n                };\n            }\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions() {\n        // get the component states for this component\n        return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    };\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The play button was clicked\n     */\n    playButtonClicked() {\n\n        // set the animation state\n        this.animationState = 'playing';\n\n        // start the animation\n        this.startAnimation();\n    }\n\n    /**\n     * The pause button was clicked\n     */\n    pauseButtonClicked() {\n\n        // set the animation state\n        this.animationState = 'paused';\n\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n                        let id = object.id;\n\n                        // get the svg object\n                        let svgObject = this.idToSVGObject[id];\n\n                        if (svgObject != null) {\n\n                            // pause the object from animating\n                            svgObject.pause();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * The resume button was clicked\n     */\n    resumeButtonClicked() {\n\n        // set the animation state\n        this.animationState = 'playing';\n\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n                        let id = object.id;\n\n                        // get the svg object\n                        let svgObject = this.idToSVGObject[id];\n\n                        if (svgObject != null) {\n\n                            // resume playing the object animation\n                            svgObject.play();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * The reset button was clicked\n     */\n    resetButtonClicked() {\n\n        // set the animation state\n        this.animationState = 'stopped';\n\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n                        let id = object.id;\n\n                        // get the svg object\n                        let svgObject = this.idToSVGObject[id];\n\n                        if (svgObject != null) {\n\n                            let jumpToEnd = true;\n                            let clearQueue = true;\n\n                            /*\n                             * We need to play it in case it is currently paused.\n                             * There is a minor bug in the animation library\n                             * which is cause if you pause an animation and\n                             * then stop the animation. Then if you try to play the\n                             * animation, the animation will not play. We avoid\n                             * this problem by making sure the object animation\n                             * is playing when we stop it.\n                             */\n                            svgObject.play();\n\n                            // stop the object from animating\n                            svgObject.stop(jumpToEnd, clearQueue);\n                        }\n                    }\n                }\n            }\n        }\n\n        // set the display time to 0\n        this.showTime(0);\n\n        // set the images back to their starting images in case they have changed\n        this.initializeObjectImages();\n\n        // put the objects in their starting positions\n        this.initializeObjectPositions();\n    }\n\n    /**\n     * Check if any of the objects are animating\n     * @return whether any of the objects are animating\n     */\n    areAnyObjectsAnimating() {\n\n        if (this.componentContent != null) {\n\n            // get the objects\n            let objects = this.componentContent.objects;\n\n            if (objects != null) {\n\n                // loop through all the objects\n                for (let o = 0; o < objects.length; o++) {\n                    let object = objects[o];\n\n                    if (object != null) {\n                        let id = object.id;\n\n                        if (this.idToAnimationState[id]) {\n                            // an object is animating\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Whether we are using the cartesian coordinate system\n     * @return whether we are using the cartesian coordinate system\n     */\n    isUsingCartesianCoordinateSystem() {\n\n        if (this.coordinateSystem == 'cartesian') {\n            // we are using the cartesian coordinate system\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the y value to the cartesian coordinate system\n     * @param y the pixel y value in the screen coordinate system\n     * @return the pixel y value in the cartesian coordinate system\n     */\n    convertToCartesianCoordinateSystem(y) {\n        return this.height - y;\n    }\n\n    /**\n     * The student changed the speed slider value\n     */\n    speedSliderChanged() {\n\n        if (this.speedSliderValue == 1) {\n            this.realTimePerDataTime = 10000;\n        } else if (this.speedSliderValue == 2) {\n            this.realTimePerDataTime = 1000;\n        } else if (this.speedSliderValue == 3) {\n            this.realTimePerDataTime = 100;\n        } else if (this.speedSliderValue == 4) {\n            this.realTimePerDataTime = 10;\n        } else if (this.speedSliderValue == 5) {\n            this.realTimePerDataTime = 1;\n        }\n    }\n\n    /**\n     * Remove all the objects from the svg div\n     */\n    removeAllObjects() {\n\n        if (this.idToSVGObject != null) {\n\n            // get all the object ids\n            var keys = Object.keys(this.idToSVGObject);\n\n            if (keys != null) {\n\n                // loop through all the keys\n                for (var k = 0; k < keys.length; k++) {\n                    var key = keys[k];\n\n                    // get the svg object\n                    var svgObject = this.idToSVGObject[key];\n\n                    if (svgObject != null) {\n                        // remove the svg object from the svg div\n                        svgObject.remove();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new object\n     */\n    authoringAddObjectClicked() {\n\n        // initialize the objects array if necessary\n        if (this.authoringComponentContent.objects == null) {\n            this.authoringComponentContent.objects = [];\n        }\n\n        // create a new object\n        var newObject = {};\n        newObject.id = this.UtilService.generateKey(10);\n        newObject.type = 'image';\n\n        // add the object to our array of objects\n        this.authoringComponentContent.objects.push(newObject);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a data point to an object\n     * @param object add a data point to this object\n     */\n    authoringAddDataPointClicked(object) {\n        if (object != null) {\n\n            if (object.dataSource != null) {\n                // the object already has a data source\n\n                // ask the user if they are sure they want to delete the data source\n                var answer = confirm('You can only have Data Points or a Data Source. If you add a Data Point, the Data Source will be deleted. Are you sure you want to add a Data Point?');\n\n                if (answer) {\n                    // the author answered yes to delete the data source\n                    delete object.dataSource;\n\n                    // initialize the data array if necessary\n                    if (object.data == null) {\n                        object.data = [];\n                    }\n\n                    // create a new data point\n                    var newDataPoint = {};\n\n                    // add the new data point\n                    object.data.push(newDataPoint);\n                }\n            } else {\n                // the object does not have a data source so we can add a data point\n\n                // initialize the data array if necessary\n                if (object.data == null) {\n                    object.data = [];\n                }\n\n                // create a new data point\n                var newDataPoint = {};\n\n                // add the new data point\n                object.data.push(newDataPoint);\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a data point from an object\n     * @param object the object to delete a data point from\n     * @param index the index of the data point to delete\n     */\n    authoringDeleteObjectDataPointClicked(object, index) {\n\n        if (object != null && object.data != null) {\n\n            // ask the author if they are sure they want to delete the point\n            var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisDataPoint'));\n\n            if (answer) {\n                // delete the data point at the given index\n                object.data.splice(index, 1);\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a data point up\n     * @param object the object the data point belongs to\n     * @param index the index of the data point in the object\n     */\n    authoringMoveObjectDataPointUpClicked(object, index) {\n        if (object != null && object.data != null) {\n\n            if (index > 0) {\n                // the data point is not at the top so we can move it up\n\n                // remember the data point we are moving\n                var dataPoint = object.data[index];\n\n                // remove the data point at the given index\n                object.data.splice(index, 1);\n\n                // insert the data point back in at one index back\n                object.data.splice(index - 1, 0, dataPoint);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a data point down\n     * @param object the object the data point belongs to\n     * @param index the index of the data point in the object\n     */\n    authoringMoveObjectDataPointDownClicked(object, index) {\n        if (object != null && object.data != null) {\n\n            if (index < object.data.length - 1) {\n                // the data point is not at the bottom so we can move it down\n\n                // remember the data point we are moving\n                var dataPoint = object.data[index];\n\n                // remove the data point at the given index\n                object.data.splice(index, 1);\n\n                // insert the data point back in at one index forward\n                object.data.splice(index + 1, 0, dataPoint);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move an object up\n     * @param index the index of the object\n     */\n    authoringMoveObjectUpClicked(index) {\n\n        if (this.authoringComponentContent != null) {\n\n            var objects = this.authoringComponentContent.objects;\n\n            if (objects != null) {\n\n                if (index > 0) {\n                    // the object is not at the top so we can move it up\n\n                    // remember the object we are moving\n                    var object = objects[index];\n\n                    // remove the object\n                    objects.splice(index, 1);\n\n                    // insert the object back in at one index back\n                    objects.splice(index - 1, 0, object);\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move an object down\n     * @param index the index of the object\n     */\n    authoringMoveObjectDownClicked(index) {\n\n        if (this.authoringComponentContent != null) {\n\n            var objects = this.authoringComponentContent.objects;\n\n            if (objects != null) {\n\n                if (index < objects.length - 1) {\n                    // the object is not at the bottom so we can move it down\n\n                    // remember the object we are moving\n                    var object = objects[index];\n\n                    // remove the object\n                    objects.splice(index, 1);\n\n                    // insert the object back in at one index forward\n                    objects.splice(index + 1, 0, object);\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete an object\n     * @param index the index of the object\n     */\n    authoringDeleteObjectClicked(index) {\n\n        if (this.authoringComponentContent != null) {\n\n            var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisObject'));\n\n            if (answer) {\n                var objects = this.authoringComponentContent.objects;\n\n                if (objects != null) {\n                    // remove the object from the array of objects\n                    objects.splice(index, 1);\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    getComponentByNodeIdAndComponentId(nodeId, componentId) {\n        return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    }\n\n    /**\n     * The add data source button was clicked\n     * @param object the object we will add the data source to\n     */\n    authoringAddDataSourceClicked(object) {\n\n        if (object != null && object.data != null && object.data.length > 0) {\n            /*\n             * the object has data so we will ask the author if they are sure\n             * they want to add a data source which will remove the data\n             */\n\n            var answer = confirm('You can only have Data Points or a Data Source. If you add a Data Source, the Data Points will be deleted. Are you sure you want to add a Data Source?');\n\n            if (answer) {\n                // the author answered yes to delete the data points\n\n                // delete the data points\n                delete object.data;\n\n                // add the data source\n                object.dataSource = {};\n            }\n        } else {\n            // there are no data points so we can add the data source\n\n            // delete the data points\n            delete object.data;\n\n            // add the data source\n            object.dataSource = {};\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The delete data source button was clicked\n     * @param object the object to delete the data source from\n     */\n    authoringDeleteDataSourceClicked(object) {\n\n        // ask the author if they are sure they want to delete the data source\n        var answer = confirm('Are you sure you want to delete the Data Source?');\n\n        if (answer) {\n            // the author answered yes to delete the data source\n            delete object.dataSource;\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The data source node has changed\n     * @param object the object that has changed\n     */\n    dataSourceNodeChanged(object) {\n\n        if (object != null) {\n\n            // remember the node id\n            var nodeId = object.dataSource.nodeId;\n\n            // clear the dataSource object except for the node id\n            object.dataSource = {\n                nodeId: nodeId\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The data source component has changed\n     * @param object the object that has changed\n     */\n    dataSourceComponentChanged(object) {\n\n        if (object != null) {\n\n            // remember the node id and component id\n            var nodeId = object.dataSource.nodeId;\n            var componentId = object.dataSource.componentId;\n\n            // get the component\n            var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            // clear the dataSource object except for the node id and component id\n            object.dataSource = {\n                nodeId: nodeId,\n                componentId: componentId\n            };\n\n            if (component != null && component.type == 'Graph') {\n                // set the default parameters for a graph data source\n                object.dataSource.trialIndex = 0;\n                object.dataSource.seriesIndex = 0;\n                object.dataSource.tColumnIndex = 0;\n                object.dataSource.xColumnIndex = 1;\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the image\n     */\n    chooseImage(object) {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'image';\n        params.targetObject = object;\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the image moving left\n     * @param object the object to set the image moving left\n     */\n    chooseImageMovingLeft(object) {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'imageMovingLeft';\n        params.targetObject = object;\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the image moving right\n     * @param object the object to set the image moving right\n     */\n    chooseImageMovingRight(object) {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'imageMovingRight';\n        params.targetObject = object;\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * The type for an object changed\n     * @param object the object that changed\n     */\n    authoringObjectTypeChanged(object) {\n\n        if (object != null) {\n            if (object.type == 'image') {\n                // the type changed to an image so we will delete the text field\n                delete object.text;\n            } else if (object.type == 'text') {\n                // the type changed to text so we will delete the image fields\n                delete object.image;\n                delete object.imageMovingLeft;\n                delete object.imageMovingRight;\n                delete object.imageMovingUp;\n                delete object.imageMovingDown;\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nAnimationController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnimationService',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default AnimationController;\n"]}