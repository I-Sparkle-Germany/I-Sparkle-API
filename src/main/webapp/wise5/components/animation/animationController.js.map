{"version":3,"sources":["animationController.es6"],"names":["AnimationController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnimationService","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","onlyShowWork","latestAnnotations","messageDialog","submitCounter","showAdvancedAuthoring","showJSONAuthoring","idToSVGObject","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","width","height","pixelsPerXUnit","pixelsPerYUnit","dataXOriginInPixels","dataYOriginInPixels","animationState","coordinateSystem","idToAnimationState","realTimePerDataTime","speedSliderValue","componentState","svgId","initializeCoordinates","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","starterSentence","removeAllObjects","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","angular","animationController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","targetObject","image","imageMovingLeft","imageMovingRight","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","authoringViewComponentChanged","hide","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","updateObjectDatasFromDataSources","script","retrieveScript","Function","call","widthInPixels","widthInUnits","heightInPixels","heightInUnits","draw","SVG","createObjects","objects","o","length","object","label","svgObject","initializeObjectPosition","load","x","pixelX","y","pixelY","data","dataX","dataY","dataXToPixelX","dataYToPixelY","isUsingCartesianCoordinateSystem","convertToCartesianCoordinateSystem","attr","firstDataPoint","firstDataPointT","t","firstDataPointX","firstDataPointY","firstDataPointXInPixels","firstDataPointYInPixels","initializeObjectImages","initializeObjectPositions","animateObject","timerText","fill","dataSource","updateObjectDataFromDataSource","getLatestComponentStateByNodeIdAndComponentId","setDataFromGraphComponentState","setDataFromTableComponentState","trialIndex","seriesIndex","tColumnIndex","xColumnIndex","yColumnIndex","studentData","trials","trial","series","singleSeries","seriesData","d","seriesDataPoint","animationDataPoint","push","thisAnimationController","currentDataPoint","xPixel","yPixel","nextDataPoint","nextT","nextX","nextY","nextXPixel","nextYPixel","tDiff","animate","during","pos","morph","eased","situation","elapsedTime","displayAndBroadcastTime","after","dynamicallyCalculatedImage","getImageBasedOnMovement","move","afterAll","checkIfAllAnimatingIsDone","currentTime","Date","getTime","lastBroadcastTime","displayTime","parseInt","showTime","currentX","currentY","imageMovingUp","imageMovingDown","areAnyObjectsAnimating","$digest","response","processLatestSubmit","latestState","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","show","template","escapeToClose","makeCRaterRequest","result","annotations","score","concepts","previousScore","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","setShowSubmitButtonValue","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","startAnimation","pause","play","jumpToEnd","clearQueue","stop","resetButtonClicked","keys","Object","k","key","remove","newObject","generateKey","newDataPoint","dataPoint","$broadcast","tags","tag","c","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedResponse","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","$inject"],"mappings":"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","file":"animationController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\n\nclass AnimationController {\n\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnimationService,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$timeout = $timeout;\n    this.AnimationService = AnimationService;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.CRaterService = CRaterService;\n    this.NodeService = NodeService;\n    this.NotificationService = NotificationService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether this component is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether rich text editing is enabled\n    this.isRichTextEnabled = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // whether the submit button is disabled\n    this.isSubmitButtonDisabled = false;\n\n    // whether we're only showing the student work\n    this.onlyShowWork = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // mapping from object id to svg object\n    this.idToSVGObject = {};\n\n    //var scope = this;\n    let themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link image media autoresize', //imagetools\n      toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Animation'\n      },\n      {\n        type: 'Graph'\n      }\n    ];\n\n    // get the current node and node id\n    var currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      this.nodeId = currentNode.id;\n    } else {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    // the default width and height\n    this.width = 800;\n    this.height = 600;\n\n    // the default pixels per unit\n    this.pixelsPerXUnit = 1;\n    this.pixelsPerYUnit = 1;\n\n    // the default data origin in pixels\n    this.dataXOriginInPixels = 0;\n    this.dataYOriginInPixels = 0;\n\n    // the current state of the animation ('playing', 'paused', or 'stopped')\n    this.animationState = 'stopped';\n\n    // the coordinate system to use ('screen' or 'cartesian')\n    this.coordinateSystem = 'screen';\n\n    // mapping from id to whether the object is animating\n    this.idToAnimationState = {};\n\n    /*\n     * milliseconds per data time\n     * example\n     * The data time can be labelled with any unit of time such as seconds,\n     * minutes, hours, days, years, etc.\n     * If realTimePerDataTime is 100, that means for 1 data time, 100\n     * milliseconds will pass in real time.\n     */\n    this.realTimePerDataTime = 100;\n\n    // the speed slider value\n    this.speedSliderValue = 3;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      // get the svg id\n      this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n\n      // initialize all the coordinates\n      this.initializeCoordinates();\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading') {\n\n        // get the svg id\n        if (componentState != null) {\n          this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n        } else {\n\n          this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n        }\n\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'onlyShowWork') {\n        this.onlyShowWork = true;\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          // inject the asset paths into the new component content\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          /*\n           * reset the values so that the preview is refreshed with\n           * the new content\n           */\n          this.submitCounter = 0;\n          this.studentResponse = '';\n          this.latestAnnotations = null;\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n          if (this.componentContent.starterSentence != null) {\n            /*\n             * the student has not done any work and there is a starter sentence\n             * so we will populate the textarea with the starter sentence\n             */\n            this.studentResponse = this.componentContent.starterSentence;\n          }\n\n          // remove all the old objects\n          this.removeAllObjects();\n\n          // initialize all the coordinates\n          this.initializeCoordinates();\n\n          // re-render the svg div\n          this.setup();\n        }.bind(this), true);\n      }\n\n      // set whether rich text is enabled\n      this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.AnimationService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /*\n     * Call the setup() function after a timeout so that angular has a\n     * chance to set the svg element id before we start using it. If we\n     * don't wait for the timeout, the svg id won't be set when we try\n     * to start referencing the svg element.\n     */\n    this.$timeout(angular.bind(this, this.setup));\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.animationController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.animationController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.animationController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.animationController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }.bind(this));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'image') {\n                // the target is the image\n                if (args.targetObject != null) {\n                  args.targetObject.image = fileName;\n                }\n              } else if (args.target == 'imageMovingLeft') {\n                // the target is the image moving left\n                if (args.targetObject != null) {\n                  args.targetObject.imageMovingLeft = fileName;\n                }\n              } else if (args.target == 'imageMovingRight') {\n                // the target is the image moving right\n                if (args.targetObject != null) {\n                  args.targetObject.imageMovingRight = fileName;\n                }\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = (connectedComponent, connectedComponentParams, componentState) => {\n\n      if (connectedComponent != null && componentState != null) {\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        if (componentType === 'Graph') {\n\n          // update the object datas\n          this.updateObjectDatasFromDataSources(componentState);\n        }\n      }\n    };\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    // load script for this component, if any\n    let script = this.componentContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n  }\n\n  /**\n   * Initialize the coordinates of the svg div\n   */\n  initializeCoordinates() {\n\n    if (this.componentContent.widthInPixels != null && this.componentContent.widthInPixels != '') {\n      // get the width of the canvas in pixels\n      this.width = this.componentContent.widthInPixels;\n\n      // get the ratio of pixels per x unit\n      this.pixelsPerXUnit = this.componentContent.widthInPixels / this.componentContent.widthInUnits;\n    }\n\n    if (this.componentContent.heightInPixels != null && this.componentContent.heightInPixels != '') {\n      // get the height of the canvas in pixels\n      this.height = this.componentContent.heightInPixels;\n\n      // get the ratio of pixels per y unit\n      this.pixelsPerYUnit = this.componentContent.heightInPixels / this.componentContent.heightInUnits;\n    }\n\n    if (this.componentContent.dataXOriginInPixels != null && this.componentContent.dataXOriginInPixels != '') {\n      // get the data x origin in pixels\n      this.dataXOriginInPixels = this.componentContent.dataXOriginInPixels;\n    }\n\n    if (this.componentContent.dataYOriginInPixels != null && this.componentContent.dataYOriginInPixels != '') {\n      // get the data y origin in pixels\n      this.dataYOriginInPixels = this.componentContent.dataYOriginInPixels;\n    }\n\n    if (this.componentContent.coordinateSystem != null && this.componentContent.coordinateSystem != '') {\n      // get the coordinate system\n      this.coordinateSystem = this.componentContent.coordinateSystem;\n    }\n  }\n\n  /**\n   * Setup the objects\n   */\n  setup() {\n    // get the svg.js draw handle\n    this.draw = SVG(this.svgId);\n\n    // create the objects\n    this.createObjects();\n\n    // if an object uses data from another data source, update its data\n    this.updateObjectDatasFromDataSources();\n  }\n\n  /**\n   * Create the objects in the svg world\n   */\n  createObjects() {\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n            let type = object.type;\n            let label = object.label;\n\n            let svgObject = null;\n\n            if (type == 'image') {\n              // get the image file name\n              let image = object.image;\n\n              // get the width and the height\n              let width = object.width;\n              let height = object.height;\n\n              // create the image in the svg world\n              svgObject = this.draw.image(image, width, height);\n            } else if (type == 'text') {\n\n              /*\n               * if the text field is null, change it to an empty\n               * string otherwise this.draw.text(null) will return\n               * an empty string and cause problems later\n               */\n              if (object.text == null) {\n                object.text = '';\n              }\n\n              // get the text\n              let text = object.text;\n\n              // create the text object in the svg world\n              svgObject = this.draw.text(text);\n            }\n\n            // add an entry in our id to svg object mapping\n            this.idToSVGObject[id] = svgObject;\n\n            // add an entry in our id to animation state mapping\n            this.idToAnimationState[id] = false;\n\n            // initialize the svg object position\n            this.initializeObjectPosition(object);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the object images\n   */\n  initializeObjectImages() {\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          let id = object.id;\n          let type = object.type;\n\n          // get the image file name\n          let image = object.image;\n\n          if (type == 'image') {\n            // the object is an image\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            // load the image into the svg object\n            svgObject.load(image);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the object positions\n   */\n  initializeObjectPositions() {\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          // initialize the object position\n          this.initializeObjectPosition(object);\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert a data x value to a pixel x value\n   * @param x an x value in data units\n   * @return the x value converted to a pixel coordinate\n   */\n  dataXToPixelX(x) {\n\n    // default the pixel x to start at the data x origin\n    let pixelX = this.dataXOriginInPixels;\n\n    if (x != null) {\n\n      // convert the x value to pixels and shift it by the x origin\n      pixelX += x * this.pixelsPerXUnit;\n    }\n\n    return pixelX;\n  }\n\n  /**\n   * Convert a data y value to a pixel y value\n   * @param y an y value in data units\n   * @return the y value converted to a pixel coordinate\n   */\n  dataYToPixelY(y) {\n\n    // default the pixel y to start at the data y origin\n    let pixelY = this.dataYOriginInPixels;\n\n    if (y != null) {\n      // convert the y value to pixels and shift it by the y origin\n      pixelY += y * this.pixelsPerYUnit;\n    }\n\n    return pixelY;\n  }\n\n  /**\n   * Initialize the object position in the svg world\n   * @param object the authored object\n   */\n  initializeObjectPosition(object) {\n    let id = object.id;\n    let label = object.label;\n    let data = object.data;\n    let dataX = object.dataX;\n    let dataY = object.dataY;\n    let pixelX = object.pixelX;\n    let pixelY = object.pixelY;\n\n    let x = 0;\n    let y = 0;\n\n    if (dataX != null) {\n      // the dataX position was provided\n\n      // convert the data x value to a pixel x value\n      x = this.dataXToPixelX(dataX);\n    } else if (pixelX != null) {\n      // the pixelX position was provided\n      x = pixelX;\n    }\n\n    if (dataY != null) {\n      // the dataY position was provided\n\n      // convert the data y value to a pixel y value\n      y = this.dataYToPixelY(dataY);\n    } else if (pixelY != null) {\n      // the pixelY position was provided\n      y = pixelY;\n    }\n\n    if (this.isUsingCartesianCoordinateSystem()) {\n      /*\n       * we are using the cartesian coordinate system so we need to modify\n       * the y value\n       */\n      y = this.convertToCartesianCoordinateSystem(y);\n    }\n\n    // get the svg object\n    let svgObject = this.idToSVGObject[id];\n\n    if (svgObject != null) {\n\n      // set the x and y pixel position\n      svgObject.attr({ x: x, y: y });\n\n      if (data != null && data.length > 0) {\n        // there is data for this object\n\n        // get the first data point\n        var firstDataPoint = data[0];\n\n        if (firstDataPoint != null) {\n\n          let firstDataPointT = firstDataPoint.t;\n          let firstDataPointX = firstDataPoint.x;\n          let firstDataPointY = firstDataPoint.y;\n\n          if (firstDataPointT === 0) {\n            /*\n             * there is a first data point with t == 0 so we will\n             * use it as the starting position\n             */\n\n            if (firstDataPointX != null && firstDataPointX != '' && typeof firstDataPointX != 'undefined') {\n              // convert the data x value to a pixel x value\n              let firstDataPointXInPixels = this.dataXToPixelX(firstDataPointX);\n              svgObject.attr('x', firstDataPointXInPixels);\n            }\n\n            if (firstDataPointY != null && firstDataPointY != '' && typeof firstDataPointY != 'undefined') {\n              // convert the data y value to a pixel y value\n              let firstDataPointYInPixels = this.dataYToPixelY(firstDataPointY);\n\n              if (this.isUsingCartesianCoordinateSystem()) {\n                /*\n                 * we are using the cartesian coordinate system so we need to modify\n                 * the y value\n                 */\n                firstDataPointYInPixels = this.convertToCartesianCoordinateSystem(firstDataPointYInPixels);\n              }\n\n              svgObject.attr('y', firstDataPointYInPixels);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Start the animation\n   */\n  startAnimation() {\n\n    // set the images back to their starting images in case they have changed\n    this.initializeObjectImages();\n\n    // put the objects in their starting positions\n    this.initializeObjectPositions();\n\n    if (this.componentContent != null) {\n\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n\n            // animate the object\n            this.animateObject(object);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the time on the svg div\n   * @param t the time\n   */\n  showTime(t) {\n\n    if (this.timerText == null) {\n      // initialize the timer text\n      this.timerText = this.draw.text('0').attr({ fill: '#f03' });\n    }\n\n    // get the width of the svg div\n    let width = this.width;\n\n    // set the x position near the top right of the svg div\n    let x = width - 30;\n    let y = 0;\n\n    // set the text that the student will see\n    this.timerText.text(t + '');\n\n    if (t >= 10) {\n      // shift the text to the left if there are two digits\n      x = width - 38;\n    } else if (t >= 100) {\n      // shift the text to the left more if there are three digits\n      x = width - 46;\n    }\n\n    // set the position of the text\n    this.timerText.attr({ x: x, y: y });\n  }\n\n  /**\n   * Update the object data from their data source\n   * @param componentState (optional) a component state which may be the\n   * data source for one of the objects\n   */\n  updateObjectDatasFromDataSources(componentState) {\n\n    if (this.componentContent != null) {\n\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n\n            if (object.dataSource != null) {\n              // the object gets its data from a data source\n              this.updateObjectDataFromDataSource(object, componentState);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the data from its data source\n   * @param object update the data for this object\n   * @param componentState (optional) The component state to get the data\n   * from. If this is not provided, we will look up the latest component\n   * state.\n   */\n  updateObjectDataFromDataSource(object, componentState) {\n\n    if (object != null) {\n\n      // get the data source details\n      let dataSource = object.dataSource;\n\n      if (dataSource != null) {\n        let nodeId = dataSource.nodeId;\n        let componentId = dataSource.componentId;\n\n        if (componentState == null) {\n          // the component state was not passed in so we will get it\n          componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n          // the component state matches the data source\n\n          if (componentState.componentType == 'Graph') {\n            this.setDataFromGraphComponentState(object, componentState);\n          } else if (componentState.componentType == 'Table') {\n            this.setDataFromTableComponentState(object, componentState);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the data from the graph component state\n   * @param object set the data into this object\n   * @param componentState\n   */\n  setDataFromGraphComponentState(object, componentState) {\n    if (object != null) {\n\n      // get the data source specification\n      let dataSource = object.dataSource;\n\n      if (dataSource != null) {\n        let nodeId = dataSource.nodeId;\n        let componentId = dataSource.componentId;\n        let trialIndex = dataSource.trialIndex;\n        let seriesIndex = dataSource.seriesIndex;\n        let tColumnIndex = dataSource.tColumnIndex;\n        let xColumnIndex = dataSource.xColumnIndex;\n        let yColumnIndex = dataSource.yColumnIndex;\n\n        if (componentState != null && nodeId == componentState.nodeId && componentId == componentState.componentId) {\n          // the component state matches the data source\n\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n            let trials = studentData.trials;\n\n            if (trials != null) {\n\n              // get the trial we ant\n              let trial = trials[trialIndex];\n\n              if (trial != null) {\n                let series = trial.series;\n\n                if (series != null) {\n\n                  // get the series we want\n                  let singleSeries = series[seriesIndex];\n\n                  if (singleSeries != null) {\n                    let seriesData = singleSeries.data;\n\n                    if (seriesData != null) {\n\n                      // array to store our animation data\n                      let data = [];\n\n                      // loop through all the points in the series\n                      for (let d = 0; d < seriesData.length; d++) {\n                        let seriesDataPoint = seriesData[d];\n\n                        // create a data point\n                        let animationDataPoint = {};\n\n                        if (tColumnIndex != null) {\n                          // get the t value\n                          animationDataPoint.t = seriesDataPoint[tColumnIndex];\n                        }\n\n                        if (xColumnIndex != null) {\n                          // get the x value\n                          animationDataPoint.x = seriesDataPoint[xColumnIndex];\n                        }\n\n                        if (yColumnIndex != null) {\n                          // get the y value\n                          animationDataPoint.y = seriesDataPoint[yColumnIndex];\n                        }\n\n                        // add the data point to the array\n                        data.push(animationDataPoint);\n                      }\n\n                      // set the data into the object\n                      object.data = data;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  setDataFromTableComponentState() {\n\n  }\n\n  /**\n   * Move the object\n   * @param object the authored object\n   */\n  animateObject(object) {\n\n    if (object != null) {\n      let id = object.id;\n      let data = object.data;\n\n      if (data != null) {\n\n        // get the svg object\n        let svgObject = this.idToSVGObject[id];\n\n        if (svgObject != null) {\n\n          /*\n           * this will hold SVG.FX object that is returned from\n           * calling animate()\n           */\n          let animateObject = null;\n\n          let thisAnimationController = this;\n\n          // loop through all the data\n          for (let d = 0; d < data.length; d++) {\n\n            // get the current point\n            let currentDataPoint = data[d];\n            let t = currentDataPoint.t;\n            let x = currentDataPoint.x;\n            let y = currentDataPoint.y;\n            let image = currentDataPoint.image;\n\n            // convert the data values to pixels\n            let xPixel = this.dataXToPixelX(x);\n            let yPixel = this.dataYToPixelY(y);\n\n            // get the next point\n            let nextDataPoint = data[d + 1];\n            let nextT = null;\n            let nextX = null;\n            let nextY = null;\n            let nextXPixel = null;\n            let nextYPixel = null;\n\n            if (nextDataPoint != null) {\n              nextT = nextDataPoint.t;\n              nextX = nextDataPoint.x;\n              nextY = nextDataPoint.y;\n\n              // convert the data values to pixels\n              nextXPixel = this.dataXToPixelX(nextX);\n              nextYPixel = this.dataYToPixelY(nextY);\n            }\n\n            if (this.isUsingCartesianCoordinateSystem()) {\n              /*\n               * we are using the cartesian coordinate system so we need to modify\n               * the y value\n               */\n              yPixel = this.convertToCartesianCoordinateSystem(yPixel);\n              nextYPixel = this.convertToCartesianCoordinateSystem(nextYPixel);\n            }\n\n            // set the animation state to true for the object\n            this.idToAnimationState[id] = true;\n\n            let tDiff = 0;\n\n            if (nextT != null && nextT != '') {\n              /*\n               * calculate the time difference so we know how long we should make\n               * it take to move to the new position\n               */\n              tDiff = nextT - t;\n            }\n\n            if (d == 0) {\n              // this is the first data point\n\n              if (t == 0) {\n                /*\n                 * immediately set the position since we are at\n                 * time 0\n                 */\n\n                // set the position\n                svgObject.attr({ x: xPixel, y: yPixel });\n              } else {\n                /*\n                 * the first data point is not at time 0 so we will\n                 * need to wait until time t before we set the\n                 * position of the object\n                 */\n                animateObject = svgObject.animate(t * this.realTimePerDataTime).during(function(pos, morph, eased, situation) {\n\n                  // calculate the amount of time that has elapsed\n                  let elapsedTime = t * pos;\n\n                  // display and broadcast the elapsed time\n                  thisAnimationController.displayAndBroadcastTime(elapsedTime);\n                }).after(function() {\n                  // set the position\n                  this.attr({ x: xPixel, y: yPixel });\n                });\n              }\n            }\n\n            if (image != null && image != '') {\n              /*\n               * there is an image specified for this data point\n               * so we will change to that image\n               */\n\n              if (animateObject == null) {\n                /*\n                 * there is no animateObject yet so we will\n                 * change the image immediately\n                 */\n                svgObject.load(image);\n              } else {\n                /*\n                 * change the image after all the existing\n                 * animations\n                 */\n                animateObject = animateObject.after(function() {\n                  this.load(image);\n                });\n              }\n            } else if (nextDataPoint != null) {\n              /*\n               * there is a next data point so we will see if we\n               * can determine what image to show based upon the\n               * movement of the object\n               */\n\n              // get the image to show based upon the movement\n              let dynamicallyCalculatedImage = this.getImageBasedOnMovement(object, currentDataPoint, nextDataPoint);\n\n              if (dynamicallyCalculatedImage != null) {\n                if (animateObject == null) {\n                  /*\n                   * there is no animateObject yet so we will\n                   * change the image immediately\n                   */\n                  svgObject.load(dynamicallyCalculatedImage);\n                } else {\n                  /*\n                   * change the image after all the existing\n                   * animations\n                   */\n                  animateObject = animateObject.after(function() {\n                    this.load(dynamicallyCalculatedImage);\n                  });\n                }\n              }\n            }\n\n            if (d != data.length - 1) {\n              // this is a data point that is not the last\n\n              // move the image to the next position\n              animateObject = svgObject.animate(tDiff * this.realTimePerDataTime).move(nextXPixel, nextYPixel).during(function(pos, morph, eased, situation) {\n\n                // calculate the elapsed time\n                let elapsedTime = t + (tDiff * pos);\n\n                // display and broadcast the elapsed time\n                thisAnimationController.displayAndBroadcastTime(elapsedTime);\n              });\n            }\n\n            if (d == data.length - 1) {\n              // this is the last data point\n\n              // after all the animations are done on the object we will perform some processing\n              animateObject = animateObject.afterAll(() => {\n\n                /*\n                 * we are done animating this object so we will\n                 * set the animation state to false for the\n                 * object\n                 */\n                this.idToAnimationState[id] = false;\n\n                // check if all svg objects are done animating\n                this.checkIfAllAnimatingIsDone();\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Display and broadcast the time\n   * @param t the time\n   */\n  displayAndBroadcastTime(t) {\n\n    let currentTime = new Date().getTime();\n\n    if (this.lastBroadcastTime == null) {\n      this.lastBroadcastTime = currentTime;\n    }\n\n    if (currentTime - this.lastBroadcastTime > 100) {\n      /*\n       * Remove the digits after the first decimal place.\n       * example\n       * 12.817 will be changed to 12.8\n       */\n      let displayTime = parseInt(t * 10) / 10;\n\n      // show the time on the svg div\n      this.showTime(displayTime);\n\n      // create a component state with the time in it\n      let componentState = {};\n      componentState.t = t;\n\n      /*\n       * broadcast the component state with the time in it\n       * so other components can know the elapsed time\n       */\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n\n      this.lastBroadcastTime = currentTime;\n    }\n  }\n\n  /**\n   * Get the image based upon the movement of the object\n   * @param object the object that is being moved\n   * @param currentDataPoint the current data point\n   * @param nextDataPoint the next data point\n   */\n  getImageBasedOnMovement(object, currentDataPoint, nextDataPoint) {\n\n    let image = null;\n\n    if (currentDataPoint != null && nextDataPoint != null) {\n\n      let currentX = currentDataPoint.x;\n      let currentY = currentDataPoint.y;\n\n      let nextX = nextDataPoint.x;\n      let nextY = nextDataPoint.y;\n\n      if (currentY == nextY) {\n        // there is no change in y\n\n        if (currentX == nextX) {\n          // there is no change in x\n\n          // the image is staying in place\n        } else if (currentX < nextX) {\n          // x is moving to the right\n          if (object.imageMovingRight != null && object.imageMovingRight != '') {\n            image = object.imageMovingRight;\n          }\n        } else if (currentX > nextX) {\n          // x is moving to the left\n          if (object.imageMovingLeft != null && object.imageMovingLeft != '') {\n            image = object.imageMovingLeft;\n          }\n        }\n      } else if (currentX == nextX) {\n        // there is no change in x\n\n        if (currentY == nextY) {\n          // there is no change in y\n\n          // the image is staying in place\n        } else if (currentY < nextY) {\n          // y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // y is moving up\n            if (object.imageMovingUp != null && object.imageMovingUp != '') {\n              image = object.imageMovingUp;\n            }\n          } else {\n            // y is moving down\n            if (object.imageMovingDown != null && object.imageMovingDown != '') {\n              image = object.imageMovingDown;\n            }\n          }\n        } else if (currentY > nextY) {\n          // y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // y is moving down\n            if (object.imageMovingDown != null && object.imageMovingDown != '') {\n              image = object.imageMovingDown;\n            }\n          } else {\n            // y is moving up\n            if (object.imageMovingUp != null && object.imageMovingUp != '') {\n              image = object.imageMovingUp;\n            }\n          }\n        }\n      } else {\n        // there is a change in x and y\n\n        // TODO: fill out these if/else cases by setting the appropriate image\n\n        if (currentX < nextX && currentY < nextY) {\n          // x is getting larger and y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving up to the right\n          } else {\n            // the image is moving down to the right\n          }\n        } else if (currentX < nextX && currentY > nextY) {\n          // x is getting larger and y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving down to the right\n          } else {\n            // the image is moving up to the right\n          }\n        } else if (currentX > nextX && currentY > nextY) {\n          // x is getting smaller and y is getting smaller\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving down to the left\n          } else {\n            // the image is moving up to the left\n          }\n        } else if (currentX > nextX && currentY < nextY) {\n          // x is getting smaller and y is getting larger\n\n          if (this.isUsingCartesianCoordinateSystem()) {\n            // the image is moving up to the right\n          } else {\n            // the image is moving down to the right\n          }\n        }\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Check if all svg objects are done animating. If there are not svg objects\n   * animating, we will set the animationState to 'stopped'.\n   */\n  checkIfAllAnimatingIsDone() {\n\n    // check if there are any other objects that are still animating\n    if (!this.areAnyObjectsAnimating()) {\n      // there are no objects animating\n\n      // set the animation state to 'stopped'\n      this.animationState = 'stopped';\n\n      // perform a digest after a timeout so that the buttons update\n      this.$timeout(() => {\n        this.$scope.$digest();\n      });\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var response = studentData.response;\n\n        if (response != null) {\n          // populate the text the student previously typed\n          this.studentResponse = response;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    if (this.mode === 'authoring') {\n      /*\n       * we are in authoring mode so we will set isDirty to false here\n       * because the 'componentSaveTriggered' event won't work in\n       * authoring mode\n       */\n      this.isDirty = false;\n    }\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('animation.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('animation.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('animation.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    var performCRaterScoring = false;\n\n    // determine if we need to perform CRater scoring\n    if (action == 'submit' && componentState.isSubmit) {\n      if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'save') {\n      if (this.isCRaterScoreOnSave(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'change' || action == null) {\n      if (this.isCRaterScoreOnChange(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    }\n\n    if (performCRaterScoring) {\n      // we need to perform CRater scoring\n\n      var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n      var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n      var cRaterRequestType = 'scoring';\n      var cRaterResponseId = new Date().getTime();\n      var studentData = this.studentResponse;\n\n      /*\n       * display a dialog message while the student waits for their work\n       * to be scored by CRater\n       */\n      this.$mdDialog.show({\n        template: '<md-dialog aria-label=\"' + this.$translate('animation.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('animation.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n        escapeToClose: false\n      });\n\n      // make the CRater request to score the student data\n      this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n        if (result != null) {\n\n          // get the CRater response\n          var data = result.data;\n\n          if (data != null) {\n\n            /*\n             * annotations we put in the component state will be\n             * removed from the component state and saved separately\n             */\n            componentState.annotations = [];\n\n            // get the CRater score\n            let score = data.score;\n            let concepts = data.concepts;\n            let previousScore = null;\n\n            if (score != null) {\n\n              // create the auto score annotation\n              let autoScoreAnnotationData = {};\n              autoScoreAnnotationData.value = score;\n              autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n              autoScoreAnnotationData.concepts = concepts;\n              autoScoreAnnotationData.autoGrader = 'cRater';\n\n              let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n              let annotationGroupForScore = null;\n\n              if (this.$scope.$parent.nodeController != null) {\n                // get the previous score and comment annotations\n                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                if (latestAnnotations != null && latestAnnotations.score != null &&\n                  latestAnnotations.score.data != null) {\n\n                  // get the previous score annotation value\n                  previousScore = latestAnnotations.score.data.value;\n                }\n\n                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                  let globalAnnotationMaxCount = 0;\n                  if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                  }\n                  // get the annotation properties for the score that the student got.\n                  annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                  // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                  if (annotationGroupForScore != null) {\n                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                      // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                      annotationGroupForScore = null;\n                    }\n                  }\n\n                  if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                      // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                      // so we can compare it when we check for criteria satisfaction.\n                      if (unGlobalizeCriteria.params != null) {\n                        unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                      }\n                    });\n                  }\n\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoScoreAnnotation's data\n                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                  }\n                }\n              }\n\n              componentState.annotations.push(autoScoreAnnotation);\n\n              if (this.mode === 'authoring') {\n                if (this.latestAnnotations == null) {\n                  this.latestAnnotations = {};\n                }\n\n                /*\n                 * we are in the authoring view so we will set the\n                 * latest score annotation manually\n                 */\n                this.latestAnnotations.score = autoScoreAnnotation;\n              }\n\n              var autoComment = null;\n\n              // get the submit counter\n              var submitCounter = this.submitCounter;\n\n              if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                /*\n                 * this step has multiple attempt scoring rules and this is\n                 * a subsequent submit\n                 */\n                // get the feedback based upon the previous score and current score\n                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n              } else {\n                // get the feedback text\n                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n              }\n\n              if (autoComment != null) {\n                // create the auto comment annotation\n                var autoCommentAnnotationData = {};\n                autoCommentAnnotationData.value = autoComment;\n                autoCommentAnnotationData.concepts = concepts;\n                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                if (this.componentContent.enableGlobalAnnotations) {\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoCommentAnnotation's data\n                    angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                  }\n                }\n                componentState.annotations.push(autoCommentAnnotation);\n\n                if (this.mode === 'authoring') {\n                  if (this.latestAnnotations == null) {\n                    this.latestAnnotations = {};\n                  }\n\n                  /*\n                   * we are in the authoring view so we will set the\n                   * latest comment annotation manually\n                   */\n                  this.latestAnnotations.comment = autoCommentAnnotation;\n                }\n              }\n              if (this.componentContent.enableNotifications) {\n                // get the notification properties for the score that the student got.\n                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                if (notificationForScore != null) {\n                  notificationForScore.score = score;\n                  notificationForScore.nodeId = this.nodeId;\n                  notificationForScore.componentId = this.componentId;\n                  this.NotificationService.sendNotificationForScore(notificationForScore);\n                }\n              }\n\n              // display global annotations dialog if needed\n              if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                this.$scope.$emit('displayGlobalAnnotations');\n              }\n            }\n          }\n        }\n\n        /*\n         * hide the dialog that tells the student to wait since\n         * the work has been scored.\n         */\n        this.$mdDialog.hide();\n\n        // resolve the promise now that we are done performing additional processing\n        deferred.resolve(componentState);\n      });\n    } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      // if there are any additionalProcessingFunctions for this node and component, call all of them\n      let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n        let additionalProcessingFunction = additionalProcessingFunctions[i];\n        let defer = this.$q.defer();\n        let promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      /*\n       * we don't need to perform any additional processing so we can resolve\n       * the promise immediately\n       */\n      deferred.resolve(componentState);\n    }\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.AnimationService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n    });\n  };\n\n  /**\n   * Add a scoring rule\n   */\n  authoringAddScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // create a scoring rule object\n      var newScoringRule = {};\n      newScoringRule.score = '';\n      newScoringRule.feedbackText = '';\n\n      // add the new scoring rule object\n      this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a scoring rule up\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the top\n      if (index != 0) {\n        // the scoring rule is not at the top so we can move it up\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a scoring rule down\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the end\n      if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a scoring rule\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // get the scoring rule\n      var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n      if (scoringRule != null) {\n\n        // get the score and feedback text\n        var score = scoringRule.score;\n        var feedbackText = scoringRule.feedbackText;\n\n        // make sure the author really wants to delete the scoring rule\n        //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n        var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the scoring rule\n          this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n   * we can add different types in the future.\n   */\n  authoringAddNotification() {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // create a new notification\n      let newNotification = {\n        notificationType: 'CRaterResult',\n        enableCriteria: {\n          scoreSequence: ['', '']\n        },\n        isAmbient: false,\n        dismissCode: 'apple',\n        isNotifyTeacher: true,\n        isNotifyStudent: true,\n        notificationMessageToStudent: '{{username}}, ' + this.$translate('animation.youGotAScoreOf') + ' {{score}}. ' + this.$translate('animation.pleaseTalkToYourTeacher') + '.',\n        notificationMessageToTeacher: '{{username}} ' + this.$translate('animation.gotAScoreOf') + ' {{score}}.'\n      };\n\n      // add the new notification\n      this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n      // the author has made changes so we will save the component content\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a multiple attempt scoring rule\n   */\n  authoringAddMultipleAttemptScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // create a new multiple attempt scoring rule\n      var newMultipleAttemptScoringRule = {};\n      newMultipleAttemptScoringRule.scoreSequence = ['', ''];\n      newMultipleAttemptScoringRule.feedbackText = '';\n\n      // add the new multiple attempt scoring rule\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule up\n   * @param index\n   */\n  authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not already at the top\n      if (index != 0) {\n        // the multiple attempt scoring rule is not at the top\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule down\n   * @param index the index of the multiple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not at the end\n      if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n        // the multiple attempt scoring rule is not at the end\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a multiple attempt scoring rule\n   * @param index the index of the mulitple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // get the multiple attempt scoring rule\n      var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n      if (multipleAttemptScoringRule != null) {\n\n        // get the score sequence\n        var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // get the feedback text\n        var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n        // make sure the author really wants to delete the multiple attempt scoring rule\n        var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the multiple attempt scoring rule\n          this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Move a notification up\n   * @param index of the notification\n   */\n  authoringViewNotificationUpClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not already at the top\n      if (index != 0) {\n        // the notification is not at the top\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index back\n        this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a notification down\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDownClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not at the end\n      if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n        // the notification is not at the end\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index forward\n        this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a notification\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDeleteClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // get the notification\n      var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n      if (notification != null) {\n\n        // get the score sequence\n        var scoreSequence = notification.enableCriteria.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // make sure the author really wants to delete the notification\n        var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n        if (answer) {\n          // the author answered yes to delete the notification\n          this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n          // the author has made changes so we will save the component content\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * The \"Enable CRater\" checkbox was clicked\n   */\n  authoringViewEnableCRaterClicked() {\n\n    if (this.authoringComponentContent.enableCRater) {\n      // CRater was turned on\n\n      if (this.authoringComponentContent.cRater == null) {\n        /*\n         * the cRater object does not exist in the component content\n         * so we will create it\n         */\n\n        // create the cRater object\n        var cRater = {};\n        cRater.itemType = 'CRATER';\n        cRater.itemId = '';\n        cRater.scoreOn = 'submit';\n        cRater.showScore = true;\n        cRater.showFeedback = true;\n        cRater.scoringRules = [];\n        cRater.enableMultipleAttemptScoringRules = false;\n        cRater.multipleAttemptScoringRules = []\n\n        // set the cRater object into the component content\n        this.authoringComponentContent.cRater = cRater;\n      }\n\n      // turn on the submit button\n      //this.authoringComponentContent.showSubmitButton = true;\n      this.setShowSubmitButtonValue(true);\n    } else {\n      // CRater was turned off\n\n      // turn off the submit button\n      this.setShowSubmitButtonValue(false);\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n   */\n  enableMultipleAttemptScoringRulesClicked() {\n\n    // get the cRater object from the component content\n    var cRater = this.authoringComponentContent.cRater;\n\n    if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n      /*\n       * the multiple attempt scoring rules array does not exist so\n       * we will create it\n       */\n      cRater.multipleAttemptScoringRules = [];\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Notifications\" checkbox was clicked\n   */\n  authoringViewEnableNotificationsClicked() {\n\n    if (this.authoringComponentContent.enableNotifications) {\n      // Notifications was turned on\n\n      if (this.authoringComponentContent.notificationSettings == null) {\n        /*\n         * the NotificationSettings object does not exist in the component content\n         * so we will create it\n         */\n        this.authoringComponentContent.notificationSettings = {\n          notifications: []\n        };\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions() {\n    // get the component states for this component\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  };\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The play button was clicked\n   */\n  playButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'playing';\n\n    // start the animation\n    this.startAnimation();\n  }\n\n  /**\n   * The pause button was clicked\n   */\n  pauseButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'paused';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n\n              // pause the object from animating\n              svgObject.pause();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The resume button was clicked\n   */\n  resumeButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'playing';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n              /*\n               * Check if the object still needs to be animated or\n               * if it has already finished performing all of its\n               * animation. We only need to play it if it still\n               * has more animating.\n               */\n              if (this.idToAnimationState[id]) {\n                // resume playing the object animation\n                svgObject.play();\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The reset button was clicked\n   */\n  resetButtonClicked() {\n\n    // set the animation state\n    this.animationState = 'stopped';\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            // get the svg object\n            let svgObject = this.idToSVGObject[id];\n\n            if (svgObject != null) {\n\n              let jumpToEnd = true;\n              let clearQueue = true;\n\n              /*\n               * Check if the object still needs to be animated or\n               * if it has already finished performing all of its\n               * animation. We only need to play it if it still\n               * has more animating.\n               */\n              if (this.idToAnimationState[id]) {\n                /*\n                 * We need to play it in case it is currently paused.\n                 * There is a minor bug in the animation library\n                 * which is caused if you pause an animation and\n                 * then stop the animation. Then if you try to play the\n                 * animation, the animation will not play. We avoid\n                 * this problem by making sure the object animation\n                 * is playing when we stop it.\n                 */\n                svgObject.play();\n              }\n\n              // stop the object from animating\n              svgObject.stop(jumpToEnd, clearQueue);\n            }\n          }\n        }\n      }\n    }\n\n    // set the display time to 0\n    this.showTime(0);\n\n    // set the images back to their starting images in case they have changed\n    this.initializeObjectImages();\n\n    // put the objects in their starting positions\n    this.initializeObjectPositions();\n  }\n\n  /**\n   * Check if any of the objects are animating\n   * @return whether any of the objects are animating\n   */\n  areAnyObjectsAnimating() {\n\n    if (this.componentContent != null) {\n\n      // get the objects\n      let objects = this.componentContent.objects;\n\n      if (objects != null) {\n\n        // loop through all the objects\n        for (let o = 0; o < objects.length; o++) {\n          let object = objects[o];\n\n          if (object != null) {\n            let id = object.id;\n\n            /*\n             * check if the object still needs to be animated or if\n             * it has already finished performing all of its\n             * animating\n             */\n            if (this.idToAnimationState[id]) {\n              // an object is animating\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Whether we are using the cartesian coordinate system\n   * @return whether we are using the cartesian coordinate system\n   */\n  isUsingCartesianCoordinateSystem() {\n\n    if (this.coordinateSystem == 'cartesian') {\n      // we are using the cartesian coordinate system\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Convert the y value to the cartesian coordinate system\n   * @param y the pixel y value in the screen coordinate system\n   * @return the pixel y value in the cartesian coordinate system\n   */\n  convertToCartesianCoordinateSystem(y) {\n    return this.height - y;\n  }\n\n  /**\n   * The student changed the speed slider value\n   */\n  speedSliderChanged() {\n\n    if (this.speedSliderValue == 1) {\n      this.realTimePerDataTime = 10000;\n    } else if (this.speedSliderValue == 2) {\n      this.realTimePerDataTime = 1000;\n    } else if (this.speedSliderValue == 3) {\n      this.realTimePerDataTime = 100;\n    } else if (this.speedSliderValue == 4) {\n      this.realTimePerDataTime = 10;\n    } else if (this.speedSliderValue == 5) {\n      this.realTimePerDataTime = 1;\n    }\n\n    // reset the animation\n    this.resetButtonClicked();\n  }\n\n  /**\n   * Remove all the objects from the svg div\n   */\n  removeAllObjects() {\n\n    if (this.idToSVGObject != null) {\n\n      // get all the object ids\n      var keys = Object.keys(this.idToSVGObject);\n\n      if (keys != null) {\n\n        // loop through all the keys\n        for (var k = 0; k < keys.length; k++) {\n          var key = keys[k];\n\n          // get the svg object\n          var svgObject = this.idToSVGObject[key];\n\n          if (svgObject != null) {\n            // remove the svg object from the svg div\n            svgObject.remove();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a new object\n   */\n  authoringAddObjectClicked() {\n\n    // initialize the objects array if necessary\n    if (this.authoringComponentContent.objects == null) {\n      this.authoringComponentContent.objects = [];\n    }\n\n    // create a new object\n    var newObject = {};\n    newObject.id = this.UtilService.generateKey(10);\n    newObject.type = 'image';\n\n    // add the object to our array of objects\n    this.authoringComponentContent.objects.push(newObject);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a data point to an object\n   * @param object add a data point to this object\n   */\n  authoringAddDataPointClicked(object) {\n    if (object != null) {\n\n      if (object.dataSource != null) {\n        // the object already has a data source\n\n        // ask the user if they are sure they want to delete the data source\n        var answer = confirm('You can only have Data Points or a Data Source. If you add a Data Point, the Data Source will be deleted. Are you sure you want to add a Data Point?');\n\n        if (answer) {\n          // the author answered yes to delete the data source\n          delete object.dataSource;\n\n          // initialize the data array if necessary\n          if (object.data == null) {\n            object.data = [];\n          }\n\n          // create a new data point\n          var newDataPoint = {};\n\n          // add the new data point\n          object.data.push(newDataPoint);\n        }\n      } else {\n        // the object does not have a data source so we can add a data point\n\n        // initialize the data array if necessary\n        if (object.data == null) {\n          object.data = [];\n        }\n\n        // create a new data point\n        var newDataPoint = {};\n\n        // add the new data point\n        object.data.push(newDataPoint);\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a data point from an object\n   * @param object the object to delete a data point from\n   * @param index the index of the data point to delete\n   */\n  authoringDeleteObjectDataPointClicked(object, index) {\n\n    if (object != null && object.data != null) {\n\n      // ask the author if they are sure they want to delete the point\n      var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisDataPoint'));\n\n      if (answer) {\n        // delete the data point at the given index\n        object.data.splice(index, 1);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a data point up\n   * @param object the object the data point belongs to\n   * @param index the index of the data point in the object\n   */\n  authoringMoveObjectDataPointUpClicked(object, index) {\n    if (object != null && object.data != null) {\n\n      if (index > 0) {\n        // the data point is not at the top so we can move it up\n\n        // remember the data point we are moving\n        var dataPoint = object.data[index];\n\n        // remove the data point at the given index\n        object.data.splice(index, 1);\n\n        // insert the data point back in at one index back\n        object.data.splice(index - 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a data point down\n   * @param object the object the data point belongs to\n   * @param index the index of the data point in the object\n   */\n  authoringMoveObjectDataPointDownClicked(object, index) {\n    if (object != null && object.data != null) {\n\n      if (index < object.data.length - 1) {\n        // the data point is not at the bottom so we can move it down\n\n        // remember the data point we are moving\n        var dataPoint = object.data[index];\n\n        // remove the data point at the given index\n        object.data.splice(index, 1);\n\n        // insert the data point back in at one index forward\n        object.data.splice(index + 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move an object up\n   * @param index the index of the object\n   */\n  authoringMoveObjectUpClicked(index) {\n\n    if (this.authoringComponentContent != null) {\n\n      var objects = this.authoringComponentContent.objects;\n\n      if (objects != null) {\n\n        if (index > 0) {\n          // the object is not at the top so we can move it up\n\n          // remember the object we are moving\n          var object = objects[index];\n\n          // remove the object\n          objects.splice(index, 1);\n\n          // insert the object back in at one index back\n          objects.splice(index - 1, 0, object);\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move an object down\n   * @param index the index of the object\n   */\n  authoringMoveObjectDownClicked(index) {\n\n    if (this.authoringComponentContent != null) {\n\n      var objects = this.authoringComponentContent.objects;\n\n      if (objects != null) {\n\n        if (index < objects.length - 1) {\n          // the object is not at the bottom so we can move it down\n\n          // remember the object we are moving\n          var object = objects[index];\n\n          // remove the object\n          objects.splice(index, 1);\n\n          // insert the object back in at one index forward\n          objects.splice(index + 1, 0, object);\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete an object\n   * @param index the index of the object\n   */\n  authoringDeleteObjectClicked(index) {\n\n    if (this.authoringComponentContent != null) {\n\n      var answer = confirm(this.$translate('animation.areYouSureYouWantToDeleteThisObject'));\n\n      if (answer) {\n        var objects = this.authoringComponentContent.objects;\n\n        if (objects != null) {\n          // remove the object from the array of objects\n          objects.splice(index, 1);\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   */\n  getComponentByNodeIdAndComponentId(nodeId, componentId) {\n    return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n  }\n\n  /**\n   * The add data source button was clicked\n   * @param object the object we will add the data source to\n   */\n  authoringAddDataSourceClicked(object) {\n\n    if (object != null && object.data != null && object.data.length > 0) {\n      /*\n       * the object has data so we will ask the author if they are sure\n       * they want to add a data source which will remove the data\n       */\n\n      var answer = confirm('You can only have Data Points or a Data Source. If you add a Data Source, the Data Points will be deleted. Are you sure you want to add a Data Source?');\n\n      if (answer) {\n        // the author answered yes to delete the data points\n\n        // delete the data points\n        delete object.data;\n\n        // add the data source\n        object.dataSource = {};\n      }\n    } else {\n      // there are no data points so we can add the data source\n\n      // delete the data points\n      delete object.data;\n\n      // add the data source\n      object.dataSource = {};\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The delete data source button was clicked\n   * @param object the object to delete the data source from\n   */\n  authoringDeleteDataSourceClicked(object) {\n\n    // ask the author if they are sure they want to delete the data source\n    var answer = confirm('Are you sure you want to delete the Data Source?');\n\n    if (answer) {\n      // the author answered yes to delete the data source\n      delete object.dataSource;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The data source node has changed\n   * @param object the object that has changed\n   */\n  dataSourceNodeChanged(object) {\n\n    if (object != null) {\n\n      // remember the node id\n      var nodeId = object.dataSource.nodeId;\n\n      // clear the dataSource object except for the node id\n      object.dataSource = {\n        nodeId: nodeId\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The data source component has changed\n   * @param object the object that has changed\n   */\n  dataSourceComponentChanged(object) {\n\n    if (object != null) {\n\n      // remember the node id and component id\n      var nodeId = object.dataSource.nodeId;\n      var componentId = object.dataSource.componentId;\n\n      // get the component\n      var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      // clear the dataSource object except for the node id and component id\n      object.dataSource = {\n        nodeId: nodeId,\n        componentId: componentId\n      };\n\n      if (component != null && component.type == 'Graph') {\n        // set the default parameters for a graph data source\n        object.dataSource.trialIndex = 0;\n        object.dataSource.seriesIndex = 0;\n        object.dataSource.tColumnIndex = 0;\n        object.dataSource.xColumnIndex = 1;\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the image\n   */\n  chooseImage(object) {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'image';\n    params.targetObject = object;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the image moving left\n   * @param object the object to set the image moving left\n   */\n  chooseImageMovingLeft(object) {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'imageMovingLeft';\n    params.targetObject = object;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the image moving right\n   * @param object the object to set the image moving right\n   */\n  chooseImageMovingRight(object) {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'imageMovingRight';\n    params.targetObject = object;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * The type for an object changed\n   * @param object the object that changed\n   */\n  authoringObjectTypeChanged(object) {\n\n    if (object != null) {\n      if (object.type == 'image') {\n        // the type changed to an image so we will delete the text field\n        delete object.text;\n      } else if (object.type == 'text') {\n        // the type changed to text so we will delete the image fields\n        delete object.image;\n        delete object.width;\n        delete object.height;\n        delete object.imageMovingLeft;\n        delete object.imageMovingRight;\n        delete object.imageMovingUp;\n        delete object.imageMovingDown;\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student data\n   * @param componentStates an array of component states\n   * @return a component state with the merged student data\n   */\n  createMergedComponentState(componentStates) {\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedResponse = '';\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n\n          }\n        }\n      }\n      if (mergedResponse != null && mergedResponse != '') {\n        mergedComponentState.studentData = {};\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nAnimationController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnimationService',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AnimationController;\n"]}