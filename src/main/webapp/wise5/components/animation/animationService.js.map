{"version":3,"sources":["animationService.es6"],"names":["AnimationService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","widthInPixels","widthInUnits","heightInPixels","heightInUnits","dataXOriginInPixels","dataYOriginInPixels","coordinateSystem","objects","componentToCopy","createComponent","starterSentence","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","response","completionCriteria","isCompletionCriteriaSatisfied","studentDataString","componentContent","$inject"],"mappings":"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","file":"animationService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass AnimationService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Animation\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('animation.componentTypeLabel');\n  }\n\n  /**\n   * Create a Animation component object\n   * @returns a new Animation component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'Animation';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.isStudentAttachmentEnabled = false;\n    component.widthInPixels = 600;\n    component.widthInUnits = 60;\n    component.heightInPixels = 200;\n    component.heightInUnits = 20;\n    component.dataXOriginInPixels = 0;\n    component.dataYOriginInPixels = 80;\n    component.coordinateSystem = 'screen';\n    component.objects = [];\n    return component;\n  }\n\n  /**\n   * Copies a Animation component object\n   * @returns a copied Animation component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.starterSentence = componentToCopy.starterSentence;\n    component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n    return component;\n  }\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'Animation') {\n        // the other component is an Animation component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.response) {\n              // there is a response so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.response) {\n            // there is a response so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    if (component.completionCriteria != null) {\n      /*\n       * there is a special completion criteria authored in this component\n       * so we will evaluate the completion criteria to see if the student\n       * has completed this component\n       */\n      result = this.StudentDataService.isCompletionCriteriaSatisfied(component.completionCriteria);\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return a human readable student data string\n   */\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // get the response the student typed\n        studentDataString = studentData.response;\n      }\n    }\n\n    return studentDataString;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nAnimationService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AnimationService;\n"]}