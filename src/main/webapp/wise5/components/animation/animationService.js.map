{"version":3,"sources":["animationService.es6"],"names":["AnimationService","$filter","StudentDataService","UtilService","$translate","component","type","widthInPixels","widthInUnits","heightInPixels","heightInUnits","dataXOriginInPixels","dataYOriginInPixels","coordinateSystem","objects","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","showSubmitButton","showSaveButton","i","l","state","isSubmit","studentData","response","componentState","completionCriteria","isCompletionCriteriaSatisfied","studentDataString","componentContent","$inject"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEMA,gB;;;AACJ,4BAAYC,OAAZ,EAAqBC,kBAArB,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,+HAC9CF,OAD8C,EACrCC,kBADqC,EACjBC,WADiB;AAErD;;;;4CAEuB;AACtB,aAAO,KAAKC,UAAL,CAAgB,8BAAhB,CAAP;AACD;;;sCAEiB;AAChB,UAAMC,+IAAN;AACAA,gBAAUC,IAAV,GAAiB,WAAjB;AACAD,gBAAUE,aAAV,GAA0B,GAA1B;AACAF,gBAAUG,YAAV,GAAyB,EAAzB;AACAH,gBAAUI,cAAV,GAA2B,GAA3B;AACAJ,gBAAUK,aAAV,GAA0B,EAA1B;AACAL,gBAAUM,mBAAV,GAAgC,CAAhC;AACAN,gBAAUO,mBAAV,GAAgC,EAAhC;AACAP,gBAAUQ,gBAAV,GAA6B,QAA7B;AACAR,gBAAUS,OAAV,GAAoB,EAApB;AACA,aAAOT,SAAP;AACD;;;gCAEWA,S,EAAWU,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACzE,UAAIC,SAAS,KAAb;;AAEA,UAAIJ,mBAAmBA,gBAAgBK,MAAvC,EAA+C;AAC7C,YAAIC,iBAAiBH,KAAKI,gBAAL,IAA0BjB,UAAUiB,gBAAV,IAA8B,CAACJ,KAAKK,cAAnF;;AAEA,YAAIF,cAAJ,EAAoB;AAClB;AACA,eAAK,IAAIG,IAAI,CAAR,EAAWC,IAAIV,gBAAgBK,MAApC,EAA4CI,IAAIC,CAAhD,EAAmDD,GAAnD,EAAwD;AACtD,gBAAIE,QAAQX,gBAAgBS,CAAhB,CAAZ;AACA,gBAAIE,MAAMC,QAAN,IAAkBD,MAAME,WAA5B,EAAyC;AACvC;AACA,kBAAIF,MAAME,WAAN,CAAkBC,QAAtB,EAAgC;AAC9B;AACAV,yBAAS,IAAT;AACA;AACD;AACF;AACF;AACF,SAbD,MAaO;AACL;AACA,cAAIM,KAAIV,gBAAgBK,MAAhB,GAAyB,CAAjC;AACA,cAAIU,iBAAiBf,gBAAgBU,EAAhB,CAArB;;AAEA,cAAIG,cAAcE,eAAeF,WAAjC;;AAEA,cAAIA,eAAe,IAAnB,EAAyB;AACvB,gBAAIA,YAAYC,QAAhB,EAA0B;AACxB;AACAV,uBAAS,IAAT;AACD;AACF;AACF;AACF;;AAED,UAAId,UAAU0B,kBAAV,IAAgC,IAApC,EAA0C;AACxC;;;;;AAKAZ,iBAAS,KAAKjB,kBAAL,CAAwB8B,6BAAxB,CAAsD3B,UAAU0B,kBAAhE,CAAT;AACD;;AAED,aAAOZ,MAAP;AACD;;;yCAEoBW,c,EAAgB;;AAEnC,UAAIG,oBAAoB,EAAxB;;AAEA,UAAIH,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIF,cAAcE,eAAeF,WAAjC;;AAEA,YAAIA,eAAe,IAAnB,EAAyB;AACvB;AACAK,8BAAoBL,YAAYC,QAAhC;AACD;AACF;;AAED,aAAOI,iBAAP;AACD;;;iDAE4BH,c,EAAgBI,gB,EAAkB;AAC7D,UAAIJ,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIF,cAAcE,eAAeF,WAAjC;AACA,YAAIA,eAAe,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;;;;AAGH5B,iBAAiBmC,OAAjB,GAA2B,CACzB,SADyB,EAEzB,oBAFyB,EAGzB,aAHyB,CAA3B;;kBAMenC,gB","file":"animationService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass AnimationService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('animation.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Animation';\n    component.widthInPixels = 600;\n    component.widthInUnits = 60;\n    component.heightInPixels = 200;\n    component.heightInUnits = 20;\n    component.dataXOriginInPixels = 0;\n    component.dataYOriginInPixels = 80;\n    component.coordinateSystem = 'screen';\n    component.objects = [];\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.response) {\n              // there is a response so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.response) {\n            // there is a response so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    if (component.completionCriteria != null) {\n      /*\n       * there is a special completion criteria authored in this component\n       * so we will evaluate the completion criteria to see if the student\n       * has completed this component\n       */\n      result = this.StudentDataService.isCompletionCriteriaSatisfied(component.completionCriteria);\n    }\n\n    return result;\n  };\n\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // get the response the student typed\n        studentDataString = studentData.response;\n      }\n    }\n\n    return studentDataString;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nAnimationService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AnimationService;\n"]}