{"version":3,"sources":["animationService.es6"],"names":["AnimationService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","widthInPixels","widthInUnits","heightInPixels","heightInUnits","dataXOriginInPixels","dataYOriginInPixels","coordinateSystem","objects","componentToCopy","createComponent","starterSentence","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","response","completionCriteria","isCompletionCriteriaSatisfied","componentContent","annotation","cRater","showScore","showAutoScore","showFeedback","showAutoFeedback","displayToStudent","studentDataString","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,gB;;;AACF,8BAAYC,OAAZ,EACYC,kBADZ,EAEYC,WAFZ,EAEyB;AAAA;;AAAA;;AAErB,cAAKF,OAAL,GAAeA,OAAf;AACA,cAAKC,kBAAL,GAA0BA,kBAA1B;AACA,cAAKC,WAAL,GAAmBA,WAAnB;;AAEA,cAAKC,UAAL,GAAkB,MAAKH,OAAL,CAAa,WAAb,CAAlB;AANqB;AAOxB;;AAED;;;;;;;;;gDAKwB;AACpB,mBAAO,KAAKG,UAAL,CAAgB,8BAAhB,CAAP;AACH;;AAED;;;;;;;0CAIkB;AACd,gBAAIC,YAAY,EAAhB;AACAA,sBAAUC,EAAV,GAAe,KAAKH,WAAL,CAAiBI,WAAjB,EAAf;AACAF,sBAAUG,IAAV,GAAiB,WAAjB;AACAH,sBAAUI,MAAV,GAAmB,EAAnB;AACAJ,sBAAUK,cAAV,GAA2B,KAA3B;AACAL,sBAAUM,gBAAV,GAA6B,KAA7B;AACAN,sBAAUO,0BAAV,GAAuC,KAAvC;AACAP,sBAAUQ,aAAV,GAA0B,GAA1B;AACAR,sBAAUS,YAAV,GAAyB,EAAzB;AACAT,sBAAUU,cAAV,GAA2B,GAA3B;AACAV,sBAAUW,aAAV,GAA0B,EAA1B;AACAX,sBAAUY,mBAAV,GAAgC,CAAhC;AACAZ,sBAAUa,mBAAV,GAAgC,EAAhC;AACAb,sBAAUc,gBAAV,GAA6B,QAA7B;AACAd,sBAAUe,OAAV,GAAoB,EAApB;AACA,mBAAOf,SAAP;AACH;;AAED;;;;;;;sCAIcgB,e,EAAiB;AAC3B,gBAAIhB,YAAY,KAAKiB,eAAL,EAAhB;AACAjB,sBAAUI,MAAV,GAAmBY,gBAAgBZ,MAAnC;AACAJ,sBAAUK,cAAV,GAA2BW,gBAAgBX,cAA3C;AACAL,sBAAUM,gBAAV,GAA6BU,gBAAgBV,gBAA7C;AACAN,sBAAUkB,eAAV,GAA4BF,gBAAgBE,eAA5C;AACAlB,sBAAUO,0BAAV,GAAuCS,gBAAgBT,0BAAvD;AACA,mBAAOP,SAAP;AACH;AACD;;;;;;;;;+CAMuBmB,gC,EAAkC;AACrD,gBAAIC,iBAAiB,IAArB;;AAEA,gBAAID,oCAAoC,IAAxC,EAA8C;;AAE1C;AACAC,iCAAiB,KAAKvB,kBAAL,CAAwBwB,oBAAxB,EAAjB;;AAEA;AACA,oBAAIC,qBAAqBH,iCAAiCI,aAA1D;;AAEA,oBAAID,uBAAuB,WAA3B,EAAwC;AACpC;;AAEA;AACA,wBAAIE,cAAcL,iCAAiCK,WAAnD;;AAEA;AACA,wBAAIC,kBAAkB,KAAK3B,WAAL,CAAiB4B,oBAAjB,CAAsCF,WAAtC,CAAtB;;AAEA;AACAJ,mCAAeI,WAAf,GAA6BC,eAA7B;AACH;AACJ;;AAED,mBAAOL,cAAP;AACH;;;;;AAED;;;;;;;;;oCASYpB,S,EAAW2B,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACvE,gBAAIC,SAAS,KAAb;;AAEA,gBAAIJ,mBAAmBA,gBAAgBK,MAAvC,EAA+C;AAC3C,oBAAIC,iBAAiBH,KAAKxB,gBAAL,IAA0BN,UAAUM,gBAAV,IAA8B,CAACwB,KAAKzB,cAAnF;;AAEA,oBAAI4B,cAAJ,EAAoB;AAChB;AACA,yBAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIR,gBAAgBK,MAApC,EAA4CE,IAAIC,CAAhD,EAAmDD,GAAnD,EAAwD;AACpD,4BAAIE,QAAQT,gBAAgBO,CAAhB,CAAZ;AACA,4BAAIE,MAAMC,QAAN,IAAkBD,MAAMZ,WAA5B,EAAyC;AACrC;AACA,gCAAIY,MAAMZ,WAAN,CAAkBc,QAAtB,EAAgC;AAC5B;AACAP,yCAAS,IAAT;AACA;AACH;AACJ;AACJ;AACJ,iBAbD,MAaO;AACH;AACA,wBAAII,KAAIR,gBAAgBK,MAAhB,GAAyB,CAAjC;AACA,wBAAIZ,iBAAiBO,gBAAgBQ,EAAhB,CAArB;;AAEA,wBAAIX,cAAcJ,eAAeI,WAAjC;;AAEA,wBAAIA,eAAe,IAAnB,EAAyB;AACrB,4BAAIA,YAAYc,QAAhB,EAA0B;AACtB;AACAP,qCAAS,IAAT;AACH;AACJ;AACJ;AACJ;;AAED,gBAAI/B,UAAUuC,kBAAV,IAAgC,IAApC,EAA0C;AACtC;;;;;AAKAR,yBAAS,KAAKlC,kBAAL,CAAwB2C,6BAAxB,CAAsDxC,UAAUuC,kBAAhE,CAAT;AACH;;AAED,mBAAOR,MAAP;AACH;;;;;AAED;;;;;;0CAMkBU,gB,EAAkBC,U,EAAY;;AAE5C,gBAAIX,SAAS,IAAb;;AAEA,gBAAIU,oBAAoB,IAApB,IAA4BC,cAAc,IAA9C,EAAoD;;AAEhD,oBAAIA,WAAWvC,IAAX,IAAmB,OAAvB,EAAgC,CAE/B,CAFD,MAEO,IAAIuC,WAAWvC,IAAX,IAAmB,SAAvB,EAAkC,CAExC,CAFM,MAEA,IAAIuC,WAAWvC,IAAX,IAAmB,WAAvB,EAAoC;AACvC;;AAEA,wBAAIsC,iBAAiBE,MAAjB,IAA2B,IAA3B,IAAmC,CAACF,iBAAiBE,MAAjB,CAAwBC,SAAhE,EAA2E;AACvE;AACAb,iCAAS,KAAT;AACH,qBAHD,MAGO,IAAIU,iBAAiBI,aAAjB,KAAmC,KAAvC,EAA8C;AACjD;AACAd,iCAAS,KAAT;AACH;AACJ,iBAVM,MAUA,IAAIW,WAAWvC,IAAX,IAAmB,aAAvB,EAAsC;AACzC;;AAEA,wBAAIsC,iBAAiBE,MAAjB,IAA2B,IAA3B,IAAmC,CAACF,iBAAiBE,MAAjB,CAAwBG,YAAhE,EAA8E;AAC1E;AACAf,iCAAS,KAAT;AACH,qBAHD,MAGO,IAAIU,iBAAiBM,gBAAjB,KAAsC,KAA1C,EAAiD;AACpD;AACAhB,iCAAS,KAAT;AACH;AACJ;;AAED,oBAAIW,WAAWM,gBAAX,KAAgC,KAApC,EAA2C;AACvC;AACAjB,6BAAS,KAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;;;yCAOiB/B,S,EAAW;AACxB,mBAAO,IAAP;AACH;;AAED;;;;;;;;6CAKqBoB,c,EAAgB;;AAEjC,gBAAI6B,oBAAoB,EAAxB;;AAEA,gBAAI7B,kBAAkB,IAAtB,EAA4B;AACxB,oBAAII,cAAcJ,eAAeI,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;AACrB;AACAyB,wCAAoBzB,YAAYc,QAAhC;AACH;AACJ;;AAED,mBAAOW,iBAAP;AACH;;AAED;;;;;;;kDAI0B;AACtB,mBAAO,IAAP;AACH;;AAED;;;;;;;oDAI4B;AACxB,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;qDAS6B7B,c,EAAgBqB,gB,EAAkB;;AAE3D,gBAAIrB,kBAAkB,IAAtB,EAA4B;;AAExB,oBAAII,cAAcJ,eAAeI,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;AACrB,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAP;AACH;;;;;;AAGL7B,iBAAiBuD,OAAjB,GAA2B,CACvB,SADuB,EAEvB,oBAFuB,EAGvB,aAHuB,CAA3B;;kBAMevD,gB","file":"animationService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass AnimationService extends NodeService {\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Get the component type label\n     * example\n     * \"Animation\"\n     */\n    getComponentTypeLabel() {\n        return this.$translate('animation.componentTypeLabel');\n    }\n\n    /**\n     * Create a Animation component object\n     * @returns a new Animation component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Animation';\n        component.prompt = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = false;\n        component.widthInPixels = 600;\n        component.widthInUnits = 60;\n        component.heightInPixels = 200;\n        component.heightInUnits = 20;\n        component.dataXOriginInPixels = 0;\n        component.dataYOriginInPixels = 80;\n        component.coordinateSystem = 'screen';\n        component.objects = [];\n        return component;\n    }\n\n    /**\n     * Copies a Animation component object\n     * @returns a copied Animation component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.starterSentence = componentToCopy.starterSentence;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        return component;\n    }\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Animation') {\n                // the other component is an Animation component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.response) {\n                            // there is a response so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.response) {\n                        // there is a response so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        if (component.completionCriteria != null) {\n            /*\n             * there is a special completion criteria authored in this component\n             * so we will evaluate the completion criteria to see if the student\n             * has completed this component\n             */\n            result = this.StudentDataService.isCompletionCriteriaSatisfied(component.completionCriteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if we need to display the annotation to the student\n     * @param componentContent the component content\n     * @param annotation the annotation\n     * @returns whether we need to display the annotation to the student\n     */\n    displayAnnotation(componentContent, annotation) {\n\n        var result = true;\n\n        if (componentContent != null && annotation != null) {\n\n            if (annotation.type == 'score') {\n\n            } else if (annotation.type == 'comment') {\n\n            } else if (annotation.type == 'autoScore') {\n                // this is an auto graded score annotation\n\n                if (componentContent.cRater != null && !componentContent.cRater.showScore) {\n                    // we do not want to show the CRater score\n                    result = false;\n                } else if (componentContent.showAutoScore === false) {\n                    // do not show the auto score to the student\n                    result = false;\n                }\n            } else if (annotation.type == 'autoComment') {\n                // this is an auto graded comment annotation\n\n                if (componentContent.cRater != null && !componentContent.cRater.showFeedback) {\n                    // we do not want to show the CRater comment\n                    result = false;\n                } else if (componentContent.showAutoFeedback === false) {\n                    // do not show the auto comment to the student\n                    result = false;\n                }\n            }\n\n            if (annotation.displayToStudent === false) {\n                // do not display the annotation to the studentr\n                result = false;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Get the human readable student data string\n     * @param componentState the component state\n     * @return a human readable student data string\n     */\n    getStudentDataString(componentState) {\n\n        var studentDataString = \"\";\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the response the student typed\n                studentDataString = studentData.response;\n            }\n        }\n\n        return studentDataString;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n\n    /**\n     * Check if the component state has student work. Sometimes a component\n     * state may be created if the student visits a component but doesn't\n     * actually perform any work. This is where we will check if the student\n     * actually performed any work.\n     * @param componentState the component state object\n     * @param componentContent the component content\n     * @return whether the component state has any work\n     */\n    componentStateHasStudentWork(componentState, componentContent) {\n\n        if (componentState != null) {\n\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nAnimationService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default AnimationService;\n"]}