{"version":3,"sources":["audioOscillatorAuthoringController.es6"],"names":["AudioOscillatorAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","AudioOscillatorService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","authoringComponentContentJSONString","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","componentContent","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","authoringProcessCheckedOscillatorTypes","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","stop","injectAssetPaths","submitCounter","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","setParametersFromComponentContent","drawOscilloscopeGrid","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","showOscillatorTypeChooser","oscillatorTypeToAdd","oscillatorTypes","indexOf","alert","push","authoringViewComponentChanged","index","splice","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","show","$emit","setShowSubmitButtonValue","authoringSineChecked","authoringSquareChecked","authoringTriangleChecked","authoringSawtoothChecked","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","answer","confirm","connectedComponentType","getComponentByNodeIdAndComponentId","componentType","a","length","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$broadcast","$inject"],"mappings":"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","file":"audioOscillatorAuthoringController.js","sourcesContent":["'use strict';\n\nimport AudioOscillatorController from \"./audioOscillatorController\";\n\nclass AudioOscillatorAuthoringController extends AudioOscillatorController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              AudioOscillatorService,\n              ConfigService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      AudioOscillatorService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'AudioOscillator'\n      }\n    ];\n\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;// generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    // update which oscillator types should be checked\n    this.authoringProcessCheckedOscillatorTypes();\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n\n      // stop the audio if it is playing\n      this.stop();\n\n      // inject asset paths if necessary\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n      this.submitCounter = 0;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // load the parameters into the component\n      this.setParametersFromComponentContent();\n\n      // draw the oscilloscope gride after the view has rendered\n      $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * Show the controls for adding an oscillator type\n   */\n  authoringOpenAddOscillatorType() {\n    this.showOscillatorTypeChooser = true;\n  }\n\n  /**\n   * The author has clicked the add button to add an oscillator type\n   */\n  authoringAddOscillatorTypeClicked() {\n    var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n      // the oscillator type is already in the array of oscillator types\n\n      alert(this.$translate('audioOscillator.errorYouHaveAlreadyAddedOscillatorType', { oscillatorTypeToAdd: oscillatorTypeToAdd }));\n    } else {\n      // the oscillator type is not already in the array of oscillator types\n      this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n\n      // hide the oscillator type chooser\n      this.showOscillatorTypeChooser = false;\n\n      // perform preview updating and project saving\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has clicked the cancel button for adding an oscillator type\n   */\n  authoringCancelOscillatorTypeClicked() {\n    // hide the oscillator type chooser\n    this.showOscillatorTypeChooser = false;\n  }\n\n  /**\n   * The author has clicked the delete button for removing an oscillator type\n   * @param index the index of the oscillator type to remove\n   */\n  authoringDeleteOscillatorTypeClicked(index) {\n\n    // remove the oscillator type at the given index\n    this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * One of the oscillator types was clicked in the authoring view\n   */\n  authoringViewOscillatorTypeClicked() {\n\n    /*\n     * clear the oscillator types so we can repopulate it with the\n     * ones that are checked\n     */\n    this.authoringComponentContent.oscillatorTypes = [];\n\n    if (this.authoringSineChecked) {\n      // sine is checked\n      this.authoringComponentContent.oscillatorTypes.push('sine');\n    }\n\n    if (this.authoringSquareChecked) {\n      // square is checked\n      this.authoringComponentContent.oscillatorTypes.push('square');\n    }\n\n    if (this.authoringTriangleChecked) {\n      // triangle is checked\n      this.authoringComponentContent.oscillatorTypes.push('triangle');\n    }\n\n    if (this.authoringSawtoothChecked) {\n      // sawtooth is checked\n      this.authoringComponentContent.oscillatorTypes.push('sawtooth');\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Determine which oscillator types should be checked\n   */\n  authoringProcessCheckedOscillatorTypes() {\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sine') != -1) {\n      this.authoringSineChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('square') != -1) {\n      this.authoringSquareChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('triangle') != -1) {\n      this.authoringTriangleChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sawtooth') != -1) {\n      this.authoringSawtoothChecked = true;\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nAudioOscillatorAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'AudioOscillatorService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorAuthoringController;\n"]}