{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$injector","$q","$rootScope","$scope","$timeout","ConfigService","NodeService","AudioOscillatorService","ProjectService","StudentAssetService","StudentDataService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","audioContext","AudioContext","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","currentNode","getCurrentNode","id","originalComponentContent","mode","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","stop","injectAssetPaths","setParametersFromComponentContent","drawOscilloscopeGrid","componentState","importWorkNodeId","importWorkComponentId","importWork","starterSentence","setStudentWork","calculateDisabled","registerComponentController","audioOscillatorController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","close","startingFrequency","length","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","push","prompt","showPreviousWorkPrompt","play","oscillator","createOscillator","type","value","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","ctx","document","getElementById","getContext","width","canvas","height","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","alert","authoringViewComponentChanged","index","importWorkComponentState","populatedComponentState","populateComponentState","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showPreviousWorkNodeId","showPreviousWorkComponentId","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","message","exitListener","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nclass AudioOscillatorController {\n\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                ConfigService,\n                NodeService,\n                AudioOscillatorService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.AudioOscillatorService = AudioOscillatorService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the audio is playing\n        this.isPlaying = false;\n\n        // default oscillator type to sine\n        this.oscillatorType = \"sine\";\n\n        // default frequency is 440\n        this.frequency = 440;\n\n        // holds the oscillator types the student can choose\n        this.oscillatorTypes = [];\n\n        // the default dimensions of the oscilloscope\n        this.oscilloscopeId = 'oscilloscope';\n        this.oscilloscopeWidth = 800;\n        this.oscilloscopeHeight = 400;\n        this.gridCellSize = 50;\n\n        // create the audio context\n        this.audioContext = new AudioContext();\n\n        // whether we should stop drawing after a good draw\n        this.stopAfterGoodDraw = true;\n\n        this.showOscillatorTypeChooser = false;\n        this.availableOscillatorTypes = [\n            'sine',\n            'square',\n            'triangle',\n            'sawtooth'\n        ]\n        this.oscillatorTypeToAdd = 'sine';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    // stop the audio if it is playing\n                    this.stop();\n\n                    // inject asset paths if necessary\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    // load the parameters into the component\n                    this.setParametersFromComponentContent();\n\n                    // draw the oscilloscope gride after the view has rendered\n                    $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n                }.bind(this), true);\n            }\n\n            this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n            // load the parameters into the component\n            this.setParametersFromComponentContent();\n\n            var componentState = null;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n\n            /*\n             * draw the oscilloscope grid after angular has finished rendering\n             * the view. we need to wait until after angular has set the\n             * canvas width and height to draw the grid because setting the\n             * dimensions of the canvas will erase it.\n             */\n            $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.audioOscillatorController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.audioOscillatorController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.audioOscillatorController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n            // stop playing the audio if the student leaves the step\n            this.stop();\n            this.audioContext.close();\n        }.bind(this));\n    }\n\n    /**\n     * Load the parameters from the component content object\n     */\n    setParametersFromComponentContent() {\n        if (this.componentContent.startingFrequency != null) {\n            this.frequency = this.componentContent.startingFrequency;\n        }\n\n        if (this.componentContent.oscillatorTypes != null) {\n            this.oscillatorTypes = this.componentContent.oscillatorTypes;\n\n            if (this.componentContent.oscillatorTypes.length > 0) {\n                this.oscillatorType = this.componentContent.oscillatorTypes[0];\n            }\n        }\n\n        if (this.componentContent.oscilloscopeWidth != null) {\n            this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n        }\n\n        if (this.componentContent.oscilloscopeHeight != null) {\n            this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n        }\n\n        if (this.componentContent.gridCellSize != null) {\n            this.gridCellSize = this.componentContent.gridCellSize;\n        }\n\n        if (this.componentContent.stopAfterGoodDraw != null) {\n            this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * The play/stop button was clicked\n     */\n    playStopClicked() {\n\n        if (this.isPlaying) {\n            // the audio is playing so we will now stop it\n            this.stop();\n        } else {\n            // the audio is not playing so we will not play it\n            this.play();\n        }\n    };\n\n    /**\n     * Start playing the audio and draw the oscilloscope\n     */\n    play() {\n\n        // create the oscillator\n        this.oscillator = this.audioContext.createOscillator();\n        this.oscillator.type = this.oscillatorType;\n        this.oscillator.frequency.value = this.frequency;\n\n        this.gain = this.audioContext.createGain();\n        this.gain.gain.value = 0.5;\n        this.destination = this.audioContext.destination;\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n\n        // connect the audio components together\n        this.oscillator.connect(this.gain);\n        this.gain.connect(this.destination);\n        this.gain.connect(this.analyser);\n\n        this.oscillator.start();\n\n        /*\n         * reset the goodDraw boolean value to false because we need\n         * to find a good draw again\n         */\n        this.goodDraw = false;\n\n        // draw the oscilloscope\n        this.drawOscilloscope(this.analyser);\n\n        this.isPlaying = true;\n    }\n\n    /**\n     * Stop the audio\n     */\n    stop() {\n        if (this.oscillator != null) {\n            this.oscillator.stop();\n        }\n\n        this.isPlaying = false;\n    }\n\n    /**\n     * Draw the oscilloscope\n     */\n    drawOscilloscope() {\n\n        // get the analyser to obtain the oscillator data\n        var analyser = this.analyser;\n\n        // get the oscilloscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n\n        // get the number of samples, this will be half the fftSize\n        var bufferLength = analyser.frequencyBinCount;\n\n        // create an array to hold the oscillator data\n        var timeData = new Uint8Array(bufferLength);\n\n        // populate the oscillator data into the timeData array\n        analyser.getByteTimeDomainData(timeData);\n\n        // draw the grid\n        this.drawOscilloscopeGrid();\n\n        // start drawing the audio signal line from the oscillator\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n        ctx.beginPath();\n\n        var sliceWidth = width * 1.0 / bufferLength;\n        var x = 0;\n        var v = 0;\n        var y = 0;\n\n        /*\n         * we want to start drawing the audio signal such that the first point\n         * is at 0,0 on the oscilloscope and the signal rises after that.\n         * e.g. pretend the ascii below is a sine wave\n         *   _      _\n         *  / \\    / \\\n         * -------------------\n         *     \\_/    \\_/\n         */\n        var foundFirstRisingZeroCrossing = false;\n        var firstRisingZeroCrossingIndex = null;\n        var firstPointDrawn = false;\n\n        /*\n         * loop through all the points and draw the signal from the first\n         * rising zero crossing to the end of the buffer\n         */\n        for (var i = 0; i < bufferLength; i++) {\n            var currentY = timeData[i] - 128;\n            var nextY = timeData[i + 1] - 128;\n\n            // check if the current data point is the first rising zero crossing\n            if (!foundFirstRisingZeroCrossing &&\n                (currentY < 0 || currentY == 0) && nextY > 0) {\n\n                // the point is the first rising zero crossing\n                foundFirstRisingZeroCrossing = true;\n                firstRisingZeroCrossingIndex = i;\n            }\n\n            if (foundFirstRisingZeroCrossing) {\n                /*\n                 * we have found the first rising zero crossing so we can start\n                 * drawing the points.\n                 */\n\n                /*\n                 * get the height of the point. we need to perform this\n                 * subtraction of 128 to flip the value since canvas\n                 * positioning is relative to the upper left corner being 0,0.\n                 */\n                v = (128 - (timeData[i] - 128)) / 128.0;\n                y = v * height / 2;\n\n                if (firstPointDrawn) {\n                    // this is not the first point to be drawn\n                    ctx.lineTo(x, y);\n                } else {\n                    // this is the first point to be drawn\n                    ctx.moveTo(x, y);\n                    firstPointDrawn = true;\n                }\n\n                // update the x position we are drawing at\n                x += sliceWidth;\n            }\n        }\n\n        if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n            /*\n             * we want the first rising zero crossing index to be close to zero\n             * so that the graph spans almost the whole width of the canvas.\n             * if first rising zero crossing index was close to bufferLength\n             * then we would see a cut off graph.\n             */\n            this.goodDraw = true;\n        }\n\n        // draw the lines on the canvas\n        ctx.stroke();\n\n        if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n            /*\n             * the draw was not good so we will try to draw it again by\n             * sampling the oscillator again and drawing again. if the\n             * draw was good we will stop drawing.\n             */\n            requestAnimationFrame(() => {\n                this.drawOscilloscope();\n            });\n        }\n    }\n\n    /**\n     * Draw the oscilloscope gride\n     */\n    drawOscilloscopeGrid() {\n        // get the oscilliscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n        var gridCellSize = this.gridCellSize;\n\n        // draw a white background\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, width, height);\n\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'lightgrey';\n        ctx.beginPath();\n\n        var x = 0;\n\n        // draw the vertical lines\n        while (x < width) {\n\n            // draw a vertical line\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, height);\n\n            // move the x position to the right\n            x += gridCellSize;\n        }\n\n        // start by drawing the line in the middle\n        var y = height / 2;\n\n        // draw the horizontal lines above and including the middle line\n        while (y >= 0) {\n\n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n\n            // move the y position up (this is up because of canvas positioning)\n            y -= gridCellSize;\n        }\n\n        y = height / 2;\n\n        // draw the horizontal lines below the middle line\n        while (y <= height) {\n\n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n\n            // move the y position down (this is down because of canvas positioning)\n            y += gridCellSize;\n        }\n\n        // draw the lines on the canvas\n        ctx.stroke();\n    }\n\n    /**\n     * The oscillator type changed\n     */\n    oscillatorTypeChanged() {\n\n        // clear the grid\n        this.drawOscilloscopeGrid();\n\n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n\n    /**\n     * The frequency changed\n     */\n    frequencyChanged() {\n\n        // clear the grid\n        this.drawOscilloscopeGrid();\n\n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n\n    /**\n     * Restart the player\n     */\n    restartPlayer() {\n        this.stop();\n        this.play();\n    }\n\n    /**\n     * Show the controls for adding an oscillator type\n     */\n    authoringOpenAddOscillatorType() {\n        this.showOscillatorTypeChooser = true;\n    }\n\n    /**\n     * The author has clicked the add button to add an oscillator type\n     */\n    authoringAddOscillatorTypeClicked() {\n        var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n            // the oscillator type is already in the array of oscillator types\n\n            alert('Error: You have already added ' + oscillatorTypeToAdd);\n        } else {\n            // the oscillator type is not already in the array of oscillator types\n            this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n\n            // hide the oscillator type chooser\n            this.showOscillatorTypeChooser = false;\n\n            // perform preview updating and project saving\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The author has clicked the cancel button for adding an oscillator type\n     */\n    authoringCancelOscillatorTypeClicked() {\n        // hide the oscillator type chooser\n        this.showOscillatorTypeChooser = false;\n    }\n\n    /**\n     * The author has clicked the delete button for removing an oscillator type\n     * @param index the index of the oscillator type to remove\n     */\n    authoringDeleteOscillatorTypeClicked(index) {\n\n        // remove the oscillator type at the given index\n        this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n};\n\nAudioOscillatorController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'NodeService',\n    'AudioOscillatorService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default AudioOscillatorController;\n"]}