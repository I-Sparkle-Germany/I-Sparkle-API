{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","NodeService","AudioOscillatorService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","playStopButtonText","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","showSaveButton","showSubmitButton","getLatestComponentAnnotations","workgroupId","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","authoringProcessCheckedOscillatorTypes","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","stop","injectAssetPaths","setParametersFromComponentContent","drawOscilloscopeGrid","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterSentence","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","audioContext","AudioContext","audioOscillatorController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","close","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","startingFrequency","length","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","push","prompt","showPreviousWorkPrompt","response","play","oscillator","createOscillator","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","makeCopyOfJSONObject","sort","a","b","Math","min","max","ctx","getElementById","getContext","width","canvas","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","alert","authoringViewComponentChanged","index","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","exitListener","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","authoringSineChecked","authoringSquareChecked","authoringTriangleChecked","authoringSawtoothChecked","tags","tag","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedStudentData","mergeStudentData","oldStudentData","newStudentData","concat","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","allowedConnectedComponentType","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nclass AudioOscillatorController {\n\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                AudioOscillatorService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.AudioOscillatorService = AudioOscillatorService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // an array of frequencies that the student has played\n        this.frequenciesPlayed = [];\n\n        // an array of sorted frequencies that the student has played\n        this.frequenciesPlayedSorted = [];\n\n        // the number of frequences the student has played\n        this.numberOfFrequenciesPlayed = 0;\n\n        // the lowest frequency the student played\n        this.minFrequencyPlayed = null;\n\n        // the highest frequency the student played\n        this.maxFrequencyPlayed = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the audio is playing\n        this.isPlaying = false;\n\n        // default oscillator type to sine\n        this.oscillatorType = \"sine\";\n\n        // default frequency is 440\n        this.frequency = 440;\n\n        // holds the oscillator types the student can choose\n        this.oscillatorTypes = [];\n\n        // the default dimensions of the oscilloscope\n        this.oscilloscopeId = 'oscilloscope';\n        this.oscilloscopeWidth = 800;\n        this.oscilloscopeHeight = 400;\n        this.gridCellSize = 50;\n\n        // whether we should stop drawing after a good draw\n        this.stopAfterGoodDraw = true;\n\n        this.showOscillatorTypeChooser = false;\n        this.availableOscillatorTypes = [\n            'sine',\n            'square',\n            'triangle',\n            'sawtooth'\n        ]\n        this.oscillatorTypeToAdd = 'sine';\n\n        // the text to display on the play/stop button\n        this.playStopButtonText = this.$translate('audioOscillator.play');\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'AudioOscillator'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                // update which oscillator types should be checked\n                this.authoringProcessCheckedOscillatorTypes();\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n\n                    // stop the audio if it is playing\n                    this.stop();\n\n                    // inject asset paths if necessary\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    this.submitCounter = 0;\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                    // load the parameters into the component\n                    this.setParametersFromComponentContent();\n\n                    // draw the oscilloscope gride after the view has rendered\n                    $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n                }.bind(this), true);\n            }\n\n            this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n            // load the parameters into the component\n            this.setParametersFromComponentContent();\n\n            var componentState = null;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (this.mode == 'student') {\n                if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                    // we will show work from another component\n                    this.handleConnectedComponents();\n                }  else if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                    /*\n                     * the student has work so we will populate the work into this\n                     * component\n                     */\n                    this.setStudentWork(componentState);\n                } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                    // we will import work from another component\n                    this.handleConnectedComponents();\n                } else if (componentState == null) {\n                    // check if we need to import work\n\n                    if (componentState == null) {\n                        /*\n                         * only import work if the student does not already have\n                         * work for this component\n                         */\n\n                        // check if we need to import work\n                        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                            /*\n                             * check if the node id is in the field that we used to store\n                             * the import previous work node id in\n                             */\n                            importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                        }\n\n                        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                            /*\n                             * check if the component id is in the field that we used to store\n                             * the import previous work component id in\n                             */\n                            importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                        }\n\n                        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                            // import the work from the other component\n                            this.importWork();\n                        } else if (this.componentContent.starterSentence != null) {\n                            /*\n                             * the student has not done any work and there is a starter sentence\n                             * so we will populate the textarea with the starter sentence\n                             */\n                            this.studentResponse = this.componentContent.starterSentence;\n                        }\n                    } else {\n                        // populate the student work into this component\n                        this.setStudentWork(componentState);\n                    }\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n\n            if (this.mode !== 'grading' && this.mode !== 'gradingRevision') {\n                // create the audio context\n                this.audioContext = new AudioContext();\n\n                /*\n                 * draw the oscilloscope grid after angular has finished rendering\n                 * the view. we need to wait until after angular has set the\n                 * canvas width and height to draw the grid because setting the\n                 * dimensions of the canvas will erase it.\n                 */\n                $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.audioOscillatorController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.audioOscillatorController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.audioOscillatorController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', (event, args) => {\n            if (this.mode !== 'grading') {\n                // stop playing the audio if the student leaves the step\n                this.stop();\n                this.audioContext.close();\n            }\n        });\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Load the parameters from the component content object\n     */\n    setParametersFromComponentContent() {\n        if (this.componentContent.startingFrequency != null) {\n            this.frequency = this.componentContent.startingFrequency;\n        }\n\n        if (this.componentContent.oscillatorTypes != null) {\n            this.oscillatorTypes = this.componentContent.oscillatorTypes;\n\n            if (this.componentContent.oscillatorTypes.length > 0) {\n                this.oscillatorType = this.componentContent.oscillatorTypes[0];\n            }\n        }\n\n        if (this.componentContent.oscilloscopeWidth != null) {\n            this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n        }\n\n        if (this.componentContent.oscilloscopeHeight != null) {\n            this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n        }\n\n        if (this.componentContent.gridCellSize != null) {\n            this.gridCellSize = this.componentContent.gridCellSize;\n        }\n\n        if (this.componentContent.stopAfterGoodDraw != null) {\n            this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (studentData.frequenciesPlayed != null) {\n                    // the frequencies the student has played\n                    this.frequenciesPlayed = studentData.frequenciesPlayed;\n\n                    if (this.frequenciesPlayed.length > 0) {\n                        // repopulate the last frequency played\n                        this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\n                    }\n                }\n\n                if (studentData.frequenciesPlayedSorted != null) {\n                    // the sorted frequencies the student has played\n                    this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\n                }\n\n                if (studentData.numberOfFrequenciesPlayed != null) {\n                    // the number of frequencies the student has played\n                    this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\n                }\n\n                if (studentData.minFrequencyPlayed != null) {\n                    // the minimum frequency the student has played\n                    this.minFrequencyPlayed = studentData.minFrequencyPlayed;\n                }\n\n                if (studentData.maxFrequencyPlayed != null) {\n                    // the maximum frequency the student has played\n                    this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n                    // the student does not have any more chances to submit\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n                    /*\n                     * the student has one more chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                } else if (numberOfSubmitsLeft > 1) {\n                    /*\n                     * the student has more than one chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Set the frequencies played array\n     * @param frequenciesPlayed an array of numbers\n     */\n    setFrequenciesPlayed(frequenciesPlayed) {\n        this.frequenciesPlayed = frequenciesPlayed;\n    }\n\n    /**\n     * Get the frequencies the student played\n     */\n    getFrequenciesPlayed() {\n        return this.frequenciesPlayed;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the response into the component state\n        var studentData = {};\n\n        // set the frequencies the student has played\n        studentData.frequenciesPlayed = this.frequenciesPlayed;\n\n        // set the sorted frequencies the student has played\n        studentData.frequenciesPlayedSorted = this.frequenciesPlayedSorted;\n\n        // set the number of frequencies the student has played\n        studentData.numberOfFrequenciesPlayed = this.numberOfFrequenciesPlayed;\n\n        // set the minimum frequency the student has played\n        studentData.minFrequencyPlayed = this.minFrequencyPlayed;\n\n        // set the maximum frequency the student has played\n        studentData.maxFrequencyPlayed = this.maxFrequencyPlayed;\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the flag for whether the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        // set the component type\n        componentState.componentType = 'AudioOscillator';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * The play/stop button was clicked\n     */\n    playStopClicked() {\n\n        if (this.isPlaying) {\n            // the audio is playing so we will now stop it\n            this.stop();\n\n            // change the button text to display 'Play'\n            this.playStopButtonText = this.$translate('audioOscillator.play');\n        } else {\n            // the audio is not playing so we will now play it\n            this.play();\n\n            // change the button text to display 'Stop'\n            this.playStopButtonText = this.$translate('audioOscillator.stop');\n        }\n    };\n\n    /**\n     * Start playing the audio and draw the oscilloscope\n     */\n    play() {\n\n        // create the oscillator\n        this.oscillator = this.audioContext.createOscillator();\n        this.oscillator.type = this.oscillatorType;\n        this.oscillator.frequency.value = this.frequency;\n\n        this.gain = this.audioContext.createGain();\n        this.gain.gain.value = 0.5;\n        this.destination = this.audioContext.destination;\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n\n        // connect the audio components together\n        this.oscillator.connect(this.gain);\n        this.gain.connect(this.destination);\n        this.gain.connect(this.analyser);\n\n        this.oscillator.start();\n\n        /*\n         * reset the goodDraw boolean value to false because we need\n         * to find a good draw again\n         */\n        this.goodDraw = false;\n\n        // draw the oscilloscope\n        this.drawOscilloscope(this.analyser);\n\n        this.isPlaying = true;\n\n        /*\n         * add the current frequency to the array of frequencies the student\n         * has played\n         */\n        this.addFrequencyPlayed(this.frequency);\n\n        // set the student data to dirty\n        this.studentDataChanged();\n    }\n\n    /**\n     * Add a frequency the student has played\n     * @param frequency the new frequency the student has played\n     */\n    addFrequencyPlayed(frequency) {\n\n        // add the new frequency to the array of frequencies\n        this.frequenciesPlayed.push(frequency);\n\n        // make a copy of the frequencies played and sort it\n        this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\n        this.frequenciesPlayedSorted.sort((a, b) => (a - b));\n\n        // get the number of frequencies the student has played\n        this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\n\n        // get the minimum frequency the student has played\n        this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\n\n        // get the maximum frequency the student has played\n        this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\n    }\n\n    /**\n     * Stop the audio\n     */\n    stop() {\n        if (this.oscillator != null) {\n            this.oscillator.stop();\n        }\n\n        this.isPlaying = false;\n    }\n\n    /**\n     * Draw the oscilloscope\n     */\n    drawOscilloscope() {\n\n        // get the analyser to obtain the oscillator data\n        var analyser = this.analyser;\n\n        // get the oscilloscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n\n        // get the number of samples, this will be half the fftSize\n        var bufferLength = analyser.frequencyBinCount;\n\n        // create an array to hold the oscillator data\n        var timeData = new Uint8Array(bufferLength);\n\n        // populate the oscillator data into the timeData array\n        analyser.getByteTimeDomainData(timeData);\n\n        // draw the grid\n        this.drawOscilloscopeGrid();\n\n        // start drawing the audio signal line from the oscillator\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n        ctx.beginPath();\n\n        var sliceWidth = width * 1.0 / bufferLength;\n        var x = 0;\n        var v = 0;\n        var y = 0;\n\n        /*\n         * we want to start drawing the audio signal such that the first point\n         * is at 0,0 on the oscilloscope and the signal rises after that.\n         * e.g. pretend the ascii below is a sine wave\n         *   _      _\n         *  / \\    / \\\n         * -------------------\n         *     \\_/    \\_/\n         */\n        var foundFirstRisingZeroCrossing = false;\n        var firstRisingZeroCrossingIndex = null;\n        var firstPointDrawn = false;\n\n        /*\n         * loop through all the points and draw the signal from the first\n         * rising zero crossing to the end of the buffer\n         */\n        for (var i = 0; i < bufferLength; i++) {\n            var currentY = timeData[i] - 128;\n            var nextY = timeData[i + 1] - 128;\n\n            // check if the current data point is the first rising zero crossing\n            if (!foundFirstRisingZeroCrossing &&\n                (currentY < 0 || currentY == 0) && nextY > 0) {\n\n                // the point is the first rising zero crossing\n                foundFirstRisingZeroCrossing = true;\n                firstRisingZeroCrossingIndex = i;\n            }\n\n            if (foundFirstRisingZeroCrossing) {\n                /*\n                 * we have found the first rising zero crossing so we can start\n                 * drawing the points.\n                 */\n\n                /*\n                 * get the height of the point. we need to perform this\n                 * subtraction of 128 to flip the value since canvas\n                 * positioning is relative to the upper left corner being 0,0.\n                 */\n                v = (128 - (timeData[i] - 128)) / 128.0;\n                y = v * height / 2;\n\n                if (firstPointDrawn) {\n                    // this is not the first point to be drawn\n                    ctx.lineTo(x, y);\n                } else {\n                    // this is the first point to be drawn\n                    ctx.moveTo(x, y);\n                    firstPointDrawn = true;\n                }\n\n                // update the x position we are drawing at\n                x += sliceWidth;\n            }\n        }\n\n        if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n            /*\n             * we want the first rising zero crossing index to be close to zero\n             * so that the graph spans almost the whole width of the canvas.\n             * if first rising zero crossing index was close to bufferLength\n             * then we would see a cut off graph.\n             */\n            this.goodDraw = true;\n        }\n\n        // draw the lines on the canvas\n        ctx.stroke();\n\n        if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n            /*\n             * the draw was not good so we will try to draw it again by\n             * sampling the oscillator again and drawing again. if the\n             * draw was good we will stop drawing.\n             */\n            requestAnimationFrame(() => {\n                this.drawOscilloscope();\n            });\n        }\n    }\n\n    /**\n     * Draw the oscilloscope gride\n     */\n    drawOscilloscopeGrid() {\n        // get the oscilliscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n        var gridCellSize = this.gridCellSize;\n\n        // draw a white background\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, width, height);\n\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'lightgrey';\n        ctx.beginPath();\n\n        var x = 0;\n\n        // draw the vertical lines\n        while (x < width) {\n\n            // draw a vertical line\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, height);\n\n            // move the x position to the right\n            x += gridCellSize;\n        }\n\n        // start by drawing the line in the middle\n        var y = height / 2;\n\n        // draw the horizontal lines above and including the middle line\n        while (y >= 0) {\n\n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n\n            // move the y position up (this is up because of canvas positioning)\n            y -= gridCellSize;\n        }\n\n        y = height / 2;\n\n        // draw the horizontal lines below the middle line\n        while (y <= height) {\n\n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n\n            // move the y position down (this is down because of canvas positioning)\n            y += gridCellSize;\n        }\n\n        // draw the lines on the canvas\n        ctx.stroke();\n    }\n\n    /**\n     * The oscillator type changed\n     */\n    oscillatorTypeChanged() {\n\n        // clear the grid\n        this.drawOscilloscopeGrid();\n\n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n\n    /**\n     * The frequency changed\n     */\n    frequencyChanged() {\n\n        // clear the grid\n        this.drawOscilloscopeGrid();\n\n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n\n    /**\n     * Restart the player\n     */\n    restartPlayer() {\n        this.stop();\n        this.play();\n    }\n\n    /**\n     * Show the controls for adding an oscillator type\n     */\n    authoringOpenAddOscillatorType() {\n        this.showOscillatorTypeChooser = true;\n    }\n\n    /**\n     * The author has clicked the add button to add an oscillator type\n     */\n    authoringAddOscillatorTypeClicked() {\n        var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n            // the oscillator type is already in the array of oscillator types\n\n            alert(this.$translate('audioOscillator.errorYouHaveAlreadyAddedOscillatorType', { oscillatorTypeToAdd: oscillatorTypeToAdd }));\n        } else {\n            // the oscillator type is not already in the array of oscillator types\n            this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n\n            // hide the oscillator type chooser\n            this.showOscillatorTypeChooser = false;\n\n            // perform preview updating and project saving\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The author has clicked the cancel button for adding an oscillator type\n     */\n    authoringCancelOscillatorTypeClicked() {\n        // hide the oscillator type chooser\n        this.showOscillatorTypeChooser = false;\n    }\n\n    /**\n     * The author has clicked the delete button for removing an oscillator type\n     * @param index the index of the oscillator type to remove\n     */\n    authoringDeleteOscillatorTypeClicked(index) {\n\n        // remove the oscillator type at the given index\n        this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * One of the oscillator types was clicked in the authoring view\n     */\n    authoringViewOscillatorTypeClicked() {\n\n        /*\n         * clear the oscillator types so we can repopulate it with the\n         * ones that are checked\n         */\n        this.authoringComponentContent.oscillatorTypes = [];\n\n        if (this.authoringSineChecked) {\n            // sine is checked\n            this.authoringComponentContent.oscillatorTypes.push('sine');\n        }\n\n        if (this.authoringSquareChecked) {\n            // square is checked\n            this.authoringComponentContent.oscillatorTypes.push('square');\n        }\n\n        if (this.authoringTriangleChecked) {\n            // triangle is checked\n            this.authoringComponentContent.oscillatorTypes.push('triangle');\n        }\n\n        if (this.authoringSawtoothChecked) {\n            // sawtooth is checked\n            this.authoringComponentContent.oscillatorTypes.push('sawtooth');\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Determine which oscillator types should be checked\n     */\n    authoringProcessCheckedOscillatorTypes() {\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('sine') != -1) {\n            this.authoringSineChecked = true;\n        }\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('square') != -1) {\n            this.authoringSquareChecked = true;\n        }\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('triangle') != -1) {\n            this.authoringTriangleChecked = true;\n        }\n\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('sawtooth') != -1) {\n            this.authoringSawtoothChecked = true;\n        }\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        // create a new component state\n        let mergedComponentState = this.NodeService.createNewComponentState();\n        if (componentStates != null) {\n            let mergedStudentData = {};\n            // loop through all the component states and merge the student data\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n                    if (studentData != null) {\n                        this.mergeStudentData(mergedStudentData, studentData);\n                    }\n                }\n            }\n            mergedComponentState.studentData = mergedStudentData;\n        }\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Merge the values in the student data\n     * @param oldStudentData the old student data we will merge into\n     * @param newStudentData the new student data we will merge\n     * @return the merged student data\n     */\n    mergeStudentData(oldStudentData, newStudentData) {\n\n        if (oldStudentData != null && newStudentData != null) {\n\n            if (oldStudentData.frequenciesPlayed == null) {\n                oldStudentData.frequenciesPlayed = newStudentData.frequenciesPlayed;\n            } else {\n                oldStudentData.frequenciesPlayed = oldStudentData.frequenciesPlayed.concat(newStudentData.frequenciesPlayed);\n            }\n\n            if (oldStudentData.frequenciesPlayedSorted == null) {\n                oldStudentData.frequenciesPlayedSorted = newStudentData.frequenciesPlayed;\n            } else {\n                let frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(oldStudentData.frequenciesPlayed);\n                frequenciesPlayedSorted.sort();\n                oldStudentData.frequenciesPlayedSorted = frequenciesPlayedSorted;\n            }\n\n            if (oldStudentData.numberOfFrequenciesPlayed == null) {\n                oldStudentData.numberOfFrequenciesPlayed = newStudentData.numberOfFrequenciesPlayed;\n            } else {\n                oldStudentData.numberOfFrequenciesPlayed = oldStudentData.numberOfFrequenciesPlayed + newStudentData.numberOfFrequenciesPlayed;\n            }\n\n            if (oldStudentData.minFrequencyPlayed == null) {\n                oldStudentData.minFrequencyPlayed = newStudentData.minFrequencyPlayed;\n            } else {\n                oldStudentData.minFrequencyPlayed = Math.min(oldStudentData.minFrequencyPlayed, newStudentData.minFrequencyPlayed);\n            }\n\n            if (oldStudentData.maxFrequencyPlayed == null) {\n                oldStudentData.maxFrequencyPlayed = newStudentData.maxFrequencyPlayed;\n            } else {\n                oldStudentData.maxFrequencyPlayed = Math.max(oldStudentData.maxFrequencyPlayed, newStudentData.maxFrequencyPlayed);\n            }\n        }\n\n        return oldStudentData;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = null;\n        this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Automatically set the component id for the connected component if there\n     * is only one viable option.\n     * @param connectedComponent the connected component object we are authoring\n     */\n    authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n        if (connectedComponent != null) {\n            let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n            if (components != null) {\n                let numberOfAllowedComponents = 0;\n                let allowedComponent = null;\n                for (let component of components) {\n                    if (component != null) {\n                        if (this.isConnectedComponentTypeAllowed(component.type) &&\n                                component.id != this.componentId) {\n                            // we have found a viable component we can connect to\n                            numberOfAllowedComponents += 1;\n                            allowedComponent = component;\n                        }\n                    }\n                }\n\n                if (numberOfAllowedComponents == 1) {\n                    /*\n                     * there is only one viable component to connect to so we\n                     * will use it\n                     */\n                    connectedComponent.componentId = allowedComponent.id;\n                    connectedComponent.type = 'importWork';\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n            connectedComponent.componentId = null;\n            connectedComponent.type = null;\n            this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n};\n\nAudioOscillatorController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'AudioOscillatorService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default AudioOscillatorController;\n"]}