{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","AudioOscillatorService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","attachments","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","playStopButtonText","$translate","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","authoringComponentContentJSONString","originalComponentContent","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","authoringProcessCheckedOscillatorTypes","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","stop","injectAssetPaths","submitCounter","setParametersFromComponentContent","drawOscilloscopeGrid","componentState","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterSentence","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","audioContext","AudioContext","isDirty","audioOscillatorController","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","close","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$broadcast","startingFrequency","length","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","id","iconURL","push","prompt","showPreviousWorkPrompt","response","play","oscillator","createOscillator","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","makeCopyOfJSONObject","sort","a","b","Math","min","max","ctx","getElementById","getContext","width","canvas","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","alert","authoringViewComponentChanged","index","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","time","saveMessage","exitListener","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","authoringSineChecked","authoringSquareChecked","authoringTriangleChecked","authoringSawtoothChecked","tags","tag","answer","confirm","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedStudentData","mergeStudentData","oldStudentData","newStudentData","concat","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass AudioOscillatorController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      AudioOscillatorService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.AudioOscillatorService = AudioOscillatorService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // an array of frequencies that the student has played\n    this.frequenciesPlayed = [];\n\n    // an array of sorted frequencies that the student has played\n    this.frequenciesPlayedSorted = [];\n\n    // the number of frequences the student has played\n    this.numberOfFrequenciesPlayed = 0;\n\n    // the lowest frequency the student played\n    this.minFrequencyPlayed = null;\n\n    // the highest frequency the student played\n    this.maxFrequencyPlayed = null;\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the audio is playing\n    this.isPlaying = false;\n\n    // default oscillator type to sine\n    this.oscillatorType = 'sine';\n\n    // default frequency is 440\n    this.frequency = 440;\n\n    // holds the oscillator types the student can choose\n    this.oscillatorTypes = [];\n\n    // the default dimensions of the oscilloscope\n    this.oscilloscopeId = 'oscilloscope';\n    this.oscilloscopeWidth = 800;\n    this.oscilloscopeHeight = 400;\n    this.gridCellSize = 50;\n\n    // whether we should stop drawing after a good draw\n    this.stopAfterGoodDraw = true;\n\n    this.showOscillatorTypeChooser = false;\n    this.availableOscillatorTypes = [\n      'sine',\n      'square',\n      'triangle',\n      'sawtooth'\n    ]\n    this.oscillatorTypeToAdd = 'sine';\n\n    // the text to display on the play/stop button\n    this.playStopButtonText = this.$translate('audioOscillator.play');\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'AudioOscillator'\n      }\n    ];\n\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'authoring') {\n      // generate the summernote rubric element id\n      this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n      // set the component rubric into the summernote rubric\n      this.summernoteRubricHTML = this.componentContent.rubric;\n\n      // the tooltip text for the insert WISE asset button\n      var insertAssetString = this.$translate('INSERT_ASSET');\n\n      /*\n       * create the custom button for inserting WISE assets into\n       * summernote\n       */\n      var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n      /*\n       * the options that specifies the tools to display in the\n       * summernote prompt\n       */\n      this.summernoteRubricOptions = {\n        toolbar: [\n          ['style', ['style']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['fontname', ['fontname']],\n          ['fontsize', ['fontsize']],\n          ['color', ['color']],\n          ['para', ['ul', 'ol', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'video']],\n          ['view', ['fullscreen', 'codeview', 'help']],\n          ['customButton', ['insertAssetButton']]\n        ],\n        height: 300,\n        disableDragAndDrop: true,\n        buttons: {\n          insertAssetButton: InsertAssetButton\n        }\n      };\n\n      // update which oscillator types should be checked\n      this.authoringProcessCheckedOscillatorTypes();\n\n      this.updateAdvancedAuthoringView();\n\n      $scope.$watch(function() {\n        return this.authoringComponentContent;\n      }.bind(this), function(newValue, oldValue) {\n\n        // stop the audio if it is playing\n        this.stop();\n\n        // inject asset paths if necessary\n        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n        this.submitCounter = 0;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // load the parameters into the component\n        this.setParametersFromComponentContent();\n\n        // draw the oscilloscope gride after the view has rendered\n        $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n      }.bind(this), true);\n    }\n\n    this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n    // load the parameters into the component\n    this.setParametersFromComponentContent();\n\n    var componentState = null;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        if (componentState == null) {\n          /*\n           * only import work if the student does not already have\n           * work for this component\n           */\n\n          // check if we need to import work\n          var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n          var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n          if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n            /*\n             * check if the node id is in the field that we used to store\n             * the import previous work node id in\n             */\n            importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n          }\n\n          if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n            /*\n             * check if the component id is in the field that we used to store\n             * the import previous work component id in\n             */\n            importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n          }\n\n          if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n          } else if (this.componentContent.starterSentence != null) {\n            /*\n             * the student has not done any work and there is a starter sentence\n             * so we will populate the textarea with the starter sentence\n             */\n            this.studentResponse = this.componentContent.starterSentence;\n          }\n        } else {\n          // populate the student work into this component\n          this.setStudentWork(componentState);\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // check if we need to lock this component\n    this.calculateDisabled();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    if (this.mode !== 'grading' && this.mode !== 'gradingRevision') {\n      // create the audio context\n      this.audioContext = new AudioContext();\n\n      /*\n       * draw the oscilloscope grid after angular has finished rendering\n       * the view. we need to wait until after angular has set the\n       * canvas width and height to draw the grid because setting the\n       * dimensions of the canvas will erase it.\n       */\n      $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n    }\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.audioOscillatorController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.audioOscillatorController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.audioOscillatorController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }.bind(this));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      if (this.mode !== 'grading') {\n        // stop playing the audio if the student leaves the step\n        this.stop();\n        this.audioContext.close();\n      }\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Load the parameters from the component content object\n   */\n  setParametersFromComponentContent() {\n    if (this.componentContent.startingFrequency != null) {\n      this.frequency = this.componentContent.startingFrequency;\n    }\n\n    if (this.componentContent.oscillatorTypes != null) {\n      this.oscillatorTypes = this.componentContent.oscillatorTypes;\n\n      if (this.componentContent.oscillatorTypes.length > 0) {\n        this.oscillatorType = this.componentContent.oscillatorTypes[0];\n      }\n    }\n\n    if (this.componentContent.oscilloscopeWidth != null) {\n      this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n    }\n\n    if (this.componentContent.oscilloscopeHeight != null) {\n      this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n    }\n\n    if (this.componentContent.gridCellSize != null) {\n      this.gridCellSize = this.componentContent.gridCellSize;\n    }\n\n    if (this.componentContent.stopAfterGoodDraw != null) {\n      this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.frequenciesPlayed != null) {\n          // the frequencies the student has played\n          this.frequenciesPlayed = studentData.frequenciesPlayed;\n\n          if (this.frequenciesPlayed.length > 0) {\n            // repopulate the last frequency played\n            this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\n          }\n        }\n\n        if (studentData.frequenciesPlayedSorted != null) {\n          // the sorted frequencies the student has played\n          this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\n        }\n\n        if (studentData.numberOfFrequenciesPlayed != null) {\n          // the number of frequencies the student has played\n          this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\n        }\n\n        if (studentData.minFrequencyPlayed != null) {\n          // the minimum frequency the student has played\n          this.minFrequencyPlayed = studentData.minFrequencyPlayed;\n        }\n\n        if (studentData.maxFrequencyPlayed != null) {\n          // the maximum frequency the student has played\n          this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Set the frequencies played array\n   * @param frequenciesPlayed an array of numbers\n   */\n  setFrequenciesPlayed(frequenciesPlayed) {\n    this.frequenciesPlayed = frequenciesPlayed;\n  }\n\n  /**\n   * Get the frequencies the student played\n   */\n  getFrequenciesPlayed() {\n    return this.frequenciesPlayed;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // set the frequencies the student has played\n    studentData.frequenciesPlayed = this.frequenciesPlayed;\n\n    // set the sorted frequencies the student has played\n    studentData.frequenciesPlayedSorted = this.frequenciesPlayedSorted;\n\n    // set the number of frequencies the student has played\n    studentData.numberOfFrequenciesPlayed = this.numberOfFrequenciesPlayed;\n\n    // set the minimum frequency the student has played\n    studentData.minFrequencyPlayed = this.minFrequencyPlayed;\n\n    // set the maximum frequency the student has played\n    studentData.maxFrequencyPlayed = this.maxFrequencyPlayed;\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'AudioOscillator';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * The play/stop button was clicked\n   */\n  playStopClicked() {\n\n    if (this.isPlaying) {\n      // the audio is playing so we will now stop it\n      this.stop();\n\n      // change the button text to display 'Play'\n      this.playStopButtonText = this.$translate('audioOscillator.play');\n    } else {\n      // the audio is not playing so we will now play it\n      this.play();\n\n      // change the button text to display 'Stop'\n      this.playStopButtonText = this.$translate('audioOscillator.stop');\n    }\n  };\n\n  /**\n   * Start playing the audio and draw the oscilloscope\n   */\n  play() {\n\n    // create the oscillator\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.type = this.oscillatorType;\n    this.oscillator.frequency.value = this.frequency;\n\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0.5;\n    this.destination = this.audioContext.destination;\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n\n    // connect the audio components together\n    this.oscillator.connect(this.gain);\n    this.gain.connect(this.destination);\n    this.gain.connect(this.analyser);\n\n    this.oscillator.start();\n\n    /*\n     * reset the goodDraw boolean value to false because we need\n     * to find a good draw again\n     */\n    this.goodDraw = false;\n\n    // draw the oscilloscope\n    this.drawOscilloscope(this.analyser);\n\n    this.isPlaying = true;\n\n    /*\n     * add the current frequency to the array of frequencies the student\n     * has played\n     */\n    this.addFrequencyPlayed(this.frequency);\n\n    // set the student data to dirty\n    this.studentDataChanged();\n  }\n\n  /**\n   * Add a frequency the student has played\n   * @param frequency the new frequency the student has played\n   */\n  addFrequencyPlayed(frequency) {\n\n    // add the new frequency to the array of frequencies\n    this.frequenciesPlayed.push(frequency);\n\n    // make a copy of the frequencies played and sort it\n    this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\n    this.frequenciesPlayedSorted.sort((a, b) => (a - b));\n\n    // get the number of frequencies the student has played\n    this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\n\n    // get the minimum frequency the student has played\n    this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\n\n    // get the maximum frequency the student has played\n    this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\n  }\n\n  /**\n   * Stop the audio\n   */\n  stop() {\n    if (this.oscillator != null) {\n      this.oscillator.stop();\n    }\n\n    this.isPlaying = false;\n  }\n\n  /**\n   * Draw the oscilloscope\n   */\n  drawOscilloscope() {\n\n    // get the analyser to obtain the oscillator data\n    var analyser = this.analyser;\n\n    // get the oscilloscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n\n    // get the number of samples, this will be half the fftSize\n    var bufferLength = analyser.frequencyBinCount;\n\n    // create an array to hold the oscillator data\n    var timeData = new Uint8Array(bufferLength);\n\n    // populate the oscillator data into the timeData array\n    analyser.getByteTimeDomainData(timeData);\n\n    // draw the grid\n    this.drawOscilloscopeGrid();\n\n    // start drawing the audio signal line from the oscillator\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n    ctx.beginPath();\n\n    var sliceWidth = width * 1.0 / bufferLength;\n    var x = 0;\n    var v = 0;\n    var y = 0;\n\n    /*\n     * we want to start drawing the audio signal such that the first point\n     * is at 0,0 on the oscilloscope and the signal rises after that.\n     * e.g. pretend the ascii below is a sine wave\n     *   _    _\n     *  / \\  / \\\n     * -------------------\n     *   \\_/  \\_/\n     */\n    var foundFirstRisingZeroCrossing = false;\n    var firstRisingZeroCrossingIndex = null;\n    var firstPointDrawn = false;\n\n    /*\n     * loop through all the points and draw the signal from the first\n     * rising zero crossing to the end of the buffer\n     */\n    for (var i = 0; i < bufferLength; i++) {\n      var currentY = timeData[i] - 128;\n      var nextY = timeData[i + 1] - 128;\n\n      // check if the current data point is the first rising zero crossing\n      if (!foundFirstRisingZeroCrossing &&\n        (currentY < 0 || currentY == 0) && nextY > 0) {\n\n        // the point is the first rising zero crossing\n        foundFirstRisingZeroCrossing = true;\n        firstRisingZeroCrossingIndex = i;\n      }\n\n      if (foundFirstRisingZeroCrossing) {\n        /*\n         * we have found the first rising zero crossing so we can start\n         * drawing the points.\n         */\n\n        /*\n         * get the height of the point. we need to perform this\n         * subtraction of 128 to flip the value since canvas\n         * positioning is relative to the upper left corner being 0,0.\n         */\n        v = (128 - (timeData[i] - 128)) / 128.0;\n        y = v * height / 2;\n\n        if (firstPointDrawn) {\n          // this is not the first point to be drawn\n          ctx.lineTo(x, y);\n        } else {\n          // this is the first point to be drawn\n          ctx.moveTo(x, y);\n          firstPointDrawn = true;\n        }\n\n        // update the x position we are drawing at\n        x += sliceWidth;\n      }\n    }\n\n    if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n      /*\n       * we want the first rising zero crossing index to be close to zero\n       * so that the graph spans almost the whole width of the canvas.\n       * if first rising zero crossing index was close to bufferLength\n       * then we would see a cut off graph.\n       */\n      this.goodDraw = true;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n\n    if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n      /*\n       * the draw was not good so we will try to draw it again by\n       * sampling the oscillator again and drawing again. if the\n       * draw was good we will stop drawing.\n       */\n      requestAnimationFrame(() => {\n        this.drawOscilloscope();\n      });\n    }\n  }\n\n  /**\n   * Draw the oscilloscope gride\n   */\n  drawOscilloscopeGrid() {\n    // get the oscilliscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n    var gridCellSize = this.gridCellSize;\n\n    // draw a white background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'lightgrey';\n    ctx.beginPath();\n\n    var x = 0;\n\n    // draw the vertical lines\n    while (x < width) {\n\n      // draw a vertical line\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n\n      // move the x position to the right\n      x += gridCellSize;\n    }\n\n    // start by drawing the line in the middle\n    var y = height / 2;\n\n    // draw the horizontal lines above and including the middle line\n    while (y >= 0) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position up (this is up because of canvas positioning)\n      y -= gridCellSize;\n    }\n\n    y = height / 2;\n\n    // draw the horizontal lines below the middle line\n    while (y <= height) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position down (this is down because of canvas positioning)\n      y += gridCellSize;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n  }\n\n  /**\n   * The oscillator type changed\n   */\n  oscillatorTypeChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * The frequency changed\n   */\n  frequencyChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * Restart the player\n   */\n  restartPlayer() {\n    this.stop();\n    this.play();\n  }\n\n  /**\n   * Show the controls for adding an oscillator type\n   */\n  authoringOpenAddOscillatorType() {\n    this.showOscillatorTypeChooser = true;\n  }\n\n  /**\n   * The author has clicked the add button to add an oscillator type\n   */\n  authoringAddOscillatorTypeClicked() {\n    var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n      // the oscillator type is already in the array of oscillator types\n\n      alert(this.$translate('audioOscillator.errorYouHaveAlreadyAddedOscillatorType', { oscillatorTypeToAdd: oscillatorTypeToAdd }));\n    } else {\n      // the oscillator type is not already in the array of oscillator types\n      this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n\n      // hide the oscillator type chooser\n      this.showOscillatorTypeChooser = false;\n\n      // perform preview updating and project saving\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has clicked the cancel button for adding an oscillator type\n   */\n  authoringCancelOscillatorTypeClicked() {\n    // hide the oscillator type chooser\n    this.showOscillatorTypeChooser = false;\n  }\n\n  /**\n   * The author has clicked the delete button for removing an oscillator type\n   * @param index the index of the oscillator type to remove\n   */\n  authoringDeleteOscillatorTypeClicked(index) {\n\n    // remove the oscillator type at the given index\n    this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * One of the oscillator types was clicked in the authoring view\n   */\n  authoringViewOscillatorTypeClicked() {\n\n    /*\n     * clear the oscillator types so we can repopulate it with the\n     * ones that are checked\n     */\n    this.authoringComponentContent.oscillatorTypes = [];\n\n    if (this.authoringSineChecked) {\n      // sine is checked\n      this.authoringComponentContent.oscillatorTypes.push('sine');\n    }\n\n    if (this.authoringSquareChecked) {\n      // square is checked\n      this.authoringComponentContent.oscillatorTypes.push('square');\n    }\n\n    if (this.authoringTriangleChecked) {\n      // triangle is checked\n      this.authoringComponentContent.oscillatorTypes.push('triangle');\n    }\n\n    if (this.authoringSawtoothChecked) {\n      // sawtooth is checked\n      this.authoringComponentContent.oscillatorTypes.push('sawtooth');\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Determine which oscillator types should be checked\n   */\n  authoringProcessCheckedOscillatorTypes() {\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sine') != -1) {\n      this.authoringSineChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('square') != -1) {\n      this.authoringSquareChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('triangle') != -1) {\n      this.authoringTriangleChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sawtooth') != -1) {\n      this.authoringSawtoothChecked = true;\n    }\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedStudentData = {};\n      // loop through all the component states and merge the student data\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            this.mergeStudentData(mergedStudentData, studentData);\n          }\n        }\n      }\n      mergedComponentState.studentData = mergedStudentData;\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the values in the student data\n   * @param oldStudentData the old student data we will merge into\n   * @param newStudentData the new student data we will merge\n   * @return the merged student data\n   */\n  mergeStudentData(oldStudentData, newStudentData) {\n\n    if (oldStudentData != null && newStudentData != null) {\n\n      if (oldStudentData.frequenciesPlayed == null) {\n        oldStudentData.frequenciesPlayed = newStudentData.frequenciesPlayed;\n      } else {\n        oldStudentData.frequenciesPlayed = oldStudentData.frequenciesPlayed.concat(newStudentData.frequenciesPlayed);\n      }\n\n      if (oldStudentData.frequenciesPlayedSorted == null) {\n        oldStudentData.frequenciesPlayedSorted = newStudentData.frequenciesPlayed;\n      } else {\n        let frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(oldStudentData.frequenciesPlayed);\n        frequenciesPlayedSorted.sort();\n        oldStudentData.frequenciesPlayedSorted = frequenciesPlayedSorted;\n      }\n\n      if (oldStudentData.numberOfFrequenciesPlayed == null) {\n        oldStudentData.numberOfFrequenciesPlayed = newStudentData.numberOfFrequenciesPlayed;\n      } else {\n        oldStudentData.numberOfFrequenciesPlayed = oldStudentData.numberOfFrequenciesPlayed + newStudentData.numberOfFrequenciesPlayed;\n      }\n\n      if (oldStudentData.minFrequencyPlayed == null) {\n        oldStudentData.minFrequencyPlayed = newStudentData.minFrequencyPlayed;\n      } else {\n        oldStudentData.minFrequencyPlayed = Math.min(oldStudentData.minFrequencyPlayed, newStudentData.minFrequencyPlayed);\n      }\n\n      if (oldStudentData.maxFrequencyPlayed == null) {\n        oldStudentData.maxFrequencyPlayed = newStudentData.maxFrequencyPlayed;\n      } else {\n        oldStudentData.maxFrequencyPlayed = Math.max(oldStudentData.maxFrequencyPlayed, newStudentData.maxFrequencyPlayed);\n      }\n    }\n\n    return oldStudentData;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nAudioOscillatorController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'AudioOscillatorService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorController;\n"]}