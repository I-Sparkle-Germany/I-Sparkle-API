{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","NodeService","AudioOscillatorService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","playStopButtonText","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","authoringComponentContentJSONString","originalComponentContent","mode","id","showSaveButton","showSubmitButton","getLatestComponentAnnotations","workgroupId","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","authoringProcessCheckedOscillatorTypes","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","stop","injectAssetPaths","setParametersFromComponentContent","drawOscilloscopeGrid","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterSentence","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","audioContext","AudioContext","audioOscillatorController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","close","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","$broadcast","startingFrequency","length","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","push","prompt","showPreviousWorkPrompt","response","play","oscillator","createOscillator","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","makeCopyOfJSONObject","sort","a","b","Math","min","max","ctx","getElementById","getContext","width","canvas","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","alert","authoringViewComponentChanged","index","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","exitListener","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","authoringSineChecked","authoringSquareChecked","authoringTriangleChecked","authoringSawtoothChecked","tags","tag","answer","confirm","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedStudentData","mergeStudentData","oldStudentData","newStudentData","concat","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentType","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nclass AudioOscillatorController {\n\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      AudioOscillatorService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n\n    this.$filter = $filter\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$timeout = $timeout;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.AudioOscillatorService = AudioOscillatorService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // an array of frequencies that the student has played\n    this.frequenciesPlayed = [];\n\n    // an array of sorted frequencies that the student has played\n    this.frequenciesPlayedSorted = [];\n\n    // the number of frequences the student has played\n    this.numberOfFrequenciesPlayed = 0;\n\n    // the lowest frequency the student played\n    this.minFrequencyPlayed = null;\n\n    // the highest frequency the student played\n    this.maxFrequencyPlayed = null;\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether this component is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // whether the submit button is disabled\n    this.isSubmitButtonDisabled = false;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the audio is playing\n    this.isPlaying = false;\n\n    // default oscillator type to sine\n    this.oscillatorType = 'sine';\n\n    // default frequency is 440\n    this.frequency = 440;\n\n    // holds the oscillator types the student can choose\n    this.oscillatorTypes = [];\n\n    // the default dimensions of the oscilloscope\n    this.oscilloscopeId = 'oscilloscope';\n    this.oscilloscopeWidth = 800;\n    this.oscilloscopeHeight = 400;\n    this.gridCellSize = 50;\n\n    // whether we should stop drawing after a good draw\n    this.stopAfterGoodDraw = true;\n\n    this.showOscillatorTypeChooser = false;\n    this.availableOscillatorTypes = [\n      'sine',\n      'square',\n      'triangle',\n      'sawtooth'\n    ]\n    this.oscillatorTypeToAdd = 'sine';\n\n    // the text to display on the play/stop button\n    this.playStopButtonText = this.$translate('audioOscillator.play');\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'AudioOscillator'\n      }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    this.mode = this.$scope.mode;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        // update which oscillator types should be checked\n        this.authoringProcessCheckedOscillatorTypes();\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n\n          // stop the audio if it is playing\n          this.stop();\n\n          // inject asset paths if necessary\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          this.submitCounter = 0;\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n          // load the parameters into the component\n          this.setParametersFromComponentContent();\n\n          // draw the oscilloscope gride after the view has rendered\n          $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n        }.bind(this), true);\n      }\n\n      this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n      // load the parameters into the component\n      this.setParametersFromComponentContent();\n\n      var componentState = null;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      // get the component state from the scope\n      componentState = this.$scope.componentState;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        } else if (componentState == null) {\n          // check if we need to import work\n\n          if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n              /*\n               * check if the node id is in the field that we used to store\n               * the import previous work node id in\n               */\n              importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n              /*\n               * check if the component id is in the field that we used to store\n               * the import previous work component id in\n               */\n              importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n              // import the work from the other component\n              this.importWork();\n            } else if (this.componentContent.starterSentence != null) {\n              /*\n               * the student has not done any work and there is a starter sentence\n               * so we will populate the textarea with the starter sentence\n               */\n              this.studentResponse = this.componentContent.starterSentence;\n            }\n          } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n          }\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n\n      if (this.mode !== 'grading' && this.mode !== 'gradingRevision') {\n        // create the audio context\n        this.audioContext = new AudioContext();\n\n        /*\n         * draw the oscilloscope grid after angular has finished rendering\n         * the view. we need to wait until after angular has set the\n         * canvas width and height to draw the grid because setting the\n         * dimensions of the canvas will erase it.\n         */\n        $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n      }\n    }\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.audioOscillatorController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.audioOscillatorController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.audioOscillatorController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }.bind(this));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      if (this.mode !== 'grading') {\n        // stop playing the audio if the student leaves the step\n        this.stop();\n        this.audioContext.close();\n      }\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Load the parameters from the component content object\n   */\n  setParametersFromComponentContent() {\n    if (this.componentContent.startingFrequency != null) {\n      this.frequency = this.componentContent.startingFrequency;\n    }\n\n    if (this.componentContent.oscillatorTypes != null) {\n      this.oscillatorTypes = this.componentContent.oscillatorTypes;\n\n      if (this.componentContent.oscillatorTypes.length > 0) {\n        this.oscillatorType = this.componentContent.oscillatorTypes[0];\n      }\n    }\n\n    if (this.componentContent.oscilloscopeWidth != null) {\n      this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n    }\n\n    if (this.componentContent.oscilloscopeHeight != null) {\n      this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n    }\n\n    if (this.componentContent.gridCellSize != null) {\n      this.gridCellSize = this.componentContent.gridCellSize;\n    }\n\n    if (this.componentContent.stopAfterGoodDraw != null) {\n      this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.frequenciesPlayed != null) {\n          // the frequencies the student has played\n          this.frequenciesPlayed = studentData.frequenciesPlayed;\n\n          if (this.frequenciesPlayed.length > 0) {\n            // repopulate the last frequency played\n            this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\n          }\n        }\n\n        if (studentData.frequenciesPlayedSorted != null) {\n          // the sorted frequencies the student has played\n          this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\n        }\n\n        if (studentData.numberOfFrequenciesPlayed != null) {\n          // the number of frequencies the student has played\n          this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\n        }\n\n        if (studentData.minFrequencyPlayed != null) {\n          // the minimum frequency the student has played\n          this.minFrequencyPlayed = studentData.minFrequencyPlayed;\n        }\n\n        if (studentData.maxFrequencyPlayed != null) {\n          // the maximum frequency the student has played\n          this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    if (this.mode === 'authoring') {\n      /*\n       * we are in authoring mode so we will set isDirty to false here\n       * because the 'componentSaveTriggered' event won't work in\n       * authoring mode\n       */\n      this.isDirty = false;\n    }\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Set the frequencies played array\n   * @param frequenciesPlayed an array of numbers\n   */\n  setFrequenciesPlayed(frequenciesPlayed) {\n    this.frequenciesPlayed = frequenciesPlayed;\n  }\n\n  /**\n   * Get the frequencies the student played\n   */\n  getFrequenciesPlayed() {\n    return this.frequenciesPlayed;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // set the frequencies the student has played\n    studentData.frequenciesPlayed = this.frequenciesPlayed;\n\n    // set the sorted frequencies the student has played\n    studentData.frequenciesPlayedSorted = this.frequenciesPlayedSorted;\n\n    // set the number of frequencies the student has played\n    studentData.numberOfFrequenciesPlayed = this.numberOfFrequenciesPlayed;\n\n    // set the minimum frequency the student has played\n    studentData.minFrequencyPlayed = this.minFrequencyPlayed;\n\n    // set the maximum frequency the student has played\n    studentData.maxFrequencyPlayed = this.maxFrequencyPlayed;\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'AudioOscillator';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * The play/stop button was clicked\n   */\n  playStopClicked() {\n\n    if (this.isPlaying) {\n      // the audio is playing so we will now stop it\n      this.stop();\n\n      // change the button text to display 'Play'\n      this.playStopButtonText = this.$translate('audioOscillator.play');\n    } else {\n      // the audio is not playing so we will now play it\n      this.play();\n\n      // change the button text to display 'Stop'\n      this.playStopButtonText = this.$translate('audioOscillator.stop');\n    }\n  };\n\n  /**\n   * Start playing the audio and draw the oscilloscope\n   */\n  play() {\n\n    // create the oscillator\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.type = this.oscillatorType;\n    this.oscillator.frequency.value = this.frequency;\n\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0.5;\n    this.destination = this.audioContext.destination;\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n\n    // connect the audio components together\n    this.oscillator.connect(this.gain);\n    this.gain.connect(this.destination);\n    this.gain.connect(this.analyser);\n\n    this.oscillator.start();\n\n    /*\n     * reset the goodDraw boolean value to false because we need\n     * to find a good draw again\n     */\n    this.goodDraw = false;\n\n    // draw the oscilloscope\n    this.drawOscilloscope(this.analyser);\n\n    this.isPlaying = true;\n\n    /*\n     * add the current frequency to the array of frequencies the student\n     * has played\n     */\n    this.addFrequencyPlayed(this.frequency);\n\n    // set the student data to dirty\n    this.studentDataChanged();\n  }\n\n  /**\n   * Add a frequency the student has played\n   * @param frequency the new frequency the student has played\n   */\n  addFrequencyPlayed(frequency) {\n\n    // add the new frequency to the array of frequencies\n    this.frequenciesPlayed.push(frequency);\n\n    // make a copy of the frequencies played and sort it\n    this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\n    this.frequenciesPlayedSorted.sort((a, b) => (a - b));\n\n    // get the number of frequencies the student has played\n    this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\n\n    // get the minimum frequency the student has played\n    this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\n\n    // get the maximum frequency the student has played\n    this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\n  }\n\n  /**\n   * Stop the audio\n   */\n  stop() {\n    if (this.oscillator != null) {\n      this.oscillator.stop();\n    }\n\n    this.isPlaying = false;\n  }\n\n  /**\n   * Draw the oscilloscope\n   */\n  drawOscilloscope() {\n\n    // get the analyser to obtain the oscillator data\n    var analyser = this.analyser;\n\n    // get the oscilloscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n\n    // get the number of samples, this will be half the fftSize\n    var bufferLength = analyser.frequencyBinCount;\n\n    // create an array to hold the oscillator data\n    var timeData = new Uint8Array(bufferLength);\n\n    // populate the oscillator data into the timeData array\n    analyser.getByteTimeDomainData(timeData);\n\n    // draw the grid\n    this.drawOscilloscopeGrid();\n\n    // start drawing the audio signal line from the oscillator\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n    ctx.beginPath();\n\n    var sliceWidth = width * 1.0 / bufferLength;\n    var x = 0;\n    var v = 0;\n    var y = 0;\n\n    /*\n     * we want to start drawing the audio signal such that the first point\n     * is at 0,0 on the oscilloscope and the signal rises after that.\n     * e.g. pretend the ascii below is a sine wave\n     *   _    _\n     *  / \\  / \\\n     * -------------------\n     *   \\_/  \\_/\n     */\n    var foundFirstRisingZeroCrossing = false;\n    var firstRisingZeroCrossingIndex = null;\n    var firstPointDrawn = false;\n\n    /*\n     * loop through all the points and draw the signal from the first\n     * rising zero crossing to the end of the buffer\n     */\n    for (var i = 0; i < bufferLength; i++) {\n      var currentY = timeData[i] - 128;\n      var nextY = timeData[i + 1] - 128;\n\n      // check if the current data point is the first rising zero crossing\n      if (!foundFirstRisingZeroCrossing &&\n        (currentY < 0 || currentY == 0) && nextY > 0) {\n\n        // the point is the first rising zero crossing\n        foundFirstRisingZeroCrossing = true;\n        firstRisingZeroCrossingIndex = i;\n      }\n\n      if (foundFirstRisingZeroCrossing) {\n        /*\n         * we have found the first rising zero crossing so we can start\n         * drawing the points.\n         */\n\n        /*\n         * get the height of the point. we need to perform this\n         * subtraction of 128 to flip the value since canvas\n         * positioning is relative to the upper left corner being 0,0.\n         */\n        v = (128 - (timeData[i] - 128)) / 128.0;\n        y = v * height / 2;\n\n        if (firstPointDrawn) {\n          // this is not the first point to be drawn\n          ctx.lineTo(x, y);\n        } else {\n          // this is the first point to be drawn\n          ctx.moveTo(x, y);\n          firstPointDrawn = true;\n        }\n\n        // update the x position we are drawing at\n        x += sliceWidth;\n      }\n    }\n\n    if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n      /*\n       * we want the first rising zero crossing index to be close to zero\n       * so that the graph spans almost the whole width of the canvas.\n       * if first rising zero crossing index was close to bufferLength\n       * then we would see a cut off graph.\n       */\n      this.goodDraw = true;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n\n    if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n      /*\n       * the draw was not good so we will try to draw it again by\n       * sampling the oscillator again and drawing again. if the\n       * draw was good we will stop drawing.\n       */\n      requestAnimationFrame(() => {\n        this.drawOscilloscope();\n      });\n    }\n  }\n\n  /**\n   * Draw the oscilloscope gride\n   */\n  drawOscilloscopeGrid() {\n    // get the oscilliscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n    var gridCellSize = this.gridCellSize;\n\n    // draw a white background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'lightgrey';\n    ctx.beginPath();\n\n    var x = 0;\n\n    // draw the vertical lines\n    while (x < width) {\n\n      // draw a vertical line\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n\n      // move the x position to the right\n      x += gridCellSize;\n    }\n\n    // start by drawing the line in the middle\n    var y = height / 2;\n\n    // draw the horizontal lines above and including the middle line\n    while (y >= 0) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position up (this is up because of canvas positioning)\n      y -= gridCellSize;\n    }\n\n    y = height / 2;\n\n    // draw the horizontal lines below the middle line\n    while (y <= height) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position down (this is down because of canvas positioning)\n      y += gridCellSize;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n  }\n\n  /**\n   * The oscillator type changed\n   */\n  oscillatorTypeChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * The frequency changed\n   */\n  frequencyChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * Restart the player\n   */\n  restartPlayer() {\n    this.stop();\n    this.play();\n  }\n\n  /**\n   * Show the controls for adding an oscillator type\n   */\n  authoringOpenAddOscillatorType() {\n    this.showOscillatorTypeChooser = true;\n  }\n\n  /**\n   * The author has clicked the add button to add an oscillator type\n   */\n  authoringAddOscillatorTypeClicked() {\n    var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n      // the oscillator type is already in the array of oscillator types\n\n      alert(this.$translate('audioOscillator.errorYouHaveAlreadyAddedOscillatorType', { oscillatorTypeToAdd: oscillatorTypeToAdd }));\n    } else {\n      // the oscillator type is not already in the array of oscillator types\n      this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n\n      // hide the oscillator type chooser\n      this.showOscillatorTypeChooser = false;\n\n      // perform preview updating and project saving\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has clicked the cancel button for adding an oscillator type\n   */\n  authoringCancelOscillatorTypeClicked() {\n    // hide the oscillator type chooser\n    this.showOscillatorTypeChooser = false;\n  }\n\n  /**\n   * The author has clicked the delete button for removing an oscillator type\n   * @param index the index of the oscillator type to remove\n   */\n  authoringDeleteOscillatorTypeClicked(index) {\n\n    // remove the oscillator type at the given index\n    this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * One of the oscillator types was clicked in the authoring view\n   */\n  authoringViewOscillatorTypeClicked() {\n\n    /*\n     * clear the oscillator types so we can repopulate it with the\n     * ones that are checked\n     */\n    this.authoringComponentContent.oscillatorTypes = [];\n\n    if (this.authoringSineChecked) {\n      // sine is checked\n      this.authoringComponentContent.oscillatorTypes.push('sine');\n    }\n\n    if (this.authoringSquareChecked) {\n      // square is checked\n      this.authoringComponentContent.oscillatorTypes.push('square');\n    }\n\n    if (this.authoringTriangleChecked) {\n      // triangle is checked\n      this.authoringComponentContent.oscillatorTypes.push('triangle');\n    }\n\n    if (this.authoringSawtoothChecked) {\n      // sawtooth is checked\n      this.authoringComponentContent.oscillatorTypes.push('sawtooth');\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Determine which oscillator types should be checked\n   */\n  authoringProcessCheckedOscillatorTypes() {\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sine') != -1) {\n      this.authoringSineChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('square') != -1) {\n      this.authoringSquareChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('triangle') != -1) {\n      this.authoringTriangleChecked = true;\n    }\n\n    if (this.authoringComponentContent.oscillatorTypes.indexOf('sawtooth') != -1) {\n      this.authoringSawtoothChecked = true;\n    }\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedStudentData = {};\n      // loop through all the component states and merge the student data\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            this.mergeStudentData(mergedStudentData, studentData);\n          }\n        }\n      }\n      mergedComponentState.studentData = mergedStudentData;\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the values in the student data\n   * @param oldStudentData the old student data we will merge into\n   * @param newStudentData the new student data we will merge\n   * @return the merged student data\n   */\n  mergeStudentData(oldStudentData, newStudentData) {\n\n    if (oldStudentData != null && newStudentData != null) {\n\n      if (oldStudentData.frequenciesPlayed == null) {\n        oldStudentData.frequenciesPlayed = newStudentData.frequenciesPlayed;\n      } else {\n        oldStudentData.frequenciesPlayed = oldStudentData.frequenciesPlayed.concat(newStudentData.frequenciesPlayed);\n      }\n\n      if (oldStudentData.frequenciesPlayedSorted == null) {\n        oldStudentData.frequenciesPlayedSorted = newStudentData.frequenciesPlayed;\n      } else {\n        let frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(oldStudentData.frequenciesPlayed);\n        frequenciesPlayedSorted.sort();\n        oldStudentData.frequenciesPlayedSorted = frequenciesPlayedSorted;\n      }\n\n      if (oldStudentData.numberOfFrequenciesPlayed == null) {\n        oldStudentData.numberOfFrequenciesPlayed = newStudentData.numberOfFrequenciesPlayed;\n      } else {\n        oldStudentData.numberOfFrequenciesPlayed = oldStudentData.numberOfFrequenciesPlayed + newStudentData.numberOfFrequenciesPlayed;\n      }\n\n      if (oldStudentData.minFrequencyPlayed == null) {\n        oldStudentData.minFrequencyPlayed = newStudentData.minFrequencyPlayed;\n      } else {\n        oldStudentData.minFrequencyPlayed = Math.min(oldStudentData.minFrequencyPlayed, newStudentData.minFrequencyPlayed);\n      }\n\n      if (oldStudentData.maxFrequencyPlayed == null) {\n        oldStudentData.maxFrequencyPlayed = newStudentData.maxFrequencyPlayed;\n      } else {\n        oldStudentData.maxFrequencyPlayed = Math.max(oldStudentData.maxFrequencyPlayed, newStudentData.maxFrequencyPlayed);\n      }\n    }\n\n    return oldStudentData;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nAudioOscillatorController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'AudioOscillatorService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorController;\n"]}