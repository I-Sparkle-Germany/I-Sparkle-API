{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","AudioOscillatorService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","attachments","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","playStopButtonText","$translate","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","setParametersFromComponentContent","componentState","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","audioContext","AudioContext","drawOscilloscopeGrid","isDirty","audioOscillatorController","bind","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","stop","close","$broadcast","submit","startingFrequency","length","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","$emit","setSubmittedMessage","setSavedMessage","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","createNewComponentState","componentType","createComponentStateAdditionalProcessing","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","id","iconURL","push","response","play","oscillator","createOscillator","type","value","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","makeCopyOfJSONObject","sort","a","b","Math","min","max","ctx","document","getElementById","getContext","width","canvas","height","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","componentStates","mergedComponentState","mergedStudentData","c","mergeStudentData","oldStudentData","newStudentData","concat","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass AudioOscillatorController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      AudioOscillatorService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.AudioOscillatorService = AudioOscillatorService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // an array of frequencies that the student has played\n    this.frequenciesPlayed = [];\n\n    // an array of sorted frequencies that the student has played\n    this.frequenciesPlayedSorted = [];\n\n    // the number of frequences the student has played\n    this.numberOfFrequenciesPlayed = 0;\n\n    // the lowest frequency the student played\n    this.minFrequencyPlayed = null;\n\n    // the highest frequency the student played\n    this.maxFrequencyPlayed = null;\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the audio is playing\n    this.isPlaying = false;\n\n    // default oscillator type to sine\n    this.oscillatorType = 'sine';\n\n    // default frequency is 440\n    this.frequency = 440;\n\n    // holds the oscillator types the student can choose\n    this.oscillatorTypes = [];\n\n    // the default dimensions of the oscilloscope\n    this.oscilloscopeId = 'oscilloscope';\n    this.oscilloscopeWidth = 800;\n    this.oscilloscopeHeight = 400;\n    this.gridCellSize = 50;\n\n    // whether we should stop drawing after a good draw\n    this.stopAfterGoodDraw = true;\n\n    this.showOscillatorTypeChooser = false;\n    this.availableOscillatorTypes = [\n      'sine',\n      'square',\n      'triangle',\n      'sawtooth'\n    ]\n    this.oscillatorTypeToAdd = 'sine';\n\n    // the text to display on the play/stop button\n    this.playStopButtonText = this.$translate('audioOscillator.play');\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n    // load the parameters into the component\n    this.setParametersFromComponentContent();\n\n    var componentState = null;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    if (this.mode !== 'grading' && this.mode !== 'gradingRevision') {\n      // create the audio context\n      this.audioContext = new AudioContext();\n\n      /*\n       * draw the oscilloscope grid after angular has finished rendering\n       * the view. we need to wait until after angular has set the\n       * canvas width and height to draw the grid because setting the\n       * dimensions of the canvas will erase it.\n       */\n      $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n    }\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.audioOscillatorController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.audioOscillatorController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.audioOscillatorController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      if (this.mode !== 'grading') {\n        // stop playing the audio if the student leaves the step\n        this.stop();\n        this.audioContext.close();\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Load the parameters from the component content object\n   */\n  setParametersFromComponentContent() {\n    if (this.componentContent.startingFrequency != null) {\n      this.frequency = this.componentContent.startingFrequency;\n    }\n\n    if (this.componentContent.oscillatorTypes != null) {\n      this.oscillatorTypes = this.componentContent.oscillatorTypes;\n\n      if (this.componentContent.oscillatorTypes.length > 0) {\n        this.oscillatorType = this.componentContent.oscillatorTypes[0];\n      }\n    }\n\n    if (this.componentContent.oscilloscopeWidth != null) {\n      this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n    }\n\n    if (this.componentContent.oscilloscopeHeight != null) {\n      this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n    }\n\n    if (this.componentContent.gridCellSize != null) {\n      this.gridCellSize = this.componentContent.gridCellSize;\n    }\n\n    if (this.componentContent.stopAfterGoodDraw != null) {\n      this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.frequenciesPlayed != null) {\n          // the frequencies the student has played\n          this.frequenciesPlayed = studentData.frequenciesPlayed;\n\n          if (this.frequenciesPlayed.length > 0) {\n            // repopulate the last frequency played\n            this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\n          }\n        }\n\n        if (studentData.frequenciesPlayedSorted != null) {\n          // the sorted frequencies the student has played\n          this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\n        }\n\n        if (studentData.numberOfFrequenciesPlayed != null) {\n          // the number of frequencies the student has played\n          this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\n        }\n\n        if (studentData.minFrequencyPlayed != null) {\n          // the minimum frequency the student has played\n          this.minFrequencyPlayed = studentData.minFrequencyPlayed;\n        }\n\n        if (studentData.maxFrequencyPlayed != null) {\n          // the maximum frequency the student has played\n          this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Set the frequencies played array\n   * @param frequenciesPlayed an array of numbers\n   */\n  setFrequenciesPlayed(frequenciesPlayed) {\n    this.frequenciesPlayed = frequenciesPlayed;\n  }\n\n  /**\n   * Get the frequencies the student played\n   */\n  getFrequenciesPlayed() {\n    return this.frequenciesPlayed;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // set the frequencies the student has played\n    studentData.frequenciesPlayed = this.frequenciesPlayed;\n\n    // set the sorted frequencies the student has played\n    studentData.frequenciesPlayedSorted = this.frequenciesPlayedSorted;\n\n    // set the number of frequencies the student has played\n    studentData.numberOfFrequenciesPlayed = this.numberOfFrequenciesPlayed;\n\n    // set the minimum frequency the student has played\n    studentData.minFrequencyPlayed = this.minFrequencyPlayed;\n\n    // set the maximum frequency the student has played\n    studentData.maxFrequencyPlayed = this.maxFrequencyPlayed;\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'AudioOscillator';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * The play/stop button was clicked\n   */\n  playStopClicked() {\n\n    if (this.isPlaying) {\n      // the audio is playing so we will now stop it\n      this.stop();\n\n      // change the button text to display 'Play'\n      this.playStopButtonText = this.$translate('audioOscillator.play');\n    } else {\n      // the audio is not playing so we will now play it\n      this.play();\n\n      // change the button text to display 'Stop'\n      this.playStopButtonText = this.$translate('audioOscillator.stop');\n    }\n  };\n\n  /**\n   * Start playing the audio and draw the oscilloscope\n   */\n  play() {\n\n    // create the oscillator\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.type = this.oscillatorType;\n    this.oscillator.frequency.value = this.frequency;\n\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0.5;\n    this.destination = this.audioContext.destination;\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n\n    // connect the audio components together\n    this.oscillator.connect(this.gain);\n    this.gain.connect(this.destination);\n    this.gain.connect(this.analyser);\n\n    this.oscillator.start();\n\n    /*\n     * reset the goodDraw boolean value to false because we need\n     * to find a good draw again\n     */\n    this.goodDraw = false;\n\n    // draw the oscilloscope\n    this.drawOscilloscope(this.analyser);\n\n    this.isPlaying = true;\n\n    /*\n     * add the current frequency to the array of frequencies the student\n     * has played\n     */\n    this.addFrequencyPlayed(this.frequency);\n    this.studentDataChanged();\n  }\n\n  /**\n   * Add a frequency the student has played\n   * @param frequency the new frequency the student has played\n   */\n  addFrequencyPlayed(frequency) {\n\n    // add the new frequency to the array of frequencies\n    this.frequenciesPlayed.push(frequency);\n\n    // make a copy of the frequencies played and sort it\n    this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\n    this.frequenciesPlayedSorted.sort((a, b) => (a - b));\n\n    // get the number of frequencies the student has played\n    this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\n\n    // get the minimum frequency the student has played\n    this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\n\n    // get the maximum frequency the student has played\n    this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\n  }\n\n  /**\n   * Stop the audio\n   */\n  stop() {\n    if (this.oscillator != null) {\n      this.oscillator.stop();\n    }\n\n    this.isPlaying = false;\n  }\n\n  /**\n   * Draw the oscilloscope\n   */\n  drawOscilloscope() {\n\n    // get the analyser to obtain the oscillator data\n    var analyser = this.analyser;\n\n    // get the oscilloscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n\n    // get the number of samples, this will be half the fftSize\n    var bufferLength = analyser.frequencyBinCount;\n\n    // create an array to hold the oscillator data\n    var timeData = new Uint8Array(bufferLength);\n\n    // populate the oscillator data into the timeData array\n    analyser.getByteTimeDomainData(timeData);\n\n    // draw the grid\n    this.drawOscilloscopeGrid();\n\n    // start drawing the audio signal line from the oscillator\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n    ctx.beginPath();\n\n    var sliceWidth = width * 1.0 / bufferLength;\n    var x = 0;\n    var v = 0;\n    var y = 0;\n\n    /*\n     * we want to start drawing the audio signal such that the first point\n     * is at 0,0 on the oscilloscope and the signal rises after that.\n     * e.g. pretend the ascii below is a sine wave\n     *   _    _\n     *  / \\  / \\\n     * -------------------\n     *   \\_/  \\_/\n     */\n    var foundFirstRisingZeroCrossing = false;\n    var firstRisingZeroCrossingIndex = null;\n    var firstPointDrawn = false;\n\n    /*\n     * loop through all the points and draw the signal from the first\n     * rising zero crossing to the end of the buffer\n     */\n    for (var i = 0; i < bufferLength; i++) {\n      var currentY = timeData[i] - 128;\n      var nextY = timeData[i + 1] - 128;\n\n      // check if the current data point is the first rising zero crossing\n      if (!foundFirstRisingZeroCrossing &&\n        (currentY < 0 || currentY == 0) && nextY > 0) {\n\n        // the point is the first rising zero crossing\n        foundFirstRisingZeroCrossing = true;\n        firstRisingZeroCrossingIndex = i;\n      }\n\n      if (foundFirstRisingZeroCrossing) {\n        /*\n         * we have found the first rising zero crossing so we can start\n         * drawing the points.\n         */\n\n        /*\n         * get the height of the point. we need to perform this\n         * subtraction of 128 to flip the value since canvas\n         * positioning is relative to the upper left corner being 0,0.\n         */\n        v = (128 - (timeData[i] - 128)) / 128.0;\n        y = v * height / 2;\n\n        if (firstPointDrawn) {\n          // this is not the first point to be drawn\n          ctx.lineTo(x, y);\n        } else {\n          // this is the first point to be drawn\n          ctx.moveTo(x, y);\n          firstPointDrawn = true;\n        }\n\n        // update the x position we are drawing at\n        x += sliceWidth;\n      }\n    }\n\n    if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n      /*\n       * we want the first rising zero crossing index to be close to zero\n       * so that the graph spans almost the whole width of the canvas.\n       * if first rising zero crossing index was close to bufferLength\n       * then we would see a cut off graph.\n       */\n      this.goodDraw = true;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n\n    if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n      /*\n       * the draw was not good so we will try to draw it again by\n       * sampling the oscillator again and drawing again. if the\n       * draw was good we will stop drawing.\n       */\n      requestAnimationFrame(() => {\n        this.drawOscilloscope();\n      });\n    }\n  }\n\n  /**\n   * Draw the oscilloscope gride\n   */\n  drawOscilloscopeGrid() {\n    // get the oscilliscope canvas context\n    var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n    var gridCellSize = this.gridCellSize;\n\n    // draw a white background\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'lightgrey';\n    ctx.beginPath();\n\n    var x = 0;\n\n    // draw the vertical lines\n    while (x < width) {\n\n      // draw a vertical line\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n\n      // move the x position to the right\n      x += gridCellSize;\n    }\n\n    // start by drawing the line in the middle\n    var y = height / 2;\n\n    // draw the horizontal lines above and including the middle line\n    while (y >= 0) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position up (this is up because of canvas positioning)\n      y -= gridCellSize;\n    }\n\n    y = height / 2;\n\n    // draw the horizontal lines below the middle line\n    while (y <= height) {\n\n      // draw a horizontal line\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n\n      // move the y position down (this is down because of canvas positioning)\n      y += gridCellSize;\n    }\n\n    // draw the lines on the canvas\n    ctx.stroke();\n  }\n\n  /**\n   * The oscillator type changed\n   */\n  oscillatorTypeChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * The frequency changed\n   */\n  frequencyChanged() {\n\n    // clear the grid\n    this.drawOscilloscopeGrid();\n\n    if(this.isPlaying) {\n      this.restartPlayer();\n    }\n  }\n\n  /**\n   * Restart the player\n   */\n  restartPlayer() {\n    this.stop();\n    this.play();\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedStudentData = {};\n      // loop through all the component states and merge the student data\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            this.mergeStudentData(mergedStudentData, studentData);\n          }\n        }\n      }\n      mergedComponentState.studentData = mergedStudentData;\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the values in the student data\n   * @param oldStudentData the old student data we will merge into\n   * @param newStudentData the new student data we will merge\n   * @return the merged student data\n   */\n  mergeStudentData(oldStudentData, newStudentData) {\n\n    if (oldStudentData != null && newStudentData != null) {\n\n      if (oldStudentData.frequenciesPlayed == null) {\n        oldStudentData.frequenciesPlayed = newStudentData.frequenciesPlayed;\n      } else {\n        oldStudentData.frequenciesPlayed = oldStudentData.frequenciesPlayed.concat(newStudentData.frequenciesPlayed);\n      }\n\n      if (oldStudentData.frequenciesPlayedSorted == null) {\n        oldStudentData.frequenciesPlayedSorted = newStudentData.frequenciesPlayed;\n      } else {\n        let frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(oldStudentData.frequenciesPlayed);\n        frequenciesPlayedSorted.sort();\n        oldStudentData.frequenciesPlayedSorted = frequenciesPlayedSorted;\n      }\n\n      if (oldStudentData.numberOfFrequenciesPlayed == null) {\n        oldStudentData.numberOfFrequenciesPlayed = newStudentData.numberOfFrequenciesPlayed;\n      } else {\n        oldStudentData.numberOfFrequenciesPlayed = oldStudentData.numberOfFrequenciesPlayed + newStudentData.numberOfFrequenciesPlayed;\n      }\n\n      if (oldStudentData.minFrequencyPlayed == null) {\n        oldStudentData.minFrequencyPlayed = newStudentData.minFrequencyPlayed;\n      } else {\n        oldStudentData.minFrequencyPlayed = Math.min(oldStudentData.minFrequencyPlayed, newStudentData.minFrequencyPlayed);\n      }\n\n      if (oldStudentData.maxFrequencyPlayed == null) {\n        oldStudentData.maxFrequencyPlayed = newStudentData.maxFrequencyPlayed;\n      } else {\n        oldStudentData.maxFrequencyPlayed = Math.max(oldStudentData.maxFrequencyPlayed, newStudentData.maxFrequencyPlayed);\n      }\n    }\n\n    return oldStudentData;\n  }\n};\n\nAudioOscillatorController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'AudioOscillatorService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorController;\n"]}