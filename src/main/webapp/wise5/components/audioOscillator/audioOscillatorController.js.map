{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","NodeService","AudioOscillatorService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeId","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showOscillatorTypeChooser","availableOscillatorTypes","oscillatorTypeToAdd","playStopButtonText","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","showSaveButton","showSubmitButton","getLatestComponentAnnotations","workgroupId","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","authoringProcessCheckedOscillatorTypes","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","stop","injectAssetPaths","setParametersFromComponentContent","drawOscilloscopeGrid","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterSentence","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","audioContext","AudioContext","audioOscillatorController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","close","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","startingFrequency","length","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","push","prompt","showPreviousWorkPrompt","response","play","oscillator","createOscillator","type","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","makeCopyOfJSONObject","sort","a","b","Math","min","max","ctx","getElementById","getContext","width","canvas","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","foundFirstRisingZeroCrossing","firstRisingZeroCrossingIndex","firstPointDrawn","i","currentY","nextY","lineTo","moveTo","stroke","requestAnimationFrame","fillStyle","fillRect","restartPlayer","alert","authoringViewComponentChanged","index","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","exitListener","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","authoringSineChecked","authoringSquareChecked","authoringTriangleChecked","authoringSawtoothChecked","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\r\n\r\nclass AudioOscillatorController {\r\n\r\n    constructor($filter,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                $timeout,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NodeService,\r\n                AudioOscillatorService,\r\n                ProjectService,\r\n                StudentAssetService,\r\n                StudentDataService,\r\n                UtilService) {\r\n\r\n        this.$filter = $filter\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$timeout = $timeout;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NodeService = NodeService;\r\n        this.AudioOscillatorService = AudioOscillatorService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentAssetService = StudentAssetService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // holds the text that the student has typed\r\n        this.studentResponse = '';\r\n\r\n        // an array of frequencies that the student has played\r\n        this.frequenciesPlayed = [];\r\n\r\n        // an array of sorted frequencies that the student has played\r\n        this.frequenciesPlayedSorted = [];\r\n\r\n        // the number of frequences the student has played\r\n        this.numberOfFrequenciesPlayed = 0;\r\n\r\n        // the lowest frequency the student played\r\n        this.minFrequencyPlayed = null;\r\n\r\n        // the highest frequency the student played\r\n        this.maxFrequencyPlayed = null;\r\n\r\n        // holds student attachments like assets\r\n        this.attachments = [];\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // whether this component is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // whether students can attach files to their work\r\n        this.isStudentAttachmentEnabled = false;\r\n\r\n        // whether the prompt is shown or not\r\n        this.isPromptVisible = true;\r\n\r\n        // whether the save button is shown or not\r\n        this.isSaveButtonVisible = false;\r\n\r\n        // whether the submit button is shown or not\r\n        this.isSubmitButtonVisible = false;\r\n\r\n        // whether the submit button is disabled\r\n        this.isSubmitButtonDisabled = false;\r\n\r\n        // counter to keep track of the number of submits\r\n        this.submitCounter = 0;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // whether the audio is playing\r\n        this.isPlaying = false;\r\n\r\n        // default oscillator type to sine\r\n        this.oscillatorType = \"sine\";\r\n\r\n        // default frequency is 440\r\n        this.frequency = 440;\r\n\r\n        // holds the oscillator types the student can choose\r\n        this.oscillatorTypes = [];\r\n\r\n        // the default dimensions of the oscilloscope\r\n        this.oscilloscopeId = 'oscilloscope';\r\n        this.oscilloscopeWidth = 800;\r\n        this.oscilloscopeHeight = 400;\r\n        this.gridCellSize = 50;\r\n\r\n        // whether we should stop drawing after a good draw\r\n        this.stopAfterGoodDraw = true;\r\n\r\n        this.showOscillatorTypeChooser = false;\r\n        this.availableOscillatorTypes = [\r\n            'sine',\r\n            'square',\r\n            'triangle',\r\n            'sawtooth'\r\n        ]\r\n        this.oscillatorTypeToAdd = 'sine';\r\n\r\n        // the text to display on the play/stop button\r\n        this.playStopButtonText = this.$translate('audioOscillator.play');\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        this.mode = this.$scope.mode;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            if (this.mode === 'student') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                // update which oscillator types should be checked\r\n                this.authoringProcessCheckedOscillatorTypes();\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n\r\n                    // stop the audio if it is playing\r\n                    this.stop();\r\n\r\n                    // inject asset paths if necessary\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n\r\n                    this.submitCounter = 0;\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                    // load the parameters into the component\r\n                    this.setParametersFromComponentContent();\r\n\r\n                    // draw the oscilloscope gride after the view has rendered\r\n                    $timeout(() => {this.drawOscilloscopeGrid()}, 0);\r\n                }.bind(this), true);\r\n            }\r\n\r\n            this.oscilloscopeId = 'oscilloscope' + this.componentId;\r\n\r\n            // load the parameters into the component\r\n            this.setParametersFromComponentContent();\r\n\r\n            var componentState = null;\r\n\r\n            // set whether studentAttachment is enabled\r\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\r\n\r\n            // get the component state from the scope\r\n            componentState = this.$scope.componentState;\r\n\r\n            if (componentState == null) {\r\n                /*\r\n                 * only import work if the student does not already have\r\n                 * work for this component\r\n                 */\r\n\r\n                // check if we need to import work\r\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\r\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\r\n\r\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n                    /*\r\n                     * check if the node id is in the field that we used to store\r\n                     * the import previous work node id in\r\n                     */\r\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\r\n                }\r\n\r\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n                    /*\r\n                     * check if the component id is in the field that we used to store\r\n                     * the import previous work component id in\r\n                     */\r\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\r\n                }\r\n\r\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n                    // import the work from the other component\r\n                    this.importWork();\r\n                } else if (this.componentContent.starterSentence != null) {\r\n                    /*\r\n                     * the student has not done any work and there is a starter sentence\r\n                     * so we will populate the textarea with the starter sentence\r\n                     */\r\n                    this.studentResponse = this.componentContent.starterSentence;\r\n                }\r\n            } else {\r\n                // populate the student work into this component\r\n                this.setStudentWork(componentState);\r\n            }\r\n\r\n            // check if the student has used up all of their submits\r\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                /*\r\n                 * the student has used up all of their chances to submit so we\r\n                 * will disable the submit button\r\n                 */\r\n                this.isSubmitButtonDisabled = true;\r\n            }\r\n\r\n            // check if we need to lock this component\r\n            this.calculateDisabled();\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n\r\n            if (this.mode !== 'grading' && this.mode !== 'gradingRevision') {\r\n                // create the audio context\r\n                this.audioContext = new AudioContext();\r\n\r\n                /*\r\n                 * draw the oscilloscope grid after angular has finished rendering\r\n                 * the view. we need to wait until after angular has set the\r\n                 * canvas width and height to draw the grid because setting the\r\n                 * dimensions of the canvas will erase it.\r\n                 */\r\n                $timeout(() => {this.drawOscilloscopeGrid()}, 0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true iff there is student work that hasn't been saved yet\r\n         */\r\n        this.$scope.isDirty = function() {\r\n            return this.$scope.audioOscillatorController.isDirty;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.audioOscillatorController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.audioOscillatorController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n\r\n                // trigger the submit\r\n                var submitTriggeredBy = 'nodeSubmitButton';\r\n                this.submit(submitTriggeredBy);\r\n            }\r\n        }.bind(this));\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // set isDirty to false because the component state was just saved and notify node\r\n                this.isDirty = false;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                let isAutoSave = componentState.isAutoSave;\r\n                let isSubmit = componentState.isSubmit;\r\n                let serverSaveTime = componentState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                // set save message\r\n                if (isSubmit) {\r\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\r\n\r\n                    this.lockIfNecessary();\r\n\r\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                } else if (isAutoSave) {\r\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                } else {\r\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', (event, args) => {\r\n            if (this.mode !== 'grading') {\r\n                // stop playing the audio if the student leaves the step\r\n                this.stop();\r\n                this.audioContext.close();\r\n            }\r\n        });\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the parameters from the component content object\r\n     */\r\n    setParametersFromComponentContent() {\r\n        if (this.componentContent.startingFrequency != null) {\r\n            this.frequency = this.componentContent.startingFrequency;\r\n        }\r\n\r\n        if (this.componentContent.oscillatorTypes != null) {\r\n            this.oscillatorTypes = this.componentContent.oscillatorTypes;\r\n\r\n            if (this.componentContent.oscillatorTypes.length > 0) {\r\n                this.oscillatorType = this.componentContent.oscillatorTypes[0];\r\n            }\r\n        }\r\n\r\n        if (this.componentContent.oscilloscopeWidth != null) {\r\n            this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\r\n        }\r\n\r\n        if (this.componentContent.oscilloscopeHeight != null) {\r\n            this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\r\n        }\r\n\r\n        if (this.componentContent.gridCellSize != null) {\r\n            this.gridCellSize = this.componentContent.gridCellSize;\r\n        }\r\n\r\n        if (this.componentContent.stopAfterGoodDraw != null) {\r\n            this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                if (studentData.frequenciesPlayed != null) {\r\n                    // the frequencies the student has played\r\n                    this.frequenciesPlayed = studentData.frequenciesPlayed;\r\n\r\n                    if (this.frequenciesPlayed.length > 0) {\r\n                        // repopulate the last frequency played\r\n                        this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\r\n                    }\r\n                }\r\n\r\n                if (studentData.frequenciesPlayedSorted != null) {\r\n                    // the sorted frequencies the student has played\r\n                    this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\r\n                }\r\n\r\n                if (studentData.numberOfFrequenciesPlayed != null) {\r\n                    // the number of frequencies the student has played\r\n                    this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\r\n                }\r\n\r\n                if (studentData.minFrequencyPlayed != null) {\r\n                    // the minimum frequency the student has played\r\n                    this.minFrequencyPlayed = studentData.minFrequencyPlayed;\r\n                }\r\n\r\n                if (studentData.maxFrequencyPlayed != null) {\r\n                    // the maximum frequency the student has played\r\n                    this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\r\n                }\r\n\r\n                var submitCounter = studentData.submitCounter;\r\n\r\n                if (submitCounter != null) {\r\n                    // populate the submit counter\r\n                    this.submitCounter = submitCounter;\r\n                }\r\n\r\n                var attachments = studentData.attachments;\r\n\r\n                if (attachments != null) {\r\n                    this.attachments = attachments;\r\n                }\r\n\r\n                this.processLatestSubmit();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\r\n     */\r\n    processLatestSubmit() {\r\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n        if (latestState) {\r\n            let serverSaveTime = latestState.serverSaveTime;\r\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n            if (latestState.isSubmit) {\r\n                // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n            } else {\r\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        if (this.mode === 'authoring') {\r\n            /*\r\n             * we are in authoring mode so we will set isDirty to false here\r\n             * because the 'componentSaveTriggered' event won't work in\r\n             * authoring mode\r\n             */\r\n            this.isDirty = false;\r\n        }\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        // trigger the submit\r\n        var submitTriggeredBy = 'componentSubmitButton';\r\n        this.submit(submitTriggeredBy);\r\n    };\r\n\r\n\r\n    /**\r\n     * A submit was triggered by the component submit button or node submit button\r\n     * @param submitTriggeredBy what triggered the submit\r\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\r\n     */\r\n    submit(submitTriggeredBy) {\r\n\r\n        if (this.isSubmitDirty) {\r\n            // the student has unsubmitted work\r\n\r\n            var performSubmit = true;\r\n\r\n            if (this.componentContent.maxSubmitCount != null) {\r\n                // there is a max submit count\r\n\r\n                // calculate the number of submits this student has left\r\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\r\n\r\n                var message = '';\r\n\r\n                if (numberOfSubmitsLeft <= 0) {\r\n                    // the student does not have any more chances to submit\r\n                    performSubmit = false;\r\n                } else if (numberOfSubmitsLeft == 1) {\r\n                    /*\r\n                     * the student has one more chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                } else if (numberOfSubmitsLeft > 1) {\r\n                    /*\r\n                     * the student has more than one chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                }\r\n            }\r\n\r\n            if (performSubmit) {\r\n\r\n                /*\r\n                 * set isSubmit to true so that when the component state is\r\n                 * created, it will know that is a submit component state\r\n                 * instead of just a save component state\r\n                 */\r\n                this.isSubmit = true;\r\n\r\n                // increment the submit counter\r\n                this.incrementSubmitCounter();\r\n\r\n                // check if the student has used up all of their submits\r\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                    /*\r\n                     * the student has used up all of their submits so we will\r\n                     * disable the submit button\r\n                     */\r\n                    this.isSubmitButtonDisabled = true;\r\n                }\r\n\r\n                if (this.mode === 'authoring') {\r\n                    /*\r\n                     * we are in authoring mode so we will set values appropriately\r\n                     * here because the 'componentSubmitTriggered' event won't\r\n                     * work in authoring mode\r\n                     */\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.createComponentState('submit');\r\n                }\r\n\r\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\r\n                    // tell the parent node that this component wants to submit\r\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\r\n                    // nothing extra needs to be performed\r\n                }\r\n            } else {\r\n                /*\r\n                 * the student has cancelled the submit so if a component state\r\n                 * is created, it will just be a regular save and not submit\r\n                 */\r\n                this.isSubmit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment the submit counter\r\n     */\r\n    incrementSubmitCounter() {\r\n        this.submitCounter++;\r\n    }\r\n\r\n    lockIfNecessary() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flags so we will know we need to save or submit the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the frequencies played array\r\n     * @param frequenciesPlayed an array of numbers\r\n     */\r\n    setFrequenciesPlayed(frequenciesPlayed) {\r\n        this.frequenciesPlayed = frequenciesPlayed;\r\n    }\r\n\r\n    /**\r\n     * Get the frequencies the student played\r\n     */\r\n    getFrequenciesPlayed() {\r\n        return this.frequenciesPlayed;\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        // set the response into the component state\r\n        var studentData = {};\r\n\r\n        // set the frequencies the student has played\r\n        studentData.frequenciesPlayed = this.frequenciesPlayed;\r\n\r\n        // set the sorted frequencies the student has played\r\n        studentData.frequenciesPlayedSorted = this.frequenciesPlayedSorted;\r\n\r\n        // set the number of frequencies the student has played\r\n        studentData.numberOfFrequenciesPlayed = this.numberOfFrequenciesPlayed;\r\n\r\n        // set the minimum frequency the student has played\r\n        studentData.minFrequencyPlayed = this.minFrequencyPlayed;\r\n\r\n        // set the maximum frequency the student has played\r\n        studentData.maxFrequencyPlayed = this.maxFrequencyPlayed;\r\n\r\n        // set the submit counter\r\n        studentData.submitCounter = this.submitCounter;\r\n\r\n        // set the flag for whether the student submitted this work\r\n        componentState.isSubmit = this.isSubmit;\r\n\r\n        // set the student data into the component state\r\n        componentState.studentData = studentData;\r\n\r\n        /*\r\n         * reset the isSubmit value so that the next component state\r\n         * doesn't maintain the same value\r\n         */\r\n        this.isSubmit = false;\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the component after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    removeAttachment(attachment) {\r\n        if (this.attachments.indexOf(attachment) != -1) {\r\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\r\n            this.studentDataChanged();\r\n            // YOU ARE NOW FREEEEEEEEE!\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Attach student asset to this Component's attachments\r\n     * @param studentAsset\r\n     */\r\n    attachStudentAsset(studentAsset) {\r\n        if (studentAsset != null) {\r\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\r\n                if (copiedAsset != null) {\r\n                    var attachment = {\r\n                        studentAssetId: copiedAsset.id,\r\n                        iconURL: copiedAsset.iconURL\r\n                    };\r\n\r\n                    this.attachments.push(attachment);\r\n                    this.studentDataChanged();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Get the text the student typed\r\n     */\r\n    getResponse() {\r\n        var response = null;\r\n\r\n        if (this.studentResponse != null) {\r\n            response = this.studentResponse;\r\n        }\r\n\r\n        return response;\r\n    };\r\n\r\n    /**\r\n     * The play/stop button was clicked\r\n     */\r\n    playStopClicked() {\r\n\r\n        if (this.isPlaying) {\r\n            // the audio is playing so we will now stop it\r\n            this.stop();\r\n\r\n            // change the button text to display 'Play'\r\n            this.playStopButtonText = this.$translate('audioOscillator.play');\r\n        } else {\r\n            // the audio is not playing so we will now play it\r\n            this.play();\r\n\r\n            // change the button text to display 'Stop'\r\n            this.playStopButtonText = this.$translate('audioOscillator.stop');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Start playing the audio and draw the oscilloscope\r\n     */\r\n    play() {\r\n\r\n        // create the oscillator\r\n        this.oscillator = this.audioContext.createOscillator();\r\n        this.oscillator.type = this.oscillatorType;\r\n        this.oscillator.frequency.value = this.frequency;\r\n\r\n        this.gain = this.audioContext.createGain();\r\n        this.gain.gain.value = 0.5;\r\n        this.destination = this.audioContext.destination;\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.fftSize = 2048;\r\n\r\n        // connect the audio components together\r\n        this.oscillator.connect(this.gain);\r\n        this.gain.connect(this.destination);\r\n        this.gain.connect(this.analyser);\r\n\r\n        this.oscillator.start();\r\n\r\n        /*\r\n         * reset the goodDraw boolean value to false because we need\r\n         * to find a good draw again\r\n         */\r\n        this.goodDraw = false;\r\n\r\n        // draw the oscilloscope\r\n        this.drawOscilloscope(this.analyser);\r\n\r\n        this.isPlaying = true;\r\n\r\n        /*\r\n         * add the current frequency to the array of frequencies the student\r\n         * has played\r\n         */\r\n        this.addFrequencyPlayed(this.frequency);\r\n\r\n        // set the student data to dirty\r\n        this.studentDataChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a frequency the student has played\r\n     * @param frequency the new frequency the student has played\r\n     */\r\n    addFrequencyPlayed(frequency) {\r\n\r\n        // add the new frequency to the array of frequencies\r\n        this.frequenciesPlayed.push(frequency);\r\n\r\n        // make a copy of the frequencies played and sort it\r\n        this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\r\n        this.frequenciesPlayedSorted.sort((a, b) => (a - b));\r\n\r\n        // get the number of frequencies the student has played\r\n        this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\r\n\r\n        // get the minimum frequency the student has played\r\n        this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\r\n\r\n        // get the maximum frequency the student has played\r\n        this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\r\n    }\r\n\r\n    /**\r\n     * Stop the audio\r\n     */\r\n    stop() {\r\n        if (this.oscillator != null) {\r\n            this.oscillator.stop();\r\n        }\r\n\r\n        this.isPlaying = false;\r\n    }\r\n\r\n    /**\r\n     * Draw the oscilloscope\r\n     */\r\n    drawOscilloscope() {\r\n\r\n        // get the analyser to obtain the oscillator data\r\n        var analyser = this.analyser;\r\n\r\n        // get the oscilloscope canvas context\r\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\r\n\r\n        var width = ctx.canvas.width;\r\n        var height = ctx.canvas.height;\r\n\r\n        // get the number of samples, this will be half the fftSize\r\n        var bufferLength = analyser.frequencyBinCount;\r\n\r\n        // create an array to hold the oscillator data\r\n        var timeData = new Uint8Array(bufferLength);\r\n\r\n        // populate the oscillator data into the timeData array\r\n        analyser.getByteTimeDomainData(timeData);\r\n\r\n        // draw the grid\r\n        this.drawOscilloscopeGrid();\r\n\r\n        // start drawing the audio signal line from the oscillator\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\r\n        ctx.beginPath();\r\n\r\n        var sliceWidth = width * 1.0 / bufferLength;\r\n        var x = 0;\r\n        var v = 0;\r\n        var y = 0;\r\n\r\n        /*\r\n         * we want to start drawing the audio signal such that the first point\r\n         * is at 0,0 on the oscilloscope and the signal rises after that.\r\n         * e.g. pretend the ascii below is a sine wave\r\n         *   _      _\r\n         *  / \\    / \\\r\n         * -------------------\r\n         *     \\_/    \\_/\r\n         */\r\n        var foundFirstRisingZeroCrossing = false;\r\n        var firstRisingZeroCrossingIndex = null;\r\n        var firstPointDrawn = false;\r\n\r\n        /*\r\n         * loop through all the points and draw the signal from the first\r\n         * rising zero crossing to the end of the buffer\r\n         */\r\n        for (var i = 0; i < bufferLength; i++) {\r\n            var currentY = timeData[i] - 128;\r\n            var nextY = timeData[i + 1] - 128;\r\n\r\n            // check if the current data point is the first rising zero crossing\r\n            if (!foundFirstRisingZeroCrossing &&\r\n                (currentY < 0 || currentY == 0) && nextY > 0) {\r\n\r\n                // the point is the first rising zero crossing\r\n                foundFirstRisingZeroCrossing = true;\r\n                firstRisingZeroCrossingIndex = i;\r\n            }\r\n\r\n            if (foundFirstRisingZeroCrossing) {\r\n                /*\r\n                 * we have found the first rising zero crossing so we can start\r\n                 * drawing the points.\r\n                 */\r\n\r\n                /*\r\n                 * get the height of the point. we need to perform this\r\n                 * subtraction of 128 to flip the value since canvas\r\n                 * positioning is relative to the upper left corner being 0,0.\r\n                 */\r\n                v = (128 - (timeData[i] - 128)) / 128.0;\r\n                y = v * height / 2;\r\n\r\n                if (firstPointDrawn) {\r\n                    // this is not the first point to be drawn\r\n                    ctx.lineTo(x, y);\r\n                } else {\r\n                    // this is the first point to be drawn\r\n                    ctx.moveTo(x, y);\r\n                    firstPointDrawn = true;\r\n                }\r\n\r\n                // update the x position we are drawing at\r\n                x += sliceWidth;\r\n            }\r\n        }\r\n\r\n        if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\r\n            /*\r\n             * we want the first rising zero crossing index to be close to zero\r\n             * so that the graph spans almost the whole width of the canvas.\r\n             * if first rising zero crossing index was close to bufferLength\r\n             * then we would see a cut off graph.\r\n             */\r\n            this.goodDraw = true;\r\n        }\r\n\r\n        // draw the lines on the canvas\r\n        ctx.stroke();\r\n\r\n        if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\r\n            /*\r\n             * the draw was not good so we will try to draw it again by\r\n             * sampling the oscillator again and drawing again. if the\r\n             * draw was good we will stop drawing.\r\n             */\r\n            requestAnimationFrame(() => {\r\n                this.drawOscilloscope();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the oscilloscope gride\r\n     */\r\n    drawOscilloscopeGrid() {\r\n        // get the oscilliscope canvas context\r\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\r\n\r\n        var width = ctx.canvas.width;\r\n        var height = ctx.canvas.height;\r\n        var gridCellSize = this.gridCellSize;\r\n\r\n        // draw a white background\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeStyle = 'lightgrey';\r\n        ctx.beginPath();\r\n\r\n        var x = 0;\r\n\r\n        // draw the vertical lines\r\n        while (x < width) {\r\n\r\n            // draw a vertical line\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, height);\r\n\r\n            // move the x position to the right\r\n            x += gridCellSize;\r\n        }\r\n\r\n        // start by drawing the line in the middle\r\n        var y = height / 2;\r\n\r\n        // draw the horizontal lines above and including the middle line\r\n        while (y >= 0) {\r\n\r\n            // draw a horizontal line\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(width, y);\r\n\r\n            // move the y position up (this is up because of canvas positioning)\r\n            y -= gridCellSize;\r\n        }\r\n\r\n        y = height / 2;\r\n\r\n        // draw the horizontal lines below the middle line\r\n        while (y <= height) {\r\n\r\n            // draw a horizontal line\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(width, y);\r\n\r\n            // move the y position down (this is down because of canvas positioning)\r\n            y += gridCellSize;\r\n        }\r\n\r\n        // draw the lines on the canvas\r\n        ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     * The oscillator type changed\r\n     */\r\n    oscillatorTypeChanged() {\r\n\r\n        // clear the grid\r\n        this.drawOscilloscopeGrid();\r\n\r\n        if(this.isPlaying) {\r\n            this.restartPlayer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The frequency changed\r\n     */\r\n    frequencyChanged() {\r\n\r\n        // clear the grid\r\n        this.drawOscilloscopeGrid();\r\n\r\n        if(this.isPlaying) {\r\n            this.restartPlayer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restart the player\r\n     */\r\n    restartPlayer() {\r\n        this.stop();\r\n        this.play();\r\n    }\r\n\r\n    /**\r\n     * Show the controls for adding an oscillator type\r\n     */\r\n    authoringOpenAddOscillatorType() {\r\n        this.showOscillatorTypeChooser = true;\r\n    }\r\n\r\n    /**\r\n     * The author has clicked the add button to add an oscillator type\r\n     */\r\n    authoringAddOscillatorTypeClicked() {\r\n        var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\r\n\r\n        if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\r\n            // the oscillator type is already in the array of oscillator types\r\n\r\n            alert(this.$translate('audioOscillator.errorYouHaveAlreadyAddedOscillatorType', { oscillatorTypeToAdd: oscillatorTypeToAdd }));\r\n        } else {\r\n            // the oscillator type is not already in the array of oscillator types\r\n            this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\r\n\r\n            // hide the oscillator type chooser\r\n            this.showOscillatorTypeChooser = false;\r\n\r\n            // perform preview updating and project saving\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The author has clicked the cancel button for adding an oscillator type\r\n     */\r\n    authoringCancelOscillatorTypeClicked() {\r\n        // hide the oscillator type chooser\r\n        this.showOscillatorTypeChooser = false;\r\n    }\r\n\r\n    /**\r\n     * The author has clicked the delete button for removing an oscillator type\r\n     * @param index the index of the oscillator type to remove\r\n     */\r\n    authoringDeleteOscillatorTypeClicked(index) {\r\n\r\n        // remove the oscillator type at the given index\r\n        this.authoringComponentContent.oscillatorTypes.splice(index, 1);\r\n\r\n        // perform preview updating and project saving\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the import previous work node id and component id\r\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\r\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\r\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\r\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n\r\n                // get the latest component state for this component\r\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                /*\r\n                 * we will only import work into this component if the student\r\n                 * has not done any work for this component\r\n                 */\r\n                if(componentState == null) {\r\n                    // the student has not done any work for this component\r\n\r\n                    // get the latest component state from the component we are importing from\r\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\r\n\r\n                    if (importWorkComponentState != null) {\r\n                        /*\r\n                         * populate a new component state with the work from the\r\n                         * imported component state\r\n                         */\r\n                        var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\r\n\r\n                        // populate the component state into this component\r\n                        this.setStudentWork(populatedComponentState);\r\n\r\n                        // make the work dirty so that it gets saved\r\n                        this.studentDataChanged();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\r\n\r\n            // set the new component into the controller\r\n            this.componentContent = editedComponentContent;\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the step node ids in the project\r\n     * @returns all the step node ids\r\n     */\r\n    getStepNodeIds() {\r\n        var stepNodeIds = this.ProjectService.getNodeIds();\r\n\r\n        return stepNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\r\n\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * One of the oscillator types was clicked in the authoring view\r\n     */\r\n    authoringViewOscillatorTypeClicked() {\r\n\r\n        /*\r\n         * clear the oscillator types so we can repopulate it with the\r\n         * ones that are checked\r\n         */\r\n        this.authoringComponentContent.oscillatorTypes = [];\r\n\r\n        if (this.authoringSineChecked) {\r\n            // sine is checked\r\n            this.authoringComponentContent.oscillatorTypes.push('sine');\r\n        }\r\n\r\n        if (this.authoringSquareChecked) {\r\n            // square is checked\r\n            this.authoringComponentContent.oscillatorTypes.push('square');\r\n        }\r\n\r\n        if (this.authoringTriangleChecked) {\r\n            // triangle is checked\r\n            this.authoringComponentContent.oscillatorTypes.push('triangle');\r\n        }\r\n\r\n        if (this.authoringSawtoothChecked) {\r\n            // sawtooth is checked\r\n            this.authoringComponentContent.oscillatorTypes.push('sawtooth');\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Determine which oscillator types should be checked\r\n     */\r\n    authoringProcessCheckedOscillatorTypes() {\r\n\r\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('sine') != -1) {\r\n            this.authoringSineChecked = true;\r\n        }\r\n\r\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('square') != -1) {\r\n            this.authoringSquareChecked = true;\r\n        }\r\n\r\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('triangle') != -1) {\r\n            this.authoringTriangleChecked = true;\r\n        }\r\n\r\n        if (this.authoringComponentContent.oscillatorTypes.indexOf('sawtooth') != -1) {\r\n            this.authoringSawtoothChecked = true;\r\n        }\r\n    }\r\n};\r\n\r\nAudioOscillatorController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$timeout',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NodeService',\r\n    'AudioOscillatorService',\r\n    'ProjectService',\r\n    'StudentAssetService',\r\n    'StudentDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default AudioOscillatorController;\r\n"]}