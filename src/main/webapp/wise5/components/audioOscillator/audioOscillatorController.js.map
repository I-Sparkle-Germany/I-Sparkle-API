{"version":3,"sources":["audioOscillatorController.es6"],"names":[],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nclass AudioOscillatorController {\n\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                NodeService,\n                AudioOscillatorService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.NodeService = NodeService;\n        this.AudioOscillatorService = AudioOscillatorService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n        \n        // whether the audio is playing\n        this.isPlaying = false;\n        \n        // default oscillator type to sine\n        this.oscillatorType = \"sine\";\n        \n        // default frequency is 440\n        this.frequency = 440;\n        \n        // holds the oscillator types the student can choose\n        this.oscillatorTypes = [];\n        \n        // the default dimensions of the oscilloscope\n        this.oscilloscopeId = 'oscilloscope';\n        this.oscilloscopeWidth = 800;\n        this.oscilloscopeHeight = 400;\n        this.gridCellSize = 50;\n        \n        // create the audio context\n        this.audioContext = new AudioContext();\n        \n        // whether we should stop drawing after a good draw\n        this.stopAfterGoodDraw = true;\n        \n        this.showOscillatorTypeChooser = false;\n        this.availableOscillatorTypes = [\n            'sine',\n            'square',\n            'triangle',\n            'sawtooth'\n        ]\n        this.oscillatorTypeToAdd = 'sine';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    // stop the audio if it is playing\n                    this.stop();\n                    \n                    // inject asset paths if necessary\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    \n                    // load the parameters into the component\n                    this.setParametersFromComponentContent();\n                    \n                    // draw the oscilloscope gride after the view has rendered\n                    $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n                }.bind(this), true);\n            }\n            \n            this.oscilloscopeId = 'oscilloscope' + this.componentId;\n            \n            // load the parameters into the component\n            this.setParametersFromComponentContent();\n\n            var componentState = null;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n            \n            /*\n             * draw the oscilloscope grid after angular has finished rendering\n             * the view. we need to wait until after angular has set the\n             * canvas width and height to draw the grid because setting the\n             * dimensions of the canvas will erase it.\n             */\n            $timeout(() => {this.drawOscilloscopeGrid()}, 0);\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.audioOscillatorController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.audioOscillatorController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.audioOscillatorController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.audioOscillatorController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n            // stop playing the audio if the student leaves the step\n            this.stop();\n            this.audioContext.close();\n        }.bind(this));\n    }\n    \n    /**\n     * Load the parameters from the component content object\n     */\n    setParametersFromComponentContent() {\n        if (this.componentContent.startingFrequency != null) {\n            this.frequency = this.componentContent.startingFrequency;\n        }\n        \n        if (this.componentContent.oscillatorTypes != null) {\n            this.oscillatorTypes = this.componentContent.oscillatorTypes;\n            \n            if (this.componentContent.oscillatorTypes.length > 0) {\n                this.oscillatorType = this.componentContent.oscillatorTypes[0];\n            }\n        }\n        \n        if (this.componentContent.oscilloscopeWidth != null) {\n            this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n        }\n        \n        if (this.componentContent.oscilloscopeHeight != null) {\n            this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n        }\n        \n        if (this.componentContent.gridCellSize != null) {\n            this.gridCellSize = this.componentContent.gridCellSize;\n        }\n        \n        if (this.componentContent.stopAfterGoodDraw != null) {\n            this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n    \n    /**\n     * The play/stop button was clicked\n     */\n    playStopClicked() {\n        \n        if (this.isPlaying) {\n            // the audio is playing so we will now stop it\n            this.stop();\n        } else {\n            // the audio is not playing so we will not play it\n            this.play();\n        }\n    };\n    \n    /**\n     * Start playing the audio and draw the oscilloscope\n     */\n    play() {\n        \n        // create the oscillator\n        this.oscillator = this.audioContext.createOscillator();\n        this.oscillator.type = this.oscillatorType;\n        this.oscillator.frequency.value = this.frequency;\n        \n        this.gain = this.audioContext.createGain();\n        this.gain.gain.value = 0.5;\n        this.destination = this.audioContext.destination;\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n        \n        // connect the audio components together\n        this.oscillator.connect(this.gain);\n        this.gain.connect(this.destination);\n        this.gain.connect(this.analyser);\n        \n        this.oscillator.start();\n        \n        /*\n         * reset the goodDraw boolean value to false because we need \n         * to find a good draw again\n         */\n        this.goodDraw = false;\n        \n        // draw the oscilloscope\n        this.drawOscilloscope(this.analyser);\n        \n        this.isPlaying = true;\n    }\n    \n    /**\n     * Stop the audio\n     */\n    stop() {\n        if (this.oscillator != null) {\n            this.oscillator.stop();\n        }\n        \n        this.isPlaying = false;\n    }\n    \n    /**\n     * Draw the oscilloscope\n     */\n    drawOscilloscope() {\n        \n        // get the analyser to obtain the oscillator data\n        var analyser = this.analyser;\n        \n        // get the oscilloscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n        \n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n        \n        // get the number of samples, this will be half the fftSize\n        var bufferLength = analyser.frequencyBinCount;\n        \n        // create an array to hold the oscillator data\n        var timeData = new Uint8Array(bufferLength);\n\n        // populate the oscillator data into the timeData array\n        analyser.getByteTimeDomainData(timeData);\n        \n        // draw the grid\n        this.drawOscilloscopeGrid();\n\n        // start drawing the audio signal line from the oscillator\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'rgb(0, 200, 0)'; // green\n        ctx.beginPath();\n\n        var sliceWidth = width * 1.0 / bufferLength;\n        var x = 0;\n        var v = 0;\n        var y = 0;\n        \n        /*\n         * we want to start drawing the audio signal such that the first point\n         * is at 0,0 on the oscilloscope and the signal rises after that.\n         * e.g. pretend the ascii below is a sine wave\n         *   _      _\n         *  / \\    / \\\n         * -------------------\n         *     \\_/    \\_/\n         */\n        var foundFirstRisingZeroCrossing = false;\n        var firstRisingZeroCrossingIndex = null;\n        var firstPointDrawn = false;\n        \n        /*\n         * loop through all the points and draw the signal from the first\n         * rising zero crossing to the end of the buffer\n         */\n        for (var i = 0; i < bufferLength; i++) {\n            var currentY = timeData[i] - 128;\n            var nextY = timeData[i + 1] - 128;\n            \n            // check if the current data point is the first rising zero crossing\n            if (!foundFirstRisingZeroCrossing && \n                (currentY < 0 || currentY == 0) && nextY > 0) {\n                    \n                // the point is the first rising zero crossing\n                foundFirstRisingZeroCrossing = true;\n                firstRisingZeroCrossingIndex = i;\n            }\n            \n            if (foundFirstRisingZeroCrossing) {\n                /*\n                 * we have found the first rising zero crossing so we can start\n                 * drawing the points. \n                 */\n                \n                /*\n                 * get the height of the point. we need to perform this \n                 * subtraction of 128 to flip the value since canvas\n                 * positioning is relative to the upper left corner being 0,0.\n                 */\n                v = (128 - (timeData[i] - 128)) / 128.0;\n                y = v * height / 2;\n                \n                if (firstPointDrawn) {\n                    // this is not the first point to be drawn\n                    ctx.lineTo(x, y);\n                } else {\n                    // this is the first point to be drawn\n                    ctx.moveTo(x, y);\n                    firstPointDrawn = true;\n                }\n                \n                // update the x position we are drawing at\n                x += sliceWidth;\n            }\n        }\n        \n        if (firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10) {\n            /*\n             * we want the first rising zero crossing index to be close to zero\n             * so that the graph spans almost the whole width of the canvas.\n             * if first rising zero crossing index was close to bufferLength\n             * then we would see a cut off graph.\n             */\n            this.goodDraw = true;\n        }\n        \n        // draw the lines on the canvas\n        ctx.stroke();\n        \n        if (!this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw)) {\n            /*\n             * the draw was not good so we will try to draw it again by\n             * sampling the oscillator again and drawing again. if the\n             * draw was good we will stop drawing.\n             */\n            requestAnimationFrame(() => {\n                this.drawOscilloscope();\n            });\n        }\n    }\n    \n    /**\n     * Draw the oscilloscope gride\n     */\n    drawOscilloscopeGrid() {\n        // get the oscilliscope canvas context\n        var ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n        \n        var width = ctx.canvas.width;\n        var height = ctx.canvas.height;\n        var gridCellSize = this.gridCellSize;\n        \n        // draw a white background\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, width, height);\n        \n        ctx.lineWidth = 2;\n        ctx.strokeStyle = 'lightgrey';\n        ctx.beginPath();\n        \n        var x = 0;\n        \n        // draw the vertical lines\n        while (x < width) {\n            \n            // draw a vertical line\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, height);\n            \n            // move the x position to the right\n            x += gridCellSize;\n        }\n        \n        // start by drawing the line in the middle\n        var y = height / 2;\n        \n        // draw the horizontal lines above and including the middle line\n        while (y >= 0) {\n            \n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n            \n            // move the y position up (this is up because of canvas positioning)\n            y -= gridCellSize;\n        }\n        \n        y = height / 2;\n        \n        // draw the horizontal lines below the middle line\n        while (y <= height) {\n            \n            // draw a horizontal line\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n            \n            // move the y position down (this is down because of canvas positioning)\n            y += gridCellSize;\n        }\n        \n        // draw the lines on the canvas\n        ctx.stroke();\n    }\n    \n    /**\n     * The oscillator type changed\n     */\n    oscillatorTypeChanged() {\n        \n        // clear the grid\n        this.drawOscilloscopeGrid();\n        \n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n    \n    /**\n     * The frequency changed\n     */\n    frequencyChanged() {\n        \n        // clear the grid\n        this.drawOscilloscopeGrid();\n        \n        if(this.isPlaying) {\n            this.restartPlayer();\n        }\n    }\n    \n    /**\n     * Restart the player\n     */\n    restartPlayer() {\n        this.stop();\n        this.play();\n    }\n\n    /**\n     * Show the controls for adding an oscillator type\n     */\n    authoringOpenAddOscillatorType() {\n        this.showOscillatorTypeChooser = true;\n    }\n    \n    /**\n     * The author has clicked the add button to add an oscillator type\n     */\n    authoringAddOscillatorTypeClicked() {\n        var oscillatorTypeToAdd = this.oscillatorTypeToAdd;\n        \n        if (this.authoringComponentContent.oscillatorTypes.indexOf(oscillatorTypeToAdd) != -1) {\n            // the oscillator type is already in the array of oscillator types\n            \n            alert('Error: You have already added ' + oscillatorTypeToAdd);\n        } else {\n            // the oscillator type is not already in the array of oscillator types\n            this.authoringComponentContent.oscillatorTypes.push(oscillatorTypeToAdd);\n            \n            // hide the oscillator type chooser\n            this.showOscillatorTypeChooser = false;\n            \n            // perform preview updating and project saving\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The author has clicked the cancel button for adding an oscillator type\n     */\n    authoringCancelOscillatorTypeClicked() {\n        // hide the oscillator type chooser\n        this.showOscillatorTypeChooser = false;\n    }\n    \n    /**\n     * The author has clicked the delete button for removing an oscillator type\n     * @param index the index of the oscillator type to remove\n     */\n    authoringDeleteOscillatorTypeClicked(index) {\n        \n        // remove the oscillator type at the given index\n        this.authoringComponentContent.oscillatorTypes.splice(index, 1);\n        \n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.AudioOscillatorService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n    \n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n};\n\nAudioOscillatorController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'NodeService',\n    'AudioOscillatorService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default AudioOscillatorController;\n"]}