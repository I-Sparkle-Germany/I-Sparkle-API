{"version":3,"sources":["audioOscillatorService.es6"],"names":["AudioOscillatorService","$filter","StudentDataService","UtilService","$translate","component","type","oscillatorTypes","startingFrequency","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","showSubmitButton","showSaveButton","i","l","state","isSubmit","studentData","frequenciesPlayed","componentState","componentContent","$inject"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEMA,sB;;;AACJ,kCAAYC,OAAZ,EAAqBC,kBAArB,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,2IAC9CF,OAD8C,EACrCC,kBADqC,EACjBC,WADiB;AAErD;;;;4CAEuB;AACtB,aAAO,KAAKC,UAAL,CAAgB,oCAAhB,CAAP;AACD;;;sCAEiB;AAChB,UAAMC,2JAAN;AACAA,gBAAUC,IAAV,GAAiB,iBAAjB;AACAD,gBAAUE,eAAV,GAA4B,CAC1B,MAD0B,CAA5B;AAGAF,gBAAUG,iBAAV,GAA8B,GAA9B;AACAH,gBAAUI,iBAAV,GAA8B,GAA9B;AACAJ,gBAAUK,kBAAV,GAA+B,GAA/B;AACAL,gBAAUM,YAAV,GAAyB,EAAzB;AACAN,gBAAUO,iBAAV,GAA8B,KAA9B;AACA,aAAOP,SAAP;AACD;;;gCAEWA,S,EAAWQ,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACzE,UAAIC,SAAS,KAAb;;AAEA,UAAIJ,mBAAmBA,gBAAgBK,MAAvC,EAA+C;AAC7C,YAAIC,iBAAiBH,KAAKI,gBAAL,IAA0Bf,UAAUe,gBAAV,IAA8B,CAACJ,KAAKK,cAAnF;;AAEA,YAAIF,cAAJ,EAAoB;AAClB;AACA,eAAK,IAAIG,IAAI,CAAR,EAAWC,IAAIV,gBAAgBK,MAApC,EAA4CI,IAAIC,CAAhD,EAAmDD,GAAnD,EAAwD;AACtD,gBAAIE,QAAQX,gBAAgBS,CAAhB,CAAZ;AACA,gBAAIE,MAAMC,QAAN,IAAkBD,MAAME,WAA5B,EAAyC;AACvC;AACA,kBAAIF,MAAME,WAAN,CAAkBC,iBAAlB,IAAuC,IAAvC,IAA+CD,YAAYC,iBAAZ,CAA8BT,MAA9B,GAAuC,CAA1F,EAA6F;AAC3F;AACAD,yBAAS,IAAT;AACA;AACD;AACF;AACF;AACF,SAbD,MAaO;AACL;AACA,cAAIM,KAAIV,gBAAgBK,MAAhB,GAAyB,CAAjC;AACA,cAAIU,iBAAiBf,gBAAgBU,EAAhB,CAArB;;AAEA,cAAIG,eAAcE,eAAeF,WAAjC;;AAEA,cAAIA,gBAAe,IAAnB,EAAyB;AACvB,gBAAIA,aAAYC,iBAAZ,IAAiC,IAAjC,IAAyCD,aAAYC,iBAAZ,CAA8BT,MAA9B,GAAuC,CAApF,EAAuF;AACrF;AACAD,uBAAS,IAAT;AACD;AACF;AACF;AACF;;AAED,aAAOA,MAAP;AACD;;;iDAE4BW,c,EAAgBC,gB,EAAkB;AAC7D,UAAID,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIF,gBAAcE,eAAeF,WAAjC;AACA,YAAIA,iBAAe,IAAnB,EAAyB;AACvB,cAAIA,cAAYC,iBAAZ,IAAiC,IAAjC,IACFD,cAAYC,iBAAZ,CAA8BT,MAA9B,GAAuC,CADzC,EAC4C;AAC1C,mBAAO,IAAP;AACD;AACF;AACF;AACD,aAAO,KAAP;AACD;;;;;;AAGHlB,uBAAuB8B,OAAvB,GAAiC,CAC/B,SAD+B,EAE/B,oBAF+B,EAG/B,aAH+B,CAAjC;;kBAMe9B,sB","file":"audioOscillatorService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass AudioOscillatorService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('audioOscillator.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'AudioOscillator';\n    component.oscillatorTypes = [\n      'sine'\n    ];\n    component.startingFrequency = 440;\n    component.oscilloscopeWidth = 800;\n    component.oscilloscopeHeight = 400;\n    component.gridCellSize = 50;\n    component.stopAfterGoodDraw = false;\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n              // the student has played at least one frequency so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n            // the student has played at least one frequency so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        if (studentData.frequenciesPlayed != null &&\n          studentData.frequenciesPlayed.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nAudioOscillatorService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorService;\n"]}