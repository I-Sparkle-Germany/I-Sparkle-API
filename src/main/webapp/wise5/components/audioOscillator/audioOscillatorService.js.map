{"version":3,"sources":["audioOscillatorService.es6"],"names":["AudioOscillatorService","$filter","StudentDataService","UtilService","$translate","component","type","oscillatorTypes","startingFrequency","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","componentStates","componentEvents","nodeEvents","node","length","componentState","componentStateHasStudentWork","componentContent","studentData","frequenciesPlayed","ComponentService","$inject"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEMA,sB;;;AACJ,kCAAYC,OAAZ,EAAqBC,kBAArB,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,2IAC9CF,OAD8C,EACrCC,kBADqC,EACjBC,WADiB;AAErD;;;;4CAEuB;AACtB,aAAO,KAAKC,UAAL,CAAgB,oCAAhB,CAAP;AACD;;;sCAEiB;AAChB,UAAMC,2JAAN;AACAA,gBAAUC,IAAV,GAAiB,iBAAjB;AACAD,gBAAUE,eAAV,GAA4B,CAC1B,MAD0B,CAA5B;AAGAF,gBAAUG,iBAAV,GAA8B,GAA9B;AACAH,gBAAUI,iBAAV,GAA8B,GAA9B;AACAJ,gBAAUK,kBAAV,GAA+B,GAA/B;AACAL,gBAAUM,YAAV,GAAyB,EAAzB;AACAN,gBAAUO,iBAAV,GAA8B,IAA9B;AACA,aAAOP,SAAP;AACD;;;gCAEWA,S,EAAWQ,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACzE,UAAIH,mBAAmBA,gBAAgBI,MAAvC,EAA+C;AAC7C,YAAIC,iBAAiBL,gBAAgBA,gBAAgBI,MAAhB,GAAyB,CAAzC,CAArB;AACA,eAAO,KAAKE,4BAAL,CAAkCD,cAAlC,CAAP;AACD;AACD,aAAO,KAAP;AACD;;;iDAE4BA,c,EAAgBE,gB,EAAkB;AAC7D,UAAIF,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIG,cAAcH,eAAeG,WAAjC;AACA,YAAIA,eAAe,IAAnB,EAAyB;AACvB,cAAIA,YAAYC,iBAAZ,IAAiC,IAAjC,IACFD,YAAYC,iBAAZ,CAA8BL,MAA9B,GAAuC,CADzC,EAC4C;AAC1C,mBAAO,IAAP;AACD;AACF;AACF;AACD,aAAO,KAAP;AACD;;;;EA1CkCM,0B;;AA6CrCvB,uBAAuBwB,OAAvB,GAAiC,CAC/B,SAD+B,EAE/B,oBAF+B,EAG/B,aAH+B,CAAjC;;kBAMexB,sB","file":"audioOscillatorService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass AudioOscillatorService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('audioOscillator.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'AudioOscillator';\n    component.oscillatorTypes = [\n      'sine'\n    ];\n    component.startingFrequency = 440;\n    component.oscilloscopeWidth = 800;\n    component.oscilloscopeHeight = 400;\n    component.gridCellSize = 50;\n    component.stopAfterGoodDraw = true;\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    if (componentStates && componentStates.length) {\n      let componentState = componentStates[componentStates.length - 1];\n      return this.componentStateHasStudentWork(componentState);\n    }\n    return false;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        if (studentData.frequenciesPlayed != null &&\n          studentData.frequenciesPlayed.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nAudioOscillatorService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorService;\n"]}