{"version":3,"sources":["audioOscillatorService.es6"],"names":["AudioOscillatorService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","oscillatorTypes","startingFrequency","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showSaveButton","showSubmitButton","starterSentence","isStudentAttachmentEnabled","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","frequenciesPlayed","$inject"],"mappings":"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","file":"audioOscillatorService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass AudioOscillatorService extends NodeService {\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Get the component type label\n     * example\n     * \"Audio Oscillator\"\n     */\n    getComponentTypeLabel() {\n        return this.$translate('audioOscillator.componentTypeLabel');\n    }\n\n    /**\n     * Create a AudioOscillator component object\n     * @returns a new AudioOscillator component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'AudioOscillator';\n        component.prompt = '';\n        component.oscillatorTypes = [\n            'sine'\n        ];\n        component.startingFrequency = 440;\n        component.oscilloscopeWidth = 800;\n        component.oscilloscopeHeight = 400;\n        component.gridCellSize = 50;\n        component.stopAfterGoodDraw = false;\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.starterSentence = null;\n        component.isStudentAttachmentEnabled = false;\n\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'AudioOscillator') {\n                // the other component is an OpenResponse component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n                            // the student has played at least one frequency so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n                        // the student has played at least one frequency so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n}\n\nAudioOscillatorService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default AudioOscillatorService;\n"]}