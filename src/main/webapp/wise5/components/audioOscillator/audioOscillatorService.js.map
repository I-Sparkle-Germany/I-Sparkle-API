{"version":3,"sources":["audioOscillatorService.es6"],"names":["AudioOscillatorService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","oscillatorTypes","startingFrequency","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","showSaveButton","showSubmitButton","starterSentence","isStudentAttachmentEnabled","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","frequenciesPlayed","componentContent","$inject"],"mappings":"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","file":"audioOscillatorService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass AudioOscillatorService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Audio Oscillator\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('audioOscillator.componentTypeLabel');\n  }\n\n  /**\n   * Create a AudioOscillator component object\n   * @returns a new AudioOscillator component object\n   */\n  createComponent() {\n\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'AudioOscillator';\n    component.prompt = '';\n    component.oscillatorTypes = [\n      'sine'\n    ];\n    component.startingFrequency = 440;\n    component.oscilloscopeWidth = 800;\n    component.oscilloscopeHeight = 400;\n    component.gridCellSize = 50;\n    component.stopAfterGoodDraw = false;\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.starterSentence = null;\n    component.isStudentAttachmentEnabled = false;\n\n    return component;\n  }\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'AudioOscillator') {\n        // the other component is an OpenResponse component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n              // the student has played at least one frequency so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.frequenciesPlayed != null && studentData.frequenciesPlayed.length > 0) {\n            // the student has played at least one frequency so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        if (studentData.frequenciesPlayed != null &&\n          studentData.frequenciesPlayed.length > 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nAudioOscillatorService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorService;\n"]}