{"version":3,"sources":["componentController.es6"],"names":["ComponentController","$filter","$mdDialog","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","nodeId","componentContent","componentId","id","componentType","type","idToOrder","mode","authoringComponentContent","isShowPreviousWork","showAdvancedAuthoring","showJSONAuthoring","isDisabled","isDirty","parentStudentWorkIds","isSubmitDirty","isSubmit","saveMessage","text","time","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","isSnipButtonVisible","workgroupId","teacherWorkgroupId","showAddToNotebookButton","authoringConstructor","registerListeners","showSaveButton","showSubmitButton","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","$on","event","args","hideJSONValidMessage","updateAdvancedAuthoringView","annotation","latestAnnotations","getLatestComponentAnnotations","handleNodeSubmit","registerStudentWorkSavedToServerListener","angular","bind","componentState","studentWork","$emit","clientSaveTime","convertToClientTimestamp","serverSaveTime","setSaveMessage","lockIfNecessary","isAutoSave","prompt","submit","submitTriggeredBy","isLockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isWorkSubmitted","lockAfterSubmit","action","createComponentState","then","message","getNodeIds","getNodePositionAndTitleByNodeId","getComponentsByNodeId","isApplicationNode","deferred","resolve","connectedComponents","connectedComponent","getLatestComponentStateByNodeIdAndComponentId","push","makeCopyOfJSONObject","setStudentWork","createMergedComponentState","handleConnectedComponentsPostProcess","studentDataChanged","isSpaceExists","$broadcast","insertMode","requester","visibleSpace","studentWorkId","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","isNotebookEnabled","show","setShowSubmitButtonValue","authoringViewComponentChanged","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","index","answer","confirm","splice","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentTypes","a","length","allowedConnectedComponentType","tags","tag","indexOfTagToDelete","html","removeAbsoluteAssetPaths","insertWISELinks","$parent","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","toJson","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","summernoteId","$","summernote","fullAssetPath","fileName","videoElement","document","createElement","controls","innerHTML","$inject"],"mappings":"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","file":"componentController.js","sourcesContent":["class ComponentController {\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.nodeId = this.$scope.nodeId;\n    this.componentContent = this.$scope.componentContent;\n    this.componentId = this.componentContent.id;\n    this.componentType = this.componentContent.type;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.mode = this.$scope.mode;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.isShowPreviousWork = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n    this.isDisabled = false;\n    this.isDirty = false;\n    this.parentStudentWorkIds = null;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.isSubmitButtonDisabled = false;\n    this.submitCounter = 0;\n\n    this.isSnipButtonVisible = true;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    this.showAddToNotebookButton =\n      this.componentContent.showAddToNotebookButton == null ? true : this.componentContent.showAddToNotebookButton;\n\n    if (this.mode === 'grading' || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n      this.showAddToNotebookButton = false;\n    } else if (this.mode === 'authoring') {\n      if (this.authoringComponentContent.showAddToNotebookButton == null) {\n        this.authoringComponentContent.showAddToNotebookButton = true;\n      }\n      this.authoringConstructor();\n    }\n\n    this.registerListeners();\n  }\n\n  authoringConstructor() {\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    const insertAssetString = this.$translate('INSERT_ASSET');\n    const InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (this.componentId === args.componentId) {\n        this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        this.UtilService.hideJSONValidMessage();\n      }\n    });\n\n    this.updateAdvancedAuthoringView();\n  }\n\n  registerListeners() {\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n      const annotation = args.annotation;\n      if (this.nodeId === annotation.nodeId &&\n          this.componentId === annotation.componentId) {\n        this.latestAnnotations = this.AnnotationService\n            .getLatestComponentAnnotations(this.nodeId, this.componentId,\n                this.workgroupId);\n      }\n    });\n\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n      if (this.nodeId === args.nodeId) {\n        this.handleNodeSubmit();\n      }\n    });\n\n    this.registerStudentWorkSavedToServerListener();\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n      const componentState = args.studentWork;\n      if (componentState && this.nodeId === componentState.nodeId\n          && this.componentId === componentState.componentId) {\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: this.isDirty});\n        const clientSaveTime = this.ConfigService.convertToClientTimestamp(componentState.serverSaveTime);\n        if (componentState.isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n          this.lockIfNecessary();\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: this.isSubmitDirty});\n        } else if (componentState.isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n  }\n\n  handleNodeSubmit() {\n    this.isSubmit = true;\n  }\n\n  getPrompt() {\n    return this.componentContent.prompt;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node to save\n    this.$scope.$emit('componentSaveTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  submitButtonClicked() {\n    this.submit('componentSubmitButton');\n  }\n\n  submit(submitTriggeredBy) {\n\n  }\n\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  disableComponentIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      const componentStates = this.StudentDataService\n          .getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (this.NodeService.isWorkSubmitted(componentStates)) {\n        this.isDisabled = true;\n      }\n    }\n  }\n\n  lockIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  }\n\n  isLockAfterSubmit() {\n    return this.componentContent.lockAfterSubmit;\n  }\n\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.setSaveMessage('', null);\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns {array} an array of step node id strings\n   */\n  getStepNodeIds() {\n    return this.ProjectService.getNodeIds();\n  }\n\n  /**\n   * Get the step number and title for a node\n   * @param {string} get the step number and title for this node\n   * @returns {string} the step number and title example \"1.5: Read Information\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Get the components in a step\n   * @param {string} id of the step\n   * @returns {array} an array of component objects\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param {string} nodeId the node id to check\n   * @returns {boolean} whether the node is a step node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Import any work needed from connected components\n   */\n  handleConnectedComponents() {\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const componentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(connectedComponent.nodeId, connectedComponent.componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n      this.setStudentWork(this.createMergedComponentState(componentStates));\n      this.handleConnectedComponentsPostProcess();\n      this.studentDataChanged();\n    }\n  }\n\n  handleConnectedComponentsPostProcess() {\n    // overriden by children\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  isNotebookEnabled() {\n    return this.NotebookService.isNotebookEnabled();\n  }\n\n  isAddToNotebookEnabled() {\n    return this.isNotebookEnabled() && this.showAddToNotebookButton;\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  isEventTargetThisComponent(args) {\n    return this.nodeId == args.nodeId && this.componentId == args.componentId;\n  }\n\n  createSummernoteRubricId() {\n    return 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n  }\n\n  restoreSummernoteCursorPosition(summernoteId) {\n    $('#' + summernoteId).summernote('editor.restoreRange');\n    $('#' + summernoteId).summernote('editor.focus');\n  }\n\n  insertImageIntoSummernote(fullAssetPath, fileName) {\n    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n  }\n\n  insertVideoIntoSummernote(fullAssetPath) {\n    const videoElement = document.createElement('video');\n    videoElement.controls = 'true';\n    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n    $('#' + summernoteId).summernote('insertNode', videoElement);\n  }\n}\n\nComponentController.$inject = [];\n\nexport default ComponentController;\n"]}