{"version":3,"sources":["componentController.es6"],"names":["ComponentController","$filter","$mdDialog","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","nodeId","componentContent","componentId","id","componentType","type","idToOrder","mode","authoringComponentContent","isShowPreviousWork","showAdvancedAuthoring","showJSONAuthoring","isDisabled","isDirty","parentStudentWorkIds","isSubmitDirty","isSubmit","saveMessage","text","time","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","isSnipButtonVisible","workgroupId","teacherWorkgroupId","showAddToNotebookButton","isGradingMode","isAuthoringMode","authoringConstructor","registerListeners","showSaveButton","showSubmitButton","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","$on","event","args","hideJSONValidMessage","updateAdvancedAuthoringView","annotation","latestAnnotations","getLatestComponentAnnotations","handleNodeSubmit","cleanupBeforeExiting","registerStudentWorkSavedToServerListener","$broadcast","angular","bind","componentState","studentWork","$emit","clientSaveTime","convertToClientTimestamp","serverSaveTime","setSubmittedMessage","lockIfNecessary","isAutoSave","setAutoSavedMessage","setSavedMessage","prompt","submit","submitTriggeredBy","isLockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isWorkSubmitted","lockAfterSubmit","clearSaveText","action","createComponentState","then","setSaveText","message","getNodeIds","getNodePositionAndTitleByNodeId","getComponentsByNodeId","isApplicationNode","deferred","resolve","connectedComponents","connectedComponent","getLatestComponentStateByNodeIdAndComponentId","push","makeCopyOfJSONObject","length","setStudentWork","createMergedComponentState","handleConnectedComponentsPostProcess","studentDataChanged","isSpaceExists","insertMode","requester","visibleSpace","studentWorkId","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","isNotebookEnabled","show","setShowSubmitButtonValue","authoringViewComponentChanged","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","index","answer","confirm","splice","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentTypes","a","allowedConnectedComponentType","tags","tag","indexOfTagToDelete","html","removeAbsoluteAssetPaths","insertWISELinks","$parent","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","toJson","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","summernoteId","$","summernote","fullAssetPath","fileName","videoElement","document","createElement","controls","innerHTML","getMaxSubmitCount","maxSubmitCount","getNumberOfSubmitsLeft","setIsSubmit","$inject"],"mappings":"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","file":"componentController.js","sourcesContent":["class ComponentController {\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.nodeId = this.$scope.nodeId;\n    this.componentContent = this.$scope.componentContent;\n    this.componentId = this.componentContent.id;\n    this.componentType = this.componentContent.type;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.mode = this.$scope.mode;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.isShowPreviousWork = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n    this.isDisabled = false;\n    this.isDirty = false;\n    this.parentStudentWorkIds = null;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.isSubmitButtonDisabled = false;\n    this.submitCounter = 0;\n\n    this.isSnipButtonVisible = true;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    this.showAddToNotebookButton =\n      this.componentContent.showAddToNotebookButton == null ? true : this.componentContent.showAddToNotebookButton;\n\n    if (this.isGradingMode() || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n      this.showAddToNotebookButton = false;\n    } else if (this.isAuthoringMode()) {\n      if (this.authoringComponentContent.showAddToNotebookButton == null) {\n        this.authoringComponentContent.showAddToNotebookButton = true;\n      }\n      this.authoringConstructor();\n    }\n\n    this.registerListeners();\n  }\n\n  isStudentMode() {\n    return this.mode === 'student';\n  }\n\n  isAuthoringMode() {\n    return this.mode === 'authoring';\n  }\n\n  isGradingMode() {\n    return this.mode === 'grading';\n  }\n\n  authoringConstructor() {\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    const insertAssetString = this.$translate('INSERT_ASSET');\n    const InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (this.componentId === args.componentId) {\n        this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        this.UtilService.hideJSONValidMessage();\n      }\n    });\n\n    this.updateAdvancedAuthoringView();\n  }\n\n  registerListeners() {\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n      const annotation = args.annotation;\n      if (this.nodeId === annotation.nodeId &&\n          this.componentId === annotation.componentId) {\n        this.latestAnnotations = this.AnnotationService\n            .getLatestComponentAnnotations(this.nodeId, this.componentId,\n                this.workgroupId);\n      }\n    });\n\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n      if (this.nodeId === args.nodeId) {\n        this.handleNodeSubmit();\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      this.cleanupBeforeExiting();\n    });\n\n    this.registerStudentWorkSavedToServerListener();\n  }\n\n  cleanupBeforeExiting() {\n\n  }\n\n  broadcastDoneRenderingComponent() {\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n      const componentState = args.studentWork;\n      if (componentState && this.nodeId === componentState.nodeId\n          && this.componentId === componentState.componentId) {\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: this.isDirty});\n        const clientSaveTime = this.ConfigService.convertToClientTimestamp(componentState.serverSaveTime);\n        if (componentState.isSubmit) {\n          this.setSubmittedMessage(clientSaveTime);\n          this.lockIfNecessary();\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: this.isSubmitDirty});\n        } else if (componentState.isAutoSave) {\n          this.setAutoSavedMessage(clientSaveTime);\n        } else {\n          this.setSavedMessage(clientSaveTime);\n        }\n      }\n    }));\n  }\n\n  handleNodeSubmit() {\n    this.isSubmit = true;\n  }\n\n  getPrompt() {\n    return this.componentContent.prompt;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node to save\n    this.$scope.$emit('componentSaveTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  submitButtonClicked() {\n    this.submit('componentSubmitButton');\n  }\n\n  submit(submitTriggeredBy) {\n\n  }\n\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  disableComponentIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      const componentStates = this.StudentDataService\n          .getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (this.NodeService.isWorkSubmitted(componentStates)) {\n        this.isDisabled = true;\n      }\n    }\n  }\n\n  lockIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  }\n\n  isLockAfterSubmit() {\n    return this.componentContent.lockAfterSubmit;\n  }\n\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.clearSaveText();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  setSavedMessage(time) {\n    this.setSaveText(this.$translate('SAVED'), time);\n  }\n\n  setAutoSavedMessage(time) {\n    this.setSaveText(this.$translate('AUTO_SAVED'), time);\n  }\n\n  setSubmittedMessage(time) {\n    this.setSaveText(this.$translate('SUBMITTED'), time);\n  }\n\n  setSaveText(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  }\n\n  clearSaveText() {\n    this.setSaveText('', null);\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns {array} an array of step node id strings\n   */\n  getStepNodeIds() {\n    return this.ProjectService.getNodeIds();\n  }\n\n  /**\n   * Get the step number and title for a node\n   * @param {string} get the step number and title for this node\n   * @returns {string} the step number and title example \"1.5: Read Information\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Get the components in a step\n   * @param {string} id of the step\n   * @returns {array} an array of component objects\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param {string} nodeId the node id to check\n   * @returns {boolean} whether the node is a step node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Import any work needed from connected components\n   */\n  handleConnectedComponents() {\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const componentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(connectedComponent.nodeId, connectedComponent.componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n      if (componentStates.length > 0) {\n        this.setStudentWork(this.createMergedComponentState(componentStates));\n        this.handleConnectedComponentsPostProcess();\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createMergedComponentState(componentStates) {\n    return componentStates[0];\n  }\n\n  handleConnectedComponentsPostProcess() {\n    // overridden by children\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  isNotebookEnabled() {\n    return this.NotebookService.isNotebookEnabled();\n  }\n\n  isAddToNotebookEnabled() {\n    return this.isNotebookEnabled() && this.showAddToNotebookButton;\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  isEventTargetThisComponent(args) {\n    return this.nodeId == args.nodeId && this.componentId == args.componentId;\n  }\n\n  createSummernoteRubricId() {\n    return 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n  }\n\n  restoreSummernoteCursorPosition(summernoteId) {\n    $('#' + summernoteId).summernote('editor.restoreRange');\n    $('#' + summernoteId).summernote('editor.focus');\n  }\n\n  insertImageIntoSummernote(fullAssetPath, fileName) {\n    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n  }\n\n  insertVideoIntoSummernote(fullAssetPath) {\n    const videoElement = document.createElement('video');\n    videoElement.controls = 'true';\n    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n    $('#' + summernoteId).summernote('insertNode', videoElement);\n  }\n\n  hasMaxSubmitCount() {\n    return this.getMaxSubmitCount() != null;\n  }\n\n  getMaxSubmitCount() {\n    return this.componentContent.maxSubmitCount;\n  }\n\n  getNumberOfSubmitsLeft() {\n    return this.getMaxSubmitCount() - this.submitCounter;\n  }\n\n  hasSubmitsLeft() {\n    return this.getNumberOfSubmitsLeft() > 0;\n  }\n\n  setIsSubmitTrue() {\n    this.setIsSubmit(true);\n  }\n\n  setIsSubmitFalse() {\n    this.setIsSubmit(false);\n  }\n\n  setIsSubmit(isSubmit) {\n    this.isSubmit = isSubmit;\n  }\n\n  getIsSubmit() {\n    return this.isSubmit;\n  }\n\n  setIsDirty(isDirty) {\n    this.isDirty = isDirty;\n  }\n}\n\nComponentController.$inject = [];\n\nexport default ComponentController;\n"]}