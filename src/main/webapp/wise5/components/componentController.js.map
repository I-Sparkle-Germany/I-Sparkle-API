{"version":3,"sources":["componentController.es6"],"names":["ComponentController","$filter","$mdDialog","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","nodeId","componentContent","componentId","id","componentType","type","idToOrder","mode","authoringComponentContent","isShowPreviousWork","showAdvancedAuthoring","showJSONAuthoring","isDisabled","isDirty","parentStudentWorkIds","isSubmitDirty","isSubmit","saveMessage","text","time","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","isSnipButtonVisible","workgroupId","teacherWorkgroupId","prompt","$emit","submit","submitTriggeredBy","isLockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isWorkSubmitted","lockAfterSubmit","setSaveMessage","action","createComponentState","then","componentState","message","getNodeIds","getNodePositionAndTitleByNodeId","getComponentsByNodeId","isApplicationNode","deferred","resolve","connectedComponents","connectedComponent","getLatestComponentStateByNodeIdAndComponentId","push","makeCopyOfJSONObject","setStudentWork","createMergedComponentState","handleConnectedComponentsPostProcess","studentDataChanged","isSpaceExists","event","$broadcast","insertMode","requester","visibleSpace","studentWorkId","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","$inject"],"mappings":"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","file":"componentController.js","sourcesContent":["class ComponentController {\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.nodeId = this.$scope.nodeId;\n    this.componentContent = this.$scope.componentContent;\n    this.componentId = this.componentContent.id;\n    this.componentType = this.componentContent.type;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.mode = this.$scope.mode;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.isShowPreviousWork = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n    this.isDisabled = false;\n    this.isDirty = false;\n    this.parentStudentWorkIds = null;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.isSubmitButtonDisabled = false;\n    this.submitCounter = 0;\n\n    this.isSnipButtonVisible = true;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n  }\n\n  getPrompt() {\n    return this.componentContent.prompt;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node to save\n    this.$scope.$emit('componentSaveTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  submitButtonClicked() {\n    this.submit('componentSubmitButton');\n  }\n\n  submit(submitTriggeredBy) {\n\n  }\n\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  disableComponentIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      const componentStates = this.StudentDataService\n          .getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (this.NodeService.isWorkSubmitted(componentStates)) {\n        this.isDisabled = true;\n      }\n    }\n  }\n\n  lockIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  }\n\n  isLockAfterSubmit() {\n    return this.componentContent.lockAfterSubmit;\n  }\n\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.setSaveMessage('', null);\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns {array} an array of step node id strings\n   */\n  getStepNodeIds() {\n    return this.ProjectService.getNodeIds();\n  }\n\n  /**\n   * Get the step number and title for a node\n   * @param {string} get the step number and title for this node\n   * @returns {string} the step number and title example \"1.5: Read Information\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Get the components in a step\n   * @param {string} id of the step\n   * @returns {array} an array of component objects\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param {string} nodeId the node id to check\n   * @returns {boolean} whether the node is a step node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Import any work needed from connected components\n   */\n  handleConnectedComponents() {\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const componentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(connectedComponent.nodeId, connectedComponent.componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n      this.setStudentWork(this.createMergedComponentState(componentStates));\n      this.handleConnectedComponentsPostProcess();\n      this.studentDataChanged();\n    }\n  }\n\n  handleConnectedComponentsPostProcess() {\n    // overriden by children\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n}\n\nComponentController.$inject = [];\n\nexport default ComponentController;\n"]}