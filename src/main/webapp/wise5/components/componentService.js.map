{"version":3,"sources":["componentService.es6"],"names":["ComponentService","$filter","StudentDataService","UtilService","$translate","id","generateKey","type","prompt","showSaveButton","showSubmitButton","componentStateFromOtherComponent","studentDataCopy","makeCopyOfJSONObject","studentData","componentState","createComponentState","component","componentStates","componentEvents","nodeEvents","node","componentContent","annotation","$inject"],"mappings":";;;;;;;;;;IAAMA,gB;AACJ,4BAAYC,OAAZ,EACYC,kBADZ,EAEYC,WAFZ,EAEyB;AAAA;;AACvB,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKH,OAAL,CAAa,WAAb,CAAlB;AACD;;AAED;;;;;;;;4CAIwB;AACtB,aAAO,EAAP;AACD;;AAED;;;;;;;sCAIkB;AAChB,aAAO;AACLI,YAAI,KAAKF,WAAL,CAAiBG,WAAjB,EADC;AAELC,cAAM,EAFD;AAGLC,gBAAQ,EAHH;AAILC,wBAAgB,KAJX;AAKLC,0BAAkB;AALb,OAAP;AAOD;;AAED;;;;;;;;;2CAMuBC,gC,EAAkC;AACvD,UAAMC,kBAAkB,KAAKT,WAAL,CAAiBU,oBAAjB,CAAsCF,iCAAiCG,WAAvE,CAAxB;AACA,UAAMC,iBAAiB,KAAKb,kBAAL,CAAwBc,oBAAxB,EAAvB;AACAD,qBAAeD,WAAf,GAA6BF,eAA7B;AACA,aAAOG,cAAP;AACD;;;;;AAED;;;;;;;;;gCASYE,S,EAAWC,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACzE,aAAO,IAAP;AACD;;AAED;;;;;;;;;sCAMkBC,gB,EAAkBC,U,EAAY;AAC9C,aAAO,IAAP;AACD;;AAED;;;;;;;;;;qCAOiBN,S,EAAW;AAC1B,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;;iDAS6BF,c,EAAgBO,gB,EAAkB;AAC7D,aAAO,KAAP;AACD;;AAED;;;;;;;;yCAKqBP,c,EAAgB;AACnC,aAAO,EAAP;AACD;;AAED;;;;;;;8CAI0B;AACxB,aAAO,IAAP;AACD;;AAED;;;;;;;gDAI4B;AAC1B,aAAO,IAAP;AACD;;;;;;AAGHf,iBAAiBwB,OAAjB,GAA2B,EAA3B;;kBAEexB,gB","file":"componentService.js","sourcesContent":["class ComponentService {\n  constructor($filter,\n              StudentDataService,\n              UtilService) {\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label. For example \"Open Response\".\n   * @returns {string}\n   */\n  getComponentTypeLabel() {\n    return '';\n  }\n\n  /**\n   * Create a component object\n   * @returns {object} a component object\n   */\n  createComponent() {\n    return {\n      id: this.UtilService.generateKey(),\n      type: '',\n      prompt: '',\n      showSaveButton: false,\n      showSubmitButton: false\n    }\n  }\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param {object} componentStateFromOtherComponent the component state to obtain the data from\n   * @return {object} a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    const studentDataCopy = this.UtilService.makeCopyOfJSONObject(componentStateFromOtherComponent.studentData);\n    const componentState = this.StudentDataService.createComponentState();\n    componentState.studentData = studentDataCopy;\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns {boolean} whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    return true;\n  }\n\n  /**\n   * Check if we need to display the annotation to the student\n   * @param componentContent the component content\n   * @param annotation the annotation\n   * @returns {boolean} whether we need to display the annotation to the student\n   */\n  displayAnnotation(componentContent, annotation) {\n    return true;\n  }\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return {boolean} whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return {boolean} whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    return false;\n  }\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return {string} a human readable student data string\n   */\n  getStudentDataString(componentState) {\n    return '';\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return {boolean} whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return {boolean} whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n}\n\nComponentService.$inject = [];\n\nexport default ComponentService;\n"]}