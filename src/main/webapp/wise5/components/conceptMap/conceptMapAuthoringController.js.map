{"version":3,"sources":["conceptMapAuthoringController.es6"],"names":["ConceptMapAuthoringController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","shouldOptions","value","label","$translate","availableNodes","componentContent","nodes","availableLinks","links","showNodeLabels","authoringComponentContent","$watch","bind","newValue","oldValue","injectAssetPaths","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","width","height","setBackgroundImage","background","stretchBackground","document","getElementById","svgId","setupSVG","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","indexOf","node","authoringViewGetNodeById","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","hide","index","splice","length","nodeFileName","nodeLabel","answer","confirm","link","linkLabel","id","authoringGetNewConceptMapNodeId","newNode","push","n","authoringGetNewConceptMapLinkId","newLink","color","nextAvailableNodeIdNumber","usedNumbers","x","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","setShowSubmitButtonValue","ruleName","categoryName","conceptMapData","getConceptMapData","starterConceptMap","clearConceptMap","params","isPopup","$broadcast","conceptMapNodeId","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","componentType","authoringGetConnectedComponentType","importWorkAsBackground","submitTriggeredBy","isDirty","isSubmitDirty","createComponentState","$inject"],"mappings":"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","file":"conceptMapAuthoringController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ConceptMapController from './conceptMapController';\n\nclass ConceptMapAuthoringController extends ConceptMapController {\n  constructor($anchorScroll,\n              $filter,\n              $location,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConceptMapService,\n              ConfigService,\n              CRaterService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.shouldOptions = [\n      {\n        value: false, label: this.$translate('conceptMap.should')\n      },\n      {\n        value: true, label: this.$translate('conceptMap.shouldNot')\n      }\n    ];\n\n    this.availableNodes = this.componentContent.nodes;\n    this.availableLinks = this.componentContent.links;\n\n    if (this.componentContent.showNodeLabels == null) {\n      this.componentContent.showNodeLabels = true;\n      this.authoringComponentContent.showNodeLabels = true;\n    }\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.availableNodes = this.componentContent.nodes;\n      this.availableLinks = this.componentContent.links;\n      this.width = this.componentContent.width;\n      this.height = this.componentContent.height;\n      this.setBackgroundImage(this.componentContent.background,\n        this.componentContent.stretchBackground);\n\n      /*\n       * make sure the SVG element can be accessed. we need to\n       * perform this check because this watch is getting fired\n       * before angular sets the svgId on the svg element. if\n       * setupSVG() is called before the svgId is set on the svg\n       * element, we will get an error.\n       */\n      if (document.getElementById(this.svgId) != null) {\n        this.setupSVG();\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.background = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              } else if (args.target != null && args.target.indexOf('node') == 0) {\n                // the target is a node image\n\n                // get the concept map node\n                var node = this.authoringViewGetNodeById(args.target);\n\n                if (node != null) {\n                  // set the file name of the node\n                  node.fileName = fileName;\n                }\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * A node up button was clicked in the authoring tool so we will move the\n   * node up\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeUpButtonClicked(index) {\n\n    // check if the node is at the top\n    if (index != 0) {\n      // the node is not at the top so we can move it up\n\n      // get the nodes\n      var nodes = this.authoringComponentContent.nodes;\n\n      if (nodes != null) {\n\n        // get the node at the given index\n        var node = nodes[index];\n\n        // remove the node\n        nodes.splice(index, 1);\n\n        // insert the node back in one index back\n        nodes.splice(index - 1, 0, node);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * A node down button was clicked in the authoring tool so we will move the\n   * node down\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeDownButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // check if the node is at the bottom\n    if (nodes != null && index != nodes.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      // get the node at the given index\n      var node = nodes[index];\n\n      // remove the node\n      nodes.splice(index, 1);\n\n      // insert the node back in one index ahead\n      nodes.splice(index + 1, 0, node);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A node delete button was clicked in the authoring tool so we will remove\n   * the node\n   * @param index the index of the node that we will delete\n   */\n  authoringViewNodeDeleteButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    if (nodes != null) {\n\n      // get the node\n      var node = nodes[index];\n\n      if (node != null) {\n\n        // get the file name and label\n        var nodeFileName = node.fileName;\n        var nodeLabel = node.label;\n\n        // confirm with the author that they really want to delete the node\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode', { nodeFileName: nodeFileName, nodeLabel: nodeLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the node so we\n           * will remove it from the array\n           */\n          nodes.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link up button was clicked in the authoring tool so we will move the\n   * link up\n   * @param index the index of the link\n   */\n  authoringViewLinkUpButtonClicked(index) {\n\n    // check if the link is at the top\n    if (index != 0) {\n\n      // get the links\n      var links = this.authoringComponentContent.links;\n\n      if (links != null) {\n\n        // get a link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index back\n          links.splice(index - 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link down button was clicked in the authoring tool so we will move the\n   * link down\n   * @param index the index of the link\n   */\n  authoringViewLinkDownButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // check if the link is at the bottom\n    if (links != null && index != links.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      if (links != null) {\n\n        // get the link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index ahead\n          links.splice(index + 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link delete button was clicked in the authoring tool so we remove the\n   * link\n   * @param index the index of the link\n   */\n  authoringViewLinkDeleteButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    if (links != null) {\n\n      // get a link\n      var link = links[index];\n\n      if (link != null) {\n\n        // get the link label\n        var linkLabel = link.label;\n\n        // confirm with the author that they really want to delete the link\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the link so we\n           * will remove it from the array\n           */\n          links.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a node in the authoring tool\n   */\n  authoringViewAddNode() {\n\n    // get a new node id\n    var id = this.authoringGetNewConceptMapNodeId();\n\n    // create the new node\n    var newNode = {};\n    newNode.id = id;\n    newNode.label = '';\n    newNode.fileName = '';\n    newNode.width = 100;\n    newNode.height = 100;\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // add the new node\n    nodes.push(newNode);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the concept map node with the given id\n   * @param nodeId the concept map node id\n   * @return the concept map node with the given node id\n   */\n  authoringViewGetNodeById(nodeId) {\n\n    if (nodeId != null &&\n      this.authoringComponentContent != null &&\n      this.authoringComponentContent.nodes != null) {\n\n      // loop through all the concept map nodes\n      for (var n = 0; n < this.authoringComponentContent.nodes.length; n++) {\n        var node = this.authoringComponentContent.nodes[n];\n\n        if (node != null) {\n          if (nodeId === node.id) {\n            // we have found the concept map node that we want\n            return node;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Add a link in the authoring tool\n   */\n  authoringViewAddLink() {\n\n    // get a new link id\n    var id = this.authoringGetNewConceptMapLinkId();\n\n    // create a new link\n    var newLink = {};\n    newLink.id = id;\n    newLink.label = '';\n    newLink.color = '';\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // add the new link\n    links.push(newLink);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'node3'\n   */\n  authoringGetNewConceptMapNodeId() {\n\n    var nextAvailableNodeIdNumber = 1;\n\n    // array to remember the numbers that have been used in node ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n      var node = this.authoringComponentContent.nodes[x];\n\n      if (node != null) {\n\n        // get the node id\n        var nodeId = node.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'node' + nextAvailableNodeIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'link3'\n   */\n  authoringGetNewConceptMapLinkId() {\n\n    var nextAvailableLinkIdNumber = 1;\n\n    // array to remember the numbers that have been used in link ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n      var link = this.authoringComponentContent.links[x];\n\n      if (link != null) {\n\n        // get the node id\n        var nodeId = link.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'link' + nextAvailableLinkIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * A \"with link\" checkbox was checked\n   * @param ruleIndex the index of the rule\n   */\n  authoringRuleLinkCheckboxClicked(ruleIndex) {\n\n    // get the rule that was checked\n    var rule = this.authoringComponentContent.rules[ruleIndex];\n\n    if (rule != null) {\n      if (rule.type == 'node') {\n        /*\n         * the rule has been set to 'node' instead of 'link' so we\n         * will remove the link label and other node label\n         */\n\n        delete rule.linkLabel;\n        delete rule.otherNodeLabel;\n      }\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a new rule\n   */\n  authoringAddRule() {\n\n    // create the new rule\n    var newRule = {};\n    newRule.name = '';\n    newRule.type = 'node';\n    newRule.categories = [];\n    newRule.nodeLabel = '';\n    newRule.comparison = 'exactly';\n    newRule.number = 1;\n    newRule.not = false;\n\n    // add the rule to the array of rules\n    this.authoringComponentContent.rules.push(newRule);\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a rule up\n   * @param index the index of the rule\n   */\n  authoringViewRuleUpButtonClicked(index) {\n\n    // check if the rule is at the top\n    if (index != 0) {\n      // the rule is not at the top so we can move it up\n\n      // get the rules\n      var rules = this.authoringComponentContent.rules;\n\n      if (rules != null) {\n\n        // get the rule at the given index\n        var rule = rules[index];\n\n        // remove the rule\n        rules.splice(index, 1);\n\n        // insert the rule back in one index back\n        rules.splice(index - 1, 0, rule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a rule down\n   * @param index the index of the rule\n   */\n  authoringViewRuleDownButtonClicked(index) {\n\n    // get the rules\n    var rules = this.authoringComponentContent.rules;\n\n    // check if the rule is at the bottom\n    if (rules != null && index != rules.length - 1) {\n      // the rule is not at the bottom so we can move it down\n\n      // get the rule at the given index\n      var rule = rules[index];\n\n      // remove the rule\n      rules.splice(index, 1);\n\n      // insert the rule back in one index ahead\n      rules.splice(index + 1, 0, rule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /*\n   * Delete a rule\n   * @param index the index of the rule to delete\n   */\n  authoringViewRuleDeleteButtonClicked(index) {\n\n    // get the rule\n    var rule = this.authoringComponentContent.rules[index];\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // confirm with the author that they really want to delete the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }));\n\n      if (answer) {\n        // remove the rule at the given index\n        this.authoringComponentContent.rules.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n  }\n\n  /**\n   * Add a category to a rule\n   * @param rule the rule\n   */\n  authoringViewAddCategoryClicked(rule) {\n\n    if (rule != null) {\n      // add an empty category name\n      rule.categories.push('');\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a category from a rule\n   * @param rule delete a category from this rule\n   * @param index the index of the category\n   */\n  authoringViewDeleteCategoryClicked(rule, index) {\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // get the category name\n      var categoryName = rule.categories[index];\n\n      // confirm with the author that they really want to delete the category from the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory' , { ruleName: ruleName, categoryName: categoryName }));\n\n      if (answer) {\n        // remove the category at the index\n        rule.categories.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Save the starter concept map\n   */\n  saveStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToSaveTheStarterConceptMap'));\n\n    if (answer) {\n      // get the concept map data\n      var conceptMapData = this.getConceptMapData();\n\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = conceptMapData;\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete the starter concept map\n   */\n  deleteStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheStarterConceptMap'));\n\n    if (answer) {\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = null;\n\n      // clear the concept map\n      this.clearConceptMap();\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the node\n   * @param conceptMapNodeId the id of the node in the concept map\n   */\n  chooseNodeImage(conceptMapNodeId) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = conceptMapNodeId;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'Draw' ||\n      componentType == 'Embedded' ||\n      componentType == 'Graph' ||\n      componentType == 'Label' ||\n      componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  submit(submitTriggeredBy) {\n    super.submit(submitTriggeredBy);\n\n    /*\n     * set values appropriately here because the 'componentSubmitTriggered'\n     * event won't work in authoring mode\n     */\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.createComponentState('submit');\n  }\n}\n\nConceptMapAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapAuthoringController;\n"]}