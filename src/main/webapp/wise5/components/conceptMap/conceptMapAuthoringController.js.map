{"version":3,"sources":["conceptMapAuthoringController.es6"],"names":["ConceptMapAuthoringController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","shouldOptions","value","label","$translate","connectedComponentUpdateOnOptions","text","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","availableNodes","nodes","availableLinks","links","showNodeLabels","authoringComponentContent","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","width","setBackgroundImage","background","stretchBackground","document","getElementById","svgId","setupSVG","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","indexOf","node","authoringViewGetNodeById","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","index","splice","length","nodeFileName","nodeLabel","answer","confirm","link","linkLabel","id","authoringGetNewConceptMapNodeId","newNode","push","n","authoringGetNewConceptMapLinkId","newLink","color","nextAvailableNodeIdNumber","usedNumbers","x","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","setShowSubmitButtonValue","ruleName","categoryName","toJson","conceptMapData","getConceptMapData","starterConceptMap","clearConceptMap","maxSubmitCount","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","conceptMapNodeId","newConnectedComponent","updateOn","connectedComponents","show","$emit","tags","tag","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","importWorkAsBackground","componentType","authoringGetConnectedComponentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","submitTriggeredBy","isDirty","isSubmitDirty","createComponentState","$inject"],"mappings":"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","file":"conceptMapAuthoringController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ConceptMapController from './conceptMapController';\n\nclass ConceptMapAuthoringController extends ConceptMapController {\n  constructor($anchorScroll,\n              $filter,\n              $location,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConceptMapService,\n              ConfigService,\n              CRaterService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.shouldOptions = [\n      {\n        value: false, label: this.$translate('conceptMap.should')\n      },\n      {\n        value: true, label: this.$translate('conceptMap.shouldNot')\n      }\n    ];\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    this.availableNodes = this.componentContent.nodes;\n    this.availableLinks = this.componentContent.links;\n\n    if (this.componentContent.showNodeLabels == null) {\n      this.componentContent.showNodeLabels = true;\n      this.authoringComponentContent.showNodeLabels = true;\n    }\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.availableNodes = this.componentContent.nodes;\n      this.availableLinks = this.componentContent.links;\n      this.width = this.componentContent.width;\n      this.height = this.componentContent.height;\n      this.setBackgroundImage(this.componentContent.background,\n        this.componentContent.stretchBackground);\n\n      /*\n       * make sure the SVG element can be accessed. we need to\n       * perform this check because this watch is getting fired\n       * before angular sets the svgId on the svg element. if\n       * setupSVG() is called before the svgId is set on the svg\n       * element, we will get an error.\n       */\n      if (document.getElementById(this.svgId) != null) {\n        this.setupSVG();\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.background = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              } else if (args.target != null && args.target.indexOf('node') == 0) {\n                // the target is a node image\n\n                // get the concept map node\n                var node = this.authoringViewGetNodeById(args.target);\n\n                if (node != null) {\n                  // set the file name of the node\n                  node.fileName = fileName;\n                }\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * A node up button was clicked in the authoring tool so we will move the\n   * node up\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeUpButtonClicked(index) {\n\n    // check if the node is at the top\n    if (index != 0) {\n      // the node is not at the top so we can move it up\n\n      // get the nodes\n      var nodes = this.authoringComponentContent.nodes;\n\n      if (nodes != null) {\n\n        // get the node at the given index\n        var node = nodes[index];\n\n        // remove the node\n        nodes.splice(index, 1);\n\n        // insert the node back in one index back\n        nodes.splice(index - 1, 0, node);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * A node down button was clicked in the authoring tool so we will move the\n   * node down\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeDownButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // check if the node is at the bottom\n    if (nodes != null && index != nodes.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      // get the node at the given index\n      var node = nodes[index];\n\n      // remove the node\n      nodes.splice(index, 1);\n\n      // insert the node back in one index ahead\n      nodes.splice(index + 1, 0, node);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A node delete button was clicked in the authoring tool so we will remove\n   * the node\n   * @param index the index of the node that we will delete\n   */\n  authoringViewNodeDeleteButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    if (nodes != null) {\n\n      // get the node\n      var node = nodes[index];\n\n      if (node != null) {\n\n        // get the file name and label\n        var nodeFileName = node.fileName;\n        var nodeLabel = node.label;\n\n        // confirm with the author that they really want to delete the node\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode', { nodeFileName: nodeFileName, nodeLabel: nodeLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the node so we\n           * will remove it from the array\n           */\n          nodes.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link up button was clicked in the authoring tool so we will move the\n   * link up\n   * @param index the index of the link\n   */\n  authoringViewLinkUpButtonClicked(index) {\n\n    // check if the link is at the top\n    if (index != 0) {\n\n      // get the links\n      var links = this.authoringComponentContent.links;\n\n      if (links != null) {\n\n        // get a link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index back\n          links.splice(index - 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link down button was clicked in the authoring tool so we will move the\n   * link down\n   * @param index the index of the link\n   */\n  authoringViewLinkDownButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // check if the link is at the bottom\n    if (links != null && index != links.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      if (links != null) {\n\n        // get the link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index ahead\n          links.splice(index + 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link delete button was clicked in the authoring tool so we remove the\n   * link\n   * @param index the index of the link\n   */\n  authoringViewLinkDeleteButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    if (links != null) {\n\n      // get a link\n      var link = links[index];\n\n      if (link != null) {\n\n        // get the link label\n        var linkLabel = link.label;\n\n        // confirm with the author that they really want to delete the link\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the link so we\n           * will remove it from the array\n           */\n          links.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a node in the authoring tool\n   */\n  authoringViewAddNode() {\n\n    // get a new node id\n    var id = this.authoringGetNewConceptMapNodeId();\n\n    // create the new node\n    var newNode = {};\n    newNode.id = id;\n    newNode.label = '';\n    newNode.fileName = '';\n    newNode.width = 100;\n    newNode.height = 100;\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // add the new node\n    nodes.push(newNode);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the concept map node with the given id\n   * @param nodeId the concept map node id\n   * @return the concept map node with the given node id\n   */\n  authoringViewGetNodeById(nodeId) {\n\n    if (nodeId != null &&\n      this.authoringComponentContent != null &&\n      this.authoringComponentContent.nodes != null) {\n\n      // loop through all the concept map nodes\n      for (var n = 0; n < this.authoringComponentContent.nodes.length; n++) {\n        var node = this.authoringComponentContent.nodes[n];\n\n        if (node != null) {\n          if (nodeId === node.id) {\n            // we have found the concept map node that we want\n            return node;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Add a link in the authoring tool\n   */\n  authoringViewAddLink() {\n\n    // get a new link id\n    var id = this.authoringGetNewConceptMapLinkId();\n\n    // create a new link\n    var newLink = {};\n    newLink.id = id;\n    newLink.label = '';\n    newLink.color = '';\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // add the new link\n    links.push(newLink);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'node3'\n   */\n  authoringGetNewConceptMapNodeId() {\n\n    var nextAvailableNodeIdNumber = 1;\n\n    // array to remember the numbers that have been used in node ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n      var node = this.authoringComponentContent.nodes[x];\n\n      if (node != null) {\n\n        // get the node id\n        var nodeId = node.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'node' + nextAvailableNodeIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'link3'\n   */\n  authoringGetNewConceptMapLinkId() {\n\n    var nextAvailableLinkIdNumber = 1;\n\n    // array to remember the numbers that have been used in link ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n      var link = this.authoringComponentContent.links[x];\n\n      if (link != null) {\n\n        // get the node id\n        var nodeId = link.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'link' + nextAvailableLinkIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * A \"with link\" checkbox was checked\n   * @param ruleIndex the index of the rule\n   */\n  authoringRuleLinkCheckboxClicked(ruleIndex) {\n\n    // get the rule that was checked\n    var rule = this.authoringComponentContent.rules[ruleIndex];\n\n    if (rule != null) {\n      if (rule.type == 'node') {\n        /*\n         * the rule has been set to 'node' instead of 'link' so we\n         * will remove the link label and other node label\n         */\n\n        delete rule.linkLabel;\n        delete rule.otherNodeLabel;\n      }\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a new rule\n   */\n  authoringAddRule() {\n\n    // create the new rule\n    var newRule = {};\n    newRule.name = '';\n    newRule.type = 'node';\n    newRule.categories = [];\n    newRule.nodeLabel = '';\n    newRule.comparison = 'exactly';\n    newRule.number = 1;\n    newRule.not = false;\n\n    // add the rule to the array of rules\n    this.authoringComponentContent.rules.push(newRule);\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a rule up\n   * @param index the index of the rule\n   */\n  authoringViewRuleUpButtonClicked(index) {\n\n    // check if the rule is at the top\n    if (index != 0) {\n      // the rule is not at the top so we can move it up\n\n      // get the rules\n      var rules = this.authoringComponentContent.rules;\n\n      if (rules != null) {\n\n        // get the rule at the given index\n        var rule = rules[index];\n\n        // remove the rule\n        rules.splice(index, 1);\n\n        // insert the rule back in one index back\n        rules.splice(index - 1, 0, rule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a rule down\n   * @param index the index of the rule\n   */\n  authoringViewRuleDownButtonClicked(index) {\n\n    // get the rules\n    var rules = this.authoringComponentContent.rules;\n\n    // check if the rule is at the bottom\n    if (rules != null && index != rules.length - 1) {\n      // the rule is not at the bottom so we can move it down\n\n      // get the rule at the given index\n      var rule = rules[index];\n\n      // remove the rule\n      rules.splice(index, 1);\n\n      // insert the rule back in one index ahead\n      rules.splice(index + 1, 0, rule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /*\n   * Delete a rule\n   * @param index the index of the rule to delete\n   */\n  authoringViewRuleDeleteButtonClicked(index) {\n\n    // get the rule\n    var rule = this.authoringComponentContent.rules[index];\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // confirm with the author that they really want to delete the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }));\n\n      if (answer) {\n        // remove the rule at the given index\n        this.authoringComponentContent.rules.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n  }\n\n  /**\n   * Add a category to a rule\n   * @param rule the rule\n   */\n  authoringViewAddCategoryClicked(rule) {\n\n    if (rule != null) {\n      // add an empty category name\n      rule.categories.push('');\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a category from a rule\n   * @param rule delete a category from this rule\n   * @param index the index of the category\n   */\n  authoringViewDeleteCategoryClicked(rule, index) {\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // get the category name\n      var categoryName = rule.categories[index];\n\n      // confirm with the author that they really want to delete the category from the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory' , { ruleName: ruleName, categoryName: categoryName }));\n\n      if (answer) {\n        // remove the category at the index\n        rule.categories.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  }\n\n  /**\n   * Save the starter concept map\n   */\n  saveStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToSaveTheStarterConceptMap'));\n\n    if (answer) {\n      // get the concept map data\n      var conceptMapData = this.getConceptMapData();\n\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = conceptMapData;\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete the starter concept map\n   */\n  deleteStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheStarterConceptMap'));\n\n    if (answer) {\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = null;\n\n      // clear the concept map\n      this.clearConceptMap();\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The authoring view show save button checkbox was clicked\n   */\n  authoringViewShowSaveButtonClicked() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The authoring view show submit button checkbox was clicked\n   */\n  authoringViewShowSubmitButtonClicked() {\n\n    if (!this.authoringComponentContent.showSubmitButton) {\n      /*\n       * we are not showing the submit button to the student so\n       * we will clear the max submit count\n       */\n      this.authoringComponentContent.maxSubmitCount = null;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the node\n   * @param conceptMapNodeId the id of the node in the concept map\n   */\n  chooseNodeImage(conceptMapNodeId) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = conceptMapNodeId;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'Draw' ||\n      componentType == 'Embedded' ||\n      componentType == 'Graph' ||\n      componentType == 'Label' ||\n      componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  submit(submitTriggeredBy) {\n    super.submit(submitTriggeredBy);\n\n    /*\n     * set values appropriately here because the 'componentSubmitTriggered'\n     * event won't work in authoring mode\n     */\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.createComponentState('submit');\n  }\n}\n\nConceptMapAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapAuthoringController;\n"]}