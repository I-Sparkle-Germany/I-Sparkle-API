{"version":3,"sources":["conceptMapAuthoringController.es6"],"names":["ConceptMapAuthoringController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","shouldOptions","value","label","$translate","availableNodes","componentContent","nodes","availableLinks","links","showNodeLabels","authoringComponentContent","$watch","bind","newValue","oldValue","injectAssetPaths","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","width","height","setBackgroundImage","background","stretchBackground","document","getElementById","svgId","setupSVG","$on","event","args","isEventTargetThisComponent","fileName","assetItem","target","summernoteId","getSummernoteId","restoreSummernoteCursorPosition","fullAssetPath","getFullAssetPath","isImage","insertImageIntoSummernote","isVideo","insertVideoIntoSummernote","authoringViewComponentChanged","indexOf","node","authoringViewGetNodeById","hide","index","moveObjectUp","moveObjectDown","nodeFileName","nodeLabel","confirm","splice","link","linkLabel","id","authoringGetNewConceptMapNodeId","newNode","push","nodeId","authoringGetNewConceptMapLinkId","newLink","color","getNextAvailableId","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","length","setShowSubmitButtonValue","ruleName","categoryName","starterConceptMap","getConceptMapData","clearConceptMap","params","isPopup","componentId","$broadcast","conceptMapNodeId","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","componentType","authoringGetConnectedComponentType","importWorkAsBackground","submitTriggeredBy","isDirty","isSubmitDirty","createComponentState","ConceptMapController","$inject"],"mappings":"AAAA;;;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;IAEMA,6B;;;AACJ,yCAAYC,aAAZ,EACYC,OADZ,EAEYC,SAFZ,EAGYC,SAHZ,EAIYC,EAJZ,EAKYC,UALZ,EAMYC,MANZ,EAOYC,QAPZ,EAQYC,iBARZ,EASYC,iBATZ,EAUYC,aAVZ,EAWYC,WAXZ,EAYYC,eAZZ,EAaYC,cAbZ,EAcYC,mBAdZ,EAeYC,kBAfZ,EAgBYC,WAhBZ,EAgByB;AAAA;;AAAA,8JACjBhB,aADiB,EAErBC,OAFqB,EAGrBC,SAHqB,EAIrBC,SAJqB,EAKrBC,EALqB,EAMrBC,UANqB,EAOrBC,MAPqB,EAQrBC,QARqB,EASrBC,iBATqB,EAUrBC,iBAVqB,EAWrBC,aAXqB,EAYrBC,WAZqB,EAarBC,eAbqB,EAcrBC,cAdqB,EAerBC,mBAfqB,EAgBrBC,kBAhBqB,EAiBrBC,WAjBqB;;AAmBvB,UAAKC,8BAAL,GAAsC,CACpC,EAAEC,MAAM,YAAR,EADoC,EAEpC,EAAEA,MAAM,MAAR,EAFoC,EAGpC,EAAEA,MAAM,UAAR,EAHoC,EAIpC,EAAEA,MAAM,OAAR,EAJoC,EAKpC,EAAEA,MAAM,OAAR,EALoC,EAMpC,EAAEA,MAAM,OAAR,EANoC,CAAtC;;AASA,UAAKC,aAAL,GAAqB,CACnB;AACEC,aAAO,KADT,EACgBC,OAAO,MAAKC,UAAL,CAAgB,mBAAhB;AADvB,KADmB,EAInB;AACEF,aAAO,IADT,EACeC,OAAO,MAAKC,UAAL,CAAgB,sBAAhB;AADtB,KAJmB,CAArB;;AASA,UAAKC,cAAL,GAAsB,MAAKC,gBAAL,CAAsBC,KAA5C;AACA,UAAKC,cAAL,GAAsB,MAAKF,gBAAL,CAAsBG,KAA5C;;AAEA,QAAI,MAAKH,gBAAL,CAAsBI,cAAtB,IAAwC,IAA5C,EAAkD;AAChD,YAAKJ,gBAAL,CAAsBI,cAAtB,GAAuC,IAAvC;AACA,YAAKC,yBAAL,CAA+BD,cAA/B,GAAgD,IAAhD;AACD;;AAEDtB,WAAOwB,MAAP,CAAc,YAAW;AACvB,aAAO,KAAKD,yBAAZ;AACD,KAFa,CAEZE,IAFY,OAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACzC,WAAKT,gBAAL,GAAwB,KAAKX,cAAL,CAAoBqB,gBAApB,CAAqCF,QAArC,CAAxB;AACA,WAAKG,mBAAL,GAA2B,KAAKX,gBAAL,CAAsBY,cAAjD;AACA,WAAKC,qBAAL,GAA6B,KAAKb,gBAAL,CAAsBc,gBAAnD;AACA,WAAKf,cAAL,GAAsB,KAAKC,gBAAL,CAAsBC,KAA5C;AACA,WAAKC,cAAL,GAAsB,KAAKF,gBAAL,CAAsBG,KAA5C;AACA,WAAKY,KAAL,GAAa,KAAKf,gBAAL,CAAsBe,KAAnC;AACA,WAAKC,MAAL,GAAc,KAAKhB,gBAAL,CAAsBgB,MAApC;AACA,WAAKC,kBAAL,CAAwB,KAAKjB,gBAAL,CAAsBkB,UAA9C,EACE,KAAKlB,gBAAL,CAAsBmB,iBADxB;;AAGA;;;;;;;AAOA,UAAIC,SAASC,cAAT,CAAwB,KAAKC,KAA7B,KAAuC,IAA3C,EAAiD;AAC/C,aAAKC,QAAL;AACD;AACF,KArBa,CAqBZhB,IArBY,OAFd,EAuBc,IAvBd;;AAyBA,UAAKzB,MAAL,CAAY0C,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,UAAI,MAAKC,0BAAL,CAAgCD,IAAhC,CAAJ,EAA2C;AACzC,YAAME,WAAWF,KAAKG,SAAL,CAAeD,QAAhC;AACA,YAAIF,KAAKI,MAAL,KAAgB,QAApB,EAA8B;AAC5B,cAAMC,eAAe,MAAKC,eAAL,CAAqBN,IAArB,CAArB;AACA,gBAAKO,+BAAL,CAAqCF,YAArC;AACA,cAAMG,gBAAgB,MAAKC,gBAAL,CAAsBP,QAAtB,CAAtB;AACA,cAAI,MAAKpC,WAAL,CAAiB4C,OAAjB,CAAyBR,QAAzB,CAAJ,EAAwC;AACtC,kBAAKS,yBAAL,CAA+BN,YAA/B,EAA6CG,aAA7C,EAA4DN,QAA5D;AACD,WAFD,MAEO,IAAI,MAAKpC,WAAL,CAAiB8C,OAAjB,CAAyBV,QAAzB,CAAJ,EAAwC;AAC7C,kBAAKW,yBAAL,CAA+BR,YAA/B,EAA6CG,aAA7C;AACD;AACF,SATD,MASO,IAAIR,KAAKI,MAAL,KAAgB,YAApB,EAAkC;AACvC,gBAAKzB,yBAAL,CAA+Ba,UAA/B,GAA4CU,QAA5C;AACA,gBAAKY,6BAAL;AACD,SAHM,MAGA,IAAId,KAAKI,MAAL,IAAe,IAAf,IAAuBJ,KAAKI,MAAL,CAAYW,OAAZ,CAAoB,MAApB,KAA+B,CAA1D,EAA6D;AAClE,cAAMC,OAAO,MAAKC,wBAAL,CAA8BjB,KAAKI,MAAnC,CAAb;AACAY,eAAKd,QAAL,GAAgBA,QAAhB;AACA,gBAAKY,6BAAL;AACD;AACF;AACD,YAAK7D,SAAL,CAAeiE,IAAf;AACD,KAtBD;AAtEuB;AA6FxB;;AAED;;;;;;;;yDAIqCC,K,EAAO;AAC1C,WAAKrD,WAAL,CAAiBsD,YAAjB,CAA8B,KAAKzC,yBAAL,CAA+BJ,KAA7D,EAAoE4C,KAApE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;2DAIuCK,K,EAAO;AAC5C,WAAKrD,WAAL,CAAiBuD,cAAjB,CAAgC,KAAK1C,yBAAL,CAA+BJ,KAA/D,EAAsE4C,KAAtE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;yDAIqCK,K,EAAO;AAC1C,UAAM5C,QAAQ,KAAKI,yBAAL,CAA+BJ,KAA7C;AACA,UAAMyC,OAAOzC,MAAM4C,KAAN,CAAb;AACA,UAAMG,eAAeN,KAAKd,QAA1B;AACA,UAAMqB,YAAYP,KAAK7C,KAAvB;AACA,UAAIqD,QAAQ,KAAKpD,UAAL,CAAgB,8CAAhB,EACR,EAAEkD,cAAcA,YAAhB,EAA8BC,WAAWA,SAAzC,EADQ,CAAR,CAAJ,EAC2D;AACzDhD,cAAMkD,MAAN,CAAaN,KAAb,EAAoB,CAApB;AACA,aAAKL,6BAAL;AACD;AACF;;AAED;;;;;;;yDAIqCK,K,EAAO;AAC1C,WAAKrD,WAAL,CAAiBsD,YAAjB,CAA8B,KAAKzC,yBAAL,CAA+BF,KAA7D,EAAoE0C,KAApE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;2DAIuCK,K,EAAO;AAC5C,WAAKrD,WAAL,CAAiBuD,cAAjB,CAAgC,KAAK1C,yBAAL,CAA+BF,KAA/D,EAAsE0C,KAAtE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;yDAIqCK,K,EAAO;AAC1C,UAAM1C,QAAQ,KAAKE,yBAAL,CAA+BF,KAA7C;AACA,UAAMiD,OAAOjD,MAAM0C,KAAN,CAAb;AACA,UAAMQ,YAAYD,KAAKvD,KAAvB;AACA,UAAIqD,QAAQ,KAAKpD,UAAL,CAAgB,8CAAhB,EAAgE,EAAEuD,WAAWA,SAAb,EAAhE,CAAR,CAAJ,EAAuG;AACrGlD,cAAMgD,MAAN,CAAaN,KAAb,EAAoB,CAApB;AACA,aAAKL,6BAAL;AACD;AACF;;;2CAEsB;AACrB,UAAMc,KAAK,KAAKC,+BAAL,EAAX;AACA,UAAMC,UAAU;AACdF,YAAIA,EADU;AAEdzD,eAAO,EAFO;AAGd+B,kBAAU,EAHI;AAIdb,eAAO,GAJO;AAKdC,gBAAQ;AALM,OAAhB;AAOA,WAAKX,yBAAL,CAA+BJ,KAA/B,CAAqCwD,IAArC,CAA0CD,OAA1C;AACA,WAAKhB,6BAAL;AACD;;AAED;;;;;;;;6CAKyBkB,M,EAAQ;AAAA;AAAA;AAAA;;AAAA;AAC/B,6BAAiB,KAAKrD,yBAAL,CAA+BJ,KAAhD,8HAAuD;AAAA,cAA9CyC,IAA8C;;AACrD,cAAIgB,WAAWhB,KAAKY,EAApB,EAAwB;AACtB,mBAAOZ,IAAP;AACD;AACF;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM/B,aAAO,IAAP;AACD;;;2CAEsB;AACrB,UAAMY,KAAK,KAAKK,+BAAL,EAAX;AACA,UAAMC,UAAU;AACdN,YAAIA,EADU;AAEdzD,eAAO,EAFO;AAGdgE,eAAO;AAHO,OAAhB;AAKA,WAAKxD,yBAAL,CAA+BF,KAA/B,CAAqCsD,IAArC,CAA0CG,OAA1C;AACA,WAAKpB,6BAAL;AACD;;AAED;;;;;;;sDAIkC;AAChC,aAAO,KAAKvD,iBAAL,CAAuB6E,kBAAvB,CAA0C,KAAKzD,yBAAL,CAA+BJ,KAAzE,EAAgF,MAAhF,CAAP;AACD;;AAED;;;;;;;sDAIkC;AAChC,aAAO,KAAKhB,iBAAL,CAAuB6E,kBAAvB,CAA0C,KAAKzD,yBAAL,CAA+BF,KAAzE,EAAgF,MAAhF,CAAP;AACD;;AAED;;;;;;;qDAIiC4D,S,EAAW;AAC1C,UAAMC,OAAO,KAAK3D,yBAAL,CAA+B4D,KAA/B,CAAqCF,SAArC,CAAb;AACA,UAAIC,KAAKtE,IAAL,KAAc,MAAlB,EAA0B;AACxB;;;;AAIA,eAAOsE,KAAKX,SAAZ;AACA,eAAOW,KAAKE,cAAZ;AACD;AACD,WAAK1B,6BAAL;AACD;;;uCAEkB;AACjB,UAAM2B,UAAU;AACdC,cAAM,EADQ;AAEd1E,cAAM,MAFQ;AAGd2E,oBAAY,EAHE;AAIdpB,mBAAU,EAJI;AAKdqB,oBAAY,SALE;AAMdC,gBAAQ,CANM;AAOdC,aAAK;AAPS,OAAhB;;AAUA,WAAKnE,yBAAL,CAA+B4D,KAA/B,CAAqCR,IAArC,CAA0CU,OAA1C;AACA,UAAIrD,mBAAmB,KAAvB;AACA,UAAI,KAAKT,yBAAL,CAA+B4D,KAA/B,CAAqCQ,MAArC,GAA8C,CAAlD,EAAqD;AACnD3D,2BAAmB,IAAnB;AACD;;AAED,WAAK4D,wBAAL,CAA8B5D,gBAA9B;AACA,WAAK0B,6BAAL;AACD;;AAED;;;;;;;yDAIqCK,K,EAAO;AAC1C,WAAKrD,WAAL,CAAiBsD,YAAjB,CAA8B,KAAKzC,yBAAL,CAA+B4D,KAA7D,EAAoEpB,KAApE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;2DAIuCK,K,EAAO;AAC5C,WAAKrD,WAAL,CAAiBuD,cAAjB,CAAgC,KAAK1C,yBAAL,CAA+B4D,KAA/D,EAAsEpB,KAAtE;AACA,WAAKL,6BAAL;AACD;;AAED;;;;;;;yDAIqCK,K,EAAO;AAC1C,UAAMmB,OAAO,KAAK3D,yBAAL,CAA+B4D,KAA/B,CAAqCpB,KAArC,CAAb;AACA,UAAM8B,WAAWX,KAAKI,IAAtB;AACA,UAAIlB,QAAQ,KAAKpD,UAAL,CAAgB,8CAAhB,EAAgE,EAAE6E,UAAUA,QAAZ,EAAhE,CAAR,CAAJ,EAAsG;AACpG,aAAKtE,yBAAL,CAA+B4D,KAA/B,CAAqCd,MAArC,CAA4CN,KAA5C,EAAmD,CAAnD;AACA,aAAKL,6BAAL;AACD;;AAED,UAAI1B,mBAAmB,KAAvB;AACA,UAAI,KAAKT,yBAAL,CAA+B4D,KAA/B,CAAqCQ,MAArC,GAA8C,CAAlD,EAAqD;AACnD3D,2BAAmB,IAAnB;AACD;AACD,WAAK4D,wBAAL,CAA8B5D,gBAA9B;AACD;;;mDAE8BkD,I,EAAM;AACnCA,WAAKK,UAAL,CAAgBZ,IAAhB,CAAqB,EAArB;AACA,WAAKjB,6BAAL;AACD;;;wDAEmCwB,I,EAAMnB,K,EAAO;AAC/C,UAAM8B,WAAWX,KAAKI,IAAtB;AACA,UAAMQ,eAAeZ,KAAKK,UAAL,CAAgBxB,KAAhB,CAArB;AACA,UAAIK,QAAQ,KAAKpD,UAAL,CAAgB,iDAAhB,EACR,EAAE6E,UAAUA,QAAZ,EAAsBC,cAAcA,YAApC,EADQ,CAAR,CAAJ,EAC0D;AACxDZ,aAAKK,UAAL,CAAgBlB,MAAhB,CAAuBN,KAAvB,EAA8B,CAA9B;AACA,aAAKL,6BAAL;AACD;AACF;;;4CAEuB;AACtB,UAAIU,QAAQ,KAAKpD,UAAL,CAAgB,wDAAhB,CAAR,CAAJ,EAAwF;AACtF,aAAKO,yBAAL,CAA+BwE,iBAA/B,GAAmD,KAAKC,iBAAL,EAAnD;AACA,aAAKtC,6BAAL;AACD;AACF;;;8CAEyB;AACxB,UAAIU,QAAQ,KAAKpD,UAAL,CAAgB,0DAAhB,CAAR,CAAJ,EAA0F;AACxF,aAAKO,yBAAL,CAA+BwE,iBAA/B,GAAmD,IAAnD;AACA,aAAKE,eAAL;AACA,aAAKvC,6BAAL;AACD;AACF;;AAED;;;;;;4CAGwB;AACtB,UAAMwC,SAAS;AACbC,iBAAS,IADI;AAEbvB,gBAAQ,KAAKA,MAFA;AAGbwB,qBAAa,KAAKA,WAHL;AAIbpD,gBAAO;AAJM,OAAf;AAMA,WAAKjD,UAAL,CAAgBsG,UAAhB,CAA2B,kBAA3B,EAA+CH,MAA/C;AACD;;AAED;;;;;;;oCAIgBI,gB,EAAkB;AAChC,UAAMJ,SAAS;AACbC,iBAAS,IADI;AAEbvB,gBAAQ,KAAKA,MAFA;AAGbwB,qBAAa,KAAKA,WAHL;AAIbpD,gBAAQsD;AAJK,OAAf;AAMA,WAAKvG,UAAL,CAAgBsG,UAAhB,CAA2B,kBAA3B,EAA+CH,MAA/C;AACD;;AAED;;;;;;;;qFAKiEK,kB,EAAoB;AACnF,UAAIC,aAAa,KAAKC,qBAAL,CAA2BF,mBAAmB3B,MAA9C,CAAjB;AACA,UAAI8B,4BAA4B,CAAhC;AACA,UAAIC,mBAAmB,IAAvB;AAHmF;AAAA;AAAA;;AAAA;AAInF,8BAAsBH,UAAtB,mIAAkC;AAAA,cAAzBI,SAAyB;;AAChC,cAAIA,aAAa,IAAjB,EAAuB;AACrB,gBAAI,KAAKC,+BAAL,CAAqCD,UAAUhG,IAA/C,KACAgG,UAAUpC,EAAV,IAAgB,KAAK4B,WADzB,EACsC;AACpCM,2CAA6B,CAA7B;AACAC,iCAAmBC,SAAnB;AACD;AACF;AACF;AAZkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcnF,UAAIF,8BAA8B,CAAlC,EAAqC;AACnC;;;;AAIAH,2BAAmBH,WAAnB,GAAiCO,iBAAiBnC,EAAlD;AACA+B,2BAAmB3F,IAAnB,GAA0B,YAA1B;AACA,aAAKkG,8CAAL,CAAoDP,kBAApD;AACD;AACF;;AAED;;;;;;;kEAI8CA,kB,EAAoB;AAChEA,yBAAmB3F,IAAnB,GAA0B,YAA1B;AACA,WAAKkG,8CAAL,CAAoDP,kBAApD;AACA,WAAK7C,6BAAL;AACD;;AAED;;;;;;;;mEAK+C6C,kB,EAAoB;AACjE,UAAIQ,gBAAgB,KAAKC,kCAAL,CAAwCT,kBAAxC,CAApB;AACA,UAAIQ,kBAAkB,MAAlB,IACAA,kBAAkB,UADlB,IAEAA,kBAAkB,OAFlB,IAGAA,kBAAkB,OAHlB,IAIAA,kBAAkB,OAJtB,EAI+B;AAC7BR,2BAAmBU,sBAAnB,GAA4C,IAA5C;AACD,OAND,MAMO;AACL,eAAOV,mBAAmBU,sBAA1B;AACD;AACF;;AAED;;;;;;;;2DAKuCV,kB,EAAoB;AACzD,UAAI,CAACA,mBAAmBU,sBAAxB,EAAgD;AAC9C,eAAOV,mBAAmBU,sBAA1B;AACD;AACD,WAAKvD,6BAAL;AACD;;;2BAEMwD,iB,EAAmB;AACxB,2JAAaA,iBAAb;AACA,WAAKC,OAAL,GAAe,KAAf;AACA,WAAKC,aAAL,GAAqB,KAArB;AACA,WAAKC,oBAAL,CAA0B,QAA1B;AACD;;;;EAvbyCC,8B;;AA0b5C7H,8BAA8B8H,OAA9B,GAAwC,CACtC,eADsC,EAEtC,SAFsC,EAGtC,WAHsC,EAItC,WAJsC,EAKtC,IALsC,EAMtC,YANsC,EAOtC,QAPsC,EAQtC,UARsC,EAStC,mBATsC,EAUtC,mBAVsC,EAWtC,eAXsC,EAYtC,aAZsC,EAatC,iBAbsC,EActC,gBAdsC,EAetC,qBAfsC,EAgBtC,oBAhBsC,EAiBtC,aAjBsC,CAAxC;;kBAoBe9H,6B","file":"conceptMapAuthoringController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ConceptMapController from './conceptMapController';\n\nclass ConceptMapAuthoringController extends ConceptMapController {\n  constructor($anchorScroll,\n              $filter,\n              $location,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConceptMapService,\n              ConfigService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.shouldOptions = [\n      {\n        value: false, label: this.$translate('conceptMap.should')\n      },\n      {\n        value: true, label: this.$translate('conceptMap.shouldNot')\n      }\n    ];\n\n    this.availableNodes = this.componentContent.nodes;\n    this.availableLinks = this.componentContent.links;\n\n    if (this.componentContent.showNodeLabels == null) {\n      this.componentContent.showNodeLabels = true;\n      this.authoringComponentContent.showNodeLabels = true;\n    }\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.availableNodes = this.componentContent.nodes;\n      this.availableLinks = this.componentContent.links;\n      this.width = this.componentContent.width;\n      this.height = this.componentContent.height;\n      this.setBackgroundImage(this.componentContent.background,\n        this.componentContent.stretchBackground);\n\n      /*\n       * make sure the SVG element can be accessed. we need to\n       * perform this check because this watch is getting fired\n       * before angular sets the svgId on the svg element. if\n       * setupSVG() is called before the svgId is set on the svg\n       * element, we will get an error.\n       */\n      if (document.getElementById(this.svgId) != null) {\n        this.setupSVG();\n      }\n    }.bind(this), true);\n\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (this.isEventTargetThisComponent(args)) {\n        const fileName = args.assetItem.fileName;\n        if (args.target === 'rubric') {\n          const summernoteId = this.getSummernoteId(args);\n          this.restoreSummernoteCursorPosition(summernoteId);\n          const fullAssetPath = this.getFullAssetPath(fileName);\n          if (this.UtilService.isImage(fileName)) {\n            this.insertImageIntoSummernote(summernoteId, fullAssetPath, fileName);\n          } else if (this.UtilService.isVideo(fileName)) {\n            this.insertVideoIntoSummernote(summernoteId, fullAssetPath);\n          }\n        } else if (args.target === 'background') {\n          this.authoringComponentContent.background = fileName;\n          this.authoringViewComponentChanged();\n        } else if (args.target != null && args.target.indexOf('node') == 0) {\n          const node = this.authoringViewGetNodeById(args.target);\n          node.fileName = fileName;\n          this.authoringViewComponentChanged();\n        }\n      }\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * A move node up button was clicked in the authoring tool\n   * @param index the index of the node that we will move\n   */\n  authoringViewMoveNodeUpButtonClicked(index) {\n    this.UtilService.moveObjectUp(this.authoringComponentContent.nodes, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * A move node down button was clicked in the authoring tool.\n   * @param index the index of the node that we will move\n   */\n  authoringViewMoveNodeDownButtonClicked(index) {\n    this.UtilService.moveObjectDown(this.authoringComponentContent.nodes, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * A node delete button was clicked in the authoring tool.\n   * @param index the index of the node that we will delete\n   */\n  authoringViewNodeDeleteButtonClicked(index) {\n    const nodes = this.authoringComponentContent.nodes;\n    const node = nodes[index];\n    const nodeFileName = node.fileName;\n    const nodeLabel = node.label;\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode',\n        { nodeFileName: nodeFileName, nodeLabel: nodeLabel}))) {\n      nodes.splice(index, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A move link up button was clicked in the authoring tool.\n   * @param index the index of the link\n   */\n  authoringViewMoveLinkUpButtonClicked(index) {\n    this.UtilService.moveObjectUp(this.authoringComponentContent.links, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * A move link down button was clicked in the authoring tool.\n   * @param index the index of the link\n   */\n  authoringViewMoveLinkDownButtonClicked(index) {\n    this.UtilService.moveObjectDown(this.authoringComponentContent.links, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * A link delete button was clicked in the authoring tool.\n   * @param index the index of the link\n   */\n  authoringViewLinkDeleteButtonClicked(index) {\n    const links = this.authoringComponentContent.links;\n    const link = links[index];\n    const linkLabel = link.label;\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}))) {\n      links.splice(index, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  authoringViewAddNode() {\n    const id = this.authoringGetNewConceptMapNodeId();\n    const newNode = {\n      id: id,\n      label: '',\n      fileName: '',\n      width: 100,\n      height: 100\n    };\n    this.authoringComponentContent.nodes.push(newNode);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the concept map node with the given id\n   * @param nodeId the concept map node id\n   * @return the concept map node with the given node id\n   */\n  authoringViewGetNodeById(nodeId) {\n    for (let node of this.authoringComponentContent.nodes) {\n      if (nodeId === node.id) {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  authoringViewAddLink() {\n    const id = this.authoringGetNewConceptMapLinkId();\n    const newLink = {\n      id: id,\n      label: '',\n      color: ''\n    };\n    this.authoringComponentContent.links.push(newLink);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'node3'\n   */\n  authoringGetNewConceptMapNodeId() {\n    return this.ConceptMapService.getNextAvailableId(this.authoringComponentContent.nodes, 'node');\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'link3'\n   */\n  authoringGetNewConceptMapLinkId() {\n    return this.ConceptMapService.getNextAvailableId(this.authoringComponentContent.links, 'link');\n  }\n\n  /**\n   * A \"with link\" checkbox was checked\n   * @param ruleIndex the index of the rule\n   */\n  authoringRuleLinkCheckboxClicked(ruleIndex) {\n    const rule = this.authoringComponentContent.rules[ruleIndex];\n    if (rule.type === 'node') {\n      /*\n       * the rule has been set to 'node' instead of 'link' so we\n       * will remove the link label and other node label\n       */\n      delete rule.linkLabel;\n      delete rule.otherNodeLabel;\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  authoringAddRule() {\n    const newRule = {\n      name: '',\n      type: 'node',\n      categories: [],\n      nodeLabel:'',\n      comparison: 'exactly',\n      number: 1,\n      not: false\n    };\n\n    this.authoringComponentContent.rules.push(newRule);\n    let showSubmitButton = false;\n    if (this.authoringComponentContent.rules.length > 0) {\n      showSubmitButton = true;\n    }\n\n    this.setShowSubmitButtonValue(showSubmitButton);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a rule up\n   * @param index the index of the rule\n   */\n  authoringViewMoveRuleUpButtonClicked(index) {\n    this.UtilService.moveObjectUp(this.authoringComponentContent.rules, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a rule down\n   * @param index the index of the rule\n   */\n  authoringViewMoveRuleDownButtonClicked(index) {\n    this.UtilService.moveObjectDown(this.authoringComponentContent.rules, index);\n    this.authoringViewComponentChanged();\n  }\n\n  /*\n   * Delete a rule\n   * @param index the index of the rule to delete\n   */\n  authoringViewRuleDeleteButtonClicked(index) {\n    const rule = this.authoringComponentContent.rules[index];\n    const ruleName = rule.name;\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }))) {\n      this.authoringComponentContent.rules.splice(index, 1);\n      this.authoringViewComponentChanged();\n    }\n\n    let showSubmitButton = false;\n    if (this.authoringComponentContent.rules.length > 0) {\n      showSubmitButton = true;\n    }\n    this.setShowSubmitButtonValue(showSubmitButton);\n  }\n\n  authoringViewAddCategoryToRule(rule) {\n    rule.categories.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  authoringViewDeleteCategoryFromRule(rule, index) {\n    const ruleName = rule.name;\n    const categoryName = rule.categories[index];\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory',\n        { ruleName: ruleName, categoryName: categoryName }))) {\n      rule.categories.splice(index, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  saveStarterConceptMap() {\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToSaveTheStarterConceptMap'))) {\n      this.authoringComponentContent.starterConceptMap = this.getConceptMapData();\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  deleteStarterConceptMap() {\n    if (confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheStarterConceptMap'))) {\n      this.authoringComponentContent.starterConceptMap = null;\n      this.clearConceptMap();\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n    const params = {\n      isPopup: true,\n      nodeId: this.nodeId,\n      componentId: this.componentId,\n      target:'background'\n    };\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the node\n   * @param conceptMapNodeId the id of the node in the concept map\n   */\n  chooseNodeImage(conceptMapNodeId) {\n    const params = {\n      isPopup: true,\n      nodeId: this.nodeId,\n      componentId: this.componentId,\n      target: conceptMapNodeId\n    };\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n    let numberOfAllowedComponents = 0;\n    let allowedComponent = null;\n    for (let component of components) {\n      if (component != null) {\n        if (this.isConnectedComponentTypeAllowed(component.type) &&\n            component.id != this.componentId) {\n          numberOfAllowedComponents += 1;\n          allowedComponent = component;\n        }\n      }\n    }\n\n    if (numberOfAllowedComponents === 1) {\n      /*\n       * there is only one viable component to connect to so we\n       * will use it\n       */\n      connectedComponent.componentId = allowedComponent.id;\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n    connectedComponent.type = 'importWork';\n    this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType === 'Draw' ||\n        componentType === 'Embedded' ||\n        componentType === 'Graph' ||\n        componentType === 'Label' ||\n        componentType === 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  submit(submitTriggeredBy) {\n    super.submit(submitTriggeredBy);\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.createComponentState('submit');\n  }\n}\n\nConceptMapAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapAuthoringController;\n"]}