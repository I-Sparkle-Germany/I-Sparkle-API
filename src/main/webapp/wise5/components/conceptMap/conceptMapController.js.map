{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","showAdvancedAuthoring","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","shouldOptions","value","label","autoFeedbackString","submitCounter","svgId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","componentState","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","setupSVG","angular","initializeSVG","conceptMapController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","studentWork","$emit","isAutoSave","clientSaveTime","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterConceptMap","conceptMapData","populateConceptMapData","setStudentWork","maxSubmitCount","score","data","maxAutoScore","comment","enableNodeDragging","calculateDisabled","$parent","nodeController","registerComponentController","studentData","processLatestSubmit","n","length","node","instanceId","originalId","filePath","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","maxScore","showAutoFeedback","feedback","show","parent","element","querySelector","clickOutsideToClose","title","htmlContent","ariaLabel","ok","isLockAfterSubmit","getComponentId","createNewComponentState","response","getStudentResponse","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","parseFloat","autoGrader","scoreAnnotation","createAutoScoreAnnotation","push","commentAnnotation","createAutoCommentAnnotation","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","linkJSON","background","substring","lastIndexOf","backgroundPath","stretchBackground","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","template","fullscreen","escapeToClose","makeCRaterRequest","concepts","autoScoreAnnotationData","getMaxScoreForComponent","autoScoreAnnotation","autoComment","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","index","nodeFileName","nodeLabel","linkLabel","authoringGetNewConceptMapNodeId","newNode","authoringGetNewConceptMapLinkId","newLink","nextAvailableNodeIdNumber","usedNumbers","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","ruleName","categoryName","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","setColor","setOriginalId","hideLinkTypeChooser","linksTitle","setLinkTypeChooserOverlayStyle","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","backgroundSize","getModalWidth","getModalHeight","overlayWidth","conceptMapContainer","offset","offsetLeft","left","offsetTop","top","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svgWidth","selectNodeBarWidthString","getElementById","css","svgWidthString","selectNodeBarHeight","svgHeight","selectNodeBarHeightString","svgHeightString","overlayHeight","remove","tagName","clearHighlightedElement","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","getId","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","clearConceptMap","removeAllLinks","removeAllNodes","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n\n        // the available nodes the students can choose\n        this.availableNodes = [];\n\n        // the available links the students can choose\n        this.availableLinks = [];\n\n        // the node instances the students create\n        this.nodes = [];\n\n        // the link instances the students create\n        this.links = [];\n\n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n\n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n\n        // the selected link type\n        this.selectedLinkType = null;\n\n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n\n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n\n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n\n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node\n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        // the options for authoring the should or should not value in rules\n        this.shouldOptions = [\n            {\n                value: false, label: this.$translate('conceptMap.should')\n            },\n            {\n                value: true, label: this.$translate('conceptMap.shouldNot')\n            }\n        ];\n\n        // the auto feedback string\n        this.autoFeedbackString = '';\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the id of the svg element\n            this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n\n                var componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * the student does not have any work for this component so\n                     * we will use the node id, component id, and workgroup id\n                     * for the svg id\n                     */\n                    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n                } else {\n                    /*\n                     * the student has work for this component so we will use\n                     * the node id, component id, and component state id\n                     * for the svg id\n                     */\n                    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.width = this.componentContent.width;\n                    this.height = this.componentContent.height;\n\n                    this.setupSVG();\n                }.bind(this), true);\n            }\n\n            /*\n             * Call the initializeSVG() after a timeout so that angular has a\n             * chance to set the svg element id before we start using it. If we\n             * don't wait for the timeout, the svg id won't be set when we try\n             * to start referencing the svg element.\n             */\n            this.$timeout(angular.bind(this, this.initializeSVG));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('SUBMITTED', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Initialize the SVG\n     */\n    initializeSVG() {\n\n        // setup the svg\n        this.setupSVG();\n\n        var componentState = null;\n\n        // set whether rich text is enabled\n        this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        // get the component state from the scope\n        componentState = this.$scope.componentState;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.starterConceptMap != null) {\n                /*\n                 * the student has not done any work and there is a starter\n                 * concept map so we will populate the concept map with\n                 * the starter\n                 */\n\n                // get the starter concept map\n                var conceptMapData = this.componentContent.starterConceptMap;\n\n                // populate the concept map data into the component\n                this.populateConceptMapData(conceptMapData);\n            }\n        } else {\n            // the student has work for this component\n\n            /*\n             * inject the asset path so that the file name is changed to\n             * a relative path\n             * e.g.\n             * \"Sun.png\"\n             * will be changed to\n             * \"/wise/curriculum/108/assets/Sun.png\"\n             */\n            componentState = this.ProjectService.injectAssetPaths(componentState);\n\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n            /*\n             * the student has used up all of their chances to submit so we\n             * will disable the submit button\n             */\n            this.isSubmitButtonDisabled = true;\n        }\n\n        // populate the previous feedback\n        if (this.latestAnnotations != null) {\n\n            var autoFeedbackString = \"\";\n\n            // obtain the previous score annotation if any\n            if (this.latestAnnotations.score != null) {\n\n                // get the annotation data\n                var data = this.latestAnnotations.score.data;\n\n                if (data != null) {\n\n                    // get the score and max auto score\n                    var score = data.value;\n                    var maxAutoScore = data.maxAutoScore;\n\n                    autoFeedbackString += this.$translate('SCORE') + \": \" + score;\n\n                    if (maxAutoScore != null && maxAutoScore != '') {\n                        // show the max score as the denominator\n                        autoFeedbackString += \"/\" + maxAutoScore;\n                    }\n                }\n            }\n\n            // obtain the previous comment annotation if any\n            if (this.latestAnnotations.comment != null) {\n\n                // get the annotation data\n                var data = this.latestAnnotations.comment.data;\n\n                if (data != null) {\n                    if (autoFeedbackString != \"\") {\n                        // add a new line if the result string is not empty\n                        autoFeedbackString += \"<br/>\";\n                    }\n\n                    // get the comment\n                    var comment = data.value;\n                    autoFeedbackString += this.$translate('FEEDBACK') + \": \" + comment;\n                }\n            }\n\n            /*\n             * set the previous auto feedback into the field that is used\n             * to display the auto feedback to the student when they click\n             * on the show feedback button\n             */\n            this.autoFeedbackString = autoFeedbackString;\n        }\n\n        // make the nodes draggable\n        this.enableNodeDragging();\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n\n        if (this.$scope.$parent.nodeController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                if (conceptMapData != null) {\n\n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n\n        if (conceptMapData != null) {\n\n            // clear the existing nodes in the student view\n            this.nodes = [];\n\n            var nodes = conceptMapData.nodes;\n\n            if (nodes != null) {\n\n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n\n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n\n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n\n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n\n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n\n            // clear the existing links in the student view\n            this.links = [];\n\n            var links = conceptMapData.links;\n\n            if (links != null) {\n\n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n\n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n\n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n\n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n\n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n\n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n\n            /*\n             * move the link text group to the front so that they are on top\n             * of links\n             */\n            this.moveLinkTextToFront();\n\n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n\n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n\n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n\n        if (this.nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var node = this.nodes[n];\n\n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n\n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n\n        if (this.links != null) {\n\n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n\n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n\n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        var performSubmit = true;\n\n        if (this.componentContent.maxSubmitCount != null) {\n            // there is a max submit count\n\n            // calculate the number of submits this student has left\n            var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n            var message = '';\n\n            if (numberOfSubmitsLeft <= 0) {\n\n                // the student does not have any more chances to submit\n                alert(this.$translate('conceptMap.youHaveNoMoreChances'));\n                performSubmit = false;\n            } else if (numberOfSubmitsLeft == 1) {\n\n                // ask the student if they are sure they want to submit\n                message = this.$translate('conceptMap.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                performSubmit = confirm(message);\n            } else if (numberOfSubmitsLeft > 1) {\n\n                // ask the student if they are sure they want to submit\n                message = this.$translate('conceptMap.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                performSubmit = confirm(message);\n            }\n        }\n\n        if (performSubmit) {\n            // increment the submit counter\n            this.submitCounter++;\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their submits so we will\n                 * disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // get the custom rule evaluator code that was authored\n            var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n\n            // get the component content\n            var componentContent = this.componentContent;\n\n            // get the student concept map\n            var conceptMapData = this.getConceptMapData();\n\n            var thisConceptMapService = this.ConceptMapService;\n\n            // the result will be stored in this variable\n            var thisResult = {};\n\n            /*\n             * create the any function that can be called in the custom rule\n             * evaluator code. the arguments to the any function are rule names.\n             * for example if we are looking for any of the links below\n             * Sun (Infrared Radiation) Space\n             * Sun (Heat) Space\n             * Sun (Solar Radiation) Space\n             * we will call the any function like this\n             * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n             * these dynamic arguments will be placed in the arguments variable\n             */\n            var any = function() {\n                return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n            };\n\n            /*\n             * create the all function that can be called in the custom rule\n             * evaluator code. the arguments to the all function are rule names.\n             * for example if we are looking for all of the links below\n             * Sun (Infrared Radiation) Space\n             * Sun (Heat) Space\n             * Sun (Solar Radiation) Space\n             * we will call the any function like this\n             * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n             * these dynamic arguments will be placed in the arguments variable\n             */\n            var all = function() {\n                return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n            }\n\n            /*\n             * create the setResult function that can be called in the custom rule\n             * evaluator code\n             */\n            var setResult = function(result) {\n                thisResult = result;\n            }\n\n            // run the custom rule evaluator\n            eval(customRuleEvaluator);\n\n            // remember the auto feedback result\n            this.autoFeedbackResult = thisResult;\n\n            var resultString = \"\";\n\n            if (this.componentContent.showAutoScore && thisResult.score != null) {\n                // display the score\n                resultString += this.$translate('SCORE') + \": \" + thisResult.score;\n\n                if (this.componentContent.maxScore != null && this.componentContent.maxScore != '') {\n                    // show the max score as the denominator\n                    resultString += \"/\" + this.componentContent.maxScore;\n                }\n            }\n\n            if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n                if (resultString != \"\") {\n                    // add a new line if the result string is not empty\n                    resultString += \"<br/>\";\n                }\n\n                // display the feedback\n                resultString += this.$translate('FEEDBACK') + \": \" + thisResult.feedback;\n            }\n\n            if (resultString != \"\") {\n                // show the auto feedback in a modal dialog\n                this.$mdDialog.show(\n                    this.$mdDialog.alert()\n                    .parent(angular.element(document.querySelector('#feedbackDiv')))\n                    .clickOutsideToClose(true)\n                    .title(this.$translate('FEEDBACK'))\n                    .htmlContent(resultString)\n                    .ariaLabel(this.$translate('FEEDBACK'))\n                    .ok(this.$translate('CLOSE'))\n                );\n            }\n\n            // remember the feedback string\n            this.autoFeedbackString = resultString;\n\n            this.isSubmit = true;\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n\n            if (this.autoFeedbackResult != null) {\n                // there is auto feedback\n\n                if (this.autoFeedbackResult.score != null || this.autoFeedbackResult.feedback != null) {\n                    // there is an auto score or auto feedback\n\n                    // get the values used to create an annotation\n                    var runId = this.ConfigService.getRunId();\n                    var periodId = this.ConfigService.getPeriodId();\n                    var nodeId = this.nodeId;\n                    var componentId = this.componentId;\n                    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n                    // create an array of annotations to be saved with the component state\n                    componentState.annotations = [];\n\n                    if (this.autoFeedbackResult.score != null) {\n                        // there is an auto score\n\n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = parseFloat(this.autoFeedbackResult.score);\n                        data.autoGrader = 'conceptMap';\n\n                        if (this.componentContent.maxScore != null) {\n                            data.maxAutoScore = parseFloat(this.componentContent.maxScore);\n                        }\n\n                        // create the auto score annotation\n                        var scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n                        // add the annotation to the component state\n                        componentState.annotations.push(scoreAnnotation);\n                    }\n\n                    if (this.autoFeedbackResult.feedback != null) {\n                        // there is auto feedback\n\n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = this.autoFeedbackResult.feedback;\n                        data.autoGrader = 'conceptMap';\n\n                        // create the auto score annotation\n                        var commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n                        // add the annotation to the component state\n                        componentState.annotations.push(commentAnnotation);\n                    }\n                }\n            }\n        }\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n\n            studentData.nodes.push(nodeJSON);\n        }\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n\n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n\n            studentData.links.push(linkJSON);\n        }\n\n        // set the background data into the student data\n        if (this.componentContent.background != null) {\n            var background = this.componentContent.background;\n\n            // this is the background file name e.g. background.png\n            studentData.background = background.substring(background.lastIndexOf('/') + 1);\n\n            // this is the background path e.g. /wise/curriculum/108/assets/background.png\n            studentData.backgroundPath = background;\n\n            // whether to stretch the background to fill the svg element\n            studentData.stretchBackground = this.componentContent.stretchBackground;\n        }\n\n        return studentData;\n    }\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"' + this.$translate('conceptMap.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('conceptMap.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n\n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n\n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since\n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * inject the asset paths so that the node file names change from\n                         * 'Sun.png' to '/wise/curriculum/129/assets/Sun.png'\n                         */\n                        populatedComponentState = this.ProjectService.injectAssetPaths(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * A node up button was clicked in the authoring tool so we will move the\n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n\n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n\n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n\n            if (nodes != null) {\n\n                // get the node at the given index\n                var node = nodes[index];\n\n                // remove the node\n                nodes.splice(index, 1);\n\n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        // check if the node is at the bottom\n        if (nodes != null && index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n\n            // get the node at the given index\n            var node = nodes[index];\n\n            // remove the node\n            nodes.splice(index, 1);\n\n            // insert the node back in one index ahead\n            nodes.splice(index + 1, 0, node);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        if (nodes != null) {\n\n            // get the node\n            var node = nodes[index];\n\n            if (node != null) {\n\n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n\n                // confirm with the author that they really want to delete the node\n                var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode', { nodeFileName: nodeFileName, nodeLabel: nodeLabel}));\n\n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link up button was clicked in the authoring tool so we will move the\n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n\n        // check if the link is at the top\n        if (index != 0) {\n\n            // get the links\n            var links = this.authoringComponentContent.links;\n\n            if (links != null) {\n\n                // get a link\n                var link = links[index];\n\n                if (link != null) {\n\n                    // remove the link\n                    links.splice(index, 1);\n\n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link down button was clicked in the authoring tool so we will move the\n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        // check if the link is at the bottom\n        if (links != null && index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n\n            if (links != null) {\n\n                // get the link\n                var link = links[index];\n\n                if (link != null) {\n\n                    // remove the link\n                    links.splice(index, 1);\n\n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        if (links != null) {\n\n            // get a link\n            var link = links[index];\n\n            if (link != null) {\n\n                // get the link label\n                var linkLabel = link.label;\n\n                // confirm with the author that they really want to delete the link\n                var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}));\n\n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n\n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n\n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        // add the new node\n        nodes.push(newNode);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n\n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n\n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        // add the new link\n        links.push(newLink);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n\n        var nextAvailableNodeIdNumber = 1;\n\n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n\n            if (node != null) {\n\n                // get the node id\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'node' + nextAvailableNodeIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n\n        var nextAvailableLinkIdNumber = 1;\n\n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n\n            if (link != null) {\n\n                // get the node id\n                var nodeId = link.id;\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'link' + nextAvailableLinkIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * A \"with link\" checkbox was checked\n     * @param ruleIndex the index of the rule\n     */\n    authoringRuleLinkCheckboxClicked(ruleIndex) {\n\n        // get the rule that was checked\n        var rule = this.authoringComponentContent.rules[ruleIndex];\n\n        if (rule != null) {\n            if (rule.type == 'node') {\n                /*\n                 * the rule has been set to 'node' instead of 'link' so we\n                 * will remove the link label and other node label\n                 */\n\n                delete rule.linkLabel;\n                delete rule.otherNodeLabel;\n            }\n        }\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a new rule\n     */\n    authoringAddRule() {\n\n        // create the new rule\n        var newRule = {};\n        newRule.name = \"\";\n        newRule.type = \"node\";\n        newRule.categories = [];\n        newRule.nodeLabel = \"\";\n        newRule.comparison = \"exactly\";\n        newRule.number = 1;\n        newRule.not = false;\n\n        // add the rule to the array of rules\n        this.authoringComponentContent.rules.push(newRule);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a rule up\n     * @param index the index of the rule\n     */\n    authoringViewRuleUpButtonClicked(index) {\n\n        // check if the rule is at the top\n        if (index != 0) {\n            // the rule is not at the top so we can move it up\n\n            // get the rules\n            var rules = this.authoringComponentContent.rules;\n\n            if (rules != null) {\n\n                // get the rule at the given index\n                var rule = rules[index];\n\n                // remove the rule\n                rules.splice(index, 1);\n\n                // insert the rule back in one index back\n                rules.splice(index - 1, 0, rule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a rule down\n     * @param index the index of the rule\n     */\n    authoringViewRuleDownButtonClicked(index) {\n\n        // get the rules\n        var rules = this.authoringComponentContent.rules;\n\n        // check if the rule is at the bottom\n        if (rules != null && index != rules.length - 1) {\n            // the rule is not at the bottom so we can move it down\n\n            // get the rule at the given index\n            var rule = rules[index];\n\n            // remove the rule\n            rules.splice(index, 1);\n\n            // insert the rule back in one index ahead\n            rules.splice(index + 1, 0, rule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /*\n     * Delete a rule\n     * @param index the index of the rule to delete\n     */\n    authoringViewRuleDeleteButtonClicked(index) {\n\n        // get the rule\n        var rule = this.authoringComponentContent.rules[index];\n\n        if (rule != null) {\n\n            // get the rule name\n            var ruleName = rule.name;\n\n            // confirm with the author that they really want to delete the rule\n            var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }));\n\n            if (answer) {\n                // remove the rule at the given index\n                this.authoringComponentContent.rules.splice(index, 1);\n\n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Add a category to a rule\n     * @param rule the rule\n     */\n    authoringViewAddCategoryClicked(rule) {\n\n        if (rule != null) {\n            // add an empty category name\n            rule.categories.push(\"\");\n        }\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a category from a rule\n     * @param rule delete a category from this rule\n     * @param index the index of the category\n     */\n    authoringViewDeleteCategoryClicked(rule, index) {\n\n        if (rule != null) {\n\n            // get the rule name\n            var ruleName = rule.name;\n\n            // get the category name\n            var categoryName = rule.categories[index];\n\n            // confirm with the author that they really want to delete the category from the rule\n            var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory' , { ruleName: ruleName, categoryName: categoryName }));\n\n            if (answer) {\n                // remove the category at the index\n                rule.categories.splice(index, 1);\n\n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n\n        if (this.highlightedElement != null &&\n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n\n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n\n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n\n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n\n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n\n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n\n        return linksTitle;\n    }\n\n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n\n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n\n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        this.linkTypeChooserStyle['left'] = '600px';\n        this.linkTypeChooserStyle['top'] = '20px';\n\n        this.displayLinkTypeChooser = true;\n    }\n\n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n\n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n\n        if (!this.$scope.$$phase) {\n            // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n            // and it still seems to work. Do we need this line?\n            // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n            //this.$scope.$apply();\n        }\n    }\n\n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg element in the svg.js world\n        this.draw = SVG(this.svgId);\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n\n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n\n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n\n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n\n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg element in the angular world\n        var svg = angular.element('#' + this.svgId);\n\n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n\n            this.addedDragOverListener = true;\n        }\n\n        /*\n         * check if we have already added the drop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg[0].addEventListener('drop', (event) => {\n\n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n\n            this.addedDropListener = true;\n        }\n\n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n\n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n\n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n\n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n\n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'left': '600px',\n            'top': '20px',\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n\n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n\n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n\n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n\n        var conceptMapContainer = angular.element('#conceptMapContainer');\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n\n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n\n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n\n        var selectNodeBarWidth = null;\n        var svgWidth = null;\n\n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n\n        // get the width of the svg element\n        var svgWidthString = angular.element(document.getElementById(this.svgId)).css('width');\n\n        if (selectNodeBarWidthString != null && svgWidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svgWidth = parseInt(svgWidthString.replace('px', ''));\n        }\n\n        var overlayWidth = null;\n\n        if (selectNodeBarWidth != null && svgWidth != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svgWidth;\n        }\n\n        return overlayWidth;\n    }\n\n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n\n        var selectNodeBarHeight = null;\n        var svgHeight = null;\n\n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n\n        // get the height of the svg element\n        var svgHeightString = angular.element(document.getElementById(this.svgId)).css('height');\n\n        if (selectNodeBarHeightString != null && svgHeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svgHeight = parseInt(svgHeightString.replace('px', ''));\n        }\n\n        var overlayHeight = null;\n\n        if (selectNodeBarHeight != null && svgHeight != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svgHeight);\n        }\n\n        return overlayHeight;\n    }\n\n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n\n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n\n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n\n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n\n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n\n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n\n        // we are no longer drawing a link\n        this.drawingLink = false;\n\n        // there is no longer an active link\n        this.activeLink = null;\n\n        // enable node draggin\n        this.enableNodeDragging();\n        this.moveLinkTextToFront();\n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n\n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n\n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n\n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n\n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n\n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n\n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center\n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by\n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n\n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n\n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n\n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the\n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n\n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n\n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the\n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n\n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n\n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n\n            var isDragging = true;\n\n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n\n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n\n            // show the border for the node\n            node.showBorder();\n\n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n\n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n\n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n\n        this.activeNode = null;\n    }\n\n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n\n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n\n        var parentOffsetX = 0;\n        var parentOffsetY = 0;\n\n        // get the user agent so we can determine which browser the user is using\n        var userAgent = navigator.userAgent;\n\n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                matrix = event.target.createSVGMatrix();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else {\n                // the user is using some other browser\n                matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'circle') {\n            // the target is a node connector circle or delete circle\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n\n                // get the bounding box of the circle\n                var bbox = event.target.getBBox();\n\n                /*\n                 * get the bounding box of the circle so we can get the\n                 * coordinates of the circle within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n\n                // get the absolute coordinates of the circle\n                parentOffsetX = matrix.e + bbox.x;\n                parentOffsetY = matrix.f + bbox.y;\n            }\n        } else if (event.target.tagName == 'rect') {\n            // the target is the rectangle that outlines the image\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n\n                // get the bounding box of the rect\n                var bbox = event.target.getBBox();\n\n                /*\n                 * get the bounding box of the rect so we can get the\n                 * coordinates of the rect within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n\n                // get the absolute coordinates of the rect\n                parentOffsetX = matrix.e + x;\n                parentOffsetY = matrix.f + y;\n            }\n        } else if (event.target.tagName == 'image') {\n            // the target is an image\n\n            if (userAgent.indexOf('Chrome') != -1) {\n\n            } else if (userAgent.indexOf('Firefox') != -1) {\n\n                // get the matrix of the group\n                var matrix = event.target.parentElement.getCTM();\n\n                // get the coordinates of the upper left corner of the group\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'path') {\n            /*\n             * the target is the link line. sometimes the mouse can be over the\n             * link if the student is moving the mouse around quickly.\n             */\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the coordinates of the head of the link\n                var x2 = event.target.attributes['x2'];\n                var y2 = event.target.attributes['y2'];\n\n                if (x2 != null && y2 != null) {\n                    parentOffsetX = parseInt(x2.value);\n                    parentOffsetY = parseInt(y2.value);\n                }\n            }\n        } else {\n            // the target is something else\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        }\n\n        /*\n         * add the parent offset values to the relative offset values to obtain\n         * the x and y values relative to the upper left corner of the svg\n         */\n        var x = parentOffsetX + offsetX;\n        var y = parentOffsetY + offsetY;\n\n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n\n        return returnObject;\n    }\n\n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n\n        // remember the selected node\n        this.selectedNode = node;\n\n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n\n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n\n        // get the selected node\n        var selectedNode = this.selectedNode;\n\n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n\n            // get the node name\n            var label = selectedNode.label;\n\n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n\n            // get the original authored id\n            var originalId = selectedNode.id;\n\n            // get the coordinates relative to the svg element\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n\n            // get the position we should drop the node at\n            var x = coordinates.x - this.tempOffsetX;\n            var y = coordinates.y - this.tempOffsetY;\n\n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n\n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n\n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n\n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n\n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n\n            // handle the student data changing\n            this.studentDataChanged();\n        }\n\n        // enable node dragging\n        this.enableNodeDragging();\n    }\n\n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n\n        var nextAvailableNodeIdNumber = 1;\n\n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n\n            if (node != null) {\n\n                // get the node id\n                var nodeId = node.getId();\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n\n        var nextAvailableLinkIdNumber = 1;\n\n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n\n            if (link != null) {\n\n                // get the node id\n                var linkId = link.getId();\n\n                if (linkId != null) {\n\n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n\n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n\n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n\n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n\n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n\n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n\n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n\n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n\n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n\n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n\n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n\n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n\n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n\n        if (element != null) {\n\n            // remember the highlighted element\n            this.highlightedElement = element;\n\n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n\n            // show the delete button for the element\n            element.showDeleteButton();\n\n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n\n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n\n                // show the link type chooser\n                this.showLinkTypeChooser();\n\n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n\n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n\n        if (this.highlightedElement != null) {\n\n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n\n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n\n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n\n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n\n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n\n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n\n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get the node group\n                var group = node.getGroup();\n\n                if (group != null) {\n\n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n\n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n\n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as\n     * creating a link.\n     */\n    disableNodeDragging() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get a node group\n                var group = node.getGroup();\n\n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the link text group to the front\n     */\n    moveLinkTextToFront() {\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n\n            if (link != null) {\n                // move the link text group to the front\n                link.moveTextGroupToFront();\n            }\n        }\n    }\n\n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get a node group\n                var group = node.getGroup();\n\n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n\n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n\n        if (node != null) {\n\n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n\n            if (outgoingLinks != null) {\n\n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n\n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n\n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n\n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n\n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n\n            if (incomingLinks != null) {\n\n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n\n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n\n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n\n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n\n            // remove the node from the svg\n            node.remove();\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n\n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n\n            // remove the node from the svg\n            tempNode.remove();\n        }\n\n        // clear the nodes array\n        this.nodes = [];\n    }\n\n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n\n        if (id != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n\n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n\n        if (groupId != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n\n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n\n        if (id != null) {\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n\n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n\n        return link;\n    }\n\n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n\n        if (groupId != null) {\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n\n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n\n        return link;\n    }\n\n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n\n        if (connectorId != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n\n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n\n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId\n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n\n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n\n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n\n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n\n        if (link != null) {\n\n            // remove the link from the svg\n            link.remove();\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n\n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n\n            // remove the link from the svg\n            tempLink.remove();\n        }\n\n        // clear the links array\n        this.links = [];\n    }\n\n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n\n        // get the node group id\n        var groupId = event.target.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n\n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n\n        if (event.target.parentElement != null) {\n\n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n\n            if (groupId != null) {\n\n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n\n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n\n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n\n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n\n            if (groupId != null) {\n\n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n\n                if (node != null) {\n\n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n\n                    if (sourceNodeGroupId == groupId) {\n                        /*\n                         * if the source of the link is the same as the\n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n\n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n\n                        // make the link the active link\n                        this.addLink(this.activeLink);\n\n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n\n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n\n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n\n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n\n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n\n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n\n        if (link != null) {\n\n            // remove the link from our array of links\n            this.removeLink(link);\n\n            // handle the student data changing\n            this.studentDataChanged();\n        }\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n\n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n\n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n\n        // get the connector (the svg circle)\n        var connector = event.target;\n\n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n\n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n\n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n\n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n\n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n\n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n\n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n\n        // remember the active link\n        this.activeLink = link;\n\n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n\n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n\n        // highlight the link\n        this.setHighlightedElement(link);\n\n        // clear the active node\n        this.clearActiveNode();\n\n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n\n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n\n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n\n        // set the link text mouse down listener\n        link.setLinkTextMouseDown((event) => {\n            this.linkTextMouseDown(event);\n        });\n\n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n\n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n\n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n\n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on a link text\n     * @param event the mouse down event\n     */\n    linkTextMouseDown(event) {\n\n        var linkGroupId = null;\n\n        /*\n         * the link group id is set into the text group in the linkGroupId\n         * variable. the text group hierarchy looks like this\n         * text group > text > tspan\n         * text group > rect\n         */\n        if (event.target.nodeName == 'tspan') {\n            linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'text') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'rect') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        }\n\n        if (linkGroupId != null) {\n\n            // get the link\n            var link = this.getLinkByGroupId(linkGroupId);\n\n            if (link != null) {\n                // make the link highlighted\n                this.setHighlightedElement(link);\n            }\n        }\n\n    }\n\n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n\n        if (event.target.parentElement != null) {\n\n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n\n                // remove the node from our array of nodes\n                this.removeNode(node);\n\n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n\n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n\n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n\n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n\n        // get the group id\n        var groupId = event.target.id;\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n\n        // handle the student data changing\n        this.studentDataChanged();\n    }\n\n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     *\n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n\n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n\n        // loop until we have reached the svg element\n        while (currentElement != null) {\n\n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n\n                // the group id will be the previous id we saw\n                groupId = previousId;\n\n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n\n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n\n        return groupId;\n    }\n\n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n\n        // get the concept map data\n        var conceptMapData = this.getConceptMapData();\n\n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = conceptMapData;\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n\n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = null;\n\n        // clear the concept map\n        this.clearConceptMap();\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n\n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n\n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n\n    /**\n     * Reset the concept map data. We will clear the concept map data and\n     * if there is starter concept map data we will set it into the concept map.\n     */\n    resetConceptMap() {\n\n        // ask the student if they are sure they want to reset their work\n        var message = this.$translate('conceptMap.areYouSureYouWantToResetYourWork');\n        var answer = confirm(message);\n\n        if (answer) {\n            // the student answered yes to reset their work\n\n            // clear the concept map\n            this.clearConceptMap();\n\n            if (this.componentContent.starterConceptMap != null) {\n\n                // get the starter concept map\n                var conceptMapData = this.componentContent.starterConceptMap;\n\n                // populate the starter concept map data into the component\n                this.populateConceptMapData(conceptMapData);\n            }\n        }\n    }\n\n    /**\n     * Show the auto feedback that was generated when the student previously\n     * clicked \"Check Answer\".\n     */\n    showAutoFeedback() {\n\n        // show the auto feedback in a modal dialog\n        this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .parent(angular.element(document.querySelector('#feedbackDiv')))\n            .clickOutsideToClose(true)\n            .title(this.$translate('FEEDBACK'))\n            .htmlContent(this.autoFeedbackString)\n            .ariaLabel(this.$translate('FEEDBACK'))\n            .ok(this.$translate('CLOSE'))\n        );\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The authoring view show save button checkbox was clicked\n     */\n    authoringViewShowSaveButtonClicked() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The authoring view show submit button checkbox was clicked\n     */\n    authoringViewShowSubmitButtonClicked() {\n\n        if (!this.authoringComponentContent.showSubmitButton) {\n            /*\n             * we are not showing the submit button to the student so\n             * we will clear the max submit count\n             */\n            this.authoringComponentContent.maxSubmitCount = null;\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nConceptMapController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapController;\n"]}