{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","isSnipButtonVisible","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","originalComponentContent","mode","workgroupId","teacherWorkgroupId","shouldOptions","label","$translate","autoFeedbackString","submitCounter","id","setBackgroundImage","background","stretchBackground","svgId","conceptMapContainerId","selectNodeBarId","feedbackContainerId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","componentState","idInfo","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","document","getElementById","setupSVG","angular","initializeSVG","conceptMapController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","clientSaveTime","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","indexOf","node","authoringViewGetNodeById","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","hide","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterConceptMap","conceptMapData","populateConceptMapData","maxSubmitCount","score","data","maxAutoScore","comment","enableNodeDragging","calculateDisabled","$parent","nodeController","registerComponentController","$broadcast","studentData","processLatestSubmit","n","length","instanceId","originalId","filePath","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","backgroundPath","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","maxScore","showAutoFeedback","feedback","show","clickOutsideToClose","title","htmlContent","ariaLabel","ok","isLockAfterSubmit","getComponentId","createNewComponentState","response","getStudentResponse","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","parseFloat","autoGrader","scoreAnnotation","createAutoScoreAnnotation","push","commentAnnotation","createAutoCommentAnnotation","componentType","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","linkJSON","substring","lastIndexOf","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","index","nodeFileName","nodeLabel","answer","linkLabel","authoringGetNewConceptMapNodeId","newNode","authoringGetNewConceptMapLinkId","newLink","nextAvailableNodeIdNumber","usedNumbers","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","setShowSubmitButtonValue","ruleName","categoryName","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnSave","isCRaterScoreOnSubmit","isCRaterScoreOnChange","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","setColor","setOriginalId","clearHighlightedElement","linksTitle","setLinkTypeChooserOverlayStyle","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg","element","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","getModalWidth","getModalHeight","overlayWidth","conceptMapContainer","offset","offsetLeft","left","offsetTop","top","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svgWidth","selectNodeBarWidthString","css","svgWidthString","selectNodeBarHeight","svgHeight","selectNodeBarHeightString","svgHeightString","overlayHeight","remove","hideLinkTypeChooser","tagName","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","getId","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","clearConceptMap","removeAllLinks","removeAllNodes","parent","querySelector","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","conceptMapNodeId","isNotebookEnabled","svgElement","serializer","XMLSerializer","svgString","serializeToString","getHrefToBase64ImageReplacements","images","i","imagePair","imageHref","base64Image","imageRegEx","RegExp","myCanvas","ctx","getContext","Blob","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","addNote","src","newConnectedComponent","updateOn","connectedComponents","tags","tag","c","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedNodes","mergedLinks","concat","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","generateImageFromComponentState","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","authoringGetConnectedComponentType","a","allowedConnectedComponentType","backgroundSize","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ComponentController from '../componentController';\n\nclass ConceptMapController extends ComponentController {\n\n  constructor($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n      AnnotationService, ConfigService, NodeService,\n      NotebookService, ProjectService, StudentAssetService,\n      StudentDataService, UtilService);\n    this.$anchorScroll = $anchorScroll;\n    this.$location = $location;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.ConceptMapService = ConceptMapService;\n    this.CRaterService = CRaterService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether this component is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether rich text editing is enabled\n    this.isRichTextEnabled = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // whether the submit button is disabled\n    this.isSubmitButtonDisabled = false;\n\n    // whether the snip table button is shown or not\n    this.isSnipButtonVisible = true;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // default width and height for the svg\n    this.width = 800;\n    this.height = 600;\n\n    // the available nodes the students can choose\n    this.availableNodes = [];\n\n    // the available links the students can choose\n    this.availableLinks = [];\n\n    // the node instances the students create\n    this.nodes = [];\n\n    // the link instances the students create\n    this.links = [];\n\n    // flag to display the link type chooser\n    this.displayLinkTypeChooser = false;\n\n    // flag to display the modal overlay for the link type chooser\n    this.displayLinkTypeChooserModalOverlay = false;\n\n    // the selected link type\n    this.selectedLinkType = null;\n\n    // flag for whether we have initialized the link type modal overlay\n    this.initializedDisplayLinkTypeChooserModalOverlay = false;\n\n    // default values for the modal width and height\n    this.modalWidth = 800;\n    this.modalHeight = 600;\n\n    /*\n     * used to remember the node the student has started dragging to create\n     * so that we know what node to create once they let go off the mouse\n     * on the svg element\n     */\n    this.selectedNode = null;\n\n    /*\n     * used to remember the offset of the mouse relative to the upper left\n     * of the node image the student started dragging to create a new node\n     * instance\n     */\n    this.tempOffsetX = 0;\n    this.tempOffsetY = 0;\n\n    let themePath = this.ProjectService.getThemePath();\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    // the options for authoring the should or should not value in rules\n    this.shouldOptions = [\n      {\n        value: false, label: this.$translate('conceptMap.should')\n      },\n      {\n        value: true, label: this.$translate('conceptMap.shouldNot')\n      }\n    ];\n\n    // the auto feedback string\n    this.autoFeedbackString = '';\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n      this.setBackgroundImage(this.componentContent.background,\n                  this.componentContent.stretchBackground);\n\n      // set the id of the svg and other display elements\n      this.svgId = 'svg_' + this.$scope.nodeId + '_' + this.componentId;\n      this.conceptMapContainerId = 'conceptMapContainer_' + this.$scope.nodeId + '_' + this.componentId;\n      this.selectNodeBarId = 'selectNodeBar_' + this.$scope.nodeId + '_' + this.componentId;\n      this.feedbackContainerId = 'feedbackContainer_' + this.$scope.nodeId + '_' + this.componentId;\n\n      if (this.componentContent.width != null) {\n        this.width = this.componentContent.width;\n      }\n\n      if (this.componentContent.height != null) {\n        this.height = this.componentContent.height;\n      }\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.availableNodes = this.componentContent.nodes;\n        this.availableLinks = this.componentContent.links;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n\n        let componentState = this.$scope.componentState;\n\n        if (componentState) {\n          // set ids for the svg and other display elements using the componentStateId (so we have unique ids when showing revisions)\n          /*\n           * the student has work for this component so we will use\n           * the node id, component id, and workgroup id, and\n           * componentStateId for the svg id\n           */\n          let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId + '_' + componentState.id;\n          if (this.mode === 'gradingRevision') {\n            idInfo = '_gradingRevision_' + idInfo\n            this.svgId = 'svg_' + idInfo;\n            this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n            this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n            this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n          } else {\n            this.svgId = 'svg_' + idInfo;\n            this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n            this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n            this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n          }\n        } else {\n          /*\n           * the student does not have any work for this component so\n           * we will use the node id, component id, and workgroup id\n           * for the svg id\n           */\n          let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n          this.svgId = 'svg_' + idInfo;\n          this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n          this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n          this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipButtonVisible = false;\n        this.isDisabled = true;\n\n        var componentState = this.$scope.componentState;\n\n        if (componentState == null) {\n          /*\n           * the student does not have any work for this component so\n           * we will use the node id, component id, and workgroup id\n           * for the svg id\n           */\n          this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n        } else {\n          /*\n           * the student has work for this component so we will use\n           * the node id, component id, and component state id\n           * for the svg id\n           */\n          this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n        }\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.availableNodes = this.componentContent.nodes;\n        this.availableLinks = this.componentContent.links;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n          this.availableNodes = this.componentContent.nodes;\n          this.availableLinks = this.componentContent.links;\n          this.width = this.componentContent.width;\n          this.height = this.componentContent.height;\n          this.setBackgroundImage(this.componentContent.background,\n                      this.componentContent.stretchBackground);\n\n          /*\n           * make sure the SVG element can be accessed. we need to\n           * perform this check because this watch is getting fired\n           * before angular sets the svgId on the svg element. if\n           * setupSVG() is called before the svgId is set on the svg\n           * element, we will get an error.\n           */\n          if (document.getElementById(this.svgId) != null) {\n            this.setupSVG();\n          }\n        }.bind(this), true);\n      }\n\n      /*\n       * Call the initializeSVG() after a timeout so that angular has a\n       * chance to set the svg element id before we start using it. If we\n       * don't wait for the timeout, the svg id won't be set when we try\n       * to start referencing the svg element.\n       */\n      this.$timeout(angular.bind(this, this.initializeSVG));\n    }\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.conceptMapController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.conceptMapController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.conceptMapController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }.bind(this));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let clientSaveTime = componentState.clientSaveTime;\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.background = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              } else if (args.target != null && args.target.indexOf('node') == 0) {\n                // the target is a node image\n\n                // get the concept map node\n                var node = this.authoringViewGetNodeById(args.target);\n\n                if (node != null) {\n                  // set the file name of the node\n                  node.fileName = fileName;\n                }\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * Initialize the SVG\n   */\n  initializeSVG() {\n\n    // setup the svg\n    this.setupSVG();\n\n    var componentState = null;\n\n    // set whether rich text is enabled\n    this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.ConceptMapService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n\n        /*\n         * inject the asset path so that the file name is changed to\n         * a relative path\n         * e.g.\n         * \"Sun.png\"\n         * will be changed to\n         * \"/wise/curriculum/108/assets/Sun.png\"\n         */\n        componentState = this.ProjectService.injectAssetPaths(componentState);\n\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        /*\n         * only import work if the student does not already have\n         * work for this component\n         */\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        } else if (this.componentContent.starterConceptMap != null) {\n          /*\n           * the student has not done any work and there is a starter\n           * concept map so we will populate the concept map with\n           * the starter\n           */\n\n          // get the starter concept map\n          var conceptMapData = this.componentContent.starterConceptMap;\n\n          // populate the concept map data into the component\n          this.populateConceptMapData(conceptMapData);\n        }\n      }\n    } else {\n      /*\n       * inject the asset path so that the file name is changed to\n       * a relative path\n       * e.g.\n       * 'Sun.png'\n       * will be changed to\n       * '/wise/curriculum/108/assets/Sun.png'\n       */\n      componentState = this.ProjectService.injectAssetPaths(componentState);\n\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // populate the previous feedback\n    if (this.latestAnnotations != null) {\n\n      var autoFeedbackString = '';\n\n      // obtain the previous score annotation if any\n      if (this.latestAnnotations.score != null) {\n\n        // get the annotation data\n        var data = this.latestAnnotations.score.data;\n\n        if (data != null) {\n\n          // get the score and max auto score\n          var score = data.value;\n          var maxAutoScore = data.maxAutoScore;\n\n          autoFeedbackString += this.$translate('SCORE') + ': ' + score;\n\n          if (maxAutoScore != null && maxAutoScore != '') {\n            // show the max score as the denominator\n            autoFeedbackString += '/' + maxAutoScore;\n          }\n        }\n      }\n\n      // obtain the previous comment annotation if any\n      if (this.latestAnnotations.comment != null) {\n\n        // get the annotation data\n        var data = this.latestAnnotations.comment.data;\n\n        if (data != null) {\n          if (autoFeedbackString != '') {\n            // add a new line if the result string is not empty\n            autoFeedbackString += '<br/>';\n          }\n\n          // get the comment\n          var comment = data.value;\n          autoFeedbackString += this.$translate('FEEDBACK') + ': ' + comment;\n        }\n      }\n\n      /*\n       * set the previous auto feedback into the field that is used\n       * to display the auto feedback to the student when they click\n       * on the show feedback button\n       */\n      this.autoFeedbackString = autoFeedbackString;\n    }\n\n    // make the nodes draggable\n    this.enableNodeDragging();\n\n    // check if we need to lock this component\n    this.calculateDisabled();\n\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var conceptMapData = studentData.conceptMapData;\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        if (conceptMapData != null) {\n\n          // populate the concept map data into the component\n          this.populateConceptMapData(conceptMapData);\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Populate the concept map data into the component\n   * @param conceptMapData the concept map data which contains an array\n   * of nodes and an array of links\n   */\n  populateConceptMapData(conceptMapData) {\n\n    if (conceptMapData != null) {\n\n      // clear the existing nodes in the student view\n      this.nodes = [];\n\n      var nodes = conceptMapData.nodes;\n\n      if (nodes != null) {\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n          var node = nodes[n];\n\n          var instanceId = node.instanceId;\n          var originalId = node.originalId;\n          var filePath = node.fileName;\n          var label = node.label;\n          var x = node.x;\n          var y = node.y;\n          var width = node.width;\n          var height = node.height\n\n          // create a ConceptMapNode\n          var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n\n          // add the node to our array of nodes\n          this.addNode(conceptMapNode);\n\n          // set the mouse events on the node\n          this.setNodeMouseEvents(conceptMapNode);\n        }\n      }\n\n      // clear the existing links in the student view\n      this.links = [];\n\n      var links = conceptMapData.links;\n\n      if (links != null) {\n\n        // loop through all the links\n        for (var l = 0; l < links.length; l++) {\n          var link = links[l];\n\n          var instanceId = link.instanceId;\n          var originalId = link.originalId;\n          var sourceNodeId = link.sourceNodeInstanceId;\n          var destinationNodeId = link.destinationNodeInstanceId;\n          var label = link.label;\n          var color = link.color;\n          var curvature = link.curvature;\n          var startCurveUp = link.startCurveUp;\n          var endCurveUp = link.endCurveUp;\n          var sourceNode = null;\n          var destinationNode = null;\n\n          if (sourceNodeId != null) {\n            sourceNode = this.getNodeById(sourceNodeId);\n          }\n\n          if (destinationNodeId != null) {\n            destinationNode = this.getNodeById(destinationNodeId);\n          }\n\n          // create a ConceptMapLink\n          var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n          // add the link to our array of links\n          this.addLink(conceptMapLink);\n\n          // set the mouse events on the link\n          this.setLinkMouseEvents(conceptMapLink);\n        }\n      }\n\n      if (conceptMapData.backgroundPath != null &&\n          conceptMapData.backgroundPath != '') {\n        this.setBackgroundImage(conceptMapData.backgroundPath,\n          conceptMapData.stretchBackground);\n      }\n\n      /*\n       * move the link text group to the front so that they are on top\n       * of links\n       */\n      this.moveLinkTextToFront();\n\n      // move the nodes to the front so that they are on top of links\n      this.moveNodesToFront();\n\n      /*\n       * set a timeout to refresh the link labels so that the rectangles\n       * around the labels are properly resized\n       */\n      this.$timeout(() => {\n        this.refreshLinkLabels();\n      });\n    }\n  }\n\n  /**\n   * Refresh the link labels so that the rectangles around the text\n   * labels are resized to fit the text properly. This is required because\n   * the rectangles are not properly sized when the ConceptMapLinks are\n   * initialized. The rectangles need to be rendered first and then the\n   * labels need to be set in order for the rectangles to be resized properly.\n   * This is why this function is called in a $timeout.\n   */\n  refreshLinkLabels() {\n\n    if (this.nodes != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var node = this.nodes[n];\n\n        if (node != null) {\n          // get the label from the node\n          var label = node.getLabel();\n\n          /*\n           * set the label back into the node so that the rectangle\n           * around the text label is resized to the text\n           */\n          node.setLabel(label);\n        }\n      }\n    }\n\n    if (this.links != null) {\n\n      // loop throgh all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var link = this.links[l];\n\n        if (link != null) {\n          // get the label from the link\n          var label = link.getLabel();\n\n          /*\n           * set the label back into the link so that the rectangle\n           * around the text label is resized to the text\n           */\n          link.setLabel(label);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestState.clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), latestState.clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    if (this.mode === 'authoring') {\n      /*\n       * we are in authoring mode so we will set isDirty to false here\n       * because the 'componentSaveTriggered' event won't work in\n       * authoring mode\n       */\n      this.isDirty = false;\n    }\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('conceptMap.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('conceptMap.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('conceptMap.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n        // increment the submit counter\n        this.submitCounter++;\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          //this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        // get the custom rule evaluator code that was authored\n        var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        // get the student concept map\n        var conceptMapData = this.getConceptMapData();\n\n        var thisConceptMapService = this.ConceptMapService;\n\n        // the result will be stored in this variable\n        var thisResult = {};\n\n        /*\n         * create the any function that can be called in the custom rule\n         * evaluator code. the arguments to the any function are rule names.\n         * for example if we are looking for any of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var any = function() {\n          return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n        };\n\n        /*\n         * create the all function that can be called in the custom rule\n         * evaluator code. the arguments to the all function are rule names.\n         * for example if we are looking for all of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var all = function() {\n          return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n        }\n\n        /*\n         * create the setResult function that can be called in the custom rule\n         * evaluator code\n         */\n        var setResult = function(result) {\n          thisResult = result;\n        }\n\n        // run the custom rule evaluator\n        eval(customRuleEvaluator);\n\n        // remember the auto feedback result\n        this.autoFeedbackResult = thisResult;\n\n        var resultString = '';\n\n        if (this.componentContent.showAutoScore && thisResult.score != null) {\n          // display the score\n          resultString += this.$translate('SCORE') + ': ' + thisResult.score;\n\n          if (this.componentContent.maxScore != null && this.componentContent.maxScore != '') {\n            // show the max score as the denominator\n            resultString += '/' + this.componentContent.maxScore;\n          }\n        }\n\n        if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n          if (resultString != '') {\n            // add a new line if the result string is not empty\n            resultString += '<br/>';\n          }\n\n          // display the feedback\n          resultString += this.$translate('FEEDBACK') + ': ' + thisResult.feedback;\n        }\n\n        if (resultString != '') {\n          // show the auto feedback in a modal dialog\n          this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .clickOutsideToClose(true)\n            .title(this.$translate('FEEDBACK'))\n            .htmlContent(resultString)\n            .ariaLabel(this.$translate('FEEDBACK'))\n            .ok(this.$translate('CLOSE'))\n          );\n        }\n\n        // remember the feedback string\n        this.autoFeedbackString = resultString;\n\n        this.isSubmit = true;\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in the authoring view so we will set the\n           * latest score and comment annotations manually\n           */\n\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  };\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Get the student response\n   */\n  getStudentResponse() {\n    return this.studentResponse;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // get the text the student typed\n    var response = this.getStudentResponse();\n\n    // set the response into the component state\n    var studentData = {};\n    var conceptMapData = this.getConceptMapData();\n    studentData.conceptMapData = conceptMapData;\n\n    // the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    if (this.isSubmit) {\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n\n      if (this.autoFeedbackResult != null) {\n        // there is auto feedback\n\n        if (this.autoFeedbackResult.score != null || this.autoFeedbackResult.feedback != null) {\n          // there is an auto score or auto feedback\n\n          // get the values used to create an annotation\n          var runId = this.ConfigService.getRunId();\n          var periodId = this.ConfigService.getPeriodId();\n          var nodeId = this.nodeId;\n          var componentId = this.componentId;\n          var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n          // create an array of annotations to be saved with the component state\n          componentState.annotations = [];\n\n          if (this.autoFeedbackResult.score != null) {\n            // there is an auto score\n\n            // create the data object for the annotation\n            var data = {};\n            data.value = parseFloat(this.autoFeedbackResult.score);\n            data.autoGrader = 'conceptMap';\n\n            if (this.componentContent.maxScore != null) {\n              data.maxAutoScore = parseFloat(this.componentContent.maxScore);\n            }\n\n            // create the auto score annotation\n            var scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n            // add the annotation to the component state\n            componentState.annotations.push(scoreAnnotation);\n\n            if (this.mode === 'authoring') {\n              if (this.latestAnnotations == null) {\n                this.latestAnnotations = {};\n              }\n\n              /*\n               * we are in the authoring view so we will set the\n               * latest score annotation manually\n               */\n              this.latestAnnotations.score = scoreAnnotation;\n            }\n          }\n\n          if (this.autoFeedbackResult.feedback != null) {\n            // there is auto feedback\n\n            // create the data object for the annotation\n            var data = {};\n            data.value = this.autoFeedbackResult.feedback;\n            data.autoGrader = 'conceptMap';\n\n            // create the auto score annotation\n            var commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n            // add the annotation to the component state\n            componentState.annotations.push(commentAnnotation);\n\n            if (this.mode === 'authoring') {\n              if (this.latestAnnotations == null) {\n                this.latestAnnotations = {};\n              }\n\n              /*\n               * we are in the authoring view so we will set the\n               * latest comment annotation manually\n               */\n              this.latestAnnotations.comment = commentAnnotation;\n            }\n          }\n        }\n      }\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'ConceptMap';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Get the concept map data\n   * @returns an object containing a array of nodes and an array of links\n   */\n  getConceptMapData() {\n    var studentData = {};\n    studentData.nodes = [];\n    studentData.links = [];\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      // get the JSON representation of the node\n      var nodeJSON = node.toJSONObject();\n\n      studentData.nodes.push(nodeJSON);\n    }\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var link = this.links[l];\n\n      // get the JSON representation of the link\n      var linkJSON = link.toJSONObject();\n\n      studentData.links.push(linkJSON);\n    }\n\n    // set the background data into the student data\n    if (this.background != null) {\n      var background = this.background;\n\n      // this is the background file name e.g. background.png\n      studentData.background = background.substring(background.lastIndexOf('/') + 1);\n\n      // this is the background path e.g. /wise/curriculum/108/assets/background.png\n      studentData.backgroundPath = background;\n\n      // whether to stretch the background to fill the svg element\n      studentData.stretchBackground = this.stretchBackground;\n    }\n\n    return studentData;\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n            /*\n             * inject the asset paths so that the node file names change from\n             * 'Sun.png' to '/wise/curriculum/129/assets/Sun.png'\n             */\n            populatedComponentState = this.ProjectService.injectAssetPaths(populatedComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * A node up button was clicked in the authoring tool so we will move the\n   * node up\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeUpButtonClicked(index) {\n\n    // check if the node is at the top\n    if (index != 0) {\n      // the node is not at the top so we can move it up\n\n      // get the nodes\n      var nodes = this.authoringComponentContent.nodes;\n\n      if (nodes != null) {\n\n        // get the node at the given index\n        var node = nodes[index];\n\n        // remove the node\n        nodes.splice(index, 1);\n\n        // insert the node back in one index back\n        nodes.splice(index - 1, 0, node);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * A node down button was clicked in the authoring tool so we will move the\n   * node down\n   * @param index the index of the node that we will move\n   */\n  authoringViewNodeDownButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // check if the node is at the bottom\n    if (nodes != null && index != nodes.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      // get the node at the given index\n      var node = nodes[index];\n\n      // remove the node\n      nodes.splice(index, 1);\n\n      // insert the node back in one index ahead\n      nodes.splice(index + 1, 0, node);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A node delete button was clicked in the authoring tool so we will remove\n   * the node\n   * @param index the index of the node that we will delete\n   */\n  authoringViewNodeDeleteButtonClicked(index) {\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    if (nodes != null) {\n\n      // get the node\n      var node = nodes[index];\n\n      if (node != null) {\n\n        // get the file name and label\n        var nodeFileName = node.fileName;\n        var nodeLabel = node.label;\n\n        // confirm with the author that they really want to delete the node\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode', { nodeFileName: nodeFileName, nodeLabel: nodeLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the node so we\n           * will remove it from the array\n           */\n          nodes.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link up button was clicked in the authoring tool so we will move the\n   * link up\n   * @param index the index of the link\n   */\n  authoringViewLinkUpButtonClicked(index) {\n\n    // check if the link is at the top\n    if (index != 0) {\n\n      // get the links\n      var links = this.authoringComponentContent.links;\n\n      if (links != null) {\n\n        // get a link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index back\n          links.splice(index - 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link down button was clicked in the authoring tool so we will move the\n   * link down\n   * @param index the index of the link\n   */\n  authoringViewLinkDownButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // check if the link is at the bottom\n    if (links != null && index != links.length - 1) {\n      // the node is not at the bottom so we can move it down\n\n      if (links != null) {\n\n        // get the link\n        var link = links[index];\n\n        if (link != null) {\n\n          // remove the link\n          links.splice(index, 1);\n\n          // add the link back in one index ahead\n          links.splice(index + 1, 0, link);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * A link delete button was clicked in the authoring tool so we remove the\n   * link\n   * @param index the index of the link\n   */\n  authoringViewLinkDeleteButtonClicked(index) {\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    if (links != null) {\n\n      // get a link\n      var link = links[index];\n\n      if (link != null) {\n\n        // get the link label\n        var linkLabel = link.label;\n\n        // confirm with the author that they really want to delete the link\n        var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}));\n\n        if (answer) {\n          /*\n           * the author is sure they want to delete the link so we\n           * will remove it from the array\n           */\n          links.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a node in the authoring tool\n   */\n  authoringViewAddNode() {\n\n    // get a new node id\n    var id = this.authoringGetNewConceptMapNodeId();\n\n    // create the new node\n    var newNode = {};\n    newNode.id = id;\n    newNode.label = '';\n    newNode.fileName = '';\n    newNode.width = 100;\n    newNode.height = 100;\n\n    // get the nodes\n    var nodes = this.authoringComponentContent.nodes;\n\n    // add the new node\n    nodes.push(newNode);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the concept map node with the given id\n   * @param nodeId the concept map node id\n   * @return the concept map node with the given node id\n   */\n  authoringViewGetNodeById(nodeId) {\n\n    if (nodeId != null &&\n      this.authoringComponentContent != null &&\n      this.authoringComponentContent.nodes != null) {\n\n      // loop through all the concept map nodes\n      for (var n = 0; n < this.authoringComponentContent.nodes.length; n++) {\n        var node = this.authoringComponentContent.nodes[n];\n\n        if (node != null) {\n          if (nodeId === node.id) {\n            // we have found the concept map node that we want\n            return node;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Add a link in the authoring tool\n   */\n  authoringViewAddLink() {\n\n    // get a new link id\n    var id = this.authoringGetNewConceptMapLinkId();\n\n    // create a new link\n    var newLink = {};\n    newLink.id = id;\n    newLink.label = '';\n    newLink.color = '';\n\n    // get the links\n    var links = this.authoringComponentContent.links;\n\n    // add the new link\n    links.push(newLink);\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'node3'\n   */\n  authoringGetNewConceptMapNodeId() {\n\n    var nextAvailableNodeIdNumber = 1;\n\n    // array to remember the numbers that have been used in node ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n      var node = this.authoringComponentContent.nodes[x];\n\n      if (node != null) {\n\n        // get the node id\n        var nodeId = node.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'node' + nextAvailableNodeIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'link3'\n   */\n  authoringGetNewConceptMapLinkId() {\n\n    var nextAvailableLinkIdNumber = 1;\n\n    // array to remember the numbers that have been used in link ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n      var link = this.authoringComponentContent.links[x];\n\n      if (link != null) {\n\n        // get the node id\n        var nodeId = link.id;\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'link' + nextAvailableLinkIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * A \"with link\" checkbox was checked\n   * @param ruleIndex the index of the rule\n   */\n  authoringRuleLinkCheckboxClicked(ruleIndex) {\n\n    // get the rule that was checked\n    var rule = this.authoringComponentContent.rules[ruleIndex];\n\n    if (rule != null) {\n      if (rule.type == 'node') {\n        /*\n         * the rule has been set to 'node' instead of 'link' so we\n         * will remove the link label and other node label\n         */\n\n        delete rule.linkLabel;\n        delete rule.otherNodeLabel;\n      }\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a new rule\n   */\n  authoringAddRule() {\n\n    // create the new rule\n    var newRule = {};\n    newRule.name = '';\n    newRule.type = 'node';\n    newRule.categories = [];\n    newRule.nodeLabel = '';\n    newRule.comparison = 'exactly';\n    newRule.number = 1;\n    newRule.not = false;\n\n    // add the rule to the array of rules\n    this.authoringComponentContent.rules.push(newRule);\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a rule up\n   * @param index the index of the rule\n   */\n  authoringViewRuleUpButtonClicked(index) {\n\n    // check if the rule is at the top\n    if (index != 0) {\n      // the rule is not at the top so we can move it up\n\n      // get the rules\n      var rules = this.authoringComponentContent.rules;\n\n      if (rules != null) {\n\n        // get the rule at the given index\n        var rule = rules[index];\n\n        // remove the rule\n        rules.splice(index, 1);\n\n        // insert the rule back in one index back\n        rules.splice(index - 1, 0, rule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a rule down\n   * @param index the index of the rule\n   */\n  authoringViewRuleDownButtonClicked(index) {\n\n    // get the rules\n    var rules = this.authoringComponentContent.rules;\n\n    // check if the rule is at the bottom\n    if (rules != null && index != rules.length - 1) {\n      // the rule is not at the bottom so we can move it down\n\n      // get the rule at the given index\n      var rule = rules[index];\n\n      // remove the rule\n      rules.splice(index, 1);\n\n      // insert the rule back in one index ahead\n      rules.splice(index + 1, 0, rule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /*\n   * Delete a rule\n   * @param index the index of the rule to delete\n   */\n  authoringViewRuleDeleteButtonClicked(index) {\n\n    // get the rule\n    var rule = this.authoringComponentContent.rules[index];\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // confirm with the author that they really want to delete the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }));\n\n      if (answer) {\n        // remove the rule at the given index\n        this.authoringComponentContent.rules.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n\n    var showSubmitButton = false;\n\n    if (this.authoringComponentContent.rules.length > 0) {\n      // there are scoring rules so we will show the submit button\n      showSubmitButton = true;\n    }\n\n    // set the value of the showSubmitButton field\n    this.setShowSubmitButtonValue(showSubmitButton);\n  }\n\n  /**\n   * Add a category to a rule\n   * @param rule the rule\n   */\n  authoringViewAddCategoryClicked(rule) {\n\n    if (rule != null) {\n      // add an empty category name\n      rule.categories.push('');\n    }\n\n    // perform updating and saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a category from a rule\n   * @param rule delete a category from this rule\n   * @param index the index of the category\n   */\n  authoringViewDeleteCategoryClicked(rule, index) {\n\n    if (rule != null) {\n\n      // get the rule name\n      var ruleName = rule.name;\n\n      // get the category name\n      var categoryName = rule.categories[index];\n\n      // confirm with the author that they really want to delete the category from the rule\n      var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory' , { ruleName: ruleName, categoryName: categoryName }));\n\n      if (answer) {\n        // remove the category at the index\n        rule.categories.splice(index, 1);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * A link type was selected in the link type chooser popup\n   * @param linkType the authored link object that was selected\n   */\n  linkTypeSelected(selectedLink) {\n\n    if (this.highlightedElement != null &&\n      this.highlightedElement.constructor.name == 'ConceptMapLink') {\n\n      /*\n       * get the ConceptMapLink object that we are setting the link type\n       * for\n       */\n      var link = this.highlightedElement;\n\n      // get the label, color, and original id\n      var label = selectedLink.label;\n      var color = selectedLink.color;\n      var originalId = selectedLink.id;\n\n      // set the label, color, and original id into the link\n      link.setLabel(label);\n      link.setColor(color);\n      link.setOriginalId(originalId);\n    }\n\n    // make the link not highlighted\n    this.clearHighlightedElement();\n\n    // handle the student data changing\n    this.studentDataChanged();\n  }\n\n  /**\n   * Get the links title\n   * @returns the links title\n   */\n  getLinksTitle() {\n    var linksTitle = '';\n\n    if (this.componentContent != null) {\n      linksTitle = this.componentContent.linksTitle;\n    }\n\n    return linksTitle;\n  }\n\n  /**\n   * Show the link type chooser popup\n   */\n  showLinkTypeChooser() {\n\n    // check if we have initialized the popup\n    if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n      // we have not initialized the popup so we will do so now\n      this.setLinkTypeChooserOverlayStyle();\n      this.initializedDisplayLinkTypeChooserModalOverlay = true;\n    }\n\n    /*\n     * initialize the top left of the link chooser popup to show up on\n     * the top right of the svg element\n     */\n    this.linkTypeChooserStyle['left'] = '600px';\n    this.linkTypeChooserStyle['top'] = '20px';\n\n    this.displayLinkTypeChooser = true;\n  }\n\n  /**\n   * Hide the link type chooser popup\n   */\n  hideLinkTypeChooser() {\n\n    // hide the link type chooser\n    this.displayLinkTypeChooser = false;\n    this.displayLinkTypeChooserModalOverlay = false;\n    this.newlyCreatedLink = null;\n\n    if (!this.$scope.$$phase) {\n      // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n      // and it still seems to work. Do we need this line?\n      // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n      //this.$scope.$apply();\n    }\n  }\n\n  /**\n   * Setup the svg\n   */\n  setupSVG() {\n    // get the svg element in the svg.js world\n    this.draw = SVG(this.svgId);\n    this.draw.width(this.width);\n    this.draw.height(this.height);\n\n    this.highlightedElement = null;\n    this.activeNode = null;\n    this.activeLink = null;\n    this.drawingLink = false;\n    this.newlyCreatedLink = null;\n\n    // set the mouse down listener\n    this.draw.mousedown((event) => {\n      this.svgMouseDown(event);\n    });\n\n    // set the mouse up listener\n    this.draw.mouseup((event) => {\n      this.svgMouseUp(event);\n    });\n\n    // set the mouse move listener\n    this.draw.mousemove((event) => {\n      this.svgMouseMove(event);\n    });\n\n    // get the svg element in the angular world\n    var svg = angular.element('#' + this.svgId);\n\n    /*\n     * check if we have already added the dragover listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDragOverListener) {\n      /*\n       * listen for the dragover event which occurs when the user is\n       * dragging a node onto the svg\n       */\n      svg[0].addEventListener('dragover', (event) => {\n        /*\n         * prevent the default because if we don't, the user won't\n         * be able to drop a new node instance onto the svg in the\n         * authoring mode\n         */\n        event.preventDefault();\n      });\n\n      this.addedDragOverListener = true;\n    }\n\n    /*\n     * check if we have already added the drop listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDropListener) {\n      /*\n       * listen for the drop event which occurs when the student drops\n       * a new node onto the svg\n       */\n      svg[0].addEventListener('drop', (event) => {\n\n        /*\n         * the user has dropped a new node onto the svg to create a\n         * new instance of a node\n         */\n        this.newNodeDropped(event);\n      });\n\n      this.addedDropListener = true;\n    }\n\n    // set the link type chooser style\n    this.setLinkTypeChooserStyle();\n  }\n\n  /**\n   * Set the link type chooser popup style\n   */\n  setLinkTypeChooserStyle() {\n\n    /*\n     * set the link type chooser popup to show up in the upper right of\n     * the svg element\n     */\n    this.linkTypeChooserStyle = {\n      'width': '300px',\n      'position': 'absolute',\n      'left': '600px',\n      'top': '20px',\n      'border': '1px solid black',\n      'backgroundColor': 'white',\n      'cursor': 'pointer',\n      'z-index': 10000,\n      'padding': '16px'\n    }\n  }\n\n  /**\n   * Set the link type chooser popup overlay style\n   */\n  setLinkTypeChooserOverlayStyle() {\n\n    // calculate the modal overlay width and height\n    this.modalWidth = this.getModalWidth();\n    this.modalHeight = this.getModalHeight();\n\n    //var overlayWidth = this.modalWidth + 'px';\n    var overlayWidth = this.modalWidth;\n\n    var conceptMapContainer = angular.element('#' + this.conceptMapContainerId);\n    var width = conceptMapContainer.width();\n    var height = conceptMapContainer.height();\n    var offset = conceptMapContainer.offset();\n\n    var offsetLeft = offset.left;\n    var offsetTop = offset.top;\n    offsetLeft = 0;\n    offsetTop = 0;\n\n    this.linkTypeChooserModalOverlayStyle = {\n      'position': 'absolute',\n      'z-index': 9999,\n      'width': overlayWidth,\n      'height': height,\n      'background-color': '#000000',\n      'opacity': 0.4\n    }\n  }\n\n  /**\n   * Get the width that the modal overlay should be\n   * @returns the width that the modal overlay should be\n   */\n  getModalWidth() {\n\n    var selectNodeBarWidth = null;\n    var svgWidth = null;\n\n    // get the width of the left select node bar\n    var selectNodeBarWidthString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('width');\n\n    // get the width of the svg element\n    var svgWidthString = angular.element(document.getElementById(this.svgId)).css('width');\n\n    if (selectNodeBarWidthString != null && svgWidthString != null) {\n      // get the integer values\n      selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n      svgWidth = parseInt(svgWidthString.replace('px', ''));\n    }\n\n    var overlayWidth = null;\n\n    if (selectNodeBarWidth != null && svgWidth != null) {\n      // calculate the sum of the widths\n      overlayWidth = selectNodeBarWidth + svgWidth;\n    }\n\n    return overlayWidth;\n  }\n\n  /**\n   * Get the height that the modal overlay should be\n   * @returns the height that the modal overlay should be\n   */\n  getModalHeight() {\n\n    var selectNodeBarHeight = null;\n    var svgHeight = null;\n\n    // get the height of the left select node bar\n    var selectNodeBarHeightString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('height');\n\n    // get the height of the svg element\n    var svgHeightString = angular.element(document.getElementById(this.svgId)).css('height');\n\n    if (selectNodeBarHeightString != null && svgHeightString != null) {\n      // get the integer values\n      selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n      svgHeight = parseInt(svgHeightString.replace('px', ''));\n    }\n\n    var overlayHeight = null;\n\n    if (selectNodeBarHeight != null && svgHeight != null) {\n      // get the larger of the two heights\n      overlayHeight = Math.max(selectNodeBarHeight, svgHeight);\n    }\n\n    return overlayHeight;\n  }\n\n  /**\n   * The cancel button on the link type chooser was clicked\n   */\n  cancelLinkTypeChooser() {\n\n    if (this.newlyCreatedLink != null) {\n      /*\n       * the student has just created this link and has not yet chosen\n       * a link type so we will remove the link\n       */\n      this.newlyCreatedLink.remove();\n      this.newlyCreatedLink = null;\n    }\n\n    // hide the link chooser\n    this.hideLinkTypeChooser();\n\n    // make the link not highlighted\n    this.clearHighlightedElement();\n  }\n\n  /**\n   * Called when the mouse iss clicked down on a blank spot in the svg element\n   * @param event the mouse down event\n   */\n  svgMouseDown(event) {\n    if (event.target.tagName == 'svg') {\n      // remove highlighting from any item that was previously highlighted\n      this.clearHighlightedElement();\n    }\n  }\n\n  /**\n   * Called when the mouse is released\n   * @param event the mouse up event\n   */\n  svgMouseUp(event) {\n\n    if (this.activeLink != null && this.activeNode == null) {\n      /*\n       * the student was creating a link but did not connect the link\n       * to a destination node so we will just remove the link\n       */\n      this.activeLink.remove();\n    }\n\n    // we are no longer drawing a link\n    this.drawingLink = false;\n\n    // there is no longer an active link\n    this.activeLink = null;\n\n    // enable node draggin\n    this.enableNodeDragging();\n    this.moveLinkTextToFront();\n    // move the nodes to the front so that they are on top of links\n    this.moveNodesToFront();\n  }\n\n  /**\n   * Called when the mouse is moved\n   * @param event the mouse move event\n   */\n  svgMouseMove(event) {\n\n    if (this.activeLink != null) {\n      /*\n       * there is an active link which means the student has created a\n       * new link and is in the process of choosing the link's destination\n       * node\n       */\n\n      // get the coordinates that the link should be updated to\n      var coordinates = this.getRelativeCoordinatesByEvent(event);\n      var x1 = null;\n      var y1 = null;\n      var x2 = coordinates.x;\n      var y2 = coordinates.y;\n\n      /*\n       * get the location of the center of the connector that the link\n       * originated from\n       */\n      var startX = this.activeLinkStartX;\n      var startY = this.activeLinkStartY;\n\n      /*\n       * get the distance from the start to the current position of the\n       * mouse\n       */\n      var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n\n      /*\n       * check if we have set the curvature yet and that the mouse\n       * is more than 20 pixels away from the start.\n       *\n       * we will determine the curvature of the link based upon how\n       * the user has dragged the mouse in relation to the center\n       * of the connector. if they start drawing the link horizontally\n       * we will create a straight line with no curvature. if they\n       * start drawing the link by moving the mouse up, we will create\n       * a line that curves up. if they start drawing the link by\n       * moving the mouse down, we will create a line that curves down.\n       */\n      if (!this.linkCurvatureSet && distance > 20) {\n\n        /*\n         * get the slope of the line from the start to the location\n         * of the mouse\n         */\n        var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n\n        if (y2 < startY) {\n          // the user has moved the mouse above the connector\n\n          if (slope == null) {\n            /*\n             * the slope is infinite so we will default the\n             * curvature to 0.5\n             */\n            this.activeLink.curvature = 0.5;\n          } else if (slope < 1.0) {\n            // make the link straight\n            this.activeLink.curvature = 0.0;\n          } else {\n            // make the link curved\n            this.activeLink.curvature = 0.5;\n          }\n\n          // make the link curve up\n          this.activeLink.startCurveUp = true;\n          this.activeLink.endCurveUp = true;\n        } else if (y2 > startY) {\n          // the user has moved the mouse below the connector\n\n          if (slope == null) {\n            /*\n             * the slope is infinite so we will default the\n             * curvature to 0.5\n             */\n            this.activeLink.curvature = 0.5;\n          } else if (slope < 1.0) {\n            // make the link straight\n            this.activeLink.curvature = 0.0;\n          } else {\n            // make the link curved\n            this.activeLink.curvature = 0.5;\n          }\n\n          // make the link curve down\n          this.activeLink.startCurveUp = false;\n          this.activeLink.endCurveUp = false;\n        }\n\n        // remember that we have set the curvature\n        this.linkCurvatureSet = true;\n      }\n\n      var isDragging = true;\n\n      // redraw the link with the new coordinates\n      this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n    }\n  }\n\n  /**\n   * Set the active node. This is called when the student places the mouse\n   * over a node. When a node becomes active, we show the delete button and\n   * the border.\n   * @param node the node to make active\n   */\n  setActiveNode(node) {\n    if (node != null) {\n      // show the delete button for the node\n      node.showDeleteButton();\n\n      // show the border for the node\n      node.showBorder();\n\n      // remember the active node\n      this.activeNode = node;\n    }\n  }\n\n  /**\n   * Clear the active node\n   */\n  clearActiveNode() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var tempNode = this.nodes[n];\n\n      if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n        /*\n         * we have found the node and it is not highlighted so we will\n         * hide the delete button and hide the border\n         */\n        tempNode.hideDeleteButton();\n        tempNode.hideBorder();\n      }\n    }\n\n    this.activeNode = null;\n  }\n\n  /**\n   * Get the coordinates of the mouse relative to the svg element\n   * @param event a mouse event\n   * @returns an object containing x and y values\n   */\n  getRelativeCoordinatesByEvent(event) {\n\n    // get the offset of the mouse from its parent\n    var offsetX = event.offsetX;\n    var offsetY = event.offsetY;\n\n    var parentOffsetX = 0;\n    var parentOffsetY = 0;\n\n    // get the user agent so we can determine which browser the user is using\n    var userAgent = navigator.userAgent;\n\n    if (event.target.tagName == 'svg') {\n      // the target is the svg element\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n        var matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n        matrix = event.target.createSVGMatrix();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else {\n        // the user is using some other browser\n        matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName == 'circle') {\n      // the target is a node connector circle or delete circle\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the matrix of the group\n        var matrix = event.target.getCTM();\n\n        // get the bounding box of the circle\n        var bbox = event.target.getBBox();\n\n        /*\n         * get the bounding box of the circle so we can get the\n         * coordinates of the circle within the group\n         */\n        var x = bbox.x;\n        var y = bbox.y;\n\n        // get the absolute coordinates of the circle\n        parentOffsetX = matrix.e + bbox.x;\n        parentOffsetY = matrix.f + bbox.y;\n      }\n    } else if (event.target.tagName == 'rect') {\n      // the target is the rectangle that outlines the image\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the matrix of the group\n        var matrix = event.target.getCTM();\n\n        // get the bounding box of the rect\n        var bbox = event.target.getBBox();\n\n        /*\n         * get the bounding box of the rect so we can get the\n         * coordinates of the rect within the group\n         */\n        var x = bbox.x;\n        var y = bbox.y;\n\n        // get the absolute coordinates of the rect\n        parentOffsetX = matrix.e + x;\n        parentOffsetY = matrix.f + y;\n      }\n    } else if (event.target.tagName == 'image') {\n      // the target is an image\n\n      if (userAgent.indexOf('Chrome') != -1) {\n\n      } else if (userAgent.indexOf('Firefox') != -1) {\n\n        // get the matrix of the group\n        var matrix = event.target.parentElement.getCTM();\n\n        // get the coordinates of the upper left corner of the group\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName == 'path') {\n      /*\n       * the target is the link line. sometimes the mouse can be over the\n       * link if the student is moving the mouse around quickly.\n       */\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the coordinates of the head of the link\n        var x2 = event.target.attributes['x2'];\n        var y2 = event.target.attributes['y2'];\n\n        if (x2 != null && y2 != null) {\n          parentOffsetX = parseInt(x2.value);\n          parentOffsetY = parseInt(y2.value);\n        }\n      }\n    } else {\n      // the target is something else\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        var matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    }\n\n    /*\n     * add the parent offset values to the relative offset values to obtain\n     * the x and y values relative to the upper left corner of the svg\n     */\n    var x = parentOffsetX + offsetX;\n    var y = parentOffsetY + offsetY;\n\n    var returnObject = {}\n    returnObject.x = x;\n    returnObject.y = y;\n\n    return returnObject;\n  }\n\n  /**\n   * Called when the student clicks down on a node in the left node bar\n   * @param $event the mouse down event\n   * @param node the node the student clicked down on\n   */\n  selectNode($event, node) {\n\n    // remember the selected node\n    this.selectedNode = node;\n\n    /*\n     * remember the offset of the mouse relative to the upper left of the\n     * node's image so that we properly calculate the node position when\n     * the student releases the mouse to put the node in the svg\n     */\n    this.tempOffsetX = $event.offsetX;\n    this.tempOffsetY = $event.offsetY;\n  }\n\n  /**\n   * The student has dropped a new node on the svg\n   * @param event the drop event\n   */\n  newNodeDropped(event) {\n\n    // get the selected node\n    var selectedNode = this.selectedNode;\n\n    if (selectedNode != null) {\n      // get the file name\n      var filePath = selectedNode.fileName;\n\n      // get the node name\n      var label = selectedNode.label;\n\n      // get the width and height of the node\n      var width = selectedNode.width;\n      var height = selectedNode.height;\n\n      // get the original authored id\n      var originalId = selectedNode.id;\n\n      // get the coordinates relative to the svg element\n      var coordinates = this.getRelativeCoordinatesByEvent(event);\n\n      // get the position we should drop the node at\n      var x = coordinates.x - this.tempOffsetX;\n      var y = coordinates.y - this.tempOffsetY;\n\n      // get a new ConceptMapNodeId e.g. 'studentNode3'\n      var newConceptMapNodeId = this.getNewConceptMapNodeId();\n\n      // create a ConceptMapNode\n      var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n\n      // add the node to our array of nodes\n      this.addNode(conceptMapNode);\n\n      // set the mouse events on the node\n      this.setNodeMouseEvents(conceptMapNode);\n\n      // make the node highlighted\n      this.setHighlightedElement(conceptMapNode);\n\n      // handle the student data changing\n      this.studentDataChanged();\n    }\n\n    // enable node dragging\n    this.enableNodeDragging();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'studentNode3'\n   */\n  getNewConceptMapNodeId() {\n\n    var nextAvailableNodeIdNumber = 1;\n\n    // array to remember the numbers that have been used in node ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.nodes.length; x++) {\n      var node = this.nodes[x];\n\n      if (node != null) {\n\n        // get the node id\n        var nodeId = node.getId();\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'studentNode' + nextAvailableNodeIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'studentLink3'\n   */\n  getNewConceptMapLinkId() {\n\n    var nextAvailableLinkIdNumber = 1;\n\n    // array to remember the numbers that have been used in link ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.links.length; x++) {\n      var link = this.links[x];\n\n      if (link != null) {\n\n        // get the node id\n        var linkId = link.getId();\n\n        if (linkId != null) {\n\n          // get the number from the link id\n          var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n\n          if (linkIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(linkIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'studentLink' + nextAvailableLinkIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Set the mouse events on a newly created node\n   * @param conceptMapNode the node\n   */\n  setNodeMouseEvents(conceptMapNode) {\n\n    // set the node mouse over event\n    conceptMapNode.setNodeMouseOver((event) => {\n      this.nodeMouseOver(event);\n    });\n\n    // set the node mouse out event\n    conceptMapNode.setNodeMouseOut((event) => {\n      this.nodeMouseOut(event);\n    });\n\n    // set the connector mouse down event\n    conceptMapNode.setConnectorMouseDown((event) => {\n      this.disableNodeDragging();\n      this.connectorMouseDown(event);\n    });\n\n    // set the node mouse down event\n    conceptMapNode.setNodeMouseDown((event) => {\n      this.nodeMouseDown(event);\n    });\n\n    // set the node mouse up event\n    conceptMapNode.setNodeMouseUp((event) => {\n      this.nodeMouseUp(event);\n    });\n\n    // set the delete button mouse down event\n    conceptMapNode.setDeleteButtonMouseDown((event) => {\n      this.nodeDeleteButtonMouseDown(event);\n    });\n\n    // set the delete button mouse over event\n    conceptMapNode.setDeleteButtonMouseOver((event) => {\n      this.nodeDeleteButtonMouseOver(event);\n    });\n\n    // set the delete button mouse out event\n    conceptMapNode.setDeleteButtonMouseOut((event) => {\n      this.nodeDeleteButtonMouseOut(event);\n    });\n\n    // set node drag move event\n    conceptMapNode.setDragMove((event) => {\n      this.nodeDragMove(event);\n    });\n  }\n\n  /**\n   * Set an element to be highlighted. The element can be a node or a link.\n   * @param element a node or link\n   */\n  setHighlightedElement(element) {\n\n    // remove highlighting from any existing element\n    this.clearHighlightedElement();\n\n    // hide the link type chooser\n    this.hideLinkTypeChooser();\n\n    if (element != null) {\n\n      // remember the highlighted element\n      this.highlightedElement = element;\n\n      // set the higlighted value to true for the element\n      element.isHighlighted(true);\n\n      // show the delete button for the element\n      element.showDeleteButton();\n\n      if(element.constructor.name == 'ConceptMapNode') {\n        // the element is a node\n\n        // show the border\n        element.showBorder();\n      } else if (element.constructor.name == 'ConceptMapLink') {\n        // the element is a link\n\n        // show the link type chooser\n        this.showLinkTypeChooser();\n\n        // select the link type that was previously chosen for the link\n        this.selectedLinkType = element.getOriginalId();\n      }\n    }\n  }\n\n  /**\n   * If an element is highlighted, make it no longer highlighted.\n   */\n  clearHighlightedElement() {\n\n    if (this.highlightedElement != null) {\n\n      if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n        // the highlighted element is a node\n\n        // hide the border\n        this.highlightedElement.hideBorder();\n      } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n        // the element is a link\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n      }\n\n      // set the higlighted value to false for the element\n      this.highlightedElement.isHighlighted(false);\n\n      // hide the delete button\n      this.highlightedElement.hideDeleteButton();\n\n      // clear the highlighted element reference\n      this.highlightedElement = null;\n    }\n  }\n\n  /**\n   * Enable node dragging\n   */\n  enableNodeDragging() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get the node group\n        var group = node.getGroup();\n\n        if (group != null) {\n\n          /*\n           * get the bounds that we will allow the node group to\n           * dragged in\n           */\n          var options = {\n            minX: 0,\n            minY: 0,\n            maxX: this.width,\n            maxY: this.height\n          };\n\n          // make the node group draggable\n          group.draggable(options);\n        }\n      }\n    }\n  }\n\n  /**\n   * Disable node dragging. This will be called when the student creates a\n   * link so that they aren't dragging nodes around at the same time as\n   * creating a link.\n   */\n  disableNodeDragging() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get a node group\n        var group = node.getGroup();\n\n        if (group != null) {\n          // make the group not draggable\n          group.draggable(false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Move the link text group to the front\n   */\n  moveLinkTextToFront() {\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var link = this.links[l];\n\n      if (link != null) {\n        // move the link text group to the front\n        link.moveTextGroupToFront();\n      }\n    }\n  }\n\n  /**\n   * Move the nodes to the front so that they show up above links\n   */\n  moveNodesToFront() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get a node group\n        var group = node.getGroup();\n\n        if (group != null) {\n          // move the node group to the front\n          group.front();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a node to our array of nodes\n   * @param node the node to add\n   */\n  addNode(node) {\n    if (node != null) {\n      this.nodes.push(node);\n    }\n  }\n\n  /**\n   * Remove a node from the svg and our array of nodes\n   * @param node the node to remove\n   */\n  removeNode(node) {\n\n    if (node != null) {\n\n      // get the outgoing links from the node\n      var outgoingLinks = node.getOutgoingLinks();\n\n      if (outgoingLinks != null) {\n\n        // get the number of outgoing links\n        var numOutgoingLinks = outgoingLinks.length;\n\n        // loop until we have removed all the outgoing links\n        while (numOutgoingLinks > 0) {\n          // get an outgoing link\n          var outgoingLink = outgoingLinks[0];\n\n          // remove the link from the svg and from our array of links\n          this.removeLink(outgoingLink);\n\n          // decrement the number of outgoing links counter\n          numOutgoingLinks--;\n        }\n      }\n\n      // get the incoming links to the node\n      var incomingLinks = node.getIncomingLinks();\n\n      if (incomingLinks != null) {\n\n        // get the number of incoming links\n        var numIncomingLinks = incomingLinks.length;\n\n        // loop until we have removed all the incoming links\n        while (numIncomingLinks > 0) {\n          // get an incoming link\n          var incomingLink = incomingLinks[0];\n\n          // remove the link from the svg and from our array of links\n          this.removeLink(incomingLink);\n\n          // decrement the number of incoming links counter\n          numIncomingLinks--;\n        }\n      }\n\n      // remove the node from the svg\n      node.remove();\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n\n        if (tempNode == node) {\n          // we have found the node we want to remove\n          this.nodes.splice(n, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all nodes from the svg and our array of nodes\n   */\n  removeAllNodes() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var tempNode = this.nodes[n];\n\n      // remove the node from the svg\n      tempNode.remove();\n    }\n\n    // clear the nodes array\n    this.nodes = [];\n  }\n\n  /**\n   * Get a node by id.\n   * @param id the node id\n   * @returns the node with the given id or null\n   */\n  getNodeById(id) {\n    var node = null;\n\n    if (id != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeId = tempNode.getId();\n\n        if (id == tempNodeId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Get a node by id.\n   * @param groupId the svg group id\n   * @returns the node with the given id or null\n   */\n  getNodeByGroupId(groupId) {\n    var node = null;\n\n    if (groupId != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeGroupId = tempNode.getGroupId();\n\n        if (groupId == tempNodeGroupId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Get a link by id.\n   * @param id the link id\n   * @returns the link with the given id or null\n   */\n  getLinkById(id) {\n    var link = null;\n\n    if (id != null) {\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n        var tempLinkId = tempLink.getId();\n\n        if (groupId == tempLinkId) {\n          // we have found the link we want\n          link = tempLink;\n          break;\n        }\n      }\n    }\n\n    return link;\n  }\n\n  /**\n   * Get a link by group id.\n   * @param groupId the svg group id\n   * @returns the link with the given group id or null\n   */\n  getLinkByGroupId(groupId) {\n    var link = null;\n\n    if (groupId != null) {\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n        var tempLinkGroupId = tempLink.getGroupId();\n\n        if (groupId == tempLinkGroupId) {\n          // we have found the link we want\n          link = tempLink;\n          break;\n        }\n      }\n    }\n\n    return link;\n  }\n\n  /**\n   * Get a node by its connector id.\n   * @param connectorId the svg circle id of the connector\n   * @returns the node with the associated connector or null\n   */\n  getNodeByConnectorId(connectorId) {\n    var node = null;\n\n    if (connectorId != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n\n        // get the connector id\n        var tempConnectorId = tempNode.getConnectorId();\n\n        if (connectorId == tempConnectorId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Remove a node by id. The id of a node is the same as its svg group id.\n   * @param groupId\n   */\n  removeNodeById(groupId) {\n    if (groupId != null) {\n\n      // loop through all the nodse\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeId = tempNode.getId();\n\n        if (groupId == tempNodeId) {\n          // we have found the node we want to remove\n          this.nodes.splice(n, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a link to our array of links\n   * @param link the link to add\n   */\n  addLink(link) {\n    if (link != null) {\n      this.links.push(link);\n    }\n  }\n\n  /**\n   * Remove a link from the svg and our array of links\n   * @param link the link to remove\n   */\n  removeLink(link) {\n\n    if (link != null) {\n\n      // remove the link from the svg\n      link.remove();\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n\n        if (link == tempLink) {\n          // we have found the link we want to remove\n          this.links.splice(l, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all the links from the svg and from our array of links\n   */\n  removeAllLinks() {\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var tempLink = this.links[l];\n\n      // remove the link from the svg\n      tempLink.remove();\n    }\n\n    // clear the links array\n    this.links = [];\n  }\n\n  /**\n   * Called when the mouse moves over a node\n   * @param event the mouse over event\n   */\n  nodeMouseOver(event) {\n\n    // get the node group id\n    var groupId = event.target.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        /*\n         * make the node active so that the border and delete button\n         * shows\n         */\n        this.setActiveNode(node);\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a node\n   * @param event the mouse out event\n   */\n  nodeMouseOut(event) {\n\n    // get the group id of the node\n    var groupId = event.target.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        // make the node inactive by clearing the active node\n        this.clearActiveNode();\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on a node\n   * @param event the mouse down event\n   */\n  nodeMouseDown(event) {\n\n    if (event.target.parentElement != null) {\n\n      // get the group id of the node\n      var groupId = event.target.parentElement.id;\n\n      if (groupId != null) {\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n          // make the node highlighted\n          this.setHighlightedElement(node);\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is released on a node\n   * @param event the mouse up event\n   */\n  nodeMouseUp(event) {\n\n    if (this.drawingLink && this.activeLink != null) {\n      /*\n       * the student is creating a link and has just released the mouse\n       * over a node to connect the destination node of the link\n       */\n\n      // get the group id of the node\n      var groupId = event.target.parentElement.id;\n\n      if (groupId != null) {\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n\n          // get the source node of the link\n          var sourceNode = this.activeLink.sourceNode;\n          var sourceNodeGroupId = sourceNode.getGroupId();\n\n          if (sourceNodeGroupId == groupId) {\n            /*\n             * if the source of the link is the same as the\n             * destination node, we will not connect the link\n             */\n            this.activeLink.remove();\n            this.activeLink = null;\n          } else {\n            /*\n             * the source node is different than the destination\n             * node so we will connect the link\n             */\n\n            // set the destination node of the link\n            this.activeLink.setDestination(node);\n\n            // make the link the active link\n            this.addLink(this.activeLink);\n\n            // highlight the link\n            this.setHighlightedElement(this.activeLink);\n\n            /*\n             * set the link as a newly created link so that if the\n             * student clicks the cancel button, we will remove\n             * the link\n             */\n            this.newlyCreatedLink = this.activeLink;\n\n            // display the modal overlay\n            this.displayLinkTypeChooserModalOverlay = true;\n\n            // handle the student data changing\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n\n    // the link has been connected so we are no longer drawing the link\n    this.drawingLink = false;\n  }\n\n  /**\n   * Called when a link delete button is clicked\n   * @param event the mouse click event\n   * @param link the link to delete\n   */\n  linkDeleteButtonClicked(event, link) {\n\n    if (link != null) {\n\n      // remove the link from our array of links\n      this.removeLink(link);\n\n      // handle the student data changing\n      this.studentDataChanged();\n    }\n\n    // hide the link type chooser\n    this.hideLinkTypeChooser();\n  }\n\n  /**\n   * Called when the mouse is clicked down on a connector. This will start\n   * creating a link.\n   * @param event the mouse down event\n   */\n  connectorMouseDown(event) {\n\n    // set the flag that we are drawing a link\n    this.drawingLink = true;\n\n    // get the connector (the svg circle)\n    var connector = event.target;\n\n    /*\n     * disable node dragging so that the node isn't dragged when the\n     * link head is being dragged\n     */\n    this.disableNodeDragging();\n\n    // get the node\n    var node = this.getNodeByConnectorId(connector.id);\n\n    // get the center of the image\n    var x = node.cx();\n    var y = node.cy();\n\n    // get a new ConceptMapLinkId e.g. 'studentLink3'\n    var newConceptMapLinkId = this.getNewConceptMapLinkId();\n\n    /*\n     * we will not know what the original id is until the student has\n     * selected a link type\n     */\n    var originalId = null;\n\n    // create a link that comes out of the node\n    var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n\n    // set the link mouse events\n    this.setLinkMouseEvents(link);\n\n    // remember the active link\n    this.activeLink = link;\n\n    // flag for determining if we have set the link curvature\n    this.linkCurvatureSet = false;\n\n    // remember the location of the center of the connector\n    this.activeLinkStartX = node.connectorCX();\n    this.activeLinkStartY = node.connectorCY();\n\n    // highlight the link\n    this.setHighlightedElement(link);\n\n    // clear the active node\n    this.clearActiveNode();\n\n    // make the source node the active node\n    this.setActiveNode(node);\n  }\n\n  /**\n   * Set the link mouse events for a link\n   * @param link the ConceptMapLink\n   */\n  setLinkMouseEvents(link) {\n\n    // set the link mouse down listener\n    link.setLinkMouseDown((event) => {\n      this.linkMouseDown(event);\n    });\n\n    // set the link text mouse down listener\n    link.setLinkTextMouseDown((event) => {\n      this.linkTextMouseDown(event);\n    });\n\n    // set the link mouse over listener\n    link.setLinkMouseOver((event) => {\n      this.linkMouseOver(event);\n    });\n\n    // set the link mouse out listener\n    link.setLinkMouseOut((event) => {\n      this.linkMouseOut(event);\n    });\n\n    // set the delete button clicked event for the link\n    link.setDeleteButtonClicked((event) => {\n      this.linkDeleteButtonClicked(event, link);\n    });\n  }\n\n  /**\n   * Called when the mouse is clicked down on a link\n   * @param event the mouse down event\n   */\n  linkMouseDown(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    if (link != null) {\n      // make the link highlighted\n      this.setHighlightedElement(link);\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on a link text\n   * @param event the mouse down event\n   */\n  linkTextMouseDown(event) {\n\n    var linkGroupId = null;\n\n    /*\n     * the link group id is set into the text group in the linkGroupId\n     * variable. the text group hierarchy looks like this\n     * text group > text > tspan\n     * text group > rect\n     */\n    if (event.target.nodeName == 'tspan') {\n      linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n    } else if (event.target.nodeName == 'text') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    } else if (event.target.nodeName == 'rect') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    }\n\n    if (linkGroupId != null) {\n\n      // get the link\n      var link = this.getLinkByGroupId(linkGroupId);\n\n      if (link != null) {\n        // make the link highlighted\n        this.setHighlightedElement(link);\n      }\n    }\n\n  }\n\n  /**\n   * Called when the mouse is over a link\n   * @param event the mouse over event\n   */\n  linkMouseOver(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    if (link != null) {\n      // show the delete button for the link\n      link.showDeleteButton();\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a link\n   * @param event the mouse out event\n   */\n  linkMouseOut(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    // hide the delete button if the link is not the highlighted link\n    if (link != null && link != this.highlightedElement) {\n      link.hideDeleteButton();\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on the delete button of a node\n   * @param event the mouse down event\n   */\n  nodeDeleteButtonMouseDown(event) {\n\n    if (event.target.parentElement != null) {\n\n      // get the group id\n      var groupId = event.target.parentElement.parentElement.id;\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n\n        // remove the node from our array of nodes\n        this.removeNode(node);\n\n        // handle the student data changing\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is over a node delete button\n   * @param event the mouse over event\n   */\n  nodeDeleteButtonMouseOver(event) {\n\n    // get the node group id\n    var groupId = event.target.parentElement.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        /*\n         * make the node active so that the border and delete button\n         * shows\n         */\n        this.setActiveNode(node);\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a node delete button\n   * @param event the mouse over event\n   */\n  nodeDeleteButtonMouseOut(event) {\n\n    // get the group id\n    var groupId = event.target.parentElement.parentElement.id;\n\n    // get the node\n    var node = this.getNodeByGroupId(groupId);\n\n    if (node != null) {\n      // make the node inactive by clearing the active node\n      this.clearActiveNode(node);\n    }\n  }\n\n  /**\n   * Called when the node is dragged\n   * @param event the drag event\n   */\n  nodeDragMove(event) {\n\n    // get the group id\n    var groupId = event.target.id;\n\n    // get the node\n    var node = this.getNodeByGroupId(groupId);\n\n    if (node != null) {\n      // handle the node being dragged\n      node.dragMove(event);\n    }\n\n    // handle the student data changing\n    this.studentDataChanged();\n  }\n\n  /**\n   * Get the group id of an element. All elements of a node or link are\n   * contained in a group. These groups are the children of the main svg\n   * element.\n   * for example a node's image element will be located here\n   * svg > group > image\n   * for example a link's path element will be located here\n   * svg > group > path\n   *\n   * @param element get the group id of this element\n   * @returns the group id\n   */\n  getGroupId(element) {\n\n    var groupId = null;\n    var currentElement = element;\n    var previousId = null;\n\n    // loop until we have reached the svg element\n    while (currentElement != null) {\n\n      if (currentElement.tagName == 'svg') {\n        // base case. we have found the svg element.\n\n        // the group id will be the previous id we saw\n        groupId = previousId;\n\n        // set the current element to null so that the while loop ends\n        currentElement = null;\n      } else {\n        // remember the element id\n        previousId = currentElement.id;\n\n        /*\n         * set the current element to the parent to continue searching\n         * up the hierarchy\n         */\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return groupId;\n  }\n\n  /**\n   * Save the starter concept map\n   */\n  saveStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToSaveTheStarterConceptMap'));\n\n    if (answer) {\n      // get the concept map data\n      var conceptMapData = this.getConceptMapData();\n\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = conceptMapData;\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete the starter concept map\n   */\n  deleteStarterConceptMap() {\n\n    let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheStarterConceptMap'));\n\n    if (answer) {\n      // set the starter concept map data\n      this.authoringComponentContent.starterConceptMap = null;\n\n      // clear the concept map\n      this.clearConceptMap();\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Remove all the links and nodes\n   */\n  clearConceptMap() {\n\n    // remove all the links from the svg and the array of links\n    this.removeAllLinks();\n\n    // remove all the nodes from the svg and the array of nodes\n    this.removeAllNodes();\n  }\n\n  /**\n   * Reset the concept map data. We will clear the concept map data and\n   * if there is starter concept map data we will set it into the concept map.\n   */\n  resetConceptMap() {\n\n    // ask the student if they are sure they want to reset their work\n    var message = this.$translate('conceptMap.areYouSureYouWantToResetYourWork');\n    var answer = confirm(message);\n\n    if (answer) {\n      // the student answered yes to reset their work\n\n      // clear the concept map\n      this.clearConceptMap();\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (this.componentContent.starterConceptMap != null) {\n\n        // get the starter concept map\n        var conceptMapData = this.componentContent.starterConceptMap;\n\n        // populate the starter concept map data into the component\n        this.populateConceptMapData(conceptMapData);\n      }\n    }\n  }\n\n  /**\n   * Show the auto feedback that was generated when the student previously\n   * clicked \"Check Answer\".\n   */\n  showAutoFeedback() {\n\n    // show the auto feedback in a modal dialog\n    this.$mdDialog.show(\n      this.$mdDialog.alert()\n      .parent(angular.element(document.querySelector('#' + this.feedbackContainerId)))\n      .clickOutsideToClose(true)\n      .title(this.$translate('FEEDBACK'))\n      .htmlContent(this.autoFeedbackString)\n      .ariaLabel(this.$translate('FEEDBACK'))\n      .ok(this.$translate('CLOSE'))\n    );\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The authoring view show save button checkbox was clicked\n   */\n  authoringViewShowSaveButtonClicked() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The authoring view show submit button checkbox was clicked\n   */\n  authoringViewShowSubmitButtonClicked() {\n\n    if (!this.authoringComponentContent.showSubmitButton) {\n      /*\n       * we are not showing the submit button to the student so\n       * we will clear the max submit count\n       */\n      this.authoringComponentContent.maxSubmitCount = null;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the node\n   * @param conceptMapNodeId the id of the node in the concept map\n   */\n  chooseNodeImage(conceptMapNodeId) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = conceptMapNodeId;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n\n  /**\n   * Check whether we need to show the snip button\n   * @return whether to show the snip button\n   */\n  showSnipButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Snip the concept map by converting it to an image\n   * @param $event the click event\n   */\n  snip($event) {\n    // get the svg element. this will obtain an array.\n    var svgElement = angular.element('#svg_' + this.nodeId + '_' + this.componentId);\n\n    if (svgElement != null && svgElement.length > 0) {\n      // get the svg element\n      svgElement = svgElement[0];\n\n      // get the svg element as a string\n      var serializer = new XMLSerializer();\n      var svgString = serializer.serializeToString(svgElement);\n\n      // find all the images in the svg and replace them with Base64 images\n      this.ConceptMapService.getHrefToBase64ImageReplacements(svgString).then((images) => {\n\n        /*\n         * Loop through all the image objects. Each object contains\n         * an image href and a Base64 image.\n         */\n        for (var i = 0; i < images.length; i++) {\n\n          // get an image object\n          var imagePair = images[i];\n\n          // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n          var imageHref = imagePair.imageHref;\n\n          // get the Base64 image\n          var base64Image = imagePair.base64Image;\n\n          // create a regex to match the image href\n          var imageRegEx = new RegExp(imageHref, 'g');\n\n          /*\n           * replace all the instances of the image href with the\n           * Base64 image\n           */\n          svgString = svgString.replace(imageRegEx, base64Image);\n        }\n\n        // create a canvas to draw the image on\n        var myCanvas = document.createElement('canvas');\n        var ctx = myCanvas.getContext('2d');\n\n        // create an svg blob\n        var svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n        var domURL = self.URL || self.webkitURL || self;\n        var url = domURL.createObjectURL(svg);\n        var image = new Image();\n\n        /*\n         * set the UtilService in a local variable so we can access it\n         * in the onload callback function\n         */\n        var thisUtilService = this.UtilService;\n\n        // the function that is called after the image is fully loaded\n        image.onload = (event) => {\n\n          // get the image that was loaded\n          var image = event.target;\n\n          // set the dimensions of the canvas\n          myCanvas.width = image.width;\n          myCanvas.height = image.height;\n          ctx.drawImage(image, 0, 0);\n\n          // get the canvas as a Base64 string\n          var base64Image = myCanvas.toDataURL('image/png');\n\n          // get the image object\n          var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image, false);\n\n          // create a notebook item with the image populated into it\n          this.NotebookService.addNote($event, imageObject);\n        };\n\n        // set the src of the image so that the image gets loaded\n        image.src = url;\n      });\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedNodes = [];\n      let mergedLinks = [];\n      let backgroundPath = null;\n      let stretchBackground = null;\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState.componentType == 'ConceptMap') {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            let conceptMapData = studentData.conceptMapData;\n\n            if (conceptMapData != null) {\n              if (conceptMapData.nodes != null) {\n                // add the nodes to our merged nodes\n                mergedNodes = mergedNodes.concat(conceptMapData.nodes);\n              }\n\n              if (conceptMapData.links != null) {\n                // add the links to our merged links\n                mergedLinks = mergedLinks.concat(conceptMapData.links);\n              }\n\n              if (conceptMapData.backgroundPath != null &&\n                  conceptMapData.backgroundPath != '') {\n                backgroundPath = conceptMapData.backgroundPath;\n                stretchBackground = conceptMapData.stretchBackground;\n              }\n            }\n          }\n        } else if (componentState.componentType == 'Draw' ||\n            componentState.componentType == 'Embedded' ||\n            componentState.componentType == 'Graph' ||\n            componentState.componentType == 'Label' ||\n            componentState.componentType == 'Table') {\n          let connectedComponent =\n              this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n          if (connectedComponent.importWorkAsBackground === true) {\n            this.setComponentStateAsBackgroundImage(componentState);\n          }\n        }\n      }\n\n      if (this.componentContent.background != null &&\n          this.componentContent.background != '') {\n        // use the background from this component\n        backgroundPath = this.componentContent.background;\n        if (this.componentContent.stretchBackground) {\n          stretchBackground = this.componentContent.stretchBackground;\n        }\n      }\n\n      // set the merged nodes and links into the merged component state\n      mergedComponentState.studentData = {};\n      mergedComponentState.studentData.conceptMapData = {};\n      mergedComponentState.studentData.conceptMapData.nodes = mergedNodes;\n      mergedComponentState.studentData.conceptMapData.links = mergedLinks;\n      mergedComponentState.studentData.conceptMapData.backgroundPath = backgroundPath;\n      if (stretchBackground != null) {\n        mergedComponentState.studentData.conceptMapData.stretchBackground = stretchBackground;\n      }\n    }\n\n    /*\n     * inject the asset path so that the file name is changed to\n     * a relative path\n     * e.g.\n     * \"Sun.png\"\n     * will be changed to\n     * \"/wise/curriculum/108/assets/Sun.png\"\n     */\n    mergedComponentState = this.ProjectService.injectAssetPaths(mergedComponentState);\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'Draw' ||\n        componentType == 'Embedded' ||\n        componentType == 'Graph' ||\n        componentType == 'Label' ||\n        componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the background image on the svg canvas\n   * @param backgroundPath the absolute path to the background image\n   * @param stretchBackground whether to stretch the background to cover the\n   * whole svg background\n   */\n  setBackgroundImage(backgroundPath, stretchBackground) {\n    this.background = backgroundPath;\n    this.stretchBackground = stretchBackground;\n\n    if (stretchBackground) {\n      // stretch the background to fit the whole svg element\n      this.backgroundSize = '100% 100%';\n    } else {\n      // use the original dimensions of the background image\n      this.backgroundSize = '';\n    }\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n};\n\nConceptMapController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapController;\n"]}