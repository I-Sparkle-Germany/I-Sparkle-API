{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","ProjectService","StudentAssetService","StudentDataService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","shouldOptions","value","label","autoFeedbackString","submitCounter","setupSVG","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterConceptMap","conceptMapData","populateConceptMapData","setStudentWork","maxSubmitCount","score","data","maxAutoScore","comment","enableNodeDragging","calculateDisabled","registerComponentController","conceptMapController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","angular","studentWork","$emit","isAutoSave","clientSaveTime","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","studentData","processLatestSubmit","n","length","node","instanceId","originalId","filePath","fileName","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","maxScore","showAutoFeedback","feedback","show","parent","element","document","querySelector","clickOutsideToClose","title","htmlContent","ariaLabel","ok","isLockAfterSubmit","getComponentId","createNewComponentState","response","getStudentResponse","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","parseFloat","autoGrader","scoreAnnotation","createAutoScoreAnnotation","push","commentAnnotation","createAutoCommentAnnotation","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","linkJSON","background","substring","lastIndexOf","backgroundPath","stretchBackground","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","template","fullscreen","escapeToClose","makeCRaterRequest","concepts","autoScoreAnnotationData","getMaxScoreForComponent","autoScoreAnnotation","autoComment","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","hide","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","index","nodeFileName","nodeLabel","linkLabel","authoringGetNewConceptMapNodeId","newNode","authoringGetNewConceptMapLinkId","newLink","nextAvailableNodeIdNumber","usedNumbers","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","ruleName","categoryName","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","setColor","setOriginalId","hideLinkTypeChooser","linksTitle","setLinkTypeChooserOverlayStyle","leftNumber","topNumber","left","top","conceptMapContainer","offset","offsetLeft","offsetTop","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg1","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","backgroundSize","boundingClientRect","getBoundingClientRect","getModalWidth","getModalHeight","overlayWidth","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svg1Width","selectNodeBarWidthString","getElementById","css","svg1WidthString","selectNodeBarHeight","svg1Height","selectNodeBarHeightString","svg1HeightString","overlayHeight","remove","target","tagName","clearHighlightedElement","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","getId","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","clearConceptMap","removeAllLinks","removeAllNodes","component","componentHasWork","importPreviousWork","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n        \n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n        \n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n        \n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n        \n        // the available nodes the students can choose\n        this.availableNodes = [];\n        \n        // the available links the students can choose\n        this.availableLinks = [];\n        \n        // the node instances the students create\n        this.nodes = [];\n        \n        // the link instances the students create\n        this.links = [];\n        \n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n        \n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n        \n        // the selected link type\n        this.selectedLinkType = null;\n        \n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n        \n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n        \n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n        \n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node \n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        // the options for authoring the should or should not value in rules\n        this.shouldOptions = [\n            {\n                value: false, label: 'should'\n            },\n            {\n                value: true, label: 'should not'\n            }\n        ];\n        \n        // the auto feedback string\n        this.autoFeedbackString = '';\n        \n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n        \n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n            \n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n            \n            // setup the svg\n            this.setupSVG();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.setupSVG();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n                \n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n                \n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n                \n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterConceptMap != null) {\n                    /*\n                     * the student has not done any work and there is a starter \n                     * concept map so we will populate the concept map with\n                     * the starter\n                     */\n                    \n                    // get the starter concept map\n                    var conceptMapData = this.componentContent.starterConceptMap;\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n            } else {\n                // the student has work for this component\n                \n                /*\n                 * inject the asset path so that the file name is changed to\n                 * a relative path\n                 * e.g.\n                 * \"Sun.png\"\n                 * will be changed to\n                 * \"/wise/curriculum/108/assets/Sun.png\"\n                 */\n                componentState = this.ProjectService.injectAssetPaths(componentState);\n                \n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n            \n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we \n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n            \n            // populate the previous feedback\n            if (this.latestAnnotations != null) {\n                \n                var autoFeedbackString = \"\";\n                \n                // obtain the previous score annotation if any\n                if (this.latestAnnotations.score != null) {\n                    \n                    // get the annotation data\n                    var data = this.latestAnnotations.score.data;\n                    \n                    if (data != null) {\n                        \n                        // get the score and max auto score\n                        var score = data.value;\n                        var maxAutoScore = data.maxAutoScore;\n                        \n                        autoFeedbackString += \"Score: \" + score;\n                        \n                        if (maxAutoScore != null && maxAutoScore != '') {\n                            // show the max score as the denominator\n                            autoFeedbackString += \"/\" + maxAutoScore;\n                        }\n                    }\n                }\n                \n                // obtain the previous comment annotation if any\n                if (this.latestAnnotations.comment != null) {\n                    \n                    // get the annotation data\n                    var data = this.latestAnnotations.comment.data;\n                    \n                    if (data != null) {\n                        if (autoFeedbackString != \"\") {\n                            // add a new line if the result string is not empty\n                            autoFeedbackString += \"<br/>\";\n                        }\n                        \n                        // get the comment\n                        var comment = data.value;\n                        autoFeedbackString += \"Feedback: \" + comment;\n                    }\n                }\n                \n                /*\n                 * set the previous auto feedback into the field that is used\n                 * to display the auto feedback to the student when they click\n                 * on the show feedback button\n                 */\n                this.autoFeedbackString = autoFeedbackString;\n            }\n            \n            // make the nodes draggable\n            this.enableNodeDragging();\n                        \n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            \n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n        \n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            \n            if (args != null ) {\n                \n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n                \n                if (annotation != null) {\n                    \n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n                    \n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId && \n                        this.componentId === annotationComponentId) {\n                        \n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n                \n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                if (conceptMapData != null) {\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n    \n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n        \n        if (conceptMapData != null) {\n            \n            // clear the existing nodes in the student view\n            this.nodes = [];\n            \n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n                    \n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n                    \n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n                    \n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n            \n            // clear the existing links in the student view\n            this.links = [];\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    \n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n                    \n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n                    \n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n                    \n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n                    \n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n                    \n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n            \n            /*\n             * move the link text group to the front so that they are on top\n             * of links\n             */\n            this.moveLinkTextToFront();\n            \n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n            \n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n    \n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n        \n        if (this.nodes != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var node = this.nodes[n];\n                \n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n                    \n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n        \n        if (this.links != null) {\n            \n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n                \n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n                    \n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        \n        var performSubmit = true;\n        \n        if (this.componentContent.maxSubmitCount != null) {\n            // there is a max submit count\n            \n            // calculate the number of submits this student has left\n            var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n            \n            var message = '';\n            \n            if (numberOfSubmitsLeft <= 0) {\n                \n                // the student does not have any more chances to submit\n                alert('You do not have any more chances to receive feedback on your answer.');\n                performSubmit = false;\n            } else if (numberOfSubmitsLeft == 1) {\n                \n                // ask the student if they are sure they want to submit\n                message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                performSubmit = confirm(message);\n            } else if (numberOfSubmitsLeft > 1) {\n                \n                // ask the student if they are sure they want to submit\n                message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                performSubmit = confirm(message);\n            }\n        }\n        \n        if (performSubmit) {\n            // increment the submit counter\n            this.submitCounter++;\n            \n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their submits so we will\n                 * disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n            \n            // get the custom rule evaluator code that was authored\n            var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n            \n            // get the component content\n            var componentContent = this.componentContent;\n            \n            // get the student concept map\n            var conceptMapData = this.getConceptMapData();\n            \n            var thisConceptMapService = this.ConceptMapService;\n            \n            // the result will be stored in this variable\n            var thisResult = {};\n            \n            /*\n             * create the any function that can be called in the custom rule \n             * evaluator code. the arguments to the any function are rule names.\n             * for example if we are looking for any of the links below \n             * Sun (Infrared Radiation) Space\n             * Sun (Heat) Space\n             * Sun (Solar Radiation) Space\n             * we will call the any function like this\n             * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n             * these dynamic arguments will be placed in the arguments variable\n             */\n            var any = function() {\n                return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n            };\n\n            /*\n             * create the all function that can be called in the custom rule \n             * evaluator code. the arguments to the all function are rule names.\n             * for example if we are looking for all of the links below\n             * Sun (Infrared Radiation) Space\n             * Sun (Heat) Space\n             * Sun (Solar Radiation) Space\n             * we will call the any function like this\n             * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n             * these dynamic arguments will be placed in the arguments variable\n             */\n            var all = function() {\n                return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n            }\n            \n            /*\n             * create the setResult function that can be called in the custom rule \n             * evaluator code\n             */\n            var setResult = function(result) {\n                thisResult = result;\n            }\n            \n            // run the custom rule evaluator\n            eval(customRuleEvaluator);\n            \n            // remember the auto feedback result\n            this.autoFeedbackResult = thisResult;\n            \n            var resultString = \"\";\n            \n            if (this.componentContent.showAutoScore && thisResult.score != null) {\n                // display the score\n                resultString += \"Score: \" + thisResult.score;\n                \n                if (this.componentContent.maxScore != null && this.componentContent.maxScore != '') {\n                    // show the max score as the denominator\n                    resultString += \"/\" + this.componentContent.maxScore;\n                }\n            }\n            \n            if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n                if (resultString != \"\") {\n                    // add a new line if the result string is not empty\n                    resultString += \"<br/>\";\n                }\n                \n                // display the feedback\n                resultString += \"Feedback: \" + thisResult.feedback;\n            }\n            \n            if (resultString != \"\") {\n                // show the auto feedback in a modal dialog\n                this.$mdDialog.show(\n                    this.$mdDialog.alert()\n                    .parent(angular.element(document.querySelector('#feedbackDiv')))\n                    .clickOutsideToClose(true)\n                    .title('Feedback')\n                    .htmlContent(resultString)\n                    .ariaLabel('Feedback')\n                    .ok('Close')\n                );\n            }\n            \n            // remember the feedback string\n            this.autoFeedbackString = resultString;\n            \n            this.isSubmit = true;\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n        \n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n        \n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n            \n            if (this.autoFeedbackResult != null) {\n                // there is auto feedback\n                \n                if (this.autoFeedbackResult.score != null || this.autoFeedbackResult.feedback != null) {\n                    // there is an auto score or auto feedback\n                    \n                    // get the values used to create an annotation\n                    var runId = this.ConfigService.getRunId();\n                    var periodId = this.ConfigService.getPeriodId();\n                    var nodeId = this.nodeId;\n                    var componentId = this.componentId;\n                    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n                    \n                    // create an array of annotations to be saved with the component state\n                    componentState.annotations = [];\n                    \n                    if (this.autoFeedbackResult.score != null) {\n                        // there is an auto score\n                        \n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = parseFloat(this.autoFeedbackResult.score);\n                        data.autoGrader = 'conceptMap';\n                        \n                        if (this.componentContent.maxScore != null) {\n                            data.maxAutoScore = parseFloat(this.componentContent.maxScore);\n                        }\n                        \n                        // create the auto score annotation\n                        var scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n                        \n                        // add the annotation to the component state\n                        componentState.annotations.push(scoreAnnotation);\n                    }\n                    \n                    if (this.autoFeedbackResult.feedback != null) {\n                        // there is auto feedback\n                        \n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = this.autoFeedbackResult.feedback;\n                        data.autoGrader = 'conceptMap';\n                        \n                        // create the auto score annotation\n                        var commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n                        \n                        // add the annotation to the component state\n                        componentState.annotations.push(commentAnnotation);\n                    }\n                }\n            }\n        }\n        \n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n        \n        // set the student data into the component state\n        componentState.studentData = studentData;\n        \n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n        \n        return deferred.promise;\n    };\n    \n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n            \n            studentData.nodes.push(nodeJSON);\n        }\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n            \n            studentData.links.push(linkJSON);\n        }\n        \n        // set the background data into the student data\n        if (this.componentContent.background != null) {\n            var background = this.componentContent.background;\n            \n            // this is the background file name e.g. background.png\n            studentData.background = background.substring(background.lastIndexOf('/') + 1);\n            \n            // this is the background path e.g. /wise/curriculum/108/assets/background.png\n            studentData.backgroundPath = background;\n            \n            // whether to stretch the background to fill the svg element\n            studentData.stretchBackground = this.componentContent.stretchBackground;\n        }\n        \n        return studentData;\n    }\n    \n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        \n        var performCRaterScoring = false;\n        \n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n            \n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n            \n            /*\n             * display a dialog message while the student waits for their work \n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n            \n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n                \n                if (result != null) {\n                    \n                    // get the CRater response\n                    var data = result.data;\n                    \n                    if (data != null) {\n                        \n                        /*\n                         * annotations we put in the component state will be \n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n                        \n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n                        \n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n                            \n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n                            \n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            \n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n                                \n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n                \n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since \n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n                \n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                \n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                \n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n                        \n                        /*\n                         * inject the asset paths so that the node file names change from\n                         * 'Sun.png' to '/wise/curriculum/129/assets/Sun.png'\n                         */\n                        populatedComponentState = this.ProjectService.injectAssetPaths(populatedComponentState);\n                        \n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n    \n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node up button was clicked in the authoring tool so we will move the \n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n        \n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n            \n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n            \n            if (nodes != null) {\n                \n                // get the node at the given index\n                var node = nodes[index];\n                \n                // remove the node\n                nodes.splice(index, 1);\n                \n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // check if the node is at the bottom\n        if (nodes != null && index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            // get the node at the given index\n            var node = nodes[index];\n            \n            // remove the node\n            nodes.splice(index, 1);\n            \n            // insert the node back in one index ahead\n            nodes.splice(index + 1, 0, node);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        if (nodes != null) {\n            \n            // get the node\n            var node = nodes[index];\n            \n            if (node != null) {\n                \n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n                \n                // confirm with the author that they really want to delete the node\n                var answer = confirm('Are you sure you want to delete this node?\\n\\nFile Name: ' + nodeFileName + '\\nLabel: ' + nodeLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link up button was clicked in the authoring tool so we will move the \n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n        \n        // check if the link is at the top\n        if (index != 0) {\n            \n            // get the links\n            var links = this.authoringComponentContent.links;\n            \n            if (links != null) {\n                \n                // get a link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link down button was clicked in the authoring tool so we will move the \n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // check if the link is at the bottom\n        if (links != null && index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            if (links != null) {\n                \n                // get the link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        if (links != null) {\n            \n            // get a link\n            var link = links[index];\n            \n            if (link != null) {\n                \n                // get the link label\n                var linkLabel = link.label;\n                \n                // confirm with the author that they really want to delete the link\n                var answer = confirm('Are you sure you want to delete this link?\\n\\nLabel: ' + linkLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n        \n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n        \n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // add the new node\n        nodes.push(newNode);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n        \n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n        \n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // add the new link\n        links.push(newLink);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'node' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var nodeId = link.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'link' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * A \"with link\" checkbox was checked\n     * @param ruleIndex the index of the rule\n     */\n    authoringRuleLinkCheckboxClicked(ruleIndex) {\n        \n        // get the rule that was checked\n        var rule = this.authoringComponentContent.rules[ruleIndex];\n        \n        if (rule != null) {\n            if (rule.type == 'node') {\n                /* \n                 * the rule has been set to 'node' instead of 'link' so we\n                 * will remove the link label and other node label\n                 */\n                \n                delete rule.linkLabel;\n                delete rule.otherNodeLabel;\n            }\n        }\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a new rule\n     */\n    authoringAddRule() {\n        \n        // create the new rule\n        var newRule = {};\n        newRule.name = \"\";\n        newRule.type = \"node\";\n        newRule.categories = [];\n        newRule.nodeLabel = \"\";\n        newRule.comparison = \"exactly\";\n        newRule.number = 1;\n        newRule.not = false;\n        \n        // add the rule to the array of rules\n        this.authoringComponentContent.rules.push(newRule);\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Move a rule up\n     * @param index the index of the rule\n     */\n    authoringViewRuleUpButtonClicked(index) {\n        \n        // check if the rule is at the top\n        if (index != 0) {\n            // the rule is not at the top so we can move it up\n            \n            // get the rules\n            var rules = this.authoringComponentContent.rules;\n            \n            if (rules != null) {\n                \n                // get the rule at the given index\n                var rule = rules[index];\n                \n                // remove the rule\n                rules.splice(index, 1);\n                \n                // insert the rule back in one index back\n                rules.splice(index - 1, 0, rule);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Move a rule down\n     * @param index the index of the rule\n     */\n    authoringViewRuleDownButtonClicked(index) {\n        \n        // get the rules\n        var rules = this.authoringComponentContent.rules;\n        \n        // check if the rule is at the bottom\n        if (rules != null && index != rules.length - 1) {\n            // the rule is not at the bottom so we can move it down\n            \n            // get the rule at the given index\n            var rule = rules[index];\n            \n            // remove the rule\n            rules.splice(index, 1);\n            \n            // insert the rule back in one index ahead\n            rules.splice(index + 1, 0, rule);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /*\n     * Delete a rule\n     * @param index the index of the rule to delete\n     */\n    authoringViewRuleDeleteButtonClicked(index) {\n        \n        // get the rule\n        var rule = this.authoringComponentContent.rules[index];\n        \n        if (rule != null) {\n            \n            // get the rule name\n            var ruleName = rule.name;\n            \n            // confirm with the author that they really want to delete the rule\n            var answer = confirm('Are you sure you want to delete this rule?\\n\\nRule Name: ' + ruleName);\n            \n            if (answer) {\n                // remove the rule at the given index\n                this.authoringComponentContent.rules.splice(index, 1);\n                \n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Add a category to a rule\n     * @param rule the rule\n     */\n    authoringViewAddCategoryClicked(rule) {\n        \n        if (rule != null) {\n            // add an empty category name\n            rule.categories.push(\"\");\n        }\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete a category from a rule\n     * @param rule delete a category from this rule\n     * @param index the index of the category\n     */\n    authoringViewDeleteCategoryClicked(rule, index) {\n        \n        if (rule != null) {\n            \n            // get the rule name\n            var ruleName = rule.name;\n            \n            // get the category name\n            var categoryName = rule.categories[index];\n            \n            // confirm with the author that they really want to delete the category from the rule\n            var answer = confirm('Are you sure you want to delete the category from this rule?\\n\\nRule Name: ' + ruleName + '\\nCategory Name: ' + categoryName);\n            \n            if (answer) {\n                // remove the category at the index\n                rule.categories.splice(index, 1);\n                \n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n        \n        if (this.highlightedElement != null && \n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n            \n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n            \n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n            \n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n        \n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n        \n        return linksTitle;\n    }\n    \n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n        \n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n        \n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        var left = leftNumber + 'px';\n        var top = topNumber + 'px';\n\n        if (this.mode === 'authoring') {\n            /*\n             * if we are in authoring mode we need to include the offset of\n             * the container for some reason.\n             * TODO: figure out why the offset is required in authoring mode\n             * but not in student mode.\n             */\n\n            // get the concept map container\n            var conceptMapContainer = angular.element('#conceptMapContainer');\n\n            // get the offset of the container relative to the whole page\n            var offset = conceptMapContainer.offset();\n\n            // get the left and top of the offset\n            var offsetLeft = offset.left;\n            var offsetTop = offset.top;\n\n            // add the offset to the left and top values\n            left = leftNumber + offsetLeft + 'px';\n            top = topNumber + offsetTop + 'px';\n        }\n\n        this.linkTypeChooserStyle['top'] = top;\n        this.linkTypeChooserStyle['left'] = left;\n        \n        this.displayLinkTypeChooser = true;\n    }\n    \n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n        \n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        \n        if (!this.$scope.$$phase) {\n            // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n            // and it still seems to work. Do we need this line?\n            // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n            //this.$scope.$apply();\n        }\n    }\n    \n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg1 element in the svg.js world\n        this.draw = SVG('svg1');\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n        \n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n        \n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n        \n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n        \n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg1 element in the angular world\n        var svg1 = angular.element('#svg1');\n        \n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg1[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n            \n            this.addedDragOverListener = true;\n        }\n        \n        /*\n         * check if we have already added the drop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg1[0].addEventListener('drop', (event) => {\n                \n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n            \n            this.addedDropListener = true;\n        }\n        \n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n        \n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n            \n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n        \n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        // get the bounding rectangle of the svg element\n        var boundingClientRect = angular.element('#svg1')[0].getBoundingClientRect();\n        var offsetLeft = boundingClientRect.left;\n        var offsetTop = boundingClientRect.top;\n        \n        // add the values together to obtain the absolute left and top positions\n        var left = leftNumber + offsetLeft + 'px';\n        var top = topNumber + offsetTop + 'px';\n        \n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'top': top,\n            'left': left,\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n        \n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n        \n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n        \n        var conceptMapContainer = angular.element('#conceptMapContainer');\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n        \n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n        \n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n        \n        var selectNodeBarWidth = null;\n        var svg1Width = null;\n        \n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n        \n        // get the width of the svg element\n        var svg1WidthString = angular.element(document.getElementById('svg1')).css('width');\n        \n        if (selectNodeBarWidthString != null && svg1WidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svg1Width = parseInt(svg1WidthString.replace('px', ''));\n        }\n        \n        var overlayWidth = null;\n        \n        if (selectNodeBarWidth != null && svg1Width != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svg1Width;\n        }\n        \n        return overlayWidth;\n    }\n    \n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n        \n        var selectNodeBarHeight = null;\n        var svg1Height = null;\n        \n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n        \n        // get the height of the svg element\n        var svg1HeightString = angular.element(document.getElementById('svg1')).css('height');\n        \n        if (selectNodeBarHeightString != null && svg1HeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svg1Height = parseInt(svg1HeightString.replace('px', ''));\n        }\n        \n        var overlayHeight = null;\n        \n        if (selectNodeBarHeight != null && svg1Height != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svg1Height);\n        }\n        \n        return overlayHeight;\n    }\n    \n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n        \n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n        \n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n    \n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n        \n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n        \n        // we are no longer drawing a link\n        this.drawingLink = false;\n        \n        // there is no longer an active link\n        this.activeLink = null;\n        \n        // enable node draggin\n        this.enableNodeDragging();\n        this.moveLinkTextToFront();\n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n    \n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n        \n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n            \n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n            \n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n            \n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n            \n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center \n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by \n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n                \n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n                \n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n                \n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n            \n            var isDragging = true;\n            \n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n    \n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n            \n            // show the border for the node\n            node.showBorder();\n            \n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n    \n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n        \n        this.activeNode = null;\n    }\n    \n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n        \n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n        \n        var parentOffsetX = 0;\n        var parentOffsetY = 0;\n        \n        // get the user agent so we can determine which browser the user is using\n        var userAgent = navigator.userAgent;\n        \n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                matrix = event.target.createSVGMatrix();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else {\n                // the user is using some other browser\n                matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'circle') {\n            // the target is a node connector circle or delete circle\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n                \n                // get the bounding box of the circle\n                var bbox = event.target.getBBox();\n                \n                /*\n                 * get the bounding box of the circle so we can get the\n                 * coordinates of the circle within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n                \n                // get the absolute coordinates of the circle\n                parentOffsetX = matrix.e + bbox.x;\n                parentOffsetY = matrix.f + bbox.y;\n            }\n        } else if (event.target.tagName == 'rect') {\n            // the target is the rectangle that outlines the image\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n                \n                // get the bounding box of the rect\n                var bbox = event.target.getBBox();\n                \n                /*\n                 * get the bounding box of the rect so we can get the\n                 * coordinates of the rect within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n                \n                // get the absolute coordinates of the rect\n                parentOffsetX = matrix.e + x;\n                parentOffsetY = matrix.f + y;\n            }\n        } else if (event.target.tagName == 'image') {\n            // the target is an image\n            \n            if (userAgent.indexOf('Chrome') != -1) {\n                \n            } else if (userAgent.indexOf('Firefox') != -1) {\n                \n                // get the matrix of the group\n                var matrix = event.target.parentElement.getCTM();\n                \n                // get the coordinates of the upper left corner of the group\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'path') {\n            /*\n             * the target is the link line. sometimes the mouse can be over the\n             * link if the student is moving the mouse around quickly.\n             */\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the coordinates of the head of the link\n                var x2 = event.target.attributes['x2'];\n                var y2 = event.target.attributes['y2'];\n                \n                if (x2 != null && y2 != null) {\n                    parentOffsetX = parseInt(x2.value);\n                    parentOffsetY = parseInt(y2.value);\n                }\n            }\n        } else {\n            // the target is something else\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        }\n        \n        /*\n         * add the parent offset values to the relative offset values to obtain \n         * the x and y values relative to the upper left corner of the svg\n         */\n        var x = parentOffsetX + offsetX;\n        var y = parentOffsetY + offsetY;\n        \n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n        \n        return returnObject;\n    }\n    \n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n        \n        // remember the selected node\n        this.selectedNode = node;\n        \n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n    \n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n        \n        // get the selected node\n        var selectedNode = this.selectedNode;\n        \n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n            \n            // get the node name\n            var label = selectedNode.label;\n            \n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n            \n            // get the original authored id\n            var originalId = selectedNode.id;\n            \n            // get the coordinates relative to the svg element\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            \n            // get the position we should drop the node at\n            var x = coordinates.x - this.tempOffsetX;\n            var y = coordinates.y - this.tempOffsetY;\n            \n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n            \n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n            \n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n            \n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n            \n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // enable node dragging\n        this.enableNodeDragging();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.getId();\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var linkId = link.getId();\n                \n                if (linkId != null) {\n                    \n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n                    \n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n        \n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n        \n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n        \n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n        \n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n        \n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n        \n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n        \n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n        \n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n        \n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n    \n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n        \n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n        \n        if (element != null) {\n            \n            // remember the highlighted element\n            this.highlightedElement = element;\n            \n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n            \n            // show the delete button for the element\n            element.showDeleteButton();\n            \n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n                \n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // show the link type chooser\n                this.showLinkTypeChooser();\n                \n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n    \n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n        \n        if (this.highlightedElement != null) {\n            \n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n                \n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n            \n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n            \n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n            \n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n    \n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get the node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    \n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n                    \n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as \n     * creating a link.\n     */\n    disableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Move the link text group to the front\n     */\n    moveLinkTextToFront() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            if (link != null) {\n                // move the link text group to the front\n                link.moveTextGroupToFront();\n            }\n        }\n    }\n    \n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n    \n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n        \n        if (node != null) {\n            \n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n            \n            if (outgoingLinks != null) {\n                \n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n                \n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n                    \n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n            \n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n            \n            if (incomingLinks != null) {\n                \n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n                \n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n                    \n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n            \n            // remove the node from the svg\n            node.remove();\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            // remove the node from the svg\n            tempNode.remove();\n        }\n        \n        // clear the nodes array\n        this.nodes = [];\n    }\n    \n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n        \n        if (id != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n                \n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n        \n        if (id != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n                \n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n                \n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n        \n        if (connectorId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n                \n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId \n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n            \n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n    \n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n        \n        if (link != null) {\n            \n            // remove the link from the svg\n            link.remove();\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                \n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n            \n            // remove the link from the svg\n            tempLink.remove();\n        }\n        \n        // clear the links array\n        this.links = [];\n    }\n    \n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n        \n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n        \n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    \n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n                    \n                    if (sourceNodeGroupId == groupId) {\n                        /* \n                         * if the source of the link is the same as the \n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n                        \n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n                        \n                        // make the link the active link\n                        this.addLink(this.activeLink);\n                        \n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n                        \n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n                        \n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n                        \n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n        \n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n    \n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n        \n        if (link != null) {\n            \n            // remove the link from our array of links\n            this.removeLink(link);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n        \n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n        \n        // get the connector (the svg circle)\n        var connector = event.target;\n        \n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n        \n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n        \n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n        \n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n        \n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n        \n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n        \n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n        \n        // remember the active link\n        this.activeLink = link;\n        \n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n        \n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n        \n        // highlight the link\n        this.setHighlightedElement(link);\n        \n        // clear the active node\n        this.clearActiveNode();\n        \n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n    \n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n        \n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n        \n        // set the link text mouse down listener\n        link.setLinkTextMouseDown((event) => {\n            this.linkTextMouseDown(event);\n        });\n        \n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n        \n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n        \n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link text\n     * @param event the mouse down event\n     */\n    linkTextMouseDown(event) {\n        \n        var linkGroupId = null;\n        \n        /*\n         * the link group id is set into the text group in the linkGroupId\n         * variable. the text group hierarchy looks like this\n         * text group > text > tspan\n         * text group > rect\n         */\n        if (event.target.nodeName == 'tspan') {\n            linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'text') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'rect') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        }\n            \n        if (linkGroupId != null) {\n            \n            // get the link\n            var link = this.getLinkByGroupId(linkGroupId);\n            \n            if (link != null) {\n                // make the link highlighted\n                this.setHighlightedElement(link);\n            }\n        }\n        \n    }\n    \n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                \n                // remove the node from our array of nodes\n                this.removeNode(node);\n                \n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n        \n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n    \n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n        \n        // get the group id\n        var groupId = event.target.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n        \n        // handle the student data changing\n        this.studentDataChanged();\n    }\n    \n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     * \n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n        \n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n        \n        // loop until we have reached the svg element\n        while (currentElement != null) {\n            \n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n                \n                // the group id will be the previous id we saw\n                groupId = previousId;\n                \n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n                \n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n        \n        // get the concept map data\n        var conceptMapData = this.getConceptMapData();\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = conceptMapData;\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = null;\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n        \n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n        \n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n    \n    /**\n     * Reset the concept map data. We will clear the concept map data and\n     * if there is starter concept map data we will set it into the concept map.\n     */\n    resetConceptMap() {\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        if (this.componentContent.starterConceptMap != null) {\n            \n            // get the starter concept map\n            var conceptMapData = this.componentContent.starterConceptMap;\n            \n            // populate the starter concept map data into the component\n            this.populateConceptMapData(conceptMapData);\n        }\n    }\n    \n    /**\n     * Show the auto feedback that was generated when the student previously\n     * clicked \"Check Answer\".\n     */\n    showAutoFeedback() {\n        \n        // show the auto feedback in a modal dialog\n        this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .parent(angular.element(document.querySelector('#feedbackDiv')))\n            .clickOutsideToClose(true)\n            .title('Feedback')\n            .htmlContent(this.autoFeedbackString)\n            .ariaLabel('Feedback')\n            .ok('Close')\n        );\n    }\n    \n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work \n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The authoring view show save button checkbox was clicked\n     */\n    authoringViewShowSaveButtonClicked() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The authoring view show submit button checkbox was clicked\n     */\n    authoringViewShowSubmitButtonClicked() {\n        \n        if (!this.authoringComponentContent.showSubmitButton) {\n            /*\n             * we are not showing the submit button to the student so\n             * we will clear the max submit count\n             */\n            this.authoringComponentContent.maxSubmitCount = null;\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nConceptMapController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default ConceptMapController;\n"]}