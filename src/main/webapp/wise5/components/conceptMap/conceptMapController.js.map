{"version":3,"sources":["conceptMapController.es6"],"names":[],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                dragulaService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.dragulaService = dragulaService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n        \n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n        \n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n        \n        // the available nodes the students can choose\n        this.availableNodes = [];\n        \n        // the node instances the students create\n        this.nodes = [];\n        \n        // the link instances the students create\n        this.links = [];\n        \n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n        \n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n        \n        // the selected link type\n        this.selectedLinkType = null;\n        \n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n        \n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n        \n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n        \n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node \n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        \n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n            \n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n            \n            // setup the svg\n            this.setupSVG();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n        \n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            \n            if (args != null ) {\n                \n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n                \n                if (annotation != null) {\n                    \n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n                    \n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId && \n                        this.componentId === annotationComponentId) {\n                        \n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n        \n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n        \n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n        \n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n        \n        return deferred.promise;\n    };\n    \n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        \n        var performCRaterScoring = false;\n        \n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n            \n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n            \n            /*\n             * display a dialog message while the student waits for their work \n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n            \n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n                \n                if (result != null) {\n                    \n                    // get the CRater response\n                    var data = result.data;\n                    \n                    if (data != null) {\n                        \n                        /*\n                         * annotations we put in the component state will be \n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n                        \n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n                        \n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n                            \n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n                            \n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            \n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n                                \n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n                \n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since \n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n                \n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    linkTypeSelected(linkType) {\n        //console.log(name);\n        \n        if (this.highlightedElement != null && \n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n            \n            var link = this.highlightedElement;\n            //console.log(this.highlightedElement);\n            var linkTypeName = linkType.name;\n            var linkTypeColor = linkType.color;\n            \n            link.setColor(linkTypeColor);\n            link.setText(linkTypeName);\n            link.setLinkType(linkTypeName);\n        }\n        \n        /*\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        */\n        this.hideLinkTypeChooser();\n    }\n    \n    getLinkTypes() {\n        var linkTypes = [];\n        \n        if (this.componentContent != null) {\n            linkTypes = this.componentContent.linkTypes;\n        }\n        \n        return linkTypes;\n    }\n    \n    getLinksTitle() {\n        var linksTitle = \"\";\n        \n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n        \n        return linksTitle;\n    }\n    \n    showLinkTypeChooser() {\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n        \n        this.displayLinkTypeChooser = true;\n    }\n    \n    hideLinkTypeChooser() {\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        \n        if (!this.$scope.$$phase) {\n            this.$scope.$apply();\n        }\n    }\n    \n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg1 element in the svg.js world\n        this.draw = SVG('svg1');\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n        \n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n        \n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n        \n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n        \n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg1 element in the angular world\n        var svg1 = angular.element('#svg1');\n        \n        /*\n         * listen for the drop event which occurs when the student drops\n         * a new node onto the svg\n         */\n        svg1[0].addEventListener('drop', (event) => {\n            this.newNodeDropped(event);\n        });\n        \n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n    }\n    \n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n        \n        var width = '300px';\n        var top = '20px';\n        var left = '600px';\n        \n        this.linkTypeChooserStyle = {\n            'width': width,\n            'position': 'absolute',\n            'top': top,\n            'left': left,\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n        \n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n        \n        var overlayWidth = this.modalWidth + 'px';\n        \n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'top': 0,\n            'left': 0,\n            'width': overlayWidth,\n            'height': '100%',\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n        \n        var selectNodeBarWidth = null;\n        var svg1Width = null;\n        \n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n        \n        // get the width of the svg element\n        var svg1WidthString = angular.element(document.getElementById('svg1')).css('width');\n        \n        if (selectNodeBarWidthString != null && svg1WidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svg1Width = parseInt(svg1WidthString.replace('px', ''));\n        }\n        \n        var overlayWidth = null;\n        \n        if (selectNodeBarWidth != null && svg1Width != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svg1Width;\n        }\n        \n        return overlayWidth;\n    }\n    \n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n        \n        var selectNodeBarHeight = null;\n        var svg1Height = null;\n        \n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n        \n        // get the height of the svg element\n        var svg1HeightString = angular.element(document.getElementById('svg1')).css('height');\n        \n        if (selectNodeBarHeightString != null && svg1HeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svg1Height = parseInt(svg1HeightString.replace('px', ''));\n        }\n        \n        var overlayHeight = null;\n        \n        if (selectNodeBarHeight != null && svg1Height != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svg1Height);\n        }\n        \n        return overlayHeight;\n    }\n    \n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n        \n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n        \n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n    \n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n        \n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n        \n        // we are no longer drawing a link\n        this.drawingLink = false;\n        \n        // there is no longer an active link\n        this.activeLink = null;\n        \n        // enable node draggin\n        this.enableNodeDragging();\n        \n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n    \n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n        \n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the links destination\n             * node\n             */\n            \n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n            \n            var isDragging = true;\n            \n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n    \n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n            \n            // show the border for the node\n            node.showBorder();\n            \n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n    \n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n        \n        this.activeNode = null;\n    }\n    \n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n        \n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n        \n        var matrix = null;\n        \n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n            matrix = event.target.getCTM();\n        } else if (event.target.tagName == 'circle') {\n            /*\n             * the target is a node connector circle so we will get the matrix\n             * of the node group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else if (event.target.tagName == 'image') {\n            /*\n             * the target is a node image so we will get the matrix of the node\n             * group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else {\n            /*\n             * the target is something else so we will get the matrix of its\n             * parent\n             */\n            matrix = event.target.parentElement.getCTM();\n        }\n        \n        // get the x and y coordinates of the matrix element\n        var e = matrix.e;\n        var f = matrix.f;\n        \n        /*\n         * add the offset values to the coordinate to get the coordinate\n         * relative to the svg element\n         */\n        var x = e + offsetX;\n        var y = f + offsetY;\n        \n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n        \n        return returnObject;\n    }\n    \n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n        \n        // remember the selected node\n        this.selectedNode = node;\n        \n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n    \n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n        \n        // get the selected node\n        var selectedNode = this.selectedNode;\n        \n        if (selectedNode != null) {\n            // get the file name\n            var fileName = selectedNode.fileName;\n            \n            // get the node name\n            var nodeName = selectedNode.name;\n            \n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n            \n            // get the position we should drop the node at\n            var x = event.offsetX - this.tempOffsetX;\n            var y = event.offsetY - this.tempOffsetY;\n            \n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, fileName, nodeName, x, y, width, height);\n            \n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n            \n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n            \n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n        }\n        \n        // enable node draggin\n        this.enableNodeDragging();\n    }\n    \n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n        \n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n        \n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n        \n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n        \n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n        \n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n        \n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n        \n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n    }\n    \n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n        \n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n        \n        if (element != null) {\n            \n            // remember the highlighted element\n            this.highlightedElement = element;\n            \n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n            \n            // show the delete button for the element\n            element.showDeleteButton();\n            \n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n                \n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // show the link type chooser\n                this.showLinkTypeChooser();\n                \n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getLinkType();\n            }\n        }\n    }\n    \n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n        \n        if (this.highlightedElement != null) {\n            \n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n                \n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n            \n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n            \n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n            \n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n    \n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get the node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    \n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n                    \n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as \n     * creating a link.\n     */\n    disableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n    \n    /**\n     * Remove a node from our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n        \n        if (node != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get a node by id. The id of a node is the same as its svg group id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeById(groupId) {\n        var node = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.id();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a link by id. The id of a link is the same as its svg group id.\n     * @param groupId the svg group id\n     * @returns the link with the given id or null\n     */\n    getLinkById(groupId) {\n        var link = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.id();\n                \n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n        \n        if (connectorId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n                \n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId \n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n            \n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.id();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n    \n    /**\n     * Remove a link from our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n        \n        if (link != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                \n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeById(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n        \n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeById(groupId);\n            \n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeById(groupId);\n                \n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n        \n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeById(groupId);\n                \n                if (node != null) {\n                    \n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeId = sourceNode.id();\n                    \n                    if (sourceNodeId == groupId) {\n                        /* \n                         * if the source of the link is the same as the \n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n                         \n                        // add the link as an incoming link to the destination node\n                        node.addIncomingLink(this.activeLink);\n                        \n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n                        \n                        // make the link the active link\n                        this.addLink(this.activeLink);\n                        \n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n                        \n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n                        \n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n                        \n                        var link = this.activeLink;\n                        \n                        // set the delete button clicked event for the link\n                        this.activeLink.setDeleteButtonClicked((event) => {\n                            this.linkDeleteButtonClicked(event, link);\n                        });\n                    }\n                }\n            }\n        }\n        \n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n    \n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n        \n        if (link != null) {\n            // remove the link from the svg\n            link.remove();\n            \n            // remove the link from our array of links\n            this.removeLink(link);\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n        \n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n        \n        // get the connector (the svg circle)\n        var connector = event.target;\n        \n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n        \n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n        \n        // get the center of the node\n        var x = node.cx();\n        var y = node.cy();\n        \n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, node, x, y);\n        \n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n        \n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n        \n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n        \n        // remember the active link\n        this.activeLink = link;\n        \n        // highlight the link\n        this.setHighlightedElement(link);\n        \n        // clear the active node\n        this.clearActiveNode();\n        \n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkById(groupId);\n        \n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkById(groupId);\n        \n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkById(groupId);\n        \n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n            \n            // get the node\n            var node = this.getNodeById(groupId);\n            \n            if (node != null) {\n                // remove the node from the svg\n                node.remove();\n                \n                // remove the node from our array of nodes\n                this.removeNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n        \n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        // get the node\n        var node = this.getNodeById(groupId);\n        \n        if (node != null) {\n            // show the delete button\n            node.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     * \n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n        \n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n        \n        // loop until we have reached the svg element\n        while (currentElement != null) {\n            \n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n                \n                // the group id will be the previous id we saw\n                groupId = previousId;\n                \n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n                \n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n        \n        return groupId;\n    }\n};\n\nConceptMapController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'dragulaService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default ConceptMapController;\n"]}