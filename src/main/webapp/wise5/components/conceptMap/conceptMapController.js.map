{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","attachments","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","originalComponentContent","autoFeedbackString","setBackgroundImage","componentContent","background","stretchBackground","svgId","nodeId","componentId","conceptMapContainerId","selectNodeBarId","feedbackContainerId","showNodeLabels","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","workgroupId","isDisabled","componentState","idInfo","id","angular","bind","initializeSVG","isDirty","conceptMapController","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","submit","setupSVG","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","injectAssetPaths","setStudentWork","hasConnectedComponent","starterConceptMap","conceptMapData","populateConceptMapData","populateStarterConceptMap","maxSubmitCount","submitCounter","isSubmitButtonDisabled","score","data","value","maxAutoScore","$translate","comment","enableNodeDragging","disableComponentIfNecessary","$parent","nodeController","registerComponentController","$broadcast","studentData","processLatestSubmit","n","length","node","instanceId","originalId","filePath","fileName","label","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","backgroundPath","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","showLabel","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","$emit","setSaveMessage","clientSaveTime","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","maxScore","showAutoFeedback","feedback","show","clickOutsideToClose","title","htmlContent","ariaLabel","ok","createNewComponentState","response","getStudentResponse","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","parseFloat","autoGrader","scoreAnnotation","createAutoScoreAnnotation","push","commentAnnotation","createAutoCommentAnnotation","componentType","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","linkJSON","substring","lastIndexOf","annotation","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","isCRaterEnabled","isCRaterScoreOnSave","isCRaterScoreOnSubmit","isCRaterScoreOnChange","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","name","setColor","setOriginalId","clearHighlightedElement","linksTitle","setLinkTypeChooserOverlayStyle","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg","element","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","getModalWidth","getModalHeight","overlayWidth","conceptMapContainer","offset","offsetLeft","left","offsetTop","top","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svgWidth","selectNodeBarWidthString","document","getElementById","css","svgWidthString","parseInt","replace","selectNodeBarHeight","svgHeight","selectNodeBarHeightString","svgHeightString","overlayHeight","Math","max","remove","hideLinkTypeChooser","target","tagName","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","e","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","nextAvailableNodeIdNumber","usedNumbers","getId","nodeIdNumber","maxNumberUsed","apply","isNaN","newId","nextAvailableLinkIdNumber","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","removeAllLinks","removeAllNodes","answer","clearConceptMap","parent","querySelector","svgElement","serializer","XMLSerializer","svgString","serializeToString","getHrefToBase64ImageReplacements","images","i","imagePair","imageHref","base64Image","imageRegEx","RegExp","myCanvas","createElement","ctx","getContext","Blob","type","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","addNote","src","componentStates","mergedComponentState","mergedNodes","mergedLinks","c","concat","connectedComponent","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","generateImageFromComponentState","backgroundSize","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ComponentController from '../componentController';\n\nclass ConceptMapController extends ComponentController {\n  constructor($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$anchorScroll = $anchorScroll;\n    this.$location = $location;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.ConceptMapService = ConceptMapService;\n    this.CRaterService = CRaterService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // default width and height for the svg\n    this.width = 800;\n    this.height = 600;\n\n    // the available nodes the students can choose\n    this.availableNodes = [];\n\n    // the available links the students can choose\n    this.availableLinks = [];\n\n    // the node instances the students create\n    this.nodes = [];\n\n    // the link instances the students create\n    this.links = [];\n\n    // flag to display the link type chooser\n    this.displayLinkTypeChooser = false;\n\n    // flag to display the modal overlay for the link type chooser\n    this.displayLinkTypeChooserModalOverlay = false;\n\n    // the selected link type\n    this.selectedLinkType = null;\n\n    // flag for whether we have initialized the link type modal overlay\n    this.initializedDisplayLinkTypeChooserModalOverlay = false;\n\n    // default values for the modal width and height\n    this.modalWidth = 800;\n    this.modalHeight = 600;\n\n    /*\n     * used to remember the node the student has started dragging to create\n     * so that we know what node to create once they let go off the mouse\n     * on the svg element\n     */\n    this.selectedNode = null;\n\n    /*\n     * used to remember the offset of the mouse relative to the upper left\n     * of the node image the student started dragging to create a new node\n     * instance\n     */\n    this.tempOffsetX = 0;\n    this.tempOffsetY = 0;\n\n    let themePath = this.ProjectService.getThemePath();\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the auto feedback string\n    this.autoFeedbackString = '';\n\n    this.setBackgroundImage(this.componentContent.background,\n      this.componentContent.stretchBackground);\n\n    // set the id of the svg and other display elements\n    this.svgId = 'svg_' + this.$scope.nodeId + '_' + this.componentId;\n    this.conceptMapContainerId = 'conceptMapContainer_' + this.$scope.nodeId + '_' + this.componentId;\n    this.selectNodeBarId = 'selectNodeBar_' + this.$scope.nodeId + '_' + this.componentId;\n    this.feedbackContainerId = 'feedbackContainer_' + this.$scope.nodeId + '_' + this.componentId;\n\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n\n    if (this.componentContent.showNodeLabels == null) {\n      this.componentContent.showNodeLabels = true;\n    }\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.availableNodes = this.componentContent.nodes;\n      this.availableLinks = this.componentContent.links;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n\n      let componentState = this.$scope.componentState;\n\n      if (componentState) {\n        // set ids for the svg and other display elements using the componentStateId (so we have unique ids when showing revisions)\n        /*\n         * the student has work for this component so we will use\n         * the node id, component id, and workgroup id, and\n         * componentStateId for the svg id\n         */\n        let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId + '_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          idInfo = '_gradingRevision_' + idInfo\n          this.svgId = 'svg_' + idInfo;\n          this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n          this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n          this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n        } else {\n          this.svgId = 'svg_' + idInfo;\n          this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n          this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n          this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n        }\n      } else {\n        /*\n         * the student does not have any work for this component so\n         * we will use the node id, component id, and workgroup id\n         * for the svg id\n         */\n        let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n        this.svgId = 'svg_' + idInfo;\n        this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n        this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n        this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n\n      var componentState = this.$scope.componentState;\n\n      if (componentState == null) {\n        /*\n         * the student does not have any work for this component so\n         * we will use the node id, component id, and workgroup id\n         * for the svg id\n         */\n        this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n      } else {\n        /*\n         * the student has work for this component so we will use\n         * the node id, component id, and component state id\n         * for the svg id\n         */\n        this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n      }\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    /*\n     * Call the initializeSVG() after a timeout so that angular has a\n     * chance to set the svg element id before we start using it. If we\n     * don't wait for the timeout, the svg id won't be set when we try\n     * to start referencing the svg element.\n     */\n    this.$timeout(angular.bind(this, this.initializeSVG));\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.conceptMapController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.conceptMapController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.conceptMapController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Initialize the SVG\n   */\n  initializeSVG() {\n\n    // setup the svg\n    this.setupSVG();\n\n    var componentState = null;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.ConceptMapService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n\n        /*\n         * inject the asset path so that the file name is changed to\n         * a relative path\n         * e.g.\n         * \"Sun.png\"\n         * will be changed to\n         * \"/wise/curriculum/108/assets/Sun.png\"\n         */\n        componentState = this.ProjectService.injectAssetPaths(componentState);\n\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        /*\n         * only import work if the student does not already have\n         * work for this component\n         */\n        if (this.componentContent.starterConceptMap != null) {\n          /*\n           * the student has not done any work and there is a starter\n           * concept map so we will populate the concept map with\n           * the starter\n           */\n\n          // get the starter concept map\n          var conceptMapData = this.componentContent.starterConceptMap;\n\n          // populate the concept map data into the component\n          this.populateConceptMapData(conceptMapData);\n        }\n      }\n    } else {\n      if (componentState == null) {\n        this.populateStarterConceptMap();\n      } else {\n        /*\n         * inject the asset path so that the file name is changed to\n         * a relative path\n         * e.g.\n         * 'Sun.png'\n         * will be changed to\n         * '/wise/curriculum/108/assets/Sun.png'\n         */\n        componentState = this.ProjectService.injectAssetPaths(componentState);\n\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // populate the previous feedback\n    if (this.latestAnnotations != null) {\n\n      var autoFeedbackString = '';\n\n      // obtain the previous score annotation if any\n      if (this.latestAnnotations.score != null) {\n\n        // get the annotation data\n        var data = this.latestAnnotations.score.data;\n\n        if (data != null) {\n\n          // get the score and max auto score\n          var score = data.value;\n          var maxAutoScore = data.maxAutoScore;\n\n          autoFeedbackString += this.$translate('SCORE') + ': ' + score;\n\n          if (maxAutoScore != null && maxAutoScore != '') {\n            // show the max score as the denominator\n            autoFeedbackString += '/' + maxAutoScore;\n          }\n        }\n      }\n\n      // obtain the previous comment annotation if any\n      if (this.latestAnnotations.comment != null) {\n\n        // get the annotation data\n        var data = this.latestAnnotations.comment.data;\n\n        if (data != null) {\n          if (autoFeedbackString != '') {\n            // add a new line if the result string is not empty\n            autoFeedbackString += '<br/>';\n          }\n\n          // get the comment\n          var comment = data.value;\n          autoFeedbackString += this.$translate('FEEDBACK') + ': ' + comment;\n        }\n      }\n\n      /*\n       * set the previous auto feedback into the field that is used\n       * to display the auto feedback to the student when they click\n       * on the show feedback button\n       */\n      this.autoFeedbackString = autoFeedbackString;\n    }\n\n    // make the nodes draggable\n    this.enableNodeDragging();\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var conceptMapData = studentData.conceptMapData;\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        if (conceptMapData != null) {\n\n          // populate the concept map data into the component\n          this.populateConceptMapData(conceptMapData);\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Populate the concept map data into the component\n   * @param conceptMapData the concept map data which contains an array\n   * of nodes and an array of links\n   */\n  populateConceptMapData(conceptMapData) {\n\n    if (conceptMapData != null) {\n\n      // clear the existing nodes in the student view\n      this.nodes = [];\n\n      var nodes = conceptMapData.nodes;\n\n      if (nodes != null) {\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n          var node = nodes[n];\n\n          var instanceId = node.instanceId;\n          var originalId = node.originalId;\n          var filePath = node.fileName;\n          var label = node.label;\n          var x = node.x;\n          var y = node.y;\n          var width = node.width;\n          var height = node.height\n\n          // create a ConceptMapNode\n          var conceptMapNode = this.ConceptMapService.newConceptMapNode(\n              this.draw, instanceId, originalId, filePath, label,\n              x, y, width, height, this.componentContent.showNodeLabels);\n\n          // add the node to our array of nodes\n          this.addNode(conceptMapNode);\n\n          // set the mouse events on the node\n          this.setNodeMouseEvents(conceptMapNode);\n        }\n      }\n\n      // clear the existing links in the student view\n      this.links = [];\n\n      var links = conceptMapData.links;\n\n      if (links != null) {\n\n        // loop through all the links\n        for (var l = 0; l < links.length; l++) {\n          var link = links[l];\n\n          var instanceId = link.instanceId;\n          var originalId = link.originalId;\n          var sourceNodeId = link.sourceNodeInstanceId;\n          var destinationNodeId = link.destinationNodeInstanceId;\n          var label = link.label;\n          var color = link.color;\n          var curvature = link.curvature;\n          var startCurveUp = link.startCurveUp;\n          var endCurveUp = link.endCurveUp;\n          var sourceNode = null;\n          var destinationNode = null;\n\n          if (sourceNodeId != null) {\n            sourceNode = this.getNodeById(sourceNodeId);\n          }\n\n          if (destinationNodeId != null) {\n            destinationNode = this.getNodeById(destinationNodeId);\n          }\n\n          // create a ConceptMapLink\n          var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n          // add the link to our array of links\n          this.addLink(conceptMapLink);\n\n          // set the mouse events on the link\n          this.setLinkMouseEvents(conceptMapLink);\n        }\n      }\n\n      if (conceptMapData.backgroundPath != null &&\n          conceptMapData.backgroundPath != '') {\n        this.setBackgroundImage(conceptMapData.backgroundPath,\n          conceptMapData.stretchBackground);\n      }\n\n      /*\n       * move the link text group to the front so that they are on top\n       * of links\n       */\n      this.moveLinkTextToFront();\n\n      // move the nodes to the front so that they are on top of links\n      this.moveNodesToFront();\n\n      /*\n       * set a timeout to refresh the link labels so that the rectangles\n       * around the labels are properly resized\n       */\n      this.$timeout(() => {\n        this.refreshLinkLabels();\n      });\n    }\n  }\n\n  /**\n   * Refresh the link labels so that the rectangles around the text\n   * labels are resized to fit the text properly. This is required because\n   * the rectangles are not properly sized when the ConceptMapLinks are\n   * initialized. The rectangles need to be rendered first and then the\n   * labels need to be set in order for the rectangles to be resized properly.\n   * This is why this function is called in a $timeout.\n   */\n  refreshLinkLabels() {\n    for (let node of this.nodes) {\n      if (node.showLabel) {\n        var label = node.getLabel();\n        /*\n         * set the label back into the node so that the rectangle\n         * around the text label is resized to the text\n         */\n        node.setLabel(label);\n      }\n    }\n\n    if (this.links != null) {\n\n      // loop throgh all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var link = this.links[l];\n\n        if (link != null) {\n          // get the label from the link\n          var label = link.getLabel();\n\n          /*\n           * set the label back into the link so that the rectangle\n           * around the text label is resized to the text\n           */\n          link.setLabel(label);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestState.clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), latestState.clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('conceptMap.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('conceptMap.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('conceptMap.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          //this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        // get the custom rule evaluator code that was authored\n        var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        // get the student concept map\n        var conceptMapData = this.getConceptMapData();\n\n        var thisConceptMapService = this.ConceptMapService;\n\n        // the result will be stored in this variable\n        var thisResult = {};\n\n        /*\n         * create the any function that can be called in the custom rule\n         * evaluator code. the arguments to the any function are rule names.\n         * for example if we are looking for any of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var any = function() {\n          return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n        };\n\n        /*\n         * create the all function that can be called in the custom rule\n         * evaluator code. the arguments to the all function are rule names.\n         * for example if we are looking for all of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var all = function() {\n          return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n        }\n\n        /*\n         * create the setResult function that can be called in the custom rule\n         * evaluator code\n         */\n        var setResult = function(result) {\n          thisResult = result;\n        }\n\n        // run the custom rule evaluator\n        eval(customRuleEvaluator);\n\n        // remember the auto feedback result\n        this.autoFeedbackResult = thisResult;\n\n        var resultString = '';\n\n        if (this.componentContent.showAutoScore && thisResult.score != null) {\n          // display the score\n          resultString += this.$translate('SCORE') + ': ' + thisResult.score;\n\n          if (this.componentContent.maxScore != null && this.componentContent.maxScore != '') {\n            // show the max score as the denominator\n            resultString += '/' + this.componentContent.maxScore;\n          }\n        }\n\n        if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n          if (resultString != '') {\n            // add a new line if the result string is not empty\n            resultString += '<br/>';\n          }\n\n          // display the feedback\n          resultString += this.$translate('FEEDBACK') + ': ' + thisResult.feedback;\n        }\n\n        if (resultString != '') {\n          // show the auto feedback in a modal dialog\n          this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .clickOutsideToClose(true)\n            .title(this.$translate('FEEDBACK'))\n            .htmlContent(resultString)\n            .ariaLabel(this.$translate('FEEDBACK'))\n            .ok(this.$translate('CLOSE'))\n          );\n        }\n\n        // remember the feedback string\n        this.autoFeedbackString = resultString;\n\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  };\n\n  /**\n   * Get the student response\n   */\n  getStudentResponse() {\n    return this.studentResponse;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // get the text the student typed\n    var response = this.getStudentResponse();\n\n    // set the response into the component state\n    var studentData = {};\n    var conceptMapData = this.getConceptMapData();\n    studentData.conceptMapData = conceptMapData;\n\n    // the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    if (this.isSubmit) {\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n\n      if (this.autoFeedbackResult != null) {\n        // there is auto feedback\n\n        if (this.autoFeedbackResult.score != null || this.autoFeedbackResult.feedback != null) {\n          // there is an auto score or auto feedback\n\n          // get the values used to create an annotation\n          var runId = this.ConfigService.getRunId();\n          var periodId = this.ConfigService.getPeriodId();\n          var nodeId = this.nodeId;\n          var componentId = this.componentId;\n          var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n          // create an array of annotations to be saved with the component state\n          componentState.annotations = [];\n\n          if (this.autoFeedbackResult.score != null) {\n            // there is an auto score\n\n            // create the data object for the annotation\n            var data = {};\n            data.value = parseFloat(this.autoFeedbackResult.score);\n            data.autoGrader = 'conceptMap';\n\n            if (this.componentContent.maxScore != null) {\n              data.maxAutoScore = parseFloat(this.componentContent.maxScore);\n            }\n\n            // create the auto score annotation\n            var scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n            // add the annotation to the component state\n            componentState.annotations.push(scoreAnnotation);\n\n            if (this.mode === 'authoring') {\n              if (this.latestAnnotations == null) {\n                this.latestAnnotations = {};\n              }\n\n              /*\n               * we are in the authoring view so we will set the\n               * latest score annotation manually\n               */\n              this.latestAnnotations.score = scoreAnnotation;\n            }\n          }\n\n          if (this.autoFeedbackResult.feedback != null) {\n            // there is auto feedback\n\n            // create the data object for the annotation\n            var data = {};\n            data.value = this.autoFeedbackResult.feedback;\n            data.autoGrader = 'conceptMap';\n\n            // create the auto score annotation\n            var commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n            // add the annotation to the component state\n            componentState.annotations.push(commentAnnotation);\n\n            if (this.mode === 'authoring') {\n              if (this.latestAnnotations == null) {\n                this.latestAnnotations = {};\n              }\n\n              /*\n               * we are in the authoring view so we will set the\n               * latest comment annotation manually\n               */\n              this.latestAnnotations.comment = commentAnnotation;\n            }\n          }\n        }\n      }\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'ConceptMap';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Get the concept map data\n   * @returns an object containing a array of nodes and an array of links\n   */\n  getConceptMapData() {\n    var studentData = {};\n    studentData.nodes = [];\n    studentData.links = [];\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      // get the JSON representation of the node\n      var nodeJSON = node.toJSONObject();\n\n      studentData.nodes.push(nodeJSON);\n    }\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var link = this.links[l];\n\n      // get the JSON representation of the link\n      var linkJSON = link.toJSONObject();\n\n      studentData.links.push(linkJSON);\n    }\n\n    // set the background data into the student data\n    if (this.background != null) {\n      var background = this.background;\n\n      // this is the background file name e.g. background.png\n      studentData.background = background.substring(background.lastIndexOf('/') + 1);\n\n      // this is the background path e.g. /wise/curriculum/108/assets/background.png\n      studentData.backgroundPath = background;\n\n      // whether to stretch the background to fill the svg element\n      studentData.stretchBackground = this.stretchBackground;\n    }\n\n    return studentData;\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * A link type was selected in the link type chooser popup\n   * @param linkType the authored link object that was selected\n   */\n  linkTypeSelected(selectedLink) {\n\n    if (this.highlightedElement != null &&\n      this.highlightedElement.constructor.name == 'ConceptMapLink') {\n\n      /*\n       * get the ConceptMapLink object that we are setting the link type\n       * for\n       */\n      var link = this.highlightedElement;\n\n      // get the label, color, and original id\n      var label = selectedLink.label;\n      var color = selectedLink.color;\n      var originalId = selectedLink.id;\n\n      // set the label, color, and original id into the link\n      link.setLabel(label);\n      link.setColor(color);\n      link.setOriginalId(originalId);\n    }\n\n    // make the link not highlighted\n    this.clearHighlightedElement();\n    this.studentDataChanged();\n  }\n\n  /**\n   * Get the links title\n   * @returns the links title\n   */\n  getLinksTitle() {\n    var linksTitle = '';\n\n    if (this.componentContent != null) {\n      linksTitle = this.componentContent.linksTitle;\n    }\n\n    return linksTitle;\n  }\n\n  /**\n   * Show the link type chooser popup\n   */\n  showLinkTypeChooser() {\n\n    // check if we have initialized the popup\n    if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n      // we have not initialized the popup so we will do so now\n      this.setLinkTypeChooserOverlayStyle();\n      this.initializedDisplayLinkTypeChooserModalOverlay = true;\n    }\n\n    /*\n     * initialize the top left of the link chooser popup to show up on\n     * the top right of the svg element\n     */\n    this.linkTypeChooserStyle['left'] = '600px';\n    this.linkTypeChooserStyle['top'] = '20px';\n\n    this.displayLinkTypeChooser = true;\n  }\n\n  /**\n   * Hide the link type chooser popup\n   */\n  hideLinkTypeChooser() {\n\n    // hide the link type chooser\n    this.displayLinkTypeChooser = false;\n    this.displayLinkTypeChooserModalOverlay = false;\n    this.newlyCreatedLink = null;\n\n    if (!this.$scope.$$phase) {\n      // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n      // and it still seems to work. Do we need this line?\n      // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n      //this.$scope.$apply();\n    }\n  }\n\n  /**\n   * Setup the svg\n   */\n  setupSVG() {\n    // get the svg element in the svg.js world\n    this.draw = SVG(this.svgId);\n    this.draw.width(this.width);\n    this.draw.height(this.height);\n\n    this.highlightedElement = null;\n    this.activeNode = null;\n    this.activeLink = null;\n    this.drawingLink = false;\n    this.newlyCreatedLink = null;\n\n    // set the mouse down listener\n    this.draw.mousedown((event) => {\n      this.svgMouseDown(event);\n    });\n\n    // set the mouse up listener\n    this.draw.mouseup((event) => {\n      this.svgMouseUp(event);\n    });\n\n    // set the mouse move listener\n    this.draw.mousemove((event) => {\n      this.svgMouseMove(event);\n    });\n\n    // get the svg element in the angular world\n    var svg = angular.element('#' + this.svgId);\n\n    /*\n     * check if we have already added the dragover listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDragOverListener) {\n      /*\n       * listen for the dragover event which occurs when the user is\n       * dragging a node onto the svg\n       */\n      svg[0].addEventListener('dragover', (event) => {\n        /*\n         * prevent the default because if we don't, the user won't\n         * be able to drop a new node instance onto the svg in the\n         * authoring mode\n         */\n        event.preventDefault();\n      });\n\n      this.addedDragOverListener = true;\n    }\n\n    /*\n     * check if we have already added the drop listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDropListener) {\n      /*\n       * listen for the drop event which occurs when the student drops\n       * a new node onto the svg\n       */\n      svg[0].addEventListener('drop', (event) => {\n\n        /*\n         * the user has dropped a new node onto the svg to create a\n         * new instance of a node\n         */\n        this.newNodeDropped(event);\n      });\n\n      this.addedDropListener = true;\n    }\n\n    // set the link type chooser style\n    this.setLinkTypeChooserStyle();\n  }\n\n  /**\n   * Set the link type chooser popup style\n   */\n  setLinkTypeChooserStyle() {\n\n    /*\n     * set the link type chooser popup to show up in the upper right of\n     * the svg element\n     */\n    this.linkTypeChooserStyle = {\n      'width': '300px',\n      'position': 'absolute',\n      'left': '600px',\n      'top': '20px',\n      'border': '1px solid black',\n      'backgroundColor': 'white',\n      'cursor': 'pointer',\n      'z-index': 10000,\n      'padding': '16px'\n    }\n  }\n\n  /**\n   * Set the link type chooser popup overlay style\n   */\n  setLinkTypeChooserOverlayStyle() {\n\n    // calculate the modal overlay width and height\n    this.modalWidth = this.getModalWidth();\n    this.modalHeight = this.getModalHeight();\n\n    //var overlayWidth = this.modalWidth + 'px';\n    var overlayWidth = this.modalWidth;\n\n    var conceptMapContainer = angular.element('#' + this.conceptMapContainerId);\n    var width = conceptMapContainer.width();\n    var height = conceptMapContainer.height();\n    var offset = conceptMapContainer.offset();\n\n    var offsetLeft = offset.left;\n    var offsetTop = offset.top;\n    offsetLeft = 0;\n    offsetTop = 0;\n\n    this.linkTypeChooserModalOverlayStyle = {\n      'position': 'absolute',\n      'z-index': 9999,\n      'width': overlayWidth,\n      'height': height,\n      'background-color': '#000000',\n      'opacity': 0.4\n    }\n  }\n\n  /**\n   * Get the width that the modal overlay should be\n   * @returns the width that the modal overlay should be\n   */\n  getModalWidth() {\n\n    var selectNodeBarWidth = null;\n    var svgWidth = null;\n\n    // get the width of the left select node bar\n    var selectNodeBarWidthString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('width');\n\n    // get the width of the svg element\n    var svgWidthString = angular.element(document.getElementById(this.svgId)).css('width');\n\n    if (selectNodeBarWidthString != null && svgWidthString != null) {\n      // get the integer values\n      selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n      svgWidth = parseInt(svgWidthString.replace('px', ''));\n    }\n\n    var overlayWidth = null;\n\n    if (selectNodeBarWidth != null && svgWidth != null) {\n      // calculate the sum of the widths\n      overlayWidth = selectNodeBarWidth + svgWidth;\n    }\n\n    return overlayWidth;\n  }\n\n  /**\n   * Get the height that the modal overlay should be\n   * @returns the height that the modal overlay should be\n   */\n  getModalHeight() {\n\n    var selectNodeBarHeight = null;\n    var svgHeight = null;\n\n    // get the height of the left select node bar\n    var selectNodeBarHeightString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('height');\n\n    // get the height of the svg element\n    var svgHeightString = angular.element(document.getElementById(this.svgId)).css('height');\n\n    if (selectNodeBarHeightString != null && svgHeightString != null) {\n      // get the integer values\n      selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n      svgHeight = parseInt(svgHeightString.replace('px', ''));\n    }\n\n    var overlayHeight = null;\n\n    if (selectNodeBarHeight != null && svgHeight != null) {\n      // get the larger of the two heights\n      overlayHeight = Math.max(selectNodeBarHeight, svgHeight);\n    }\n\n    return overlayHeight;\n  }\n\n  /**\n   * The cancel button on the link type chooser was clicked\n   */\n  cancelLinkTypeChooser() {\n\n    if (this.newlyCreatedLink != null) {\n      /*\n       * the student has just created this link and has not yet chosen\n       * a link type so we will remove the link\n       */\n      this.newlyCreatedLink.remove();\n      this.newlyCreatedLink = null;\n    }\n\n    // hide the link chooser\n    this.hideLinkTypeChooser();\n\n    // make the link not highlighted\n    this.clearHighlightedElement();\n  }\n\n  /**\n   * Called when the mouse iss clicked down on a blank spot in the svg element\n   * @param event the mouse down event\n   */\n  svgMouseDown(event) {\n    if (event.target.tagName == 'svg') {\n      // remove highlighting from any item that was previously highlighted\n      this.clearHighlightedElement();\n    }\n  }\n\n  /**\n   * Called when the mouse is released\n   * @param event the mouse up event\n   */\n  svgMouseUp(event) {\n\n    if (this.activeLink != null && this.activeNode == null) {\n      /*\n       * the student was creating a link but did not connect the link\n       * to a destination node so we will just remove the link\n       */\n      this.activeLink.remove();\n    }\n\n    // we are no longer drawing a link\n    this.drawingLink = false;\n\n    // there is no longer an active link\n    this.activeLink = null;\n\n    // enable node draggin\n    this.enableNodeDragging();\n    this.moveLinkTextToFront();\n    // move the nodes to the front so that they are on top of links\n    this.moveNodesToFront();\n  }\n\n  /**\n   * Called when the mouse is moved\n   * @param event the mouse move event\n   */\n  svgMouseMove(event) {\n\n    if (this.activeLink != null) {\n      /*\n       * there is an active link which means the student has created a\n       * new link and is in the process of choosing the link's destination\n       * node\n       */\n\n      // get the coordinates that the link should be updated to\n      var coordinates = this.getRelativeCoordinatesByEvent(event);\n      var x1 = null;\n      var y1 = null;\n      var x2 = coordinates.x;\n      var y2 = coordinates.y;\n\n      /*\n       * get the location of the center of the connector that the link\n       * originated from\n       */\n      var startX = this.activeLinkStartX;\n      var startY = this.activeLinkStartY;\n\n      /*\n       * get the distance from the start to the current position of the\n       * mouse\n       */\n      var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n\n      /*\n       * check if we have set the curvature yet and that the mouse\n       * is more than 20 pixels away from the start.\n       *\n       * we will determine the curvature of the link based upon how\n       * the user has dragged the mouse in relation to the center\n       * of the connector. if they start drawing the link horizontally\n       * we will create a straight line with no curvature. if they\n       * start drawing the link by moving the mouse up, we will create\n       * a line that curves up. if they start drawing the link by\n       * moving the mouse down, we will create a line that curves down.\n       */\n      if (!this.linkCurvatureSet && distance > 20) {\n\n        /*\n         * get the slope of the line from the start to the location\n         * of the mouse\n         */\n        var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n\n        if (y2 < startY) {\n          // the user has moved the mouse above the connector\n\n          if (slope == null) {\n            /*\n             * the slope is infinite so we will default the\n             * curvature to 0.5\n             */\n            this.activeLink.curvature = 0.5;\n          } else if (slope < 1.0) {\n            // make the link straight\n            this.activeLink.curvature = 0.0;\n          } else {\n            // make the link curved\n            this.activeLink.curvature = 0.5;\n          }\n\n          // make the link curve up\n          this.activeLink.startCurveUp = true;\n          this.activeLink.endCurveUp = true;\n        } else if (y2 > startY) {\n          // the user has moved the mouse below the connector\n\n          if (slope == null) {\n            /*\n             * the slope is infinite so we will default the\n             * curvature to 0.5\n             */\n            this.activeLink.curvature = 0.5;\n          } else if (slope < 1.0) {\n            // make the link straight\n            this.activeLink.curvature = 0.0;\n          } else {\n            // make the link curved\n            this.activeLink.curvature = 0.5;\n          }\n\n          // make the link curve down\n          this.activeLink.startCurveUp = false;\n          this.activeLink.endCurveUp = false;\n        }\n\n        // remember that we have set the curvature\n        this.linkCurvatureSet = true;\n      }\n\n      var isDragging = true;\n\n      // redraw the link with the new coordinates\n      this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n    }\n  }\n\n  /**\n   * Set the active node. This is called when the student places the mouse\n   * over a node. When a node becomes active, we show the delete button and\n   * the border.\n   * @param node the node to make active\n   */\n  setActiveNode(node) {\n    if (node != null) {\n      // show the delete button for the node\n      node.showDeleteButton();\n\n      // show the border for the node\n      node.showBorder();\n\n      // remember the active node\n      this.activeNode = node;\n    }\n  }\n\n  /**\n   * Clear the active node\n   */\n  clearActiveNode() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var tempNode = this.nodes[n];\n\n      if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n        /*\n         * we have found the node and it is not highlighted so we will\n         * hide the delete button and hide the border\n         */\n        tempNode.hideDeleteButton();\n        tempNode.hideBorder();\n      }\n    }\n\n    this.activeNode = null;\n  }\n\n  /**\n   * Get the coordinates of the mouse relative to the svg element\n   * @param event a mouse event\n   * @returns an object containing x and y values\n   */\n  getRelativeCoordinatesByEvent(event) {\n\n    // get the offset of the mouse from its parent\n    var offsetX = event.offsetX;\n    var offsetY = event.offsetY;\n\n    var parentOffsetX = 0;\n    var parentOffsetY = 0;\n\n    // get the user agent so we can determine which browser the user is using\n    var userAgent = navigator.userAgent;\n\n    if (event.target.tagName == 'svg') {\n      // the target is the svg element\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n        var matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n        matrix = event.target.createSVGMatrix();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else {\n        // the user is using some other browser\n        matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName == 'circle') {\n      // the target is a node connector circle or delete circle\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the matrix of the group\n        var matrix = event.target.getCTM();\n\n        // get the bounding box of the circle\n        var bbox = event.target.getBBox();\n\n        /*\n         * get the bounding box of the circle so we can get the\n         * coordinates of the circle within the group\n         */\n        var x = bbox.x;\n        var y = bbox.y;\n\n        // get the absolute coordinates of the circle\n        parentOffsetX = matrix.e + bbox.x;\n        parentOffsetY = matrix.f + bbox.y;\n      }\n    } else if (event.target.tagName == 'rect') {\n      // the target is the rectangle that outlines the image\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the matrix of the group\n        var matrix = event.target.getCTM();\n\n        // get the bounding box of the rect\n        var bbox = event.target.getBBox();\n\n        /*\n         * get the bounding box of the rect so we can get the\n         * coordinates of the rect within the group\n         */\n        var x = bbox.x;\n        var y = bbox.y;\n\n        // get the absolute coordinates of the rect\n        parentOffsetX = matrix.e + x;\n        parentOffsetY = matrix.f + y;\n      }\n    } else if (event.target.tagName == 'image') {\n      // the target is an image\n\n      if (userAgent.indexOf('Chrome') != -1) {\n\n      } else if (userAgent.indexOf('Firefox') != -1) {\n\n        // get the matrix of the group\n        var matrix = event.target.parentElement.getCTM();\n\n        // get the coordinates of the upper left corner of the group\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName == 'path') {\n      /*\n       * the target is the link line. sometimes the mouse can be over the\n       * link if the student is moving the mouse around quickly.\n       */\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        // get the coordinates of the head of the link\n        var x2 = event.target.attributes['x2'];\n        var y2 = event.target.attributes['y2'];\n\n        if (x2 != null && y2 != null) {\n          parentOffsetX = parseInt(x2.value);\n          parentOffsetY = parseInt(y2.value);\n        }\n      }\n    } else {\n      // the target is something else\n\n      if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n        // the user is using Chrome\n\n      } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n        // the user is using Firefox\n\n        var matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    }\n\n    /*\n     * add the parent offset values to the relative offset values to obtain\n     * the x and y values relative to the upper left corner of the svg\n     */\n    var x = parentOffsetX + offsetX;\n    var y = parentOffsetY + offsetY;\n\n    var returnObject = {}\n    returnObject.x = x;\n    returnObject.y = y;\n\n    return returnObject;\n  }\n\n  /**\n   * Called when the student clicks down on a node in the left node bar\n   * @param $event the mouse down event\n   * @param node the node the student clicked down on\n   */\n  selectNode($event, node) {\n\n    // remember the selected node\n    this.selectedNode = node;\n\n    /*\n     * remember the offset of the mouse relative to the upper left of the\n     * node's image so that we properly calculate the node position when\n     * the student releases the mouse to put the node in the svg\n     */\n    this.tempOffsetX = $event.offsetX;\n    this.tempOffsetY = $event.offsetY;\n  }\n\n  /**\n   * The student has dropped a new node on the svg\n   * @param event the drop event\n   */\n  newNodeDropped(event) {\n\n    // get the selected node\n    var selectedNode = this.selectedNode;\n\n    if (selectedNode != null) {\n      // get the file name\n      var filePath = selectedNode.fileName;\n\n      // get the node name\n      var label = selectedNode.label;\n\n      // get the width and height of the node\n      var width = selectedNode.width;\n      var height = selectedNode.height;\n\n      // get the original authored id\n      var originalId = selectedNode.id;\n\n      // get the coordinates relative to the svg element\n      var coordinates = this.getRelativeCoordinatesByEvent(event);\n\n      // get the position we should drop the node at\n      var x = coordinates.x - this.tempOffsetX;\n      var y = coordinates.y - this.tempOffsetY;\n\n      // get a new ConceptMapNodeId e.g. 'studentNode3'\n      var newConceptMapNodeId = this.getNewConceptMapNodeId();\n\n      // create a ConceptMapNode\n      var conceptMapNode = this.ConceptMapService.newConceptMapNode(\n          this.draw, newConceptMapNodeId, originalId, filePath, label,\n          x, y, width, height, this.componentContent.showNodeLabels);\n\n      // add the node to our array of nodes\n      this.addNode(conceptMapNode);\n\n      // set the mouse events on the node\n      this.setNodeMouseEvents(conceptMapNode);\n\n      // make the node highlighted\n      this.setHighlightedElement(conceptMapNode);\n      this.studentDataChanged();\n    }\n\n    // enable node dragging\n    this.enableNodeDragging();\n  }\n\n  /**\n   * Get a new ConceptMapNode id that isn't being used\n   * @returns a new ConceptMapNode id e.g. 'studentNode3'\n   */\n  getNewConceptMapNodeId() {\n\n    var nextAvailableNodeIdNumber = 1;\n\n    // array to remember the numbers that have been used in node ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.nodes.length; x++) {\n      var node = this.nodes[x];\n\n      if (node != null) {\n\n        // get the node id\n        var nodeId = node.getId();\n\n        if (nodeId != null) {\n\n          // get the number from the node id\n          var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n\n          if (nodeIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(nodeIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'studentNode' + nextAvailableNodeIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Get a new ConceptMapLink id that isn't being used\n   * @returns a new ConceptMapLink id e.g. 'studentLink3'\n   */\n  getNewConceptMapLinkId() {\n\n    var nextAvailableLinkIdNumber = 1;\n\n    // array to remember the numbers that have been used in link ids already\n    var usedNumbers = [];\n\n    // loop through all the nodes\n    for (var x = 0; x < this.links.length; x++) {\n      var link = this.links[x];\n\n      if (link != null) {\n\n        // get the node id\n        var linkId = link.getId();\n\n        if (linkId != null) {\n\n          // get the number from the link id\n          var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n\n          if (linkIdNumber != null) {\n            // add the number to the array of used numbers\n            usedNumbers.push(linkIdNumber);\n          }\n        }\n      }\n    }\n\n    if (usedNumbers.length > 0) {\n      // get the max number used\n      var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n      if (!isNaN(maxNumberUsed)) {\n        // increment the number by 1 to get the next available number\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    var newId = 'studentLink' + nextAvailableLinkIdNumber;\n\n    return newId;\n  }\n\n  /**\n   * Set the mouse events on a newly created node\n   * @param conceptMapNode the node\n   */\n  setNodeMouseEvents(conceptMapNode) {\n\n    // set the node mouse over event\n    conceptMapNode.setNodeMouseOver((event) => {\n      this.nodeMouseOver(event);\n    });\n\n    // set the node mouse out event\n    conceptMapNode.setNodeMouseOut((event) => {\n      this.nodeMouseOut(event);\n    });\n\n    // set the connector mouse down event\n    conceptMapNode.setConnectorMouseDown((event) => {\n      this.disableNodeDragging();\n      this.connectorMouseDown(event);\n    });\n\n    // set the node mouse down event\n    conceptMapNode.setNodeMouseDown((event) => {\n      this.nodeMouseDown(event);\n    });\n\n    // set the node mouse up event\n    conceptMapNode.setNodeMouseUp((event) => {\n      this.nodeMouseUp(event);\n    });\n\n    // set the delete button mouse down event\n    conceptMapNode.setDeleteButtonMouseDown((event) => {\n      this.nodeDeleteButtonMouseDown(event);\n    });\n\n    // set the delete button mouse over event\n    conceptMapNode.setDeleteButtonMouseOver((event) => {\n      this.nodeDeleteButtonMouseOver(event);\n    });\n\n    // set the delete button mouse out event\n    conceptMapNode.setDeleteButtonMouseOut((event) => {\n      this.nodeDeleteButtonMouseOut(event);\n    });\n\n    // set node drag move event\n    conceptMapNode.setDragMove((event) => {\n      this.nodeDragMove(event);\n    });\n  }\n\n  /**\n   * Set an element to be highlighted. The element can be a node or a link.\n   * @param element a node or link\n   */\n  setHighlightedElement(element) {\n\n    // remove highlighting from any existing element\n    this.clearHighlightedElement();\n\n    // hide the link type chooser\n    this.hideLinkTypeChooser();\n\n    if (element != null) {\n\n      // remember the highlighted element\n      this.highlightedElement = element;\n\n      // set the higlighted value to true for the element\n      element.isHighlighted(true);\n\n      // show the delete button for the element\n      element.showDeleteButton();\n\n      if(element.constructor.name == 'ConceptMapNode') {\n        // the element is a node\n\n        // show the border\n        element.showBorder();\n      } else if (element.constructor.name == 'ConceptMapLink') {\n        // the element is a link\n\n        // show the link type chooser\n        this.showLinkTypeChooser();\n\n        // select the link type that was previously chosen for the link\n        this.selectedLinkType = element.getOriginalId();\n      }\n    }\n  }\n\n  /**\n   * If an element is highlighted, make it no longer highlighted.\n   */\n  clearHighlightedElement() {\n\n    if (this.highlightedElement != null) {\n\n      if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n        // the highlighted element is a node\n\n        // hide the border\n        this.highlightedElement.hideBorder();\n      } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n        // the element is a link\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n      }\n\n      // set the higlighted value to false for the element\n      this.highlightedElement.isHighlighted(false);\n\n      // hide the delete button\n      this.highlightedElement.hideDeleteButton();\n\n      // clear the highlighted element reference\n      this.highlightedElement = null;\n    }\n  }\n\n  /**\n   * Enable node dragging\n   */\n  enableNodeDragging() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get the node group\n        var group = node.getGroup();\n\n        if (group != null) {\n\n          /*\n           * get the bounds that we will allow the node group to\n           * dragged in\n           */\n          var options = {\n            minX: 0,\n            minY: 0,\n            maxX: this.width,\n            maxY: this.height\n          };\n\n          // make the node group draggable\n          group.draggable(options);\n        }\n      }\n    }\n  }\n\n  /**\n   * Disable node dragging. This will be called when the student creates a\n   * link so that they aren't dragging nodes around at the same time as\n   * creating a link.\n   */\n  disableNodeDragging() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get a node group\n        var group = node.getGroup();\n\n        if (group != null) {\n          // make the group not draggable\n          group.draggable(false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Move the link text group to the front\n   */\n  moveLinkTextToFront() {\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var link = this.links[l];\n\n      if (link != null) {\n        // move the link text group to the front\n        link.moveTextGroupToFront();\n      }\n    }\n  }\n\n  /**\n   * Move the nodes to the front so that they show up above links\n   */\n  moveNodesToFront() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var node = this.nodes[n];\n\n      if (node != null) {\n\n        // get a node group\n        var group = node.getGroup();\n\n        if (group != null) {\n          // move the node group to the front\n          group.front();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a node to our array of nodes\n   * @param node the node to add\n   */\n  addNode(node) {\n    if (node != null) {\n      this.nodes.push(node);\n    }\n  }\n\n  /**\n   * Remove a node from the svg and our array of nodes\n   * @param node the node to remove\n   */\n  removeNode(node) {\n\n    if (node != null) {\n\n      // get the outgoing links from the node\n      var outgoingLinks = node.getOutgoingLinks();\n\n      if (outgoingLinks != null) {\n\n        // get the number of outgoing links\n        var numOutgoingLinks = outgoingLinks.length;\n\n        // loop until we have removed all the outgoing links\n        while (numOutgoingLinks > 0) {\n          // get an outgoing link\n          var outgoingLink = outgoingLinks[0];\n\n          // remove the link from the svg and from our array of links\n          this.removeLink(outgoingLink);\n\n          // decrement the number of outgoing links counter\n          numOutgoingLinks--;\n        }\n      }\n\n      // get the incoming links to the node\n      var incomingLinks = node.getIncomingLinks();\n\n      if (incomingLinks != null) {\n\n        // get the number of incoming links\n        var numIncomingLinks = incomingLinks.length;\n\n        // loop until we have removed all the incoming links\n        while (numIncomingLinks > 0) {\n          // get an incoming link\n          var incomingLink = incomingLinks[0];\n\n          // remove the link from the svg and from our array of links\n          this.removeLink(incomingLink);\n\n          // decrement the number of incoming links counter\n          numIncomingLinks--;\n        }\n      }\n\n      // remove the node from the svg\n      node.remove();\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n\n        if (tempNode == node) {\n          // we have found the node we want to remove\n          this.nodes.splice(n, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all nodes from the svg and our array of nodes\n   */\n  removeAllNodes() {\n\n    // loop through all the nodes\n    for (var n = 0; n < this.nodes.length; n++) {\n      var tempNode = this.nodes[n];\n\n      // remove the node from the svg\n      tempNode.remove();\n    }\n\n    // clear the nodes array\n    this.nodes = [];\n  }\n\n  /**\n   * Get a node by id.\n   * @param id the node id\n   * @returns the node with the given id or null\n   */\n  getNodeById(id) {\n    var node = null;\n\n    if (id != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeId = tempNode.getId();\n\n        if (id == tempNodeId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Get a node by id.\n   * @param groupId the svg group id\n   * @returns the node with the given id or null\n   */\n  getNodeByGroupId(groupId) {\n    var node = null;\n\n    if (groupId != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeGroupId = tempNode.getGroupId();\n\n        if (groupId == tempNodeGroupId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Get a link by id.\n   * @param id the link id\n   * @returns the link with the given id or null\n   */\n  getLinkById(id) {\n    var link = null;\n\n    if (id != null) {\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n        var tempLinkId = tempLink.getId();\n\n        if (groupId == tempLinkId) {\n          // we have found the link we want\n          link = tempLink;\n          break;\n        }\n      }\n    }\n\n    return link;\n  }\n\n  /**\n   * Get a link by group id.\n   * @param groupId the svg group id\n   * @returns the link with the given group id or null\n   */\n  getLinkByGroupId(groupId) {\n    var link = null;\n\n    if (groupId != null) {\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n        var tempLinkGroupId = tempLink.getGroupId();\n\n        if (groupId == tempLinkGroupId) {\n          // we have found the link we want\n          link = tempLink;\n          break;\n        }\n      }\n    }\n\n    return link;\n  }\n\n  /**\n   * Get a node by its connector id.\n   * @param connectorId the svg circle id of the connector\n   * @returns the node with the associated connector or null\n   */\n  getNodeByConnectorId(connectorId) {\n    var node = null;\n\n    if (connectorId != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n\n        // get the connector id\n        var tempConnectorId = tempNode.getConnectorId();\n\n        if (connectorId == tempConnectorId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Remove a node by id. The id of a node is the same as its svg group id.\n   * @param groupId\n   */\n  removeNodeById(groupId) {\n    if (groupId != null) {\n\n      // loop through all the nodse\n      for (var n = 0; n < this.nodes.length; n++) {\n        var tempNode = this.nodes[n];\n        var tempNodeId = tempNode.getId();\n\n        if (groupId == tempNodeId) {\n          // we have found the node we want to remove\n          this.nodes.splice(n, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a link to our array of links\n   * @param link the link to add\n   */\n  addLink(link) {\n    if (link != null) {\n      this.links.push(link);\n    }\n  }\n\n  /**\n   * Remove a link from the svg and our array of links\n   * @param link the link to remove\n   */\n  removeLink(link) {\n\n    if (link != null) {\n\n      // remove the link from the svg\n      link.remove();\n\n      // loop through all the links\n      for (var l = 0; l < this.links.length; l++) {\n        var tempLink = this.links[l];\n\n        if (link == tempLink) {\n          // we have found the link we want to remove\n          this.links.splice(l, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all the links from the svg and from our array of links\n   */\n  removeAllLinks() {\n\n    // loop through all the links\n    for (var l = 0; l < this.links.length; l++) {\n      var tempLink = this.links[l];\n\n      // remove the link from the svg\n      tempLink.remove();\n    }\n\n    // clear the links array\n    this.links = [];\n  }\n\n  /**\n   * Called when the mouse moves over a node\n   * @param event the mouse over event\n   */\n  nodeMouseOver(event) {\n\n    // get the node group id\n    var groupId = event.target.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        /*\n         * make the node active so that the border and delete button\n         * shows\n         */\n        this.setActiveNode(node);\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a node\n   * @param event the mouse out event\n   */\n  nodeMouseOut(event) {\n\n    // get the group id of the node\n    var groupId = event.target.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        // make the node inactive by clearing the active node\n        this.clearActiveNode();\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on a node\n   * @param event the mouse down event\n   */\n  nodeMouseDown(event) {\n\n    if (event.target.parentElement != null) {\n\n      // get the group id of the node\n      var groupId = event.target.parentElement.id;\n\n      if (groupId != null) {\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n          // make the node highlighted\n          this.setHighlightedElement(node);\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is released on a node\n   * @param event the mouse up event\n   */\n  nodeMouseUp(event) {\n\n    if (this.drawingLink && this.activeLink != null) {\n      /*\n       * the student is creating a link and has just released the mouse\n       * over a node to connect the destination node of the link\n       */\n\n      // get the group id of the node\n      var groupId = event.target.parentElement.id;\n\n      if (groupId != null) {\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n\n          // get the source node of the link\n          var sourceNode = this.activeLink.sourceNode;\n          var sourceNodeGroupId = sourceNode.getGroupId();\n\n          if (sourceNodeGroupId == groupId) {\n            /*\n             * if the source of the link is the same as the\n             * destination node, we will not connect the link\n             */\n            this.activeLink.remove();\n            this.activeLink = null;\n          } else {\n            /*\n             * the source node is different than the destination\n             * node so we will connect the link\n             */\n\n            // set the destination node of the link\n            this.activeLink.setDestination(node);\n\n            // make the link the active link\n            this.addLink(this.activeLink);\n\n            // highlight the link\n            this.setHighlightedElement(this.activeLink);\n\n            /*\n             * set the link as a newly created link so that if the\n             * student clicks the cancel button, we will remove\n             * the link\n             */\n            this.newlyCreatedLink = this.activeLink;\n\n            // display the modal overlay\n            this.displayLinkTypeChooserModalOverlay = true;\n\n            // handle the student data changing\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n\n    // the link has been connected so we are no longer drawing the link\n    this.drawingLink = false;\n  }\n\n  /**\n   * Called when a link delete button is clicked\n   * @param event the mouse click event\n   * @param link the link to delete\n   */\n  linkDeleteButtonClicked(event, link) {\n\n    if (link != null) {\n\n      // remove the link from our array of links\n      this.removeLink(link);\n\n      // handle the student data changing\n      this.studentDataChanged();\n    }\n\n    // hide the link type chooser\n    this.hideLinkTypeChooser();\n  }\n\n  /**\n   * Called when the mouse is clicked down on a connector. This will start\n   * creating a link.\n   * @param event the mouse down event\n   */\n  connectorMouseDown(event) {\n\n    // set the flag that we are drawing a link\n    this.drawingLink = true;\n\n    // get the connector (the svg circle)\n    var connector = event.target;\n\n    /*\n     * disable node dragging so that the node isn't dragged when the\n     * link head is being dragged\n     */\n    this.disableNodeDragging();\n\n    // get the node\n    var node = this.getNodeByConnectorId(connector.id);\n\n    // get the center of the image\n    var x = node.cx();\n    var y = node.cy();\n\n    // get a new ConceptMapLinkId e.g. 'studentLink3'\n    var newConceptMapLinkId = this.getNewConceptMapLinkId();\n\n    /*\n     * we will not know what the original id is until the student has\n     * selected a link type\n     */\n    var originalId = null;\n\n    // create a link that comes out of the node\n    var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n\n    // set the link mouse events\n    this.setLinkMouseEvents(link);\n\n    // remember the active link\n    this.activeLink = link;\n\n    // flag for determining if we have set the link curvature\n    this.linkCurvatureSet = false;\n\n    // remember the location of the center of the connector\n    this.activeLinkStartX = node.connectorCX();\n    this.activeLinkStartY = node.connectorCY();\n\n    // highlight the link\n    this.setHighlightedElement(link);\n\n    // clear the active node\n    this.clearActiveNode();\n\n    // make the source node the active node\n    this.setActiveNode(node);\n  }\n\n  /**\n   * Set the link mouse events for a link\n   * @param link the ConceptMapLink\n   */\n  setLinkMouseEvents(link) {\n\n    // set the link mouse down listener\n    link.setLinkMouseDown((event) => {\n      this.linkMouseDown(event);\n    });\n\n    // set the link text mouse down listener\n    link.setLinkTextMouseDown((event) => {\n      this.linkTextMouseDown(event);\n    });\n\n    // set the link mouse over listener\n    link.setLinkMouseOver((event) => {\n      this.linkMouseOver(event);\n    });\n\n    // set the link mouse out listener\n    link.setLinkMouseOut((event) => {\n      this.linkMouseOut(event);\n    });\n\n    // set the delete button clicked event for the link\n    link.setDeleteButtonClicked((event) => {\n      this.linkDeleteButtonClicked(event, link);\n    });\n  }\n\n  /**\n   * Called when the mouse is clicked down on a link\n   * @param event the mouse down event\n   */\n  linkMouseDown(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    if (link != null) {\n      // make the link highlighted\n      this.setHighlightedElement(link);\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on a link text\n   * @param event the mouse down event\n   */\n  linkTextMouseDown(event) {\n\n    var linkGroupId = null;\n\n    /*\n     * the link group id is set into the text group in the linkGroupId\n     * variable. the text group hierarchy looks like this\n     * text group > text > tspan\n     * text group > rect\n     */\n    if (event.target.nodeName == 'tspan') {\n      linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n    } else if (event.target.nodeName == 'text') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    } else if (event.target.nodeName == 'rect') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    }\n\n    if (linkGroupId != null) {\n\n      // get the link\n      var link = this.getLinkByGroupId(linkGroupId);\n\n      if (link != null) {\n        // make the link highlighted\n        this.setHighlightedElement(link);\n      }\n    }\n\n  }\n\n  /**\n   * Called when the mouse is over a link\n   * @param event the mouse over event\n   */\n  linkMouseOver(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    if (link != null) {\n      // show the delete button for the link\n      link.showDeleteButton();\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a link\n   * @param event the mouse out event\n   */\n  linkMouseOut(event) {\n\n    // get the group id\n    var groupId = this.getGroupId(event.target);\n\n    // get the link\n    var link = this.getLinkByGroupId(groupId);\n\n    // hide the delete button if the link is not the highlighted link\n    if (link != null && link != this.highlightedElement) {\n      link.hideDeleteButton();\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on the delete button of a node\n   * @param event the mouse down event\n   */\n  nodeDeleteButtonMouseDown(event) {\n\n    if (event.target.parentElement != null) {\n\n      // get the group id\n      var groupId = event.target.parentElement.parentElement.id;\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n\n        // remove the node from our array of nodes\n        this.removeNode(node);\n\n        // handle the student data changing\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse is over a node delete button\n   * @param event the mouse over event\n   */\n  nodeDeleteButtonMouseOver(event) {\n\n    // get the node group id\n    var groupId = event.target.parentElement.parentElement.id;\n\n    if (groupId != null) {\n\n      // get the node\n      var node = this.getNodeByGroupId(groupId);\n\n      if (node != null) {\n        /*\n         * make the node active so that the border and delete button\n         * shows\n         */\n        this.setActiveNode(node);\n      }\n    }\n  }\n\n  /**\n   * Called when the mouse moves out of a node delete button\n   * @param event the mouse over event\n   */\n  nodeDeleteButtonMouseOut(event) {\n\n    // get the group id\n    var groupId = event.target.parentElement.parentElement.id;\n\n    // get the node\n    var node = this.getNodeByGroupId(groupId);\n\n    if (node != null) {\n      // make the node inactive by clearing the active node\n      this.clearActiveNode(node);\n    }\n  }\n\n  /**\n   * Called when the node is dragged\n   * @param event the drag event\n   */\n  nodeDragMove(event) {\n\n    // get the group id\n    var groupId = event.target.id;\n\n    // get the node\n    var node = this.getNodeByGroupId(groupId);\n\n    if (node != null) {\n      // handle the node being dragged\n      node.dragMove(event);\n    }\n\n    // handle the student data changing\n    this.studentDataChanged();\n  }\n\n  /**\n   * Get the group id of an element. All elements of a node or link are\n   * contained in a group. These groups are the children of the main svg\n   * element.\n   * for example a node's image element will be located here\n   * svg > group > image\n   * for example a link's path element will be located here\n   * svg > group > path\n   *\n   * @param element get the group id of this element\n   * @returns the group id\n   */\n  getGroupId(element) {\n\n    var groupId = null;\n    var currentElement = element;\n    var previousId = null;\n\n    // loop until we have reached the svg element\n    while (currentElement != null) {\n\n      if (currentElement.tagName == 'svg') {\n        // base case. we have found the svg element.\n\n        // the group id will be the previous id we saw\n        groupId = previousId;\n\n        // set the current element to null so that the while loop ends\n        currentElement = null;\n      } else {\n        // remember the element id\n        previousId = currentElement.id;\n\n        /*\n         * set the current element to the parent to continue searching\n         * up the hierarchy\n         */\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return groupId;\n  }\n\n  populateStarterConceptMap() {\n    if (this.componentContent.starterConceptMap != null) {\n      this.populateConceptMapData(this.componentContent.starterConceptMap);\n    }\n  }\n\n  /**\n   * Remove all the links and nodes\n   */\n  clearConceptMap() {\n\n    // remove all the links from the svg and the array of links\n    this.removeAllLinks();\n\n    // remove all the nodes from the svg and the array of nodes\n    this.removeAllNodes();\n  }\n\n  /**\n   * Reset the concept map data. We will clear the concept map data and\n   * if there is starter concept map data we will set it into the concept map.\n   */\n  resetConceptMap() {\n\n    // ask the student if they are sure they want to reset their work\n    var message = this.$translate('conceptMap.areYouSureYouWantToResetYourWork');\n    var answer = confirm(message);\n\n    if (answer) {\n      // the student answered yes to reset their work\n\n      // clear the concept map\n      this.clearConceptMap();\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (this.componentContent.starterConceptMap != null) {\n\n        // get the starter concept map\n        var conceptMapData = this.componentContent.starterConceptMap;\n\n        // populate the starter concept map data into the component\n        this.populateConceptMapData(conceptMapData);\n      }\n    }\n  }\n\n  /**\n   * Show the auto feedback that was generated when the student previously\n   * clicked \"Check Answer\".\n   */\n  showAutoFeedback() {\n\n    // show the auto feedback in a modal dialog\n    this.$mdDialog.show(\n      this.$mdDialog.alert()\n      .parent(angular.element(document.querySelector('#' + this.feedbackContainerId)))\n      .clickOutsideToClose(true)\n      .title(this.$translate('FEEDBACK'))\n      .htmlContent(this.autoFeedbackString)\n      .ariaLabel(this.$translate('FEEDBACK'))\n      .ok(this.$translate('CLOSE'))\n    );\n  }\n\n  /**\n   * Snip the concept map by converting it to an image\n   * @param $event the click event\n   */\n  snip($event) {\n    // get the svg element. this will obtain an array.\n    var svgElement = angular.element('#svg_' + this.nodeId + '_' + this.componentId);\n\n    if (svgElement != null && svgElement.length > 0) {\n      // get the svg element\n      svgElement = svgElement[0];\n\n      // get the svg element as a string\n      var serializer = new XMLSerializer();\n      var svgString = serializer.serializeToString(svgElement);\n\n      // find all the images in the svg and replace them with Base64 images\n      this.ConceptMapService.getHrefToBase64ImageReplacements(svgString).then((images) => {\n\n        /*\n         * Loop through all the image objects. Each object contains\n         * an image href and a Base64 image.\n         */\n        for (var i = 0; i < images.length; i++) {\n\n          // get an image object\n          var imagePair = images[i];\n\n          // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n          var imageHref = imagePair.imageHref;\n\n          // get the Base64 image\n          var base64Image = imagePair.base64Image;\n\n          // create a regex to match the image href\n          var imageRegEx = new RegExp(imageHref, 'g');\n\n          /*\n           * replace all the instances of the image href with the\n           * Base64 image\n           */\n          svgString = svgString.replace(imageRegEx, base64Image);\n        }\n\n        // create a canvas to draw the image on\n        var myCanvas = document.createElement('canvas');\n        var ctx = myCanvas.getContext('2d');\n\n        // create an svg blob\n        var svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n        var domURL = self.URL || self.webkitURL || self;\n        var url = domURL.createObjectURL(svg);\n        var image = new Image();\n\n        /*\n         * set the UtilService in a local variable so we can access it\n         * in the onload callback function\n         */\n        var thisUtilService = this.UtilService;\n\n        // the function that is called after the image is fully loaded\n        image.onload = (event) => {\n\n          // get the image that was loaded\n          var image = event.target;\n\n          // set the dimensions of the canvas\n          myCanvas.width = image.width;\n          myCanvas.height = image.height;\n          ctx.drawImage(image, 0, 0);\n\n          // get the canvas as a Base64 string\n          var base64Image = myCanvas.toDataURL('image/png');\n\n          // get the image object\n          var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image, false);\n\n          // create a notebook item with the image populated into it\n          this.NotebookService.addNote($event, imageObject);\n        };\n\n        // set the src of the image so that the image gets loaded\n        image.src = url;\n      });\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedNodes = [];\n      let mergedLinks = [];\n      let backgroundPath = null;\n      let stretchBackground = null;\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState.componentType == 'ConceptMap') {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            let conceptMapData = studentData.conceptMapData;\n\n            if (conceptMapData != null) {\n              if (conceptMapData.nodes != null) {\n                // add the nodes to our merged nodes\n                mergedNodes = mergedNodes.concat(conceptMapData.nodes);\n              }\n\n              if (conceptMapData.links != null) {\n                // add the links to our merged links\n                mergedLinks = mergedLinks.concat(conceptMapData.links);\n              }\n\n              if (conceptMapData.backgroundPath != null &&\n                  conceptMapData.backgroundPath != '') {\n                backgroundPath = conceptMapData.backgroundPath;\n                stretchBackground = conceptMapData.stretchBackground;\n              }\n            }\n          }\n        } else if (componentState.componentType == 'Draw' ||\n            componentState.componentType == 'Embedded' ||\n            componentState.componentType == 'Graph' ||\n            componentState.componentType == 'Label' ||\n            componentState.componentType == 'Table') {\n          let connectedComponent =\n              this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n          if (connectedComponent.importWorkAsBackground === true) {\n            this.setComponentStateAsBackgroundImage(componentState);\n          }\n        }\n      }\n\n      if (this.componentContent.background != null &&\n          this.componentContent.background != '') {\n        // use the background from this component\n        backgroundPath = this.componentContent.background;\n        if (this.componentContent.stretchBackground) {\n          stretchBackground = this.componentContent.stretchBackground;\n        }\n      }\n\n      // set the merged nodes and links into the merged component state\n      mergedComponentState.studentData = {};\n      mergedComponentState.studentData.conceptMapData = {};\n      mergedComponentState.studentData.conceptMapData.nodes = mergedNodes;\n      mergedComponentState.studentData.conceptMapData.links = mergedLinks;\n      mergedComponentState.studentData.conceptMapData.backgroundPath = backgroundPath;\n      if (stretchBackground != null) {\n        mergedComponentState.studentData.conceptMapData.stretchBackground = stretchBackground;\n      }\n    }\n\n    /*\n     * inject the asset path so that the file name is changed to\n     * a relative path\n     * e.g.\n     * \"Sun.png\"\n     * will be changed to\n     * \"/wise/curriculum/108/assets/Sun.png\"\n     */\n    mergedComponentState = this.ProjectService.injectAssetPaths(mergedComponentState);\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * Set the background image on the svg canvas\n   * @param backgroundPath the absolute path to the background image\n   * @param stretchBackground whether to stretch the background to cover the\n   * whole svg background\n   */\n  setBackgroundImage(backgroundPath, stretchBackground) {\n    this.background = backgroundPath;\n    this.stretchBackground = stretchBackground;\n\n    if (stretchBackground) {\n      // stretch the background to fit the whole svg element\n      this.backgroundSize = '100% 100%';\n    } else {\n      // use the original dimensions of the background image\n      this.backgroundSize = '';\n    }\n  }\n}\n\nConceptMapController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapController;\n"]}