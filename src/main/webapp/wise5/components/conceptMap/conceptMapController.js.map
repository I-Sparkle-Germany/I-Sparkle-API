{"version":3,"sources":["conceptMapController.es6"],"names":[],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n        \n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n        \n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n        \n        // the available nodes the students can choose\n        this.availableNodes = [];\n        \n        // the available links the students can choose\n        this.availableLinks = [];\n        \n        // the node instances the students create\n        this.nodes = [];\n        \n        // the link instances the students create\n        this.links = [];\n        \n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n        \n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n        \n        // the selected link type\n        this.selectedLinkType = null;\n        \n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n        \n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n        \n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n        \n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node \n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        \n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n            \n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n            \n            // setup the svg\n            this.setupSVG();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                \n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.setupSVG();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterConceptMap != null) {\n                    /*\n                     * the student has not done any work and there is a starter \n                     * concept map so we will populate the concept map with\n                     * the starter\n                     */\n                    \n                    // get the starter concept map\n                    var conceptMapData = this.componentContent.starterConceptMap;\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n            } else {\n                // the student has work for this component\n                \n                /*\n                 * inject the asset path so that the file name is changed to\n                 * a relative path\n                 * e.g.\n                 * \"Sun.png\"\n                 * will be changed to\n                 * \"/wise/curriculum/108/assets/Sun.png\"\n                 */\n                componentState = this.ProjectService.injectAssetPaths(componentState);\n                \n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n        \n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            \n            if (args != null ) {\n                \n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n                \n                if (annotation != null) {\n                    \n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n                    \n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId && \n                        this.componentId === annotationComponentId) {\n                        \n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n\n                if (conceptMapData != null) {\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n    \n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n        \n        if (conceptMapData != null) {\n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n                    \n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n                    \n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n                    \n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    \n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n                    \n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n                    \n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n                    \n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n                    \n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n                    \n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n            \n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n            \n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n    \n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n        \n        if (this.links != null) {\n            \n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n                \n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n                    \n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n        \n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n        \n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n        \n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n        \n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n        \n        return deferred.promise;\n    };\n    \n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n            \n            studentData.nodes.push(nodeJSON);\n        }\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n            \n            studentData.links.push(linkJSON);\n        }\n        \n        return studentData;\n    }\n    \n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        \n        var performCRaterScoring = false;\n        \n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n            \n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n            \n            /*\n             * display a dialog message while the student waits for their work \n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n            \n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n                \n                if (result != null) {\n                    \n                    // get the CRater response\n                    var data = result.data;\n                    \n                    if (data != null) {\n                        \n                        /*\n                         * annotations we put in the component state will be \n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n                        \n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n                        \n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n                            \n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n                            \n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            \n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n                                \n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n                \n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since \n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n                \n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n        \n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n            \n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * A node up button was clicked in the authoring tool so we will move the \n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n        \n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n            \n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n            \n            if (nodes != null) {\n                \n                // get the node at the given index\n                var node = nodes[index];\n                \n                // remove the node\n                nodes.splice(index, 1);\n                \n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n        \n        // check if the node is at the bottom\n        if (index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n            \n            if (nodes != null) {\n                \n                // get the node at the given index\n                var node = nodes[index];\n                \n                // remove the node\n                nodes.splice(index, 1);\n                \n                // insert the node back in one index ahead\n                nodes.splice(index + 1, 0, node);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        if (nodes != null) {\n            \n            // get the node\n            var node = nodes[index];\n            \n            if (node != null) {\n                \n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n                \n                // confirm with the author that they really want to delete the node\n                var answer = confirm('Are you sure you want to delete this node?\\n\\nFile Name: ' + nodeFileName + '\\nLabel: ' + nodeLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link up button was clicked in the authoring tool so we will move the \n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n        \n        // check if the link is at the top\n        if (index != 0) {\n            \n            // get the links\n            var links = this.authoringComponentContent.links;\n            \n            if (links != null) {\n                \n                // get a link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link down button was clicked in the authoring tool so we will move the \n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n        \n        // check if the link is at the bottom\n        if (index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            // get the links\n            var links = this.authoringComponentContent.links;\n            \n            if (links != null) {\n                \n                // get the link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        if (links != null) {\n            \n            // get a link\n            var link = links[index];\n            \n            if (link != null) {\n                \n                // get the link label\n                var linkLabel = link.label;\n                \n                // confirm with the author that they really want to delete the link\n                var answer = confirm('Are you sure you want to delete this link?\\n\\nLabel: ' + linkLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n        \n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n        \n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // add the new node\n        nodes.push(newNode);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n        \n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n        \n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // add the new link\n        links.push(newLink);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'node' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var nodeId = link.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'link' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n        \n        if (this.highlightedElement != null && \n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n            \n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n            \n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n            \n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n        \n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n        \n        return linksTitle;\n    }\n    \n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n        \n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n        \n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        var left = leftNumber + 'px';\n        var top = topNumber + 'px';\n        \n        if (this.mode === 'authoring') {\n            /*\n             * if we are in authoring mode we need to include the offset of\n             * the container for some reason.\n             * TODO: figure out why the offset is required in authoring mode\n             * but not in student mode.\n             */\n            \n            // get the concept map container\n            var conceptMapContainer = angular.element('#conceptMapContainer');\n            \n            // get the offset of the container relative to the whole page\n            var offset = conceptMapContainer.offset();\n            \n            // get the left and top of the offset\n            var offsetLeft = offset.left;\n            var offsetTop = offset.top;\n            \n            // add the offset to the left and top values\n            left = leftNumber + offsetLeft + 'px';\n            top = topNumber + offsetTop + 'px';\n        }\n        \n        this.linkTypeChooserStyle['top'] = top;\n        this.linkTypeChooserStyle['left'] = left;\n        \n        this.displayLinkTypeChooser = true;\n    }\n    \n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n        \n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        \n        if (!this.$scope.$$phase) {\n            this.$scope.$apply();\n        }\n    }\n    \n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg1 element in the svg.js world\n        this.draw = SVG('svg1');\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n        \n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n        \n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n        \n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n        \n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg1 element in the angular world\n        var svg1 = angular.element('#svg1');\n        \n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg1[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n            \n            this.addedDragOverListener = true;\n        }\n        \n        /*\n         * check if we have already added the dop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg1[0].addEventListener('drop', (event) => {\n                \n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n            \n            this.addedDropListener = true;\n        }\n        \n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n        \n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n            \n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n        \n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        // get the bounding rectangle of the svg element\n        var boundingClientRect = angular.element('#svg1')[0].getBoundingClientRect();\n        var offsetLeft = boundingClientRect.left;\n        var offsetTop = boundingClientRect.top;\n        \n        // add the values together to obtain the absolute left and top positions\n        var left = leftNumber + offsetLeft + 'px';\n        var top = topNumber + offsetTop + 'px';\n        \n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'top': top,\n            'left': left,\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n        \n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n        \n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n        \n        var conceptMapContainer = angular.element('#conceptMapContainer');\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n        \n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n        \n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n        \n        var selectNodeBarWidth = null;\n        var svg1Width = null;\n        \n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n        \n        // get the width of the svg element\n        var svg1WidthString = angular.element(document.getElementById('svg1')).css('width');\n        \n        if (selectNodeBarWidthString != null && svg1WidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svg1Width = parseInt(svg1WidthString.replace('px', ''));\n        }\n        \n        var overlayWidth = null;\n        \n        if (selectNodeBarWidth != null && svg1Width != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svg1Width;\n        }\n        \n        return overlayWidth;\n    }\n    \n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n        \n        var selectNodeBarHeight = null;\n        var svg1Height = null;\n        \n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n        \n        // get the height of the svg element\n        var svg1HeightString = angular.element(document.getElementById('svg1')).css('height');\n        \n        if (selectNodeBarHeightString != null && svg1HeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svg1Height = parseInt(svg1HeightString.replace('px', ''));\n        }\n        \n        var overlayHeight = null;\n        \n        if (selectNodeBarHeight != null && svg1Height != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svg1Height);\n        }\n        \n        return overlayHeight;\n    }\n    \n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n        \n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n        \n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n    \n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n        \n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n        \n        // we are no longer drawing a link\n        this.drawingLink = false;\n        \n        // there is no longer an active link\n        this.activeLink = null;\n        \n        // enable node draggin\n        this.enableNodeDragging();\n        \n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n    \n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n        \n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n            \n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n            \n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n            \n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n            \n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center \n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by \n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n                \n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n                \n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n                \n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n            \n            var isDragging = true;\n            \n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n    \n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n            \n            // show the border for the node\n            node.showBorder();\n            \n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n    \n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n        \n        this.activeNode = null;\n    }\n    \n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n        \n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n        \n        var matrix = null;\n        \n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n            matrix = event.target.getCTM();\n        } else if (event.target.tagName == 'circle') {\n            /*\n             * the target is a node connector circle so we will get the matrix\n             * of the node group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else if (event.target.tagName == 'image') {\n            /*\n             * the target is a node image so we will get the matrix of the node\n             * group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else {\n            /*\n             * the target is something else so we will get the matrix of its\n             * parent\n             */\n            matrix = event.target.parentElement.getCTM();\n        }\n        \n        // get the x and y coordinates of the matrix element\n        var e = matrix.e;\n        var f = matrix.f;\n        \n        /*\n         * add the offset values to the coordinate to get the coordinate\n         * relative to the svg element\n         */\n        var x = e + offsetX;\n        var y = f + offsetY;\n        \n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n        \n        return returnObject;\n    }\n    \n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n        \n        // remember the selected node\n        this.selectedNode = node;\n        \n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n    \n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n        \n        // get the selected node\n        var selectedNode = this.selectedNode;\n        \n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n            \n            // get the node name\n            var label = selectedNode.label;\n            \n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n            \n            // get the original authored id\n            var originalId = selectedNode.id;\n            \n            // get the position we should drop the node at\n            var x = event.offsetX - this.tempOffsetX;\n            var y = event.offsetY - this.tempOffsetY;\n            \n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n            \n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n            \n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n            \n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n            \n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // enable node dragging\n        this.enableNodeDragging();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.getId();\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var linkId = link.getId();\n                \n                if (linkId != null) {\n                    \n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n                    \n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n        \n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n        \n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n        \n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n        \n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n        \n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n        \n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n        \n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n        \n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n        \n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n    \n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n        \n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n        \n        if (element != null) {\n            \n            // remember the highlighted element\n            this.highlightedElement = element;\n            \n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n            \n            // show the delete button for the element\n            element.showDeleteButton();\n            \n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n                \n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // show the link type chooser\n                this.showLinkTypeChooser();\n                \n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n    \n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n        \n        if (this.highlightedElement != null) {\n            \n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n                \n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n            \n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n            \n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n            \n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n    \n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get the node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    \n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n                    \n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as \n     * creating a link.\n     */\n    disableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n    \n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n        \n        if (node != null) {\n            \n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n            \n            if (outgoingLinks != null) {\n                \n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n                \n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n                    \n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n            \n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n            \n            if (incomingLinks != null) {\n                \n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n                \n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n                    \n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n            \n            // remove the node from the svg\n            node.remove();\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            // remove the node from the svg\n            tempNode.remove();\n        }\n        \n        // clear the nodes array\n        this.nodes = [];\n    }\n    \n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n        \n        if (id != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n                \n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n        \n        if (id != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n                \n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n                \n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n        \n        if (connectorId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n                \n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId \n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n            \n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n    \n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n        \n        if (link != null) {\n            \n            // remove the link from the svg\n            link.remove();\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                \n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n            \n            // remove the link from the svg\n            tempLink.remove();\n        }\n        \n        // clear the links array\n        this.links = [];\n    }\n    \n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n        \n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n        \n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    \n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n                    \n                    if (sourceNodeGroupId == groupId) {\n                        /* \n                         * if the source of the link is the same as the \n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n                        \n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n                        \n                        // make the link the active link\n                        this.addLink(this.activeLink);\n                        \n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n                        \n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n                        \n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n                        \n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n        \n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n    \n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n        \n        if (link != null) {\n            \n            // remove the link from our array of links\n            this.removeLink(link);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n        \n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n        \n        // get the connector (the svg circle)\n        var connector = event.target;\n        \n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n        \n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n        \n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n        \n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n        \n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n        \n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n        \n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n        \n        // remember the active link\n        this.activeLink = link;\n        \n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n        \n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n        \n        // highlight the link\n        this.setHighlightedElement(link);\n        \n        // clear the active node\n        this.clearActiveNode();\n        \n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n    \n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n        \n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n        \n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n        \n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n        \n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                \n                // remove the node from our array of nodes\n                this.removeNode(node);\n                \n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n        \n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n    \n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n        \n        // get the group id\n        var groupId = event.target.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n        \n        // handle the student data changing\n        this.studentDataChanged();\n    }\n    \n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     * \n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n        \n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n        \n        // loop until we have reached the svg element\n        while (currentElement != null) {\n            \n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n                \n                // the group id will be the previous id we saw\n                groupId = previousId;\n                \n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n                \n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n        \n        // get the concept map data\n        var conceptMapData = this.getConceptMapData();\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = conceptMapData;\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = null;\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n        \n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n        \n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n};\n\nConceptMapController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default ConceptMapController;\n"]}