{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$anchorScroll","$filter","$injector","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","isSnipButtonVisible","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","shouldOptions","label","autoFeedbackString","submitCounter","svgId","conceptMapContainerId","selectNodeBarId","feedbackContainerId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","componentState","idInfo","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","document","getElementById","setupSVG","angular","initializeSVG","conceptMapController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","clientSaveTime","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","background","authoringViewComponentChanged","indexOf","node","authoringViewGetNodeById","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","hide","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterConceptMap","conceptMapData","populateConceptMapData","maxSubmitCount","score","data","maxAutoScore","comment","enableNodeDragging","calculateDisabled","$parent","nodeController","registerComponentController","studentData","processLatestSubmit","n","length","instanceId","originalId","filePath","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","maxScore","showAutoFeedback","feedback","show","parent","element","querySelector","clickOutsideToClose","title","htmlContent","ariaLabel","ok","isLockAfterSubmit","getComponentId","createNewComponentState","response","getStudentResponse","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","parseFloat","autoGrader","scoreAnnotation","createAutoScoreAnnotation","push","commentAnnotation","createAutoCommentAnnotation","componentType","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","linkJSON","substring","lastIndexOf","backgroundPath","stretchBackground","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","index","nodeFileName","nodeLabel","linkLabel","authoringGetNewConceptMapNodeId","newNode","authoringGetNewConceptMapLinkId","newLink","nextAvailableNodeIdNumber","usedNumbers","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","otherNodeLabel","newRule","name","categories","comparison","number","not","setShowSubmitButtonValue","ruleName","categoryName","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnSave","isCRaterScoreOnSubmit","isCRaterScoreOnChange","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","setColor","setOriginalId","hideLinkTypeChooser","clearHighlightedElement","linksTitle","setLinkTypeChooserOverlayStyle","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","backgroundSize","getModalWidth","getModalHeight","overlayWidth","conceptMapContainer","offset","offsetLeft","left","offsetTop","top","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svgWidth","selectNodeBarWidthString","css","svgWidthString","selectNodeBarHeight","svgHeight","selectNodeBarHeightString","svgHeightString","overlayHeight","remove","tagName","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","getId","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","clearConceptMap","removeAllLinks","removeAllNodes","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","params","popup","$broadcast","conceptMapNodeId","isNotebookEnabled","svgElement","hideIFrames","hash","serializer","XMLSerializer","svgString","serializeToString","getHrefToBase64ImageReplacements","images","i","imagePair","imageHref","base64Image","imageRegEx","RegExp","myCanvas","ctx","getContext","Blob","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","showIFrames","src","newConnectedComponent","updateOn","connectedComponents","tags","tag","c","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedNodes","mergedLinks","concat","connectedComponentType","authoringConnectedComponentComponentIdChanged","a","allowedConnectedComponentType","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($anchorScroll,\n                $filter,\n                $injector,\n                $location,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$location = $location;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // whether the snip table button is shown or not\n        this.isSnipButtonVisible = true;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n\n        // the available nodes the students can choose\n        this.availableNodes = [];\n\n        // the available links the students can choose\n        this.availableLinks = [];\n\n        // the node instances the students create\n        this.nodes = [];\n\n        // the link instances the students create\n        this.links = [];\n\n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n\n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n\n        // the selected link type\n        this.selectedLinkType = null;\n\n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n\n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n\n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n\n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node\n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'ConceptMap'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        // the options for authoring the should or should not value in rules\n        this.shouldOptions = [\n            {\n                value: false, label: this.$translate('conceptMap.should')\n            },\n            {\n                value: true, label: this.$translate('conceptMap.shouldNot')\n            }\n        ];\n\n        // the auto feedback string\n        this.autoFeedbackString = '';\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the id of the svg and other display elements\n            this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n            this.conceptMapContainerId = 'conceptMapContainer_' + this.nodeId + '_' + this.componentId;\n            this.selectNodeBarId = 'selectNodeBar_' + this.nodeId + '_' + this.componentId;\n            this.feedbackContainerId = 'feedbackContainer_' + this.nodeId + '_' + this.componentId;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n\n                let componentState = this.$scope.componentState;\n\n                if (componentState) {\n                    // set ids for the svg and other display elements using the componentStateId (so we have unique ids when showing revisions)\n                    /*\n                     * the student has work for this component so we will use\n                     * the node id, component id, and workgroup id, and\n                     * componentStateId for the svg id\n                     */\n                    let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId + '_' + componentState.id;\n                    if (this.mode === 'gradingRevision') {\n                        idInfo = '_gradingRevision_' + idInfo\n                        this.svgId = 'svg_' + idInfo;\n                        this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n                        this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n                        this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n                    } else {\n                        this.svgId = 'svg_' + idInfo;\n                        this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n                        this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n                        this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n                    }\n                } else {\n                    /*\n                     * the student does not have any work for this component so\n                     * we will use the node id, component id, and workgroup id\n                     * for the svg id\n                     */\n                    let idInfo = this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n                    this.svgId = 'svg_' + idInfo;\n                    this.conceptMapContainerId = 'conceptMapContainer_' + idInfo;\n                    this.selectNodeBarId = 'selectNodeBar_' + idInfo;\n                    this.feedbackContainerId = 'feedbackContainer_' + idInfo;\n\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipButtonVisible = false;\n                this.isDisabled = true;\n\n                var componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * the student does not have any work for this component so\n                     * we will use the node id, component id, and workgroup id\n                     * for the svg id\n                     */\n                    this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n                } else {\n                    /*\n                     * the student has work for this component so we will use\n                     * the node id, component id, and component state id\n                     * for the svg id\n                     */\n                    this.svgId = 'svgOnlyShowWork_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n                }\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.width = this.componentContent.width;\n                    this.height = this.componentContent.height;\n\n                    /*\n                     * make sure the SVG element can be accessed. we need to\n                     * perform this check because this watch is getting fired\n                     * before angular sets the svgId on the svg element. if\n                     * setupSVG() is called before the svgId is set on the svg\n                     * element, we will get an error.\n                     */\n                    if (document.getElementById(this.svgId) != null) {\n                        this.setupSVG();\n                    }\n                }.bind(this), true);\n            }\n\n            /*\n             * Call the initializeSVG() after a timeout so that angular has a\n             * chance to set the svg element id before we start using it. If we\n             * don't wait for the timeout, the svg id won't be set when we try\n             * to start referencing the svg element.\n             */\n            this.$timeout(angular.bind(this, this.initializeSVG));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'background') {\n                                // the target is the background image\n\n                                // set the background file name\n                                this.authoringComponentContent.background = fileName;\n\n                                // the authoring component content has changed so we will save the project\n                                this.authoringViewComponentChanged();\n                            } else if (args.target != null && args.target.indexOf('node') == 0) {\n                                // the target is a node image\n\n                                // get the concept map node\n                                var node = this.authoringViewGetNodeById(args.target);\n\n                                if (node != null) {\n                                    // set the file name of the node\n                                    node.fileName = fileName;\n                                }\n\n                                // the authoring component content has changed so we will save the project\n                                this.authoringViewComponentChanged();\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Initialize the SVG\n     */\n    initializeSVG() {\n\n        // setup the svg\n        this.setupSVG();\n\n        var componentState = null;\n\n        // set whether rich text is enabled\n        this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        // get the component state from the scope\n        componentState = this.$scope.componentState;\n\n        if (this.mode == 'student') {\n            if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                // we will show work from another component\n                this.handleConnectedComponents();\n            }  else if (this.ConceptMapService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                /*\n                 * the student has work so we will populate the work into this\n                 * component\n                 */\n\n                /*\n                 * inject the asset path so that the file name is changed to\n                 * a relative path\n                 * e.g.\n                 * \"Sun.png\"\n                 * will be changed to\n                 * \"/wise/curriculum/108/assets/Sun.png\"\n                 */\n                componentState = this.ProjectService.injectAssetPaths(componentState);\n\n                this.setStudentWork(componentState);\n            } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                // we will import work from another component\n                this.handleConnectedComponents();\n            } else if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterConceptMap != null) {\n                    /*\n                     * the student has not done any work and there is a starter\n                     * concept map so we will populate the concept map with\n                     * the starter\n                     */\n\n                    // get the starter concept map\n                    var conceptMapData = this.componentContent.starterConceptMap;\n\n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n            }\n        } else {\n            /*\n             * inject the asset path so that the file name is changed to\n             * a relative path\n             * e.g.\n             * \"Sun.png\"\n             * will be changed to\n             * \"/wise/curriculum/108/assets/Sun.png\"\n             */\n            componentState = this.ProjectService.injectAssetPaths(componentState);\n\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n            /*\n             * the student has used up all of their chances to submit so we\n             * will disable the submit button\n             */\n            this.isSubmitButtonDisabled = true;\n        }\n\n        // populate the previous feedback\n        if (this.latestAnnotations != null) {\n\n            var autoFeedbackString = \"\";\n\n            // obtain the previous score annotation if any\n            if (this.latestAnnotations.score != null) {\n\n                // get the annotation data\n                var data = this.latestAnnotations.score.data;\n\n                if (data != null) {\n\n                    // get the score and max auto score\n                    var score = data.value;\n                    var maxAutoScore = data.maxAutoScore;\n\n                    autoFeedbackString += this.$translate('SCORE') + \": \" + score;\n\n                    if (maxAutoScore != null && maxAutoScore != '') {\n                        // show the max score as the denominator\n                        autoFeedbackString += \"/\" + maxAutoScore;\n                    }\n                }\n            }\n\n            // obtain the previous comment annotation if any\n            if (this.latestAnnotations.comment != null) {\n\n                // get the annotation data\n                var data = this.latestAnnotations.comment.data;\n\n                if (data != null) {\n                    if (autoFeedbackString != \"\") {\n                        // add a new line if the result string is not empty\n                        autoFeedbackString += \"<br/>\";\n                    }\n\n                    // get the comment\n                    var comment = data.value;\n                    autoFeedbackString += this.$translate('FEEDBACK') + \": \" + comment;\n                }\n            }\n\n            /*\n             * set the previous auto feedback into the field that is used\n             * to display the auto feedback to the student when they click\n             * on the show feedback button\n             */\n            this.autoFeedbackString = autoFeedbackString;\n        }\n\n        // make the nodes draggable\n        this.enableNodeDragging();\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n\n        if (this.$scope.$parent.nodeController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                if (conceptMapData != null) {\n\n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n\n        if (conceptMapData != null) {\n\n            // clear the existing nodes in the student view\n            this.nodes = [];\n\n            var nodes = conceptMapData.nodes;\n\n            if (nodes != null) {\n\n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n\n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n\n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n\n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n\n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n\n            // clear the existing links in the student view\n            this.links = [];\n\n            var links = conceptMapData.links;\n\n            if (links != null) {\n\n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n\n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n\n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n\n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n\n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n\n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n\n            /*\n             * move the link text group to the front so that they are on top\n             * of links\n             */\n            this.moveLinkTextToFront();\n\n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n\n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n\n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n\n        if (this.nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var node = this.nodes[n];\n\n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n\n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n\n        if (this.links != null) {\n\n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n\n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n\n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n\n                    // the student does not have any more chances to submit\n                    alert(this.$translate('conceptMap.youHaveNoMoreChances'));\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('conceptMap.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    performSubmit = confirm(message);\n                } else if (numberOfSubmitsLeft > 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('conceptMap.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    performSubmit = confirm(message);\n                }\n            }\n\n            if (performSubmit) {\n                // increment the submit counter\n                this.submitCounter++;\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    //this.isDisabled = true;\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                // get the custom rule evaluator code that was authored\n                var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n\n                // get the component content\n                var componentContent = this.componentContent;\n\n                // get the student concept map\n                var conceptMapData = this.getConceptMapData();\n\n                var thisConceptMapService = this.ConceptMapService;\n\n                // the result will be stored in this variable\n                var thisResult = {};\n\n                /*\n                 * create the any function that can be called in the custom rule\n                 * evaluator code. the arguments to the any function are rule names.\n                 * for example if we are looking for any of the links below\n                 * Sun (Infrared Radiation) Space\n                 * Sun (Heat) Space\n                 * Sun (Solar Radiation) Space\n                 * we will call the any function like this\n                 * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n                 * these dynamic arguments will be placed in the arguments variable\n                 */\n                var any = function() {\n                    return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n                };\n\n                /*\n                 * create the all function that can be called in the custom rule\n                 * evaluator code. the arguments to the all function are rule names.\n                 * for example if we are looking for all of the links below\n                 * Sun (Infrared Radiation) Space\n                 * Sun (Heat) Space\n                 * Sun (Solar Radiation) Space\n                 * we will call the any function like this\n                 * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n                 * these dynamic arguments will be placed in the arguments variable\n                 */\n                var all = function() {\n                    return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n                }\n\n                /*\n                 * create the setResult function that can be called in the custom rule\n                 * evaluator code\n                 */\n                var setResult = function(result) {\n                    thisResult = result;\n                }\n\n                // run the custom rule evaluator\n                eval(customRuleEvaluator);\n\n                // remember the auto feedback result\n                this.autoFeedbackResult = thisResult;\n\n                var resultString = \"\";\n\n                if (this.componentContent.showAutoScore && thisResult.score != null) {\n                    // display the score\n                    resultString += this.$translate('SCORE') + \": \" + thisResult.score;\n\n                    if (this.componentContent.maxScore != null && this.componentContent.maxScore != '') {\n                        // show the max score as the denominator\n                        resultString += \"/\" + this.componentContent.maxScore;\n                    }\n                }\n\n                if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n                    if (resultString != \"\") {\n                        // add a new line if the result string is not empty\n                        resultString += \"<br/>\";\n                    }\n\n                    // display the feedback\n                    resultString += this.$translate('FEEDBACK') + \": \" + thisResult.feedback;\n                }\n\n                if (resultString != \"\") {\n                    // show the auto feedback in a modal dialog\n                    this.$mdDialog.show(\n                        this.$mdDialog.alert()\n                        .parent(angular.element(document.querySelector('#' + this.feedbackContainerId)))\n                        .clickOutsideToClose(true)\n                        .title(this.$translate('FEEDBACK'))\n                        .htmlContent(resultString)\n                        .ariaLabel(this.$translate('FEEDBACK'))\n                        .ok(this.$translate('CLOSE'))\n                    );\n                }\n\n                // remember the feedback string\n                this.autoFeedbackString = resultString;\n\n                this.isSubmit = true;\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in the authoring view so we will set the\n                     * latest score and comment annotations manually\n                     */\n\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                // tell the parent node that this component wants to submit\n                this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    };\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n\n        // the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        if (this.isSubmit) {\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n\n            if (this.autoFeedbackResult != null) {\n                // there is auto feedback\n\n                if (this.autoFeedbackResult.score != null || this.autoFeedbackResult.feedback != null) {\n                    // there is an auto score or auto feedback\n\n                    // get the values used to create an annotation\n                    var runId = this.ConfigService.getRunId();\n                    var periodId = this.ConfigService.getPeriodId();\n                    var nodeId = this.nodeId;\n                    var componentId = this.componentId;\n                    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n                    // create an array of annotations to be saved with the component state\n                    componentState.annotations = [];\n\n                    if (this.autoFeedbackResult.score != null) {\n                        // there is an auto score\n\n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = parseFloat(this.autoFeedbackResult.score);\n                        data.autoGrader = 'conceptMap';\n\n                        if (this.componentContent.maxScore != null) {\n                            data.maxAutoScore = parseFloat(this.componentContent.maxScore);\n                        }\n\n                        // create the auto score annotation\n                        var scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n                        // add the annotation to the component state\n                        componentState.annotations.push(scoreAnnotation);\n\n                        if (this.mode === 'authoring') {\n                            if (this.latestAnnotations == null) {\n                                this.latestAnnotations = {};\n                            }\n\n                            /*\n                             * we are in the authoring view so we will set the\n                             * latest score annotation manually\n                             */\n                            this.latestAnnotations.score = scoreAnnotation;\n                        }\n                    }\n\n                    if (this.autoFeedbackResult.feedback != null) {\n                        // there is auto feedback\n\n                        // create the data object for the annotation\n                        var data = {};\n                        data.value = this.autoFeedbackResult.feedback;\n                        data.autoGrader = 'conceptMap';\n\n                        // create the auto score annotation\n                        var commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n                        // add the annotation to the component state\n                        componentState.annotations.push(commentAnnotation);\n\n                        if (this.mode === 'authoring') {\n                            if (this.latestAnnotations == null) {\n                                this.latestAnnotations = {};\n                            }\n\n                            /*\n                             * we are in the authoring view so we will set the\n                             * latest comment annotation manually\n                             */\n                            this.latestAnnotations.comment = commentAnnotation;\n                        }\n                    }\n                }\n            }\n        }\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        // set the component type\n        componentState.componentType = 'ConceptMap';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n\n            studentData.nodes.push(nodeJSON);\n        }\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n\n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n\n            studentData.links.push(linkJSON);\n        }\n\n        // set the background data into the student data\n        if (this.componentContent.background != null) {\n            var background = this.componentContent.background;\n\n            // this is the background file name e.g. background.png\n            studentData.background = background.substring(background.lastIndexOf('/') + 1);\n\n            // this is the background path e.g. /wise/curriculum/108/assets/background.png\n            studentData.backgroundPath = background;\n\n            // whether to stretch the background to fill the svg element\n            studentData.stretchBackground = this.componentContent.stretchBackground;\n        }\n\n        return studentData;\n    }\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * inject the asset paths so that the node file names change from\n                         * 'Sun.png' to '/wise/curriculum/129/assets/Sun.png'\n                         */\n                        populatedComponentState = this.ProjectService.injectAssetPaths(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * A node up button was clicked in the authoring tool so we will move the\n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n\n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n\n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n\n            if (nodes != null) {\n\n                // get the node at the given index\n                var node = nodes[index];\n\n                // remove the node\n                nodes.splice(index, 1);\n\n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        // check if the node is at the bottom\n        if (nodes != null && index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n\n            // get the node at the given index\n            var node = nodes[index];\n\n            // remove the node\n            nodes.splice(index, 1);\n\n            // insert the node back in one index ahead\n            nodes.splice(index + 1, 0, node);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        if (nodes != null) {\n\n            // get the node\n            var node = nodes[index];\n\n            if (node != null) {\n\n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n\n                // confirm with the author that they really want to delete the node\n                var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisNode', { nodeFileName: nodeFileName, nodeLabel: nodeLabel}));\n\n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link up button was clicked in the authoring tool so we will move the\n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n\n        // check if the link is at the top\n        if (index != 0) {\n\n            // get the links\n            var links = this.authoringComponentContent.links;\n\n            if (links != null) {\n\n                // get a link\n                var link = links[index];\n\n                if (link != null) {\n\n                    // remove the link\n                    links.splice(index, 1);\n\n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link down button was clicked in the authoring tool so we will move the\n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        // check if the link is at the bottom\n        if (links != null && index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n\n            if (links != null) {\n\n                // get the link\n                var link = links[index];\n\n                if (link != null) {\n\n                    // remove the link\n                    links.splice(index, 1);\n\n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        if (links != null) {\n\n            // get a link\n            var link = links[index];\n\n            if (link != null) {\n\n                // get the link label\n                var linkLabel = link.label;\n\n                // confirm with the author that they really want to delete the link\n                var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisLink', { linkLabel: linkLabel}));\n\n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n\n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n\n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n\n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n\n        // add the new node\n        nodes.push(newNode);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the concept map node with the given id\n     * @param nodeId the concept map node id\n     * @return the concept map node with the given node id\n     */\n    authoringViewGetNodeById(nodeId) {\n\n        if (nodeId != null &&\n            this.authoringComponentContent != null &&\n            this.authoringComponentContent.nodes != null) {\n\n            // loop through all the concept map nodes\n            for (var n = 0; n < this.authoringComponentContent.nodes.length; n++) {\n                var node = this.authoringComponentContent.nodes[n];\n\n                if (node != null) {\n                    if (nodeId === node.id) {\n                        // we have found the concept map node that we want\n                        return node;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n\n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n\n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n\n        // get the links\n        var links = this.authoringComponentContent.links;\n\n        // add the new link\n        links.push(newLink);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n\n        var nextAvailableNodeIdNumber = 1;\n\n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n\n            if (node != null) {\n\n                // get the node id\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'node' + nextAvailableNodeIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n\n        var nextAvailableLinkIdNumber = 1;\n\n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n\n            if (link != null) {\n\n                // get the node id\n                var nodeId = link.id;\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'link' + nextAvailableLinkIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * A \"with link\" checkbox was checked\n     * @param ruleIndex the index of the rule\n     */\n    authoringRuleLinkCheckboxClicked(ruleIndex) {\n\n        // get the rule that was checked\n        var rule = this.authoringComponentContent.rules[ruleIndex];\n\n        if (rule != null) {\n            if (rule.type == 'node') {\n                /*\n                 * the rule has been set to 'node' instead of 'link' so we\n                 * will remove the link label and other node label\n                 */\n\n                delete rule.linkLabel;\n                delete rule.otherNodeLabel;\n            }\n        }\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a new rule\n     */\n    authoringAddRule() {\n\n        // create the new rule\n        var newRule = {};\n        newRule.name = \"\";\n        newRule.type = \"node\";\n        newRule.categories = [];\n        newRule.nodeLabel = \"\";\n        newRule.comparison = \"exactly\";\n        newRule.number = 1;\n        newRule.not = false;\n\n        // add the rule to the array of rules\n        this.authoringComponentContent.rules.push(newRule);\n\n        var showSubmitButton = false;\n\n        if (this.authoringComponentContent.rules.length > 0) {\n            // there are scoring rules so we will show the submit button\n            showSubmitButton = true;\n        }\n\n        // set the value of the showSubmitButton field\n        this.setShowSubmitButtonValue(showSubmitButton);\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a rule up\n     * @param index the index of the rule\n     */\n    authoringViewRuleUpButtonClicked(index) {\n\n        // check if the rule is at the top\n        if (index != 0) {\n            // the rule is not at the top so we can move it up\n\n            // get the rules\n            var rules = this.authoringComponentContent.rules;\n\n            if (rules != null) {\n\n                // get the rule at the given index\n                var rule = rules[index];\n\n                // remove the rule\n                rules.splice(index, 1);\n\n                // insert the rule back in one index back\n                rules.splice(index - 1, 0, rule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a rule down\n     * @param index the index of the rule\n     */\n    authoringViewRuleDownButtonClicked(index) {\n\n        // get the rules\n        var rules = this.authoringComponentContent.rules;\n\n        // check if the rule is at the bottom\n        if (rules != null && index != rules.length - 1) {\n            // the rule is not at the bottom so we can move it down\n\n            // get the rule at the given index\n            var rule = rules[index];\n\n            // remove the rule\n            rules.splice(index, 1);\n\n            // insert the rule back in one index ahead\n            rules.splice(index + 1, 0, rule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /*\n     * Delete a rule\n     * @param index the index of the rule to delete\n     */\n    authoringViewRuleDeleteButtonClicked(index) {\n\n        // get the rule\n        var rule = this.authoringComponentContent.rules[index];\n\n        if (rule != null) {\n\n            // get the rule name\n            var ruleName = rule.name;\n\n            // confirm with the author that they really want to delete the rule\n            var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteThisRule', { ruleName: ruleName }));\n\n            if (answer) {\n                // remove the rule at the given index\n                this.authoringComponentContent.rules.splice(index, 1);\n\n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n\n        var showSubmitButton = false;\n\n        if (this.authoringComponentContent.rules.length > 0) {\n            // there are scoring rules so we will show the submit button\n            showSubmitButton = true;\n        }\n\n        // set the value of the showSubmitButton field\n        this.setShowSubmitButtonValue(showSubmitButton);\n    }\n\n    /**\n     * Add a category to a rule\n     * @param rule the rule\n     */\n    authoringViewAddCategoryClicked(rule) {\n\n        if (rule != null) {\n            // add an empty category name\n            rule.categories.push(\"\");\n        }\n\n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a category from a rule\n     * @param rule delete a category from this rule\n     * @param index the index of the category\n     */\n    authoringViewDeleteCategoryClicked(rule, index) {\n\n        if (rule != null) {\n\n            // get the rule name\n            var ruleName = rule.name;\n\n            // get the category name\n            var categoryName = rule.categories[index];\n\n            // confirm with the author that they really want to delete the category from the rule\n            var answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheCategory' , { ruleName: ruleName, categoryName: categoryName }));\n\n            if (answer) {\n                // remove the category at the index\n                rule.categories.splice(index, 1);\n\n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n\n        if (this.highlightedElement != null &&\n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n\n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n\n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n\n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n\n        // make the link not highlighted\n        this.clearHighlightedElement();\n    }\n\n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n\n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n\n        return linksTitle;\n    }\n\n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n\n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n\n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        this.linkTypeChooserStyle['left'] = '600px';\n        this.linkTypeChooserStyle['top'] = '20px';\n\n        this.displayLinkTypeChooser = true;\n    }\n\n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n\n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n\n        if (!this.$scope.$$phase) {\n            // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n            // and it still seems to work. Do we need this line?\n            // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n            //this.$scope.$apply();\n        }\n    }\n\n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg element in the svg.js world\n        this.draw = SVG(this.svgId);\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n\n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n\n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n\n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n\n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg element in the angular world\n        var svg = angular.element('#' + this.svgId);\n\n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n\n            this.addedDragOverListener = true;\n        }\n\n        /*\n         * check if we have already added the drop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg[0].addEventListener('drop', (event) => {\n\n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n\n            this.addedDropListener = true;\n        }\n\n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n\n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n\n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n\n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n\n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'left': '600px',\n            'top': '20px',\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n\n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n\n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n\n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n\n        var conceptMapContainer = angular.element('#' + this.conceptMapContainerId);\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n\n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n\n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n\n        var selectNodeBarWidth = null;\n        var svgWidth = null;\n\n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('width');\n\n        // get the width of the svg element\n        var svgWidthString = angular.element(document.getElementById(this.svgId)).css('width');\n\n        if (selectNodeBarWidthString != null && svgWidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svgWidth = parseInt(svgWidthString.replace('px', ''));\n        }\n\n        var overlayWidth = null;\n\n        if (selectNodeBarWidth != null && svgWidth != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svgWidth;\n        }\n\n        return overlayWidth;\n    }\n\n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n\n        var selectNodeBarHeight = null;\n        var svgHeight = null;\n\n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('height');\n\n        // get the height of the svg element\n        var svgHeightString = angular.element(document.getElementById(this.svgId)).css('height');\n\n        if (selectNodeBarHeightString != null && svgHeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svgHeight = parseInt(svgHeightString.replace('px', ''));\n        }\n\n        var overlayHeight = null;\n\n        if (selectNodeBarHeight != null && svgHeight != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svgHeight);\n        }\n\n        return overlayHeight;\n    }\n\n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n\n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n\n        // hide the link chooser\n        this.hideLinkTypeChooser();\n\n        // make the link not highlighted\n        this.clearHighlightedElement();\n    }\n\n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n\n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n\n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n\n        // we are no longer drawing a link\n        this.drawingLink = false;\n\n        // there is no longer an active link\n        this.activeLink = null;\n\n        // enable node draggin\n        this.enableNodeDragging();\n        this.moveLinkTextToFront();\n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n\n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n\n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n\n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n\n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n\n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n\n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center\n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by\n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n\n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n\n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n\n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the\n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n\n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n\n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the\n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n\n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n\n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n\n            var isDragging = true;\n\n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n\n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n\n            // show the border for the node\n            node.showBorder();\n\n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n\n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n\n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n\n        this.activeNode = null;\n    }\n\n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n\n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n\n        var parentOffsetX = 0;\n        var parentOffsetY = 0;\n\n        // get the user agent so we can determine which browser the user is using\n        var userAgent = navigator.userAgent;\n\n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                matrix = event.target.createSVGMatrix();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else {\n                // the user is using some other browser\n                matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'circle') {\n            // the target is a node connector circle or delete circle\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n\n                // get the bounding box of the circle\n                var bbox = event.target.getBBox();\n\n                /*\n                 * get the bounding box of the circle so we can get the\n                 * coordinates of the circle within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n\n                // get the absolute coordinates of the circle\n                parentOffsetX = matrix.e + bbox.x;\n                parentOffsetY = matrix.f + bbox.y;\n            }\n        } else if (event.target.tagName == 'rect') {\n            // the target is the rectangle that outlines the image\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n\n                // get the bounding box of the rect\n                var bbox = event.target.getBBox();\n\n                /*\n                 * get the bounding box of the rect so we can get the\n                 * coordinates of the rect within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n\n                // get the absolute coordinates of the rect\n                parentOffsetX = matrix.e + x;\n                parentOffsetY = matrix.f + y;\n            }\n        } else if (event.target.tagName == 'image') {\n            // the target is an image\n\n            if (userAgent.indexOf('Chrome') != -1) {\n\n            } else if (userAgent.indexOf('Firefox') != -1) {\n\n                // get the matrix of the group\n                var matrix = event.target.parentElement.getCTM();\n\n                // get the coordinates of the upper left corner of the group\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'path') {\n            /*\n             * the target is the link line. sometimes the mouse can be over the\n             * link if the student is moving the mouse around quickly.\n             */\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                // get the coordinates of the head of the link\n                var x2 = event.target.attributes['x2'];\n                var y2 = event.target.attributes['y2'];\n\n                if (x2 != null && y2 != null) {\n                    parentOffsetX = parseInt(x2.value);\n                    parentOffsetY = parseInt(y2.value);\n                }\n            }\n        } else {\n            // the target is something else\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        }\n\n        /*\n         * add the parent offset values to the relative offset values to obtain\n         * the x and y values relative to the upper left corner of the svg\n         */\n        var x = parentOffsetX + offsetX;\n        var y = parentOffsetY + offsetY;\n\n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n\n        return returnObject;\n    }\n\n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n\n        // remember the selected node\n        this.selectedNode = node;\n\n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n\n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n\n        // get the selected node\n        var selectedNode = this.selectedNode;\n\n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n\n            // get the node name\n            var label = selectedNode.label;\n\n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n\n            // get the original authored id\n            var originalId = selectedNode.id;\n\n            // get the coordinates relative to the svg element\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n\n            // get the position we should drop the node at\n            var x = coordinates.x - this.tempOffsetX;\n            var y = coordinates.y - this.tempOffsetY;\n\n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n\n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n\n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n\n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n\n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n\n            // handle the student data changing\n            this.studentDataChanged();\n        }\n\n        // enable node dragging\n        this.enableNodeDragging();\n    }\n\n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n\n        var nextAvailableNodeIdNumber = 1;\n\n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n\n            if (node != null) {\n\n                // get the node id\n                var nodeId = node.getId();\n\n                if (nodeId != null) {\n\n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n\n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n\n        var nextAvailableLinkIdNumber = 1;\n\n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n\n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n\n            if (link != null) {\n\n                // get the node id\n                var linkId = link.getId();\n\n                if (linkId != null) {\n\n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n\n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n\n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n\n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n\n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n\n        return newId;\n    }\n\n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n\n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n\n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n\n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n\n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n\n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n\n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n\n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n\n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n\n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n\n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n\n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n\n        if (element != null) {\n\n            // remember the highlighted element\n            this.highlightedElement = element;\n\n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n\n            // show the delete button for the element\n            element.showDeleteButton();\n\n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n\n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n\n                // show the link type chooser\n                this.showLinkTypeChooser();\n\n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n\n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n\n        if (this.highlightedElement != null) {\n\n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n\n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n\n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n\n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n\n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n\n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n\n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get the node group\n                var group = node.getGroup();\n\n                if (group != null) {\n\n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n\n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n\n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as\n     * creating a link.\n     */\n    disableNodeDragging() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get a node group\n                var group = node.getGroup();\n\n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the link text group to the front\n     */\n    moveLinkTextToFront() {\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n\n            if (link != null) {\n                // move the link text group to the front\n                link.moveTextGroupToFront();\n            }\n        }\n    }\n\n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n\n            if (node != null) {\n\n                // get a node group\n                var group = node.getGroup();\n\n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n\n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n\n        if (node != null) {\n\n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n\n            if (outgoingLinks != null) {\n\n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n\n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n\n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n\n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n\n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n\n            if (incomingLinks != null) {\n\n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n\n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n\n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n\n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n\n            // remove the node from the svg\n            node.remove();\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n\n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n\n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n\n            // remove the node from the svg\n            tempNode.remove();\n        }\n\n        // clear the nodes array\n        this.nodes = [];\n    }\n\n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n\n        if (id != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n\n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n\n        if (groupId != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n\n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n\n        if (id != null) {\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n\n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n\n        return link;\n    }\n\n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n\n        if (groupId != null) {\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n\n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n\n        return link;\n    }\n\n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n\n        if (connectorId != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n\n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n\n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId\n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n\n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n\n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n\n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n\n        if (link != null) {\n\n            // remove the link from the svg\n            link.remove();\n\n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n\n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n\n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n\n            // remove the link from the svg\n            tempLink.remove();\n        }\n\n        // clear the links array\n        this.links = [];\n    }\n\n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n\n        // get the node group id\n        var groupId = event.target.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n\n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n\n        if (event.target.parentElement != null) {\n\n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n\n            if (groupId != null) {\n\n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n\n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n\n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n\n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n\n            if (groupId != null) {\n\n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n\n                if (node != null) {\n\n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n\n                    if (sourceNodeGroupId == groupId) {\n                        /*\n                         * if the source of the link is the same as the\n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n\n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n\n                        // make the link the active link\n                        this.addLink(this.activeLink);\n\n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n\n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n\n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n\n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n\n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n\n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n\n        if (link != null) {\n\n            // remove the link from our array of links\n            this.removeLink(link);\n\n            // handle the student data changing\n            this.studentDataChanged();\n        }\n\n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n\n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n\n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n\n        // get the connector (the svg circle)\n        var connector = event.target;\n\n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n\n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n\n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n\n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n\n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n\n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n\n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n\n        // remember the active link\n        this.activeLink = link;\n\n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n\n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n\n        // highlight the link\n        this.setHighlightedElement(link);\n\n        // clear the active node\n        this.clearActiveNode();\n\n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n\n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n\n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n\n        // set the link text mouse down listener\n        link.setLinkTextMouseDown((event) => {\n            this.linkTextMouseDown(event);\n        });\n\n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n\n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n\n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n\n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on a link text\n     * @param event the mouse down event\n     */\n    linkTextMouseDown(event) {\n\n        var linkGroupId = null;\n\n        /*\n         * the link group id is set into the text group in the linkGroupId\n         * variable. the text group hierarchy looks like this\n         * text group > text > tspan\n         * text group > rect\n         */\n        if (event.target.nodeName == 'tspan') {\n            linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'text') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'rect') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        }\n\n        if (linkGroupId != null) {\n\n            // get the link\n            var link = this.getLinkByGroupId(linkGroupId);\n\n            if (link != null) {\n                // make the link highlighted\n                this.setHighlightedElement(link);\n            }\n        }\n\n    }\n\n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n\n        // get the group id\n        var groupId = this.getGroupId(event.target);\n\n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n\n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n\n        if (event.target.parentElement != null) {\n\n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n\n                // remove the node from our array of nodes\n                this.removeNode(node);\n\n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n\n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n\n        if (groupId != null) {\n\n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n\n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n\n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n\n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n\n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n\n        // get the group id\n        var groupId = event.target.id;\n\n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n\n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n\n        // handle the student data changing\n        this.studentDataChanged();\n    }\n\n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     *\n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n\n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n\n        // loop until we have reached the svg element\n        while (currentElement != null) {\n\n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n\n                // the group id will be the previous id we saw\n                groupId = previousId;\n\n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n\n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n\n        return groupId;\n    }\n\n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n\n        let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToSaveTheStarterConceptMap'));\n\n        if (answer) {\n            // get the concept map data\n            var conceptMapData = this.getConceptMapData();\n\n            // set the starter concept map data\n            this.authoringComponentContent.starterConceptMap = conceptMapData;\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n\n        let answer = confirm(this.$translate('conceptMap.areYouSureYouWantToDeleteTheStarterConceptMap'));\n\n        if (answer) {\n            // set the starter concept map data\n            this.authoringComponentContent.starterConceptMap = null;\n\n            // clear the concept map\n            this.clearConceptMap();\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n\n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n\n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n\n    /**\n     * Reset the concept map data. We will clear the concept map data and\n     * if there is starter concept map data we will set it into the concept map.\n     */\n    resetConceptMap() {\n\n        // ask the student if they are sure they want to reset their work\n        var message = this.$translate('conceptMap.areYouSureYouWantToResetYourWork');\n        var answer = confirm(message);\n\n        if (answer) {\n            // the student answered yes to reset their work\n\n            // clear the concept map\n            this.clearConceptMap();\n\n            if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                // we will import work from another component\n                this.handleConnectedComponents();\n            } else if (this.componentContent.starterConceptMap != null) {\n\n                // get the starter concept map\n                var conceptMapData = this.componentContent.starterConceptMap;\n\n                // populate the starter concept map data into the component\n                this.populateConceptMapData(conceptMapData);\n            }\n        }\n    }\n\n    /**\n     * Show the auto feedback that was generated when the student previously\n     * clicked \"Check Answer\".\n     */\n    showAutoFeedback() {\n\n        // show the auto feedback in a modal dialog\n        this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .parent(angular.element(document.querySelector('#' + this.feedbackContainerId)))\n            .clickOutsideToClose(true)\n            .title(this.$translate('FEEDBACK'))\n            .htmlContent(this.autoFeedbackString)\n            .ariaLabel(this.$translate('FEEDBACK'))\n            .ok(this.$translate('CLOSE'))\n        );\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The authoring view show save button checkbox was clicked\n     */\n    authoringViewShowSaveButtonClicked() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The authoring view show submit button checkbox was clicked\n     */\n    authoringViewShowSubmitButtonClicked() {\n\n        if (!this.authoringComponentContent.showSubmitButton) {\n            /*\n             * we are not showing the submit button to the student so\n             * we will clear the max submit count\n             */\n            this.authoringComponentContent.maxSubmitCount = null;\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the background image\n     */\n    chooseBackgroundImage() {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'background';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose an image for the node\n     * @param conceptMapNodeId the id of the node in the concept map\n     */\n    chooseNodeImage(conceptMapNodeId) {\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = conceptMapNodeId;\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n\n    /**\n     * Check whether we need to show the snip button\n     * @return whether to show the snip button\n     */\n    showSnipButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the concept map by converting it to an image\n     * @param $event the click event\n     */\n    snip($event) {\n\n        // get the svg element. this will obtain an array.\n        var svgElement = angular.element('#svg_' + this.nodeId + '_' + this.componentId);\n\n        if (svgElement != null && svgElement.length > 0) {\n\n            // hide all the iframes otherwise html2canvas may cut off the table\n            this.UtilService.hideIFrames();\n\n            // scroll to the component so html2canvas doesn't cut off the table\n            this.$location.hash(this.componentId);\n            this.$anchorScroll();\n\n            // get the svg element\n            svgElement = svgElement[0];\n\n            // get the svg element as a string\n            var serializer = new XMLSerializer();\n            var svgString = serializer.serializeToString(svgElement);\n\n            // find all the images in the svg and replace them with Base64 images\n            this.ConceptMapService.getHrefToBase64ImageReplacements(svgString).then((images) => {\n\n                /*\n                 * Loop through all the image objects. Each object contains\n                 * an image href and a Base64 image.\n                 */\n                for (var i = 0; i < images.length; i++) {\n\n                    // get an image object\n                    var imagePair = images[i];\n\n                    // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n                    var imageHref = imagePair.imageHref;\n\n                    // get the Base64 image\n                    var base64Image = imagePair.base64Image;\n\n                    // create a regex to match the image href\n                    var imageRegEx = new RegExp(imageHref, 'g');\n\n                    /*\n                     * replace all the instances of the image href with the\n                     * Base64 image\n                     */\n                    svgString = svgString.replace(imageRegEx, base64Image);\n                }\n\n                // create a canvas to draw the image on\n                var myCanvas = document.createElement(\"canvas\");\n                var ctx = myCanvas.getContext(\"2d\");\n\n                // create an svg blob\n                var svg = new Blob([svgString], {type:\"image/svg+xml;charset=utf-8\"});\n                var domURL = self.URL || self.webkitURL || self;\n                var url = domURL.createObjectURL(svg);\n                var image = new Image;\n\n                /*\n                 * set the UtilService in a local variable so we can access it\n                 * in the onload callback function\n                 */\n                var thisUtilService = this.UtilService;\n\n                // the function that is called after the image is fully loaded\n                image.onload = (event) => {\n\n                    // get the image that was loaded\n                    var image = event.target;\n\n                    // set the dimensions of the canvas\n                    myCanvas.width = image.width;\n                    myCanvas.height = image.height;\n                    ctx.drawImage(image, 0, 0);\n\n                    // get the canvas as a Base64 string\n                    var base64Image = myCanvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image, false);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n\n                    // we are done capturing the table so we will show the iframes again\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                };\n\n                // set the src of the image so that the image gets loaded\n                image.src = url;\n            });\n        }\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        // create a new component state\n        let mergedComponentState = this.NodeService.createNewComponentState();\n\n        if (componentStates != null) {\n\n            let mergedNodes = [];\n            let mergedLinks = [];\n\n            // loop through all the component state\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        let conceptMapData = studentData.conceptMapData;\n\n                        if (conceptMapData != null) {\n                            if (conceptMapData.nodes != null) {\n                                // add the nodes to our merged nodes\n                                mergedNodes = mergedNodes.concat(conceptMapData.nodes);\n                            }\n\n                            if (conceptMapData.links != null) {\n                                // add the links to our merged links\n                                mergedLinks = mergedLinks.concat(conceptMapData.links);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // set the merged nodes and links into the merged component state\n            mergedComponentState.studentData = {};\n            mergedComponentState.studentData.conceptMapData = {};\n            mergedComponentState.studentData.conceptMapData.nodes = mergedNodes;\n            mergedComponentState.studentData.conceptMapData.links = mergedLinks;\n        }\n\n        /*\n         * inject the asset path so that the file name is changed to\n         * a relative path\n         * e.g.\n         * \"Sun.png\"\n         * will be changed to\n         * \"/wise/curriculum/108/assets/Sun.png\"\n         */\n        mergedComponentState = this.ProjectService.injectAssetPaths(mergedComponentState);\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = 'importWork';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n\n            // remove all the specific component parameters\n            this.authoringConnectedComponentComponentIdChanged(connectedComponent);\n\n            // clear the component id\n            connectedComponent.componentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n};\n\nConceptMapController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapController;\n"]}