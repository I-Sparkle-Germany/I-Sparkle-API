{"version":3,"sources":["conceptMapController.es6"],"names":[],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n        \n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n        \n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n        \n        // the available nodes the students can choose\n        this.availableNodes = [];\n        \n        // the available links the students can choose\n        this.availableLinks = [];\n        \n        // the node instances the students create\n        this.nodes = [];\n        \n        // the link instances the students create\n        this.links = [];\n        \n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n        \n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n        \n        // the selected link type\n        this.selectedLinkType = null;\n        \n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n        \n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n        \n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n        \n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node \n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        \n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n            \n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n            \n            // setup the svg\n            this.setupSVG();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                \n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.setupSVG();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterConceptMap != null) {\n                    /*\n                     * the student has not done any work and there is a starter \n                     * concept map so we will populate the concept map with\n                     * the starter\n                     */\n                    \n                    // get the starter concept map\n                    var conceptMapData = this.componentContent.starterConceptMap;\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n            } else {\n                // the student has work for this component\n                \n                /*\n                 * inject the asset path so that the file name is changed to\n                 * a relative path\n                 * e.g.\n                 * \"Sun.png\"\n                 * will be changed to\n                 * \"/wise/curriculum/108/assets/Sun.png\"\n                 */\n                componentState = this.ProjectService.injectAssetPaths(componentState);\n                \n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n        \n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            \n            if (args != null ) {\n                \n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n                \n                if (annotation != null) {\n                    \n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n                    \n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId && \n                        this.componentId === annotationComponentId) {\n                        \n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n\n                if (conceptMapData != null) {\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n    \n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n        \n        if (conceptMapData != null) {\n            \n            // clear the existing nodes in the student view\n            this.nodes = [];\n            \n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n                    \n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n                    \n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n                    \n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n            \n            // clear the existing links in the student view\n            this.links = [];\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    \n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n                    \n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n                    \n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n                    \n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n                    \n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n                    \n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n            \n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n            \n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n    \n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n        \n        if (this.nodes != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var node = this.nodes[n];\n                \n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n                    \n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n        \n        if (this.links != null) {\n            \n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n                \n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n                    \n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n        \n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n        \n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n        \n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n        \n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n        \n        return deferred.promise;\n    };\n    \n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n            \n            studentData.nodes.push(nodeJSON);\n        }\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n            \n            studentData.links.push(linkJSON);\n        }\n        \n        return studentData;\n    }\n    \n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        \n        var performCRaterScoring = false;\n        \n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n            \n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n            \n            /*\n             * display a dialog message while the student waits for their work \n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n            \n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n                \n                if (result != null) {\n                    \n                    // get the CRater response\n                    var data = result.data;\n                    \n                    if (data != null) {\n                        \n                        /*\n                         * annotations we put in the component state will be \n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n                        \n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n                        \n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n                            \n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n                            \n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            \n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n                                \n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n                \n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since \n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n                \n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n        \n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n            \n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * A node up button was clicked in the authoring tool so we will move the \n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n        \n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n            \n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n            \n            if (nodes != null) {\n                \n                // get the node at the given index\n                var node = nodes[index];\n                \n                // remove the node\n                nodes.splice(index, 1);\n                \n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // check if the node is at the bottom\n        if (nodes != null && index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            // get the node at the given index\n            var node = nodes[index];\n            \n            // remove the node\n            nodes.splice(index, 1);\n            \n            // insert the node back in one index ahead\n            nodes.splice(index + 1, 0, node);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        if (nodes != null) {\n            \n            // get the node\n            var node = nodes[index];\n            \n            if (node != null) {\n                \n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n                \n                // confirm with the author that they really want to delete the node\n                var answer = confirm('Are you sure you want to delete this node?\\n\\nFile Name: ' + nodeFileName + '\\nLabel: ' + nodeLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link up button was clicked in the authoring tool so we will move the \n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n        \n        // check if the link is at the top\n        if (index != 0) {\n            \n            // get the links\n            var links = this.authoringComponentContent.links;\n            \n            if (links != null) {\n                \n                // get a link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link down button was clicked in the authoring tool so we will move the \n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // check if the link is at the bottom\n        if (links != null && index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            if (links != null) {\n                \n                // get the link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        if (links != null) {\n            \n            // get a link\n            var link = links[index];\n            \n            if (link != null) {\n                \n                // get the link label\n                var linkLabel = link.label;\n                \n                // confirm with the author that they really want to delete the link\n                var answer = confirm('Are you sure you want to delete this link?\\n\\nLabel: ' + linkLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n        \n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n        \n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // add the new node\n        nodes.push(newNode);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n        \n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n        \n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // add the new link\n        links.push(newLink);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'node' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var nodeId = link.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'link' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * A \"with link\" checkbox was checked\n     * @param ruleIndex the index of the rule\n     */\n    authoringRuleLinkCheckboxClicked(ruleIndex) {\n        \n        // get the rule that was checked\n        var rule = this.authoringComponentContent.rules[ruleIndex];\n        \n        if (rule != null) {\n            if (rule.type == 'node') {\n                /* \n                 * the rule has been set to 'node' instead of 'link' so we\n                 * will remove the link label and other node label\n                 */\n                \n                delete rule.linkLabel;\n                delete rule.otherNodeLabel;\n            }\n        }\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a new rule\n     */\n    authoringAddRule() {\n        \n        // create the new rule\n        var newRule = {};\n        newRule.name = \"\";\n        newRule.type = \"node\";\n        newRule.category = \"\";\n        newRule.nodeLabel = \"\";\n        newRule.comparison = \"exactly\";\n        newRule.number = 1;\n        \n        // add the rule to the array of rules\n        this.authoringComponentContent.rules.push(newRule);\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Move a rule up\n     * @param index the index of the rule\n     */\n    authoringViewRuleUpButtonClicked(index) {\n        \n        // check if the rule is at the top\n        if (index != 0) {\n            // the rule is not at the top so we can move it up\n            \n            // get the rules\n            var rules = this.authoringComponentContent.rules;\n            \n            if (rules != null) {\n                \n                // get the rule at the given index\n                var rule = rules[index];\n                \n                // remove the rule\n                rules.splice(index, 1);\n                \n                // insert the rule back in one index back\n                rules.splice(index - 1, 0, rule);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Move a rule down\n     * @param index the index of the rule\n     */\n    authoringViewRuleDownButtonClicked(index) {\n        \n        // get the rules\n        var rules = this.authoringComponentContent.rules;\n        \n        // check if the rule is at the bottom\n        if (rules != null && index != rules.length - 1) {\n            // the rule is not at the bottom so we can move it down\n            \n            // get the rule at the given index\n            var rule = rules[index];\n            \n            // remove the rule\n            rules.splice(index, 1);\n            \n            // insert the rule back in one index ahead\n            rules.splice(index + 1, 0, rule);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /*\n     * Delete a rule\n     * @param index the index of the rule to delete\n     */\n    authoringViewRuleDeleteButtonClicked(index) {\n        \n        // remove the rule at the given index\n        this.authoringComponentContent.rules.splice(index, 1);\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n        \n        if (this.highlightedElement != null && \n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n            \n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n            \n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n            \n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n        \n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n        \n        return linksTitle;\n    }\n    \n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n        \n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n        \n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        var left = leftNumber + 'px';\n        var top = topNumber + 'px';\n        \n        if (this.mode === 'authoring') {\n            /*\n             * if we are in authoring mode we need to include the offset of\n             * the container for some reason.\n             * TODO: figure out why the offset is required in authoring mode\n             * but not in student mode.\n             */\n            \n            // get the concept map container\n            var conceptMapContainer = angular.element('#conceptMapContainer');\n            \n            // get the offset of the container relative to the whole page\n            var offset = conceptMapContainer.offset();\n            \n            // get the left and top of the offset\n            var offsetLeft = offset.left;\n            var offsetTop = offset.top;\n            \n            // add the offset to the left and top values\n            left = leftNumber + offsetLeft + 'px';\n            top = topNumber + offsetTop + 'px';\n        }\n        \n        this.linkTypeChooserStyle['top'] = top;\n        this.linkTypeChooserStyle['left'] = left;\n        \n        this.displayLinkTypeChooser = true;\n    }\n    \n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n        \n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        \n        if (!this.$scope.$$phase) {\n            this.$scope.$apply();\n        }\n    }\n    \n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg1 element in the svg.js world\n        this.draw = SVG('svg1');\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n        \n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n        \n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n        \n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n        \n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg1 element in the angular world\n        var svg1 = angular.element('#svg1');\n        \n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg1[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n            \n            this.addedDragOverListener = true;\n        }\n        \n        /*\n         * check if we have already added the dop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg1[0].addEventListener('drop', (event) => {\n                \n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n            \n            this.addedDropListener = true;\n        }\n        \n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n        \n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n            \n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n        \n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        // get the bounding rectangle of the svg element\n        var boundingClientRect = angular.element('#svg1')[0].getBoundingClientRect();\n        var offsetLeft = boundingClientRect.left;\n        var offsetTop = boundingClientRect.top;\n        \n        // add the values together to obtain the absolute left and top positions\n        var left = leftNumber + offsetLeft + 'px';\n        var top = topNumber + offsetTop + 'px';\n        \n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'top': top,\n            'left': left,\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n        \n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n        \n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n        \n        var conceptMapContainer = angular.element('#conceptMapContainer');\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n        \n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n        \n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n        \n        var selectNodeBarWidth = null;\n        var svg1Width = null;\n        \n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n        \n        // get the width of the svg element\n        var svg1WidthString = angular.element(document.getElementById('svg1')).css('width');\n        \n        if (selectNodeBarWidthString != null && svg1WidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svg1Width = parseInt(svg1WidthString.replace('px', ''));\n        }\n        \n        var overlayWidth = null;\n        \n        if (selectNodeBarWidth != null && svg1Width != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svg1Width;\n        }\n        \n        return overlayWidth;\n    }\n    \n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n        \n        var selectNodeBarHeight = null;\n        var svg1Height = null;\n        \n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n        \n        // get the height of the svg element\n        var svg1HeightString = angular.element(document.getElementById('svg1')).css('height');\n        \n        if (selectNodeBarHeightString != null && svg1HeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svg1Height = parseInt(svg1HeightString.replace('px', ''));\n        }\n        \n        var overlayHeight = null;\n        \n        if (selectNodeBarHeight != null && svg1Height != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svg1Height);\n        }\n        \n        return overlayHeight;\n    }\n    \n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n        \n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n        \n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n    \n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n        \n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n        \n        // we are no longer drawing a link\n        this.drawingLink = false;\n        \n        // there is no longer an active link\n        this.activeLink = null;\n        \n        // enable node draggin\n        this.enableNodeDragging();\n        \n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n    \n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n        \n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n            \n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n            \n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n            \n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n            \n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center \n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by \n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n                \n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n                \n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n                \n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n            \n            var isDragging = true;\n            \n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n    \n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n            \n            // show the border for the node\n            node.showBorder();\n            \n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n    \n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n        \n        this.activeNode = null;\n    }\n    \n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n        \n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n        \n        var matrix = null;\n        \n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n            matrix = event.target.getCTM();\n        } else if (event.target.tagName == 'circle') {\n            /*\n             * the target is a node connector circle so we will get the matrix\n             * of the node group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else if (event.target.tagName == 'image') {\n            /*\n             * the target is a node image so we will get the matrix of the node\n             * group\n             */\n            matrix = event.target.parentElement.getCTM();\n        } else {\n            /*\n             * the target is something else so we will get the matrix of its\n             * parent\n             */\n            matrix = event.target.parentElement.getCTM();\n        }\n        \n        // get the x and y coordinates of the matrix element\n        var e = matrix.e;\n        var f = matrix.f;\n        \n        /*\n         * add the offset values to the coordinate to get the coordinate\n         * relative to the svg element\n         */\n        var x = e + offsetX;\n        var y = f + offsetY;\n        \n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n        \n        return returnObject;\n    }\n    \n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n        \n        // remember the selected node\n        this.selectedNode = node;\n        \n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n    \n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n        \n        // get the selected node\n        var selectedNode = this.selectedNode;\n        \n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n            \n            // get the node name\n            var label = selectedNode.label;\n            \n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n            \n            // get the original authored id\n            var originalId = selectedNode.id;\n            \n            // get the position we should drop the node at\n            var x = event.offsetX - this.tempOffsetX;\n            var y = event.offsetY - this.tempOffsetY;\n            \n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n            \n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n            \n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n            \n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n            \n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // enable node dragging\n        this.enableNodeDragging();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.getId();\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var linkId = link.getId();\n                \n                if (linkId != null) {\n                    \n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n                    \n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n        \n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n        \n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n        \n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n        \n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n        \n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n        \n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n        \n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n        \n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n        \n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n    \n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n        \n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n        \n        if (element != null) {\n            \n            // remember the highlighted element\n            this.highlightedElement = element;\n            \n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n            \n            // show the delete button for the element\n            element.showDeleteButton();\n            \n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n                \n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // show the link type chooser\n                this.showLinkTypeChooser();\n                \n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n    \n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n        \n        if (this.highlightedElement != null) {\n            \n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n                \n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n            \n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n            \n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n            \n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n    \n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get the node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    \n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n                    \n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as \n     * creating a link.\n     */\n    disableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n    \n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n        \n        if (node != null) {\n            \n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n            \n            if (outgoingLinks != null) {\n                \n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n                \n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n                    \n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n            \n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n            \n            if (incomingLinks != null) {\n                \n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n                \n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n                    \n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n            \n            // remove the node from the svg\n            node.remove();\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            // remove the node from the svg\n            tempNode.remove();\n        }\n        \n        // clear the nodes array\n        this.nodes = [];\n    }\n    \n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n        \n        if (id != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n                \n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n        \n        if (id != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n                \n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n                \n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n        \n        if (connectorId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n                \n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId \n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n            \n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n    \n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n        \n        if (link != null) {\n            \n            // remove the link from the svg\n            link.remove();\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                \n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n            \n            // remove the link from the svg\n            tempLink.remove();\n        }\n        \n        // clear the links array\n        this.links = [];\n    }\n    \n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n        \n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n        \n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    \n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n                    \n                    if (sourceNodeGroupId == groupId) {\n                        /* \n                         * if the source of the link is the same as the \n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n                        \n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n                        \n                        // make the link the active link\n                        this.addLink(this.activeLink);\n                        \n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n                        \n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n                        \n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n                        \n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n        \n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n    \n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n        \n        if (link != null) {\n            \n            // remove the link from our array of links\n            this.removeLink(link);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n        \n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n        \n        // get the connector (the svg circle)\n        var connector = event.target;\n        \n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n        \n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n        \n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n        \n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n        \n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n        \n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n        \n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n        \n        // remember the active link\n        this.activeLink = link;\n        \n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n        \n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n        \n        // highlight the link\n        this.setHighlightedElement(link);\n        \n        // clear the active node\n        this.clearActiveNode();\n        \n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n    \n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n        \n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n        \n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n        \n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n        \n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                \n                // remove the node from our array of nodes\n                this.removeNode(node);\n                \n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n        \n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n    \n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n        \n        // get the group id\n        var groupId = event.target.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n        \n        // handle the student data changing\n        this.studentDataChanged();\n    }\n    \n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     * \n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n        \n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n        \n        // loop until we have reached the svg element\n        while (currentElement != null) {\n            \n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n                \n                // the group id will be the previous id we saw\n                groupId = previousId;\n                \n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n                \n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n        \n        // get the concept map data\n        var conceptMapData = this.getConceptMapData();\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = conceptMapData;\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = null;\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n        \n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n        \n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n    \n    /**\n     * Reset the concept map data. We will clear the concept map data and\n     * if there is starter concept map data we will set it into the concept map.\n     */\n    resetConceptMap() {\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        if (this.componentContent.starterConceptMap != null) {\n            \n            // get the starter concept map\n            var conceptMapData = this.componentContent.starterConceptMap;\n            \n            // populate the starter concept map data into the component\n            this.populateConceptMapData(conceptMapData);\n        }\n    }\n    \n    /**\n     * Check the student concept map against the custom rule evaluator\n     */\n    checkAnswer() {\n        \n        // get the custom rule evaluator code that was authored\n        var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n        \n        // get the component content\n        var componentContent = this.componentContent;\n        \n        // get the student concept map\n        var conceptMapData = this.getConceptMapData();\n        \n        var thisConceptMapService = this.ConceptMapService;\n        \n        // the result will be stored in this variable\n        var thisResult = {};\n        \n        /*\n         * create the any function that can be called in the custom rule \n         * evaluator code. the arguments to the any function are rule names.\n         * for example if we are looking for any of the links below \n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var any = function() {\n            return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n        };\n\n        /*\n         * create the all function that can be called in the custom rule \n         * evaluator code. the arguments to the all function are rule names.\n         * for example if we are looking for all of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var all = function() {\n            return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n        }\n        \n        /*\n         * create the setResult function that can be called in the custom rule \n         * evaluator code\n         */\n        var setResult = function(result) {\n            thisResult = result;\n        }\n        \n        // run the custom rule evaluator\n        eval(customRuleEvaluator);\n        \n        //console.log(\"thisResult.score=\" + thisResult.score);\n        //console.log(\"thisResult.feedback=\" + thisResult.feedback);\n        var resultString = \"\";\n        \n        if (thisResult.score != null) {\n            // display the score\n            resultString += \"Score: \" + thisResult.score;\n        }\n        \n        if (thisResult.feedback != null) {\n            if (resultString != \"\") {\n                // add a new line if the result string is not empty\n                resultString += \"\\n\";\n            }\n            \n            // display the feedback\n            resultString += \"Feedback: \" + thisResult.feedback;\n        }\n        \n        // show the result to the student\n        alert(resultString);\n    }\n};\n\nConceptMapController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default ConceptMapController;\n"]}