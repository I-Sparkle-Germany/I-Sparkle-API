{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","ProjectService","StudentAssetService","StudentDataService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","messageDialog","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","selectedNode","tempOffsetX","tempOffsetY","themePath","getThemePath","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","shouldOptions","value","label","autoFeedbackString","setupSVG","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","componentState","importWorkNodeId","importWorkComponentId","importWork","starterConceptMap","conceptMapData","populateConceptMapData","setStudentWork","enableNodeDragging","calculateDisabled","registerComponentController","conceptMapController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","angular","studentWork","$emit","isAutoSave","clientSaveTime","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","studentData","processLatestSubmit","n","length","node","instanceId","originalId","filePath","fileName","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","l","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","getLabel","setLabel","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","createNewComponentState","response","getStudentResponse","getConceptMapData","createComponentStateAdditionalProcessing","nodeJSON","toJSONObject","push","linkJSON","background","backgroundPath","stretchBackground","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","fullscreen","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","autoComment","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","hide","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","index","nodeFileName","nodeLabel","answer","confirm","linkLabel","authoringGetNewConceptMapNodeId","newNode","authoringGetNewConceptMapLinkId","newLink","nextAvailableNodeIdNumber","usedNumbers","nodeIdNumber","parseInt","replace","maxNumberUsed","Math","max","apply","isNaN","newId","nextAvailableLinkIdNumber","ruleIndex","rule","rules","type","otherNodeLabel","newRule","name","categories","comparison","number","not","ruleName","categoryName","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","message","isCRaterEnabled","isCRaterScoreOnExit","exitListener","selectedLink","highlightedElement","constructor","setColor","setOriginalId","hideLinkTypeChooser","linksTitle","setLinkTypeChooserOverlayStyle","leftNumber","topNumber","left","top","conceptMapContainer","element","offset","offsetLeft","offsetTop","linkTypeChooserStyle","newlyCreatedLink","$$phase","SVG","activeNode","activeLink","drawingLink","mousedown","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","svg1","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","setLinkTypeChooserStyle","backgroundSize","boundingClientRect","getBoundingClientRect","getModalWidth","getModalHeight","overlayWidth","linkTypeChooserModalOverlayStyle","selectNodeBarWidth","svg1Width","selectNodeBarWidthString","document","getElementById","css","svg1WidthString","selectNodeBarHeight","svg1Height","selectNodeBarHeightString","svg1HeightString","overlayHeight","remove","target","tagName","clearHighlightedElement","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","isDragging","updateCoordinates","showDeleteButton","showBorder","tempNode","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","matrix","getCTM","f","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","getId","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","tempNodeId","groupId","tempNodeGroupId","getGroupId","tempLink","tempLinkId","tempLinkGroupId","connectorId","tempConnectorId","getConnectorId","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","cx","cy","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","clearConceptMap","removeAllLinks","removeAllNodes","customRuleEvaluator","thisConceptMapService","thisResult","any","arguments","all","setResult","eval","resultString","showAutoScore","showAutoFeedback","feedback","alert","parent","querySelector","clickOutsideToClose","title","htmlContent","ariaLabel","ok","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\n\nclass ConceptMapController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConceptMapService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConceptMapService = ConceptMapService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n        \n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n        \n        // default width and height for the svg\n        this.width = 800;\n        this.height = 600;\n        \n        // the available nodes the students can choose\n        this.availableNodes = [];\n        \n        // the available links the students can choose\n        this.availableLinks = [];\n        \n        // the node instances the students create\n        this.nodes = [];\n        \n        // the link instances the students create\n        this.links = [];\n        \n        // flag to display the link type chooser\n        this.displayLinkTypeChooser = false;\n        \n        // flag to display the modal overlay for the link type chooser\n        this.displayLinkTypeChooserModalOverlay = false;\n        \n        // the selected link type\n        this.selectedLinkType = null;\n        \n        // flag for whether we have initialized the link type modal overlay\n        this.initializedDisplayLinkTypeChooserModalOverlay = false;\n        \n        // default values for the modal width and height\n        this.modalWidth = 800;\n        this.modalHeight = 600;\n        \n        /*\n         * used to remember the node the student has started dragging to create\n         * so that we know what node to create once they let go off the mouse\n         * on the svg element\n         */\n        this.selectedNode = null;\n        \n        /*\n         * used to remember the offset of the mouse relative to the upper left\n         * of the node image the student started dragging to create a new node \n         * instance\n         */\n        this.tempOffsetX = 0;\n        this.tempOffsetY = 0;\n\n        let themePath = this.ProjectService.getThemePath();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        // the options for authoring the should or should not value in rules\n        this.shouldOptions = [\n            {\n                value: false, label: 'should'\n            },\n            {\n                value: true, label: 'should not'\n            }\n        ];\n        \n        // the auto feedback string\n        this.autoFeedbackString = '';\n        \n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.componentContent.width != null) {\n                this.width = this.componentContent.width;\n            }\n            \n            if (this.componentContent.height != null) {\n                this.height = this.componentContent.height;\n            }\n            \n            // setup the svg\n            this.setupSVG();\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.availableNodes = this.componentContent.nodes;\n                this.availableLinks = this.componentContent.links;\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.availableNodes = this.componentContent.nodes;\n                    this.availableLinks = this.componentContent.links;\n                    this.setupSVG();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterConceptMap != null) {\n                    /*\n                     * the student has not done any work and there is a starter \n                     * concept map so we will populate the concept map with\n                     * the starter\n                     */\n                    \n                    // get the starter concept map\n                    var conceptMapData = this.componentContent.starterConceptMap;\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n            } else {\n                // the student has work for this component\n                \n                /*\n                 * inject the asset path so that the file name is changed to\n                 * a relative path\n                 * e.g.\n                 * \"Sun.png\"\n                 * will be changed to\n                 * \"/wise/curriculum/108/assets/Sun.png\"\n                 */\n                componentState = this.ProjectService.injectAssetPaths(componentState);\n                \n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n            \n            // make the nodes draggable\n            this.enableNodeDragging();\n                        \n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            \n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.conceptMapController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.conceptMapController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.conceptMapController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.conceptMapController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n            \n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n        \n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            \n            if (args != null ) {\n                \n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n                \n                if (annotation != null) {\n                    \n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n                    \n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId && \n                        this.componentId === annotationComponentId) {\n                        \n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var conceptMapData = studentData.conceptMapData;\n\n                if (conceptMapData != null) {\n                    \n                    // populate the concept map data into the component\n                    this.populateConceptMapData(conceptMapData);\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n    \n    /**\n     * Populate the concept map data into the component\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(conceptMapData) {\n        \n        if (conceptMapData != null) {\n            \n            // clear the existing nodes in the student view\n            this.nodes = [];\n            \n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n                    \n                    // create a ConceptMapNode\n                    var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, instanceId, originalId, filePath, label, x, y, width, height);\n                    \n                    // add the node to our array of nodes\n                    this.addNode(conceptMapNode);\n                    \n                    // set the mouse events on the node\n                    this.setNodeMouseEvents(conceptMapNode);\n                }\n            }\n            \n            // clear the existing links in the student view\n            this.links = [];\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    \n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n                    \n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(sourceNodeId);\n                    }\n                    \n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(destinationNodeId);\n                    }\n                    \n                    // create a ConceptMapLink\n                    var conceptMapLink = this.ConceptMapService.newConceptMapLink(this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n                    \n                    // add the link to our array of links\n                    this.addLink(conceptMapLink);\n                    \n                    // set the mouse events on the link\n                    this.setLinkMouseEvents(conceptMapLink);\n                }\n            }\n            \n            /*\n             * move the link text group to the front so that they are on top\n             * of links\n             */\n            this.moveLinkTextToFront();\n            \n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront();\n            \n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            this.$timeout(() => {\n                this.refreshLinkLabels();\n            });\n        }\n    }\n    \n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels() {\n        \n        if (this.nodes != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var node = this.nodes[n];\n                \n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n                    \n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n        \n        if (this.links != null) {\n            \n            // loop throgh all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var link = this.links[l];\n                \n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n                    \n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n        \n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n        \n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n        \n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        var conceptMapData = this.getConceptMapData();\n        studentData.conceptMapData = conceptMapData;\n        \n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n        \n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n        \n        return deferred.promise;\n    };\n    \n    /**\n     * Get the concept map data\n     * @returns an object containing a array of nodes and an array of links\n     */\n    getConceptMapData() {\n        var studentData = {};\n        studentData.nodes = [];\n        studentData.links = [];\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            // get the JSON representation of the node\n            var nodeJSON = node.toJSONObject();\n            \n            studentData.nodes.push(nodeJSON);\n        }\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            // get the JSON representation of the link\n            var linkJSON = link.toJSONObject();\n            \n            studentData.links.push(linkJSON);\n        }\n        \n        // set the background data into the student data\n        if (this.componentContent.background != null) {\n            // this is the background file name e.g. background.png\n            studentData.background = this.componentContent.background;\n            \n            // this is the background path e.g. /wise/curriculum/108/assets/background.png\n            studentData.backgroundPath = this.componentContent.background;\n            \n            // whether to stretch the background to fill the svg element\n            studentData.stretchBackground = this.componentContent.stretchBackground;\n        }\n        \n        return studentData;\n    }\n    \n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        \n        var performCRaterScoring = false;\n        \n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n            \n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n            \n            /*\n             * display a dialog message while the student waits for their work \n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n            \n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n                \n                if (result != null) {\n                    \n                    // get the CRater response\n                    var data = result.data;\n                    \n                    if (data != null) {\n                        \n                        /*\n                         * annotations we put in the component state will be \n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n                        \n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n                        \n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n                            \n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n                            \n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            \n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n                                \n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                        }\n                    }\n                }\n                \n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since \n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n                \n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n        \n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n        \n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n        \n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.ConceptMapService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * A node up button was clicked in the authoring tool so we will move the \n     * node up\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeUpButtonClicked(index) {\n        \n        // check if the node is at the top\n        if (index != 0) {\n            // the node is not at the top so we can move it up\n            \n            // get the nodes\n            var nodes = this.authoringComponentContent.nodes;\n            \n            if (nodes != null) {\n                \n                // get the node at the given index\n                var node = nodes[index];\n                \n                // remove the node\n                nodes.splice(index, 1);\n                \n                // insert the node back in one index back\n                nodes.splice(index - 1, 0, node);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * A node down button was clicked in the authoring tool so we will move the\n     * node down\n     * @param index the index of the node that we will move\n     */\n    authoringViewNodeDownButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // check if the node is at the bottom\n        if (nodes != null && index != nodes.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            // get the node at the given index\n            var node = nodes[index];\n            \n            // remove the node\n            nodes.splice(index, 1);\n            \n            // insert the node back in one index ahead\n            nodes.splice(index + 1, 0, node);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * A node delete button was clicked in the authoring tool so we will remove\n     * the node\n     * @param index the index of the node that we will delete\n     */\n    authoringViewNodeDeleteButtonClicked(index) {\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        if (nodes != null) {\n            \n            // get the node\n            var node = nodes[index];\n            \n            if (node != null) {\n                \n                // get the file name and label\n                var nodeFileName = node.fileName;\n                var nodeLabel = node.label;\n                \n                // confirm with the author that they really want to delete the node\n                var answer = confirm('Are you sure you want to delete this node?\\n\\nFile Name: ' + nodeFileName + '\\nLabel: ' + nodeLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the node so we\n                     * will remove it from the array\n                     */\n                    nodes.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link up button was clicked in the authoring tool so we will move the \n     * link up\n     * @param index the index of the link\n     */\n    authoringViewLinkUpButtonClicked(index) {\n        \n        // check if the link is at the top\n        if (index != 0) {\n            \n            // get the links\n            var links = this.authoringComponentContent.links;\n            \n            if (links != null) {\n                \n                // get a link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index back\n                    links.splice(index - 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link down button was clicked in the authoring tool so we will move the \n     * link down\n     * @param index the index of the link\n     */\n    authoringViewLinkDownButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // check if the link is at the bottom\n        if (links != null && index != links.length - 1) {\n            // the node is not at the bottom so we can move it down\n            \n            if (links != null) {\n                \n                // get the link\n                var link = links[index];\n                \n                if (link != null) {\n                    \n                    // remove the link\n                    links.splice(index, 1);\n                    \n                    // add the link back in one index ahead\n                    links.splice(index + 1, 0, link);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * A link delete button was clicked in the authoring tool so we remove the\n     * link\n     * @param index the index of the link\n     */\n    authoringViewLinkDeleteButtonClicked(index) {\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        if (links != null) {\n            \n            // get a link\n            var link = links[index];\n            \n            if (link != null) {\n                \n                // get the link label\n                var linkLabel = link.label;\n                \n                // confirm with the author that they really want to delete the link\n                var answer = confirm('Are you sure you want to delete this link?\\n\\nLabel: ' + linkLabel);\n                \n                if (answer) {\n                    /*\n                     * the author is sure they want to delete the link so we\n                     * will remove it from the array\n                     */\n                    links.splice(index, 1);\n                    \n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node in the authoring tool\n     */\n    authoringViewAddNode() {\n        \n        // get a new node id\n        var id = this.authoringGetNewConceptMapNodeId();\n        \n        // create the new node\n        var newNode = {};\n        newNode.id = id;\n        newNode.label = '';\n        newNode.fileName = '';\n        newNode.width = 100;\n        newNode.height = 100;\n        \n        // get the nodes\n        var nodes = this.authoringComponentContent.nodes;\n        \n        // add the new node\n        nodes.push(newNode);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a link in the authoring tool\n     */\n    authoringViewAddLink() {\n        \n        // get a new link id\n        var id = this.authoringGetNewConceptMapLinkId();\n        \n        // create a new link\n        var newLink = {};\n        newLink.id = id;\n        newLink.label = '';\n        newLink.color = '';\n        \n        // get the links\n        var links = this.authoringComponentContent.links;\n        \n        // add the new link\n        links.push(newLink);\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'node3'\n     */\n    authoringGetNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.nodes.length; x++) {\n            var node = this.authoringComponentContent.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('node', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'node' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'link3'\n     */\n    authoringGetNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.authoringComponentContent.links.length; x++) {\n            var link = this.authoringComponentContent.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var nodeId = link.id;\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('link', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'link' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * A \"with link\" checkbox was checked\n     * @param ruleIndex the index of the rule\n     */\n    authoringRuleLinkCheckboxClicked(ruleIndex) {\n        \n        // get the rule that was checked\n        var rule = this.authoringComponentContent.rules[ruleIndex];\n        \n        if (rule != null) {\n            if (rule.type == 'node') {\n                /* \n                 * the rule has been set to 'node' instead of 'link' so we\n                 * will remove the link label and other node label\n                 */\n                \n                delete rule.linkLabel;\n                delete rule.otherNodeLabel;\n            }\n        }\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a new rule\n     */\n    authoringAddRule() {\n        \n        // create the new rule\n        var newRule = {};\n        newRule.name = \"\";\n        newRule.type = \"node\";\n        newRule.categories = [];\n        newRule.nodeLabel = \"\";\n        newRule.comparison = \"exactly\";\n        newRule.number = 1;\n        newRule.not = false;\n        \n        // add the rule to the array of rules\n        this.authoringComponentContent.rules.push(newRule);\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Move a rule up\n     * @param index the index of the rule\n     */\n    authoringViewRuleUpButtonClicked(index) {\n        \n        // check if the rule is at the top\n        if (index != 0) {\n            // the rule is not at the top so we can move it up\n            \n            // get the rules\n            var rules = this.authoringComponentContent.rules;\n            \n            if (rules != null) {\n                \n                // get the rule at the given index\n                var rule = rules[index];\n                \n                // remove the rule\n                rules.splice(index, 1);\n                \n                // insert the rule back in one index back\n                rules.splice(index - 1, 0, rule);\n                \n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Move a rule down\n     * @param index the index of the rule\n     */\n    authoringViewRuleDownButtonClicked(index) {\n        \n        // get the rules\n        var rules = this.authoringComponentContent.rules;\n        \n        // check if the rule is at the bottom\n        if (rules != null && index != rules.length - 1) {\n            // the rule is not at the bottom so we can move it down\n            \n            // get the rule at the given index\n            var rule = rules[index];\n            \n            // remove the rule\n            rules.splice(index, 1);\n            \n            // insert the rule back in one index ahead\n            rules.splice(index + 1, 0, rule);\n            \n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /*\n     * Delete a rule\n     * @param index the index of the rule to delete\n     */\n    authoringViewRuleDeleteButtonClicked(index) {\n        \n        // get the rule\n        var rule = this.authoringComponentContent.rules[index];\n        \n        if (rule != null) {\n            \n            // get the rule name\n            var ruleName = rule.name;\n            \n            // confirm with the author that they really want to delete the rule\n            var answer = confirm('Are you sure you want to delete this rule?\\n\\nRule Name: ' + ruleName);\n            \n            if (answer) {\n                // remove the rule at the given index\n                this.authoringComponentContent.rules.splice(index, 1);\n                \n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Add a category to a rule\n     * @param rule the rule\n     */\n    authoringViewAddCategoryClicked(rule) {\n        \n        if (rule != null) {\n            // add an empty category name\n            rule.categories.push(\"\");\n        }\n        \n        // perform updating and saving\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete a category from a rule\n     * @param rule delete a category from this rule\n     * @param index the index of the category\n     */\n    authoringViewDeleteCategoryClicked(rule, index) {\n        \n        if (rule != null) {\n            \n            // get the rule name\n            var ruleName = rule.name;\n            \n            // get the category name\n            var categoryName = rule.categories[index];\n            \n            // confirm with the author that they really want to delete the category from the rule\n            var answer = confirm('Are you sure you want to delete the category from this rule?\\n\\nRule Name: ' + ruleName + '\\nCategory Name: ' + categoryName);\n            \n            if (answer) {\n                // remove the category at the index\n                rule.categories.splice(index, 1);\n                \n                // perform updating and saving\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n        \n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n        \n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    /**\n     * A link type was selected in the link type chooser popup\n     * @param linkType the authored link object that was selected\n     */\n    linkTypeSelected(selectedLink) {\n        \n        if (this.highlightedElement != null && \n            this.highlightedElement.constructor.name == 'ConceptMapLink') {\n            \n            /*\n             * get the ConceptMapLink object that we are setting the link type\n             * for\n             */\n            var link = this.highlightedElement;\n            \n            // get the label, color, and original id\n            var label = selectedLink.label;\n            var color = selectedLink.color;\n            var originalId = selectedLink.id;\n            \n            // set the label, color, and original id into the link\n            link.setLabel(label);\n            link.setColor(color);\n            link.setOriginalId(originalId);\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Get the links title\n     * @returns the links title\n     */\n    getLinksTitle() {\n        var linksTitle = \"\";\n        \n        if (this.componentContent != null) {\n            linksTitle = this.componentContent.linksTitle;\n        }\n        \n        return linksTitle;\n    }\n    \n    /**\n     * Show the link type chooser popup\n     */\n    showLinkTypeChooser() {\n        \n        // check if we have initialized the popup\n        if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n            // we have not initialized the popup so we will do so now\n            this.setLinkTypeChooserOverlayStyle();\n            this.initializedDisplayLinkTypeChooserModalOverlay = true;\n        }\n        \n        /*\n         * initialize the top left of the link chooser popup to show up on\n         * the top right of the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        var left = leftNumber + 'px';\n        var top = topNumber + 'px';\n\n        if (this.mode === 'authoring') {\n            /*\n             * if we are in authoring mode we need to include the offset of\n             * the container for some reason.\n             * TODO: figure out why the offset is required in authoring mode\n             * but not in student mode.\n             */\n\n            // get the concept map container\n            var conceptMapContainer = angular.element('#conceptMapContainer');\n\n            // get the offset of the container relative to the whole page\n            var offset = conceptMapContainer.offset();\n\n            // get the left and top of the offset\n            var offsetLeft = offset.left;\n            var offsetTop = offset.top;\n\n            // add the offset to the left and top values\n            left = leftNumber + offsetLeft + 'px';\n            top = topNumber + offsetTop + 'px';\n        }\n\n        this.linkTypeChooserStyle['top'] = top;\n        this.linkTypeChooserStyle['left'] = left;\n        \n        this.displayLinkTypeChooser = true;\n    }\n    \n    /**\n     * Hide the link type chooser popup\n     */\n    hideLinkTypeChooser() {\n        \n        // hide the link type chooser\n        this.displayLinkTypeChooser = false;\n        this.displayLinkTypeChooserModalOverlay = false;\n        this.newlyCreatedLink = null;\n        \n        if (!this.$scope.$$phase) {\n            // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n            // and it still seems to work. Do we need this line?\n            // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n            //this.$scope.$apply();\n        }\n    }\n    \n    /**\n     * Setup the svg\n     */\n    setupSVG() {\n        // get the svg1 element in the svg.js world\n        this.draw = SVG('svg1');\n        this.draw.width(this.width);\n        this.draw.height(this.height);\n        \n        this.highlightedElement = null;\n        this.activeNode = null;\n        this.activeLink = null;\n        this.drawingLink = false;\n        this.newlyCreatedLink = null;\n        \n        // set the mouse down listener\n        this.draw.mousedown((event) => {\n            this.svgMouseDown(event);\n        });\n        \n        // set the mouse up listener\n        this.draw.mouseup((event) => {\n            this.svgMouseUp(event);\n        });\n        \n        // set the mouse move listener\n        this.draw.mousemove((event) => {\n            this.svgMouseMove(event);\n        });\n\n        // get the svg1 element in the angular world\n        var svg1 = angular.element('#svg1');\n        \n        /*\n         * check if we have already added the dragover listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDragOverListener) {\n            /*\n             * listen for the dragover event which occurs when the user is\n             * dragging a node onto the svg\n             */\n            svg1[0].addEventListener('dragover', (event) => {\n                /*\n                 * prevent the default because if we don't, the user won't\n                 * be able to drop a new node instance onto the svg in the\n                 * authoring mode\n                 */\n                event.preventDefault();\n            });\n            \n            this.addedDragOverListener = true;\n        }\n        \n        /*\n         * check if we have already added the drop listener so we don't\n         * add multiple listeners for the same event. adding multiple listeners\n         * to the same event may occur in the authoring tool.\n         */\n        if (!this.addedDropListener) {\n            /*\n             * listen for the drop event which occurs when the student drops\n             * a new node onto the svg\n             */\n            svg1[0].addEventListener('drop', (event) => {\n                \n                /*\n                 * the user has dropped a new node onto the svg to create a\n                 * new instance of a node\n                 */\n                this.newNodeDropped(event);\n            });\n            \n            this.addedDropListener = true;\n        }\n        \n        // set the link type chooser style\n        this.setLinkTypeChooserStyle();\n        \n        // check if there is a background specified\n        if (this.componentContent.background != null) {\n            \n            if (this.componentContent.stretchBackground) {\n                // stretch the background to fit the whole svg element\n                this.backgroundSize = '100% 100%';\n            } else {\n                // use the original dimensions of the background image\n                this.backgroundSize = '';\n            }\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup style\n     */\n    setLinkTypeChooserStyle() {\n        \n        /*\n         * set the link type chooser popup to show up in the upper right of\n         * the svg element\n         */\n        var leftNumber = 600;\n        var topNumber = 20;\n        \n        // get the bounding rectangle of the svg element\n        var boundingClientRect = angular.element('#svg1')[0].getBoundingClientRect();\n        var offsetLeft = boundingClientRect.left;\n        var offsetTop = boundingClientRect.top;\n        \n        // add the values together to obtain the absolute left and top positions\n        var left = leftNumber + offsetLeft + 'px';\n        var top = topNumber + offsetTop + 'px';\n        \n        this.linkTypeChooserStyle = {\n            'width': '300px',\n            'position': 'absolute',\n            'top': top,\n            'left': left,\n            'border': '1px solid black',\n            'backgroundColor': 'white',\n            'cursor': 'pointer',\n            'z-index': 10000,\n            'padding': '16px'\n        }\n    }\n    \n    /**\n     * Set the link type chooser popup overlay style\n     */\n    setLinkTypeChooserOverlayStyle() {\n        \n        // calculate the modal overlay width and height\n        this.modalWidth = this.getModalWidth();\n        this.modalHeight = this.getModalHeight();\n        \n        //var overlayWidth = this.modalWidth + 'px';\n        var overlayWidth = this.modalWidth;\n        \n        var conceptMapContainer = angular.element('#conceptMapContainer');\n        var width = conceptMapContainer.width();\n        var height = conceptMapContainer.height();\n        var offset = conceptMapContainer.offset();\n        \n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n        offsetLeft = 0;\n        offsetTop = 0;\n        \n        this.linkTypeChooserModalOverlayStyle = {\n            'position': 'absolute',\n            'z-index': 9999,\n            'width': overlayWidth,\n            'height': height,\n            'background-color': '#000000',\n            'opacity': 0.4\n        }\n    }\n\n    /**\n     * Get the width that the modal overlay should be\n     * @returns the width that the modal overlay should be\n     */\n    getModalWidth() {\n        \n        var selectNodeBarWidth = null;\n        var svg1Width = null;\n        \n        // get the width of the left select node bar\n        var selectNodeBarWidthString = angular.element(document.getElementById('selectNodeBar')).css('width');\n        \n        // get the width of the svg element\n        var svg1WidthString = angular.element(document.getElementById('svg1')).css('width');\n        \n        if (selectNodeBarWidthString != null && svg1WidthString != null) {\n            // get the integer values\n            selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n            svg1Width = parseInt(svg1WidthString.replace('px', ''));\n        }\n        \n        var overlayWidth = null;\n        \n        if (selectNodeBarWidth != null && svg1Width != null) {\n            // calculate the sum of the widths\n            overlayWidth = selectNodeBarWidth + svg1Width;\n        }\n        \n        return overlayWidth;\n    }\n    \n    /**\n     * Get the height that the modal overlay should be\n     * @returns the height that the modal overlay should be\n     */\n    getModalHeight() {\n        \n        var selectNodeBarHeight = null;\n        var svg1Height = null;\n        \n        // get the height of the left select node bar\n        var selectNodeBarHeightString = angular.element(document.getElementById('selectNodeBar')).css('height');\n        \n        // get the height of the svg element\n        var svg1HeightString = angular.element(document.getElementById('svg1')).css('height');\n        \n        if (selectNodeBarHeightString != null && svg1HeightString != null) {\n            // get the integer values\n            selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n            svg1Height = parseInt(svg1HeightString.replace('px', ''));\n        }\n        \n        var overlayHeight = null;\n        \n        if (selectNodeBarHeight != null && svg1Height != null) {\n            // get the larger of the two heights\n            overlayHeight = Math.max(selectNodeBarHeight, svg1Height);\n        }\n        \n        return overlayHeight;\n    }\n    \n    /**\n     * The cancel button on the link type chooser was clicked\n     */\n    cancelLinkTypeChooser() {\n        \n        if (this.newlyCreatedLink != null) {\n            /*\n             * the student has just created this link and has not yet chosen\n             * a link type so we will remove the link\n             */\n            this.newlyCreatedLink.remove();\n            this.newlyCreatedLink = null;\n        }\n        \n        // hide the link chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse iss clicked down on a blank spot in the svg element\n     * @param event the mouse down event\n     */\n    svgMouseDown(event) {\n        if (event.target.tagName == 'svg') {\n            // remove highlighting from any item that was previously highlighted\n            this.clearHighlightedElement();\n        }\n    }\n    \n    /**\n     * Called when the mouse is released\n     * @param event the mouse up event\n     */\n    svgMouseUp(event) {\n        \n        if (this.activeLink != null && this.activeNode == null) {\n            /*\n             * the student was creating a link but did not connect the link\n             * to a destination node so we will just remove the link\n             */\n            this.activeLink.remove();\n        }\n        \n        // we are no longer drawing a link\n        this.drawingLink = false;\n        \n        // there is no longer an active link\n        this.activeLink = null;\n        \n        // enable node draggin\n        this.enableNodeDragging();\n        this.moveLinkTextToFront();\n        // move the nodes to the front so that they are on top of links\n        this.moveNodesToFront();\n    }\n    \n    /**\n     * Called when the mouse is moved\n     * @param event the mouse move event\n     */\n    svgMouseMove(event) {\n        \n        if (this.activeLink != null) {\n            /*\n             * there is an active link which means the student has created a\n             * new link and is in the process of choosing the link's destination\n             * node\n             */\n            \n            // get the coordinates that the link should be updated to\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            var x1 = null;\n            var y1 = null;\n            var x2 = coordinates.x;\n            var y2 = coordinates.y;\n            \n            /*\n             * get the location of the center of the connector that the link\n             * originated from\n             */\n            var startX = this.activeLinkStartX;\n            var startY = this.activeLinkStartY;\n            \n            /*\n             * get the distance from the start to the current position of the\n             * mouse\n             */\n            var distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n            \n            /*\n             * check if we have set the curvature yet and that the mouse\n             * is more than 20 pixels away from the start.\n             *\n             * we will determine the curvature of the link based upon how\n             * the user has dragged the mouse in relation to the center \n             * of the connector. if they start drawing the link horizontally\n             * we will create a straight line with no curvature. if they\n             * start drawing the link by moving the mouse up, we will create\n             * a line that curves up. if they start drawing the link by \n             * moving the mouse down, we will create a line that curves down.\n             */\n            if (!this.linkCurvatureSet && distance > 20) {\n                \n                /*\n                 * get the slope of the line from the start to the location\n                 * of the mouse\n                 */\n                var slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n                \n                if (y2 < startY) {\n                    // the user has moved the mouse above the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve up\n                    this.activeLink.startCurveUp = true;\n                    this.activeLink.endCurveUp = true;\n                } else if (y2 > startY) {\n                    // the user has moved the mouse below the connector\n                    \n                    if (slope == null) {\n                        /*\n                         * the slope is infinite so we will default the \n                         * curvature to 0.5\n                         */\n                        this.activeLink.curvature = 0.5;\n                    } else if (slope < 1.0) {\n                        // make the link straight\n                        this.activeLink.curvature = 0.0;\n                    } else {\n                        // make the link curved\n                        this.activeLink.curvature = 0.5;\n                    }\n                    \n                    // make the link curve down\n                    this.activeLink.startCurveUp = false;\n                    this.activeLink.endCurveUp = false;\n                }\n                \n                // remember that we have set the curvature\n                this.linkCurvatureSet = true;\n            }\n            \n            var isDragging = true;\n            \n            // redraw the link with the new coordinates\n            this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n        }\n    }\n    \n    /**\n     * Set the active node. This is called when the student places the mouse\n     * over a node. When a node becomes active, we show the delete button and\n     * the border.\n     * @param node the node to make active\n     */\n    setActiveNode(node) {\n        if (node != null) {\n            // show the delete button for the node\n            node.showDeleteButton();\n            \n            // show the border for the node\n            node.showBorder();\n            \n            // remember the active node\n            this.activeNode = node;\n        }\n    }\n    \n    /**\n     * Clear the active node\n     */\n    clearActiveNode() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            if (tempNode == this.activeNode && tempNode != this.highlightedElement) {\n                /*\n                 * we have found the node and it is not highlighted so we will\n                 * hide the delete button and hide the border\n                 */\n                tempNode.hideDeleteButton();\n                tempNode.hideBorder();\n            }\n        }\n        \n        this.activeNode = null;\n    }\n    \n    /**\n     * Get the coordinates of the mouse relative to the svg element\n     * @param event a mouse event\n     * @returns an object containing x and y values\n     */\n    getRelativeCoordinatesByEvent(event) {\n        \n        // get the offset of the mouse from its parent\n        var offsetX = event.offsetX;\n        var offsetY = event.offsetY;\n        \n        var parentOffsetX = 0;\n        var parentOffsetY = 0;\n        \n        // get the user agent so we can determine which browser the user is using\n        var userAgent = navigator.userAgent;\n        \n        if (event.target.tagName == 'svg') {\n            // the target is the svg element\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                matrix = event.target.createSVGMatrix();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            } else {\n                // the user is using some other browser\n                matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'circle') {\n            // the target is a node connector circle or delete circle\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n                \n                // get the bounding box of the circle\n                var bbox = event.target.getBBox();\n                \n                /*\n                 * get the bounding box of the circle so we can get the\n                 * coordinates of the circle within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n                \n                // get the absolute coordinates of the circle\n                parentOffsetX = matrix.e + bbox.x;\n                parentOffsetY = matrix.f + bbox.y;\n            }\n        } else if (event.target.tagName == 'rect') {\n            // the target is the rectangle that outlines the image\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the matrix of the group\n                var matrix = event.target.getCTM();\n                \n                // get the bounding box of the rect\n                var bbox = event.target.getBBox();\n                \n                /*\n                 * get the bounding box of the rect so we can get the\n                 * coordinates of the rect within the group\n                 */\n                var x = bbox.x;\n                var y = bbox.y;\n                \n                // get the absolute coordinates of the rect\n                parentOffsetX = matrix.e + x;\n                parentOffsetY = matrix.f + y;\n            }\n        } else if (event.target.tagName == 'image') {\n            // the target is an image\n            \n            if (userAgent.indexOf('Chrome') != -1) {\n                \n            } else if (userAgent.indexOf('Firefox') != -1) {\n                \n                // get the matrix of the group\n                var matrix = event.target.parentElement.getCTM();\n                \n                // get the coordinates of the upper left corner of the group\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        } else if (event.target.tagName == 'path') {\n            /*\n             * the target is the link line. sometimes the mouse can be over the\n             * link if the student is moving the mouse around quickly.\n             */\n\n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                // get the coordinates of the head of the link\n                var x2 = event.target.attributes['x2'];\n                var y2 = event.target.attributes['y2'];\n                \n                if (x2 != null && y2 != null) {\n                    parentOffsetX = parseInt(x2.value);\n                    parentOffsetY = parseInt(y2.value);\n                }\n            }\n        } else {\n            // the target is something else\n            \n            if (userAgent != null && userAgent.indexOf('Chrome') != -1) {\n                // the user is using Chrome\n                \n            } else if (userAgent != null && userAgent.indexOf('Firefox') != -1) {\n                // the user is using Firefox\n                \n                var matrix = event.target.getCTM();\n                parentOffsetX = matrix.e;\n                parentOffsetY = matrix.f;\n            }\n        }\n        \n        /*\n         * add the parent offset values to the relative offset values to obtain \n         * the x and y values relative to the upper left corner of the svg\n         */\n        var x = parentOffsetX + offsetX;\n        var y = parentOffsetY + offsetY;\n        \n        var returnObject = {}\n        returnObject.x = x;\n        returnObject.y = y;\n        \n        return returnObject;\n    }\n    \n    /**\n     * Called when the student clicks down on a node in the left node bar\n     * @param $event the mouse down event\n     * @param node the node the student clicked down on\n     */\n    selectNode($event, node) {\n        \n        // remember the selected node\n        this.selectedNode = node;\n        \n        /*\n         * remember the offset of the mouse relative to the upper left of the\n         * node's image so that we properly calculate the node position when\n         * the student releases the mouse to put the node in the svg\n         */\n        this.tempOffsetX = $event.offsetX;\n        this.tempOffsetY = $event.offsetY;\n    }\n    \n    /**\n     * The student has dropped a new node on the svg\n     * @param event the drop event\n     */\n    newNodeDropped(event) {\n        \n        // get the selected node\n        var selectedNode = this.selectedNode;\n        \n        if (selectedNode != null) {\n            // get the file name\n            var filePath = selectedNode.fileName;\n            \n            // get the node name\n            var label = selectedNode.label;\n            \n            // get the width and height of the node\n            var width = selectedNode.width;\n            var height = selectedNode.height;\n            \n            // get the original authored id\n            var originalId = selectedNode.id;\n            \n            // get the coordinates relative to the svg element\n            var coordinates = this.getRelativeCoordinatesByEvent(event);\n            \n            // get the position we should drop the node at\n            var x = coordinates.x - this.tempOffsetX;\n            var y = coordinates.y - this.tempOffsetY;\n            \n            // get a new ConceptMapNodeId e.g. 'studentNode3'\n            var newConceptMapNodeId = this.getNewConceptMapNodeId();\n            \n            // create a ConceptMapNode\n            var conceptMapNode = this.ConceptMapService.newConceptMapNode(this.draw, newConceptMapNodeId, originalId, filePath, label, x, y, width, height);\n            \n            // add the node to our array of nodes\n            this.addNode(conceptMapNode);\n            \n            // set the mouse events on the node\n            this.setNodeMouseEvents(conceptMapNode);\n            \n            // make the node highlighted\n            this.setHighlightedElement(conceptMapNode);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // enable node dragging\n        this.enableNodeDragging();\n    }\n    \n    /**\n     * Get a new ConceptMapNode id that isn't being used\n     * @returns a new ConceptMapNode id e.g. 'studentNode3'\n     */\n    getNewConceptMapNodeId() {\n        \n        var nextAvailableNodeIdNumber = 1;\n        \n        // array to remember the numbers that have been used in node ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.nodes.length; x++) {\n            var node = this.nodes[x];\n            \n            if (node != null) {\n                \n                // get the node id\n                var nodeId = node.getId();\n                \n                if (nodeId != null) {\n                    \n                    // get the number from the node id\n                    var nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n                    \n                    if (nodeIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(nodeIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableNodeIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentNode' + nextAvailableNodeIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Get a new ConceptMapLink id that isn't being used\n     * @returns a new ConceptMapLink id e.g. 'studentLink3'\n     */\n    getNewConceptMapLinkId() {\n        \n        var nextAvailableLinkIdNumber = 1;\n        \n        // array to remember the numbers that have been used in link ids already\n        var usedNumbers = [];\n        \n        // loop through all the nodes\n        for (var x = 0; x < this.links.length; x++) {\n            var link = this.links[x];\n            \n            if (link != null) {\n                \n                // get the node id\n                var linkId = link.getId();\n                \n                if (linkId != null) {\n                    \n                    // get the number from the link id\n                    var linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n                    \n                    if (linkIdNumber != null) {\n                        // add the number to the array of used numbers\n                        usedNumbers.push(linkIdNumber);\n                    }\n                }\n            }\n        }\n        \n        if (usedNumbers.length > 0) {\n            // get the max number used\n            var maxNumberUsed = Math.max.apply(Math, usedNumbers);\n            \n            if (!isNaN(maxNumberUsed)) {\n                // increment the number by 1 to get the next available number\n                nextAvailableLinkIdNumber = maxNumberUsed + 1;\n            }\n        }\n        \n        var newId = 'studentLink' + nextAvailableLinkIdNumber;\n        \n        return newId;\n    }\n    \n    /**\n     * Set the mouse events on a newly created node\n     * @param conceptMapNode the node\n     */\n    setNodeMouseEvents(conceptMapNode) {\n        \n        // set the node mouse over event\n        conceptMapNode.setNodeMouseOver((event) => {\n            this.nodeMouseOver(event);\n        });\n        \n        // set the node mouse out event\n        conceptMapNode.setNodeMouseOut((event) => {\n            this.nodeMouseOut(event);\n        });\n        \n        // set the connector mouse down event\n        conceptMapNode.setConnectorMouseDown((event) => {\n            this.disableNodeDragging();\n            this.connectorMouseDown(event);\n        });\n        \n        // set the node mouse down event\n        conceptMapNode.setNodeMouseDown((event) => {\n            this.nodeMouseDown(event);\n        });\n        \n        // set the node mouse up event\n        conceptMapNode.setNodeMouseUp((event) => {\n            this.nodeMouseUp(event);\n        });\n        \n        // set the delete button mouse down event\n        conceptMapNode.setDeleteButtonMouseDown((event) => {\n            this.nodeDeleteButtonMouseDown(event);\n        });\n        \n        // set the delete button mouse over event\n        conceptMapNode.setDeleteButtonMouseOver((event) => {\n            this.nodeDeleteButtonMouseOver(event);\n        });\n        \n        // set the delete button mouse out event\n        conceptMapNode.setDeleteButtonMouseOut((event) => {\n            this.nodeDeleteButtonMouseOut(event);\n        });\n        \n        // set node drag move event\n        conceptMapNode.setDragMove((event) => {\n            this.nodeDragMove(event);\n        });\n    }\n    \n    /**\n     * Set an element to be highlighted. The element can be a node or a link.\n     * @param element a node or link\n     */\n    setHighlightedElement(element) {\n        \n        // remove highlighting from any existing element\n        this.clearHighlightedElement();\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n        \n        if (element != null) {\n            \n            // remember the highlighted element\n            this.highlightedElement = element;\n            \n            // set the higlighted value to true for the element\n            element.isHighlighted(true);\n            \n            // show the delete button for the element\n            element.showDeleteButton();\n            \n            if(element.constructor.name == 'ConceptMapNode') {\n                // the element is a node\n                \n                // show the border\n                element.showBorder();\n            } else if (element.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // show the link type chooser\n                this.showLinkTypeChooser();\n                \n                // select the link type that was previously chosen for the link\n                this.selectedLinkType = element.getOriginalId();\n            }\n        }\n    }\n    \n    /**\n     * If an element is highlighted, make it no longer highlighted.\n     */\n    clearHighlightedElement() {\n        \n        if (this.highlightedElement != null) {\n            \n            if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n                // the highlighted element is a node\n                \n                // hide the border\n                this.highlightedElement.hideBorder();\n            } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n                // the element is a link\n                \n                // hide the link type chooser\n                this.hideLinkTypeChooser();\n            }\n            \n            // set the higlighted value to false for the element\n            this.highlightedElement.isHighlighted(false);\n            \n            // hide the delete button\n            this.highlightedElement.hideDeleteButton();\n            \n            // clear the highlighted element reference\n            this.highlightedElement = null;\n        }\n    }\n    \n    /**\n     * Enable node dragging\n     */\n    enableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get the node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    \n                    /*\n                     * get the bounds that we will allow the node group to\n                     * dragged in\n                     */\n                    var options = {\n                        minX: 0,\n                        minY: 0,\n                        maxX: this.width,\n                        maxY: this.height\n                    };\n                    \n                    // make the node group draggable\n                    group.draggable(options);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Disable node dragging. This will be called when the student creates a\n     * link so that they aren't dragging nodes around at the same time as \n     * creating a link.\n     */\n    disableNodeDragging() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // make the group not draggable\n                    group.draggable(false);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Move the link text group to the front\n     */\n    moveLinkTextToFront() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var link = this.links[l];\n            \n            if (link != null) {\n                // move the link text group to the front\n                link.moveTextGroupToFront();\n            }\n        }\n    }\n    \n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var node = this.nodes[n];\n            \n            if (node != null) {\n                \n                // get a node group\n                var group = node.getGroup();\n                \n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a node to our array of nodes\n     * @param node the node to add\n     */\n    addNode(node) {\n        if (node != null) {\n            this.nodes.push(node);\n        }\n    }\n    \n    /**\n     * Remove a node from the svg and our array of nodes\n     * @param node the node to remove\n     */\n    removeNode(node) {\n        \n        if (node != null) {\n            \n            // get the outgoing links from the node\n            var outgoingLinks = node.getOutgoingLinks();\n            \n            if (outgoingLinks != null) {\n                \n                // get the number of outgoing links\n                var numOutgoingLinks = outgoingLinks.length;\n                \n                // loop until we have removed all the outgoing links\n                while (numOutgoingLinks > 0) {\n                    // get an outgoing link\n                    var outgoingLink = outgoingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(outgoingLink);\n                    \n                    // decrement the number of outgoing links counter\n                    numOutgoingLinks--;\n                }\n            }\n            \n            // get the incoming links to the node\n            var incomingLinks = node.getIncomingLinks();\n            \n            if (incomingLinks != null) {\n                \n                // get the number of incoming links\n                var numIncomingLinks = incomingLinks.length;\n                \n                // loop until we have removed all the incoming links\n                while (numIncomingLinks > 0) {\n                    // get an incoming link\n                    var incomingLink = incomingLinks[0];\n                    \n                    // remove the link from the svg and from our array of links\n                    this.removeLink(incomingLink);\n                    \n                    // decrement the number of incoming links counter\n                    numIncomingLinks--;\n                }\n            }\n            \n            // remove the node from the svg\n            node.remove();\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                if (tempNode == node) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all nodes from the svg and our array of nodes\n     */\n    removeAllNodes() {\n        \n        // loop through all the nodes\n        for (var n = 0; n < this.nodes.length; n++) {\n            var tempNode = this.nodes[n];\n            \n            // remove the node from the svg\n            tempNode.remove();\n        }\n        \n        // clear the nodes array\n        this.nodes = [];\n    }\n    \n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(id) {\n        var node = null;\n        \n        if (id != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a node by id.\n     * @param groupId the svg group id\n     * @returns the node with the given id or null\n     */\n    getNodeByGroupId(groupId) {\n        var node = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeGroupId = tempNode.getGroupId();\n                \n                if (groupId == tempNodeGroupId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Get a link by id.\n     * @param id the link id\n     * @returns the link with the given id or null\n     */\n    getLinkById(id) {\n        var link = null;\n        \n        if (id != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkId = tempLink.getId();\n                \n                if (groupId == tempLinkId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a link by group id.\n     * @param groupId the svg group id\n     * @returns the link with the given group id or null\n     */\n    getLinkByGroupId(groupId) {\n        var link = null;\n        \n        if (groupId != null) {\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                var tempLinkGroupId = tempLink.getGroupId();\n                \n                if (groupId == tempLinkGroupId) {\n                    // we have found the link we want\n                    link = tempLink;\n                    break;\n                }\n            }\n        }\n        \n        return link;\n    }\n    \n    /**\n     * Get a node by its connector id.\n     * @param connectorId the svg circle id of the connector\n     * @returns the node with the associated connector or null\n     */\n    getNodeByConnectorId(connectorId) {\n        var node = null;\n        \n        if (connectorId != null) {\n            \n            // loop through all the nodes\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                \n                // get the connector id\n                var tempConnectorId = tempNode.getConnectorId();\n                \n                if (connectorId == tempConnectorId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n        \n        return node;\n    }\n    \n    /**\n     * Remove a node by id. The id of a node is the same as its svg group id.\n     * @param groupId \n     */\n    removeNodeById(groupId) {\n        if (groupId != null) {\n            \n            // loop through all the nodse\n            for (var n = 0; n < this.nodes.length; n++) {\n                var tempNode = this.nodes[n];\n                var tempNodeId = tempNode.getId();\n                \n                if (groupId == tempNodeId) {\n                    // we have found the node we want to remove\n                    this.nodes.splice(n, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a link to our array of links\n     * @param link the link to add\n     */\n    addLink(link) {\n        if (link != null) {\n            this.links.push(link);\n        }\n    }\n    \n    /**\n     * Remove a link from the svg and our array of links\n     * @param link the link to remove\n     */\n    removeLink(link) {\n        \n        if (link != null) {\n            \n            // remove the link from the svg\n            link.remove();\n            \n            // loop through all the links\n            for (var l = 0; l < this.links.length; l++) {\n                var tempLink = this.links[l];\n                \n                if (link == tempLink) {\n                    // we have found the link we want to remove\n                    this.links.splice(l, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Remove all the links from the svg and from our array of links\n     */\n    removeAllLinks() {\n        \n        // loop through all the links\n        for (var l = 0; l < this.links.length; l++) {\n            var tempLink = this.links[l];\n            \n            // remove the link from the svg\n            tempLink.remove();\n        }\n        \n        // clear the links array\n        this.links = [];\n    }\n    \n    /**\n     * Called when the mouse moves over a node\n     * @param event the mouse over event\n     */\n    nodeMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node\n     * @param event the mouse out event\n     */\n    nodeMouseOut(event) {\n        \n        // get the group id of the node\n        var groupId = event.target.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                // make the node inactive by clearing the active node\n                this.clearActiveNode();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a node\n     * @param event the mouse down event\n     */\n    nodeMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    // make the node highlighted\n                    this.setHighlightedElement(node);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is released on a node\n     * @param event the mouse up event\n     */\n    nodeMouseUp(event) {\n        \n        if (this.drawingLink && this.activeLink != null) {\n            /*\n             * the student is creating a link and has just released the mouse\n             * over a node to connect the destination node of the link\n             */\n            \n            // get the group id of the node\n            var groupId = event.target.parentElement.id;\n            \n            if (groupId != null) {\n                \n                // get the node\n                var node = this.getNodeByGroupId(groupId);\n                \n                if (node != null) {\n                    \n                    // get the source node of the link\n                    var sourceNode = this.activeLink.sourceNode;\n                    var sourceNodeGroupId = sourceNode.getGroupId();\n                    \n                    if (sourceNodeGroupId == groupId) {\n                        /* \n                         * if the source of the link is the same as the \n                         * destination node, we will not connect the link\n                         */\n                        this.activeLink.remove();\n                        this.activeLink = null;\n                    } else {\n                        /*\n                         * the source node is different than the destination\n                         * node so we will connect the link\n                         */\n                        \n                        // set the destination node of the link\n                        this.activeLink.setDestination(node);\n                        \n                        // make the link the active link\n                        this.addLink(this.activeLink);\n                        \n                        // highlight the link\n                        this.setHighlightedElement(this.activeLink);\n                        \n                        /*\n                         * set the link as a newly created link so that if the\n                         * student clicks the cancel button, we will remove\n                         * the link\n                         */\n                        this.newlyCreatedLink = this.activeLink;\n                        \n                        // display the modal overlay\n                        this.displayLinkTypeChooserModalOverlay = true;\n                        \n                        // handle the student data changing\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n        \n        // the link has been connected so we are no longer drawing the link\n        this.drawingLink = false;\n    }\n    \n    /**\n     * Called when a link delete button is clicked\n     * @param event the mouse click event\n     * @param link the link to delete\n     */\n    linkDeleteButtonClicked(event, link) {\n        \n        if (link != null) {\n            \n            // remove the link from our array of links\n            this.removeLink(link);\n            \n            // handle the student data changing\n            this.studentDataChanged();\n        }\n        \n        // hide the link type chooser\n        this.hideLinkTypeChooser();\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a connector. This will start\n     * creating a link.\n     * @param event the mouse down event\n     */\n    connectorMouseDown(event) {\n        \n        // set the flag that we are drawing a link\n        this.drawingLink = true;\n        \n        // get the connector (the svg circle)\n        var connector = event.target;\n        \n        /*\n         * disable node dragging so that the node isn't dragged when the\n         * link head is being dragged\n         */\n        this.disableNodeDragging();\n        \n        // get the node\n        var node = this.getNodeByConnectorId(connector.id);\n        \n        // get the center of the image\n        var x = node.cx();\n        var y = node.cy();\n        \n        // get a new ConceptMapLinkId e.g. 'studentLink3'\n        var newConceptMapLinkId = this.getNewConceptMapLinkId();\n        \n        /*\n         * we will not know what the original id is until the student has\n         * selected a link type\n         */\n        var originalId = null;\n        \n        // create a link that comes out of the node\n        var link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n        \n        // set the link mouse events\n        this.setLinkMouseEvents(link);\n        \n        // remember the active link\n        this.activeLink = link;\n        \n        // flag for determining if we have set the link curvature\n        this.linkCurvatureSet = false;\n        \n        // remember the location of the center of the connector\n        this.activeLinkStartX = node.connectorCX();\n        this.activeLinkStartY = node.connectorCY();\n        \n        // highlight the link\n        this.setHighlightedElement(link);\n        \n        // clear the active node\n        this.clearActiveNode();\n        \n        // make the source node the active node\n        this.setActiveNode(node);\n    }\n    \n    /**\n     * Set the link mouse events for a link\n     * @param link the ConceptMapLink\n     */\n    setLinkMouseEvents(link) {\n        \n        // set the link mouse down listener\n        link.setLinkMouseDown((event) => {\n            this.linkMouseDown(event);\n        });\n        \n        // set the link text mouse down listener\n        link.setLinkTextMouseDown((event) => {\n            this.linkTextMouseDown(event);\n        });\n        \n        // set the link mouse over listener\n        link.setLinkMouseOver((event) => {\n            this.linkMouseOver(event);\n        });\n        \n        // set the link mouse out listener\n        link.setLinkMouseOut((event) => {\n            this.linkMouseOut(event);\n        });\n        \n        // set the delete button clicked event for the link\n        link.setDeleteButtonClicked((event) => {\n            this.linkDeleteButtonClicked(event, link);\n        });\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link\n     * @param event the mouse down event\n     */\n    linkMouseDown(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // make the link highlighted\n            this.setHighlightedElement(link);\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on a link text\n     * @param event the mouse down event\n     */\n    linkTextMouseDown(event) {\n        \n        var linkGroupId = null;\n        \n        /*\n         * the link group id is set into the text group in the linkGroupId\n         * variable. the text group hierarchy looks like this\n         * text group > text > tspan\n         * text group > rect\n         */\n        if (event.target.nodeName == 'tspan') {\n            linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'text') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        } else if (event.target.nodeName == 'rect') {\n            linkGroupId = event.target.parentElement.linkGroupId;\n        }\n            \n        if (linkGroupId != null) {\n            \n            // get the link\n            var link = this.getLinkByGroupId(linkGroupId);\n            \n            if (link != null) {\n                // make the link highlighted\n                this.setHighlightedElement(link);\n            }\n        }\n        \n    }\n    \n    /**\n     * Called when the mouse is over a link\n     * @param event the mouse over event\n     */\n    linkMouseOver(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        if (link != null) {\n            // show the delete button for the link\n            link.showDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a link\n     * @param event the mouse out event\n     */\n    linkMouseOut(event) {\n        \n        // get the group id\n        var groupId = this.getGroupId(event.target);\n        \n        // get the link\n        var link = this.getLinkByGroupId(groupId);\n        \n        // hide the delete button if the link is not the highlighted link\n        if (link != null && link != this.highlightedElement) {\n            link.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the delete button of a node\n     * @param event the mouse down event\n     */\n    nodeDeleteButtonMouseDown(event) {\n        \n        if (event.target.parentElement != null) {\n            \n            // get the group id\n            var groupId = event.target.parentElement.parentElement.id;\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                \n                // remove the node from our array of nodes\n                this.removeNode(node);\n                \n                // handle the student data changing\n                this.studentDataChanged();\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse is over a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOver(event) {\n        \n        // get the node group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        if (groupId != null) {\n            \n            // get the node\n            var node = this.getNodeByGroupId(groupId);\n            \n            if (node != null) {\n                /*\n                 * make the node active so that the border and delete button\n                 * shows\n                 */\n                this.setActiveNode(node);\n            }\n        }\n    }\n    \n    /**\n     * Called when the mouse moves out of a node delete button\n     * @param event the mouse over event\n     */\n    nodeDeleteButtonMouseOut(event) {\n        \n        // get the group id\n        var groupId = event.target.parentElement.parentElement.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // make the node inactive by clearing the active node\n            this.clearActiveNode(node);\n        }\n    }\n    \n    /**\n     * Called when the node is dragged\n     * @param event the drag event\n     */\n    nodeDragMove(event) {\n        \n        // get the group id\n        var groupId = event.target.id;\n        \n        // get the node\n        var node = this.getNodeByGroupId(groupId);\n        \n        if (node != null) {\n            // handle the node being dragged\n            node.dragMove(event);\n        }\n        \n        // handle the student data changing\n        this.studentDataChanged();\n    }\n    \n    /**\n     * Get the group id of an element. All elements of a node or link are\n     * contained in a group. These groups are the children of the main svg\n     * element.\n     * for example a node's image element will be located here\n     * svg > group > image\n     * for example a link's path element will be located here\n     * svg > group > path\n     * \n     * @param element get the group id of this element\n     * @returns the group id\n     */\n    getGroupId(element) {\n        \n        var groupId = null;\n        var currentElement = element;\n        var previousId = null;\n        \n        // loop until we have reached the svg element\n        while (currentElement != null) {\n            \n            if (currentElement.tagName == 'svg') {\n                // base case. we have found the svg element.\n                \n                // the group id will be the previous id we saw\n                groupId = previousId;\n                \n                // set the current element to null so that the while loop ends\n                currentElement = null;\n            } else {\n                // remember the element id\n                previousId = currentElement.id;\n                \n                /*\n                 * set the current element to the parent to continue searching\n                 * up the hierarchy\n                 */\n                currentElement = currentElement.parentElement;\n            }\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Save the starter concept map\n     */\n    saveStarterConceptMap() {\n        \n        // get the concept map data\n        var conceptMapData = this.getConceptMapData();\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = conceptMapData;\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete the starter concept map\n     */\n    deleteStarterConceptMap() {\n        \n        // set the starter concept map data\n        this.authoringComponentContent.starterConceptMap = null;\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Remove all the links and nodes\n     */\n    clearConceptMap() {\n        \n        // remove all the links from the svg and the array of links\n        this.removeAllLinks();\n        \n        // remove all the nodes from the svg and the array of nodes\n        this.removeAllNodes();\n    }\n    \n    /**\n     * Reset the concept map data. We will clear the concept map data and\n     * if there is starter concept map data we will set it into the concept map.\n     */\n    resetConceptMap() {\n        \n        // clear the concept map\n        this.clearConceptMap();\n        \n        if (this.componentContent.starterConceptMap != null) {\n            \n            // get the starter concept map\n            var conceptMapData = this.componentContent.starterConceptMap;\n            \n            // populate the starter concept map data into the component\n            this.populateConceptMapData(conceptMapData);\n        }\n    }\n    \n    /**\n     * Check the student concept map against the custom rule evaluator\n     */\n    checkAnswer() {\n        \n        // get the custom rule evaluator code that was authored\n        var customRuleEvaluator = this.componentContent.customRuleEvaluator;\n        \n        // get the component content\n        var componentContent = this.componentContent;\n        \n        // get the student concept map\n        var conceptMapData = this.getConceptMapData();\n        \n        var thisConceptMapService = this.ConceptMapService;\n        \n        // the result will be stored in this variable\n        var thisResult = {};\n        \n        /*\n         * create the any function that can be called in the custom rule \n         * evaluator code. the arguments to the any function are rule names.\n         * for example if we are looking for any of the links below \n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var any = function() {\n            return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n        };\n\n        /*\n         * create the all function that can be called in the custom rule \n         * evaluator code. the arguments to the all function are rule names.\n         * for example if we are looking for all of the links below\n         * Sun (Infrared Radiation) Space\n         * Sun (Heat) Space\n         * Sun (Solar Radiation) Space\n         * we will call the any function like this\n         * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n         * these dynamic arguments will be placed in the arguments variable\n         */\n        var all = function() {\n            return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n        }\n        \n        /*\n         * create the setResult function that can be called in the custom rule \n         * evaluator code\n         */\n        var setResult = function(result) {\n            thisResult = result;\n        }\n        \n        // run the custom rule evaluator\n        eval(customRuleEvaluator);\n        \n        //console.log(\"thisResult.score=\" + thisResult.score);\n        //console.log(\"thisResult.feedback=\" + thisResult.feedback);\n        var resultString = \"\";\n        \n        if (this.componentContent.showAutoScore && thisResult.score != null) {\n            // display the score\n            resultString += \"Score: \" + thisResult.score;\n        }\n        \n        if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n            if (resultString != \"\") {\n                // add a new line if the result string is not empty\n                resultString += \"<br/>\";\n            }\n            \n            // display the feedback\n            resultString += \"Feedback: \" + thisResult.feedback;\n        }\n        \n        // show the result to the student\n        //alert(resultString);\n        \n        if (resultString != \"\") {\n            // show the auto feedback in a modal dialog\n            this.$mdDialog.show(\n                this.$mdDialog.alert()\n                .parent(angular.element(document.querySelector('#feedbackDiv')))\n                .clickOutsideToClose(true)\n                .title('Feedback')\n                .htmlContent(resultString)\n                .ariaLabel('Feedback')\n                .ok('Close')\n            );\n        }\n        \n        // remember the feedback string\n        this.autoFeedbackString = resultString;\n    }\n    \n    /**\n     * Show the auto feedback that was generated when the student previously\n     * clicked \"Check Answer\".\n     */\n    showAutoFeedback() {\n        \n        // show the auto feedback in a modal dialog\n        this.$mdDialog.show(\n            this.$mdDialog.alert()\n            .parent(angular.element(document.querySelector('#feedbackDiv')))\n            .clickOutsideToClose(true)\n            .title('Feedback')\n            .htmlContent(this.autoFeedbackString)\n            .ariaLabel('Feedback')\n            .ok('Close')\n        );\n    }\n};\n\nConceptMapController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConceptMapService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default ConceptMapController;\n"]}