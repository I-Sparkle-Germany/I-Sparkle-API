{"version":3,"sources":["conceptMapService.es6"],"names":["ConceptMapService","$anchorScroll","$filter","$location","$q","$timeout","ConfigService","StudentAssetService","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","width","height","background","stretchBackground","nodes","linksTitle","links","rules","starterConceptMap","customRuleEvaluator","showAutoScore","showAutoFeedback","componentToCopy","createComponent","starterSentence","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","submitCounter","conceptMapData","draw","originalId","filePath","label","x","y","ConceptMapNode","sourceNode","destinationNode","color","curvature","startCurveUp","startCurveDown","ConceptMapLink","x1","y1","x2","y2","slope","distance","Math","sqrt","pow","startx","starty","endx","endy","endCurveUp","len","angle","nodeRadius","start","coord","tip","pathData","arrowHeadData","curveDistance","startYCurveDistance","max","min","endYCurveDistance","startUp","endUp","c2","c3","cDistance","perimX","perimYstart","perimYend","push","percLengthOfHead","getLengthOfCubicBezier","centerBaseOfHead","getPointOnCubicBezier","theta","atan2","baseAngleA","PI","baseAngleB","baseA","cos","sin","baseB","round","C1","C2","C3","C4","precision","t","currentPoint","previousPoint","xDif","yDif","percent","pos","B1","B2","B3","B4","componentContent","ruleName","rule","getRuleByRuleName","getRulesByCategoryName","firstRule","r","tempRule","tempResult","evaluateRule","nodeLabel","getNodesByLabel","nodeCount","comparison","number","not","linkLabel","otherNodeLabel","getLinksByLabels","linkCount","name","category","tempRules","categories","c","tempCategory","nodesByLabel","n","resultLinks","tempLink","tempLinkLabel","sourceNodeLabel","destinationNodeLabel","args","ruleResult","evaluateRuleByRuleName","conceptMapNodes","instanceId","fileName","conceptMapNode","newConceptMapNode","conceptMapLinks","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","getNodeById","conceptMapLink","newConceptMapLink","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","moveTextGroupToFront","group","getGroup","front","getLabel","setLabel","tempNode","tempNodeId","getId","deferred","defer","svgElement","document","createElement","SVG","populateConceptMapData","svgString","innerHTML","getHrefToBase64ImageReplacements","then","images","imagePair","imageHref","lastIndexOfSlash","lastIndexOf","substring","base64Image","imageRegEx","RegExp","replace","myCanvas","ctx","getContext","svg","Blob","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","event","target","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","referencedAssetUrl","deleteAsset","resolve","src","promise","prependAssetsPath","promises","imageHrefs","getImagesInSVG","getProjectAssetsDirectoryPath","getBase64Image","all","regex","exec","isStudentConceptMapDifferentThanStarterConceptMap","studentConceptMap","studentNodes","studentLinks","starterNodes","starterLinks","studentNode","starterNode","studentLink","starterLink","sourceNodeOriginalId","destinationNodeOriginalId","angular","element","nodeId","componentId","serializer","XMLSerializer","serializeToString","asset","highlighted","deleteButtonColor","connector","createConnector","deleteButtonGroup","createDeleteButtonGroup","textGroup","createTextGroup","border","createBorder","outgoingLinks","incomingLinks","add","hide","jsonObject","ol","outgoingLink","getOriginalId","tempLinkObject","il","incomingLink","rect","fill","stroke","opacity","connectorRadius","circle","radius","cx","cy","deleteButtonRadius","deleteButtonCircle","topX","topY","bottomX","bottomY","leftX","leftY","rightX","rightY","deleteButtonXPath","deleteButtonX","path","transform","rotation","translate","attr","textRect","text","font","family","size","style","setAttribute","textBBox","getBBox","calculateTextRectWidth","e","getImageWidth","getImageHeight","groupId","val","groupX","imageCX","groupY","imageCY","value","show","getGroupX","imageRelativeX","imageX","bbox","bboxX","getGroupY","imageRelativeY","imageY","bboxY","nodeMouseOverFunction","mouseover","nodeMouseOutFunction","mouseout","nodeMouseDownFunction","mousedown","nodeMouseUpFunction","mouseup","nodeMouseClickFunction","click","connectorMouseDownFunction","deleteButtonMouseDownFunction","deleteButtonMouseOverFunction","deleteButtonMouseOutFunction","dragMoveFunction","on","tempOutgoingLink","splice","tempIncomingLink","nearestPoint","getNearestPointToDestinationNode","updateCoordinates","controller","studentDataChanged","draggable","remove","linksToDestination","labelText","head","textPercentageLocationOnLink","randInt","floor","random","curvedLink","connectLinkToNodes","arrowPathArraysObject","calculateCurvedLine","tail","toString","hideTextGroup","showTextGroup","isDragging","array","plot","deleteButtonLocation","getDeleteButtonLocation","totalLength","getTotalLength","midPoint","getPointAtLength","arrowPathArrays","directionAlreadyUsed","direction","parallelLinks","getLinksToDestination","usedDirections","p","parallelLink","tempDirection","indexOf","hideDeleteButton","rectMinX","getImageX","rectMinY","getImageY","point","getNearestPointInPerimeter","w","h","b","clamp","dl","abs","dr","dt","db","m","lower","upper","deleteButton","addOutgoingLink","addIncomingLink","invisibleCircleRadius","invisibleCircle","deleteButtonMidpointX","deleteButtonMidpointY","rotate","location","deleteButtonGroupMouseOver","deleteButtonGroupMouseOut","showDeleteButton","deleteButtonClickedFunction","linkMouseDownFunction","linkTextMouseDownFunction","linkMouseOverFunction","linkMouseOutFunction","line","distanceAlongLine","distanceAlongNormal","p1","p2","scale","dx","dy","occluded","linkGroupId","removeOutgoingLink","removeIncomingLink","$inject"],"mappings":"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","file":"conceptMapService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass ConceptMapService extends NodeService {\n  constructor(\n      $anchorScroll,\n      $filter,\n      $location,\n      $q,\n      $timeout,\n      ConfigService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$location = $location;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.ConfigService = ConfigService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Concept Map\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('conceptMap.componentTypeLabel');\n  }\n\n  /**\n   * Create a ConceptMap component object\n   * @returns a new ConceptMap component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'ConceptMap';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.isStudentAttachmentEnabled = false;\n    component.width = 800;\n    component.height = 600;\n    component.background = null;\n    component.stretchBackground = null;\n    component.nodes = [];\n    component.linksTitle = '';\n    component.links = [];\n    component.rules = [];\n    component.starterConceptMap = null;\n    component.customRuleEvaluator = '';\n    component.showAutoScore = false;\n    component.showAutoFeedback = false;\n    return component;\n  }\n\n  /**\n   * Copies a ConceptMap component object\n   * @returns a copied ConceptMap component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.starterSentence = componentToCopy.starterSentence;\n    component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n    return component;\n  }\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'ConceptMap') {\n        // the other component is an ConceptMap component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.isSubmit == true || (state.studentData.submitCounter != null && state.studentData.submitCounter > 0)) {\n              // there is a response so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.conceptMapData != null) {\n            // there is a response so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Create an instance of the ConceptMapNode class\n   * @param draw the svg.js draw object\n   * @param id the node id\n   * @param filePath the file path of the image\n   * @param label the label of the node\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @param width the width of the image\n   * @param height the height of the image\n   * @param a ConceptMapNode\n   */\n  newConceptMapNode(draw, id, originalId, filePath, label, x, y, width, height) {\n    return new ConceptMapNode(this, draw, id, originalId, filePath, label, x, y, width, height);\n  }\n\n  /**\n   * Create an instance of the ConceptMapLink class\n   * @param draw the svg.js draw object\n   * @param id the link id\n   * @param node the source ConceptMapNode that the link is coming out of\n   * @param x the x position of the tail\n   * @param y the y position of the tail\n   * @returns a ConceptMapLink\n   */\n  newConceptMapLink(draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown) {\n    return new ConceptMapLink(this, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown);\n  }\n\n  /**\n   * Get the slope of the line between two points\n   * @param x1 x position of the first point\n   * @param y1 y position of the first point\n   * @param x2 x position of the second point\n   * @param y2 y position of the second point\n   * @returns the slope of the line or null if the slope is infinite\n   */\n  getSlope(x1, y1, x2, y2) {\n\n    var slope = null;\n\n    if ((x2 - x1) == 0) {\n      // the slope is infinite so we will return null\n      slope = null;\n    } else {\n      // calculate the slope\n      slope = (y2 - y1) / (x2 - x1);\n    }\n\n    return slope;\n  }\n\n  /**\n   * Calculate the euclidean distance between two points\n   * @param x1 x position of the first point\n   * @param y1 y position of the first point\n   * @param x2 x position of the second point\n   * @param y2 y position of the second point\n   * @returns the distance between the two points\n   */\n  calculateDistance(x1, y1, x2, y2) {\n\n    // calculate the distance\n    var distance = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n\n    return distance;\n  }\n\n  /**\n\n  Returns an array representation of the path elements for an arrow\n\n  First we calculate a simple curve for the tail.\n\n  Then we pick a point on that curve to use as the base-center of the arrow head,\n  then calculate the position of that triangle based on the angle between that\n  point and the tip.\n\n  @params startx {Number} X-coordinate of the start point\n  @params starty {Number} Y-coordinate of the start point\n  @params endx {Number} X-coordinate of the end point\n  @params endy {Number} Y-coordinate of the end point\n  @params len {Number} Length of the \"tip\" of the arrowhead\n  @params angle {Number} Angle in degrees\n    between the line and each wing of the arrowhead.\n    Should be less than 90.\n\n  Note: This function and the associated functions that are called by this\n  function are taken from the Concord MySystem github project.\n  https://github.com/concord-consortium/mysystem_sc\n  The code is found in the arrow_drawing.js file.\n  mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n\n  **/\n  arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius) {\n\n    if (startx === endx && starty === endy){\n      return [[\"\"],[\"\"]];\n    }\n\n    var start = new this.coord(startx, starty),\n    tip = new this.coord(endx, endy),\n    pathData   = [],\n    arrowHeadData = [];\n\n    // calculate control points c2 and c3\n    var curveDistance = (tip.x - start.x) * curvature,\n    startYCurveDistance = (curveDistance === 0 ? 1 : Math.max(Math.min(curveDistance, 100), -100)),\n    endYCurveDistance = startYCurveDistance,\n    startUp = startCurveUp ? 1 : -1,\n    endUp = endCurveUp ? 1 : -1;\n    startYCurveDistance = (startYCurveDistance * startUp > 0) ? startYCurveDistance : startYCurveDistance * -1;\n    endYCurveDistance = (endYCurveDistance * endUp > 0) ? endYCurveDistance : endYCurveDistance * -1;\n    var c2 = new this.coord(start.x+(curveDistance/2), start.y-startYCurveDistance),\n    c3 = new this.coord(tip.x-(curveDistance/2), tip.y-endYCurveDistance),\n    cDistance = Math.sqrt(Math.pow((curveDistance/2),2) + Math.pow(startYCurveDistance,2)),\n    perimX = nodeRadius*(curveDistance/2)/cDistance,\n    perimYstart = nodeRadius*startYCurveDistance/cDistance,\n    perimYend = nodeRadius*endYCurveDistance/cDistance;\n\n    // update tip\n    tip = new this.coord(tip.x - perimX, tip.y - perimYend);\n\n    // draw arrow path\n\n    pathData.push(\"M\", start.x + perimX, start.y - perimYstart);  // move to start of line\n    pathData.push(\"C\", c2.x, c2.y, c3.x, c3.y, tip.x, tip.y); // curve line to the tip\n\n    // draw arrow head\n    var percLengthOfHead = len / this.getLengthOfCubicBezier(start, c2, c3, tip),\n    centerBaseOfHead = this.getPointOnCubicBezier(percLengthOfHead, start, c2, c3, tip),\n    theta  = Math.atan2((tip.y-centerBaseOfHead.y),(tip.x-centerBaseOfHead.x)),\n    baseAngleA = theta + angle * Math.PI/180,\n    baseAngleB = theta - angle * Math.PI/180,\n    baseA    = new this.coord(tip.x - len * Math.cos(baseAngleA), tip.y - len * Math.sin(baseAngleA)),\n    baseB    = new this.coord(tip.x - len * Math.cos(baseAngleB), tip.y - len * Math.sin(baseAngleB));\n\n    arrowHeadData.push(\"M\", tip.x, tip.y);\n    arrowHeadData.push(\"L\", baseA.x, baseA.y);  // line to baseA\n    arrowHeadData.push(\"L\", baseB.x, baseB.y);  // line to baseB\n    arrowHeadData.push(\"L\", tip.x,   tip.y  );  // line back to the tip\n\n    return [pathData, arrowHeadData];\n  }\n\n  /**\n   * Note: This function is from\n   * https://github.com/concord-consortium/mysystem_sc\n   * The code is found in the arrow_drawing.js file.\n   * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n   */\n  coord(x,y) {\n    if(!x) x = 0;\n    if(!y) y = 0;\n    /*\n    *   Limit precision of decimals for SVG rendering.\n    *   otherwise we get really long SVG strings,\n    *   and webkit error messsages like of this sort:\n    *   \"Error: Problem parsing d='<svg string with long dec>'\"\n    */\n    x = Math.round(x * 1000)/1000;\n    y = Math.round(y * 1000)/1000;\n    return {x: x, y: y};\n  }\n\n  /**\n   * Note: This function is from\n   * https://github.com/concord-consortium/mysystem_sc\n   * The code is found in the arrow_drawing.js file.\n   * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n   */\n  getLengthOfCubicBezier(C1,C2,C3,C4)\n  {\n    var precision = 10,\n    length  = 0,\n    t,\n    currentPoint,\n    previousPoint;\n\n    for (var i = 0; i<precision; i++){\n      t = i/precision;\n      currentPoint = this.getPointOnCubicBezier(t, C1,C2,C3,C4);\n      if (i > 0){\n        var xDif = currentPoint.x - previousPoint.x,\n        yDif = currentPoint.y - previousPoint.y;\n        length += Math.sqrt((xDif*xDif) + (yDif*yDif));\n      }\n      previousPoint = currentPoint;\n    }\n    return length;\n  }\n\n  /**\n   * Note: This function is from\n   * https://github.com/concord-consortium/mysystem_sc\n   * The code is found in the arrow_drawing.js file.\n   * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n   */\n  getPointOnCubicBezier(percent,C1,C2,C3,C4) {\n    if (percent < 0) percent = 0;\n    if (percent > 1) percent = 1;\n    var pos = new this.coord();\n    pos.x = C1.x*this.B1(percent) + C2.x*this.B2(percent) + C3.x*this.B3(percent) + C4.x*this.B4(percent);\n    pos.y = C1.y*this.B1(percent) + C2.y*this.B2(percent) + C3.y*this.B3(percent) + C4.y*this.B4(percent);\n    return pos;\n  }\n\n  /**\n   * Note: These functions are from\n   * https://github.com/concord-consortium/mysystem_sc\n   * The code is found in the arrow_drawing.js file.\n   * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n   */\n  B1(t) { return t*t*t; }\n  B2(t) { return 3*t*t*(1-t); }\n  B3(t) { return 3*t*(1-t)*(1-t); }\n  B4(t) { return (1-t)*(1-t)*(1-t); }\n\n  /**\n   * Evaluate a rule name\n   * @param componentContent the component content\n   * @param conceptMapData the student concept map data\n   * @param ruleName the rule name\n   * @returns whether the rule was satisfied\n   */\n  evaluateRuleByRuleName(componentContent, conceptMapData, ruleName) {\n\n    var result = false;\n\n    if (ruleName === true) {\n      // the rule name is not actually a rule but is the true boolean\n      return true;\n    } else if (ruleName === false) {\n      // the rule name is not actually a rule but is the false boolean\n      return false;\n    }\n\n    // get the rule\n    var rule = this.getRuleByRuleName(componentContent, ruleName);\n\n    if (rule == null) {\n      /*\n       * we didn't find a rule with the given rule name so we will look\n       * for a category with that name\n       */\n\n      // get the rules that are in the category\n      var rules = this.getRulesByCategoryName(componentContent, ruleName);\n\n      var firstRule = true;\n\n      if (rules != null) {\n\n        /*\n         * loop through all the rules in the category. we will say the\n         * category is satisfied if all the rules in the category\n         * evaluate to true.\n         */\n        for (var r = 0; r < rules.length; r++) {\n          var tempRule = rules[r];\n\n          // evaluate the rule\n          var tempResult = this.evaluateRule(conceptMapData, tempRule);\n\n          if (firstRule) {\n            /*\n             * this is the first rule so we will set the value\n             * of the rule to the result\n             */\n            result = tempResult;\n            firstRule = false;\n          } else {\n            /*\n             * this is not the first rule so we will compute the\n             * \"logical and\" of the result so far and this rule's\n             * result\n             */\n            result = result && tempResult;\n          }\n\n          if (!result) {\n            /*\n             * the result is false so we can short circuit and\n             * stop looping since we have now just found that\n             * one of the rules is not satisfied which means\n             * the category is not satisfied.\n             */\n            break;\n          }\n        }\n      }\n    } else {\n      // evaluate the rule\n      result = this.evaluateRule(conceptMapData, rule);\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate a rule\n   * @param conceptMapData the concept map student data\n   * @param rule the rule object\n   * @returns whether the rule was satisfied\n   */\n  evaluateRule(conceptMapData, rule) {\n\n    var result = false;\n\n    if (rule != null) {\n\n      if (rule.type == 'node') {\n        // this is a node rule\n\n        // get the node we are looking for\n        var nodeLabel = rule.nodeLabel;\n\n        // get all the nodes with the given label\n        var nodes = this.getNodesByLabel(conceptMapData, nodeLabel);\n\n        // get the number of nodes with the given label\n        var nodeCount = nodes.length;\n\n        /*\n         * the comparison for the number which can be \"exactly\",\n         * \"more than\", or \"less than\"\n         */\n        var comparison = rule.comparison;\n\n        // the number to compare to\n        var number = rule.number;\n\n        if (comparison == 'exactly') {\n          /*\n           * we are looking for an exact number of nodes with the\n           * given label\n           */\n          if (nodeCount == number) {\n            result = true;\n          }\n        } else if (comparison == 'more than') {\n          /*\n           * we are looking for more than a certain number of nodes\n           * with the given label\n           */\n          if (nodeCount > number) {\n            result = true;\n          }\n        } else if (comparison == 'less than') {\n          /*\n           * we are looking for less than a certain number of nodes\n           * with the given label\n           */\n          if (nodeCount < number) {\n            result = true;\n          }\n        }\n\n        if (rule.not) {\n          /*\n           * the rule is satisfied if the result is false so we will\n           * negate the result\n           */\n          result = !result;\n        }\n\n      } else if (rule.type == 'link') {\n        // this is a link rule\n\n        // get the source node label\n        var nodeLabel = rule.nodeLabel;\n\n        // get the link label\n        var linkLabel = rule.linkLabel;\n\n        // get the destination node label\n        var otherNodeLabel = rule.otherNodeLabel;\n\n        // get all the links with the matching labels\n        var links = this.getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel);\n\n        // get the number of links with the matching labels\n        var linkCount = links.length;\n\n        /*\n         * the comparison for the number which can be \"exactly\",\n         * \"more than\", or \"less than\"\n         */\n        var comparison = rule.comparison;\n\n        // the number to compare to\n        var number = rule.number;\n\n        if (comparison == 'exactly') {\n          // we are looking for an exact number of links\n          if (linkCount == number) {\n            result = true;\n          }\n        } else if (comparison == 'more than') {\n          // we are looking for more than a certain number of links\n          if (linkCount > number) {\n            result = true;\n          }\n        } else if (comparison == 'less than') {\n          // we are looking for less than a certain number of links\n          if (linkCount < number) {\n            result = true;\n          }\n        }\n\n        if (rule.not) {\n          /*\n           * the rule is satisfied if the result is false so we will\n           * negate the result\n           */\n          result = !result;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get a rule by the rule name\n   * @param componentContent the concept map component content\n   * @param ruleName the rule name\n   * @returns the rule with the given rule name\n   */\n  getRuleByRuleName(componentContent, ruleName) {\n\n    var rule = null;\n\n    if (ruleName != null) {\n\n      // get the rules\n      var rules = componentContent.rules;\n\n      if (rules != null) {\n\n        // loop through all the rules\n        for (var r = 0; r < rules.length; r++) {\n\n          // get a rule\n          var tempRule = rules[r];\n\n          if (tempRule != null) {\n\n            if (ruleName == tempRule.name) {\n              // we have found the rule with the name we want\n              rule = tempRule;\n            }\n          }\n        }\n      }\n    }\n\n    return rule;\n  }\n\n  /**\n   * Get the rules in the category\n   * @param componentContent the component content\n   * @param category the category name\n   * @returns the rules in the category\n   */\n  getRulesByCategoryName(componentContent, category) {\n\n    var rules = [];\n\n    if (componentContent != null) {\n\n      // get all the rules\n      var tempRules = componentContent.rules;\n\n      if (tempRules != null) {\n\n        // loop through all the rules\n        for (var r = 0; r < tempRules.length; r++) {\n          var rule = tempRules[r];\n\n          if (rule != null) {\n\n            // get the categories the rule is in\n            var categories = rule.categories;\n\n            if (categories != null) {\n\n              // loop through categories the rule is in\n              for (var c = 0; c < categories.length; c++) {\n                var tempCategory = categories[c];\n\n                if (category == tempCategory) {\n                  /*\n                   * the rule is in the category we are\n                   * searching for\n                   */\n                  rules.push(rule);\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return rules;\n  }\n\n  /**\n   * Get nodes by label\n   * @param conceptMapData the concept map student data\n   * @param label the node label to look for\n   * @returns all the nodes with the given label\n   */\n  getNodesByLabel(conceptMapData, label) {\n\n    var nodesByLabel = [];\n\n    if (conceptMapData != null) {\n\n      var nodes = conceptMapData.nodes;\n\n      if (nodes != null) {\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n          var node = nodes[n];\n\n          if (node != null) {\n\n            if (label == node.label || label == 'any') {\n              /*\n               * we have found a node with the label we are\n               * looking for\n               */\n              nodesByLabel.push(node);\n            }\n          }\n        }\n      }\n    }\n\n    return nodesByLabel;\n  }\n\n  /**\n   * Get links with the given source node label, link label, and destination\n   * node label\n   * @param conceptMapData the concept map student data\n   * @param nodeLabel the source node label\n   * @param linkLabel the link label\n   * @param otherNodeLabel the destination node label\n   * @returns the links with the given source node label, link label, and\n   * destination node label\n   */\n  getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel) {\n\n    var resultLinks = [];\n\n    if (conceptMapData != null) {\n\n      var links = conceptMapData.links;\n\n      if (links != null) {\n\n        // loop through all the links\n        for (var l = 0; l < links.length; l++) {\n          var tempLink = links[l];\n\n          if (tempLink != null) {\n\n            // get the labels\n            var tempLinkLabel = tempLink.label;\n            var sourceNodeLabel = tempLink.sourceNodeLabel;\n            var destinationNodeLabel = tempLink.destinationNodeLabel;\n\n            if ((nodeLabel == sourceNodeLabel || nodeLabel == 'any') &&\n              (linkLabel == tempLinkLabel || linkLabel == 'any') &&\n              (otherNodeLabel == destinationNodeLabel || otherNodeLabel == 'any')) {\n\n              // the labels match the ones we are looking for\n              resultLinks.push(tempLink);\n            }\n          }\n        }\n      }\n    }\n\n    return resultLinks;\n  }\n\n  /**\n   * Check if any of the rules are satisfied\n   * @param componentContent the concept map component content\n   * @param conceptMapData the concept map student data\n   * @param args an array of rule names\n   * @returns true if any of the rules are satisifed\n   * false if none of the rules are satisified\n   */\n  any(componentContent, conceptMapData, args) {\n\n    // loop through all the rule names\n    for (var n = 0; n < args.length; n++) {\n\n      // get a rule name\n      var ruleName = args[n];\n\n      // check if the rule is satisifed\n      var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n\n      if (ruleResult) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if all the rules are satisfied\n   * @param componentContent the concept map component content\n   * @param conceptMapData the concept map student data\n   * @param args an array of rule names\n   * @returns true if all the rules are satisifed\n   * false if any of the rules are not satisfied\n   */\n  all(componentContent, conceptMapData, args) {\n    var result = true;\n\n    // loop through all the rule names\n    for (var n = 0; n < args.length; n++) {\n\n      // get a rule name\n      var ruleName = args[n];\n\n      // check if the rule is satisfied\n      var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n\n      result = result && ruleResult;\n    }\n    return result;\n  }\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Populate the concept map data into the component\n   * @param draw the SVG draw div\n   * @param conceptMapData the concept map data which contains an array\n   * of nodes and an array of links\n   */\n  populateConceptMapData(draw, conceptMapData) {\n\n    if (conceptMapData != null) {\n\n      // get the JSON nodes\n      var nodes = conceptMapData.nodes;\n\n      // this is used to hold the SVG node objects\n      var conceptMapNodes = [];\n\n      if (nodes != null) {\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n          var node = nodes[n];\n\n          var instanceId = node.instanceId;\n          var originalId = node.originalId;\n          var filePath = node.fileName;\n          var label = node.label;\n          var x = node.x;\n          var y = node.y;\n          var width = node.width;\n          var height = node.height\n\n          // create a ConceptMapNode\n          var conceptMapNode = this.newConceptMapNode(draw, instanceId, originalId, filePath, label, x, y, width, height);\n\n          conceptMapNodes.push(conceptMapNode);\n        }\n      }\n\n      // get the JSON links\n      var links = conceptMapData.links;\n\n      // this is used to hold the SVG link objects\n      var conceptMapLinks = [];\n\n      if (links != null) {\n\n        // loop through all the links\n        for (var l = 0; l < links.length; l++) {\n          var link = links[l];\n\n          var instanceId = link.instanceId;\n          var originalId = link.originalId;\n          var sourceNodeId = link.sourceNodeInstanceId;\n          var destinationNodeId = link.destinationNodeInstanceId;\n          var label = link.label;\n          var color = link.color;\n          var curvature = link.curvature;\n          var startCurveUp = link.startCurveUp;\n          var endCurveUp = link.endCurveUp;\n          var sourceNode = null;\n          var destinationNode = null;\n\n          if (sourceNodeId != null) {\n            sourceNode = this.getNodeById(conceptMapNodes, sourceNodeId);\n          }\n\n          if (destinationNodeId != null) {\n            destinationNode = this.getNodeById(conceptMapNodes, destinationNodeId);\n          }\n\n          // create a ConceptMapLink\n          var conceptMapLink = this.newConceptMapLink(draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n          conceptMapLinks.push(conceptMapLink);\n        }\n      }\n\n      /*\n       * move the link text group to the front so that they are on top\n       * of links\n       */\n      this.moveLinkTextToFront(conceptMapLinks);\n\n      // move the nodes to the front so that they are on top of links\n      this.moveNodesToFront(conceptMapNodes);\n\n      /*\n       * set a timeout to refresh the link labels so that the rectangles\n       * around the labels are properly resized\n       */\n      // this.$timeout(() => {\n      //   this.refreshLinkLabels(conceptMapNodes, conceptMapLinks);\n      // });\n      this.refreshLinkLabels(conceptMapNodes, conceptMapLinks);\n    }\n  }\n\n  /**\n   * Move the link text group to the front\n   */\n  moveLinkTextToFront(links) {\n\n    // loop through all the links\n    for (var l = 0; l < links.length; l++) {\n      var link = links[l];\n\n      if (link != null) {\n        // move the link text group to the front\n        link.moveTextGroupToFront();\n      }\n    }\n  }\n\n  /**\n   * Move the nodes to the front so that they show up above links\n   */\n  moveNodesToFront(nodes) {\n\n    // loop through all the nodes\n    for (var n = 0; n < nodes.length; n++) {\n      var node = nodes[n];\n\n      if (node != null) {\n\n        // get a node group\n        var group = node.getGroup();\n\n        if (group != null) {\n          // move the node group to the front\n          group.front();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refresh the link labels so that the rectangles around the text\n   * labels are resized to fit the text properly. This is required because\n   * the rectangles are not properly sized when the ConceptMapLinks are\n   * initialized. The rectangles need to be rendered first and then the\n   * labels need to be set in order for the rectangles to be resized properly.\n   * This is why this function is called in a $timeout.\n   */\n  refreshLinkLabels(nodes, links) {\n\n    if (nodes != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < nodes.length; n++) {\n        var node = nodes[n];\n\n        if (node != null) {\n          // get the label from the node\n          var label = node.getLabel();\n\n          /*\n           * set the label back into the node so that the rectangle\n           * around the text label is resized to the text\n           */\n          node.setLabel(label);\n        }\n      }\n    }\n\n    if (links != null) {\n\n      // loop throgh all the links\n      for (var l = 0; l < links.length; l++) {\n        var link = links[l];\n\n        if (link != null) {\n          // get the label from the link\n          var label = link.getLabel();\n\n          /*\n           * set the label back into the link so that the rectangle\n           * around the text label is resized to the text\n           */\n          link.setLabel(label);\n        }\n      }\n    }\n  }\n\n  /**\n   * Get a node by id.\n   * @param id the node id\n   * @returns the node with the given id or null\n   */\n  getNodeById(nodes, id) {\n    var node = null;\n\n    if (id != null) {\n\n      // loop through all the nodes\n      for (var n = 0; n < nodes.length; n++) {\n        var tempNode = nodes[n];\n        var tempNodeId = tempNode.getId();\n\n        if (id == tempNodeId) {\n          // we have found the node we want\n          node = tempNode;\n          break;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Create an image from the concept map data\n   * @param conceptMapData concept map data from a student\n   * @param width the width of the image we want to create\n   * @param height the height of the image we want to create\n   */\n  createImage(conceptMapData, width, height) {\n\n    // create a promise that will return an image of the concept map\n    var deferred = this.$q.defer();\n\n    // create a div to draw the SVG in\n    var svgElement = document.createElement('div');\n\n    if (width == null || width == '') {\n      // we will default to a width of 800 pixels\n      width = 800;\n    }\n\n    if (height == null || height == '') {\n      // we will default to a height of 600 pixels\n      height = 600;\n    }\n\n    var draw = SVG(svgElement);\n    draw.width(width);\n    draw.height(height);\n\n    if (svgElement != null) {\n\n      // populate the concept map data into the svg draw element\n      this.populateConceptMapData(draw, conceptMapData);\n\n      // get the svg element as a string\n      var svgString = svgElement.innerHTML;\n\n      // find all the images in the svg and replace them with Base64 images\n      this.getHrefToBase64ImageReplacements(svgString, true).then((images) => {\n\n        /*\n         * Loop through all the image objects. Each object contains\n         * an image href and a Base64 image.\n         */\n        for (var i = 0; i < images.length; i++) {\n\n          // get an image object\n          var imagePair = images[i];\n\n          // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n          var imageHref = imagePair.imageHref;\n\n          // get the last index of '/'\n          var lastIndexOfSlash = imageHref.lastIndexOf('/');\n\n          if (lastIndexOfSlash != -1) {\n            // only get everything after the last '/'\n            imageHref = imageHref.substring(lastIndexOfSlash + 1);\n          }\n\n          // get the Base64 image\n          var base64Image = imagePair.base64Image;\n\n          // create a regex to match the image href\n          var imageRegEx = new RegExp(imageHref, 'g');\n\n          /*\n           * replace all the instances of the image href with the\n           * Base64 image\n           */\n          svgString = svgString.replace(imageRegEx, base64Image);\n        }\n\n        // create a canvas to draw the image on\n        var myCanvas = document.createElement('canvas');\n        var ctx = myCanvas.getContext('2d');\n\n        // create an svg blob\n        var svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n        var domURL = self.URL || self.webkitURL || self;\n        var url = domURL.createObjectURL(svg);\n        var image = new Image;\n\n        /*\n         * set the UtilService in a local variable so we can access it\n         * in the onload callback function\n         */\n        var thisUtilService = this.UtilService;\n\n        // the function that is called after the image is fully loaded\n        image.onload = (event) => {\n\n          // get the image that was loaded\n          var image = event.target;\n\n          // set the dimensions of the canvas\n          myCanvas.width = image.width;\n          myCanvas.height = image.height;\n          ctx.drawImage(image, 0, 0);\n\n          // get the canvas as a Base64 string\n          var base64Image = myCanvas.toDataURL('image/png');\n\n          // get the image object\n          var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image);\n\n          // create a student asset image\n          this.StudentAssetService.uploadAsset(imageObject).then((unreferencedAsset) => {\n\n            /*\n             * make a copy of the unreferenced asset so that we\n             * get a referenced asset\n             */\n            this.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n              if (referencedAsset != null) {\n                /*\n                 * get the asset url\n                 * for example\n                 * /wise/studentuploads/11261/297478/referenced/picture_1494016652542.png\n                 */\n                var referencedAssetUrl = referencedAsset.url;\n\n                // remove the unreferenced asset\n                this.StudentAssetService.deleteAsset(unreferencedAsset);\n\n                // resolve the promise with the image url\n                deferred.resolve(referencedAssetUrl);\n              }\n            });\n          });\n        };\n\n        // set the src of the image so that the image gets loaded\n        image.src = url;\n      });\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Get Base64 images from image hrefs\n   * @param svgString the svg string\n   * @param prependAssetsPath whether to prepend the assets directory path\n   * to the image references\n   * @return a promise that will return an array of objects. The objects will\n   * contain an image href and a Base64 image.\n   */\n  getHrefToBase64ImageReplacements(svgString, prependAssetsPath) {\n\n    // an array to hold all the promises\n    var promises = [];\n\n    // get all the image hrefs\n    var imageHrefs = this.getImagesInSVG(svgString);\n\n    // loop through all the images\n    for (var i = 0; i < imageHrefs.length; i++) {\n\n      // get an image href\n      var imageHref = imageHrefs[i];\n\n      if (prependAssetsPath) {\n        /*\n         * the image href is relative so we need to make it absolute\n         * so that the browser can retrieve it\n         */\n\n        // prepend the project asset directory path\n        imageHref = this.ConfigService.getProjectAssetsDirectoryPath(true) + '/' + imageHref;\n      }\n\n      // get the Base64 of the image\n      var promise = this.getBase64Image(imageHref);\n\n      promises.push(promise);\n    }\n\n    return this.$q.all(promises);\n  }\n\n  /**\n   * Get all the image hrefs in the svg string\n   * @param svgString the svg string\n   * @return an array of image hrefs\n   */\n  getImagesInSVG(svgString) {\n\n    // used to hold all the images we find\n    var images = [];\n\n    if (svgString != null) {\n\n      /*\n       * the regex to match href values in image elements\n       * e.g.\n       * if the svg contained in image element like this\n       * <image id=\"SvgjsImage1007\" xlink:href=\"/wise/curriculum/25/assets/Sun.png\" width=\"100\" height=\"100\"/>\n       * it would match it and the matching group would contain\n       * /wise/curriculum/25/assets/Sun.png\n       */\n      var regex = /<image.*?xlink:href=\"(.*?)\".*?\\/?>/g;\n\n      // find the first match in the svg string\n      var result = regex.exec(svgString);\n\n      while(result != null) {\n\n        /*\n         * get the href image from the match\n         * e.g.\n         * /wise/curriculum/25/assets/Sun.png\n         */\n        var imageHref = result[1];\n\n        // add the href to our array of hrefs\n        images.push(imageHref);\n\n        // try to find the next match\n        result = regex.exec(svgString);\n      }\n    }\n\n    return images;\n  }\n\n  /**\n   * Get the Base64 image from an image href. An image href will look like\n   * /wise/curriculum/25/assets/Sun.png\n   * @param imageHref the image href\n   * @return a promise that will return an object containing the image href\n   * and the Base64 image\n   */\n  getBase64Image(imageHref) {\n\n    var deferred = this.$q.defer();\n\n    // create the image object that we will load the image into\n    var image = new Image;\n\n    // create a new canvas to render the image in\n    var myCanvas = document.createElement('canvas');\n    var ctx = myCanvas.getContext('2d');\n\n    // the function that is called after the image is fully loaded\n    image.onload = function(event) {\n\n      // get the image that was loaded\n      var image = event.target;\n\n      // set the canvas dimensions to match the image\n      myCanvas.width = image.width;\n      myCanvas.height = image.height;\n\n      // draw the image in the canvas\n      ctx.drawImage(image, 0, 0);\n\n      // get the Base64 string of the canvas\n      var base64Image = myCanvas.toDataURL('image/png');\n\n      // create an object that will contain the image href and Base64 image\n      var result = {};\n      result.imageHref = imageHref;\n      result.base64Image = base64Image;\n\n      // resolve the promise with the object\n      deferred.resolve(result);\n    }\n\n    // load the image\n    image.src = imageHref;\n\n    // return the promise\n    return deferred.promise;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        let nodes = [];\n        let links = [];\n        let conceptMapData = studentData.conceptMapData;\n\n        if (conceptMapData != null) {\n          if (conceptMapData.nodes != null) {\n            nodes = conceptMapData.nodes;\n          }\n\n          if (conceptMapData.links != null) {\n            links = conceptMapData.links;\n          }\n        }\n\n        if (componentContent == null) {\n          // the component content was not provided\n\n          if (nodes.length > 0) {\n            // the student has created a node\n            return true;\n          }\n\n          if (links.length > 0) {\n            // the student has created a link\n            return true;\n          }\n        } else {\n          // the component content was provided\n\n          let starterConceptMap = componentContent.starterConceptMap;\n\n          if (starterConceptMap == null || starterConceptMap === '') {\n            // there is no starter concept map\n\n            if (nodes.length > 0) {\n              // the student has created a node\n              return true;\n            }\n\n            if (links.length > 0) {\n              // the student has created a link\n              return true;\n            }\n          } else {\n            /*\n             * there is a starter concept map so we will compare it\n             * with the student concept map\n             */\n            if (this.isStudentConceptMapDifferentThanStarterConceptMap(conceptMapData, starterConceptMap)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the student concept map is different than the starter conept map\n   * @param studentConceptMap the student concept map\n   * @param starterConceptMap the authored starter concept map\n   * @return whether the student concept map is different than the starter\n   * concept map\n   */\n  isStudentConceptMapDifferentThanStarterConceptMap(studentConceptMap, starterConceptMap) {\n\n    if (studentConceptMap != null && starterConceptMap != null) {\n\n      let studentNodes = studentConceptMap.nodes;\n      let studentLinks = studentConceptMap.links;\n\n      let starterNodes = starterConceptMap.nodes;\n      let starterLinks = starterConceptMap.links;\n\n      if (studentNodes.length == starterNodes.length) {\n        /*\n         * the student has the same number of nodes as the starter so\n         * we will need to check if the nodes area actually different\n         */\n\n        // loop through all the nodes\n        for (let n = 0; n < studentNodes.length; n++) {\n          let studentNode = studentNodes[n];\n          let starterNode = starterNodes[n];\n\n          if (studentNode != null && starterNode != null) {\n\n            // check if any of the fields have different values\n            if (studentNode.originalId != starterNode.originalId ||\n              studentNode.instanceId != starterNode.instanceId ||\n              studentNode.x != starterNode.x ||\n              studentNode.y != starterNode.y) {\n\n              // the student node is different than the starter node\n              return true;\n            }\n          }\n        }\n      } else {\n        // the student has a different number of nodes\n        return true;\n      }\n\n      if (studentLinks.length == starterLinks.length) {\n        /*\n         * the student has the same number of links as the starter so\n         * we will need to check if the links area actually different\n         */\n\n        // loop through all the links\n        for (let l = 0; l < studentLinks.length; l++) {\n          let studentLink = studentLinks[l];\n          let starterLink = starterLinks[l];\n\n          if (studentLink != null && starterLink != null) {\n\n            // check if any of the fields have different values\n            if (studentLink.label != starterLink.label ||\n              studentLink.originalId != starterLink.originalId ||\n              studentLink.instanceId != starterLink.instanceId ||\n              studentLink.sourceNodeOriginalId != starterLink.sourceNodeOriginalId ||\n              studentLink.sourceNodeInstanceId != starterLink.sourceNodeInstanceId ||\n              studentLink.destinationNodeOriginalId != starterLink.destinationNodeOriginalId ||\n              studentLink.destinationNodeInstanceId != starterLink.destinationNodeInstanceId) {\n\n              // the student link is different than the starter link\n              return true;\n            }\n          }\n        }\n      } else {\n        // the student has a different number of links\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    let deferred = this.$q.defer();\n\n    // get the svg element. this will obtain an array.\n    let svgElement = angular.element('#svg_' + componentState.nodeId + '_' + componentState.componentId);\n\n    if (svgElement != null && svgElement.length > 0) {\n      // get the svg element\n      svgElement = svgElement[0];\n\n      // get the svg element as a string\n      let serializer = new XMLSerializer();\n      let svgString = serializer.serializeToString(svgElement);\n\n      // find all the images in the svg and replace them with Base64 images\n      this.getHrefToBase64ImageReplacements(svgString).then((images) => {\n\n        /*\n         * Loop through all the image objects. Each object contains\n         * an image href and a Base64 image.\n         */\n        for (let i = 0; i < images.length; i++) {\n\n          // get an image object\n          let imagePair = images[i];\n\n          // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n          let imageHref = imagePair.imageHref;\n\n          // get the Base64 image\n          let base64Image = imagePair.base64Image;\n\n          // create a regex to match the image href\n          let imageRegEx = new RegExp(imageHref, 'g');\n\n          /*\n           * replace all the instances of the image href with the\n           * Base64 image\n           */\n          svgString = svgString.replace(imageRegEx, base64Image);\n        }\n\n        // create a canvas to draw the image on\n        let myCanvas = document.createElement('canvas');\n        let ctx = myCanvas.getContext('2d');\n\n        // create an svg blob\n        let svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n        let domURL = self.URL || self.webkitURL || self;\n        let url = domURL.createObjectURL(svg);\n        let image = new Image();\n\n        // the function that is called after the image is fully loaded\n        image.onload = (event) => {\n\n          // get the image that was loaded\n          let image = event.target;\n\n          // set the dimensions of the canvas\n          myCanvas.width = image.width;\n          myCanvas.height = image.height;\n          ctx.drawImage(image, 0, 0);\n\n          // get the canvas as a Base64 string\n          let base64Image = myCanvas.toDataURL('image/png');\n\n          // get the image object\n          let imageObject = this.UtilService.getImageObjectFromBase64String(base64Image, false);\n\n          // add the image to the student assets\n          this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n            deferred.resolve(asset);\n          });\n        };\n\n        // set the src of the image so that the image gets loaded\n        image.src = url;\n      });\n    }\n    return deferred.promise;\n  }\n\n  // end of ConceptMapService class\n}\n\n\n/**\n * A ConceptMapNode that represents a node in the ConceptMap component\n */\nclass ConceptMapNode {\n\n  /**\n   * The constructor for creating ConceptMapNodes\n   * @param ConceptMapService the ConceptMapService\n   * @param draw the svg.js draw object\n   * @param filePath the path of the image file that represents the node\n   * @param label the label of the node\n   * @param x the x position of the node\n   * @param y the y position of the node\n   * @param width the the width of the node\n   * @param height the height of the node\n   */\n  constructor(ConceptMapService, draw, id, originalId, filePath, label, x, y, width, height) {\n\n    // remember the ConceptMapService\n    this.ConceptMapService = ConceptMapService;\n\n    // remember the svg.js draw object so we can draw onto it\n    this.draw = draw;\n\n    // set the id\n    this.id = id;\n\n    // set the original id\n    this.originalId = originalId;\n\n    // remember the file path e.g. \"/wise/curriculum/108/assets/Space.png\"\n    this.filePath = filePath;\n\n    if (this.filePath != null) {\n      // get the file name e.g. \"Space.png\"\n      this.fileName = this.filePath.substring(this.filePath.lastIndexOf('/') + 1);\n    }\n\n    // remember the label\n    this.label = label;\n\n    // create the svg image object\n    this.image = this.draw.image(this.filePath, width, height);\n\n    // remember the width\n    this.width = width;\n\n    // remember the height\n    this.height = height;\n\n    // create a group to contain all the elements of this node\n    this.group = this.draw.group();\n\n    // flag that specifies whether this node is highlighted by the student\n    this.highlighted = false;\n\n    // the color of the delete button\n    this.deleteButtonColor = 'gray';\n\n    // create the connector that students will use to create links\n    this.connector = this.createConnector();\n\n    // create the delete button\n    this.deleteButtonGroup = this.createDeleteButtonGroup();\n\n    // create the text group\n    this.textGroup = this.createTextGroup();\n\n    /*\n     * create the border that displays when the node is highighted or\n     * moused over\n     */\n    this.border = this.createBorder();\n\n    // remember the x and y coordinates\n    this.x = x;\n    this.y = y;\n\n    // initialize the outgoing and incoming links arrays\n    this.outgoingLinks = [];\n    this.incomingLinks = [];\n\n    // add all the elements to the group\n    this.group.add(this.border);\n    this.group.add(this.image);\n    this.group.add(this.connector);\n    this.group.add(this.deleteButtonGroup);\n    this.group.add(this.textGroup);\n\n    // hide the border and delete button\n    this.border.hide();\n    this.deleteButtonGroup.hide();\n\n    // set the position of the group\n    this.group.x(x);\n    this.group.y(y);\n  }\n\n  /**\n   * Get the JSON object representation of the ConceptMapNode\n   * @returns a JSON object containing the data of the ConceptMapNode\n   */\n  toJSONObject() {\n    var jsonObject = {};\n\n    jsonObject.originalId = this.originalId;\n    jsonObject.instanceId = this.id;\n    jsonObject.fileName = this.fileName;\n    jsonObject.filePath = this.filePath;\n    jsonObject.label = this.label;\n    jsonObject.x = this.x;\n    jsonObject.y = this.y;\n    jsonObject.width = this.width;\n    jsonObject.height = this.height;\n\n    jsonObject.outgoingLinks = [];\n    jsonObject.incomingLinks = [];\n\n    // loop through all the outgoing links\n    for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n      var outgoingLink = this.outgoingLinks[ol];\n\n      var instanceId = outgoingLink.getId();\n      var originalId = outgoingLink.getOriginalId();\n      var label = outgoingLink.getLabel();\n\n      /*\n       * create an object containing the instance id, original id\n       * and label of the link\n       */\n      var tempLinkObject = {};\n      tempLinkObject.originalId = originalId;\n      tempLinkObject.instanceId = instanceId;\n      tempLinkObject.label = label;\n\n      jsonObject.outgoingLinks.push(tempLinkObject);\n    }\n\n    // loop through all the incoming links\n    for (var il = 0; il < this.incomingLinks.length; il++) {\n      var incomingLink = this.incomingLinks[il];\n\n      var instanceId = incomingLink.getId();\n      var originalId = incomingLink.getOriginalId();\n      var label = incomingLink.getLabel();\n\n      /*\n       * create an object containing the instance id, original id\n       * and label of the link\n       */\n      var tempLinkObject = {};\n      tempLinkObject.originalId = originalId;\n      tempLinkObject.instanceId = instanceId;\n      tempLinkObject.label = label;\n\n      jsonObject.incomingLinks.push(tempLinkObject);\n    }\n\n    return jsonObject;\n  }\n\n  /**\n   * Create the border that displays when the node is highlighted or\n   * moused over.\n   * @returns the svg rectangle that represents the border\n   */\n  createBorder() {\n\n    // create the rectangle\n    this.border = this.draw.rect(this.width, this.height);\n    this.border.fill('none');\n    this.border.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n    return this.border;\n  }\n\n  /**\n   * Create the connector that students will use to create links from this\n   * node.\n   * @returns the svg circle that represents the connector\n   */\n  createConnector() {\n\n    // create the circle\n    var connectorRadius = 10;\n    this.connector = this.draw.circle();\n    this.connector.radius(connectorRadius);\n    this.connector.cx(this.width / 2);\n    this.connector.cy(0);\n    this.connector.fill({ color: '#cccccc', opacity: 0.4 });\n    this.connector.stroke({ color: '#333333', opacity: 0.2 });\n\n    return this.connector;\n  }\n\n  /**\n   * Create the delete button. The delete button is a group that contains\n   * a circle and an x.\n   * @returns a group that contains a circle and an x\n   */\n  createDeleteButtonGroup() {\n\n    // create a group to contain the circle and x for the delete button\n    this.deleteButtonGroup = this.draw.group();\n\n    // create the delete button circle\n    var deleteButtonRadius = 10;\n    this.deleteButtonCircle = this.draw.circle();\n    this.deleteButtonCircle.radius(deleteButtonRadius);\n    this.deleteButtonCircle.cx(this.width);\n    this.deleteButtonCircle.cy(0);\n    this.deleteButtonCircle.fill({ opacity: 0.0 });\n    this.deleteButtonCircle.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n    // create the x by first creating a + and then rotating it 45 degrees\n\n    // get the top location of the +\n    var topX = 0;\n    var topY = 0 - (deleteButtonRadius * 0.7);\n\n    // get the bottom location of the +\n    var bottomX = 0;\n    var bottomY = 0 + (deleteButtonRadius * 0.7);\n\n    // get the left position of the +\n    var leftX = 0 - (deleteButtonRadius * 0.7);\n    var leftY = 0;\n\n    // get the right position of the +\n    var rightX = 0 + (deleteButtonRadius * 0.7);\n    var rightY = 0;\n\n    // draw the +\n    var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n    this.deleteButtonX = this.draw.path(deleteButtonXPath);\n    this.deleteButtonX.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n    // rotate the + to turn it into an x\n    this.deleteButtonX.transform({ rotation: 45 });\n\n    // move the x to the upper right of the group\n    this.deleteButtonX.translate(this.width, 0);\n\n    /*\n     * disable pointer events on the x so that clicks will pass through\n     * and hit the circle. this way we only need to set a listener on the\n     * circle for click events.\n     */\n    this.deleteButtonX.attr('pointer-events', 'none');\n\n    // add the circle and the x\n    this.deleteButtonGroup.add(this.deleteButtonCircle);\n    this.deleteButtonGroup.add(this.deleteButtonX);\n\n    return this.deleteButtonGroup;\n  }\n\n  /**\n   * Create the text group\n   * @returns the text group\n   */\n  createTextGroup() {\n\n    // create the group\n    this.textGroup = this.draw.group();\n\n    // create a rectangle to surround the text\n    this.textRect = this.draw.rect(100, 15);\n    this.textRect.attr('fill', 'white');\n    this.textRect.attr('stroke', 'black');\n    this.textRect.attr('x', 0);\n    this.textRect.attr('y', 10);\n    this.textRect.attr('width', 100);\n    this.textRect.attr('height', 20);\n    this.textRect.radius(5);\n\n    // create the text element\n    this.text = this.draw.text(this.label);\n    this.text.attr('x', 5);\n    //this.text.attr('x', 0);\n    this.text.attr('y', 9);\n    this.text.font({\n      family: 'Arial',\n      size: 12\n    });\n\n    // prevent the text from being highlighted when the user drags the mouse\n    this.text.style('user-select:none');\n    this.text.node.setAttribute('user-select', 'none');\n    this.text.node.setAttribute('style', 'user-select:none');\n\n    // add the rectangle and text to the group\n    this.textGroup.add(this.textRect);\n    this.textGroup.add(this.text);\n\n    // add the text group to the link group\n    this.group.add(this.textGroup);\n\n    var width = 0;\n\n    try {\n      // get the width of the bounding box of the text node\n      var textBBox = this.text.node.getBBox();\n\n      if (textBBox.width == 0) {\n        width = this.calculateTextRectWidth(this.label);\n      } else {\n        width = textBBox.width + 10;\n      }\n    } catch(e) {\n      /*\n       * we were unable to get the bounding box (likely because\n       * Firefox threw an error when trying to call getBBox())\n       * so we will calculate the width based on the label text\n       */\n      width = this.calculateTextRectWidth(this.label);\n    }\n\n    this.textRect.attr('width', width);\n\n    // set the position of the text group\n    var x = this.getImageWidth() / 2;\n    var y = this.getImageHeight();\n    this.textGroup.cx(x);\n    this.textGroup.cy(y);\n\n    return this.textGroup;\n  }\n\n  /**\n   * Get the id of the node\n   * @returns the id of the node\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the original id of the node\n   * @returns the original id of the node\n   */\n  getOriginalId() {\n    return this.originalId;\n  }\n\n  /**\n   * Get the group id of the node\n   * @returns the group id of the node\n   */\n  getGroupId() {\n    var groupId = null;\n\n    if (this.group != null) {\n      // get the id of the group which we will use as the id of the node\n      groupId = this.group.id();\n    }\n\n    return groupId;\n  }\n\n  /**\n   * Get the label\n   * @returns the label of the node\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Set the label of the node\n   * @param label the label of the node\n   */\n  setLabel(label) {\n\n    // remember the label\n    this.label = label;\n\n    // set the label into the text element\n    this.text.text(label);\n\n    var width = 0;\n\n    try {\n      // get the width of the bounding box of the text node\n      var textBBox = this.text.node.getBBox();\n\n      if (textBBox.width == 0) {\n        width = this.calculateTextRectWidth(this.label);\n      } else {\n        width = textBBox.width + 10;\n      }\n    } catch(e) {\n      /*\n       * we were unable to get the bounding box (likely because\n       * Firefox threw an error when trying to call getBBox())\n       * so we will calculate the width based on the label text\n       */\n      width = this.calculateTextRectWidth(this.label);\n    }\n\n    this.textRect.attr('width', width);\n\n    // set the position of the text group\n    var x = this.getImageWidth() / 2;\n    var y = this.getImageHeight();\n    this.textGroup.cx(x);\n    this.textGroup.cy(y);\n  }\n\n  /**\n   * Get the center x coordinate of the group\n   */\n  cx() {\n    var val = 0;\n\n    if (this.group != null && this.image != null) {\n\n      // get the group\n      var groupX = this.group.x();\n\n      /*\n       * get the center x coordinate of the image relative to the group.\n       * this will be equal to half the width of the image.\n       */\n      var imageCX = this.image.cx();\n\n      /*\n       * get the x coordinate of the center of the group relative to the\n       * svg parent\n       */\n      val = groupX + imageCX;\n    }\n\n    return val;\n  }\n\n  /**\n   * Get the center y coordinate of the group\n   */\n  cy() {\n    var val = 0;\n\n    if (this.group != null && this.image != null) {\n\n      // get the group\n      var groupY = this.group.y();\n\n      /*\n       * get the center y coordinate of the image relative to the group.\n       * this will be equal to half the height of the image.\n       */\n      var imageCY = this.image.cy();\n\n      /*\n       * get the y coordinate of the center of the group relative to the\n       * svg parent\n       */\n      val = groupY + imageCY;\n    }\n\n    return val;\n  }\n\n  /**\n   * Get the center x coordinate of the group\n   */\n  connectorCX() {\n    var val = 0;\n\n    if (this.group != null && this.image != null) {\n\n      // get the group\n      var groupX = this.group.x();\n\n      /*\n       * get the center x coordinate of the image relative to the group.\n       * this will be equal to half the width of the image.\n       */\n      var imageCX = this.connector.cx();\n\n      /*\n       * get the x coordinate of the center of the group relative to the\n       * svg parent\n       */\n      val = groupX + imageCX;\n    }\n\n    return val;\n  }\n\n  /**\n   * Get the center y coordinate of the group\n   */\n  connectorCY() {\n    var val = 0;\n\n    if (this.group != null && this.image != null) {\n\n      // get the group\n      var groupY = this.group.y();\n\n      /*\n       * get the center y coordinate of the image relative to the group.\n       * this will be equal to half the height of the image.\n       */\n      var imageCY = this.connector.cy();\n\n      /*\n       * get the y coordinate of the center of the group relative to the\n       * svg parent\n       */\n      val = groupY + imageCY;\n    }\n\n    return val;\n  }\n\n  /**\n   * Getter/setter for whether the node is highlighted\n   * @parm value (optional) boolean value that sets the highlighted value\n   * @returns whether the node is highlighted\n   */\n  isHighlighted(value) {\n\n    if (value != null) {\n      this.highlighted = value;\n    }\n\n    return this.highlighted;\n  }\n\n  /**\n   * Get the group\n   * @returns the group\n   */\n  getGroup() {\n    return this.group;\n  }\n\n  /**\n   * Show the delete button group\n   */\n  showDeleteButton() {\n    this.deleteButtonGroup.show();\n  }\n\n  /**\n   * Hide the delete button group\n   */\n  hideDeleteButton() {\n    this.deleteButtonGroup.hide();\n  }\n\n  /**\n   * Show the border of the node\n   */\n  showBorder() {\n    this.border.show();\n  }\n\n  /**\n   * Hide the border of the node\n   */\n  hideBorder() {\n    this.border.hide();\n  }\n\n  /**\n   * Get the connector of the node\n   */\n  getConnector() {\n    return this.connector;\n  }\n\n  /**\n   * Get the id of the connector\n   */\n  getConnectorId() {\n    var id = null;\n\n    if (this.connector != null) {\n      id = this.connector.id();\n    }\n\n    return id;\n  }\n\n  /**\n   * Get the x position of the group within the svg\n   * @returns the x position of the group\n   */\n  getGroupX() {\n\n    var x = 0;\n\n    if (this.group != null) {\n      /*\n       * the image is located at 0, 0 within the group so we will obtain\n       * the x location of the group\n       */\n      x = this.group.x();\n    }\n\n    return x;\n  }\n\n  /**\n   * Get the y position of the group within the svg\n   * @returns the y position of the group\n   */\n  getGroupY() {\n    var y = 0;\n\n    if (this.group != null) {\n      /*\n       * the image is located at 0, 0 within the group so we will obtain\n       * the y location of the group\n       */\n      y = this.group.y();\n    }\n\n    return y;\n  }\n\n  /**\n   * Get the x position of the image within the svg\n   * @returns the x position of the image\n   */\n  getImageX() {\n\n    // get the x position of the group\n    var groupX = this.getGroupX();\n\n    // get the x position of the image relative to the group\n    var imageRelativeX = this.image.x();\n\n    // add the values together to get the absolute x position of the image\n    var imageX = groupX + imageRelativeX;\n\n    // get the group\n    var group = this.getGroup();\n\n    // check if the group is shifted\n    if (group != null) {\n      // get the bounding box of the group\n      var bbox = group.bbox();\n\n      if (bbox != null) {\n        // get the x position of the bounding box on the group\n        var bboxX = bbox.x;\n\n        // compensate for the shift of the group\n        imageX = imageX - bboxX;\n      }\n    }\n\n    return imageX;\n  }\n\n  /**\n   * Get the y position of the image within the svg\n   * @returns the y position of the image\n   */\n  getImageY() {\n\n    // get the y position of the group\n    var groupY = this.getGroupY();\n\n    // get the y position of the image relative to the group\n    var imageRelativeY = this.image.y();\n\n    // add the values together to get the absolute y position of the image\n    var imageY = groupY + imageRelativeY;\n\n    // get the group\n    var group = this.getGroup();\n\n    // check if the group is shifted\n    if (group != null) {\n      // get the bounding box of the group\n      var bbox = group.bbox();\n\n      // get the y position of the bounding box on the group\n      var bboxY = bbox.y;\n\n      // compensate for the shift of the group\n      imageY = imageY - bboxY;\n    }\n\n    return imageY;\n  }\n\n  /**\n   * Get the width of the image\n   * @returns the width of th eimage\n   */\n  getImageWidth() {\n    var width = 0;\n\n    if (this.image != null) {\n      width = this.image.width();\n    }\n\n    return width\n  }\n\n  /**\n   * Get the height of the image\n   * @returns the height of the image\n   */\n  getImageHeight() {\n    var height = 0;\n\n    if (this.image != null) {\n      height = this.image.height();\n    }\n\n    return height;\n  }\n\n  /**\n   * Set the mouseover listener for the group\n   * @param nodeMouseOverFunction the function to call when the mouse is over\n   * the group\n   */\n  setNodeMouseOver(nodeMouseOverFunction) {\n\n    if (this.group != null) {\n      this.group.mouseover(nodeMouseOverFunction);\n    }\n  }\n\n  /**\n   * Set the mouseout listener for the group\n   * @param nodeMouseOutFunction the function to call when the mouse moves\n   * out of the group\n   */\n  setNodeMouseOut(nodeMouseOutFunction) {\n\n    if (this.group != null) {\n      this.group.mouseout(nodeMouseOutFunction);\n    }\n  }\n\n  /**\n   * Set the mousedown listener for the group\n   * @param nodeMouseDownFunction the function to call when the mouse is\n   * down on the group\n   */\n  setNodeMouseDown(nodeMouseDownFunction) {\n\n    if (this.group != null) {\n      this.group.mousedown(nodeMouseDownFunction);\n    }\n  }\n\n  /**\n   * Set the mouseup listener for the group\n   * @param nodeMouseUpFunction the function to call when the mouse is\n   * released over the group\n   */\n  setNodeMouseUp(nodeMouseUpFunction) {\n\n    if (this.group != null) {\n      this.group.mouseup(nodeMouseUpFunction);\n    }\n  }\n\n  /**\n   * Set the click listener for the image\n   * @param nodeMouseClickFunction the function to call when the image is\n   * clicked\n   */\n  setNodeMouseClick(nodeMouseClickFunction) {\n\n    if (this.group != null) {\n      this.image.click(nodeMouseClickFunction);\n    }\n  }\n\n  /**\n   * Set the mousedown listener for the connector\n   * @param connectorMouseDownFunction the function to call when the mouse\n   * is down on the connector\n   */\n  setConnectorMouseDown(connectorMouseDownFunction) {\n\n    if (this.connector != null) {\n      this.connector.mousedown(connectorMouseDownFunction);\n    }\n  }\n\n  /**\n   * Set the mousedown listener for the delete button\n   * @param deleteButtonMouseDownFunction the function to call when the mouse\n   * is down on the delete button\n   */\n  setDeleteButtonMouseDown(deleteButtonMouseDownFunction) {\n\n    if (this.deleteButtonCircle != null) {\n      this.deleteButtonCircle.mousedown(deleteButtonMouseDownFunction);\n    }\n  }\n\n  /**\n   * Set the mouseover listener for the delete button\n   * @param deleteButtonMouseOverFunction the function to call when the mouse\n   * is over the delete button\n   */\n  setDeleteButtonMouseOver(deleteButtonMouseOverFunction) {\n\n    if (this.deleteButtonCircle != null) {\n      this.deleteButtonCircle.mouseover(deleteButtonMouseOverFunction);\n    }\n  }\n\n  /**\n   * Set the mouseout listener for the delete button\n   * @param deleteButtonMouseOutFunction the function to call when the mouse\n   * moves out of the delete button\n   */\n  setDeleteButtonMouseOut(deleteButtonMouseOutFunction) {\n\n    if (this.deleteButtonCircle != null) {\n      this.deleteButtonCircle.mouseout(deleteButtonMouseOutFunction);\n    }\n  }\n\n  /**\n   * Set the dragmove listener for the group\n   * @param dragMoveFunction the function to call when the group is dragged\n   */\n  setDragMove(dragMoveFunction) {\n\n    if (this.group != null) {\n\n      // set a listener for when the node is dragged\n      this.group.on('dragmove', dragMoveFunction);\n    }\n  }\n\n  /**\n   * Set the x position\n   * @param x the x position\n   */\n  setX(x) {\n    this.x = x;\n    this.group.x(x);\n  }\n\n  /**\n   * Set the y position\n   * @param y the y position\n   */\n  setY(y) {\n    this.y = y;\n    this.group.y(y);\n  }\n\n  /**\n   * Add an outgoing link to the node\n   * @param outgoingLink a ConceptMapLink object\n   */\n  addOutgoingLink(outgoingLink) {\n    if (outgoingLink != null) {\n      this.outgoingLinks.push(outgoingLink);\n    }\n  }\n\n  /**\n   * Remove an outgoing link from the node\n   * @param outgoingLink a ConceptMapLink object\n   */\n  removeOutgoingLink(outgoingLink) {\n\n    if (outgoingLink != null) {\n\n      // loop through all the outgoing links in this node\n      for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n        // get an outgoing link\n        var tempOutgoingLink = this.outgoingLinks[ol];\n\n        if (outgoingLink == tempOutgoingLink) {\n          // we have found the outgoing link we want to remove\n          this.outgoingLinks.splice(ol, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the outgoing links\n   * @return the outgoing links\n   */\n  getOutgoingLinks() {\n    return this.outgoingLinks;\n  }\n\n  /**\n   * Add an incoming link to the node\n   * @param incomingLink a ConceptMapLink object\n   */\n  addIncomingLink(incomingLink) {\n    if (incomingLink != null) {\n      this.incomingLinks.push(incomingLink);\n    }\n  }\n\n  /**\n   * Remove an incoming link from the node\n   * @param incomingLink a ConceptMapLink object\n   */\n  removeIncomingLink(incomingLink) {\n\n    if (incomingLink != null) {\n\n      // loop through the incoming links in the node\n      for (var il = 0; il < this.incomingLinks.length; il++) {\n\n        // get an incoming link\n        var tempIncomingLink = this.incomingLinks[il];\n\n        if (incomingLink == tempIncomingLink) {\n          // we have found the incoming link we want to remove\n          this.incomingLinks.splice(il, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the incoming links\n   * @return the incoming links\n   */\n  getIncomingLinks() {\n    return this.incomingLinks;\n  }\n\n  /**\n   * The function that is called when the node is moved\n   * @param event\n   */\n  dragMove(event) {\n\n    // get the group\n    var group = this.getGroup();\n\n    // get the x and y coordinates of the center of the image\n    var cx = this.cx();\n    var cy = this.cy();\n\n    // update the local x, y values of the node for bookkeeping\n    this.x = group.x();\n    this.y = group.y();\n\n    // get the outgoing links and incoming links\n    var outgoingLinks = this.outgoingLinks;\n    var incomingLinks = this.incomingLinks;\n\n    if (outgoingLinks != null) {\n\n      // loop through all the outgoing links\n      for (var ol = 0; ol < outgoingLinks.length; ol++) {\n\n        // get an outgoing link\n        var outgoingLink = outgoingLinks[ol];\n\n        // update the x, y coordinate of the tail of the link\n        var x1 = cx;\n        var y1 = cy;\n\n        // calculate the nearest point to the destination node\n        var nearestPoint = outgoingLink.getNearestPointToDestinationNode(x1, y1);\n        x2 = nearestPoint.x;\n        y2 = nearestPoint.y;\n\n        // update the coordinates of the link\n        outgoingLink.updateCoordinates(x1, y1, x2, y2);\n      }\n\n      // loop through all the incoming links\n      for (var il = 0; il < incomingLinks.length; il++) {\n\n        // get an incoming link\n        var incomingLink = incomingLinks[il];\n\n        // reuse the coordinates of the tail of the link\n        var x1 = incomingLink.x1();\n        var y1 = incomingLink.y1();\n\n        // calculate the nearest point to the source node\n        var nearestPoint = incomingLink.getNearestPointToDestinationNode(x1, y1);\n        var x2 = nearestPoint.x;\n        var y2 = nearestPoint.y;\n\n        // update the coordinates of the link\n        incomingLink.updateCoordinates(x1, y1, x2, y2);\n      }\n    }\n\n    if (this.controller != null) {\n      // handle the student data changing\n      this.controller.studentDataChanged();\n    }\n\n    // move the group to the front so that it shows up above other elements\n    group.front();\n  }\n\n  /**\n   * Remove the node from the svg\n   */\n  remove() {\n\n    // make the group not draggable\n    this.group.draggable(false);\n\n    // remove the group\n    this.group.remove();\n\n    // remove the image\n    this.image.remove();\n\n    // remove the connector\n    this.connector.remove();\n\n    // remove the delete button\n    this.deleteButtonCircle.remove();\n    this.deleteButtonX.remove();\n    this.deleteButtonGroup.remove();\n\n    // loop through all the outgoing links\n    for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n      // get an outgoing link\n      var outgoingLink = this.outgoingLinks[ol];\n\n      if (outgoingLink != null) {\n        // remove the outgoing link\n        outgoingLink.remove();\n\n        /*\n         * move the counter back one because calling outgoingLink.remove()\n         * has removed the outgoingLink from the outgoingLinks array\n         */\n        ol--;\n      }\n    }\n\n    // loop through all the incoming links\n    for (var il = 0; il < this.incomingLinks.length; il++) {\n\n      // get an incoming link\n      var incomingLink = this.incomingLinks[il];\n\n      if (incomingLink != null) {\n        // remove the incoming link\n        incomingLink.remove();\n\n        /*\n         * move the counter back one because calling incomingLink.remove()\n         * has removed the incomingLink from the incomingLinks array\n         */\n        il--;\n      }\n    }\n  }\n\n  /**\n   * Get the links from this node to a given destination node\n   * @param destinationNode the destination node\n   */\n  getLinksToDestination(destinationNode) {\n\n    var linksToDestination = [];\n\n    // loop through all the outgoing links\n    for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n      // get an outgoing link\n      var outgoingLink = this.outgoingLinks[ol];\n\n      if (outgoingLink != null) {\n        if (destinationNode == outgoingLink.destinationNode) {\n          /*\n           * the destination of the link is the destination we are\n           * looking for\n           */\n          linksToDestination.push(outgoingLink);\n        }\n      }\n    }\n\n    return linksToDestination;\n  }\n\n  /**\n   * Calculate the width that the text rectangle should be set to\n   * @param labelText the label text that will be displayed in the rectangle\n   * @return the width that the text rectangle should be set to\n   */\n  calculateTextRectWidth(labelText) {\n    var width = 0;\n\n    if (labelText != null) {\n      width = (labelText.length * 6) + 10;\n    }\n\n    return width;\n  }\n\n  // end of ConceptMapNode class\n}\n\n/**\n * A ConceptMapLink that represents a link in the ConceptMap component\n */\nclass ConceptMapLink {\n\n  /**\n   * The constructor to create a ConceptMapLink object\n   * @param ConceptMapService the ConceptMapService\n   * @param draw the svg.js draw object\n   * @param id the instance id of the link\n   * @param originalId the original authored id of the link\n   * @param sourceNode the source ConceptMapNode\n   * @param destinationNode the destination ConceptMapNode\n   * @param label the text label\n   * @param color the color of the link\n   * @param curvature the curvature of the link\n   * @param startCurveUp whether the start of the link curves up\n   * @param endCurveUp whether the end of the link curves up\n   */\n  constructor(ConceptMapService, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp) {\n\n    // remember the ConceptMapService\n    this.ConceptMapService = ConceptMapService;\n\n    // remember the svg.js draw object\n    this.draw = draw;\n\n    // set the id\n    this.id = id;\n\n    // set the original id\n    this.originalId = originalId;\n\n    // the arrow head of the link\n    this.head = null;\n\n    // the line of the link\n    this.path = null;\n\n    // set the color of the link\n    this.color = color;\n\n    if (this.color == null) {\n      // if no color is specified, use a default color\n      this.color = 'blue';\n    }\n\n    // whether the link is highlighted\n    this.highlighted = false;\n\n    // create a group to contain the path and head\n    this.group = this.draw.group();\n\n    // where to place the text of the link along the line\n    this.textPercentageLocationOnLink = 0.6\n\n    // remember the source node\n    this.sourceNode = sourceNode;\n\n    /*\n     * used to remember the destination node later after the destination\n     * node has been chosen\n     */\n    this.destinationNode = destinationNode;\n\n    // remember the curvature\n    this.curvature = curvature;\n\n    if (this.curvature == null) {\n      this.curvature = 0.5;\n    }\n\n    // set whether the link curves up or down\n    this.startCurveUp = startCurveUp;\n    this.endCurveUp = endCurveUp;\n\n    if (this.startCurveUp == null || this.endCurveUp == null) {\n      /*\n       * start and end curve up have not been specified so we will set\n       * it at random\n       */\n\n      // choose a random integer 0 or 1\n      var randInt = Math.floor(Math.random() * 2);\n\n      if (randInt == 0) {\n        // set the link to curve down\n        this.startCurveUp = false;\n        this.endCurveUp = false;\n      } else {\n        // set the link to curve up\n        this.startCurveUp = true;\n        this.endCurveUp = true;\n      }\n    }\n\n    // create a curved link\n    this.curvedLink = true;\n\n    // initialize the coordinates of both ends of the link\n    var x1 = this.sourceNode.cx();\n    var y1 = this.sourceNode.cy();\n    var x2 = x1;\n    var y2 = y1;\n\n    if (this.destinationNode != null) {\n\n      /*\n       * get the nearest point from the center of the source node to the\n       * destination node along the perimeter of the destination node\n       * image\n       */\n      var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n      x2 = nearestPoint.x;\n      y2 = nearestPoint.y;\n\n      // connect the link to the nodes\n      this.connectLinkToNodes();\n    }\n\n    if (this.curvedLink) {\n      // create a curved link\n\n      // calculate the curved line in svg\n      var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2);\n\n      // get the line\n      var tail = arrowPathArraysObject[0];\n\n      // get the arrow head\n      var head = arrowPathArraysObject[1];\n\n      // draw the head and tail\n      this.head = this.draw.path(head.toString());\n      this.path = this.draw.path(tail.toString());\n    } else {\n      // create a straight line\n      this.path = this.draw.path('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n    }\n\n    // set the style of the link\n    this.path.attr('stroke', this.color);\n    this.path.attr('stroke-width', 3);\n    this.path.attr('fill', 'transparent');\n    this.head.attr('stroke', this.color);\n    this.head.attr('fill', this.color);\n    this.head.attr('pointer-events', 'none');\n\n    /*\n     * remember the x and y coordinates of the source and destination\n     * so that we can look them up easily later\n     */\n    this.path.attr('x1', x1);\n    this.path.attr('y1', y1);\n    this.path.attr('x2', x2);\n    this.path.attr('y2', y2);\n\n    // add the tail and head to the group\n    this.group.add(this.path);\n    this.group.add(this.head);\n\n    // create the text group for the link\n    this.createTextGroup();\n\n    // text that describes the type of link chosen by the student\n    this.setLabel(label);\n\n    if (this.label == null || this.label == '') {\n      // there is no label so we will hide the text group\n      this.hideTextGroup();\n    } else {\n      // there is a label so we will show the text group\n      this.showTextGroup();\n    }\n\n    // create the delete button group\n    this.createDeleteButtonGroup();\n  }\n\n  /**\n   * Get the JSON object representation of the ConceptMapLink\n   * @returns a JSON object containing the data of the ConceptMapLink\n   */\n  toJSONObject() {\n    var jsonObject = {};\n\n    jsonObject.originalId = this.originalId;\n    jsonObject.instanceId = this.id;\n    jsonObject.color = this.color;\n    jsonObject.label = this.label;\n    jsonObject.curvature = this.curvature;\n    jsonObject.startCurveUp = this.startCurveUp;\n    jsonObject.endCurveUp = this.endCurveUp;\n    jsonObject.sourceNodeOriginalId = this.sourceNode.getOriginalId();\n    jsonObject.sourceNodeInstanceId = this.sourceNode.getId();\n    jsonObject.sourceNodeLabel = this.sourceNode.getLabel();\n    jsonObject.destinationNodeOriginalId = this.destinationNode.getOriginalId();\n    jsonObject.destinationNodeInstanceId = this.destinationNode.getId();\n    jsonObject.destinationNodeLabel = this.destinationNode.getLabel();\n\n    return jsonObject;\n  }\n\n  /**\n   * Get the id of the link\n   * @returns the id of the link\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the original id of the node\n   * @returns the original id of the node\n   */\n  getOriginalId() {\n    return this.originalId;\n  }\n\n  /**\n   * Get the id of the group\n   * @returns the id of the group\n   */\n  getGroupId() {\n    return this.group.id();\n  }\n\n  /**\n   * Get the x1 value\n   * @returns the x coordinate of the source of the link\n   */\n  x1() {\n    return this.path.attr('x1');\n  }\n\n  /**\n   * Get the y1 value\n   * @returns the y coordinate of the source of the link\n   */\n  y1() {\n    return this.path.attr('y1');\n  }\n\n  /**\n   * Get the x2 value\n   * @returns the x coordinate of the destination of the link\n   */\n  x2() {\n    return this.path.attr('x2');\n  }\n\n  /**\n   * Get the y2 value\n   * @returns the y coordinate of the destination of the link\n   */\n  y2() {\n    return this.path.attr('y2');\n  }\n\n  /**\n   * Set the original id\n   * @param originalId the original id\n   */\n  setOriginalId(originalId) {\n    this.originalId = originalId;\n  }\n\n  /**\n   * Get the label\n   * @returns the label\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Getter/setter for the highlighted value\n   * @param value (optional) the highlighted value\n   * @returns whether the link is highlighted\n   */\n  isHighlighted(value) {\n\n    if (value != null) {\n      this.highlighted = value;\n    }\n\n    return this.highlighted;\n  }\n\n  /**\n   * Update the coordinates of the link\n   * @param x1 (optional) the x position of the source\n   * @param y1 (optional) the y position of the source\n   * @param x2 (optional) the x position of the destination\n   * @param y2 (optional) the y position of the destination\n   * @param isDragging whether the link is currently being dragged\n   */\n  updateCoordinates(x1, y1, x2, y2, isDragging) {\n    var array = this.path.array();\n\n    if (this.curvedLink) {\n      // draw a curved link\n\n      if (x1 == null) {\n        /*\n         * the x1 parameter was not provided so we will reuse the\n         * existing value\n         */\n        x1 = this.path.attr('x1');\n      }\n\n      if (y1 == null) {\n        /*\n         * the y1 parameter was not provided so we will reuse the\n         * existing value\n         */\n        y1 = this.path.attr('y1');\n      }\n\n      if (x2 == null) {\n        /*\n         * the x2 parameter was not provided so we will reuse the\n         * existing value\n         */\n        x2 = this.path.attr('x2');\n      }\n\n      if (y2 == null) {\n        /*\n         * the y2 parameter was not provided so we will reuse the\n         * existing value\n         */\n        y2 = this.path.attr('y2');\n      }\n\n      // calculate the line\n      var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2, isDragging);\n\n      // get the svg tail\n      var tail = arrowPathArraysObject[0];\n\n      // get the svg head\n      var head = arrowPathArraysObject[1];\n\n      // re-plot the head and path\n      this.head.plot(head.toString());\n      this.path.plot(tail.toString());\n    } else {\n      // draw a straight line\n\n      if (x1 == null) {\n        /*\n         * the x1 parameter was not provided so we will reuse the\n         * existing value\n         */\n        x1 = this.path.attr('x1');\n      }\n\n      if (y1 == null) {\n        /*\n         * the y1 parameter was not provided so we will reuse the\n         * existing value\n         */\n        y1 = this.path.attr('y1');\n      }\n\n      if (x2 == null) {\n        /*\n         * the x2 parameter was not provided so we will reuse the\n         * existing value\n         */\n        x2 = this.path.attr('x2');\n      }\n\n      if (y2 == null) {\n        /*\n         * the y2 parameter was not provided so we will reuse the\n         * existing value\n         */\n        y2 = this.path.attr('y2');\n      }\n\n      // re-plot the line\n      this.path.plot('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n    }\n\n    // update the coordinate values\n    this.path.attr('x1', x1);\n    this.path.attr('y1', y1);\n    this.path.attr('x2', x2);\n    this.path.attr('y2', y2);\n\n    if (this.deleteButtonGroup != null) {\n      // update the location of the delete button\n      var deleteButtonLocation = this.getDeleteButtonLocation();\n      this.deleteButtonGroup.x(deleteButtonLocation.x);\n      this.deleteButtonGroup.y(deleteButtonLocation.y);\n    }\n\n    if (this.textGroup != null) {\n      // update the location of the text group\n\n      // get the length of the line\n      var totalLength = this.path.node.getTotalLength();\n\n      // get the coordinate of a point somewhere in the middel of the line\n      var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n\n      this.textGroup.cx(midPoint.x);\n      this.textGroup.cy(midPoint.y);\n    }\n  }\n\n  /**\n   * Calculate the curved line\n   * @param x1 the x coordinate of the source\n   * @param y1 the y coordinate of the source\n   * @param x2 the x coordinate of the destination\n   * @param y2 the y coordinate of the destination\n   * @param isDragging whether the line is currently being dragged\n   * @returns an array that contains the svg objects for the arrow head and line\n   */\n  calculateCurvedLine(x1, y1, x2, y2, isDragging) {\n\n    var startx = x1;\n    var starty = y1;\n    var endx = x2;\n    var endy = y2;\n    var startCurveUp = true;\n    var endCurveUp = true;\n    var len = 15;\n    var angle = 45;\n    var curvature = 0.5;\n    var nodeRadius = 10;\n\n    // set the amount of curvature of the line\n    curvature = this.curvature;\n\n    // whether the link should curve up or down\n    startCurveUp = this.startCurveUp;\n    endCurveUp = this.endCurveUp;\n\n    // calculate the svg objects for the arrow head and line\n    var arrowPathArraysObject = this.ConceptMapService.arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius);\n\n    return arrowPathArraysObject;\n  }\n\n  /**\n   * Set the destination node\n   * @param destinationNode the destination ConceptMapNode object\n   */\n  setDestination(destinationNode) {\n\n    if (destinationNode != null) {\n\n      // get x and y of the tail\n      var x1 = this.path.attr('x1');\n      var y1 = this.path.attr('y1');\n\n      // remember the destination node\n      this.destinationNode = destinationNode;\n\n      /*\n       * check if there are any links with that have the same source,\n       * destination, and direction. if there is a link that has the\n       * same source, destination, and direction, we will try to use\n       * a different direction that hasn't already been used. if all\n       * directions have already been used, we will use the original\n       * direction the user specified. there are three link directions,\n       * up, straight, and down.\n       *    ___\n       * up  /   \\\n       *  o  o\n       *\n       * straight o------o\n       *\n       *    o   o\n       * down \\__/\n       */\n\n      var directionAlreadyUsed = false;\n      var direction = '';\n\n      if (this.curvature == 0) {\n        // the user has created the curve to be straight\n        direction = 'straight';\n      } else if (this.startCurveUp && this.endCurveUp) {\n        // the user has created the curve that starts by pointing up\n        direction = 'up';\n      } else if (!this.startCurveUp && !this.endCurveUp) {\n        // the user has created the curve that starts by pointing down\n        direction = 'down';\n      }\n\n      // get all the links that have the same source and destination\n      var parallelLinks = this.sourceNode.getLinksToDestination(destinationNode);\n\n      var usedDirections = [];\n\n      // loop through all the links that have the same source and destination\n      for (var p = 0; p < parallelLinks.length; p++) {\n        var parallelLink = parallelLinks[p];\n\n        if (parallelLink != null) {\n\n          var curvature = parallelLink.curvature;\n          var startCurveUp = parallelLink.startCurveUp;\n          var endCurveUp = parallelLink.endCurveUp;\n\n          var tempDirection = '';\n\n          if (curvature == 0) {\n            // the other link is straight\n            tempDirection = 'straight';\n          } else if (startCurveUp && endCurveUp) {\n            // the other link points up\n            tempDirection = 'up';\n          } else if (!startCurveUp && !endCurveUp) {\n            // the other link points down\n            tempDirection = 'down'\n          }\n\n          if (direction == tempDirection) {\n            /*\n             * the direction is the same as the direction the user\n             * has specified\n             */\n            directionAlreadyUsed = true;\n          }\n\n          // keep track of the directions that were used\n          usedDirections.push(tempDirection);\n        }\n      }\n\n      if (directionAlreadyUsed) {\n        /*\n         * the direction the user specified is already used so we will\n         * try to find a direction that hasn't been used\n         */\n\n        if (usedDirections.indexOf('up') == -1) {\n          /*\n           * we have not used the up direction yet so we will make\n           * the link point up\n           */\n          this.curvature = 0.5;\n          this.startCurveUp = true;\n          this.endCurveUp = true;\n        } else if (usedDirections.indexOf('straight') == -1) {\n          /*\n           * we have not used the straight direction yet so we will\n           * make the link point straight\n           */\n          this.curvature = 0.0;\n          this.startCurveUp = true;\n          this.endCurveUp = true;\n        } else if (usedDirections.indexOf('down') == -1) {\n          /*\n           * we have not used the down direction yet so we will make\n           * the link point down\n           */\n          this.curvature = 0.5;\n          this.startCurveUp = false;\n          this.endCurveUp = false;\n        }\n      }\n\n      /*\n       * get the nearest point from the center of the source node to the\n       * destination node along the perimeter of the destination node\n       * image\n       */\n      var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n      var x2 = nearestPoint.x;\n      var y2 = nearestPoint.y;\n\n      // update the coordinates of the link\n      var isDragging = false;\n      this.updateCoordinates(x1, y1, x2, y2, isDragging);\n\n      // connect the link to the nodes\n      this.connectLinkToNodes();\n\n      // hide the delete button\n      this.hideDeleteButton();\n    }\n  }\n\n  /**\n   * Get the nearest point to the destination node from a given x, y point\n   * @param x the x value of the source point\n   * @param y the y value of the source point\n   * @returns an object containing an x and y field\n   */\n  getNearestPointToDestinationNode(x, y) {\n\n    // get the coordinates of the upper left corner of the image\n    var rectMinX = this.destinationNode.getImageX();\n    var rectMinY = this.destinationNode.getImageY();\n\n    /*\n     * add padding of 25 pixels to resolve the problem of the arrow head\n     * being placed behind the destination image\n     */\n    rectMinY = rectMinY - 25;\n\n    // get the width and height of the image\n    var width = this.destinationNode.getImageWidth();\n    var height = this.destinationNode.getImageHeight();\n\n    // compensate for the 25 pixel padding that we added above\n    height = height + 25;\n\n    /*\n    var destinationNodeGroup = this.destinationNode.getGroup();\n    var destinationNodeGroupBBox = destinationNodeGroup.bbox();\n\n    rectMinX = this.destinationNode.getGroupX();\n    rectMinY = this.destinationNode.getGroupY();\n\n    width = destinationNodeGroupBBox.width;\n    height = destinationNodeGroupBBox.height;\n    */\n\n    if (x == null && y == null) {\n      // get the coordinates of the source if x and y were not provided\n      x = this.path.attr('x1');\n      y = this.path.attr('y1');\n    }\n\n    /*\n     * find the nearest point from the source to anywhere along the\n     * rectangular perimeter of the destination image\n     */\n    var point = this.getNearestPointInPerimeter(rectMinX, rectMinY, width, height, x, y);\n\n    return point;\n  }\n\n  /**\n   * Get the nearest point on a rectangle from a source point\n   * @param l the upper left x value of the rectangle\n   * @param t the upper left y value of the rectangle\n   * @param w the width of the rectangle\n   * @param h the height of the rectangle\n   * @param x the source point x value\n   * @param y the source point y value\n   * @returns the point on the rectangle that is closest to the\n   */\n  getNearestPointInPerimeter(l, t, w, h, x, y) {\n    var r = l + w;\n    var b = t + h;\n\n    var x = this.clamp(x, l , r);\n    var y = this.clamp(y, t, b);\n\n    var dl = Math.abs(x - l);\n    var dr = Math.abs(x - r);\n    var dt = Math.abs(y - t);\n    var db = Math.abs(y - b);\n\n    var m = Math.min(dl, dr, dt, db);\n\n    var point = {};\n\n    if (m == dt) {\n      point.x = x;\n      point.y = t;\n    } else if (m == db) {\n      point.x = x;\n      point.y = b;\n    } else if (m == dl) {\n      point.x = l;\n      point.y = y;\n    } else {\n      point.x = r;\n      point.y = y;\n    }\n\n    return point;\n  }\n\n  /**\n   * Helper function for getNearestPointInPerimeter\n   */\n  clamp(x, lower, upper) {\n    return Math.max(lower, Math.min(upper, x));\n  }\n\n  /**\n   * Set the color of the link\n   * @param color the color\n   */\n  setColor(color) {\n\n    if (color != null) {\n      // set the color styling\n      this.color = color;\n      this.path.attr('stroke', this.color);\n      this.head.attr('stroke', this.color);\n      this.head.attr('fill', this.color);\n      this.deleteButton.attr('stroke', this.color);\n      this.deleteButtonX.attr('stroke', this.color);\n    }\n  }\n\n  /**\n   * Set the label\n   * @param label the text label\n   */\n  setLabel(label) {\n\n    if (label != null) {\n\n      // remember the label\n      this.label = label;\n\n      // set the text into the text element\n      this.text.text(label);\n\n      // show the text group now that it has a label\n      this.showTextGroup();\n\n      // reset the width to adjust to the new text length\n      var width = 0;\n\n      try {\n        // get the width of the bounding box of the text node\n        var textBBox = this.text.node.getBBox();\n\n        if (textBBox.width == 0) {\n          width = this.calculateTextRectWidth(this.label);\n        } else {\n          width = textBBox.width + 10;\n        }\n      } catch(e) {\n        /*\n         * we were unable to get the bounding box (likely because\n         * Firefox threw an error when trying to call getBBox())\n         * so we will calculate the width based on the label text\n         */\n        width = this.calculateTextRectWidth(this.label);\n      }\n\n      this.textRect.attr('width', width);\n\n      // recalculate the position of the svg text object\n      var totalLength = this.path.node.getTotalLength();\n      var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n      this.textGroup.cx(midPoint.x);\n      this.textGroup.cy(midPoint.y);\n    }\n  }\n\n  /**\n   * Connect a link the its source and destination nodes\n   */\n  connectLinkToNodes() {\n\n    if (this.sourceNode != null && this.destinationNode != null) {\n\n      // add the link to the outgoing links of its source node\n      this.sourceNode.addOutgoingLink(this);\n\n      // add the link to the incoming links of its destination node\n      this.destinationNode.addIncomingLink(this);\n    }\n  }\n\n  /**\n   * Create the delete button for the link\n   */\n  createDeleteButtonGroup() {\n    // create a group to contain the elements of the delete button\n    this.deleteButtonGroup = this.draw.group();\n\n    /*\n     * create an invisible circle that is placed behind the delete button\n     * and has a larger radius than the delete button. this is used for\n     * mouse over purposes so that we can keep the delete button visible\n     * when the mouse is around the area of the delete button\n     */\n    var invisibleCircleRadius = 30;\n    this.invisibleCircle = this.draw.circle();\n    this.invisibleCircle.radius(invisibleCircleRadius);\n    this.invisibleCircle.fill({ opacity: 0.0});\n\n    // create the delete button circle\n    var deleteButtonRadius = 10;\n    this.deleteButton = this.draw.circle();\n    this.deleteButton.radius(deleteButtonRadius);\n    this.deleteButton.fill({ opacity: 0.0 });\n    this.deleteButton.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n    /*\n     * create the x part of the delete button by creating a + and then\n     * rotating it 45 degrees\n     */\n\n    // get the coordinate of the center of the delete button\n    var deleteButtonMidpointX = this.deleteButton.cx();\n    var deleteButtonMidpointY = this.deleteButton.cy();\n\n    // get the coordinates of the top of the +\n    var topX = deleteButtonMidpointX;\n    var topY = deleteButtonMidpointY - (deleteButtonRadius * 0.7);\n\n    // get the coordinates of the bottom of the +\n    var bottomX = deleteButtonMidpointX;\n    var bottomY = deleteButtonMidpointY + (deleteButtonRadius * 0.7);\n\n    // get the coordinates of the left of the +\n    var leftX = deleteButtonMidpointX - (deleteButtonRadius * 0.7);\n    var leftY = deleteButtonMidpointY;\n\n    // get the coordinates of the right of the +\n    var rightX = deleteButtonMidpointX + (deleteButtonRadius * 0.7);\n    var rightY = deleteButtonMidpointY;\n\n    // create the path for the +\n    var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n\n    // draw the path\n    this.deleteButtonX = this.draw.path(deleteButtonXPath);\n    this.deleteButtonX.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n    /// rotate the + to create the x\n    this.deleteButtonX.rotate(45);\n\n    /*\n     * disable pointer events on the x so that we only need to set a\n     * mouse listener on the circle\n     */\n    this.deleteButtonX.attr('pointer-events', 'none');\n\n    // add the invisible circle, regular circle, and x to the group\n    this.deleteButtonGroup.add(this.invisibleCircle);\n    this.deleteButtonGroup.add(this.deleteButton);\n    this.deleteButtonGroup.add(this.deleteButtonX);\n\n    // set the location of the delete button group\n    var location = this.getDeleteButtonLocation();\n    var x = location.x;\n    var y = location.y;\n    this.deleteButtonGroup.x(x);\n    this.deleteButtonGroup.y(y);\n\n    // set the listener for when the mouse is over the group\n    this.deleteButtonGroup.mouseover((event) => {\n      this.deleteButtonGroupMouseOver(event);\n    });\n\n    // set the listener for when the mouse moves out of the group\n    this.deleteButtonGroup.mouseout((event) => {\n      this.deleteButtonGroupMouseOut(event);\n    });\n\n    // add the delete button group to the link group\n    this.group.add(this.deleteButtonGroup);\n\n    /*\n     * hide the delete button. we only need to show the delete button\n     * when the link is active.\n     */\n    this.deleteButtonGroup.hide();\n  }\n\n  /**\n   * Called when the mouse is over the delete button group\n   * @param event the mouseover event\n   */\n  deleteButtonGroupMouseOver(event) {\n    // show the delete button\n    this.showDeleteButton();\n  }\n\n  /**\n   * Called when the mouse leaves the delete button group\n   * @param event the mouseout event\n   */\n  deleteButtonGroupMouseOut(event) {\n    if (!this.highlighted) {\n      // the link is not highlighted so we will hide the delete button\n      this.hideDeleteButton();\n    }\n  }\n\n  /**\n   * Called when the delete button is clicked\n   * @param deleteButtonClickedFunction the function to call when the delete\n   * button is clicked\n   */\n  setDeleteButtonClicked(deleteButtonClickedFunction) {\n    // listen for the click event on the delete button to call the function\n    this.deleteButton.click(deleteButtonClickedFunction);\n  }\n\n  /**\n   * Called when the mouse is clicked down on the group\n   * @param linkMouseDownFunction the function to call when the mouse is\n   * clicked down on the group\n   */\n  setLinkMouseDown(linkMouseDownFunction) {\n\n    if (this.group != null) {\n      /*\n       * listen for the mousedown event on the group to call\n       * the function\n       */\n      this.group.mousedown(linkMouseDownFunction);\n    }\n  }\n\n  /**\n   * Called when the mouse is clicked down on the link text group\n   * @param linkTextMouseDownFunction the function to call when the mouse is\n   * clicked down on the link text group\n   */\n  setLinkTextMouseDown(linkTextMouseDownFunction) {\n\n    if (this.textGroup != null) {\n      /*\n       * listen for the mousedown event on the link text group to call\n       * the function\n       */\n      this.textGroup.mousedown(linkTextMouseDownFunction);\n    }\n  }\n\n  /**\n   * Called when the mouse is over the group\n   * @param linkMouseOverFunction the function to call when the mouse is over\n   * the group\n   */\n  setLinkMouseOver(linkMouseOverFunction) {\n    if (this.group != null) {\n      // listen for the mouseover event on the group to call the function\n      this.group.mouseover(linkMouseOverFunction);\n    }\n  }\n\n  /**\n   * Called when the mouse leaves the group\n   * @param linkMouseOutFunction the function to call when the mouse leaves\n   * the group\n   */\n  setLinkMouseOut(linkMouseOutFunction) {\n    if (this.group != null) {\n      // listen for the mouseout event on the group to call the function\n      this.group.mouseout(linkMouseOutFunction);\n    }\n  }\n\n  /**\n  * Calculate the location of the delete button for the link\n  *\n  * Note: This function and the associated functions that are called by this\n  * function are taken from the Concord MySystem github project.\n  * https://github.com/concord-consortium/mysystem_sc\n  * The code is found in the _setRemoveButtonLocation function in the link.js file.\n  * mysystem_sc/apps/my_system/views/link.js\n  */\n  getDeleteButtonLocation() {\n    //var line = raphaelObject.items[2];\n\n    var line = this.path.node;\n    var distanceAlongLine = 35;\n    var distanceAlongNormal = 18;\n    var len, p1, p2, scale, dx, dy, x, y, occluded;\n\n    /*\n    var link = this.get('content');\n    if (!link.isComplete()) return;\n    if (line.attr('path').length < 1) return;   // this can happen after our content is destroyed\n    */\n\n    len = line.getTotalLength();\n    p2  = line.getPointAtLength(len);\n\n    if (len > 50) {\n      p1 = line.getPointAtLength(len - distanceAlongLine);\n\n      dx = p2.x - p1.x;\n      dy = p2.y - p1.y;\n      scale = distanceAlongNormal / distanceAlongLine * (dx > 0 ? 1 : -1);\n\n      x = p1.x + scale * dy;\n      y = p1.y - scale * dx;\n      //occluded = NO;\n    }\n    else {\n      x = 0;\n      y = 0;\n      //occluded = YES;\n    }\n\n    /*\n    this.set('removeButtonX', x);\n    this.set('removeButtonY', y);\n    this.set('isRemoveButtonOccluded', occluded);\n    */\n\n    var location = {};\n    location.x = x;\n    location.y = y;\n\n    return location;\n  }\n\n  /**\n   * Show the delete button\n   */\n  showDeleteButton() {\n    if (this.deleteButtonGroup != null) {\n      this.deleteButtonGroup.show();\n    }\n  }\n\n  /**\n   * Hide the delete button\n   */\n  hideDeleteButton() {\n    if (this.deleteButtonGroup != null) {\n      this.deleteButtonGroup.hide();\n    }\n  }\n\n  /**\n   * Create the text group\n   * @returns the text group\n   */\n  createTextGroup() {\n\n    // create the group\n    this.textGroup = this.draw.group();\n\n    // create a rectangle to surround the text\n    this.textRect = this.draw.rect(100, 15);\n    this.textRect.attr('fill', 'white');\n    this.textRect.attr('stroke', 'black');\n    this.textRect.attr('x', 0);\n    this.textRect.attr('y', 10);\n    this.textRect.attr('width', 100);\n    this.textRect.attr('height', 20);\n    this.textRect.radius(5);\n\n    var label = '';\n\n    // create the text element\n    this.text = this.draw.text(label);\n    this.text.attr('x', 5);\n    this.text.attr('y', 9);\n    this.text.font({\n      family: 'Arial',\n      size: 12\n    });\n\n    // prevent the text from being highlighted when the user drags the mouse\n    this.text.style('user-select:none');\n    this.text.node.setAttribute('user-select', 'none');\n    this.text.node.setAttribute('style', 'user-select:none');\n\n    // add the rectangle and text to the group\n    this.textGroup.add(this.textRect);\n    this.textGroup.add(this.text);\n\n    var width = 0;\n\n    try {\n      // get the width of the bounding box of the text node\n      var textBBox = this.text.node.getBBox();\n\n      if (textBBox.width == 0) {\n        width = this.calculateTextRectWidth(this.label);\n      } else {\n        width = textBBox.width + 10;\n      }\n    } catch(e) {\n      /*\n       * we were unable to get the bounding box (likely because\n       * Firefox threw an error when trying to call getBBox())\n       * so we will calculate the width based on the label text\n       */\n      width = this.calculateTextRectWidth(this.label);\n    }\n\n    this.textRect.attr('width', width);\n\n    // set the location of the text to be somewhere along the line of the link\n    var totalLength = this.path.node.getTotalLength();\n    var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n    this.textGroup.cx(midPoint.x);\n    this.textGroup.cy(midPoint.y);\n\n    // hide the text group until the student has chosen a link type\n    this.textGroup.hide();\n\n    /*\n     * set the link group id into the text group so we can look it up\n     * later when the mouse is clicked down on the text group\n     */\n    this.textGroup.node.linkGroupId = this.group.id();\n\n    return this.textGroup;\n  }\n\n  /**\n   * Move the text group to the front so that it won't be blocked behind\n   * another element when the student tries to click on the text group.\n   */\n  moveTextGroupToFront() {\n    this.textGroup.front();\n  }\n\n  /**\n   * Show the text group\n   */\n  showTextGroup() {\n\n    if (this.textGroup != null) {\n      this.textGroup.show();\n    }\n  }\n\n  /**\n   * Hide the text group\n   */\n  hideTextGroup() {\n\n    if (this.textGroup != null) {\n      this.textGroup.hide();\n    }\n  }\n\n  /**\n   * Remove all the references to the link and also remove all the elements\n   * from the svg\n   */\n  remove() {\n\n    if (this.sourceNode != null) {\n      // remove the link from the source node's outgoing links\n      this.sourceNode.removeOutgoingLink(this);\n    }\n\n    if (this.destinationNode != null) {\n      // remove the link from the destination node's incoming links\n      this.destinationNode.removeIncomingLink(this);\n    }\n\n    if (this.path != null) {\n      // remove the line\n      this.path.remove();\n    }\n\n    if (this.head != null) {\n      // remove the arrow head\n      this.head.remove();\n    }\n\n    if (this.deleteButtonGroup != null) {\n      // remove the delete button group\n      this.deleteButtonGroup.remove();\n    }\n\n    if (this.textGroup != null) {\n      // remove the text group\n      this.textGroup.remove();\n    }\n\n    if (this.group != null) {\n      // remove the link group\n      this.group.remove();\n    }\n  }\n\n  /**\n   * Calculate the width that the text rectangle should be set to\n   * @param labelText the label text that will be displayed in the rectangle\n   * @return the width that the text rectangle should be set to\n   */\n  calculateTextRectWidth(labelText) {\n    var width = 0;\n\n    if (labelText != null) {\n      width = (labelText.length * 6) + 10;\n    }\n\n    return width;\n  }\n\n  // end of ConceptMapLink class\n}\n\n\nConceptMapService.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$q',\n  '$timeout',\n  'ConfigService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapService;\n"]}