<<<<<<< HEAD
{"version":3,"sources":["conceptMapService.es6"],"names":[],"mappings":"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","file":"conceptMapService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass ConceptMapService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a ConceptMap component object\n     * @returns a new ConceptMap component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'ConceptMap';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = false;\n        return component;\n    }\n\n    /**\n     * Copies a ConceptMap component object\n     * @returns a copied ConceptMap component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.starterSentence = componentToCopy.starterSentence;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        return component;\n    }\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'ConceptMap') {\n                // the other component is an ConceptMap component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.response) {\n                            // there is a response so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.response) {\n                        // there is a response so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Create an instance of the ConceptMapNode class\n     * @param draw the svg.js draw object\n     * @param id the node id\n     * @param filePath the file path of the image\n     * @param label the label of the node\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param width the width of the image\n     * @param height the height of the image\n     * @param a ConceptMapNode\n     */\n    newConceptMapNode(draw, id, originalId, filePath, label, x, y, width, height) {\n        return new ConceptMapNode(this, draw, id, originalId, filePath, label, x, y, width, height);\n    }\n    \n    /**\n     * Create an instance of the ConceptMapLink class\n     * @param draw the svg.js draw object\n     * @param id the link id\n     * @param node the source ConceptMapNode that the link is coming out of\n     * @param x the x position of the tail\n     * @param y the y position of the tail\n     * @returns a ConceptMapLink\n     */\n    newConceptMapLink(draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown) {\n        return new ConceptMapLink(this, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown);\n    }\n    \n    /**\n     * Get the slope of the line between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the slope of the line or null if the slope is infinite\n     */\n    getSlope(x1, y1, x2, y2) {\n        \n        var slope = null;\n        \n        if ((x2 - x1) == 0) {\n            // the slope is infinite so we will return null\n            slope = null;\n        } else {\n            // calculate the slope\n            slope = (y2 - y1) / (x2 - x1);\n        }\n        \n        return slope;\n    }\n    \n    /**\n     * Calculate the euclidean distance between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the distance between the two points\n     */\n    calculateDistance(x1, y1, x2, y2) {\n        \n        // calculate the distance\n        var distance = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n        \n        return distance;\n    }\n    \n    /**\n    \n    Returns an array representation of the path elements for an arrow\n    \n    First we calculate a simple curve for the tail.\n    \n    Then we pick a point on that curve to use as the base-center of the arrow head, \n    then calculate the position of that triangle based on the angle between that \n    point and the tip.\n  \n    @params startx {Number} X-coordinate of the start point\n    @params starty {Number} Y-coordinate of the start point\n    @params endx {Number} X-coordinate of the end point\n    @params endy {Number} Y-coordinate of the end point\n    @params len {Number} Length of the \"tip\" of the arrowhead\n    @params angle {Number} Angle in degrees \n      between the line and each wing of the arrowhead. \n      Should be less than 90.\n\n    Note: This function and the associated functions that are called by this\n    function are taken from the Concord MySystem github project.\n    https://github.com/concord-consortium/mysystem_sc\n    The code is found in the arrow_drawing.js file.\n    mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n    \n    **/\n    arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius) { \n        \n        if (startx === endx && starty === endy){\n            return [[\"\"],[\"\"]];\n        }   \n        \n        var start = new this.coord(startx, starty),\n        tip = new this.coord(endx, endy),\n        pathData   = [],\n        arrowHeadData = [];\n        \n        // calculate control points c2 and c3\n        var curveDistance = (tip.x - start.x) * curvature,\n        startYCurveDistance = (curveDistance === 0 ? 1 : Math.max(Math.min(curveDistance, 100), -100)),\n        endYCurveDistance = startYCurveDistance,\n        startUp = startCurveUp ? 1 : -1,\n        endUp = endCurveUp ? 1 : -1;\n        startYCurveDistance = (startYCurveDistance * startUp > 0) ? startYCurveDistance : startYCurveDistance * -1;\n        endYCurveDistance = (endYCurveDistance * endUp > 0) ? endYCurveDistance : endYCurveDistance * -1;\n        var c2 = new this.coord(start.x+(curveDistance/2), start.y-startYCurveDistance),\n        c3 = new this.coord(tip.x-(curveDistance/2), tip.y-endYCurveDistance),\n        cDistance = Math.sqrt(Math.pow((curveDistance/2),2) + Math.pow(startYCurveDistance,2)),\n        perimX = nodeRadius*(curveDistance/2)/cDistance, \n        perimYstart = nodeRadius*startYCurveDistance/cDistance,\n        perimYend = nodeRadius*endYCurveDistance/cDistance;\n        \n        // update tip\n        tip = new this.coord(tip.x - perimX, tip.y - perimYend);\n        \n        // draw arrow path\n        \n        pathData.push(\"M\", start.x + perimX, start.y - perimYstart);  // move to start of line\n        pathData.push(\"C\", c2.x, c2.y, c3.x, c3.y, tip.x, tip.y); // curve line to the tip\n        \n        // draw arrow head\n        var percLengthOfHead = len / this.getLengthOfCubicBezier(start, c2, c3, tip),\n        centerBaseOfHead = this.getPointOnCubicBezier(percLengthOfHead, start, c2, c3, tip),\n        theta  = Math.atan2((tip.y-centerBaseOfHead.y),(tip.x-centerBaseOfHead.x)),\n        baseAngleA = theta + angle * Math.PI/180,\n        baseAngleB = theta - angle * Math.PI/180,\n        baseA      = new this.coord(tip.x - len * Math.cos(baseAngleA), tip.y - len * Math.sin(baseAngleA)),\n        baseB      = new this.coord(tip.x - len * Math.cos(baseAngleB), tip.y - len * Math.sin(baseAngleB));\n        \n        arrowHeadData.push(\"M\", tip.x, tip.y);\n        arrowHeadData.push(\"L\", baseA.x, baseA.y);  // line to baseA\n        arrowHeadData.push(\"L\", baseB.x, baseB.y);  // line to baseB\n        arrowHeadData.push(\"L\", tip.x,   tip.y  );  // line back to the tip\n        \n        return [pathData, arrowHeadData];\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    coord(x,y) {\n        if(!x) x = 0;\n        if(!y) y = 0;\n        /* \n        *   Limit precision of decimals for SVG rendering.\n        *   otherwise we get really long SVG strings, \n        *   and webkit error messsages like of this sort:\n        *   \"Error: Problem parsing d='<svg string with long dec>'\"\n        */\n        x = Math.round(x * 1000)/1000;\n        y = Math.round(y * 1000)/1000;\n        return {x: x, y: y};\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getLengthOfCubicBezier(C1,C2,C3,C4)\n    {\n        var precision = 10,\n        length    = 0,\n        t,\n        currentPoint,\n        previousPoint;\n        \n        for (var i = 0; i<precision; i++){\n            t = i/precision;\n            currentPoint = this.getPointOnCubicBezier(t, C1,C2,C3,C4);\n            if (i > 0){\n                var xDif = currentPoint.x - previousPoint.x,\n                yDif = currentPoint.y - previousPoint.y;\n                length += Math.sqrt((xDif*xDif) + (yDif*yDif));\n            }\n            previousPoint = currentPoint;\n        }\n        return length;\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getPointOnCubicBezier(percent,C1,C2,C3,C4) {\n        if (percent < 0) percent = 0;\n        if (percent > 1) percent = 1;\n        var pos = new this.coord();\n        pos.x = C1.x*this.B1(percent) + C2.x*this.B2(percent) + C3.x*this.B3(percent) + C4.x*this.B4(percent);\n        pos.y = C1.y*this.B1(percent) + C2.y*this.B2(percent) + C3.y*this.B3(percent) + C4.y*this.B4(percent);\n        return pos;\n    }\n    \n    /**\n     * Note: These functions are from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    B1(t) { return t*t*t; }\n    B2(t) { return 3*t*t*(1-t); }\n    B3(t) { return 3*t*(1-t)*(1-t); }\n    B4(t) { return (1-t)*(1-t)*(1-t); }\n    \n    /**\n     * Evaluate a rule name\n     * @param componentContent the component content\n     * @param conceptMapData the student concept map data\n     * @param ruleName the rule name\n     * @returns whether the rule was satisfied\n     */\n    evaluateRuleByRuleName(componentContent, conceptMapData, ruleName) {\n        \n        // get the rule\n        var rule = this.getRuleByRuleName(componentContent, ruleName);\n        \n        // evaluate the rule\n        var result = this.evaluateRule(conceptMapData, rule);\n        \n        return result;\n    }\n    \n    /**\n     * Evaluate a rule\n     * @param conceptMapData the concept map student data\n     * @param rule the rule object\n     * @returns whether the rule was satisfied\n     */\n    evaluateRule(conceptMapData, rule) {\n        \n        var result = false;\n        \n        if (rule != null) {\n            \n            if (rule.type == 'node') {\n                // this is a node rule\n                \n                // get the node we are looking for\n                var nodeLabel = rule.nodeLabel;\n                \n                // get all the nodes with the given label\n                var nodes = this.getNodesByLabel(conceptMapData, nodeLabel);\n                \n                // get the number of nodes with the given label\n                var nodeCount = nodes.length;\n                \n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n                \n                // the number to compare to\n                var number = rule.number;\n                \n                if (comparison == 'exactly') {\n                    /*\n                     * we are looking for an exact number of nodes with the \n                     * given label\n                     */\n                    if (nodeCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    /*\n                     * we are looking for more than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    /*\n                     * we are looking for less than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount < number) {\n                        result = true;\n                    }\n                }\n                \n            } else if (rule.type == 'link') {\n                // this is a link rule\n                \n                // get the source node label\n                var nodeLabel = rule.nodeLabel;\n                \n                // get the link label\n                var linkLabel = rule.linkLabel;\n                \n                // get the destination node label\n                var otherNodeLabel = rule.otherNodeLabel;\n                \n                // get all the links with the matching labels\n                var links = this.getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel);\n                \n                // get the number of links with the matching labels\n                var linkCount = links.length;\n                \n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n                \n                // the number to compare to\n                var number = rule.number;\n                \n                if (comparison == 'exactly') {\n                    // we are looking for an exact number of links\n                    if (linkCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    // we are looking for more than a certain number of links\n                    if (linkCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    // we are looking for less than a certain number of links\n                    if (linkCount < number) {\n                        result = true;\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get a rule by the rule name\n     * @param componentContent the concept map component content\n     * @param ruleName the rule name\n     * @returns the rule with the given rule name\n     */\n    getRuleByRuleName(componentContent, ruleName) {\n        \n        var rule = null;\n        \n        if (ruleName != null) {\n            \n            // get the rules\n            var rules = componentContent.rules;\n            \n            if (rules != null) {\n                \n                // loop through all the rules\n                for (var r = 0; r < rules.length; r++) {\n                    \n                    // get a rule\n                    var tempRule = rules[r];\n                    \n                    if (tempRule != null) {\n                        \n                        if (ruleName == tempRule.name) {\n                            // we have found the rule with the name we want\n                            rule = tempRule;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return rule;\n    }\n    \n    /**\n     * Get nodes by label\n     * @param conceptMapData the concept map student data\n     * @param label the node label to look for\n     * @returns all the nodes with the given label\n     */\n    getNodesByLabel(conceptMapData, label) {\n        \n        var nodesByLabel = [];\n        \n        if (conceptMapData != null) {\n            \n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    if (node != null) {\n                        \n                        if (label == node.label) {\n                            /*\n                             * we have found a node with the label we are \n                             * looking for\n                             */\n                            nodesByLabel.push(node);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return nodesByLabel;\n    }\n    \n    /**\n     * Get links with the given source node label, link label, and destination\n     * node label\n     * @param conceptMapData the concept map student data\n     * @param nodeLabel the source node label\n     * @param linkLabel the link label\n     * @param otherNodeLabel the destination node label\n     * @returns the links with the given source node label, link label, and \n     * destination node label\n     */\n    getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel) {\n        \n        var resultLinks = [];\n        \n        if (conceptMapData != null) {\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var tempLink = links[l];\n                    \n                    if (tempLink != null) {\n                        \n                        // get the labels\n                        var tempLinkLabel = tempLink.label;\n                        var sourceNodeLabel = tempLink.sourceNodeLabel;\n                        var destinationNodeLabel = tempLink.destinationNodeLabel;\n                        \n                        if (nodeLabel == sourceNodeLabel && \n                            linkLabel == tempLinkLabel && \n                            otherNodeLabel == destinationNodeLabel) {\n                                \n                            // the labels match the ones we are looking for\n                            resultLinks.push(tempLink);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return resultLinks;\n    }\n    \n    /**\n     * Check if any of the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if any of the rules are satisifed\n     * false if none of the rules are satisified\n     */\n    any(componentContent, conceptMapData, args) {\n        \n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n            \n            // get a rule name\n            var ruleName = args[n];\n            \n            // check if the rule is satisifed\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n            \n            if (ruleResult) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Check if all the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if all the rules are satisifed\n     * false if any of the rules are not satisfied\n     */\n    all(componentContent, conceptMapData, args) {\n        var result = true;\n        \n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n            \n            // get a rule name\n            var ruleName = args[n];\n            \n            // check if the rule is satisfied\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n            \n            result = result && ruleResult;\n        }\n        return result;\n    }\n}\n\n\n/**\n * A ConceptMapNode that represents a node in the ConceptMap component\n */\nclass ConceptMapNode {\n    \n    /**\n     * The constructor for creating ConceptMapNodes\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param filePath the path of the image file that represents the node\n     * @param label the label of the node\n     * @param x the x position of the node\n     * @param y the y position of the node\n     * @param width the the width of the node\n     * @param height the height of the node\n     */\n    constructor(ConceptMapService, draw, id, originalId, filePath, label, x, y, width, height) {\n\n        // remember the svg.js draw object so we can draw onto it\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // remember the file path e.g. \"/wise/curriculum/108/assets/Space.png\"\n        this.filePath = filePath;\n        \n        if (this.filePath != null) {\n            // get the file name e.g. \"Space.png\"\n            this.fileName = this.filePath.substring(this.filePath.lastIndexOf('/') + 1);\n        }\n        \n        // remember the label\n        this.label = label;\n        \n        // create the svg image object\n        this.image = this.draw.image(this.filePath, width, height);\n        \n        // remember the width\n        this.width = width;\n        \n        // remember the height\n        this.height = height;\n        \n        // create a group to contain all the elements of this node\n        this.group = this.draw.group();\n        \n        // flag that specifies whether this node is highlighted by the student\n        this.highlighted = false;\n        \n        // the color of the delete button\n        this.deleteButtonColor = 'gray';\n        \n        // create the connector that students will use to create links\n        this.connector = this.createConnector();\n        \n        // create the delete button\n        this.deleteButtonGroup = this.createDeleteButtonGroup();\n        \n        // create the text group\n        this.textGroup = this.createTextGroup();\n        \n        /*\n         * create the border that displays when the node is highighted or\n         * moused over\n         */\n        this.border = this.createBorder();\n        \n        // remember the x and y coordinates\n        this.x = x;\n        this.y = y;\n        \n        // initialize the outgoing and incoming links arrays\n        this.outgoingLinks = [];\n        this.incomingLinks = [];\n        \n        // add all the elements to the group\n        this.group.add(this.border);\n        this.group.add(this.image);\n        this.group.add(this.connector);\n        this.group.add(this.deleteButtonGroup);\n        this.group.add(this.textGroup);\n        \n        // hide the border and delete button\n        this.border.hide();\n        this.deleteButtonGroup.hide();\n        \n        // set the position of the group\n        this.group.x(x);\n        this.group.y(y);\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapNode\n     * @returns a JSON object containing the data of the ConceptMapNode\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.fileName = this.fileName;\n        jsonObject.filePath = this.filePath;\n        jsonObject.label = this.label;\n        jsonObject.x = this.x;\n        jsonObject.y = this.y;\n        jsonObject.width = this.width;\n        jsonObject.height = this.height;\n        \n        jsonObject.outgoingLinks = [];\n        jsonObject.incomingLinks = [];\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            var instanceId = outgoingLink.getId();\n            var originalId = outgoingLink.getOriginalId();\n            var label = outgoingLink.getLabel();\n            \n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n            \n            jsonObject.outgoingLinks.push(tempLinkObject);\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            var incomingLink = this.incomingLinks[il];\n            \n            var instanceId = incomingLink.getId();\n            var originalId = incomingLink.getOriginalId();\n            var label = incomingLink.getLabel();\n            \n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n            \n            jsonObject.incomingLinks.push(tempLinkObject);\n        }\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Create the border that displays when the node is highlighted or\n     * moused over.\n     * @returns the svg rectangle that represents the border\n     */\n    createBorder() {\n        \n        // create the rectangle\n        this.border = this.draw.rect(this.width, this.height);\n        this.border.fill('none');\n        this.border.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        return this.border;\n    }\n    \n    /**\n     * Create the connector that students will use to create links from this\n     * node.\n     * @returns the svg circle that represents the connector\n     */\n    createConnector() {\n        \n        // create the circle\n        var connectorRadius = 10;\n        this.connector = this.draw.circle();\n        this.connector.radius(connectorRadius);\n        this.connector.cx(this.width / 2);\n        this.connector.cy(0);\n        this.connector.fill({ color: '#cccccc', opacity: 0.4 });\n        this.connector.stroke({ color: '#333333', opacity: 0.2 });\n        \n        return this.connector;\n    }\n    \n    /**\n     * Create the delete button. The delete button is a group that contains\n     * a circle and an x.\n     * @returns a group that contains a circle and an x\n     */\n    createDeleteButtonGroup() {\n        \n        // create a group to contain the circle and x for the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButtonCircle = this.draw.circle();\n        this.deleteButtonCircle.radius(deleteButtonRadius);\n        this.deleteButtonCircle.cx(this.width);\n        this.deleteButtonCircle.cy(0);\n        this.deleteButtonCircle.fill({ opacity: 0.0 });\n        this.deleteButtonCircle.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        // create the x by first creating a + and then rotating it 45 degrees\n        \n        // get the top location of the +\n        var topX = 0;\n        var topY = 0 - (deleteButtonRadius * 0.7);\n        \n        // get the bottom location of the +\n        var bottomX = 0;\n        var bottomY = 0 + (deleteButtonRadius * 0.7);\n        \n        // get the left position of the +\n        var leftX = 0 - (deleteButtonRadius * 0.7);\n        var leftY = 0;\n        \n        // get the right position of the +\n        var rightX = 0 + (deleteButtonRadius * 0.7);\n        var rightY = 0;\n        \n        // draw the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        // rotate the + to turn it into an x\n        this.deleteButtonX.transform({ rotation: 45 });\n        \n        // move the x to the upper right of the group\n        this.deleteButtonX.translate(this.width, 0);\n        \n        /*\n         * disable pointer events on the x so that clicks will pass through\n         * and hit the circle. this way we only need to set a listener on the\n         * circle for click events.\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the circle and the x\n        this.deleteButtonGroup.add(this.deleteButtonCircle);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        return this.deleteButtonGroup;\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        // create the text element\n        this.text = this.draw.text(this.label);\n        this.text.attr('x', 5);\n        //this.text.attr('x', 0);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // get the bounding box around the text element\n        var textBBox = this.text.node.getBBox();\n        \n        /*\n         * set the width of the rectangle to be a little larger than the width\n         * of the text element\n         */\n        var width = textBBox.width;\n        this.textRect.attr('width', width + 10);\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        // add the text group to the link group\n        this.group.add(this.textGroup);\n        \n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Get the id of the node\n     * @returns the id of the node\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the group id of the node\n     * @returns the group id of the node\n     */\n    getGroupId() {\n        var groupId = null;\n        \n        if (this.group != null) {\n            // get the id of the group which we will use as the id of the node\n            groupId = this.group.id();\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Get the label\n     * @returns the label of the node\n     */\n    getLabel() {\n        return this.label;\n    }\n    \n    /**\n     * Set the label of the node\n     * @param label the label of the node\n     */\n    setLabel(label) {\n        \n        // remember the label\n        this.label = label;\n        \n        // set the label into the text element\n        this.text.text(label);\n        \n        // get the bounding box around the text element\n        var textBBox = this.text.node.getBBox();\n        \n        /*\n         * set the width of the rectangle to be a little larger than the width\n         * of the text element\n         */\n        var width = textBBox.width;\n        this.textRect.attr('width', width + 10);\n        \n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    cx() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.image.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    cy() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.image.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    connectorCX() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.connector.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    connectorCY() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.connector.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Getter/setter for whether the node is highlighted\n     * @parm value (optional) boolean value that sets the highlighted value\n     * @returns whether the node is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /** \n     * Get the group\n     * @returns the group\n     */\n    getGroup() {\n        return this.group;\n    }\n    \n    /**\n     * Show the delete button group\n     */\n    showDeleteButton() {\n        this.deleteButtonGroup.show();\n    }\n    \n    /**\n     * Hide the delete button group\n     */\n    hideDeleteButton() {\n        this.deleteButtonGroup.hide();\n    }\n    \n    /**\n     * Show the border of the node\n     */\n    showBorder() {\n        this.border.show();\n    }\n    \n    /**\n     * Hide the border of the node\n     */\n    hideBorder() {\n        this.border.hide();\n    }\n    \n    /**\n     * Get the connector of the node\n     */\n    getConnector() {\n        return this.connector;\n    }\n    \n    /**\n     * Get the id of the connector\n     */\n    getConnectorId() {\n        var id = null;\n        \n        if (this.connector != null) {\n            id = this.connector.id();\n        }\n        \n        return id;\n    }\n    \n    /**\n     * Get the x position of the group within the svg\n     * @returns the x position of the group\n     */\n    getGroupX() {\n\n        var x = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the x location of the group\n             */\n            x = this.group.x();\n        }\n        \n        return x;\n    }\n    \n    /**\n     * Get the y position of the group within the svg\n     * @returns the y position of the group\n     */\n    getGroupY() {\n        var y = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the y location of the group\n             */\n            y = this.group.y();\n        }\n        \n        return y;\n    }\n    \n    /**\n     * Get the x position of the image within the svg\n     * @returns the x position of the image\n     */\n    getImageX() {\n        \n        // get the x position of the group\n        var groupX = this.getGroupX();\n        \n        // get the x position of the image relative to the group\n        var imageRelativeX = this.image.x();\n        \n        // add the values together to get the absolute x position of the image\n        var imageX = groupX + imageRelativeX;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            if (bbox != null) {\n                // get the x position of the bounding box on the group\n                var bboxX = bbox.x;\n                \n                // compensate for the shift of the group\n                imageX = imageX - bboxX;\n            }\n        }\n        \n        return imageX;\n    }\n    \n    /**\n     * Get the y position of the image within the svg\n     * @returns the y position of the image\n     */\n    getImageY() {\n        \n        // get the y position of the group\n        var groupY = this.getGroupY();\n        \n        // get the y position of the image relative to the group\n        var imageRelativeY = this.image.y();\n        \n        // add the values together to get the absolute y position of the image\n        var imageY = groupY + imageRelativeY;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            // get the y position of the bounding box on the group\n            var bboxY = bbox.y;\n            \n            // compensate for the shift of the group\n            imageY = imageY - bboxY;\n        }\n        \n        return imageY;\n    }\n    \n    /**\n     * Get the width of the image\n     * @returns the width of th eimage\n     */\n    getImageWidth() {\n        var width = 0;\n        \n        if (this.image != null) {\n            width = this.image.width();\n        }\n        \n        return width\n    }\n    \n    /**\n     * Get the height of the image\n     * @returns the height of the image\n     */\n    getImageHeight() {\n        var height = 0;\n        \n        if (this.image != null) {\n            height = this.image.height();\n        }\n        \n        return height;\n    }\n    \n    /**\n     * Set the mouseover listener for the group\n     * @param nodeMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setNodeMouseOver(nodeMouseOverFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseover(nodeMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the group\n     * @param nodeMouseOutFunction the function to call when the mouse moves\n     * out of the group\n     */\n    setNodeMouseOut(nodeMouseOutFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseout(nodeMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the group\n     * @param nodeMouseDownFunction the function to call when the mouse is \n     * down on the group\n     */\n    setNodeMouseDown(nodeMouseDownFunction) {\n        \n        if (this.group != null) {\n            this.group.mousedown(nodeMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseup listener for the group\n     * @param nodeMouseUpFunction the function to call when the mouse is \n     * released over the group\n     */\n    setNodeMouseUp(nodeMouseUpFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseup(nodeMouseUpFunction);\n        }\n    }\n    \n    /**\n     * Set the click listener for the image\n     * @param nodeMouseClickFunction the function to call when the image is\n     * clicked\n     */\n    setNodeMouseClick(nodeMouseClickFunction) {\n        \n        if (this.group != null) {\n            this.image.click(nodeMouseClickFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the connector\n     * @param connectorMouseDownFunction the function to call when the mouse\n     * is down on the connector\n     */\n    setConnectorMouseDown(connectorMouseDownFunction) {\n        \n        if (this.connector != null) {\n            this.connector.mousedown(connectorMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the delete button\n     * @param deleteButtonMouseDownFunction the function to call when the mouse\n     * is down on the delete button\n     */\n    setDeleteButtonMouseDown(deleteButtonMouseDownFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mousedown(deleteButtonMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseover listener for the delete button\n     * @param deleteButtonMouseOverFunction the function to call when the mouse\n     * is over the delete button\n     */\n    setDeleteButtonMouseOver(deleteButtonMouseOverFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseover(deleteButtonMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the delete button\n     * @param deleteButtonMouseOutFunction the function to call when the mouse\n     * moves out of the delete button\n     */\n    setDeleteButtonMouseOut(deleteButtonMouseOutFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseout(deleteButtonMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the dragmove listener for the group\n     * @param dragMoveFunction the function to call when the group is dragged\n     */\n    setDragMove(dragMoveFunction) {\n        \n        if (this.group != null) {\n            \n            // set a listener for when the node is dragged\n            this.group.on('dragmove', dragMoveFunction);\n        }\n    }\n    \n    /**\n     * Set the x position\n     * @param x the x position\n     */\n    setX(x) {\n        this.x = x;\n        this.group.x(x);\n    }\n    \n    /**\n     * Set the y position\n     * @param y the y position\n     */\n    setY(y) {\n        this.y = y;\n        this.group.y(y);\n    }\n    \n    /**\n     * Add an outgoing link to the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    addOutgoingLink(outgoingLink) {\n        if (outgoingLink != null) {\n            this.outgoingLinks.push(outgoingLink);\n        }\n    }\n    \n    /**\n     * Remove an outgoing link from the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    removeOutgoingLink(outgoingLink) {\n        \n        if (outgoingLink != null) {\n            \n            // loop through all the outgoing links in this node\n            for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var tempOutgoingLink = this.outgoingLinks[ol];\n                \n                if (outgoingLink == tempOutgoingLink) {\n                    // we have found the outgoing link we want to remove\n                    this.outgoingLinks.splice(ol, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the outgoing links\n     * @return the outgoing links\n     */\n    getOutgoingLinks() {\n        return this.outgoingLinks;\n    }\n    \n    /**\n     * Add an incoming link to the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    addIncomingLink(incomingLink) {\n        if (incomingLink != null) {\n            this.incomingLinks.push(incomingLink);\n        }\n    }\n    \n    /**\n     * Remove an incoming link from the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    removeIncomingLink(incomingLink) {\n        \n        if (incomingLink != null) {\n            \n            // loop through the incoming links in the node\n            for (var il = 0; il < this.incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var tempIncomingLink = this.incomingLinks[il];\n                \n                if (incomingLink == tempIncomingLink) {\n                    // we have found the incoming link we want to remove\n                    this.incomingLinks.splice(il, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the incoming links\n     * @return the incoming links\n     */\n    getIncomingLinks() {\n        return this.incomingLinks;\n    }\n    \n    /**\n     * The function that is called when the node is moved\n     * @param event \n     */\n    dragMove(event) {\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // get the x and y coordinates of the center of the image\n        var cx = this.cx();\n        var cy = this.cy();\n        \n        // update the local x, y values of the node for bookkeeping\n        this.x = group.x();\n        this.y = group.y();\n        \n        // get the outgoing links and incoming links\n        var outgoingLinks = this.outgoingLinks;\n        var incomingLinks = this.incomingLinks;\n        \n        if (outgoingLinks != null) {\n            \n            // loop through all the outgoing links\n            for (var ol = 0; ol < outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var outgoingLink = outgoingLinks[ol];\n                \n                // update the x, y coordinate of the tail of the link\n                var x1 = cx;\n                var y1 = cy;\n                \n                // calculate the nearest point to the destination node\n                var nearestPoint = outgoingLink.getNearestPointToDestinationNode(x1, y1);\n                x2 = nearestPoint.x;\n                y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                outgoingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n            \n            // loop through all the incoming links\n            for (var il = 0; il < incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var incomingLink = incomingLinks[il];\n                \n                // reuse the coordinates of the tail of the link\n                var x1 = incomingLink.x1();\n                var y1 = incomingLink.y1();\n                \n                // calculate the nearest point to the source node\n                var nearestPoint = incomingLink.getNearestPointToDestinationNode(x1, y1);\n                var x2 = nearestPoint.x;\n                var y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                incomingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n        }\n        \n        if (this.controller != null) {\n            // handle the student data changing\n            this.controller.studentDataChanged();\n        }\n        \n        // move the group to the front so that it shows up above other elements\n        group.front();\n    }\n    \n    /**\n     * Remove the node from the svg\n     */\n    remove() {\n        \n        // make the group not draggable\n        this.group.draggable(false);\n        \n        // remove the group\n        this.group.remove();\n        \n        // remove the image\n        this.image.remove();\n        \n        // remove the connector\n        this.connector.remove();\n        \n        // remove the delete button\n        this.deleteButtonCircle.remove();\n        this.deleteButtonX.remove();\n        this.deleteButtonGroup.remove();\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            \n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            if (outgoingLink != null) {\n                // remove the outgoing link\n                outgoingLink.remove();\n                \n                /*\n                 * move the counter back one because calling outgoingLink.remove()\n                 * has removed the outgoingLink from the outgoingLinks array\n                 */\n                ol--;\n            }\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            \n            // get an incoming link\n            var incomingLink = this.incomingLinks[il];\n            \n            if (incomingLink != null) {\n                // remove the incoming link\n                incomingLink.remove();\n                \n                /*\n                 * move the counter back one because calling incomingLink.remove()\n                 * has removed the incomingLink from the incomingLinks array\n                 */\n                il--;\n            }\n        }\n    }\n}\n\n/**\n * A ConceptMapLink that represents a link in the ConceptMap component\n */\nclass ConceptMapLink {\n    \n    /**\n     * The constructor to create a ConceptMapLink object\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param id the instance id of the link\n     * @param originalId the original authored id of the link\n     * @param sourceNode the source ConceptMapNode\n     * @param destinationNode the destination ConceptMapNode\n     * @param label the text label\n     * @param color the color of the link\n     * @param curvature the curvature of the link\n     * @param startCurveUp whether the start of the link curves up\n     * @param endCurveUp whether the end of the link curves up\n     */\n    constructor(ConceptMapService, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp) {\n        \n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n        \n        // remember the svg.js draw object\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // the arrow head of the link\n        this.head = null;\n        \n        // the line of the link\n        this.path = null;\n        \n        // set the color of the link\n        this.color = color;\n        \n        if (this.color == null) {\n            // if no color is specified, use a default color\n            this.color = 'blue';\n        }\n        \n        // whether the link is highlighted\n        this.highlighted = false;\n        \n        // create a group to contain the path and head\n        this.group = this.draw.group();\n        \n        // where to place the text of the link along the line\n        this.textPercentageLocationOnLink = 0.6\n        \n        // remember the source node\n        this.sourceNode = sourceNode;\n        \n        /*\n         * used to remember the destination node later after the destination\n         * node has been chosen\n         */\n        this.destinationNode = destinationNode;\n        \n        // remember the curvature\n        this.curvature = curvature;\n        \n        // set whether the link curves up or down\n        this.startCurveUp = startCurveUp;\n        this.endCurveUp = endCurveUp;\n        \n        if (this.startCurveUp == null || this.endCurveUp == null) {\n            /*\n             * start and end curve up have not been specified so we will set\n             * it at random\n             */\n            \n            // choose a random integer 0 or 1\n            var randInt = Math.floor(Math.random() * 2);\n            \n            if (randInt == 0) {\n                // set the link to curve down\n                this.startCurveUp = false;\n                this.endCurveUp = false;\n            } else {\n                // set the link to curve up\n                this.startCurveUp = true;\n                this.endCurveUp = true;\n            }\n        }\n        \n        // create a curved link\n        this.curvedLink = true;\n        \n        // initialize the coordinates of both ends of the link\n        var x1 = this.sourceNode.cx();\n        var y1 = this.sourceNode.cy();\n        var x2 = x1;\n        var y2 = y1;\n        \n        if (this.destinationNode != null) {\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            x2 = nearestPoint.x;\n            y2 = nearestPoint.y;\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n        }\n        \n        if (this.curvedLink) {\n            // create a curved link\n            \n            // calculate the curved line in svg\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2);\n            \n            // get the line\n            var tail = arrowPathArraysObject[0];\n            \n            // get the arrow head\n            var head = arrowPathArraysObject[1];\n            \n            // draw the head and tail\n            this.head = this.draw.path(head.toString());\n            this.path = this.draw.path(tail.toString());\n        } else {\n            // create a straight line\n            this.path = this.draw.path('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // set the style of the link\n        this.path.attr('stroke', this.color);\n        this.path.attr('stroke-width', 3);\n        this.path.attr('fill', 'transparent');\n        this.head.attr('stroke', this.color);\n        this.head.attr('fill', this.color);\n        this.head.attr('pointer-events', 'none');\n        \n        /*\n         * remember the x and y coordinates of the source and destination\n         * so that we can look them up easily later\n         */\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        // add the tail and head to the group\n        this.group.add(this.path);\n        this.group.add(this.head);\n        \n        // create the text group for the link\n        this.createTextGroup();\n        \n        // text that describes the type of link chosen by the student\n        this.setLabel(label);\n        \n        if (this.label == null || this.label == '') {\n            // there is no label so we will hide the text group\n            this.hideTextGroup();\n        } else {\n            // there is a label so we will show the text group\n            this.showTextGroup();\n        }\n        \n        // create the delete button group\n        this.createDeleteButtonGroup();\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapLink\n     * @returns a JSON object containing the data of the ConceptMapLink\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.color = this.color;\n        jsonObject.label = this.label;\n        jsonObject.curvature = this.curvature;\n        jsonObject.startCurveUp = this.startCurveUp;\n        jsonObject.endCurveUp = this.endCurveUp;\n        jsonObject.sourceNodeOriginalId = this.sourceNode.getOriginalId();\n        jsonObject.sourceNodeInstanceId = this.sourceNode.getId();\n        jsonObject.sourceNodeLabel = this.sourceNode.getLabel();\n        jsonObject.destinationNodeOriginalId = this.destinationNode.getOriginalId();\n        jsonObject.destinationNodeInstanceId = this.destinationNode.getId();\n        jsonObject.destinationNodeLabel = this.destinationNode.getLabel();\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Get the id of the link\n     * @returns the id of the link\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the id of the group\n     * @returns the id of the group\n     */\n    getGroupId() {\n        return this.group.id();\n    }\n    \n    /**\n     * Get the x1 value\n     * @returns the x coordinate of the source of the link\n     */\n    x1() {\n        return this.path.attr('x1');\n    }\n    \n    /**\n     * Get the y1 value\n     * @returns the y coordinate of the source of the link\n     */\n    y1() {\n        return this.path.attr('y1');\n    }\n    \n    /**\n     * Get the x2 value\n     * @returns the x coordinate of the destination of the link\n     */\n    x2() {\n        return this.path.attr('x2');\n    }\n    \n    /**\n     * Get the y2 value\n     * @returns the y coordinate of the destination of the link\n     */\n    y2() {\n        return this.path.attr('y2');\n    }\n    \n    /**\n     * Set the original id\n     * @param originalId the original id\n     */\n    setOriginalId(originalId) {\n        this.originalId = originalId;\n    }\n    \n    /**\n     * Get the label\n     * @returns the label\n     */\n    getLabel() {\n        return this.label;\n    }\n    \n    /**\n     * Getter/setter for the highlighted value\n     * @param value (optional) the highlighted value\n     * @returns whether the link is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /**\n     * Update the coordinates of the link\n     * @param x1 (optional) the x position of the source\n     * @param y1 (optional) the y position of the source\n     * @param x2 (optional) the x position of the destination\n     * @param y2 (optional) the y position of the destination\n     * @param isDragging whether the link is currently being dragged\n     */\n    updateCoordinates(x1, y1, x2, y2, isDragging) {\n        var array = this.path.array();\n        \n        if (this.curvedLink) {\n            // draw a curved link\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // calculate the line\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2, isDragging);\n            \n            // get the svg tail\n            var tail = arrowPathArraysObject[0];\n            \n            // get the svg head\n            var head = arrowPathArraysObject[1];\n            \n            // re-plot the head and path\n            this.head.plot(head.toString());\n            this.path.plot(tail.toString());\n        } else {\n            // draw a straight line\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // re-plot the line\n            this.path.plot('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // update the coordinate values\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        if (this.deleteButtonGroup != null) {\n            // update the location of the delete button\n            var deleteButtonLocation = this.getDeleteButtonLocation();\n            this.deleteButtonGroup.x(deleteButtonLocation.x);\n            this.deleteButtonGroup.y(deleteButtonLocation.y);\n        }\n        \n        if (this.textGroup != null) {\n            // update the location of the text group\n            \n            // get the length of the line\n            var totalLength = this.path.node.getTotalLength();\n            \n            // get the coordinate of a point somewhere in the middel of the line\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            \n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n    \n    /**\n     * Calculate the curved line\n     * @param x1 the x coordinate of the source\n     * @param y1 the y coordinate of the source\n     * @param x2 the x coordinate of the destination\n     * @param y2 the y coordinate of the destination\n     * @param isDragging whether the line is currently being dragged\n     * @returns an array that contains the svg objects for the arrow head and line\n     */\n    calculateCurvedLine(x1, y1, x2, y2, isDragging) {\n        \n        var startx = x1;\n        var starty = y1;\n        var endx = x2;\n        var endy = y2;\n        var startCurveUp = true;\n        var endCurveUp = true;\n        var len = 15;\n        var angle = 45;\n        var curvature = 0.5;\n        var nodeRadius = 10;\n        \n        // set the amount of curvature of the line\n        curvature = this.curvature;\n        \n        // whether the link should curve up or down\n        startCurveUp = this.startCurveUp;\n        endCurveUp = this.endCurveUp;\n\n        // calculate the svg objects for the arrow head and line\n        var arrowPathArraysObject = this.ConceptMapService.arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius);\n\n        return arrowPathArraysObject;\n    }\n    \n    /**\n     * Set the destination node\n     * @param destinationNode the destination ConceptMapNode object\n     */\n    setDestination(destinationNode) {\n        \n        if (destinationNode != null) {\n            \n            // get x and y of the tail\n            var x1 = this.path.attr('x1');\n            var y1 = this.path.attr('y1');\n            \n            // remember the destination node\n            this.destinationNode = destinationNode;\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            var x2 = nearestPoint.x;\n            var y2 = nearestPoint.y;\n            \n            // update the coordinates of the link\n            var isDragging = false;\n            this.updateCoordinates(x1, y1, x2, y2, isDragging);\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n            \n            // hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Get the nearest point to the destination node from a given x, y point\n     * @param x the x value of the source point\n     * @param y the y value of the source point\n     * @returns an object containing an x and y field\n     */\n    getNearestPointToDestinationNode(x, y) {\n        \n        // get the coordinates of the upper left corner of the image\n        var rectMinX = this.destinationNode.getImageX();\n        var rectMinY = this.destinationNode.getImageY();\n        \n        // get the width and height of the image\n        var width = this.destinationNode.getImageWidth();\n        var height = this.destinationNode.getImageHeight();\n        \n        /*\n        var destinationNodeGroup = this.destinationNode.getGroup();\n        var destinationNodeGroupBBox = destinationNodeGroup.bbox();\n        \n        rectMinX = this.destinationNode.getGroupX();\n        rectMinY = this.destinationNode.getGroupY();\n        \n        width = destinationNodeGroupBBox.width;\n        height = destinationNodeGroupBBox.height;\n        */\n        \n        if (x == null && y == null) {\n            // get the coordinates of the source if x and y were not provided\n            x = this.path.attr('x1');\n            y = this.path.attr('y1');\n        }\n        \n        /*\n         * find the nearest point from the source to anywhere along the \n         * rectangular perimeter of the destination image\n         */\n        var point = this.getNearestPointInPerimeter(rectMinX, rectMinY, width, height, x, y);\n        \n        return point;\n    }\n    \n    /**\n     * Get the nearest point on a rectangle from a source point\n     * @param l the upper left x value of the rectangle\n     * @param t the upper left y value of the rectangle\n     * @param w the width of the rectangle\n     * @param h the height of the rectangle\n     * @param x the source point x value\n     * @param y the source point y value\n     * @returns the point on the rectangle that is closest to the \n     */\n    getNearestPointInPerimeter(l, t, w, h, x, y) {\n        var r = l + w;\n        var b = t + h;\n        \n        var x = this.clamp(x, l , r);\n        var y = this.clamp(y, t, b);\n        \n        var dl = Math.abs(x - l);\n        var dr = Math.abs(x - r);\n        var dt = Math.abs(y - t);\n        var db = Math.abs(y - b);\n        \n        var m = Math.min(dl, dr, dt, db);\n        \n        var point = {};\n        \n        if (m == dt) {\n            point.x = x;\n            point.y = t;\n        } else if (m == db) {\n            point.x = x;\n            point.y = b;\n        } else if (m == dl) {\n            point.x = l;\n            point.y = y;\n        } else {\n            point.x = r;\n            point.y = y;\n        }\n        \n        return point;\n    }\n    \n    /**\n     * Helper function for getNearestPointInPerimeter\n     */\n    clamp(x, lower, upper) {\n        return Math.max(lower, Math.min(upper, x));\n    }\n    \n    /**\n     * Set the color of the link\n     * @param color the color\n     */\n    setColor(color) {\n        \n        if (color != null) {\n            // set the color styling\n            this.color = color;\n            this.path.attr('stroke', this.color);\n            this.head.attr('stroke', this.color);\n            this.head.attr('fill', this.color);\n            this.deleteButton.attr('stroke', this.color);\n            this.deleteButtonX.attr('stroke', this.color);\n        }\n    }\n    \n    /**\n     * Set the label\n     * @param label the text label\n     */\n    setLabel(label) {\n        \n        if (label != null) {\n            \n            // remember the label\n            this.label = label;\n            \n            // set the text into the text element\n            this.text.text(label);\n            \n            // reset the width to adjust to the new text length\n            var textBBox = this.text.node.getBBox();\n            var width = textBBox.width;\n            this.textRect.attr('width', width + 10);\n            \n            // recalculate the position of the svg text object\n            var totalLength = this.path.node.getTotalLength();\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n            \n            // show the text group now that it has a label\n            this.showTextGroup();\n        }\n    }\n    \n    /**\n     * Connect a link the its source and destination nodes\n     */\n    connectLinkToNodes() {\n        \n        if (this.sourceNode != null && this.destinationNode != null) {\n            \n            // add the link to the outgoing links of its source node\n            this.sourceNode.addOutgoingLink(this);\n            \n            // add the link to the incoming links of its destination node\n            this.destinationNode.addIncomingLink(this);\n        }\n    }\n    \n    /**\n     * Create the delete button for the link\n     */\n    createDeleteButtonGroup() {\n        // create a group to contain the elements of the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        /*\n         * create an invisible circle that is placed behind the delete button\n         * and has a larger radius than the delete button. this is used for\n         * mouse over purposes so that we can keep the delete button visible\n         * when the mouse is around the area of the delete button\n         */\n        var invisibleCircleRadius = 30;\n        this.invisibleCircle = this.draw.circle();\n        this.invisibleCircle.radius(invisibleCircleRadius);\n        this.invisibleCircle.fill({ opacity: 0.0});\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButton = this.draw.circle();\n        this.deleteButton.radius(deleteButtonRadius);\n        this.deleteButton.fill({ opacity: 0.0 });\n        this.deleteButton.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n        /*\n         * create the x part of the delete button by creating a + and then\n         * rotating it 45 degrees\n         */\n        \n        // get the coordinate of the center of the delete button\n        var deleteButtonMidpointX = this.deleteButton.cx();\n        var deleteButtonMidpointY = this.deleteButton.cy();\n        \n        // get the coordinates of the top of the +\n        var topX = deleteButtonMidpointX;\n        var topY = deleteButtonMidpointY - (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the bottom of the +\n        var bottomX = deleteButtonMidpointX;\n        var bottomY = deleteButtonMidpointY + (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the left of the +\n        var leftX = deleteButtonMidpointX - (deleteButtonRadius * 0.7);\n        var leftY = deleteButtonMidpointY;\n        \n        // get the coordinates of the right of the +\n        var rightX = deleteButtonMidpointX + (deleteButtonRadius * 0.7);\n        var rightY = deleteButtonMidpointY;\n        \n        // create the path for the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        \n        // draw the path\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: this.color, opacity: 1.0, width: 2 });\n        \n        /// rotate the + to create the x\n        this.deleteButtonX.rotate(45);\n        \n        /*\n         * disable pointer events on the x so that we only need to set a \n         * mouse listener on the circle\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the invisible circle, regular circle, and x to the group\n        this.deleteButtonGroup.add(this.invisibleCircle);\n        this.deleteButtonGroup.add(this.deleteButton);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        // set the location of the delete button group\n        var location = this.getDeleteButtonLocation();\n        var x = location.x;\n        var y = location.y;\n        this.deleteButtonGroup.x(x);\n        this.deleteButtonGroup.y(y);\n        \n        // set the listener for when the mouse is over the group\n        this.deleteButtonGroup.mouseover((event) => {\n            this.deleteButtonGroupMouseOver(event);\n        });\n        \n        // set the listener for when the mouse moves out of the group\n        this.deleteButtonGroup.mouseout((event) => {\n            this.deleteButtonGroupMouseOut(event);\n        });\n        \n        // add the delete button group to the link group\n        this.group.add(this.deleteButtonGroup);\n    }\n    \n    /**\n     * Called when the mouse is over the delete button group\n     * @param event the mouseover event\n     */\n    deleteButtonGroupMouseOver(event) {\n        // show the delete button\n        this.showDeleteButton();\n    }\n    \n    /**\n     * Called when the mouse leaves the delete button group\n     * @param event the mouseout event\n     */\n    deleteButtonGroupMouseOut(event) {\n        if (!this.highlighted) {\n            // the link is not highlighted so we will hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the delete button is clicked\n     * @param deleteButtonClickedFunction the function to call when the delete\n     * button is clicked\n     */\n    setDeleteButtonClicked(deleteButtonClickedFunction) {\n        // listen for the click event on the delete button to call the function\n        this.deleteButton.click(deleteButtonClickedFunction);\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the group\n     * @param linkMouseDownFunction the function to call when the mouse is\n     * clicked down on the group\n     */\n    setLinkMouseDown(linkMouseDownFunction) {\n        if (this.group != null) {\n            /*\n             * listen for the mousedown event on the group to call\n             * the function\n             */\n            this.group.mousedown(linkMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over the group\n     * @param linkMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setLinkMouseOver(linkMouseOverFunction) {\n        if (this.group != null) {\n            // listen for the mouseover event on the group to call the function\n            this.group.mouseover(linkMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse leaves the group\n     * @param linkMouseOutFunction the function to call when the mouse leaves\n     * the group\n     */\n    setLinkMouseOut(linkMouseOutFunction) {\n        if (this.group != null) {\n            // listen for the mouseout event on the group to call the function\n            this.group.mouseout(linkMouseOutFunction);\n        }\n    }\n    \n    /**\n    * Calculate the location of the delete button for the link\n    *\n    * Note: This function and the associated functions that are called by this\n    * function are taken from the Concord MySystem github project.\n    * https://github.com/concord-consortium/mysystem_sc\n    * The code is found in the _setRemoveButtonLocation function in the link.js file.\n    * mysystem_sc/apps/my_system/views/link.js\n    */\n    getDeleteButtonLocation() {\n        //var line = raphaelObject.items[2];\n        \n        var line = this.path.node;\n        var distanceAlongLine = 35;\n        var distanceAlongNormal = 18;\n        var len, p1, p2, scale, dx, dy, x, y, occluded;\n        \n        /*\n        var link = this.get('content');\n        if (!link.isComplete()) return;\n        if (line.attr('path').length < 1) return;     // this can happen after our content is destroyed\n        */\n        \n        len = line.getTotalLength();\n        p2  = line.getPointAtLength(len);\n        \n        if (len > 50) {\n            p1 = line.getPointAtLength(len - distanceAlongLine);\n            \n            dx = p2.x - p1.x;\n            dy = p2.y - p1.y;\n            scale = distanceAlongNormal / distanceAlongLine * (dx > 0 ? 1 : -1);\n            \n            x = p1.x + scale * dy;\n            y = p1.y - scale * dx;\n            //occluded = NO;\n        }\n        else {\n            x = 0;\n            y = 0;\n            //occluded = YES;\n        }\n        \n        /*\n        this.set('removeButtonX', x);\n        this.set('removeButtonY', y);\n        this.set('isRemoveButtonOccluded', occluded);\n        */\n        \n        var location = {};\n        location.x = x;\n        location.y = y;\n        \n        return location;\n    }\n    \n    /**\n     * Show the delete button\n     */\n    showDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the delete button\n     */\n    hideDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.hide();\n        }\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        // create the text element\n        this.text = this.draw.text(\"\");\n        this.text.attr('x', 5);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // get the bounding box around the text element\n        var textBBox = this.text.node.getBBox();\n        \n        /*\n         * set the width of the rectangle to be a little larger than the width\n         * of the text element\n         */\n        var width = textBBox.width;\n        this.textRect.attr('width', width + 10);\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        // set the location of the text to be somewhere along the line of the link\n        var totalLength = this.path.node.getTotalLength();\n        var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n        this.textGroup.cx(midPoint.x);\n        this.textGroup.cy(midPoint.y);\n        \n        // add the text group to the link group\n        this.group.add(this.textGroup);\n        \n        // hide the text group until the student has chosen a link type\n        this.textGroup.hide();\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Show the text group\n     */\n    showTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the text group\n     */\n    hideTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.hide();\n        }\n    }\n    \n    /**\n     * Remove all the references to the link and also remove all the elements\n     * from the svg\n     */\n    remove() {\n        \n        if (this.sourceNode != null) {\n            // remove the link from the source node's outgoing links\n            this.sourceNode.removeOutgoingLink(this);\n        }\n        \n        if (this.destinationNode != null) {\n            // remove the link from the destination node's incoming links\n            this.destinationNode.removeIncomingLink(this);\n        }\n        \n        if (this.path != null) {\n            // remove the line\n            this.path.remove();\n        }\n        \n        if (this.head != null) {\n            // remove the arrow head\n            this.head.remove();\n        }\n        \n        if (this.deleteButtonGroup != null) {\n            // remove the delete button group\n            this.deleteButtonGroup.remove();\n        }\n        \n        if (this.textGroup != null) {\n            // remove the text group\n            this.textGroup.remove();\n        }\n        \n        if (this.group != null) {\n            // remove the link group\n            this.group.remove();\n        }\n    }\n}\n\n\nConceptMapService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapService;\n"]}
=======
{"version":3,"sources":["conceptMapService.es6"],"names":[],"mappings":"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","file":"conceptMapService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass ConceptMapService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a ConceptMap component object\n     * @returns a new ConceptMap component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'ConceptMap';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = false;\n        return component;\n    }\n\n    /**\n     * Copies a ConceptMap component object\n     * @returns a copied ConceptMap component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.starterSentence = componentToCopy.starterSentence;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        return component;\n    }\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'ConceptMap') {\n                // the other component is an ConceptMap component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.response) {\n                            // there is a response so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.response) {\n                        // there is a response so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Create an instance of the ConceptMapNode class\n     * @param draw the svg.js draw object\n     * @param id the node id\n     * @param filePath the file path of the image\n     * @param label the label of the node\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param width the width of the image\n     * @param height the height of the image\n     * @param a ConceptMapNode\n     */\n    newConceptMapNode(draw, id, originalId, filePath, label, x, y, width, height) {\n        return new ConceptMapNode(this, draw, id, originalId, filePath, label, x, y, width, height);\n    }\n    \n    /**\n     * Create an instance of the ConceptMapLink class\n     * @param draw the svg.js draw object\n     * @param id the link id\n     * @param node the source ConceptMapNode that the link is coming out of\n     * @param x the x position of the tail\n     * @param y the y position of the tail\n     * @returns a ConceptMapLink\n     */\n    newConceptMapLink(draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown) {\n        return new ConceptMapLink(this, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown);\n    }\n    \n    /**\n     * Get the slope of the line between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the slope of the line or null if the slope is infinite\n     */\n    getSlope(x1, y1, x2, y2) {\n        \n        var slope = null;\n        \n        if ((x2 - x1) == 0) {\n            // the slope is infinite so we will return null\n            slope = null;\n        } else {\n            // calculate the slope\n            slope = (y2 - y1) / (x2 - x1);\n        }\n        \n        return slope;\n    }\n    \n    /**\n     * Calculate the euclidean distance between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the distance between the two points\n     */\n    calculateDistance(x1, y1, x2, y2) {\n        \n        // calculate the distance\n        var distance = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n        \n        return distance;\n    }\n    \n    /**\n    \n    Returns an array representation of the path elements for an arrow\n    \n    First we calculate a simple curve for the tail.\n    \n    Then we pick a point on that curve to use as the base-center of the arrow head, \n    then calculate the position of that triangle based on the angle between that \n    point and the tip.\n  \n    @params startx {Number} X-coordinate of the start point\n    @params starty {Number} Y-coordinate of the start point\n    @params endx {Number} X-coordinate of the end point\n    @params endy {Number} Y-coordinate of the end point\n    @params len {Number} Length of the \"tip\" of the arrowhead\n    @params angle {Number} Angle in degrees \n      between the line and each wing of the arrowhead. \n      Should be less than 90.\n\n    Note: This function and the associated functions that are called by this\n    function are taken from the Concord MySystem github project.\n    https://github.com/concord-consortium/mysystem_sc\n    The code is found in the arrow_drawing.js file.\n    mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n    \n    **/\n    arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius) { \n        \n        if (startx === endx && starty === endy){\n            return [[\"\"],[\"\"]];\n        }   \n        \n        var start = new this.coord(startx, starty),\n        tip = new this.coord(endx, endy),\n        pathData   = [],\n        arrowHeadData = [];\n        \n        // calculate control points c2 and c3\n        var curveDistance = (tip.x - start.x) * curvature,\n        startYCurveDistance = (curveDistance === 0 ? 1 : Math.max(Math.min(curveDistance, 100), -100)),\n        endYCurveDistance = startYCurveDistance,\n        startUp = startCurveUp ? 1 : -1,\n        endUp = endCurveUp ? 1 : -1;\n        startYCurveDistance = (startYCurveDistance * startUp > 0) ? startYCurveDistance : startYCurveDistance * -1;\n        endYCurveDistance = (endYCurveDistance * endUp > 0) ? endYCurveDistance : endYCurveDistance * -1;\n        var c2 = new this.coord(start.x+(curveDistance/2), start.y-startYCurveDistance),\n        c3 = new this.coord(tip.x-(curveDistance/2), tip.y-endYCurveDistance),\n        cDistance = Math.sqrt(Math.pow((curveDistance/2),2) + Math.pow(startYCurveDistance,2)),\n        perimX = nodeRadius*(curveDistance/2)/cDistance, \n        perimYstart = nodeRadius*startYCurveDistance/cDistance,\n        perimYend = nodeRadius*endYCurveDistance/cDistance;\n        \n        // update tip\n        tip = new this.coord(tip.x - perimX, tip.y - perimYend);\n        \n        // draw arrow path\n        \n        pathData.push(\"M\", start.x + perimX, start.y - perimYstart);  // move to start of line\n        pathData.push(\"C\", c2.x, c2.y, c3.x, c3.y, tip.x, tip.y); // curve line to the tip\n        \n        // draw arrow head\n        var percLengthOfHead = len / this.getLengthOfCubicBezier(start, c2, c3, tip),\n        centerBaseOfHead = this.getPointOnCubicBezier(percLengthOfHead, start, c2, c3, tip),\n        theta  = Math.atan2((tip.y-centerBaseOfHead.y),(tip.x-centerBaseOfHead.x)),\n        baseAngleA = theta + angle * Math.PI/180,\n        baseAngleB = theta - angle * Math.PI/180,\n        baseA      = new this.coord(tip.x - len * Math.cos(baseAngleA), tip.y - len * Math.sin(baseAngleA)),\n        baseB      = new this.coord(tip.x - len * Math.cos(baseAngleB), tip.y - len * Math.sin(baseAngleB));\n        \n        arrowHeadData.push(\"M\", tip.x, tip.y);\n        arrowHeadData.push(\"L\", baseA.x, baseA.y);  // line to baseA\n        arrowHeadData.push(\"L\", baseB.x, baseB.y);  // line to baseB\n        arrowHeadData.push(\"L\", tip.x,   tip.y  );  // line back to the tip\n        \n        return [pathData, arrowHeadData];\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    coord(x,y) {\n        if(!x) x = 0;\n        if(!y) y = 0;\n        /* \n        *   Limit precision of decimals for SVG rendering.\n        *   otherwise we get really long SVG strings, \n        *   and webkit error messsages like of this sort:\n        *   \"Error: Problem parsing d='<svg string with long dec>'\"\n        */\n        x = Math.round(x * 1000)/1000;\n        y = Math.round(y * 1000)/1000;\n        return {x: x, y: y};\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getLengthOfCubicBezier(C1,C2,C3,C4)\n    {\n        var precision = 10,\n        length    = 0,\n        t,\n        currentPoint,\n        previousPoint;\n        \n        for (var i = 0; i<precision; i++){\n            t = i/precision;\n            currentPoint = this.getPointOnCubicBezier(t, C1,C2,C3,C4);\n            if (i > 0){\n                var xDif = currentPoint.x - previousPoint.x,\n                yDif = currentPoint.y - previousPoint.y;\n                length += Math.sqrt((xDif*xDif) + (yDif*yDif));\n            }\n            previousPoint = currentPoint;\n        }\n        return length;\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getPointOnCubicBezier(percent,C1,C2,C3,C4) {\n        if (percent < 0) percent = 0;\n        if (percent > 1) percent = 1;\n        var pos = new this.coord();\n        pos.x = C1.x*this.B1(percent) + C2.x*this.B2(percent) + C3.x*this.B3(percent) + C4.x*this.B4(percent);\n        pos.y = C1.y*this.B1(percent) + C2.y*this.B2(percent) + C3.y*this.B3(percent) + C4.y*this.B4(percent);\n        return pos;\n    }\n    \n    /**\n     * Note: These functions are from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    B1(t) { return t*t*t; }\n    B2(t) { return 3*t*t*(1-t); }\n    B3(t) { return 3*t*(1-t)*(1-t); }\n    B4(t) { return (1-t)*(1-t)*(1-t); }\n}\n\n\n/**\n * A ConceptMapNode that represents a node in the ConceptMap component\n */\nclass ConceptMapNode {\n    \n    /**\n     * The constructor for creating ConceptMapNodes\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param filePath the path of the image file that represents the node\n     * @param label the label of the node\n     * @param x the x position of the node\n     * @param y the y position of the node\n     * @param width the the width of the node\n     * @param height the height of the node\n     */\n    constructor(ConceptMapService, draw, id, originalId, filePath, label, x, y, width, height) {\n\n        // remember the svg.js draw object so we can draw onto it\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // remember the file path e.g. \"/wise/curriculum/108/assets/Space.png\"\n        this.filePath = filePath;\n        \n        if (this.filePath != null) {\n            // get the file name e.g. \"Space.png\"\n            this.fileName = this.filePath.substring(this.filePath.lastIndexOf('/') + 1);\n        }\n        \n        // remember the label\n        this.label = label;\n        \n        // create the svg image object\n        this.image = this.draw.image(this.filePath, width, height);\n        \n        // remember the width\n        this.width = width;\n        \n        // remember the height\n        this.height = height;\n        \n        // create a group to contain all the elements of this node\n        this.group = this.draw.group();\n        \n        // flag that specifies whether this node is highlighted by the student\n        this.highlighted = false;\n        \n        // the color of the delete button\n        this.deleteButtonColor = 'gray';\n        \n        // create the connector that students will use to create links\n        this.connector = this.createConnector();\n        \n        // create the delete button\n        this.deleteButtonGroup = this.createDeleteButtonGroup();\n        \n        // create the text group\n        this.textGroup = this.createTextGroup();\n        \n        /*\n         * create the border that displays when the node is highighted or\n         * moused over\n         */\n        this.border = this.createBorder();\n        \n        // remember the x and y coordinates\n        this.x = x;\n        this.y = y;\n        \n        // initialize the outgoing and incoming links arrays\n        this.outgoingLinks = [];\n        this.incomingLinks = [];\n        \n        // add all the elements to the group\n        this.group.add(this.border);\n        this.group.add(this.image);\n        this.group.add(this.connector);\n        this.group.add(this.deleteButtonGroup);\n        this.group.add(this.textGroup);\n        \n        // hide the border and delete button\n        this.border.hide();\n        this.deleteButtonGroup.hide();\n        \n        // set the position of the group\n        this.group.x(x);\n        this.group.y(y);\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapNode\n     * @returns a JSON object containing the data of the ConceptMapNode\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.fileName = this.fileName;\n        jsonObject.filePath = this.filePath;\n        jsonObject.label = this.label;\n        jsonObject.x = this.x;\n        jsonObject.y = this.y;\n        jsonObject.width = this.width;\n        jsonObject.height = this.height;\n        \n        jsonObject.outgoingLinks = [];\n        jsonObject.incomingLinks = [];\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            var instanceId = outgoingLink.getId();\n            var originalId = outgoingLink.getOriginalId();\n            \n            /*\n             * create an object containing the instance id and original id\n             * of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            \n            jsonObject.outgoingLinks.push(tempLinkObject);\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            var incomingLink = this.incomingLinks[il];\n            \n            var instanceId = incomingLink.getId();\n            var originalId = incomingLink.getOriginalId();\n            \n            /*\n             * create an object containing the instance id and original id\n             * of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            \n            jsonObject.incomingLinks.push(tempLinkObject);\n        }\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Create the border that displays when the node is highlighted or\n     * moused over.\n     * @returns the svg rectangle that represents the border\n     */\n    createBorder() {\n        \n        // create the rectangle\n        this.border = this.draw.rect(this.width, this.height);\n        this.border.fill('none');\n        this.border.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        return this.border;\n    }\n    \n    /**\n     * Create the connector that students will use to create links from this\n     * node.\n     * @returns the svg circle that represents the connector\n     */\n    createConnector() {\n        \n        // create the circle\n        var connectorRadius = 10;\n        this.connector = this.draw.circle();\n        this.connector.radius(connectorRadius);\n        this.connector.cx(this.width / 2);\n        this.connector.cy(0);\n        this.connector.fill({ color: '#cccccc', opacity: 0.4 });\n        this.connector.stroke({ color: '#333333', opacity: 0.2 });\n        \n        return this.connector;\n    }\n    \n    /**\n     * Create the delete button. The delete button is a group that contains\n     * a circle and an x.\n     * @returns a group that contains a circle and an x\n     */\n    createDeleteButtonGroup() {\n        \n        // create a group to contain the circle and x for the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButtonCircle = this.draw.circle();\n        this.deleteButtonCircle.radius(deleteButtonRadius);\n        this.deleteButtonCircle.cx(this.width);\n        this.deleteButtonCircle.cy(0);\n        this.deleteButtonCircle.fill({ opacity: 0.0 });\n        this.deleteButtonCircle.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        // create the x by first creating a + and then rotating it 45 degrees\n        \n        // get the top location of the +\n        var topX = 0;\n        var topY = 0 - (deleteButtonRadius * 0.7);\n        \n        // get the bottom location of the +\n        var bottomX = 0;\n        var bottomY = 0 + (deleteButtonRadius * 0.7);\n        \n        // get the left position of the +\n        var leftX = 0 - (deleteButtonRadius * 0.7);\n        var leftY = 0;\n        \n        // get the right position of the +\n        var rightX = 0 + (deleteButtonRadius * 0.7);\n        var rightY = 0;\n        \n        // draw the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        // rotate the + to turn it into an x\n        this.deleteButtonX.transform({ rotation: 45 });\n        \n        // move the x to the upper right of the group\n        this.deleteButtonX.translate(this.width, 0);\n        \n        /*\n         * disable pointer events on the x so that clicks will pass through\n         * and hit the circle. this way we only need to set a listener on the\n         * circle for click events.\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the circle and the x\n        this.deleteButtonGroup.add(this.deleteButtonCircle);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        return this.deleteButtonGroup;\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        // create the text element\n        this.text = this.draw.text(this.label);\n        this.text.attr('x', 5);\n        //this.text.attr('x', 0);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // get the bounding box around the text element\n        var textBBox = this.text.node.getBBox();\n        \n        /*\n         * set the width of the rectangle to be a little larger than the width\n         * of the text element\n         */\n        var width = textBBox.width;\n        this.textRect.attr('width', width + 10);\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        // get the x and y position\n        var x = this.cx();\n        var y = this.cy() + (this.height / 2);\n        \n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n        \n        // add the text group to the link group\n        this.group.add(this.textGroup);\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Get the id of the node\n     * @returns the id of the node\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the group id of the node\n     * @returns the group id of the node\n     */\n    getGroupId() {\n        var groupId = null;\n        \n        if (this.group != null) {\n            // get the id of the group which we will use as the id of the node\n            groupId = this.group.id();\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    cx() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.image.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    cy() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.image.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    connectorCX() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.connector.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    connectorCY() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.connector.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Getter/setter for whether the node is highlighted\n     * @parm value (optional) boolean value that sets the highlighted value\n     * @returns whether the node is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /** \n     * Get the group\n     * @returns the group\n     */\n    getGroup() {\n        return this.group;\n    }\n    \n    /**\n     * Show the delete button group\n     */\n    showDeleteButton() {\n        this.deleteButtonGroup.show();\n    }\n    \n    /**\n     * Hide the delete button group\n     */\n    hideDeleteButton() {\n        this.deleteButtonGroup.hide();\n    }\n    \n    /**\n     * Show the border of the node\n     */\n    showBorder() {\n        this.border.show();\n    }\n    \n    /**\n     * Hide the border of the node\n     */\n    hideBorder() {\n        this.border.hide();\n    }\n    \n    /**\n     * Get the connector of the node\n     */\n    getConnector() {\n        return this.connector;\n    }\n    \n    /**\n     * Get the id of the connector\n     */\n    getConnectorId() {\n        var id = null;\n        \n        if (this.connector != null) {\n            id = this.connector.id();\n        }\n        \n        return id;\n    }\n    \n    /**\n     * Get the x position of the group within the svg\n     * @returns the x position of the group\n     */\n    getGroupX() {\n\n        var x = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the x location of the group\n             */\n            x = this.group.x();\n        }\n        \n        return x;\n    }\n    \n    /**\n     * Get the y position of the group within the svg\n     * @returns the y position of the group\n     */\n    getGroupY() {\n        var y = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the y location of the group\n             */\n            y = this.group.y();\n        }\n        \n        return y;\n    }\n    \n    /**\n     * Get the x position of the image within the svg\n     * @returns the x position of the image\n     */\n    getImageX() {\n        \n        // get the x position of the group\n        var groupX = this.getGroupX();\n        \n        // get the x position of the image relative to the group\n        var imageRelativeX = this.image.x();\n        \n        // add the values together to get the absolute x position of the image\n        var imageX = groupX + imageRelativeX;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            if (bbox != null) {\n                // get the x position of the bounding box on the group\n                var bboxX = bbox.x;\n                \n                // compensate for the shift of the group\n                imageX = imageX - bboxX;\n            }\n        }\n        \n        return imageX;\n    }\n    \n    /**\n     * Get the y position of the image within the svg\n     * @returns the y position of the image\n     */\n    getImageY() {\n        \n        // get the y position of the group\n        var groupY = this.getGroupY();\n        \n        // get the y position of the image relative to the group\n        var imageRelativeY = this.image.y();\n        \n        // add the values together to get the absolute y position of the image\n        var imageY = groupY + imageRelativeY;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            // get the y position of the bounding box on the group\n            var bboxY = bbox.y;\n            \n            // compensate for the shift of the group\n            imageY = imageY - bboxY;\n        }\n        \n        return imageY;\n    }\n    \n    /**\n     * Get the width of the image\n     * @returns the width of th eimage\n     */\n    getImageWidth() {\n        var width = 0;\n        \n        if (this.image != null) {\n            width = this.image.width();\n        }\n        \n        return width\n    }\n    \n    /**\n     * Get the height of the image\n     * @returns the height of the image\n     */\n    getImageHeight() {\n        var height = 0;\n        \n        if (this.image != null) {\n            height = this.image.height();\n        }\n        \n        return height;\n    }\n    \n    /**\n     * Set the mouseover listener for the group\n     * @param nodeMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setNodeMouseOver(nodeMouseOverFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseover(nodeMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the group\n     * @param nodeMouseOutFunction the function to call when the mouse moves\n     * out of the group\n     */\n    setNodeMouseOut(nodeMouseOutFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseout(nodeMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the group\n     * @param nodeMouseDownFunction the function to call when the mouse is \n     * down on the group\n     */\n    setNodeMouseDown(nodeMouseDownFunction) {\n        \n        if (this.group != null) {\n            this.group.mousedown(nodeMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseup listener for the group\n     * @param nodeMouseUpFunction the function to call when the mouse is \n     * released over the group\n     */\n    setNodeMouseUp(nodeMouseUpFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseup(nodeMouseUpFunction);\n        }\n    }\n    \n    /**\n     * Set the click listener for the image\n     * @param nodeMouseClickFunction the function to call when the image is\n     * clicked\n     */\n    setNodeMouseClick(nodeMouseClickFunction) {\n        \n        if (this.group != null) {\n            this.image.click(nodeMouseClickFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the connector\n     * @param connectorMouseDownFunction the function to call when the mouse\n     * is down on the connector\n     */\n    setConnectorMouseDown(connectorMouseDownFunction) {\n        \n        if (this.connector != null) {\n            this.connector.mousedown(connectorMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the delete button\n     * @param deleteButtonMouseDownFunction the function to call when the mouse\n     * is down on the delete button\n     */\n    setDeleteButtonMouseDown(deleteButtonMouseDownFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mousedown(deleteButtonMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseover listener for the delete button\n     * @param deleteButtonMouseOverFunction the function to call when the mouse\n     * is over the delete button\n     */\n    setDeleteButtonMouseOver(deleteButtonMouseOverFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseover(deleteButtonMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the delete button\n     * @param deleteButtonMouseOutFunction the function to call when the mouse\n     * moves out of the delete button\n     */\n    setDeleteButtonMouseOut(deleteButtonMouseOutFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseout(deleteButtonMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the dragmove listener for the group\n     * @param dragMoveFunction the function to call when the group is dragged\n     */\n    setDragMove(dragMoveFunction) {\n        \n        if (this.group != null) {\n            \n            // set a listener for when the node is dragged\n            this.group.on('dragmove', dragMoveFunction);\n        }\n    }\n    \n    /**\n     * Set the x position\n     * @param x the x position\n     */\n    setX(x) {\n        this.x = x;\n        this.group.x(x);\n    }\n    \n    /**\n     * Set the y position\n     * @param y the y position\n     */\n    setY(y) {\n        this.y = y;\n        this.group.y(y);\n    }\n    \n    /**\n     * Add an outgoing link to the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    addOutgoingLink(outgoingLink) {\n        if (outgoingLink != null) {\n            this.outgoingLinks.push(outgoingLink);\n        }\n    }\n    \n    /**\n     * Remove an outgoing link from the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    removeOutgoingLink(outgoingLink) {\n        \n        if (outgoingLink != null) {\n            \n            // loop through all the outgoing links in this node\n            for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var tempOutgoingLink = this.outgoingLinks[ol];\n                \n                if (outgoingLink == tempOutgoingLink) {\n                    // we have found the outgoing link we want to remove\n                    this.outgoingLinks.splice(ol, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the outgoing links\n     * @return the outgoing links\n     */\n    getOutgoingLinks() {\n        return this.outgoingLinks;\n    }\n    \n    /**\n     * Add an incoming link to the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    addIncomingLink(incomingLink) {\n        if (incomingLink != null) {\n            this.incomingLinks.push(incomingLink);\n        }\n    }\n    \n    /**\n     * Remove an incoming link from the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    removeIncomingLink(incomingLink) {\n        \n        if (incomingLink != null) {\n            \n            // loop through the incoming links in the node\n            for (var il = 0; il < this.incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var tempIncomingLink = this.incomingLinks[il];\n                \n                if (incomingLink == tempIncomingLink) {\n                    // we have found the incoming link we want to remove\n                    this.incomingLinks.splice(il, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the incoming links\n     * @return the incoming links\n     */\n    getIncomingLinks() {\n        return this.incomingLinks;\n    }\n    \n    /**\n     * The function that is called when the node is moved\n     * @param event \n     */\n    dragMove(event) {\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // get the x and y coordinates of the center of the image\n        var cx = this.cx();\n        var cy = this.cy();\n        \n        // update the local x, y values of the node for bookkeeping\n        this.x = group.x();\n        this.y = group.y();\n        \n        // get the outgoing links and incoming links\n        var outgoingLinks = this.outgoingLinks;\n        var incomingLinks = this.incomingLinks;\n        \n        if (outgoingLinks != null) {\n            \n            // loop through all the outgoing links\n            for (var ol = 0; ol < outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var outgoingLink = outgoingLinks[ol];\n                \n                // update the x, y coordinate of the tail of the link\n                var x1 = cx;\n                var y1 = cy;\n                \n                // calculate the nearest point to the destination node\n                var nearestPoint = outgoingLink.getNearestPointToDestinationNode(x1, y1);\n                x2 = nearestPoint.x;\n                y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                outgoingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n            \n            // loop through all the incoming links\n            for (var il = 0; il < incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var incomingLink = incomingLinks[il];\n                \n                // reuse the coordinates of the tail of the link\n                var x1 = incomingLink.x1();\n                var y1 = incomingLink.y1();\n                \n                // calculate the nearest point to the source node\n                var nearestPoint = incomingLink.getNearestPointToDestinationNode(x1, y1);\n                var x2 = nearestPoint.x;\n                var y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                incomingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n        }\n        \n        if (this.controller != null) {\n            // handle the student data changing\n            this.controller.studentDataChanged();\n        }\n        \n        // move the group to the front so that it shows up above other elements\n        group.front();\n    }\n    \n    /**\n     * Remove the node from the svg\n     */\n    remove() {\n        \n        // make the group not draggable\n        this.group.draggable(false);\n        \n        // remove the group\n        this.group.remove();\n        \n        // remove the image\n        this.image.remove();\n        \n        // remove the connector\n        this.connector.remove();\n        \n        // remove the delete button\n        this.deleteButtonCircle.remove();\n        this.deleteButtonX.remove();\n        this.deleteButtonGroup.remove();\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            \n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            if (outgoingLink != null) {\n                // remove the outgoing link\n                outgoingLink.remove();\n                \n                /*\n                 * move the counter back one because calling outgoingLink.remove()\n                 * has removed the outgoingLink from the outgoingLinks array\n                 */\n                ol--;\n            }\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            \n            // get an incoming link\n            var incomingLink = this.incomingLinks[il];\n            \n            if (incomingLink != null) {\n                // remove the incoming link\n                incomingLink.remove();\n                \n                /*\n                 * move the counter back one because calling incomingLink.remove()\n                 * has removed the incomingLink from the incomingLinks array\n                 */\n                il--;\n            }\n        }\n    }\n}\n\n/**\n * A ConceptMapLink that represents a link in the ConceptMap component\n */\nclass ConceptMapLink {\n    \n    /**\n     * The constructor to create a ConceptMapLink object\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param id the instance id of the link\n     * @param originalId the original authored id of the link\n     * @param sourceNode the source ConceptMapNode\n     * @param destinationNode the destination ConceptMapNode\n     * @param label the text label\n     * @param color the color of the link\n     * @param curvature the curvature of the link\n     * @param startCurveUp whether the start of the link curves up\n     * @param endCurveUp whether the end of the link curves up\n     */\n    constructor(ConceptMapService, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp) {\n        \n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n        \n        // remember the svg.js draw object\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // the arrow head of the link\n        this.head = null;\n        \n        // the line of the link\n        this.path = null;\n        \n        // set the color of the link\n        this.color = color;\n        \n        if (this.color == null) {\n            // if no color is specified, use a default color\n            this.color = 'blue';\n        }\n        \n        // whether the link is highlighted\n        this.highlighted = false;\n        \n        // create a group to contain the path and head\n        this.group = this.draw.group();\n        \n        // where to place the text of the link along the line\n        this.textPercentageLocationOnLink = 0.6\n        \n        // remember the source node\n        this.sourceNode = sourceNode;\n        \n        /*\n         * used to remember the destination node later after the destination\n         * node has been chosen\n         */\n        this.destinationNode = destinationNode;\n        \n        // remember the curvature\n        this.curvature = curvature;\n        \n        // set whether the link curves up or down\n        this.startCurveUp = startCurveUp;\n        this.endCurveUp = endCurveUp;\n        \n        if (this.startCurveUp == null || this.endCurveUp == null) {\n            /*\n             * start and end curve up have not been specified so we will set\n             * it at random\n             */\n            \n            // choose a random integer 0 or 1\n            var randInt = Math.floor(Math.random() * 2);\n            \n            if (randInt == 0) {\n                // set the link to curve down\n                this.startCurveUp = false;\n                this.endCurveUp = false;\n            } else {\n                // set the link to curve up\n                this.startCurveUp = true;\n                this.endCurveUp = true;\n            }\n        }\n        \n        // create a curved link\n        this.curvedLink = true;\n        \n        // initialize the coordinates of both ends of the link\n        var x1 = this.sourceNode.cx();\n        var y1 = this.sourceNode.cy();\n        var x2 = x1;\n        var y2 = y1;\n        \n        if (this.destinationNode != null) {\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            x2 = nearestPoint.x;\n            y2 = nearestPoint.y;\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n        }\n        \n        if (this.curvedLink) {\n            // create a curved link\n            \n            // calculate the curved line in svg\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2);\n            \n            // get the line\n            var tail = arrowPathArraysObject[0];\n            \n            // get the arrow head\n            var head = arrowPathArraysObject[1];\n            \n            // draw the head and tail\n            this.head = this.draw.path(head.toString());\n            this.path = this.draw.path(tail.toString());\n        } else {\n            // create a straight line\n            this.path = this.draw.path('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // set the style of the link\n        this.path.attr('stroke', this.color);\n        this.path.attr('stroke-width', 3);\n        this.path.attr('fill', 'transparent');\n        this.head.attr('stroke', this.color);\n        this.head.attr('fill', this.color);\n        this.head.attr('pointer-events', 'none');\n        \n        /*\n         * remember the x and y coordinates of the source and destination\n         * so that we can look them up easily later\n         */\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        // add the tail and head to the group\n        this.group.add(this.path);\n        this.group.add(this.head);\n        \n        // create the text group for the link\n        this.createTextGroup();\n        \n        // text that describes the type of link chosen by the student\n        this.setLabel(label);\n        \n        if (this.label == null || this.label == '') {\n            // there is no label so we will hide the text group\n            this.hideTextGroup();\n        } else {\n            // there is a label so we will show the text group\n            this.showTextGroup();\n        }\n        \n        // create the delete button group\n        this.createDeleteButtonGroup();\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapLink\n     * @returns a JSON object containing the data of the ConceptMapLink\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.color = this.color;\n        jsonObject.label = this.label;\n        jsonObject.curvature = this.curvature;\n        jsonObject.startCurveUp = this.startCurveUp;\n        jsonObject.endCurveUp = this.endCurveUp;\n        jsonObject.sourceNodeOriginalId = this.sourceNode.getOriginalId();\n        jsonObject.sourceNodeInstanceId = this.sourceNode.getId();\n        jsonObject.destinationNodeOriginalId = this.destinationNode.getOriginalId();\n        jsonObject.destinationNodeInstanceId = this.destinationNode.getId();\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Get the id of the link\n     * @returns the id of the link\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the id of the group\n     * @returns the id of the group\n     */\n    getGroupId() {\n        return this.group.id();\n    }\n    \n    /**\n     * Get the x1 value\n     * @returns the x coordinate of the source of the link\n     */\n    x1() {\n        return this.path.attr('x1');\n    }\n    \n    /**\n     * Get the y1 value\n     * @returns the y coordinate of the source of the link\n     */\n    y1() {\n        return this.path.attr('y1');\n    }\n    \n    /**\n     * Get the x2 value\n     * @returns the x coordinate of the destination of the link\n     */\n    x2() {\n        return this.path.attr('x2');\n    }\n    \n    /**\n     * Get the y2 value\n     * @returns the y coordinate of the destination of the link\n     */\n    y2() {\n        return this.path.attr('y2');\n    }\n    \n    /**\n     * Set the original id\n     * @param originalId the original id\n     */\n    setOriginalId(originalId) {\n        this.originalId = originalId;\n    }\n    \n    /**\n     * Get the label\n     * @returns the label\n     */\n    getLabel() {\n        return this.label;\n    }\n    \n    /**\n     * Getter/setter for the highlighted value\n     * @param value (optional) the highlighted value\n     * @returns whether the link is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /**\n     * Update the coordinates of the link\n     * @param x1 (optional) the x position of the source\n     * @param y1 (optional) the y position of the source\n     * @param x2 (optional) the x position of the destination\n     * @param y2 (optional) the y position of the destination\n     * @param isDragging whether the link is currently being dragged\n     */\n    updateCoordinates(x1, y1, x2, y2, isDragging) {\n        var array = this.path.array();\n        \n        if (this.curvedLink) {\n            // draw a curved link\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // calculate the line\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2, isDragging);\n            \n            // get the svg tail\n            var tail = arrowPathArraysObject[0];\n            \n            // get the svg head\n            var head = arrowPathArraysObject[1];\n            \n            // re-plot the head and path\n            this.head.plot(head.toString());\n            this.path.plot(tail.toString());\n        } else {\n            // draw a straight line\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // re-plot the line\n            this.path.plot('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // update the coordinate values\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        if (this.deleteButtonGroup != null) {\n            // update the location of the delete button\n            var deleteButtonLocation = this.getDeleteButtonLocation();\n            this.deleteButtonGroup.x(deleteButtonLocation.x);\n            this.deleteButtonGroup.y(deleteButtonLocation.y);\n        }\n        \n        if (this.textGroup != null) {\n            // update the location of the text group\n            \n            // get the length of the line\n            var totalLength = this.path.node.getTotalLength();\n            \n            // get the coordinate of a point somewhere in the middel of the line\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            \n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n    \n    /**\n     * Calculate the curved line\n     * @param x1 the x coordinate of the source\n     * @param y1 the y coordinate of the source\n     * @param x2 the x coordinate of the destination\n     * @param y2 the y coordinate of the destination\n     * @param isDragging whether the line is currently being dragged\n     * @returns an array that contains the svg objects for the arrow head and line\n     */\n    calculateCurvedLine(x1, y1, x2, y2, isDragging) {\n        \n        var startx = x1;\n        var starty = y1;\n        var endx = x2;\n        var endy = y2;\n        var startCurveUp = true;\n        var endCurveUp = true;\n        var len = 15;\n        var angle = 45;\n        var curvature = 0.5;\n        var nodeRadius = 10;\n        \n        // set the amount of curvature of the line\n        curvature = this.curvature;\n        \n        // whether the link should curve up or down\n        startCurveUp = this.startCurveUp;\n        endCurveUp = this.endCurveUp;\n\n        // calculate the svg objects for the arrow head and line\n        var arrowPathArraysObject = this.ConceptMapService.arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius);\n\n        return arrowPathArraysObject;\n    }\n    \n    /**\n     * Set the destination node\n     * @param destinationNode the destination ConceptMapNode object\n     */\n    setDestination(destinationNode) {\n        \n        if (destinationNode != null) {\n            \n            // get x and y of the tail\n            var x1 = this.path.attr('x1');\n            var y1 = this.path.attr('y1');\n            \n            // remember the destination node\n            this.destinationNode = destinationNode;\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            var x2 = nearestPoint.x;\n            var y2 = nearestPoint.y;\n            \n            // update the coordinates of the link\n            var isDragging = false;\n            this.updateCoordinates(x1, y1, x2, y2, isDragging);\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n            \n            // hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Get the nearest point to the destination node from a given x, y point\n     * @param x the x value of the source point\n     * @param y the y value of the source point\n     * @returns an object containing an x and y field\n     */\n    getNearestPointToDestinationNode(x, y) {\n        \n        // get the coordinates of the upper left corner of the image\n        var rectMinX = this.destinationNode.getImageX();\n        var rectMinY = this.destinationNode.getImageY();\n        \n        // get the width and height of the image\n        var width = this.destinationNode.getImageWidth();\n        var height = this.destinationNode.getImageHeight();\n        \n        /*\n        var destinationNodeGroup = this.destinationNode.getGroup();\n        var destinationNodeGroupBBox = destinationNodeGroup.bbox();\n        \n        rectMinX = this.destinationNode.getGroupX();\n        rectMinY = this.destinationNode.getGroupY();\n        \n        width = destinationNodeGroupBBox.width;\n        height = destinationNodeGroupBBox.height;\n        */\n        \n        if (x == null && y == null) {\n            // get the coordinates of the source if x and y were not provided\n            x = this.path.attr('x1');\n            y = this.path.attr('y1');\n        }\n        \n        /*\n         * find the nearest point from the source to anywhere along the \n         * rectangular perimeter of the destination image\n         */\n        var point = this.getNearestPointInPerimeter(rectMinX, rectMinY, width, height, x, y);\n        \n        return point;\n    }\n    \n    /**\n     * Get the nearest point on a rectangle from a source point\n     * @param l the upper left x value of the rectangle\n     * @param t the upper left y value of the rectangle\n     * @param w the width of the rectangle\n     * @param h the height of the rectangle\n     * @param x the source point x value\n     * @param y the source point y value\n     * @returns the point on the rectangle that is closest to the \n     */\n    getNearestPointInPerimeter(l, t, w, h, x, y) {\n        var r = l + w;\n        var b = t + h;\n        \n        var x = this.clamp(x, l , r);\n        var y = this.clamp(y, t, b);\n        \n        var dl = Math.abs(x - l);\n        var dr = Math.abs(x - r);\n        var dt = Math.abs(y - t);\n        var db = Math.abs(y - b);\n        \n        var m = Math.min(dl, dr, dt, db);\n        \n        var point = {};\n        \n        if (m == dt) {\n            point.x = x;\n            point.y = t;\n        } else if (m == db) {\n            point.x = x;\n            point.y = b;\n        } else if (m == dl) {\n            point.x = l;\n            point.y = y;\n        } else {\n            point.x = r;\n            point.y = y;\n        }\n        \n        return point;\n    }\n    \n    /**\n     * Helper function for getNearestPointInPerimeter\n     */\n    clamp(x, lower, upper) {\n        return Math.max(lower, Math.min(upper, x));\n    }\n    \n    /**\n     * Set the color of the link\n     * @param color the color\n     */\n    setColor(color) {\n        \n        if (color != null) {\n            // set the color styling\n            this.color = color;\n            this.path.attr('stroke', this.color);\n            this.head.attr('stroke', this.color);\n            this.head.attr('fill', this.color);\n            this.deleteButton.attr('stroke', this.color);\n            this.deleteButtonX.attr('stroke', this.color);\n        }\n    }\n    \n    /**\n     * Set the label\n     * @param label the text label\n     */\n    setLabel(label) {\n        \n        if (label != null) {\n            \n            // remember the label\n            this.label = label;\n            \n            // set the text into the text element\n            this.text.text(label);\n            \n            // reset the width to adjust to the new text length\n            var textBBox = this.text.node.getBBox();\n            var width = textBBox.width;\n            this.textRect.attr('width', width + 10);\n            \n            // recalculate the position of the svg text object\n            var totalLength = this.path.node.getTotalLength();\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n            \n            // show the text group now that it has a label\n            this.showTextGroup();\n        }\n    }\n    \n    /**\n     * Connect a link the its source and destination nodes\n     */\n    connectLinkToNodes() {\n        \n        if (this.sourceNode != null && this.destinationNode != null) {\n            \n            // add the link to the outgoing links of its source node\n            this.sourceNode.addOutgoingLink(this);\n            \n            // add the link to the incoming links of its destination node\n            this.destinationNode.addIncomingLink(this);\n        }\n    }\n    \n    /**\n     * Create the delete button for the link\n     */\n    createDeleteButtonGroup() {\n        // create a group to contain the elements of the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        /*\n         * create an invisible circle that is placed behind the delete button\n         * and has a larger radius than the delete button. this is used for\n         * mouse over purposes so that we can keep the delete button visible\n         * when the mouse is around the area of the delete button\n         */\n        var invisibleCircleRadius = 30;\n        this.invisibleCircle = this.draw.circle();\n        this.invisibleCircle.radius(invisibleCircleRadius);\n        this.invisibleCircle.fill({ opacity: 0.0});\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButton = this.draw.circle();\n        this.deleteButton.radius(deleteButtonRadius);\n        this.deleteButton.fill({ opacity: 0.0 });\n        this.deleteButton.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n        /*\n         * create the x part of the delete button by creating a + and then\n         * rotating it 45 degrees\n         */\n        \n        // get the coordinate of the center of the delete button\n        var deleteButtonMidpointX = this.deleteButton.cx();\n        var deleteButtonMidpointY = this.deleteButton.cy();\n        \n        // get the coordinates of the top of the +\n        var topX = deleteButtonMidpointX;\n        var topY = deleteButtonMidpointY - (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the bottom of the +\n        var bottomX = deleteButtonMidpointX;\n        var bottomY = deleteButtonMidpointY + (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the left of the +\n        var leftX = deleteButtonMidpointX - (deleteButtonRadius * 0.7);\n        var leftY = deleteButtonMidpointY;\n        \n        // get the coordinates of the right of the +\n        var rightX = deleteButtonMidpointX + (deleteButtonRadius * 0.7);\n        var rightY = deleteButtonMidpointY;\n        \n        // create the path for the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        \n        // draw the path\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: this.color, opacity: 1.0, width: 2 });\n        \n        /// rotate the + to create the x\n        this.deleteButtonX.rotate(45);\n        \n        /*\n         * disable pointer events on the x so that we only need to set a \n         * mouse listener on the circle\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the invisible circle, regular circle, and x to the group\n        this.deleteButtonGroup.add(this.invisibleCircle);\n        this.deleteButtonGroup.add(this.deleteButton);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        // set the location of the delete button group\n        var location = this.getDeleteButtonLocation();\n        var x = location.x;\n        var y = location.y;\n        this.deleteButtonGroup.x(x);\n        this.deleteButtonGroup.y(y);\n        \n        // set the listener for when the mouse is over the group\n        this.deleteButtonGroup.mouseover((event) => {\n            this.deleteButtonGroupMouseOver(event);\n        });\n        \n        // set the listener for when the mouse moves out of the group\n        this.deleteButtonGroup.mouseout((event) => {\n            this.deleteButtonGroupMouseOut(event);\n        });\n        \n        // add the delete button group to the link group\n        this.group.add(this.deleteButtonGroup);\n    }\n    \n    /**\n     * Called when the mouse is over the delete button group\n     * @param event the mouseover event\n     */\n    deleteButtonGroupMouseOver(event) {\n        // show the delete button\n        this.showDeleteButton();\n    }\n    \n    /**\n     * Called when the mouse leaves the delete button group\n     * @param event the mouseout event\n     */\n    deleteButtonGroupMouseOut(event) {\n        if (!this.highlighted) {\n            // the link is not highlighted so we will hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the delete button is clicked\n     * @param deleteButtonClickedFunction the function to call when the delete\n     * button is clicked\n     */\n    setDeleteButtonClicked(deleteButtonClickedFunction) {\n        // listen for the click event on the delete button to call the function\n        this.deleteButton.click(deleteButtonClickedFunction);\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the group\n     * @param linkMouseDownFunction the function to call when the mouse is\n     * clicked down on the group\n     */\n    setLinkMouseDown(linkMouseDownFunction) {\n        if (this.group != null) {\n            /*\n             * listen for the mousedown event on the group to call\n             * the function\n             */\n            this.group.mousedown(linkMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over the group\n     * @param linkMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setLinkMouseOver(linkMouseOverFunction) {\n        if (this.group != null) {\n            // listen for the mouseover event on the group to call the function\n            this.group.mouseover(linkMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse leaves the group\n     * @param linkMouseOutFunction the function to call when the mouse leaves\n     * the group\n     */\n    setLinkMouseOut(linkMouseOutFunction) {\n        if (this.group != null) {\n            // listen for the mouseout event on the group to call the function\n            this.group.mouseout(linkMouseOutFunction);\n        }\n    }\n    \n    /**\n    * Calculate the location of the delete button for the link\n    *\n    * Note: This function and the associated functions that are called by this\n    * function are taken from the Concord MySystem github project.\n    * https://github.com/concord-consortium/mysystem_sc\n    * The code is found in the _setRemoveButtonLocation function in the link.js file.\n    * mysystem_sc/apps/my_system/views/link.js\n    */\n    getDeleteButtonLocation() {\n        //var line = raphaelObject.items[2];\n        \n        var line = this.path.node;\n        var distanceAlongLine = 35;\n        var distanceAlongNormal = 18;\n        var len, p1, p2, scale, dx, dy, x, y, occluded;\n        \n        /*\n        var link = this.get('content');\n        if (!link.isComplete()) return;\n        if (line.attr('path').length < 1) return;     // this can happen after our content is destroyed\n        */\n        \n        len = line.getTotalLength();\n        p2  = line.getPointAtLength(len);\n        \n        if (len > 50) {\n            p1 = line.getPointAtLength(len - distanceAlongLine);\n            \n            dx = p2.x - p1.x;\n            dy = p2.y - p1.y;\n            scale = distanceAlongNormal / distanceAlongLine * (dx > 0 ? 1 : -1);\n            \n            x = p1.x + scale * dy;\n            y = p1.y - scale * dx;\n            //occluded = NO;\n        }\n        else {\n            x = 0;\n            y = 0;\n            //occluded = YES;\n        }\n        \n        /*\n        this.set('removeButtonX', x);\n        this.set('removeButtonY', y);\n        this.set('isRemoveButtonOccluded', occluded);\n        */\n        \n        var location = {};\n        location.x = x;\n        location.y = y;\n        \n        return location;\n    }\n    \n    /**\n     * Show the delete button\n     */\n    showDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the delete button\n     */\n    hideDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.hide();\n        }\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        // create the text element\n        this.text = this.draw.text(\"\");\n        this.text.attr('x', 5);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // get the bounding box around the text element\n        var textBBox = this.text.node.getBBox();\n        \n        /*\n         * set the width of the rectangle to be a little larger than the width\n         * of the text element\n         */\n        var width = textBBox.width;\n        this.textRect.attr('width', width + 10);\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        // set the location of the text to be somewhere along the line of the link\n        var totalLength = this.path.node.getTotalLength();\n        var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n        this.textGroup.cx(midPoint.x);\n        this.textGroup.cy(midPoint.y);\n        \n        // add the text group to the link group\n        this.group.add(this.textGroup);\n        \n        // hide the text group until the student has chosen a link type\n        this.textGroup.hide();\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Show the text group\n     */\n    showTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the text group\n     */\n    hideTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.hide();\n        }\n    }\n    \n    /**\n     * Remove all the references to the link and also remove all the elements\n     * from the svg\n     */\n    remove() {\n        \n        if (this.sourceNode != null) {\n            // remove the link from the source node's outgoing links\n            this.sourceNode.removeOutgoingLink(this);\n        }\n        \n        if (this.destinationNode != null) {\n            // remove the link from the destination node's incoming links\n            this.destinationNode.removeIncomingLink(this);\n        }\n        \n        if (this.path != null) {\n            // remove the line\n            this.path.remove();\n        }\n        \n        if (this.head != null) {\n            // remove the arrow head\n            this.head.remove();\n        }\n        \n        if (this.deleteButtonGroup != null) {\n            // remove the delete button group\n            this.deleteButtonGroup.remove();\n        }\n        \n        if (this.textGroup != null) {\n            // remove the text group\n            this.textGroup.remove();\n        }\n        \n        if (this.group != null) {\n            // remove the link group\n            this.group.remove();\n        }\n    }\n}\n\n\nConceptMapService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapService;\n"]}
>>>>>>> ec7a40b08e02992fe1573a1e3598a515139f58a9
