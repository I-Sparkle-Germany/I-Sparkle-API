{"version":3,"sources":["conceptMapService.es6"],"names":["ConceptMapService","StudentDataService","UtilService","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","width","height","background","stretchBackground","nodes","linksTitle","links","rules","starterConceptMap","customRuleEvaluator","showAutoScore","showAutoFeedback","componentToCopy","createComponent","starterSentence","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","response","draw","originalId","filePath","label","x","y","ConceptMapNode","sourceNode","destinationNode","color","curvature","startCurveUp","startCurveDown","ConceptMapLink","x1","y1","x2","y2","slope","distance","Math","sqrt","pow","startx","starty","endx","endy","endCurveUp","len","angle","nodeRadius","start","coord","tip","pathData","arrowHeadData","curveDistance","startYCurveDistance","max","min","endYCurveDistance","startUp","endUp","c2","c3","cDistance","perimX","perimYstart","perimYend","push","percLengthOfHead","getLengthOfCubicBezier","centerBaseOfHead","getPointOnCubicBezier","theta","atan2","baseAngleA","PI","baseAngleB","baseA","cos","sin","baseB","round","C1","C2","C3","C4","precision","t","currentPoint","previousPoint","xDif","yDif","percent","pos","B1","B2","B3","B4","componentContent","conceptMapData","ruleName","rule","getRuleByRuleName","getRulesByCategoryName","firstRule","r","tempRule","tempResult","evaluateRule","nodeLabel","getNodesByLabel","nodeCount","comparison","number","not","linkLabel","otherNodeLabel","getLinksByLabels","linkCount","name","category","tempRules","categories","c","tempCategory","nodesByLabel","n","resultLinks","tempLink","tempLinkLabel","sourceNodeLabel","destinationNodeLabel","args","ruleResult","evaluateRuleByRuleName","fileName","substring","lastIndexOf","image","group","highlighted","deleteButtonColor","connector","createConnector","deleteButtonGroup","createDeleteButtonGroup","textGroup","createTextGroup","border","createBorder","outgoingLinks","incomingLinks","add","hide","jsonObject","instanceId","ol","outgoingLink","getId","getOriginalId","getLabel","tempLinkObject","il","incomingLink","rect","fill","stroke","opacity","connectorRadius","circle","radius","cx","cy","deleteButtonRadius","deleteButtonCircle","topX","topY","bottomX","bottomY","leftX","leftY","rightX","rightY","deleteButtonXPath","deleteButtonX","path","transform","rotation","translate","attr","textRect","text","font","family","size","style","setAttribute","textBBox","getBBox","calculateTextRectWidth","e","getImageWidth","getImageHeight","groupId","val","groupX","imageCX","groupY","imageCY","value","show","getGroupX","imageRelativeX","imageX","getGroup","bbox","bboxX","getGroupY","imageRelativeY","imageY","bboxY","nodeMouseOverFunction","mouseover","nodeMouseOutFunction","mouseout","nodeMouseDownFunction","mousedown","nodeMouseUpFunction","mouseup","nodeMouseClickFunction","click","connectorMouseDownFunction","deleteButtonMouseDownFunction","deleteButtonMouseOverFunction","deleteButtonMouseOutFunction","dragMoveFunction","on","tempOutgoingLink","splice","tempIncomingLink","event","nearestPoint","getNearestPointToDestinationNode","updateCoordinates","controller","studentDataChanged","front","draggable","remove","linksToDestination","labelText","head","textPercentageLocationOnLink","randInt","floor","random","curvedLink","connectLinkToNodes","arrowPathArraysObject","calculateCurvedLine","tail","toString","setLabel","hideTextGroup","showTextGroup","sourceNodeOriginalId","sourceNodeInstanceId","destinationNodeOriginalId","destinationNodeInstanceId","isDragging","array","plot","deleteButtonLocation","getDeleteButtonLocation","totalLength","getTotalLength","midPoint","getPointAtLength","arrowPathArrays","directionAlreadyUsed","direction","parallelLinks","getLinksToDestination","usedDirections","p","parallelLink","tempDirection","indexOf","hideDeleteButton","rectMinX","getImageX","rectMinY","getImageY","point","getNearestPointInPerimeter","w","h","b","clamp","dl","abs","dr","dt","db","m","lower","upper","deleteButton","addOutgoingLink","addIncomingLink","invisibleCircleRadius","invisibleCircle","deleteButtonMidpointX","deleteButtonMidpointY","rotate","location","deleteButtonGroupMouseOver","deleteButtonGroupMouseOut","showDeleteButton","deleteButtonClickedFunction","linkMouseDownFunction","linkTextMouseDownFunction","linkMouseOverFunction","linkMouseOutFunction","line","distanceAlongLine","distanceAlongNormal","p1","p2","scale","dx","dy","occluded","linkGroupId","removeOutgoingLink","removeIncomingLink","$inject"],"mappings":"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","file":"conceptMapService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass ConceptMapService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a ConceptMap component object\n     * @returns a new ConceptMap component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'ConceptMap';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = false;\n        component.width = 800;\n        component.height = 600;\n        component.background = null;\n        component.stretchBackground = null;\n        component.nodes = [];\n        component.linksTitle = \"\";\n        component.links = [];\n        component.rules = [];\n        component.starterConceptMap = null;\n        component.customRuleEvaluator = \"\";\n        component.showAutoScore = true;\n        component.showAutoFeedback = true;\n        return component;\n    }\n\n    /**\n     * Copies a ConceptMap component object\n     * @returns a copied ConceptMap component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.starterSentence = componentToCopy.starterSentence;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        return component;\n    }\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'ConceptMap') {\n                // the other component is an ConceptMap component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.response) {\n                            // there is a response so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.response) {\n                        // there is a response so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Create an instance of the ConceptMapNode class\n     * @param draw the svg.js draw object\n     * @param id the node id\n     * @param filePath the file path of the image\n     * @param label the label of the node\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param width the width of the image\n     * @param height the height of the image\n     * @param a ConceptMapNode\n     */\n    newConceptMapNode(draw, id, originalId, filePath, label, x, y, width, height) {\n        return new ConceptMapNode(this, draw, id, originalId, filePath, label, x, y, width, height);\n    }\n    \n    /**\n     * Create an instance of the ConceptMapLink class\n     * @param draw the svg.js draw object\n     * @param id the link id\n     * @param node the source ConceptMapNode that the link is coming out of\n     * @param x the x position of the tail\n     * @param y the y position of the tail\n     * @returns a ConceptMapLink\n     */\n    newConceptMapLink(draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown) {\n        return new ConceptMapLink(this, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown);\n    }\n    \n    /**\n     * Get the slope of the line between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the slope of the line or null if the slope is infinite\n     */\n    getSlope(x1, y1, x2, y2) {\n        \n        var slope = null;\n        \n        if ((x2 - x1) == 0) {\n            // the slope is infinite so we will return null\n            slope = null;\n        } else {\n            // calculate the slope\n            slope = (y2 - y1) / (x2 - x1);\n        }\n        \n        return slope;\n    }\n    \n    /**\n     * Calculate the euclidean distance between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the distance between the two points\n     */\n    calculateDistance(x1, y1, x2, y2) {\n        \n        // calculate the distance\n        var distance = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n        \n        return distance;\n    }\n    \n    /**\n    \n    Returns an array representation of the path elements for an arrow\n    \n    First we calculate a simple curve for the tail.\n    \n    Then we pick a point on that curve to use as the base-center of the arrow head, \n    then calculate the position of that triangle based on the angle between that \n    point and the tip.\n  \n    @params startx {Number} X-coordinate of the start point\n    @params starty {Number} Y-coordinate of the start point\n    @params endx {Number} X-coordinate of the end point\n    @params endy {Number} Y-coordinate of the end point\n    @params len {Number} Length of the \"tip\" of the arrowhead\n    @params angle {Number} Angle in degrees \n      between the line and each wing of the arrowhead. \n      Should be less than 90.\n\n    Note: This function and the associated functions that are called by this\n    function are taken from the Concord MySystem github project.\n    https://github.com/concord-consortium/mysystem_sc\n    The code is found in the arrow_drawing.js file.\n    mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n    \n    **/\n    arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius) { \n        \n        if (startx === endx && starty === endy){\n            return [[\"\"],[\"\"]];\n        }   \n        \n        var start = new this.coord(startx, starty),\n        tip = new this.coord(endx, endy),\n        pathData   = [],\n        arrowHeadData = [];\n        \n        // calculate control points c2 and c3\n        var curveDistance = (tip.x - start.x) * curvature,\n        startYCurveDistance = (curveDistance === 0 ? 1 : Math.max(Math.min(curveDistance, 100), -100)),\n        endYCurveDistance = startYCurveDistance,\n        startUp = startCurveUp ? 1 : -1,\n        endUp = endCurveUp ? 1 : -1;\n        startYCurveDistance = (startYCurveDistance * startUp > 0) ? startYCurveDistance : startYCurveDistance * -1;\n        endYCurveDistance = (endYCurveDistance * endUp > 0) ? endYCurveDistance : endYCurveDistance * -1;\n        var c2 = new this.coord(start.x+(curveDistance/2), start.y-startYCurveDistance),\n        c3 = new this.coord(tip.x-(curveDistance/2), tip.y-endYCurveDistance),\n        cDistance = Math.sqrt(Math.pow((curveDistance/2),2) + Math.pow(startYCurveDistance,2)),\n        perimX = nodeRadius*(curveDistance/2)/cDistance, \n        perimYstart = nodeRadius*startYCurveDistance/cDistance,\n        perimYend = nodeRadius*endYCurveDistance/cDistance;\n        \n        // update tip\n        tip = new this.coord(tip.x - perimX, tip.y - perimYend);\n        \n        // draw arrow path\n        \n        pathData.push(\"M\", start.x + perimX, start.y - perimYstart);  // move to start of line\n        pathData.push(\"C\", c2.x, c2.y, c3.x, c3.y, tip.x, tip.y); // curve line to the tip\n        \n        // draw arrow head\n        var percLengthOfHead = len / this.getLengthOfCubicBezier(start, c2, c3, tip),\n        centerBaseOfHead = this.getPointOnCubicBezier(percLengthOfHead, start, c2, c3, tip),\n        theta  = Math.atan2((tip.y-centerBaseOfHead.y),(tip.x-centerBaseOfHead.x)),\n        baseAngleA = theta + angle * Math.PI/180,\n        baseAngleB = theta - angle * Math.PI/180,\n        baseA      = new this.coord(tip.x - len * Math.cos(baseAngleA), tip.y - len * Math.sin(baseAngleA)),\n        baseB      = new this.coord(tip.x - len * Math.cos(baseAngleB), tip.y - len * Math.sin(baseAngleB));\n        \n        arrowHeadData.push(\"M\", tip.x, tip.y);\n        arrowHeadData.push(\"L\", baseA.x, baseA.y);  // line to baseA\n        arrowHeadData.push(\"L\", baseB.x, baseB.y);  // line to baseB\n        arrowHeadData.push(\"L\", tip.x,   tip.y  );  // line back to the tip\n        \n        return [pathData, arrowHeadData];\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    coord(x,y) {\n        if(!x) x = 0;\n        if(!y) y = 0;\n        /* \n        *   Limit precision of decimals for SVG rendering.\n        *   otherwise we get really long SVG strings, \n        *   and webkit error messsages like of this sort:\n        *   \"Error: Problem parsing d='<svg string with long dec>'\"\n        */\n        x = Math.round(x * 1000)/1000;\n        y = Math.round(y * 1000)/1000;\n        return {x: x, y: y};\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getLengthOfCubicBezier(C1,C2,C3,C4)\n    {\n        var precision = 10,\n        length    = 0,\n        t,\n        currentPoint,\n        previousPoint;\n        \n        for (var i = 0; i<precision; i++){\n            t = i/precision;\n            currentPoint = this.getPointOnCubicBezier(t, C1,C2,C3,C4);\n            if (i > 0){\n                var xDif = currentPoint.x - previousPoint.x,\n                yDif = currentPoint.y - previousPoint.y;\n                length += Math.sqrt((xDif*xDif) + (yDif*yDif));\n            }\n            previousPoint = currentPoint;\n        }\n        return length;\n    }\n    \n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getPointOnCubicBezier(percent,C1,C2,C3,C4) {\n        if (percent < 0) percent = 0;\n        if (percent > 1) percent = 1;\n        var pos = new this.coord();\n        pos.x = C1.x*this.B1(percent) + C2.x*this.B2(percent) + C3.x*this.B3(percent) + C4.x*this.B4(percent);\n        pos.y = C1.y*this.B1(percent) + C2.y*this.B2(percent) + C3.y*this.B3(percent) + C4.y*this.B4(percent);\n        return pos;\n    }\n    \n    /**\n     * Note: These functions are from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    B1(t) { return t*t*t; }\n    B2(t) { return 3*t*t*(1-t); }\n    B3(t) { return 3*t*(1-t)*(1-t); }\n    B4(t) { return (1-t)*(1-t)*(1-t); }\n    \n    /**\n     * Evaluate a rule name\n     * @param componentContent the component content\n     * @param conceptMapData the student concept map data\n     * @param ruleName the rule name\n     * @returns whether the rule was satisfied\n     */\n    evaluateRuleByRuleName(componentContent, conceptMapData, ruleName) {\n        \n        var result = false;\n        \n        // get the rule\n        var rule = this.getRuleByRuleName(componentContent, ruleName);\n        \n        if (rule == null) {\n            /*\n             * we didn't find a rule with the given rule name so we will look\n             * for a category with that name\n             */\n            \n            // get the rules that are in the category\n            var rules = this.getRulesByCategoryName(componentContent, ruleName);\n            \n            var firstRule = true;\n            \n            if (rules != null) {\n                \n                /*\n                 * loop through all the rules in the category. we will say the\n                 * category is satisfied if all the rules in the category\n                 * evaluate to true.\n                 */\n                for (var r = 0; r < rules.length; r++) {\n                    var tempRule = rules[r];\n                    \n                    // evaluate the rule\n                    var tempResult = this.evaluateRule(conceptMapData, tempRule);\n                    \n                    if (firstRule) {\n                        /*\n                         * this is the first rule so we will set the value\n                         * of the rule to the result\n                         */\n                        result = tempResult;\n                        firstRule = false;\n                    } else {\n                        /*\n                         * this is not the first rule so we will compute the \n                         * \"logical and\" of the result so far and this rule's\n                         * result\n                         */\n                        result = result && tempResult;\n                    }\n                    \n                    if (!result) {\n                        /*\n                         * the result is false so we can short circuit and\n                         * stop looping since we have now just found that\n                         * one of the rules is not satisfied which means\n                         * the category is not satisfied.\n                         */\n                        break;\n                    }\n                }\n            }\n        } else {\n            // evaluate the rule\n            result = this.evaluateRule(conceptMapData, rule);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Evaluate a rule\n     * @param conceptMapData the concept map student data\n     * @param rule the rule object\n     * @returns whether the rule was satisfied\n     */\n    evaluateRule(conceptMapData, rule) {\n        \n        var result = false;\n        \n        if (rule != null) {\n            \n            if (rule.type == 'node') {\n                // this is a node rule\n                \n                // get the node we are looking for\n                var nodeLabel = rule.nodeLabel;\n                \n                // get all the nodes with the given label\n                var nodes = this.getNodesByLabel(conceptMapData, nodeLabel);\n                \n                // get the number of nodes with the given label\n                var nodeCount = nodes.length;\n                \n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n                \n                // the number to compare to\n                var number = rule.number;\n                \n                if (comparison == 'exactly') {\n                    /*\n                     * we are looking for an exact number of nodes with the \n                     * given label\n                     */\n                    if (nodeCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    /*\n                     * we are looking for more than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    /*\n                     * we are looking for less than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount < number) {\n                        result = true;\n                    }\n                }\n                \n                if (rule.not) {\n                    /*\n                     * the rule is satisfied if the result is false so we will\n                     * negate the result\n                     */\n                    result = !result;\n                }\n                \n            } else if (rule.type == 'link') {\n                // this is a link rule\n                \n                // get the source node label\n                var nodeLabel = rule.nodeLabel;\n                \n                // get the link label\n                var linkLabel = rule.linkLabel;\n                \n                // get the destination node label\n                var otherNodeLabel = rule.otherNodeLabel;\n                \n                // get all the links with the matching labels\n                var links = this.getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel);\n                \n                // get the number of links with the matching labels\n                var linkCount = links.length;\n                \n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n                \n                // the number to compare to\n                var number = rule.number;\n                \n                if (comparison == 'exactly') {\n                    // we are looking for an exact number of links\n                    if (linkCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    // we are looking for more than a certain number of links\n                    if (linkCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    // we are looking for less than a certain number of links\n                    if (linkCount < number) {\n                        result = true;\n                    }\n                }\n                \n                if (rule.not) {\n                    /*\n                     * the rule is satisfied if the result is false so we will\n                     * negate the result\n                     */\n                    result = !result;\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get a rule by the rule name\n     * @param componentContent the concept map component content\n     * @param ruleName the rule name\n     * @returns the rule with the given rule name\n     */\n    getRuleByRuleName(componentContent, ruleName) {\n        \n        var rule = null;\n        \n        if (ruleName != null) {\n            \n            // get the rules\n            var rules = componentContent.rules;\n            \n            if (rules != null) {\n                \n                // loop through all the rules\n                for (var r = 0; r < rules.length; r++) {\n                    \n                    // get a rule\n                    var tempRule = rules[r];\n                    \n                    if (tempRule != null) {\n                        \n                        if (ruleName == tempRule.name) {\n                            // we have found the rule with the name we want\n                            rule = tempRule;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return rule;\n    }\n    \n    /**\n     * Get the rules in the category\n     * @param componentContent the component content\n     * @param category the category name\n     * @returns the rules in the category\n     */\n    getRulesByCategoryName(componentContent, category) {\n        \n        var rules = [];\n        \n        if (componentContent != null) {\n            \n            // get all the rules\n            var tempRules = componentContent.rules;\n            \n            if (tempRules != null) {\n                \n                // loop through all the rules\n                for (var r = 0; r < tempRules.length; r++) {\n                    var rule = tempRules[r];\n                    \n                    if (rule != null) {\n                        \n                        // get the categories the rule is in\n                        var categories = rule.categories;\n                        \n                        if (categories != null) {\n                            \n                            // loop through categories the rule is in\n                            for (var c = 0; c < categories.length; c++) {\n                                var tempCategory = categories[c];\n                                \n                                if (category == tempCategory) {\n                                    /*\n                                     * the rule is in the category we are\n                                     * searching for\n                                     */\n                                    rules.push(rule);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return rules;\n    }\n    \n    /**\n     * Get nodes by label\n     * @param conceptMapData the concept map student data\n     * @param label the node label to look for\n     * @returns all the nodes with the given label\n     */\n    getNodesByLabel(conceptMapData, label) {\n        \n        var nodesByLabel = [];\n        \n        if (conceptMapData != null) {\n            \n            var nodes = conceptMapData.nodes;\n            \n            if (nodes != null) {\n                \n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n                    \n                    if (node != null) {\n                        \n                        if (label == node.label || label == 'any') {\n                            /*\n                             * we have found a node with the label we are \n                             * looking for\n                             */\n                            nodesByLabel.push(node);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return nodesByLabel;\n    }\n    \n    /**\n     * Get links with the given source node label, link label, and destination\n     * node label\n     * @param conceptMapData the concept map student data\n     * @param nodeLabel the source node label\n     * @param linkLabel the link label\n     * @param otherNodeLabel the destination node label\n     * @returns the links with the given source node label, link label, and \n     * destination node label\n     */\n    getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel) {\n        \n        var resultLinks = [];\n        \n        if (conceptMapData != null) {\n            \n            var links = conceptMapData.links;\n            \n            if (links != null) {\n                \n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var tempLink = links[l];\n                    \n                    if (tempLink != null) {\n                        \n                        // get the labels\n                        var tempLinkLabel = tempLink.label;\n                        var sourceNodeLabel = tempLink.sourceNodeLabel;\n                        var destinationNodeLabel = tempLink.destinationNodeLabel;\n                        \n                        if ((nodeLabel == sourceNodeLabel || nodeLabel == 'any') && \n                            (linkLabel == tempLinkLabel || linkLabel == 'any') && \n                            (otherNodeLabel == destinationNodeLabel || otherNodeLabel == 'any')) {\n                                \n                            // the labels match the ones we are looking for\n                            resultLinks.push(tempLink);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return resultLinks;\n    }\n    \n    /**\n     * Check if any of the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if any of the rules are satisifed\n     * false if none of the rules are satisified\n     */\n    any(componentContent, conceptMapData, args) {\n        \n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n            \n            // get a rule name\n            var ruleName = args[n];\n            \n            // check if the rule is satisifed\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n            \n            if (ruleResult) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Check if all the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if all the rules are satisifed\n     * false if any of the rules are not satisfied\n     */\n    all(componentContent, conceptMapData, args) {\n        var result = true;\n        \n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n            \n            // get a rule name\n            var ruleName = args[n];\n            \n            // check if the rule is satisfied\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n            \n            result = result && ruleResult;\n        }\n        return result;\n    }\n    \n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the \n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n}\n\n\n/**\n * A ConceptMapNode that represents a node in the ConceptMap component\n */\nclass ConceptMapNode {\n    \n    /**\n     * The constructor for creating ConceptMapNodes\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param filePath the path of the image file that represents the node\n     * @param label the label of the node\n     * @param x the x position of the node\n     * @param y the y position of the node\n     * @param width the the width of the node\n     * @param height the height of the node\n     */\n    constructor(ConceptMapService, draw, id, originalId, filePath, label, x, y, width, height) {\n\n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n        \n        // remember the svg.js draw object so we can draw onto it\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // remember the file path e.g. \"/wise/curriculum/108/assets/Space.png\"\n        this.filePath = filePath;\n        \n        if (this.filePath != null) {\n            // get the file name e.g. \"Space.png\"\n            this.fileName = this.filePath.substring(this.filePath.lastIndexOf('/') + 1);\n        }\n        \n        // remember the label\n        this.label = label;\n        \n        // create the svg image object\n        this.image = this.draw.image(this.filePath, width, height);\n        \n        // remember the width\n        this.width = width;\n        \n        // remember the height\n        this.height = height;\n        \n        // create a group to contain all the elements of this node\n        this.group = this.draw.group();\n        \n        // flag that specifies whether this node is highlighted by the student\n        this.highlighted = false;\n        \n        // the color of the delete button\n        this.deleteButtonColor = 'gray';\n        \n        // create the connector that students will use to create links\n        this.connector = this.createConnector();\n        \n        // create the delete button\n        this.deleteButtonGroup = this.createDeleteButtonGroup();\n        \n        // create the text group\n        this.textGroup = this.createTextGroup();\n        \n        /*\n         * create the border that displays when the node is highighted or\n         * moused over\n         */\n        this.border = this.createBorder();\n        \n        // remember the x and y coordinates\n        this.x = x;\n        this.y = y;\n        \n        // initialize the outgoing and incoming links arrays\n        this.outgoingLinks = [];\n        this.incomingLinks = [];\n        \n        // add all the elements to the group\n        this.group.add(this.border);\n        this.group.add(this.image);\n        this.group.add(this.connector);\n        this.group.add(this.deleteButtonGroup);\n        this.group.add(this.textGroup);\n        \n        // hide the border and delete button\n        this.border.hide();\n        this.deleteButtonGroup.hide();\n        \n        // set the position of the group\n        this.group.x(x);\n        this.group.y(y);\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapNode\n     * @returns a JSON object containing the data of the ConceptMapNode\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.fileName = this.fileName;\n        jsonObject.filePath = this.filePath;\n        jsonObject.label = this.label;\n        jsonObject.x = this.x;\n        jsonObject.y = this.y;\n        jsonObject.width = this.width;\n        jsonObject.height = this.height;\n        \n        jsonObject.outgoingLinks = [];\n        jsonObject.incomingLinks = [];\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            var instanceId = outgoingLink.getId();\n            var originalId = outgoingLink.getOriginalId();\n            var label = outgoingLink.getLabel();\n            \n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n            \n            jsonObject.outgoingLinks.push(tempLinkObject);\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            var incomingLink = this.incomingLinks[il];\n            \n            var instanceId = incomingLink.getId();\n            var originalId = incomingLink.getOriginalId();\n            var label = incomingLink.getLabel();\n            \n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n            \n            jsonObject.incomingLinks.push(tempLinkObject);\n        }\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Create the border that displays when the node is highlighted or\n     * moused over.\n     * @returns the svg rectangle that represents the border\n     */\n    createBorder() {\n        \n        // create the rectangle\n        this.border = this.draw.rect(this.width, this.height);\n        this.border.fill('none');\n        this.border.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        return this.border;\n    }\n    \n    /**\n     * Create the connector that students will use to create links from this\n     * node.\n     * @returns the svg circle that represents the connector\n     */\n    createConnector() {\n        \n        // create the circle\n        var connectorRadius = 10;\n        this.connector = this.draw.circle();\n        this.connector.radius(connectorRadius);\n        this.connector.cx(this.width / 2);\n        this.connector.cy(0);\n        this.connector.fill({ color: '#cccccc', opacity: 0.4 });\n        this.connector.stroke({ color: '#333333', opacity: 0.2 });\n        \n        return this.connector;\n    }\n    \n    /**\n     * Create the delete button. The delete button is a group that contains\n     * a circle and an x.\n     * @returns a group that contains a circle and an x\n     */\n    createDeleteButtonGroup() {\n        \n        // create a group to contain the circle and x for the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButtonCircle = this.draw.circle();\n        this.deleteButtonCircle.radius(deleteButtonRadius);\n        this.deleteButtonCircle.cx(this.width);\n        this.deleteButtonCircle.cy(0);\n        this.deleteButtonCircle.fill({ opacity: 0.0 });\n        this.deleteButtonCircle.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        // create the x by first creating a + and then rotating it 45 degrees\n        \n        // get the top location of the +\n        var topX = 0;\n        var topY = 0 - (deleteButtonRadius * 0.7);\n        \n        // get the bottom location of the +\n        var bottomX = 0;\n        var bottomY = 0 + (deleteButtonRadius * 0.7);\n        \n        // get the left position of the +\n        var leftX = 0 - (deleteButtonRadius * 0.7);\n        var leftY = 0;\n        \n        // get the right position of the +\n        var rightX = 0 + (deleteButtonRadius * 0.7);\n        var rightY = 0;\n        \n        // draw the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n        \n        // rotate the + to turn it into an x\n        this.deleteButtonX.transform({ rotation: 45 });\n        \n        // move the x to the upper right of the group\n        this.deleteButtonX.translate(this.width, 0);\n        \n        /*\n         * disable pointer events on the x so that clicks will pass through\n         * and hit the circle. this way we only need to set a listener on the\n         * circle for click events.\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the circle and the x\n        this.deleteButtonGroup.add(this.deleteButtonCircle);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        return this.deleteButtonGroup;\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        // create the text element\n        this.text = this.draw.text(this.label);\n        this.text.attr('x', 5);\n        //this.text.attr('x', 0);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        // add the text group to the link group\n        this.group.add(this.textGroup);\n        \n        var width = 0;\n        \n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n            \n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n        \n        this.textRect.attr('width', width);\n        \n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Get the id of the node\n     * @returns the id of the node\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the group id of the node\n     * @returns the group id of the node\n     */\n    getGroupId() {\n        var groupId = null;\n        \n        if (this.group != null) {\n            // get the id of the group which we will use as the id of the node\n            groupId = this.group.id();\n        }\n        \n        return groupId;\n    }\n    \n    /**\n     * Get the label\n     * @returns the label of the node\n     */\n    getLabel() {\n        return this.label;\n    }\n    \n    /**\n     * Set the label of the node\n     * @param label the label of the node\n     */\n    setLabel(label) {\n        \n        // remember the label\n        this.label = label;\n        \n        // set the label into the text element\n        this.text.text(label);\n        \n        var width = 0;\n        \n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n            \n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n        \n        this.textRect.attr('width', width);\n        \n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    cx() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.image.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    cy() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.image.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center x coordinate of the group\n     */\n    connectorCX() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupX = this.group.x();\n            \n            /*\n             * get the center x coordinate of the image relative to the group. \n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.connector.cx();\n            \n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Get the center y coordinate of the group\n     */\n    connectorCY() {\n        var val = 0;\n        \n        if (this.group != null && this.image != null) {\n            \n            // get the group\n            var groupY = this.group.y();\n            \n            /*\n             * get the center y coordinate of the image relative to the group. \n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.connector.cy();\n            \n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n        \n        return val;\n    }\n    \n    /**\n     * Getter/setter for whether the node is highlighted\n     * @parm value (optional) boolean value that sets the highlighted value\n     * @returns whether the node is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /** \n     * Get the group\n     * @returns the group\n     */\n    getGroup() {\n        return this.group;\n    }\n    \n    /**\n     * Show the delete button group\n     */\n    showDeleteButton() {\n        this.deleteButtonGroup.show();\n    }\n    \n    /**\n     * Hide the delete button group\n     */\n    hideDeleteButton() {\n        this.deleteButtonGroup.hide();\n    }\n    \n    /**\n     * Show the border of the node\n     */\n    showBorder() {\n        this.border.show();\n    }\n    \n    /**\n     * Hide the border of the node\n     */\n    hideBorder() {\n        this.border.hide();\n    }\n    \n    /**\n     * Get the connector of the node\n     */\n    getConnector() {\n        return this.connector;\n    }\n    \n    /**\n     * Get the id of the connector\n     */\n    getConnectorId() {\n        var id = null;\n        \n        if (this.connector != null) {\n            id = this.connector.id();\n        }\n        \n        return id;\n    }\n    \n    /**\n     * Get the x position of the group within the svg\n     * @returns the x position of the group\n     */\n    getGroupX() {\n\n        var x = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the x location of the group\n             */\n            x = this.group.x();\n        }\n        \n        return x;\n    }\n    \n    /**\n     * Get the y position of the group within the svg\n     * @returns the y position of the group\n     */\n    getGroupY() {\n        var y = 0;\n        \n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the y location of the group\n             */\n            y = this.group.y();\n        }\n        \n        return y;\n    }\n    \n    /**\n     * Get the x position of the image within the svg\n     * @returns the x position of the image\n     */\n    getImageX() {\n        \n        // get the x position of the group\n        var groupX = this.getGroupX();\n        \n        // get the x position of the image relative to the group\n        var imageRelativeX = this.image.x();\n        \n        // add the values together to get the absolute x position of the image\n        var imageX = groupX + imageRelativeX;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            if (bbox != null) {\n                // get the x position of the bounding box on the group\n                var bboxX = bbox.x;\n                \n                // compensate for the shift of the group\n                imageX = imageX - bboxX;\n            }\n        }\n        \n        return imageX;\n    }\n    \n    /**\n     * Get the y position of the image within the svg\n     * @returns the y position of the image\n     */\n    getImageY() {\n        \n        // get the y position of the group\n        var groupY = this.getGroupY();\n        \n        // get the y position of the image relative to the group\n        var imageRelativeY = this.image.y();\n        \n        // add the values together to get the absolute y position of the image\n        var imageY = groupY + imageRelativeY;\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n            \n            // get the y position of the bounding box on the group\n            var bboxY = bbox.y;\n            \n            // compensate for the shift of the group\n            imageY = imageY - bboxY;\n        }\n        \n        return imageY;\n    }\n    \n    /**\n     * Get the width of the image\n     * @returns the width of th eimage\n     */\n    getImageWidth() {\n        var width = 0;\n        \n        if (this.image != null) {\n            width = this.image.width();\n        }\n        \n        return width\n    }\n    \n    /**\n     * Get the height of the image\n     * @returns the height of the image\n     */\n    getImageHeight() {\n        var height = 0;\n        \n        if (this.image != null) {\n            height = this.image.height();\n        }\n        \n        return height;\n    }\n    \n    /**\n     * Set the mouseover listener for the group\n     * @param nodeMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setNodeMouseOver(nodeMouseOverFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseover(nodeMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the group\n     * @param nodeMouseOutFunction the function to call when the mouse moves\n     * out of the group\n     */\n    setNodeMouseOut(nodeMouseOutFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseout(nodeMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the group\n     * @param nodeMouseDownFunction the function to call when the mouse is \n     * down on the group\n     */\n    setNodeMouseDown(nodeMouseDownFunction) {\n        \n        if (this.group != null) {\n            this.group.mousedown(nodeMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseup listener for the group\n     * @param nodeMouseUpFunction the function to call when the mouse is \n     * released over the group\n     */\n    setNodeMouseUp(nodeMouseUpFunction) {\n        \n        if (this.group != null) {\n            this.group.mouseup(nodeMouseUpFunction);\n        }\n    }\n    \n    /**\n     * Set the click listener for the image\n     * @param nodeMouseClickFunction the function to call when the image is\n     * clicked\n     */\n    setNodeMouseClick(nodeMouseClickFunction) {\n        \n        if (this.group != null) {\n            this.image.click(nodeMouseClickFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the connector\n     * @param connectorMouseDownFunction the function to call when the mouse\n     * is down on the connector\n     */\n    setConnectorMouseDown(connectorMouseDownFunction) {\n        \n        if (this.connector != null) {\n            this.connector.mousedown(connectorMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mousedown listener for the delete button\n     * @param deleteButtonMouseDownFunction the function to call when the mouse\n     * is down on the delete button\n     */\n    setDeleteButtonMouseDown(deleteButtonMouseDownFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mousedown(deleteButtonMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseover listener for the delete button\n     * @param deleteButtonMouseOverFunction the function to call when the mouse\n     * is over the delete button\n     */\n    setDeleteButtonMouseOver(deleteButtonMouseOverFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseover(deleteButtonMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Set the mouseout listener for the delete button\n     * @param deleteButtonMouseOutFunction the function to call when the mouse\n     * moves out of the delete button\n     */\n    setDeleteButtonMouseOut(deleteButtonMouseOutFunction) {\n        \n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseout(deleteButtonMouseOutFunction);\n        }\n    }\n    \n    /**\n     * Set the dragmove listener for the group\n     * @param dragMoveFunction the function to call when the group is dragged\n     */\n    setDragMove(dragMoveFunction) {\n        \n        if (this.group != null) {\n            \n            // set a listener for when the node is dragged\n            this.group.on('dragmove', dragMoveFunction);\n        }\n    }\n    \n    /**\n     * Set the x position\n     * @param x the x position\n     */\n    setX(x) {\n        this.x = x;\n        this.group.x(x);\n    }\n    \n    /**\n     * Set the y position\n     * @param y the y position\n     */\n    setY(y) {\n        this.y = y;\n        this.group.y(y);\n    }\n    \n    /**\n     * Add an outgoing link to the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    addOutgoingLink(outgoingLink) {\n        if (outgoingLink != null) {\n            this.outgoingLinks.push(outgoingLink);\n        }\n    }\n    \n    /**\n     * Remove an outgoing link from the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    removeOutgoingLink(outgoingLink) {\n        \n        if (outgoingLink != null) {\n            \n            // loop through all the outgoing links in this node\n            for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var tempOutgoingLink = this.outgoingLinks[ol];\n                \n                if (outgoingLink == tempOutgoingLink) {\n                    // we have found the outgoing link we want to remove\n                    this.outgoingLinks.splice(ol, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the outgoing links\n     * @return the outgoing links\n     */\n    getOutgoingLinks() {\n        return this.outgoingLinks;\n    }\n    \n    /**\n     * Add an incoming link to the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    addIncomingLink(incomingLink) {\n        if (incomingLink != null) {\n            this.incomingLinks.push(incomingLink);\n        }\n    }\n    \n    /**\n     * Remove an incoming link from the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    removeIncomingLink(incomingLink) {\n        \n        if (incomingLink != null) {\n            \n            // loop through the incoming links in the node\n            for (var il = 0; il < this.incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var tempIncomingLink = this.incomingLinks[il];\n                \n                if (incomingLink == tempIncomingLink) {\n                    // we have found the incoming link we want to remove\n                    this.incomingLinks.splice(il, 1);\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the incoming links\n     * @return the incoming links\n     */\n    getIncomingLinks() {\n        return this.incomingLinks;\n    }\n    \n    /**\n     * The function that is called when the node is moved\n     * @param event \n     */\n    dragMove(event) {\n        \n        // get the group\n        var group = this.getGroup();\n        \n        // get the x and y coordinates of the center of the image\n        var cx = this.cx();\n        var cy = this.cy();\n        \n        // update the local x, y values of the node for bookkeeping\n        this.x = group.x();\n        this.y = group.y();\n        \n        // get the outgoing links and incoming links\n        var outgoingLinks = this.outgoingLinks;\n        var incomingLinks = this.incomingLinks;\n        \n        if (outgoingLinks != null) {\n            \n            // loop through all the outgoing links\n            for (var ol = 0; ol < outgoingLinks.length; ol++) {\n                \n                // get an outgoing link\n                var outgoingLink = outgoingLinks[ol];\n                \n                // update the x, y coordinate of the tail of the link\n                var x1 = cx;\n                var y1 = cy;\n                \n                // calculate the nearest point to the destination node\n                var nearestPoint = outgoingLink.getNearestPointToDestinationNode(x1, y1);\n                x2 = nearestPoint.x;\n                y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                outgoingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n            \n            // loop through all the incoming links\n            for (var il = 0; il < incomingLinks.length; il++) {\n                \n                // get an incoming link\n                var incomingLink = incomingLinks[il];\n                \n                // reuse the coordinates of the tail of the link\n                var x1 = incomingLink.x1();\n                var y1 = incomingLink.y1();\n                \n                // calculate the nearest point to the source node\n                var nearestPoint = incomingLink.getNearestPointToDestinationNode(x1, y1);\n                var x2 = nearestPoint.x;\n                var y2 = nearestPoint.y;\n                \n                // update the coordinates of the link\n                incomingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n        }\n        \n        if (this.controller != null) {\n            // handle the student data changing\n            this.controller.studentDataChanged();\n        }\n        \n        // move the group to the front so that it shows up above other elements\n        group.front();\n    }\n    \n    /**\n     * Remove the node from the svg\n     */\n    remove() {\n        \n        // make the group not draggable\n        this.group.draggable(false);\n        \n        // remove the group\n        this.group.remove();\n        \n        // remove the image\n        this.image.remove();\n        \n        // remove the connector\n        this.connector.remove();\n        \n        // remove the delete button\n        this.deleteButtonCircle.remove();\n        this.deleteButtonX.remove();\n        this.deleteButtonGroup.remove();\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            \n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            if (outgoingLink != null) {\n                // remove the outgoing link\n                outgoingLink.remove();\n                \n                /*\n                 * move the counter back one because calling outgoingLink.remove()\n                 * has removed the outgoingLink from the outgoingLinks array\n                 */\n                ol--;\n            }\n        }\n        \n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            \n            // get an incoming link\n            var incomingLink = this.incomingLinks[il];\n            \n            if (incomingLink != null) {\n                // remove the incoming link\n                incomingLink.remove();\n                \n                /*\n                 * move the counter back one because calling incomingLink.remove()\n                 * has removed the incomingLink from the incomingLinks array\n                 */\n                il--;\n            }\n        }\n    }\n    \n    /**\n     * Get the links from this node to a given destination node\n     * @param destinationNode the destination node\n     */\n    getLinksToDestination(destinationNode) {\n        \n        var linksToDestination = [];\n        \n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            \n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n            \n            if (outgoingLink != null) {\n                if (destinationNode == outgoingLink.destinationNode) {\n                    /* \n                     * the destination of the link is the destination we are\n                     * looking for\n                     */\n                    linksToDestination.push(outgoingLink);\n                }\n            }\n        }\n        \n        return linksToDestination;\n    }\n    \n    /**\n     * Calculate the width that the text rectangle should be set to\n     * @param labelText the label text that will be displayed in the rectangle\n     * @return the width that the text rectangle should be set to\n     */\n    calculateTextRectWidth(labelText) {\n        var width = 0;\n        \n        if (labelText != null) {\n            width = (labelText.length * 6) + 10;\n        }\n        \n        return width;\n    }\n}\n\n/**\n * A ConceptMapLink that represents a link in the ConceptMap component\n */\nclass ConceptMapLink {\n    \n    /**\n     * The constructor to create a ConceptMapLink object\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param id the instance id of the link\n     * @param originalId the original authored id of the link\n     * @param sourceNode the source ConceptMapNode\n     * @param destinationNode the destination ConceptMapNode\n     * @param label the text label\n     * @param color the color of the link\n     * @param curvature the curvature of the link\n     * @param startCurveUp whether the start of the link curves up\n     * @param endCurveUp whether the end of the link curves up\n     */\n    constructor(ConceptMapService, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp) {\n        \n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n        \n        // remember the svg.js draw object\n        this.draw = draw;\n        \n        // set the id\n        this.id = id;\n        \n        // set the original id\n        this.originalId = originalId;\n        \n        // the arrow head of the link\n        this.head = null;\n        \n        // the line of the link\n        this.path = null;\n        \n        // set the color of the link\n        this.color = color;\n        \n        if (this.color == null) {\n            // if no color is specified, use a default color\n            this.color = 'blue';\n        }\n        \n        // whether the link is highlighted\n        this.highlighted = false;\n        \n        // create a group to contain the path and head\n        this.group = this.draw.group();\n        \n        // where to place the text of the link along the line\n        this.textPercentageLocationOnLink = 0.6\n        \n        // remember the source node\n        this.sourceNode = sourceNode;\n        \n        /*\n         * used to remember the destination node later after the destination\n         * node has been chosen\n         */\n        this.destinationNode = destinationNode;\n        \n        // remember the curvature\n        this.curvature = curvature;\n        \n        if (this.curvature == null) {\n            this.curvature = 0.5;\n        }\n        \n        // set whether the link curves up or down\n        this.startCurveUp = startCurveUp;\n        this.endCurveUp = endCurveUp;\n        \n        if (this.startCurveUp == null || this.endCurveUp == null) {\n            /*\n             * start and end curve up have not been specified so we will set\n             * it at random\n             */\n            \n            // choose a random integer 0 or 1\n            var randInt = Math.floor(Math.random() * 2);\n            \n            if (randInt == 0) {\n                // set the link to curve down\n                this.startCurveUp = false;\n                this.endCurveUp = false;\n            } else {\n                // set the link to curve up\n                this.startCurveUp = true;\n                this.endCurveUp = true;\n            }\n        }\n        \n        // create a curved link\n        this.curvedLink = true;\n        \n        // initialize the coordinates of both ends of the link\n        var x1 = this.sourceNode.cx();\n        var y1 = this.sourceNode.cy();\n        var x2 = x1;\n        var y2 = y1;\n        \n        if (this.destinationNode != null) {\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            x2 = nearestPoint.x;\n            y2 = nearestPoint.y;\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n        }\n        \n        if (this.curvedLink) {\n            // create a curved link\n            \n            // calculate the curved line in svg\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2);\n            \n            // get the line\n            var tail = arrowPathArraysObject[0];\n            \n            // get the arrow head\n            var head = arrowPathArraysObject[1];\n            \n            // draw the head and tail\n            this.head = this.draw.path(head.toString());\n            this.path = this.draw.path(tail.toString());\n        } else {\n            // create a straight line\n            this.path = this.draw.path('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // set the style of the link\n        this.path.attr('stroke', this.color);\n        this.path.attr('stroke-width', 3);\n        this.path.attr('fill', 'transparent');\n        this.head.attr('stroke', this.color);\n        this.head.attr('fill', this.color);\n        this.head.attr('pointer-events', 'none');\n        \n        /*\n         * remember the x and y coordinates of the source and destination\n         * so that we can look them up easily later\n         */\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        // add the tail and head to the group\n        this.group.add(this.path);\n        this.group.add(this.head);\n        \n        // create the text group for the link\n        this.createTextGroup();\n        \n        // text that describes the type of link chosen by the student\n        this.setLabel(label);\n        \n        if (this.label == null || this.label == '') {\n            // there is no label so we will hide the text group\n            this.hideTextGroup();\n        } else {\n            // there is a label so we will show the text group\n            this.showTextGroup();\n        }\n        \n        // create the delete button group\n        this.createDeleteButtonGroup();\n    }\n    \n    /**\n     * Get the JSON object representation of the ConceptMapLink\n     * @returns a JSON object containing the data of the ConceptMapLink\n     */\n    toJSONObject() {\n        var jsonObject = {};\n        \n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.color = this.color;\n        jsonObject.label = this.label;\n        jsonObject.curvature = this.curvature;\n        jsonObject.startCurveUp = this.startCurveUp;\n        jsonObject.endCurveUp = this.endCurveUp;\n        jsonObject.sourceNodeOriginalId = this.sourceNode.getOriginalId();\n        jsonObject.sourceNodeInstanceId = this.sourceNode.getId();\n        jsonObject.sourceNodeLabel = this.sourceNode.getLabel();\n        jsonObject.destinationNodeOriginalId = this.destinationNode.getOriginalId();\n        jsonObject.destinationNodeInstanceId = this.destinationNode.getId();\n        jsonObject.destinationNodeLabel = this.destinationNode.getLabel();\n        \n        return jsonObject;\n    }\n    \n    /**\n     * Get the id of the link\n     * @returns the id of the link\n     */\n    getId() {\n        return this.id;\n    }\n    \n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n    \n    /**\n     * Get the id of the group\n     * @returns the id of the group\n     */\n    getGroupId() {\n        return this.group.id();\n    }\n    \n    /**\n     * Get the x1 value\n     * @returns the x coordinate of the source of the link\n     */\n    x1() {\n        return this.path.attr('x1');\n    }\n    \n    /**\n     * Get the y1 value\n     * @returns the y coordinate of the source of the link\n     */\n    y1() {\n        return this.path.attr('y1');\n    }\n    \n    /**\n     * Get the x2 value\n     * @returns the x coordinate of the destination of the link\n     */\n    x2() {\n        return this.path.attr('x2');\n    }\n    \n    /**\n     * Get the y2 value\n     * @returns the y coordinate of the destination of the link\n     */\n    y2() {\n        return this.path.attr('y2');\n    }\n    \n    /**\n     * Set the original id\n     * @param originalId the original id\n     */\n    setOriginalId(originalId) {\n        this.originalId = originalId;\n    }\n    \n    /**\n     * Get the label\n     * @returns the label\n     */\n    getLabel() {\n        return this.label;\n    }\n    \n    /**\n     * Getter/setter for the highlighted value\n     * @param value (optional) the highlighted value\n     * @returns whether the link is highlighted\n     */\n    isHighlighted(value) {\n        \n        if (value != null) {\n            this.highlighted = value;\n        }\n        \n        return this.highlighted;\n    }\n    \n    /**\n     * Update the coordinates of the link\n     * @param x1 (optional) the x position of the source\n     * @param y1 (optional) the y position of the source\n     * @param x2 (optional) the x position of the destination\n     * @param y2 (optional) the y position of the destination\n     * @param isDragging whether the link is currently being dragged\n     */\n    updateCoordinates(x1, y1, x2, y2, isDragging) {\n        var array = this.path.array();\n        \n        if (this.curvedLink) {\n            // draw a curved link\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // calculate the line\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2, isDragging);\n            \n            // get the svg tail\n            var tail = arrowPathArraysObject[0];\n            \n            // get the svg head\n            var head = arrowPathArraysObject[1];\n            \n            // re-plot the head and path\n            this.head.plot(head.toString());\n            this.path.plot(tail.toString());\n        } else {\n            // draw a straight line\n            \n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n            \n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n            \n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n            \n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n            \n            // re-plot the line\n            this.path.plot('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n        \n        // update the coordinate values\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n        \n        if (this.deleteButtonGroup != null) {\n            // update the location of the delete button\n            var deleteButtonLocation = this.getDeleteButtonLocation();\n            this.deleteButtonGroup.x(deleteButtonLocation.x);\n            this.deleteButtonGroup.y(deleteButtonLocation.y);\n        }\n        \n        if (this.textGroup != null) {\n            // update the location of the text group\n            \n            // get the length of the line\n            var totalLength = this.path.node.getTotalLength();\n            \n            // get the coordinate of a point somewhere in the middel of the line\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            \n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n    \n    /**\n     * Calculate the curved line\n     * @param x1 the x coordinate of the source\n     * @param y1 the y coordinate of the source\n     * @param x2 the x coordinate of the destination\n     * @param y2 the y coordinate of the destination\n     * @param isDragging whether the line is currently being dragged\n     * @returns an array that contains the svg objects for the arrow head and line\n     */\n    calculateCurvedLine(x1, y1, x2, y2, isDragging) {\n        \n        var startx = x1;\n        var starty = y1;\n        var endx = x2;\n        var endy = y2;\n        var startCurveUp = true;\n        var endCurveUp = true;\n        var len = 15;\n        var angle = 45;\n        var curvature = 0.5;\n        var nodeRadius = 10;\n        \n        // set the amount of curvature of the line\n        curvature = this.curvature;\n        \n        // whether the link should curve up or down\n        startCurveUp = this.startCurveUp;\n        endCurveUp = this.endCurveUp;\n\n        // calculate the svg objects for the arrow head and line\n        var arrowPathArraysObject = this.ConceptMapService.arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius);\n\n        return arrowPathArraysObject;\n    }\n    \n    /**\n     * Set the destination node\n     * @param destinationNode the destination ConceptMapNode object\n     */\n    setDestination(destinationNode) {\n        \n        if (destinationNode != null) {\n            \n            // get x and y of the tail\n            var x1 = this.path.attr('x1');\n            var y1 = this.path.attr('y1');\n            \n            // remember the destination node\n            this.destinationNode = destinationNode;\n            \n            /* \n             * check if there are any links with that have the same source,\n             * destination, and direction. if there is a link that has the\n             * same source, destination, and direction, we will try to use\n             * a different direction that hasn't already been used. if all\n             * directions have already been used, we will use the original\n             * direction the user specified. there are three link directions, \n             * up, straight, and down.\n             *      ___\n             * up  /   \\\n             *    o    o\n             *\n             * straight o------o\n             *\n             *      o   o\n             * down \\__/\n             */\n            \n            var directionAlreadyUsed = false;\n            var direction = '';\n            \n            if (this.curvature == 0) {\n                // the user has created the curve to be straight\n                direction = 'straight';\n            } else if (this.startCurveUp && this.endCurveUp) {\n                // the user has created the curve that starts by pointing up\n                direction = 'up';\n            } else if (!this.startCurveUp && !this.endCurveUp) {\n                // the user has created the curve that starts by pointing down\n                direction = 'down';\n            }\n            \n            // get all the links that have the same source and destination\n            var parallelLinks = this.sourceNode.getLinksToDestination(destinationNode);\n            \n            var usedDirections = [];\n            \n            // loop through all the links that have the same source and destination\n            for (var p = 0; p < parallelLinks.length; p++) {\n                var parallelLink = parallelLinks[p];\n                \n                if (parallelLink != null) {\n                    \n                    var curvature = parallelLink.curvature;\n                    var startCurveUp = parallelLink.startCurveUp;\n                    var endCurveUp = parallelLink.endCurveUp;\n                    \n                    var tempDirection = '';\n                    \n                    if (curvature == 0) {\n                        // the other link is straight\n                        tempDirection = 'straight';\n                    } else if (startCurveUp && endCurveUp) {\n                        // the other link points up\n                        tempDirection = 'up';\n                    } else if (!startCurveUp && !endCurveUp) {\n                        // the other link points down\n                        tempDirection = 'down'\n                    }\n                    \n                    if (direction == tempDirection) {\n                        /*\n                         * the direction is the same as the direction the user\n                         * has specified\n                         */\n                        directionAlreadyUsed = true;\n                    }\n                    \n                    // keep track of the directions that were used\n                    usedDirections.push(tempDirection);\n                }\n            }\n            \n            if (directionAlreadyUsed) {\n                /*\n                 * the direction the user specified is already used so we will\n                 * try to find a direction that hasn't been used\n                 */\n                 \n                if (usedDirections.indexOf('up') == -1) {\n                    /*\n                     * we have not used the up direction yet so we will make\n                     * the link point up\n                     */\n                    this.curvature = 0.5;\n                    this.startCurveUp = true;\n                    this.endCurveUp = true;\n                } else if (usedDirections.indexOf('straight') == -1) {\n                    /*\n                     * we have not used the straight direction yet so we will\n                     * make the link point straight\n                     */\n                    this.curvature = 0.0;\n                    this.startCurveUp = true;\n                    this.endCurveUp = true;\n                } else if (usedDirections.indexOf('down') == -1) {\n                    /*\n                     * we have not used the down direction yet so we will make\n                     * the link point down\n                     */\n                    this.curvature = 0.5;\n                    this.startCurveUp = false;\n                    this.endCurveUp = false;\n                }\n            }\n            \n            /*\n             * get the nearest point from the center of the source node to the \n             * destination node along the perimeter of the destination node \n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            var x2 = nearestPoint.x;\n            var y2 = nearestPoint.y;\n            \n            // update the coordinates of the link\n            var isDragging = false;\n            this.updateCoordinates(x1, y1, x2, y2, isDragging);\n            \n            // connect the link to the nodes\n            this.connectLinkToNodes();\n            \n            // hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Get the nearest point to the destination node from a given x, y point\n     * @param x the x value of the source point\n     * @param y the y value of the source point\n     * @returns an object containing an x and y field\n     */\n    getNearestPointToDestinationNode(x, y) {\n        \n        // get the coordinates of the upper left corner of the image\n        var rectMinX = this.destinationNode.getImageX();\n        var rectMinY = this.destinationNode.getImageY();\n        \n        // get the width and height of the image\n        var width = this.destinationNode.getImageWidth();\n        var height = this.destinationNode.getImageHeight();\n        \n        /*\n        var destinationNodeGroup = this.destinationNode.getGroup();\n        var destinationNodeGroupBBox = destinationNodeGroup.bbox();\n        \n        rectMinX = this.destinationNode.getGroupX();\n        rectMinY = this.destinationNode.getGroupY();\n        \n        width = destinationNodeGroupBBox.width;\n        height = destinationNodeGroupBBox.height;\n        */\n        \n        if (x == null && y == null) {\n            // get the coordinates of the source if x and y were not provided\n            x = this.path.attr('x1');\n            y = this.path.attr('y1');\n        }\n        \n        /*\n         * find the nearest point from the source to anywhere along the \n         * rectangular perimeter of the destination image\n         */\n        var point = this.getNearestPointInPerimeter(rectMinX, rectMinY, width, height, x, y);\n        \n        return point;\n    }\n    \n    /**\n     * Get the nearest point on a rectangle from a source point\n     * @param l the upper left x value of the rectangle\n     * @param t the upper left y value of the rectangle\n     * @param w the width of the rectangle\n     * @param h the height of the rectangle\n     * @param x the source point x value\n     * @param y the source point y value\n     * @returns the point on the rectangle that is closest to the \n     */\n    getNearestPointInPerimeter(l, t, w, h, x, y) {\n        var r = l + w;\n        var b = t + h;\n        \n        var x = this.clamp(x, l , r);\n        var y = this.clamp(y, t, b);\n        \n        var dl = Math.abs(x - l);\n        var dr = Math.abs(x - r);\n        var dt = Math.abs(y - t);\n        var db = Math.abs(y - b);\n        \n        var m = Math.min(dl, dr, dt, db);\n        \n        var point = {};\n        \n        if (m == dt) {\n            point.x = x;\n            point.y = t;\n        } else if (m == db) {\n            point.x = x;\n            point.y = b;\n        } else if (m == dl) {\n            point.x = l;\n            point.y = y;\n        } else {\n            point.x = r;\n            point.y = y;\n        }\n        \n        return point;\n    }\n    \n    /**\n     * Helper function for getNearestPointInPerimeter\n     */\n    clamp(x, lower, upper) {\n        return Math.max(lower, Math.min(upper, x));\n    }\n    \n    /**\n     * Set the color of the link\n     * @param color the color\n     */\n    setColor(color) {\n        \n        if (color != null) {\n            // set the color styling\n            this.color = color;\n            this.path.attr('stroke', this.color);\n            this.head.attr('stroke', this.color);\n            this.head.attr('fill', this.color);\n            this.deleteButton.attr('stroke', this.color);\n            this.deleteButtonX.attr('stroke', this.color);\n        }\n    }\n    \n    /**\n     * Set the label\n     * @param label the text label\n     */\n    setLabel(label) {\n        \n        if (label != null) {\n            \n            // remember the label\n            this.label = label;\n            \n            // set the text into the text element\n            this.text.text(label);\n            \n            // show the text group now that it has a label\n            this.showTextGroup();\n            \n            // reset the width to adjust to the new text length\n            var width = 0;\n            \n            try {\n                // get the width of the bounding box of the text node\n                var textBBox = this.text.node.getBBox();\n                \n                if (textBBox.width == 0) {\n                    width = this.calculateTextRectWidth(this.label);\n                } else {\n                    width = textBBox.width + 10;\n                }\n            } catch(e) {\n                /*\n                 * we were unable to get the bounding box (likely because\n                 * Firefox threw an error when trying to call getBBox())\n                 * so we will calculate the width based on the label text\n                 */\n                width = this.calculateTextRectWidth(this.label);\n            }\n            \n            this.textRect.attr('width', width);\n            \n            // recalculate the position of the svg text object\n            var totalLength = this.path.node.getTotalLength();\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n    \n    /**\n     * Connect a link the its source and destination nodes\n     */\n    connectLinkToNodes() {\n        \n        if (this.sourceNode != null && this.destinationNode != null) {\n            \n            // add the link to the outgoing links of its source node\n            this.sourceNode.addOutgoingLink(this);\n            \n            // add the link to the incoming links of its destination node\n            this.destinationNode.addIncomingLink(this);\n        }\n    }\n    \n    /**\n     * Create the delete button for the link\n     */\n    createDeleteButtonGroup() {\n        // create a group to contain the elements of the delete button\n        this.deleteButtonGroup = this.draw.group();\n        \n        /*\n         * create an invisible circle that is placed behind the delete button\n         * and has a larger radius than the delete button. this is used for\n         * mouse over purposes so that we can keep the delete button visible\n         * when the mouse is around the area of the delete button\n         */\n        var invisibleCircleRadius = 30;\n        this.invisibleCircle = this.draw.circle();\n        this.invisibleCircle.radius(invisibleCircleRadius);\n        this.invisibleCircle.fill({ opacity: 0.0});\n        \n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButton = this.draw.circle();\n        this.deleteButton.radius(deleteButtonRadius);\n        this.deleteButton.fill({ opacity: 0.0 });\n        this.deleteButton.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n        /*\n         * create the x part of the delete button by creating a + and then\n         * rotating it 45 degrees\n         */\n        \n        // get the coordinate of the center of the delete button\n        var deleteButtonMidpointX = this.deleteButton.cx();\n        var deleteButtonMidpointY = this.deleteButton.cy();\n        \n        // get the coordinates of the top of the +\n        var topX = deleteButtonMidpointX;\n        var topY = deleteButtonMidpointY - (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the bottom of the +\n        var bottomX = deleteButtonMidpointX;\n        var bottomY = deleteButtonMidpointY + (deleteButtonRadius * 0.7);\n        \n        // get the coordinates of the left of the +\n        var leftX = deleteButtonMidpointX - (deleteButtonRadius * 0.7);\n        var leftY = deleteButtonMidpointY;\n        \n        // get the coordinates of the right of the +\n        var rightX = deleteButtonMidpointX + (deleteButtonRadius * 0.7);\n        var rightY = deleteButtonMidpointY;\n        \n        // create the path for the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        \n        // draw the path\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: this.color, opacity: 1.0, width: 2 });\n        \n        /// rotate the + to create the x\n        this.deleteButtonX.rotate(45);\n        \n        /*\n         * disable pointer events on the x so that we only need to set a \n         * mouse listener on the circle\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n        \n        // add the invisible circle, regular circle, and x to the group\n        this.deleteButtonGroup.add(this.invisibleCircle);\n        this.deleteButtonGroup.add(this.deleteButton);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n        \n        // set the location of the delete button group\n        var location = this.getDeleteButtonLocation();\n        var x = location.x;\n        var y = location.y;\n        this.deleteButtonGroup.x(x);\n        this.deleteButtonGroup.y(y);\n        \n        // set the listener for when the mouse is over the group\n        this.deleteButtonGroup.mouseover((event) => {\n            this.deleteButtonGroupMouseOver(event);\n        });\n        \n        // set the listener for when the mouse moves out of the group\n        this.deleteButtonGroup.mouseout((event) => {\n            this.deleteButtonGroupMouseOut(event);\n        });\n        \n        // add the delete button group to the link group\n        this.group.add(this.deleteButtonGroup);\n        \n        /*\n         * hide the delete button. we only need to show the delete button\n         * when the link is active.\n         */\n        this.deleteButtonGroup.hide();\n    }\n    \n    /**\n     * Called when the mouse is over the delete button group\n     * @param event the mouseover event\n     */\n    deleteButtonGroupMouseOver(event) {\n        // show the delete button\n        this.showDeleteButton();\n    }\n    \n    /**\n     * Called when the mouse leaves the delete button group\n     * @param event the mouseout event\n     */\n    deleteButtonGroupMouseOut(event) {\n        if (!this.highlighted) {\n            // the link is not highlighted so we will hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n    \n    /**\n     * Called when the delete button is clicked\n     * @param deleteButtonClickedFunction the function to call when the delete\n     * button is clicked\n     */\n    setDeleteButtonClicked(deleteButtonClickedFunction) {\n        // listen for the click event on the delete button to call the function\n        this.deleteButton.click(deleteButtonClickedFunction);\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the group\n     * @param linkMouseDownFunction the function to call when the mouse is\n     * clicked down on the group\n     */\n    setLinkMouseDown(linkMouseDownFunction) {\n        \n        if (this.group != null) {\n            /*\n             * listen for the mousedown event on the group to call\n             * the function\n             */\n            this.group.mousedown(linkMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse is clicked down on the link text group\n     * @param linkTextMouseDownFunction the function to call when the mouse is\n     * clicked down on the link text group\n     */\n    setLinkTextMouseDown(linkTextMouseDownFunction) {\n        \n        if (this.textGroup != null) {\n            /*\n             * listen for the mousedown event on the link text group to call\n             * the function\n             */\n            this.textGroup.mousedown(linkTextMouseDownFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse is over the group\n     * @param linkMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setLinkMouseOver(linkMouseOverFunction) {\n        if (this.group != null) {\n            // listen for the mouseover event on the group to call the function\n            this.group.mouseover(linkMouseOverFunction);\n        }\n    }\n    \n    /**\n     * Called when the mouse leaves the group\n     * @param linkMouseOutFunction the function to call when the mouse leaves\n     * the group\n     */\n    setLinkMouseOut(linkMouseOutFunction) {\n        if (this.group != null) {\n            // listen for the mouseout event on the group to call the function\n            this.group.mouseout(linkMouseOutFunction);\n        }\n    }\n    \n    /**\n    * Calculate the location of the delete button for the link\n    *\n    * Note: This function and the associated functions that are called by this\n    * function are taken from the Concord MySystem github project.\n    * https://github.com/concord-consortium/mysystem_sc\n    * The code is found in the _setRemoveButtonLocation function in the link.js file.\n    * mysystem_sc/apps/my_system/views/link.js\n    */\n    getDeleteButtonLocation() {\n        //var line = raphaelObject.items[2];\n        \n        var line = this.path.node;\n        var distanceAlongLine = 35;\n        var distanceAlongNormal = 18;\n        var len, p1, p2, scale, dx, dy, x, y, occluded;\n        \n        /*\n        var link = this.get('content');\n        if (!link.isComplete()) return;\n        if (line.attr('path').length < 1) return;     // this can happen after our content is destroyed\n        */\n        \n        len = line.getTotalLength();\n        p2  = line.getPointAtLength(len);\n        \n        if (len > 50) {\n            p1 = line.getPointAtLength(len - distanceAlongLine);\n            \n            dx = p2.x - p1.x;\n            dy = p2.y - p1.y;\n            scale = distanceAlongNormal / distanceAlongLine * (dx > 0 ? 1 : -1);\n            \n            x = p1.x + scale * dy;\n            y = p1.y - scale * dx;\n            //occluded = NO;\n        }\n        else {\n            x = 0;\n            y = 0;\n            //occluded = YES;\n        }\n        \n        /*\n        this.set('removeButtonX', x);\n        this.set('removeButtonY', y);\n        this.set('isRemoveButtonOccluded', occluded);\n        */\n        \n        var location = {};\n        location.x = x;\n        location.y = y;\n        \n        return location;\n    }\n    \n    /**\n     * Show the delete button\n     */\n    showDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the delete button\n     */\n    hideDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.hide();\n        }\n    }\n    \n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n        \n        // create the group\n        this.textGroup = this.draw.group();\n        \n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n        \n        var label = \"\";\n        \n        // create the text element\n        this.text = this.draw.text(label);\n        this.text.attr('x', 5);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n        \n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n        \n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n        \n        var width = 0;\n        \n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n            \n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n        \n        this.textRect.attr('width', width);\n        \n        // set the location of the text to be somewhere along the line of the link\n        var totalLength = this.path.node.getTotalLength();\n        var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n        this.textGroup.cx(midPoint.x);\n        this.textGroup.cy(midPoint.y);\n        \n        // hide the text group until the student has chosen a link type\n        this.textGroup.hide();\n        \n        /*\n         * set the link group id into the text group so we can look it up\n         * later when the mouse is clicked down on the text group\n         */\n        this.textGroup.node.linkGroupId = this.group.id();\n        \n        return this.textGroup;\n    }\n    \n    /**\n     * Move the text group to the front so that it won't be blocked behind\n     * another element when the student tries to click on the text group.\n     */\n    moveTextGroupToFront() {\n        this.textGroup.front();\n    }\n    \n    /**\n     * Show the text group\n     */\n    showTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.show();\n        }\n    }\n    \n    /**\n     * Hide the text group\n     */\n    hideTextGroup() {\n        \n        if (this.textGroup != null) {\n            this.textGroup.hide();\n        }\n    }\n    \n    /**\n     * Remove all the references to the link and also remove all the elements\n     * from the svg\n     */\n    remove() {\n        \n        if (this.sourceNode != null) {\n            // remove the link from the source node's outgoing links\n            this.sourceNode.removeOutgoingLink(this);\n        }\n        \n        if (this.destinationNode != null) {\n            // remove the link from the destination node's incoming links\n            this.destinationNode.removeIncomingLink(this);\n        }\n        \n        if (this.path != null) {\n            // remove the line\n            this.path.remove();\n        }\n        \n        if (this.head != null) {\n            // remove the arrow head\n            this.head.remove();\n        }\n        \n        if (this.deleteButtonGroup != null) {\n            // remove the delete button group\n            this.deleteButtonGroup.remove();\n        }\n        \n        if (this.textGroup != null) {\n            // remove the text group\n            this.textGroup.remove();\n        }\n        \n        if (this.group != null) {\n            // remove the link group\n            this.group.remove();\n        }\n    }\n    \n    /**\n     * Calculate the width that the text rectangle should be set to\n     * @param labelText the label text that will be displayed in the rectangle\n     * @return the width that the text rectangle should be set to\n     */\n    calculateTextRectWidth(labelText) {\n        var width = 0;\n        \n        if (labelText != null) {\n            width = (labelText.length * 6) + 10;\n        }\n        \n        return width;\n    }\n}\n\n\nConceptMapService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapService;\n"]}