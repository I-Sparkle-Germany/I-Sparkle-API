{"version":3,"sources":["conceptMapService.es6"],"names":["ConceptMapService","$filter","$q","$timeout","ConfigService","StudentAssetService","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","width","height","background","stretchBackground","nodes","linksTitle","links","rules","starterConceptMap","customRuleEvaluator","showAutoScore","showAutoFeedback","componentToCopy","createComponent","starterSentence","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","submitCounter","conceptMapData","draw","originalId","filePath","label","x","y","ConceptMapNode","sourceNode","destinationNode","color","curvature","startCurveUp","startCurveDown","ConceptMapLink","x1","y1","x2","y2","slope","distance","Math","sqrt","pow","startx","starty","endx","endy","endCurveUp","len","angle","nodeRadius","start","coord","tip","pathData","arrowHeadData","curveDistance","startYCurveDistance","max","min","endYCurveDistance","startUp","endUp","c2","c3","cDistance","perimX","perimYstart","perimYend","push","percLengthOfHead","getLengthOfCubicBezier","centerBaseOfHead","getPointOnCubicBezier","theta","atan2","baseAngleA","PI","baseAngleB","baseA","cos","sin","baseB","round","C1","C2","C3","C4","precision","t","currentPoint","previousPoint","xDif","yDif","percent","pos","B1","B2","B3","B4","componentContent","ruleName","rule","getRuleByRuleName","getRulesByCategoryName","firstRule","r","tempRule","tempResult","evaluateRule","nodeLabel","getNodesByLabel","nodeCount","comparison","number","not","linkLabel","otherNodeLabel","getLinksByLabels","linkCount","name","category","tempRules","categories","c","tempCategory","nodesByLabel","n","resultLinks","tempLink","tempLinkLabel","sourceNodeLabel","destinationNodeLabel","args","ruleResult","evaluateRuleByRuleName","conceptMapNodes","instanceId","fileName","conceptMapNode","newConceptMapNode","conceptMapLinks","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","getNodeById","conceptMapLink","newConceptMapLink","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","moveTextGroupToFront","group","getGroup","front","getLabel","setLabel","tempNode","tempNodeId","getId","deferred","defer","svgElement","document","createElement","SVG","populateConceptMapData","svgString","innerHTML","getHrefToBase64ImageReplacements","then","images","imagePair","imageHref","lastIndexOfSlash","lastIndexOf","substring","base64Image","imageRegEx","RegExp","replace","myCanvas","ctx","getContext","svg","Blob","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","event","target","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","referencedAssetUrl","deleteAsset","resolve","src","promise","prependAssetsPath","promises","imageHrefs","getImagesInSVG","getProjectAssetsDirectoryPath","getBase64Image","all","regex","exec","isStudentConceptMapDifferentThanStarterConceptMap","studentConceptMap","studentNodes","studentLinks","starterNodes","starterLinks","studentNode","starterNode","studentLink","starterLink","sourceNodeOriginalId","destinationNodeOriginalId","highlighted","deleteButtonColor","connector","createConnector","deleteButtonGroup","createDeleteButtonGroup","textGroup","createTextGroup","border","createBorder","outgoingLinks","incomingLinks","add","hide","jsonObject","ol","outgoingLink","getOriginalId","tempLinkObject","il","incomingLink","rect","fill","stroke","opacity","connectorRadius","circle","radius","cx","cy","deleteButtonRadius","deleteButtonCircle","topX","topY","bottomX","bottomY","leftX","leftY","rightX","rightY","deleteButtonXPath","deleteButtonX","path","transform","rotation","translate","attr","textRect","text","font","family","size","style","setAttribute","textBBox","getBBox","calculateTextRectWidth","e","getImageWidth","getImageHeight","groupId","val","groupX","imageCX","groupY","imageCY","value","show","getGroupX","imageRelativeX","imageX","bbox","bboxX","getGroupY","imageRelativeY","imageY","bboxY","nodeMouseOverFunction","mouseover","nodeMouseOutFunction","mouseout","nodeMouseDownFunction","mousedown","nodeMouseUpFunction","mouseup","nodeMouseClickFunction","click","connectorMouseDownFunction","deleteButtonMouseDownFunction","deleteButtonMouseOverFunction","deleteButtonMouseOutFunction","dragMoveFunction","on","tempOutgoingLink","splice","tempIncomingLink","nearestPoint","getNearestPointToDestinationNode","updateCoordinates","controller","studentDataChanged","draggable","remove","linksToDestination","labelText","head","textPercentageLocationOnLink","randInt","floor","random","curvedLink","connectLinkToNodes","arrowPathArraysObject","calculateCurvedLine","tail","toString","hideTextGroup","showTextGroup","isDragging","array","plot","deleteButtonLocation","getDeleteButtonLocation","totalLength","getTotalLength","midPoint","getPointAtLength","arrowPathArrays","directionAlreadyUsed","direction","parallelLinks","getLinksToDestination","usedDirections","p","parallelLink","tempDirection","indexOf","hideDeleteButton","rectMinX","getImageX","rectMinY","getImageY","point","getNearestPointInPerimeter","w","h","b","clamp","dl","abs","dr","dt","db","m","lower","upper","deleteButton","addOutgoingLink","addIncomingLink","invisibleCircleRadius","invisibleCircle","deleteButtonMidpointX","deleteButtonMidpointY","rotate","location","deleteButtonGroupMouseOver","deleteButtonGroupMouseOut","showDeleteButton","deleteButtonClickedFunction","linkMouseDownFunction","linkTextMouseDownFunction","linkMouseOverFunction","linkMouseOutFunction","line","distanceAlongLine","distanceAlongNormal","p1","p2","scale","dx","dy","occluded","linkGroupId","removeOutgoingLink","removeIncomingLink","$inject"],"mappings":"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","file":"conceptMapService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass ConceptMapService extends NodeService {\n    constructor($filter,\n                $q,\n                $timeout,\n                ConfigService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Get the component type label\n     * example\n     * \"Concept Mape\"\n     */\n    getComponentTypeLabel() {\n        return this.$translate('conceptMap.componentTypeLabel');\n    }\n\n    /**\n     * Create a ConceptMap component object\n     * @returns a new ConceptMap component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'ConceptMap';\n        component.prompt = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = false;\n        component.width = 800;\n        component.height = 600;\n        component.background = null;\n        component.stretchBackground = null;\n        component.nodes = [];\n        component.linksTitle = \"\";\n        component.links = [];\n        component.rules = [];\n        component.starterConceptMap = null;\n        component.customRuleEvaluator = \"\";\n        component.showAutoScore = false;\n        component.showAutoFeedback = false;\n        return component;\n    }\n\n    /**\n     * Copies a ConceptMap component object\n     * @returns a copied ConceptMap component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.starterSentence = componentToCopy.starterSentence;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        return component;\n    }\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'ConceptMap') {\n                // the other component is an ConceptMap component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.isSubmit == true || (state.studentData.submitCounter != null && state.studentData.submitCounter > 0)) {\n                            // there is a response so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.conceptMapData != null) {\n                        // there is a response so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Create an instance of the ConceptMapNode class\n     * @param draw the svg.js draw object\n     * @param id the node id\n     * @param filePath the file path of the image\n     * @param label the label of the node\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param width the width of the image\n     * @param height the height of the image\n     * @param a ConceptMapNode\n     */\n    newConceptMapNode(draw, id, originalId, filePath, label, x, y, width, height) {\n        return new ConceptMapNode(this, draw, id, originalId, filePath, label, x, y, width, height);\n    }\n\n    /**\n     * Create an instance of the ConceptMapLink class\n     * @param draw the svg.js draw object\n     * @param id the link id\n     * @param node the source ConceptMapNode that the link is coming out of\n     * @param x the x position of the tail\n     * @param y the y position of the tail\n     * @returns a ConceptMapLink\n     */\n    newConceptMapLink(draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown) {\n        return new ConceptMapLink(this, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, startCurveDown);\n    }\n\n    /**\n     * Get the slope of the line between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the slope of the line or null if the slope is infinite\n     */\n    getSlope(x1, y1, x2, y2) {\n\n        var slope = null;\n\n        if ((x2 - x1) == 0) {\n            // the slope is infinite so we will return null\n            slope = null;\n        } else {\n            // calculate the slope\n            slope = (y2 - y1) / (x2 - x1);\n        }\n\n        return slope;\n    }\n\n    /**\n     * Calculate the euclidean distance between two points\n     * @param x1 x position of the first point\n     * @param y1 y position of the first point\n     * @param x2 x position of the second point\n     * @param y2 y position of the second point\n     * @returns the distance between the two points\n     */\n    calculateDistance(x1, y1, x2, y2) {\n\n        // calculate the distance\n        var distance = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n\n        return distance;\n    }\n\n    /**\n\n    Returns an array representation of the path elements for an arrow\n\n    First we calculate a simple curve for the tail.\n\n    Then we pick a point on that curve to use as the base-center of the arrow head,\n    then calculate the position of that triangle based on the angle between that\n    point and the tip.\n\n    @params startx {Number} X-coordinate of the start point\n    @params starty {Number} Y-coordinate of the start point\n    @params endx {Number} X-coordinate of the end point\n    @params endy {Number} Y-coordinate of the end point\n    @params len {Number} Length of the \"tip\" of the arrowhead\n    @params angle {Number} Angle in degrees\n      between the line and each wing of the arrowhead.\n      Should be less than 90.\n\n    Note: This function and the associated functions that are called by this\n    function are taken from the Concord MySystem github project.\n    https://github.com/concord-consortium/mysystem_sc\n    The code is found in the arrow_drawing.js file.\n    mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n\n    **/\n    arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius) {\n\n        if (startx === endx && starty === endy){\n            return [[\"\"],[\"\"]];\n        }\n\n        var start = new this.coord(startx, starty),\n        tip = new this.coord(endx, endy),\n        pathData   = [],\n        arrowHeadData = [];\n\n        // calculate control points c2 and c3\n        var curveDistance = (tip.x - start.x) * curvature,\n        startYCurveDistance = (curveDistance === 0 ? 1 : Math.max(Math.min(curveDistance, 100), -100)),\n        endYCurveDistance = startYCurveDistance,\n        startUp = startCurveUp ? 1 : -1,\n        endUp = endCurveUp ? 1 : -1;\n        startYCurveDistance = (startYCurveDistance * startUp > 0) ? startYCurveDistance : startYCurveDistance * -1;\n        endYCurveDistance = (endYCurveDistance * endUp > 0) ? endYCurveDistance : endYCurveDistance * -1;\n        var c2 = new this.coord(start.x+(curveDistance/2), start.y-startYCurveDistance),\n        c3 = new this.coord(tip.x-(curveDistance/2), tip.y-endYCurveDistance),\n        cDistance = Math.sqrt(Math.pow((curveDistance/2),2) + Math.pow(startYCurveDistance,2)),\n        perimX = nodeRadius*(curveDistance/2)/cDistance,\n        perimYstart = nodeRadius*startYCurveDistance/cDistance,\n        perimYend = nodeRadius*endYCurveDistance/cDistance;\n\n        // update tip\n        tip = new this.coord(tip.x - perimX, tip.y - perimYend);\n\n        // draw arrow path\n\n        pathData.push(\"M\", start.x + perimX, start.y - perimYstart);  // move to start of line\n        pathData.push(\"C\", c2.x, c2.y, c3.x, c3.y, tip.x, tip.y); // curve line to the tip\n\n        // draw arrow head\n        var percLengthOfHead = len / this.getLengthOfCubicBezier(start, c2, c3, tip),\n        centerBaseOfHead = this.getPointOnCubicBezier(percLengthOfHead, start, c2, c3, tip),\n        theta  = Math.atan2((tip.y-centerBaseOfHead.y),(tip.x-centerBaseOfHead.x)),\n        baseAngleA = theta + angle * Math.PI/180,\n        baseAngleB = theta - angle * Math.PI/180,\n        baseA      = new this.coord(tip.x - len * Math.cos(baseAngleA), tip.y - len * Math.sin(baseAngleA)),\n        baseB      = new this.coord(tip.x - len * Math.cos(baseAngleB), tip.y - len * Math.sin(baseAngleB));\n\n        arrowHeadData.push(\"M\", tip.x, tip.y);\n        arrowHeadData.push(\"L\", baseA.x, baseA.y);  // line to baseA\n        arrowHeadData.push(\"L\", baseB.x, baseB.y);  // line to baseB\n        arrowHeadData.push(\"L\", tip.x,   tip.y  );  // line back to the tip\n\n        return [pathData, arrowHeadData];\n    }\n\n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    coord(x,y) {\n        if(!x) x = 0;\n        if(!y) y = 0;\n        /*\n        *   Limit precision of decimals for SVG rendering.\n        *   otherwise we get really long SVG strings,\n        *   and webkit error messsages like of this sort:\n        *   \"Error: Problem parsing d='<svg string with long dec>'\"\n        */\n        x = Math.round(x * 1000)/1000;\n        y = Math.round(y * 1000)/1000;\n        return {x: x, y: y};\n    }\n\n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getLengthOfCubicBezier(C1,C2,C3,C4)\n    {\n        var precision = 10,\n        length    = 0,\n        t,\n        currentPoint,\n        previousPoint;\n\n        for (var i = 0; i<precision; i++){\n            t = i/precision;\n            currentPoint = this.getPointOnCubicBezier(t, C1,C2,C3,C4);\n            if (i > 0){\n                var xDif = currentPoint.x - previousPoint.x,\n                yDif = currentPoint.y - previousPoint.y;\n                length += Math.sqrt((xDif*xDif) + (yDif*yDif));\n            }\n            previousPoint = currentPoint;\n        }\n        return length;\n    }\n\n    /**\n     * Note: This function is from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    getPointOnCubicBezier(percent,C1,C2,C3,C4) {\n        if (percent < 0) percent = 0;\n        if (percent > 1) percent = 1;\n        var pos = new this.coord();\n        pos.x = C1.x*this.B1(percent) + C2.x*this.B2(percent) + C3.x*this.B3(percent) + C4.x*this.B4(percent);\n        pos.y = C1.y*this.B1(percent) + C2.y*this.B2(percent) + C3.y*this.B3(percent) + C4.y*this.B4(percent);\n        return pos;\n    }\n\n    /**\n     * Note: These functions are from\n     * https://github.com/concord-consortium/mysystem_sc\n     * The code is found in the arrow_drawing.js file.\n     * mysystem_sc/apps/my_system/mixins/arrow_drawing.js\n     */\n    B1(t) { return t*t*t; }\n    B2(t) { return 3*t*t*(1-t); }\n    B3(t) { return 3*t*(1-t)*(1-t); }\n    B4(t) { return (1-t)*(1-t)*(1-t); }\n\n    /**\n     * Evaluate a rule name\n     * @param componentContent the component content\n     * @param conceptMapData the student concept map data\n     * @param ruleName the rule name\n     * @returns whether the rule was satisfied\n     */\n    evaluateRuleByRuleName(componentContent, conceptMapData, ruleName) {\n\n        var result = false;\n\n        if (ruleName === true) {\n            // the rule name is not actually a rule but is the true boolean\n            return true;\n        } else if (ruleName === false) {\n            // the rule name is not actually a rule but is the false boolean\n            return false;\n        }\n\n        // get the rule\n        var rule = this.getRuleByRuleName(componentContent, ruleName);\n\n        if (rule == null) {\n            /*\n             * we didn't find a rule with the given rule name so we will look\n             * for a category with that name\n             */\n\n            // get the rules that are in the category\n            var rules = this.getRulesByCategoryName(componentContent, ruleName);\n\n            var firstRule = true;\n\n            if (rules != null) {\n\n                /*\n                 * loop through all the rules in the category. we will say the\n                 * category is satisfied if all the rules in the category\n                 * evaluate to true.\n                 */\n                for (var r = 0; r < rules.length; r++) {\n                    var tempRule = rules[r];\n\n                    // evaluate the rule\n                    var tempResult = this.evaluateRule(conceptMapData, tempRule);\n\n                    if (firstRule) {\n                        /*\n                         * this is the first rule so we will set the value\n                         * of the rule to the result\n                         */\n                        result = tempResult;\n                        firstRule = false;\n                    } else {\n                        /*\n                         * this is not the first rule so we will compute the\n                         * \"logical and\" of the result so far and this rule's\n                         * result\n                         */\n                        result = result && tempResult;\n                    }\n\n                    if (!result) {\n                        /*\n                         * the result is false so we can short circuit and\n                         * stop looping since we have now just found that\n                         * one of the rules is not satisfied which means\n                         * the category is not satisfied.\n                         */\n                        break;\n                    }\n                }\n            }\n        } else {\n            // evaluate the rule\n            result = this.evaluateRule(conceptMapData, rule);\n        }\n\n        return result;\n    }\n\n    /**\n     * Evaluate a rule\n     * @param conceptMapData the concept map student data\n     * @param rule the rule object\n     * @returns whether the rule was satisfied\n     */\n    evaluateRule(conceptMapData, rule) {\n\n        var result = false;\n\n        if (rule != null) {\n\n            if (rule.type == 'node') {\n                // this is a node rule\n\n                // get the node we are looking for\n                var nodeLabel = rule.nodeLabel;\n\n                // get all the nodes with the given label\n                var nodes = this.getNodesByLabel(conceptMapData, nodeLabel);\n\n                // get the number of nodes with the given label\n                var nodeCount = nodes.length;\n\n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n\n                // the number to compare to\n                var number = rule.number;\n\n                if (comparison == 'exactly') {\n                    /*\n                     * we are looking for an exact number of nodes with the\n                     * given label\n                     */\n                    if (nodeCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    /*\n                     * we are looking for more than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    /*\n                     * we are looking for less than a certain number of nodes\n                     * with the given label\n                     */\n                    if (nodeCount < number) {\n                        result = true;\n                    }\n                }\n\n                if (rule.not) {\n                    /*\n                     * the rule is satisfied if the result is false so we will\n                     * negate the result\n                     */\n                    result = !result;\n                }\n\n            } else if (rule.type == 'link') {\n                // this is a link rule\n\n                // get the source node label\n                var nodeLabel = rule.nodeLabel;\n\n                // get the link label\n                var linkLabel = rule.linkLabel;\n\n                // get the destination node label\n                var otherNodeLabel = rule.otherNodeLabel;\n\n                // get all the links with the matching labels\n                var links = this.getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel);\n\n                // get the number of links with the matching labels\n                var linkCount = links.length;\n\n                /*\n                 * the comparison for the number which can be \"exactly\",\n                 * \"more than\", or \"less than\"\n                 */\n                var comparison = rule.comparison;\n\n                // the number to compare to\n                var number = rule.number;\n\n                if (comparison == 'exactly') {\n                    // we are looking for an exact number of links\n                    if (linkCount == number) {\n                        result = true;\n                    }\n                } else if (comparison == 'more than') {\n                    // we are looking for more than a certain number of links\n                    if (linkCount > number) {\n                        result = true;\n                    }\n                } else if (comparison == 'less than') {\n                    // we are looking for less than a certain number of links\n                    if (linkCount < number) {\n                        result = true;\n                    }\n                }\n\n                if (rule.not) {\n                    /*\n                     * the rule is satisfied if the result is false so we will\n                     * negate the result\n                     */\n                    result = !result;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a rule by the rule name\n     * @param componentContent the concept map component content\n     * @param ruleName the rule name\n     * @returns the rule with the given rule name\n     */\n    getRuleByRuleName(componentContent, ruleName) {\n\n        var rule = null;\n\n        if (ruleName != null) {\n\n            // get the rules\n            var rules = componentContent.rules;\n\n            if (rules != null) {\n\n                // loop through all the rules\n                for (var r = 0; r < rules.length; r++) {\n\n                    // get a rule\n                    var tempRule = rules[r];\n\n                    if (tempRule != null) {\n\n                        if (ruleName == tempRule.name) {\n                            // we have found the rule with the name we want\n                            rule = tempRule;\n                        }\n                    }\n                }\n            }\n        }\n\n        return rule;\n    }\n\n    /**\n     * Get the rules in the category\n     * @param componentContent the component content\n     * @param category the category name\n     * @returns the rules in the category\n     */\n    getRulesByCategoryName(componentContent, category) {\n\n        var rules = [];\n\n        if (componentContent != null) {\n\n            // get all the rules\n            var tempRules = componentContent.rules;\n\n            if (tempRules != null) {\n\n                // loop through all the rules\n                for (var r = 0; r < tempRules.length; r++) {\n                    var rule = tempRules[r];\n\n                    if (rule != null) {\n\n                        // get the categories the rule is in\n                        var categories = rule.categories;\n\n                        if (categories != null) {\n\n                            // loop through categories the rule is in\n                            for (var c = 0; c < categories.length; c++) {\n                                var tempCategory = categories[c];\n\n                                if (category == tempCategory) {\n                                    /*\n                                     * the rule is in the category we are\n                                     * searching for\n                                     */\n                                    rules.push(rule);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return rules;\n    }\n\n    /**\n     * Get nodes by label\n     * @param conceptMapData the concept map student data\n     * @param label the node label to look for\n     * @returns all the nodes with the given label\n     */\n    getNodesByLabel(conceptMapData, label) {\n\n        var nodesByLabel = [];\n\n        if (conceptMapData != null) {\n\n            var nodes = conceptMapData.nodes;\n\n            if (nodes != null) {\n\n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n\n                    if (node != null) {\n\n                        if (label == node.label || label == 'any') {\n                            /*\n                             * we have found a node with the label we are\n                             * looking for\n                             */\n                            nodesByLabel.push(node);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodesByLabel;\n    }\n\n    /**\n     * Get links with the given source node label, link label, and destination\n     * node label\n     * @param conceptMapData the concept map student data\n     * @param nodeLabel the source node label\n     * @param linkLabel the link label\n     * @param otherNodeLabel the destination node label\n     * @returns the links with the given source node label, link label, and\n     * destination node label\n     */\n    getLinksByLabels(conceptMapData, nodeLabel, linkLabel, otherNodeLabel) {\n\n        var resultLinks = [];\n\n        if (conceptMapData != null) {\n\n            var links = conceptMapData.links;\n\n            if (links != null) {\n\n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var tempLink = links[l];\n\n                    if (tempLink != null) {\n\n                        // get the labels\n                        var tempLinkLabel = tempLink.label;\n                        var sourceNodeLabel = tempLink.sourceNodeLabel;\n                        var destinationNodeLabel = tempLink.destinationNodeLabel;\n\n                        if ((nodeLabel == sourceNodeLabel || nodeLabel == 'any') &&\n                            (linkLabel == tempLinkLabel || linkLabel == 'any') &&\n                            (otherNodeLabel == destinationNodeLabel || otherNodeLabel == 'any')) {\n\n                            // the labels match the ones we are looking for\n                            resultLinks.push(tempLink);\n                        }\n                    }\n                }\n            }\n        }\n\n        return resultLinks;\n    }\n\n    /**\n     * Check if any of the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if any of the rules are satisifed\n     * false if none of the rules are satisified\n     */\n    any(componentContent, conceptMapData, args) {\n\n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n\n            // get a rule name\n            var ruleName = args[n];\n\n            // check if the rule is satisifed\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n\n            if (ruleResult) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if all the rules are satisfied\n     * @param componentContent the concept map component content\n     * @param conceptMapData the concept map student data\n     * @param args an array of rule names\n     * @returns true if all the rules are satisifed\n     * false if any of the rules are not satisfied\n     */\n    all(componentContent, conceptMapData, args) {\n        var result = true;\n\n        // loop through all the rule names\n        for (var n = 0; n < args.length; n++) {\n\n            // get a rule name\n            var ruleName = args[n];\n\n            // check if the rule is satisfied\n            var ruleResult = this.evaluateRuleByRuleName(componentContent, conceptMapData, ruleName);\n\n            result = result && ruleResult;\n        }\n        return result;\n    }\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n\n    /**\n     * Populate the concept map data into the component\n     * @param draw the SVG draw div\n     * @param conceptMapData the concept map data which contains an array\n     * of nodes and an array of links\n     */\n    populateConceptMapData(draw, conceptMapData) {\n\n        if (conceptMapData != null) {\n\n            // get the JSON nodes\n            var nodes = conceptMapData.nodes;\n\n            // this is used to hold the SVG node objects\n            var conceptMapNodes = [];\n\n            if (nodes != null) {\n\n                // loop through all the nodes\n                for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n\n                    var instanceId = node.instanceId;\n                    var originalId = node.originalId;\n                    var filePath = node.fileName;\n                    var label = node.label;\n                    var x = node.x;\n                    var y = node.y;\n                    var width = node.width;\n                    var height = node.height\n\n                    // create a ConceptMapNode\n                    var conceptMapNode = this.newConceptMapNode(draw, instanceId, originalId, filePath, label, x, y, width, height);\n\n                    conceptMapNodes.push(conceptMapNode);\n                }\n            }\n\n            // get the JSON links\n            var links = conceptMapData.links;\n\n            // this is used to hold the SVG link objects\n            var conceptMapLinks = [];\n\n            if (links != null) {\n\n                // loop through all the links\n                for (var l = 0; l < links.length; l++) {\n                    var link = links[l];\n\n                    var instanceId = link.instanceId;\n                    var originalId = link.originalId;\n                    var sourceNodeId = link.sourceNodeInstanceId;\n                    var destinationNodeId = link.destinationNodeInstanceId;\n                    var label = link.label;\n                    var color = link.color;\n                    var curvature = link.curvature;\n                    var startCurveUp = link.startCurveUp;\n                    var endCurveUp = link.endCurveUp;\n                    var sourceNode = null;\n                    var destinationNode = null;\n\n                    if (sourceNodeId != null) {\n                        sourceNode = this.getNodeById(conceptMapNodes, sourceNodeId);\n                    }\n\n                    if (destinationNodeId != null) {\n                        destinationNode = this.getNodeById(conceptMapNodes, destinationNodeId);\n                    }\n\n                    // create a ConceptMapLink\n                    var conceptMapLink = this.newConceptMapLink(draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp);\n\n                    conceptMapLinks.push(conceptMapLink);\n                }\n            }\n\n            /*\n             * move the link text group to the front so that they are on top\n             * of links\n             */\n            this.moveLinkTextToFront(conceptMapLinks);\n\n            // move the nodes to the front so that they are on top of links\n            this.moveNodesToFront(conceptMapNodes);\n\n            /*\n             * set a timeout to refresh the link labels so that the rectangles\n             * around the labels are properly resized\n             */\n            // this.$timeout(() => {\n            //     this.refreshLinkLabels(conceptMapNodes, conceptMapLinks);\n            // });\n            this.refreshLinkLabels(conceptMapNodes, conceptMapLinks);\n        }\n    }\n\n    /**\n     * Move the link text group to the front\n     */\n    moveLinkTextToFront(links) {\n\n        // loop through all the links\n        for (var l = 0; l < links.length; l++) {\n            var link = links[l];\n\n            if (link != null) {\n                // move the link text group to the front\n                link.moveTextGroupToFront();\n            }\n        }\n    }\n\n    /**\n     * Move the nodes to the front so that they show up above links\n     */\n    moveNodesToFront(nodes) {\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n\n                // get a node group\n                var group = node.getGroup();\n\n                if (group != null) {\n                    // move the node group to the front\n                    group.front();\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the link labels so that the rectangles around the text\n     * labels are resized to fit the text properly. This is required because\n     * the rectangles are not properly sized when the ConceptMapLinks are\n     * initialized. The rectangles need to be rendered first and then the\n     * labels need to be set in order for the rectangles to be resized properly.\n     * This is why this function is called in a $timeout.\n     */\n    refreshLinkLabels(nodes, links) {\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    // get the label from the node\n                    var label = node.getLabel();\n\n                    /*\n                     * set the label back into the node so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    node.setLabel(label);\n                }\n            }\n        }\n\n        if (links != null) {\n\n            // loop throgh all the links\n            for (var l = 0; l < links.length; l++) {\n                var link = links[l];\n\n                if (link != null) {\n                    // get the label from the link\n                    var label = link.getLabel();\n\n                    /*\n                     * set the label back into the link so that the rectangle\n                     * around the text label is resized to the text\n                     */\n                    link.setLabel(label);\n                }\n            }\n        }\n    }\n\n    /**\n     * Get a node by id.\n     * @param id the node id\n     * @returns the node with the given id or null\n     */\n    getNodeById(nodes, id) {\n        var node = null;\n\n        if (id != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var tempNode = nodes[n];\n                var tempNodeId = tempNode.getId();\n\n                if (id == tempNodeId) {\n                    // we have found the node we want\n                    node = tempNode;\n                    break;\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Create an image from the concept map data\n     * @param conceptMapData concept map data from a student\n     * @param width the width of the image we want to create\n     * @param height the height of the image we want to create\n     */\n    createImage(conceptMapData, width, height) {\n\n        // create a promise that will return an image of the concept map\n        var deferred = this.$q.defer();\n\n        // create a div to draw the SVG in\n        var svgElement = document.createElement(\"div\");\n\n        if (width == null || width == '') {\n            // we will default to a width of 800 pixels\n            width = 800;\n        }\n\n        if (height == null || height == '') {\n            // we will default to a height of 600 pixels\n            height = 600;\n        }\n\n        var draw = SVG(svgElement);\n        draw.width(width);\n        draw.height(height);\n\n        if (svgElement != null) {\n\n            // populate the concept map data into the svg draw element\n            this.populateConceptMapData(draw, conceptMapData);\n\n            // get the svg element as a string\n            var svgString = svgElement.innerHTML;\n\n            // find all the images in the svg and replace them with Base64 images\n            this.getHrefToBase64ImageReplacements(svgString, true).then((images) => {\n\n                /*\n                 * Loop through all the image objects. Each object contains\n                 * an image href and a Base64 image.\n                 */\n                for (var i = 0; i < images.length; i++) {\n\n                    // get an image object\n                    var imagePair = images[i];\n\n                    // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n                    var imageHref = imagePair.imageHref;\n\n                    // get the last index of '/'\n                    var lastIndexOfSlash = imageHref.lastIndexOf('/');\n\n                    if (lastIndexOfSlash != -1) {\n                        // only get everything after the last '/'\n                        imageHref = imageHref.substring(lastIndexOfSlash + 1);\n                    }\n\n                    // get the Base64 image\n                    var base64Image = imagePair.base64Image;\n\n                    // create a regex to match the image href\n                    var imageRegEx = new RegExp(imageHref, 'g');\n\n                    /*\n                     * replace all the instances of the image href with the\n                     * Base64 image\n                     */\n                    svgString = svgString.replace(imageRegEx, base64Image);\n                }\n\n                // create a canvas to draw the image on\n                var myCanvas = document.createElement(\"canvas\");\n                var ctx = myCanvas.getContext(\"2d\");\n\n                // create an svg blob\n                var svg = new Blob([svgString], {type:\"image/svg+xml;charset=utf-8\"});\n                var domURL = self.URL || self.webkitURL || self;\n                var url = domURL.createObjectURL(svg);\n                var image = new Image;\n\n                /*\n                 * set the UtilService in a local variable so we can access it\n                 * in the onload callback function\n                 */\n                var thisUtilService = this.UtilService;\n\n                // the function that is called after the image is fully loaded\n                image.onload = (event) => {\n\n                    // get the image that was loaded\n                    var image = event.target;\n\n                    // set the dimensions of the canvas\n                    myCanvas.width = image.width;\n                    myCanvas.height = image.height;\n                    ctx.drawImage(image, 0, 0);\n\n                    // get the canvas as a Base64 string\n                    var base64Image = myCanvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image);\n\n                    // create a student asset image\n                    this.StudentAssetService.uploadAsset(imageObject).then((unreferencedAsset) => {\n\n                        /*\n                         * make a copy of the unreferenced asset so that we\n                         * get a referenced asset\n                         */\n                        this.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n                            if (referencedAsset != null) {\n                                /*\n                                 * get the asset url\n                                 * for example\n                                 * /wise/studentuploads/11261/297478/referenced/picture_1494016652542.png\n                                 */\n                                var referencedAssetUrl = referencedAsset.url;\n\n                                // remove the unreferenced asset\n                                this.StudentAssetService.deleteAsset(unreferencedAsset);\n\n                                // resolve the promise with the image url\n                                deferred.resolve(referencedAssetUrl);\n                            }\n                        });\n                    });\n                };\n\n                // set the src of the image so that the image gets loaded\n                image.src = url;\n            });\n        }\n\n        return deferred.promise;\n    }\n\n    /**\n     * Get Base64 images from image hrefs\n     * @param svgString the svg string\n     * @param prependAssetsPath whether to prepend the assets directory path\n     * to the image references\n     * @return a promise that will return an array of objects. The objects will\n     * contain an image href and a Base64 image.\n     */\n    getHrefToBase64ImageReplacements(svgString, prependAssetsPath) {\n\n        // an array to hold all the promises\n        var promises = [];\n\n        // get all the image hrefs\n        var imageHrefs = this.getImagesInSVG(svgString);\n\n        // loop through all the images\n        for (var i = 0; i < imageHrefs.length; i++) {\n\n            // get an image href\n            var imageHref = imageHrefs[i];\n\n            if (prependAssetsPath) {\n                /*\n                 * the image href is relative so we need to make it absolute\n                 * so that the browser can retrieve it\n                 */\n\n                // prepend the project asset directory path\n                imageHref = this.ConfigService.getProjectAssetsDirectoryPath(true) + '/' + imageHref;\n            }\n\n            // get the Base64 of the image\n            var promise = this.getBase64Image(imageHref);\n\n            promises.push(promise);\n        }\n\n        return this.$q.all(promises);\n    }\n\n    /**\n     * Get all the image hrefs in the svg string\n     * @param svgString the svg string\n     * @return an array of image hrefs\n     */\n    getImagesInSVG(svgString) {\n\n        // used to hold all the images we find\n        var images = [];\n\n        if (svgString != null) {\n\n            /*\n             * the regex to match href values in image elements\n             * e.g.\n             * if the svg contained in image element like this\n             * <image id=\"SvgjsImage1007\" xlink:href=\"/wise/curriculum/25/assets/Sun.png\" width=\"100\" height=\"100\"/>\n             * it would match it and the matching group would contain\n             * /wise/curriculum/25/assets/Sun.png\n             */\n            var regex = /<image.*?xlink:href=\"(.*?)\".*?\\/?>/g;\n\n            // find the first match in the svg string\n            var result = regex.exec(svgString);\n\n            while(result != null) {\n\n                /*\n                 * get the href image from the match\n                 * e.g.\n                 * /wise/curriculum/25/assets/Sun.png\n                 */\n                var imageHref = result[1];\n\n                // add the href to our array of hrefs\n                images.push(imageHref);\n\n                // try to find the next match\n                result = regex.exec(svgString);\n            }\n        }\n\n        return images;\n    }\n\n    /**\n     * Get the Base64 image from an image href. An image href will look like\n     * /wise/curriculum/25/assets/Sun.png\n     * @param imageHref the image href\n     * @return a promise that will return an object containing the image href\n     * and the Base64 image\n     */\n    getBase64Image(imageHref) {\n\n        var deferred = this.$q.defer();\n\n        // create the image object that we will load the image into\n        var image = new Image;\n\n        // create a new canvas to render the image in\n        var myCanvas = document.createElement(\"canvas\");\n        var ctx = myCanvas.getContext(\"2d\");\n\n        // the function that is called after the image is fully loaded\n        image.onload = function(event) {\n\n            // get the image that was loaded\n            var image = event.target;\n\n            // set the canvas dimensions to match the image\n            myCanvas.width = image.width;\n            myCanvas.height = image.height;\n\n            // draw the image in the canvas\n            ctx.drawImage(image, 0, 0);\n\n            // get the Base64 string of the canvas\n            var base64Image = myCanvas.toDataURL('image/png');\n\n            // create an object that will contain the image href and Base64 image\n            var result = {};\n            result.imageHref = imageHref;\n            result.base64Image = base64Image;\n\n            // resolve the promise with the object\n            deferred.resolve(result);\n        }\n\n        // load the image\n        image.src = imageHref;\n\n        // return the promise\n        return deferred.promise;\n    }\n\n    /**\n     * Check if the component state has student work. Sometimes a component\n     * state may be created if the student visits a component but doesn't\n     * actually perform any work. This is where we will check if the student\n     * actually performed any work.\n     * @param componentState the component state object\n     * @param componentContent the component content\n     * @return whether the component state has any work\n     */\n    componentStateHasStudentWork(componentState, componentContent) {\n\n        if (componentState != null) {\n\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                let nodes = [];\n                let links = [];\n                let conceptMapData = studentData.conceptMapData;\n\n                if (conceptMapData != null) {\n                    if (conceptMapData.nodes != null) {\n                        nodes = conceptMapData.nodes;\n                    }\n\n                    if (conceptMapData.links != null) {\n                        links = conceptMapData.links;\n                    }\n                }\n\n                if (componentContent == null) {\n                    // the component content was not provided\n\n                    if (nodes.length > 0) {\n                        // the student has created a node\n                        return true;\n                    }\n\n                    if (links.length > 0) {\n                        // the student has created a link\n                        return true;\n                    }\n                } else {\n                    // the component content was provided\n\n                    let starterConceptMap = componentContent.starterConceptMap;\n\n                    if (starterConceptMap == null || starterConceptMap === '') {\n                        // there is no starter concept map\n\n                        if (nodes.length > 0) {\n                            // the student has created a node\n                            return true;\n                        }\n\n                        if (links.length > 0) {\n                            // the student has created a link\n                            return true;\n                        }\n                    } else {\n                        /*\n                         * there is a starter concept map so we will compare it\n                         * with the student concept map\n                         */\n                        if (this.isStudentConceptMapDifferentThanStarterConceptMap(conceptMapData, starterConceptMap)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if the student concept map is different than the starter conept map\n     * @param studentConceptMap the student concept map\n     * @param starterConceptMap the authored starter concept map\n     * @return whether the student concept map is different than the starter\n     * concept map\n     */\n    isStudentConceptMapDifferentThanStarterConceptMap(studentConceptMap, starterConceptMap) {\n\n        if (studentConceptMap != null && starterConceptMap != null) {\n\n            let studentNodes = studentConceptMap.nodes;\n            let studentLinks = studentConceptMap.links;\n\n            let starterNodes = starterConceptMap.nodes;\n            let starterLinks = starterConceptMap.links;\n\n            if (studentNodes.length == starterNodes.length) {\n                /*\n                 * the student has the same number of nodes as the starter so\n                 * we will need to check if the nodes area actually different\n                 */\n\n                // loop through all the nodes\n                for (let n = 0; n < studentNodes.length; n++) {\n                    let studentNode = studentNodes[n];\n                    let starterNode = starterNodes[n];\n\n                    if (studentNode != null && starterNode != null) {\n\n                        // check if any of the fields have different values\n                        if (studentNode.originalId != starterNode.originalId ||\n                            studentNode.instanceId != starterNode.instanceId ||\n                            studentNode.x != starterNode.x ||\n                            studentNode.y != starterNode.y) {\n\n                            // the student node is different than the starter node\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                // the student has a different number of nodes\n                return true;\n            }\n\n            if (studentLinks.length == starterLinks.length) {\n                /*\n                 * the student has the same number of links as the starter so\n                 * we will need to check if the links area actually different\n                 */\n\n                // loop through all the links\n                for (let l = 0; l < studentLinks.length; l++) {\n                    let studentLink = studentLinks[l];\n                    let starterLink = starterLinks[l];\n\n                    if (studentLink != null && starterLink != null) {\n\n                        // check if any of the fields have different values\n                        if (studentLink.label != starterLink.label ||\n                            studentLink.originalId != starterLink.originalId ||\n                            studentLink.instanceId != starterLink.instanceId ||\n                            studentLink.sourceNodeOriginalId != starterLink.sourceNodeOriginalId ||\n                            studentLink.sourceNodeInstanceId != starterLink.sourceNodeInstanceId ||\n                            studentLink.destinationNodeOriginalId != starterLink.destinationNodeOriginalId ||\n                            studentLink.destinationNodeInstanceId != starterLink.destinationNodeInstanceId) {\n\n                            // the student link is different than the starter link\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                // the student has a different number of links\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n\n/**\n * A ConceptMapNode that represents a node in the ConceptMap component\n */\nclass ConceptMapNode {\n\n    /**\n     * The constructor for creating ConceptMapNodes\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param filePath the path of the image file that represents the node\n     * @param label the label of the node\n     * @param x the x position of the node\n     * @param y the y position of the node\n     * @param width the the width of the node\n     * @param height the height of the node\n     */\n    constructor(ConceptMapService, draw, id, originalId, filePath, label, x, y, width, height) {\n\n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n\n        // remember the svg.js draw object so we can draw onto it\n        this.draw = draw;\n\n        // set the id\n        this.id = id;\n\n        // set the original id\n        this.originalId = originalId;\n\n        // remember the file path e.g. \"/wise/curriculum/108/assets/Space.png\"\n        this.filePath = filePath;\n\n        if (this.filePath != null) {\n            // get the file name e.g. \"Space.png\"\n            this.fileName = this.filePath.substring(this.filePath.lastIndexOf('/') + 1);\n        }\n\n        // remember the label\n        this.label = label;\n\n        // create the svg image object\n        this.image = this.draw.image(this.filePath, width, height);\n\n        // remember the width\n        this.width = width;\n\n        // remember the height\n        this.height = height;\n\n        // create a group to contain all the elements of this node\n        this.group = this.draw.group();\n\n        // flag that specifies whether this node is highlighted by the student\n        this.highlighted = false;\n\n        // the color of the delete button\n        this.deleteButtonColor = 'gray';\n\n        // create the connector that students will use to create links\n        this.connector = this.createConnector();\n\n        // create the delete button\n        this.deleteButtonGroup = this.createDeleteButtonGroup();\n\n        // create the text group\n        this.textGroup = this.createTextGroup();\n\n        /*\n         * create the border that displays when the node is highighted or\n         * moused over\n         */\n        this.border = this.createBorder();\n\n        // remember the x and y coordinates\n        this.x = x;\n        this.y = y;\n\n        // initialize the outgoing and incoming links arrays\n        this.outgoingLinks = [];\n        this.incomingLinks = [];\n\n        // add all the elements to the group\n        this.group.add(this.border);\n        this.group.add(this.image);\n        this.group.add(this.connector);\n        this.group.add(this.deleteButtonGroup);\n        this.group.add(this.textGroup);\n\n        // hide the border and delete button\n        this.border.hide();\n        this.deleteButtonGroup.hide();\n\n        // set the position of the group\n        this.group.x(x);\n        this.group.y(y);\n    }\n\n    /**\n     * Get the JSON object representation of the ConceptMapNode\n     * @returns a JSON object containing the data of the ConceptMapNode\n     */\n    toJSONObject() {\n        var jsonObject = {};\n\n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.fileName = this.fileName;\n        jsonObject.filePath = this.filePath;\n        jsonObject.label = this.label;\n        jsonObject.x = this.x;\n        jsonObject.y = this.y;\n        jsonObject.width = this.width;\n        jsonObject.height = this.height;\n\n        jsonObject.outgoingLinks = [];\n        jsonObject.incomingLinks = [];\n\n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n            var outgoingLink = this.outgoingLinks[ol];\n\n            var instanceId = outgoingLink.getId();\n            var originalId = outgoingLink.getOriginalId();\n            var label = outgoingLink.getLabel();\n\n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n\n            jsonObject.outgoingLinks.push(tempLinkObject);\n        }\n\n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n            var incomingLink = this.incomingLinks[il];\n\n            var instanceId = incomingLink.getId();\n            var originalId = incomingLink.getOriginalId();\n            var label = incomingLink.getLabel();\n\n            /*\n             * create an object containing the instance id, original id\n             * and label of the link\n             */\n            var tempLinkObject = {};\n            tempLinkObject.originalId = originalId;\n            tempLinkObject.instanceId = instanceId;\n            tempLinkObject.label = label;\n\n            jsonObject.incomingLinks.push(tempLinkObject);\n        }\n\n        return jsonObject;\n    }\n\n    /**\n     * Create the border that displays when the node is highlighted or\n     * moused over.\n     * @returns the svg rectangle that represents the border\n     */\n    createBorder() {\n\n        // create the rectangle\n        this.border = this.draw.rect(this.width, this.height);\n        this.border.fill('none');\n        this.border.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        return this.border;\n    }\n\n    /**\n     * Create the connector that students will use to create links from this\n     * node.\n     * @returns the svg circle that represents the connector\n     */\n    createConnector() {\n\n        // create the circle\n        var connectorRadius = 10;\n        this.connector = this.draw.circle();\n        this.connector.radius(connectorRadius);\n        this.connector.cx(this.width / 2);\n        this.connector.cy(0);\n        this.connector.fill({ color: '#cccccc', opacity: 0.4 });\n        this.connector.stroke({ color: '#333333', opacity: 0.2 });\n\n        return this.connector;\n    }\n\n    /**\n     * Create the delete button. The delete button is a group that contains\n     * a circle and an x.\n     * @returns a group that contains a circle and an x\n     */\n    createDeleteButtonGroup() {\n\n        // create a group to contain the circle and x for the delete button\n        this.deleteButtonGroup = this.draw.group();\n\n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButtonCircle = this.draw.circle();\n        this.deleteButtonCircle.radius(deleteButtonRadius);\n        this.deleteButtonCircle.cx(this.width);\n        this.deleteButtonCircle.cy(0);\n        this.deleteButtonCircle.fill({ opacity: 0.0 });\n        this.deleteButtonCircle.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        // create the x by first creating a + and then rotating it 45 degrees\n\n        // get the top location of the +\n        var topX = 0;\n        var topY = 0 - (deleteButtonRadius * 0.7);\n\n        // get the bottom location of the +\n        var bottomX = 0;\n        var bottomY = 0 + (deleteButtonRadius * 0.7);\n\n        // get the left position of the +\n        var leftX = 0 - (deleteButtonRadius * 0.7);\n        var leftY = 0;\n\n        // get the right position of the +\n        var rightX = 0 + (deleteButtonRadius * 0.7);\n        var rightY = 0;\n\n        // draw the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: '#333333', opacity: 0.2, width: 2 });\n\n        // rotate the + to turn it into an x\n        this.deleteButtonX.transform({ rotation: 45 });\n\n        // move the x to the upper right of the group\n        this.deleteButtonX.translate(this.width, 0);\n\n        /*\n         * disable pointer events on the x so that clicks will pass through\n         * and hit the circle. this way we only need to set a listener on the\n         * circle for click events.\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n\n        // add the circle and the x\n        this.deleteButtonGroup.add(this.deleteButtonCircle);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n\n        return this.deleteButtonGroup;\n    }\n\n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n\n        // create the group\n        this.textGroup = this.draw.group();\n\n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n\n        // create the text element\n        this.text = this.draw.text(this.label);\n        this.text.attr('x', 5);\n        //this.text.attr('x', 0);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n\n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n\n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n\n        // add the text group to the link group\n        this.group.add(this.textGroup);\n\n        var width = 0;\n\n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n\n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n\n        this.textRect.attr('width', width);\n\n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n\n        return this.textGroup;\n    }\n\n    /**\n     * Get the id of the node\n     * @returns the id of the node\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n\n    /**\n     * Get the group id of the node\n     * @returns the group id of the node\n     */\n    getGroupId() {\n        var groupId = null;\n\n        if (this.group != null) {\n            // get the id of the group which we will use as the id of the node\n            groupId = this.group.id();\n        }\n\n        return groupId;\n    }\n\n    /**\n     * Get the label\n     * @returns the label of the node\n     */\n    getLabel() {\n        return this.label;\n    }\n\n    /**\n     * Set the label of the node\n     * @param label the label of the node\n     */\n    setLabel(label) {\n\n        // remember the label\n        this.label = label;\n\n        // set the label into the text element\n        this.text.text(label);\n\n        var width = 0;\n\n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n\n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n\n        this.textRect.attr('width', width);\n\n        // set the position of the text group\n        var x = this.getImageWidth() / 2;\n        var y = this.getImageHeight();\n        this.textGroup.cx(x);\n        this.textGroup.cy(y);\n    }\n\n    /**\n     * Get the center x coordinate of the group\n     */\n    cx() {\n        var val = 0;\n\n        if (this.group != null && this.image != null) {\n\n            // get the group\n            var groupX = this.group.x();\n\n            /*\n             * get the center x coordinate of the image relative to the group.\n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.image.cx();\n\n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n\n        return val;\n    }\n\n    /**\n     * Get the center y coordinate of the group\n     */\n    cy() {\n        var val = 0;\n\n        if (this.group != null && this.image != null) {\n\n            // get the group\n            var groupY = this.group.y();\n\n            /*\n             * get the center y coordinate of the image relative to the group.\n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.image.cy();\n\n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n\n        return val;\n    }\n\n    /**\n     * Get the center x coordinate of the group\n     */\n    connectorCX() {\n        var val = 0;\n\n        if (this.group != null && this.image != null) {\n\n            // get the group\n            var groupX = this.group.x();\n\n            /*\n             * get the center x coordinate of the image relative to the group.\n             * this will be equal to half the width of the image.\n             */\n            var imageCX = this.connector.cx();\n\n            /*\n             * get the x coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupX + imageCX;\n        }\n\n        return val;\n    }\n\n    /**\n     * Get the center y coordinate of the group\n     */\n    connectorCY() {\n        var val = 0;\n\n        if (this.group != null && this.image != null) {\n\n            // get the group\n            var groupY = this.group.y();\n\n            /*\n             * get the center y coordinate of the image relative to the group.\n             * this will be equal to half the height of the image.\n             */\n            var imageCY = this.connector.cy();\n\n            /*\n             * get the y coordinate of the center of the group relative to the\n             * svg parent\n             */\n            val = groupY + imageCY;\n        }\n\n        return val;\n    }\n\n    /**\n     * Getter/setter for whether the node is highlighted\n     * @parm value (optional) boolean value that sets the highlighted value\n     * @returns whether the node is highlighted\n     */\n    isHighlighted(value) {\n\n        if (value != null) {\n            this.highlighted = value;\n        }\n\n        return this.highlighted;\n    }\n\n    /**\n     * Get the group\n     * @returns the group\n     */\n    getGroup() {\n        return this.group;\n    }\n\n    /**\n     * Show the delete button group\n     */\n    showDeleteButton() {\n        this.deleteButtonGroup.show();\n    }\n\n    /**\n     * Hide the delete button group\n     */\n    hideDeleteButton() {\n        this.deleteButtonGroup.hide();\n    }\n\n    /**\n     * Show the border of the node\n     */\n    showBorder() {\n        this.border.show();\n    }\n\n    /**\n     * Hide the border of the node\n     */\n    hideBorder() {\n        this.border.hide();\n    }\n\n    /**\n     * Get the connector of the node\n     */\n    getConnector() {\n        return this.connector;\n    }\n\n    /**\n     * Get the id of the connector\n     */\n    getConnectorId() {\n        var id = null;\n\n        if (this.connector != null) {\n            id = this.connector.id();\n        }\n\n        return id;\n    }\n\n    /**\n     * Get the x position of the group within the svg\n     * @returns the x position of the group\n     */\n    getGroupX() {\n\n        var x = 0;\n\n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the x location of the group\n             */\n            x = this.group.x();\n        }\n\n        return x;\n    }\n\n    /**\n     * Get the y position of the group within the svg\n     * @returns the y position of the group\n     */\n    getGroupY() {\n        var y = 0;\n\n        if (this.group != null) {\n            /*\n             * the image is located at 0, 0 within the group so we will obtain\n             * the y location of the group\n             */\n            y = this.group.y();\n        }\n\n        return y;\n    }\n\n    /**\n     * Get the x position of the image within the svg\n     * @returns the x position of the image\n     */\n    getImageX() {\n\n        // get the x position of the group\n        var groupX = this.getGroupX();\n\n        // get the x position of the image relative to the group\n        var imageRelativeX = this.image.x();\n\n        // add the values together to get the absolute x position of the image\n        var imageX = groupX + imageRelativeX;\n\n        // get the group\n        var group = this.getGroup();\n\n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n\n            if (bbox != null) {\n                // get the x position of the bounding box on the group\n                var bboxX = bbox.x;\n\n                // compensate for the shift of the group\n                imageX = imageX - bboxX;\n            }\n        }\n\n        return imageX;\n    }\n\n    /**\n     * Get the y position of the image within the svg\n     * @returns the y position of the image\n     */\n    getImageY() {\n\n        // get the y position of the group\n        var groupY = this.getGroupY();\n\n        // get the y position of the image relative to the group\n        var imageRelativeY = this.image.y();\n\n        // add the values together to get the absolute y position of the image\n        var imageY = groupY + imageRelativeY;\n\n        // get the group\n        var group = this.getGroup();\n\n        // check if the group is shifted\n        if (group != null) {\n            // get the bounding box of the group\n            var bbox = group.bbox();\n\n            // get the y position of the bounding box on the group\n            var bboxY = bbox.y;\n\n            // compensate for the shift of the group\n            imageY = imageY - bboxY;\n        }\n\n        return imageY;\n    }\n\n    /**\n     * Get the width of the image\n     * @returns the width of th eimage\n     */\n    getImageWidth() {\n        var width = 0;\n\n        if (this.image != null) {\n            width = this.image.width();\n        }\n\n        return width\n    }\n\n    /**\n     * Get the height of the image\n     * @returns the height of the image\n     */\n    getImageHeight() {\n        var height = 0;\n\n        if (this.image != null) {\n            height = this.image.height();\n        }\n\n        return height;\n    }\n\n    /**\n     * Set the mouseover listener for the group\n     * @param nodeMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setNodeMouseOver(nodeMouseOverFunction) {\n\n        if (this.group != null) {\n            this.group.mouseover(nodeMouseOverFunction);\n        }\n    }\n\n    /**\n     * Set the mouseout listener for the group\n     * @param nodeMouseOutFunction the function to call when the mouse moves\n     * out of the group\n     */\n    setNodeMouseOut(nodeMouseOutFunction) {\n\n        if (this.group != null) {\n            this.group.mouseout(nodeMouseOutFunction);\n        }\n    }\n\n    /**\n     * Set the mousedown listener for the group\n     * @param nodeMouseDownFunction the function to call when the mouse is\n     * down on the group\n     */\n    setNodeMouseDown(nodeMouseDownFunction) {\n\n        if (this.group != null) {\n            this.group.mousedown(nodeMouseDownFunction);\n        }\n    }\n\n    /**\n     * Set the mouseup listener for the group\n     * @param nodeMouseUpFunction the function to call when the mouse is\n     * released over the group\n     */\n    setNodeMouseUp(nodeMouseUpFunction) {\n\n        if (this.group != null) {\n            this.group.mouseup(nodeMouseUpFunction);\n        }\n    }\n\n    /**\n     * Set the click listener for the image\n     * @param nodeMouseClickFunction the function to call when the image is\n     * clicked\n     */\n    setNodeMouseClick(nodeMouseClickFunction) {\n\n        if (this.group != null) {\n            this.image.click(nodeMouseClickFunction);\n        }\n    }\n\n    /**\n     * Set the mousedown listener for the connector\n     * @param connectorMouseDownFunction the function to call when the mouse\n     * is down on the connector\n     */\n    setConnectorMouseDown(connectorMouseDownFunction) {\n\n        if (this.connector != null) {\n            this.connector.mousedown(connectorMouseDownFunction);\n        }\n    }\n\n    /**\n     * Set the mousedown listener for the delete button\n     * @param deleteButtonMouseDownFunction the function to call when the mouse\n     * is down on the delete button\n     */\n    setDeleteButtonMouseDown(deleteButtonMouseDownFunction) {\n\n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mousedown(deleteButtonMouseDownFunction);\n        }\n    }\n\n    /**\n     * Set the mouseover listener for the delete button\n     * @param deleteButtonMouseOverFunction the function to call when the mouse\n     * is over the delete button\n     */\n    setDeleteButtonMouseOver(deleteButtonMouseOverFunction) {\n\n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseover(deleteButtonMouseOverFunction);\n        }\n    }\n\n    /**\n     * Set the mouseout listener for the delete button\n     * @param deleteButtonMouseOutFunction the function to call when the mouse\n     * moves out of the delete button\n     */\n    setDeleteButtonMouseOut(deleteButtonMouseOutFunction) {\n\n        if (this.deleteButtonCircle != null) {\n            this.deleteButtonCircle.mouseout(deleteButtonMouseOutFunction);\n        }\n    }\n\n    /**\n     * Set the dragmove listener for the group\n     * @param dragMoveFunction the function to call when the group is dragged\n     */\n    setDragMove(dragMoveFunction) {\n\n        if (this.group != null) {\n\n            // set a listener for when the node is dragged\n            this.group.on('dragmove', dragMoveFunction);\n        }\n    }\n\n    /**\n     * Set the x position\n     * @param x the x position\n     */\n    setX(x) {\n        this.x = x;\n        this.group.x(x);\n    }\n\n    /**\n     * Set the y position\n     * @param y the y position\n     */\n    setY(y) {\n        this.y = y;\n        this.group.y(y);\n    }\n\n    /**\n     * Add an outgoing link to the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    addOutgoingLink(outgoingLink) {\n        if (outgoingLink != null) {\n            this.outgoingLinks.push(outgoingLink);\n        }\n    }\n\n    /**\n     * Remove an outgoing link from the node\n     * @param outgoingLink a ConceptMapLink object\n     */\n    removeOutgoingLink(outgoingLink) {\n\n        if (outgoingLink != null) {\n\n            // loop through all the outgoing links in this node\n            for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n                // get an outgoing link\n                var tempOutgoingLink = this.outgoingLinks[ol];\n\n                if (outgoingLink == tempOutgoingLink) {\n                    // we have found the outgoing link we want to remove\n                    this.outgoingLinks.splice(ol, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the outgoing links\n     * @return the outgoing links\n     */\n    getOutgoingLinks() {\n        return this.outgoingLinks;\n    }\n\n    /**\n     * Add an incoming link to the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    addIncomingLink(incomingLink) {\n        if (incomingLink != null) {\n            this.incomingLinks.push(incomingLink);\n        }\n    }\n\n    /**\n     * Remove an incoming link from the node\n     * @param incomingLink a ConceptMapLink object\n     */\n    removeIncomingLink(incomingLink) {\n\n        if (incomingLink != null) {\n\n            // loop through the incoming links in the node\n            for (var il = 0; il < this.incomingLinks.length; il++) {\n\n                // get an incoming link\n                var tempIncomingLink = this.incomingLinks[il];\n\n                if (incomingLink == tempIncomingLink) {\n                    // we have found the incoming link we want to remove\n                    this.incomingLinks.splice(il, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the incoming links\n     * @return the incoming links\n     */\n    getIncomingLinks() {\n        return this.incomingLinks;\n    }\n\n    /**\n     * The function that is called when the node is moved\n     * @param event\n     */\n    dragMove(event) {\n\n        // get the group\n        var group = this.getGroup();\n\n        // get the x and y coordinates of the center of the image\n        var cx = this.cx();\n        var cy = this.cy();\n\n        // update the local x, y values of the node for bookkeeping\n        this.x = group.x();\n        this.y = group.y();\n\n        // get the outgoing links and incoming links\n        var outgoingLinks = this.outgoingLinks;\n        var incomingLinks = this.incomingLinks;\n\n        if (outgoingLinks != null) {\n\n            // loop through all the outgoing links\n            for (var ol = 0; ol < outgoingLinks.length; ol++) {\n\n                // get an outgoing link\n                var outgoingLink = outgoingLinks[ol];\n\n                // update the x, y coordinate of the tail of the link\n                var x1 = cx;\n                var y1 = cy;\n\n                // calculate the nearest point to the destination node\n                var nearestPoint = outgoingLink.getNearestPointToDestinationNode(x1, y1);\n                x2 = nearestPoint.x;\n                y2 = nearestPoint.y;\n\n                // update the coordinates of the link\n                outgoingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n\n            // loop through all the incoming links\n            for (var il = 0; il < incomingLinks.length; il++) {\n\n                // get an incoming link\n                var incomingLink = incomingLinks[il];\n\n                // reuse the coordinates of the tail of the link\n                var x1 = incomingLink.x1();\n                var y1 = incomingLink.y1();\n\n                // calculate the nearest point to the source node\n                var nearestPoint = incomingLink.getNearestPointToDestinationNode(x1, y1);\n                var x2 = nearestPoint.x;\n                var y2 = nearestPoint.y;\n\n                // update the coordinates of the link\n                incomingLink.updateCoordinates(x1, y1, x2, y2);\n            }\n        }\n\n        if (this.controller != null) {\n            // handle the student data changing\n            this.controller.studentDataChanged();\n        }\n\n        // move the group to the front so that it shows up above other elements\n        group.front();\n    }\n\n    /**\n     * Remove the node from the svg\n     */\n    remove() {\n\n        // make the group not draggable\n        this.group.draggable(false);\n\n        // remove the group\n        this.group.remove();\n\n        // remove the image\n        this.image.remove();\n\n        // remove the connector\n        this.connector.remove();\n\n        // remove the delete button\n        this.deleteButtonCircle.remove();\n        this.deleteButtonX.remove();\n        this.deleteButtonGroup.remove();\n\n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n\n            if (outgoingLink != null) {\n                // remove the outgoing link\n                outgoingLink.remove();\n\n                /*\n                 * move the counter back one because calling outgoingLink.remove()\n                 * has removed the outgoingLink from the outgoingLinks array\n                 */\n                ol--;\n            }\n        }\n\n        // loop through all the incoming links\n        for (var il = 0; il < this.incomingLinks.length; il++) {\n\n            // get an incoming link\n            var incomingLink = this.incomingLinks[il];\n\n            if (incomingLink != null) {\n                // remove the incoming link\n                incomingLink.remove();\n\n                /*\n                 * move the counter back one because calling incomingLink.remove()\n                 * has removed the incomingLink from the incomingLinks array\n                 */\n                il--;\n            }\n        }\n    }\n\n    /**\n     * Get the links from this node to a given destination node\n     * @param destinationNode the destination node\n     */\n    getLinksToDestination(destinationNode) {\n\n        var linksToDestination = [];\n\n        // loop through all the outgoing links\n        for (var ol = 0; ol < this.outgoingLinks.length; ol++) {\n\n            // get an outgoing link\n            var outgoingLink = this.outgoingLinks[ol];\n\n            if (outgoingLink != null) {\n                if (destinationNode == outgoingLink.destinationNode) {\n                    /*\n                     * the destination of the link is the destination we are\n                     * looking for\n                     */\n                    linksToDestination.push(outgoingLink);\n                }\n            }\n        }\n\n        return linksToDestination;\n    }\n\n    /**\n     * Calculate the width that the text rectangle should be set to\n     * @param labelText the label text that will be displayed in the rectangle\n     * @return the width that the text rectangle should be set to\n     */\n    calculateTextRectWidth(labelText) {\n        var width = 0;\n\n        if (labelText != null) {\n            width = (labelText.length * 6) + 10;\n        }\n\n        return width;\n    }\n}\n\n/**\n * A ConceptMapLink that represents a link in the ConceptMap component\n */\nclass ConceptMapLink {\n\n    /**\n     * The constructor to create a ConceptMapLink object\n     * @param ConceptMapService the ConceptMapService\n     * @param draw the svg.js draw object\n     * @param id the instance id of the link\n     * @param originalId the original authored id of the link\n     * @param sourceNode the source ConceptMapNode\n     * @param destinationNode the destination ConceptMapNode\n     * @param label the text label\n     * @param color the color of the link\n     * @param curvature the curvature of the link\n     * @param startCurveUp whether the start of the link curves up\n     * @param endCurveUp whether the end of the link curves up\n     */\n    constructor(ConceptMapService, draw, id, originalId, sourceNode, destinationNode, label, color, curvature, startCurveUp, endCurveUp) {\n\n        // remember the ConceptMapService\n        this.ConceptMapService = ConceptMapService;\n\n        // remember the svg.js draw object\n        this.draw = draw;\n\n        // set the id\n        this.id = id;\n\n        // set the original id\n        this.originalId = originalId;\n\n        // the arrow head of the link\n        this.head = null;\n\n        // the line of the link\n        this.path = null;\n\n        // set the color of the link\n        this.color = color;\n\n        if (this.color == null) {\n            // if no color is specified, use a default color\n            this.color = 'blue';\n        }\n\n        // whether the link is highlighted\n        this.highlighted = false;\n\n        // create a group to contain the path and head\n        this.group = this.draw.group();\n\n        // where to place the text of the link along the line\n        this.textPercentageLocationOnLink = 0.6\n\n        // remember the source node\n        this.sourceNode = sourceNode;\n\n        /*\n         * used to remember the destination node later after the destination\n         * node has been chosen\n         */\n        this.destinationNode = destinationNode;\n\n        // remember the curvature\n        this.curvature = curvature;\n\n        if (this.curvature == null) {\n            this.curvature = 0.5;\n        }\n\n        // set whether the link curves up or down\n        this.startCurveUp = startCurveUp;\n        this.endCurveUp = endCurveUp;\n\n        if (this.startCurveUp == null || this.endCurveUp == null) {\n            /*\n             * start and end curve up have not been specified so we will set\n             * it at random\n             */\n\n            // choose a random integer 0 or 1\n            var randInt = Math.floor(Math.random() * 2);\n\n            if (randInt == 0) {\n                // set the link to curve down\n                this.startCurveUp = false;\n                this.endCurveUp = false;\n            } else {\n                // set the link to curve up\n                this.startCurveUp = true;\n                this.endCurveUp = true;\n            }\n        }\n\n        // create a curved link\n        this.curvedLink = true;\n\n        // initialize the coordinates of both ends of the link\n        var x1 = this.sourceNode.cx();\n        var y1 = this.sourceNode.cy();\n        var x2 = x1;\n        var y2 = y1;\n\n        if (this.destinationNode != null) {\n\n            /*\n             * get the nearest point from the center of the source node to the\n             * destination node along the perimeter of the destination node\n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            x2 = nearestPoint.x;\n            y2 = nearestPoint.y;\n\n            // connect the link to the nodes\n            this.connectLinkToNodes();\n        }\n\n        if (this.curvedLink) {\n            // create a curved link\n\n            // calculate the curved line in svg\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2);\n\n            // get the line\n            var tail = arrowPathArraysObject[0];\n\n            // get the arrow head\n            var head = arrowPathArraysObject[1];\n\n            // draw the head and tail\n            this.head = this.draw.path(head.toString());\n            this.path = this.draw.path(tail.toString());\n        } else {\n            // create a straight line\n            this.path = this.draw.path('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n\n        // set the style of the link\n        this.path.attr('stroke', this.color);\n        this.path.attr('stroke-width', 3);\n        this.path.attr('fill', 'transparent');\n        this.head.attr('stroke', this.color);\n        this.head.attr('fill', this.color);\n        this.head.attr('pointer-events', 'none');\n\n        /*\n         * remember the x and y coordinates of the source and destination\n         * so that we can look them up easily later\n         */\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n\n        // add the tail and head to the group\n        this.group.add(this.path);\n        this.group.add(this.head);\n\n        // create the text group for the link\n        this.createTextGroup();\n\n        // text that describes the type of link chosen by the student\n        this.setLabel(label);\n\n        if (this.label == null || this.label == '') {\n            // there is no label so we will hide the text group\n            this.hideTextGroup();\n        } else {\n            // there is a label so we will show the text group\n            this.showTextGroup();\n        }\n\n        // create the delete button group\n        this.createDeleteButtonGroup();\n    }\n\n    /**\n     * Get the JSON object representation of the ConceptMapLink\n     * @returns a JSON object containing the data of the ConceptMapLink\n     */\n    toJSONObject() {\n        var jsonObject = {};\n\n        jsonObject.originalId = this.originalId;\n        jsonObject.instanceId = this.id;\n        jsonObject.color = this.color;\n        jsonObject.label = this.label;\n        jsonObject.curvature = this.curvature;\n        jsonObject.startCurveUp = this.startCurveUp;\n        jsonObject.endCurveUp = this.endCurveUp;\n        jsonObject.sourceNodeOriginalId = this.sourceNode.getOriginalId();\n        jsonObject.sourceNodeInstanceId = this.sourceNode.getId();\n        jsonObject.sourceNodeLabel = this.sourceNode.getLabel();\n        jsonObject.destinationNodeOriginalId = this.destinationNode.getOriginalId();\n        jsonObject.destinationNodeInstanceId = this.destinationNode.getId();\n        jsonObject.destinationNodeLabel = this.destinationNode.getLabel();\n\n        return jsonObject;\n    }\n\n    /**\n     * Get the id of the link\n     * @returns the id of the link\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Get the original id of the node\n     * @returns the original id of the node\n     */\n    getOriginalId() {\n        return this.originalId;\n    }\n\n    /**\n     * Get the id of the group\n     * @returns the id of the group\n     */\n    getGroupId() {\n        return this.group.id();\n    }\n\n    /**\n     * Get the x1 value\n     * @returns the x coordinate of the source of the link\n     */\n    x1() {\n        return this.path.attr('x1');\n    }\n\n    /**\n     * Get the y1 value\n     * @returns the y coordinate of the source of the link\n     */\n    y1() {\n        return this.path.attr('y1');\n    }\n\n    /**\n     * Get the x2 value\n     * @returns the x coordinate of the destination of the link\n     */\n    x2() {\n        return this.path.attr('x2');\n    }\n\n    /**\n     * Get the y2 value\n     * @returns the y coordinate of the destination of the link\n     */\n    y2() {\n        return this.path.attr('y2');\n    }\n\n    /**\n     * Set the original id\n     * @param originalId the original id\n     */\n    setOriginalId(originalId) {\n        this.originalId = originalId;\n    }\n\n    /**\n     * Get the label\n     * @returns the label\n     */\n    getLabel() {\n        return this.label;\n    }\n\n    /**\n     * Getter/setter for the highlighted value\n     * @param value (optional) the highlighted value\n     * @returns whether the link is highlighted\n     */\n    isHighlighted(value) {\n\n        if (value != null) {\n            this.highlighted = value;\n        }\n\n        return this.highlighted;\n    }\n\n    /**\n     * Update the coordinates of the link\n     * @param x1 (optional) the x position of the source\n     * @param y1 (optional) the y position of the source\n     * @param x2 (optional) the x position of the destination\n     * @param y2 (optional) the y position of the destination\n     * @param isDragging whether the link is currently being dragged\n     */\n    updateCoordinates(x1, y1, x2, y2, isDragging) {\n        var array = this.path.array();\n\n        if (this.curvedLink) {\n            // draw a curved link\n\n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n\n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n\n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n\n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n\n            // calculate the line\n            var arrowPathArraysObject = this.calculateCurvedLine(x1, y1, x2, y2, isDragging);\n\n            // get the svg tail\n            var tail = arrowPathArraysObject[0];\n\n            // get the svg head\n            var head = arrowPathArraysObject[1];\n\n            // re-plot the head and path\n            this.head.plot(head.toString());\n            this.path.plot(tail.toString());\n        } else {\n            // draw a straight line\n\n            if (x1 == null) {\n                /*\n                 * the x1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x1 = this.path.attr('x1');\n            }\n\n            if (y1 == null) {\n                /*\n                 * the y1 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y1 = this.path.attr('y1');\n            }\n\n            if (x2 == null) {\n                /*\n                 * the x2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                x2 = this.path.attr('x2');\n            }\n\n            if (y2 == null) {\n                /*\n                 * the y2 parameter was not provided so we will reuse the\n                 * existing value\n                 */\n                y2 = this.path.attr('y2');\n            }\n\n            // re-plot the line\n            this.path.plot('M' + x1 + ',' + y1 + ' L' + x2 + ',' + y2);\n        }\n\n        // update the coordinate values\n        this.path.attr('x1', x1);\n        this.path.attr('y1', y1);\n        this.path.attr('x2', x2);\n        this.path.attr('y2', y2);\n\n        if (this.deleteButtonGroup != null) {\n            // update the location of the delete button\n            var deleteButtonLocation = this.getDeleteButtonLocation();\n            this.deleteButtonGroup.x(deleteButtonLocation.x);\n            this.deleteButtonGroup.y(deleteButtonLocation.y);\n        }\n\n        if (this.textGroup != null) {\n            // update the location of the text group\n\n            // get the length of the line\n            var totalLength = this.path.node.getTotalLength();\n\n            // get the coordinate of a point somewhere in the middel of the line\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n\n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n\n    /**\n     * Calculate the curved line\n     * @param x1 the x coordinate of the source\n     * @param y1 the y coordinate of the source\n     * @param x2 the x coordinate of the destination\n     * @param y2 the y coordinate of the destination\n     * @param isDragging whether the line is currently being dragged\n     * @returns an array that contains the svg objects for the arrow head and line\n     */\n    calculateCurvedLine(x1, y1, x2, y2, isDragging) {\n\n        var startx = x1;\n        var starty = y1;\n        var endx = x2;\n        var endy = y2;\n        var startCurveUp = true;\n        var endCurveUp = true;\n        var len = 15;\n        var angle = 45;\n        var curvature = 0.5;\n        var nodeRadius = 10;\n\n        // set the amount of curvature of the line\n        curvature = this.curvature;\n\n        // whether the link should curve up or down\n        startCurveUp = this.startCurveUp;\n        endCurveUp = this.endCurveUp;\n\n        // calculate the svg objects for the arrow head and line\n        var arrowPathArraysObject = this.ConceptMapService.arrowPathArrays(startx,starty,endx,endy,startCurveUp,endCurveUp,len,angle,curvature,nodeRadius);\n\n        return arrowPathArraysObject;\n    }\n\n    /**\n     * Set the destination node\n     * @param destinationNode the destination ConceptMapNode object\n     */\n    setDestination(destinationNode) {\n\n        if (destinationNode != null) {\n\n            // get x and y of the tail\n            var x1 = this.path.attr('x1');\n            var y1 = this.path.attr('y1');\n\n            // remember the destination node\n            this.destinationNode = destinationNode;\n\n            /*\n             * check if there are any links with that have the same source,\n             * destination, and direction. if there is a link that has the\n             * same source, destination, and direction, we will try to use\n             * a different direction that hasn't already been used. if all\n             * directions have already been used, we will use the original\n             * direction the user specified. there are three link directions,\n             * up, straight, and down.\n             *      ___\n             * up  /   \\\n             *    o    o\n             *\n             * straight o------o\n             *\n             *      o   o\n             * down \\__/\n             */\n\n            var directionAlreadyUsed = false;\n            var direction = '';\n\n            if (this.curvature == 0) {\n                // the user has created the curve to be straight\n                direction = 'straight';\n            } else if (this.startCurveUp && this.endCurveUp) {\n                // the user has created the curve that starts by pointing up\n                direction = 'up';\n            } else if (!this.startCurveUp && !this.endCurveUp) {\n                // the user has created the curve that starts by pointing down\n                direction = 'down';\n            }\n\n            // get all the links that have the same source and destination\n            var parallelLinks = this.sourceNode.getLinksToDestination(destinationNode);\n\n            var usedDirections = [];\n\n            // loop through all the links that have the same source and destination\n            for (var p = 0; p < parallelLinks.length; p++) {\n                var parallelLink = parallelLinks[p];\n\n                if (parallelLink != null) {\n\n                    var curvature = parallelLink.curvature;\n                    var startCurveUp = parallelLink.startCurveUp;\n                    var endCurveUp = parallelLink.endCurveUp;\n\n                    var tempDirection = '';\n\n                    if (curvature == 0) {\n                        // the other link is straight\n                        tempDirection = 'straight';\n                    } else if (startCurveUp && endCurveUp) {\n                        // the other link points up\n                        tempDirection = 'up';\n                    } else if (!startCurveUp && !endCurveUp) {\n                        // the other link points down\n                        tempDirection = 'down'\n                    }\n\n                    if (direction == tempDirection) {\n                        /*\n                         * the direction is the same as the direction the user\n                         * has specified\n                         */\n                        directionAlreadyUsed = true;\n                    }\n\n                    // keep track of the directions that were used\n                    usedDirections.push(tempDirection);\n                }\n            }\n\n            if (directionAlreadyUsed) {\n                /*\n                 * the direction the user specified is already used so we will\n                 * try to find a direction that hasn't been used\n                 */\n\n                if (usedDirections.indexOf('up') == -1) {\n                    /*\n                     * we have not used the up direction yet so we will make\n                     * the link point up\n                     */\n                    this.curvature = 0.5;\n                    this.startCurveUp = true;\n                    this.endCurveUp = true;\n                } else if (usedDirections.indexOf('straight') == -1) {\n                    /*\n                     * we have not used the straight direction yet so we will\n                     * make the link point straight\n                     */\n                    this.curvature = 0.0;\n                    this.startCurveUp = true;\n                    this.endCurveUp = true;\n                } else if (usedDirections.indexOf('down') == -1) {\n                    /*\n                     * we have not used the down direction yet so we will make\n                     * the link point down\n                     */\n                    this.curvature = 0.5;\n                    this.startCurveUp = false;\n                    this.endCurveUp = false;\n                }\n            }\n\n            /*\n             * get the nearest point from the center of the source node to the\n             * destination node along the perimeter of the destination node\n             * image\n             */\n            var nearestPoint = this.getNearestPointToDestinationNode(x1, y1);\n            var x2 = nearestPoint.x;\n            var y2 = nearestPoint.y;\n\n            // update the coordinates of the link\n            var isDragging = false;\n            this.updateCoordinates(x1, y1, x2, y2, isDragging);\n\n            // connect the link to the nodes\n            this.connectLinkToNodes();\n\n            // hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n\n    /**\n     * Get the nearest point to the destination node from a given x, y point\n     * @param x the x value of the source point\n     * @param y the y value of the source point\n     * @returns an object containing an x and y field\n     */\n    getNearestPointToDestinationNode(x, y) {\n\n        // get the coordinates of the upper left corner of the image\n        var rectMinX = this.destinationNode.getImageX();\n        var rectMinY = this.destinationNode.getImageY();\n\n        /*\n         * add padding of 25 pixels to resolve the problem of the arrow head\n         * being placed behind the destination image\n         */\n        rectMinY = rectMinY - 25;\n\n        // get the width and height of the image\n        var width = this.destinationNode.getImageWidth();\n        var height = this.destinationNode.getImageHeight();\n\n        // compensate for the 25 pixel padding that we added above\n        height = height + 25;\n\n        /*\n        var destinationNodeGroup = this.destinationNode.getGroup();\n        var destinationNodeGroupBBox = destinationNodeGroup.bbox();\n\n        rectMinX = this.destinationNode.getGroupX();\n        rectMinY = this.destinationNode.getGroupY();\n\n        width = destinationNodeGroupBBox.width;\n        height = destinationNodeGroupBBox.height;\n        */\n\n        if (x == null && y == null) {\n            // get the coordinates of the source if x and y were not provided\n            x = this.path.attr('x1');\n            y = this.path.attr('y1');\n        }\n\n        /*\n         * find the nearest point from the source to anywhere along the\n         * rectangular perimeter of the destination image\n         */\n        var point = this.getNearestPointInPerimeter(rectMinX, rectMinY, width, height, x, y);\n\n        return point;\n    }\n\n    /**\n     * Get the nearest point on a rectangle from a source point\n     * @param l the upper left x value of the rectangle\n     * @param t the upper left y value of the rectangle\n     * @param w the width of the rectangle\n     * @param h the height of the rectangle\n     * @param x the source point x value\n     * @param y the source point y value\n     * @returns the point on the rectangle that is closest to the\n     */\n    getNearestPointInPerimeter(l, t, w, h, x, y) {\n        var r = l + w;\n        var b = t + h;\n\n        var x = this.clamp(x, l , r);\n        var y = this.clamp(y, t, b);\n\n        var dl = Math.abs(x - l);\n        var dr = Math.abs(x - r);\n        var dt = Math.abs(y - t);\n        var db = Math.abs(y - b);\n\n        var m = Math.min(dl, dr, dt, db);\n\n        var point = {};\n\n        if (m == dt) {\n            point.x = x;\n            point.y = t;\n        } else if (m == db) {\n            point.x = x;\n            point.y = b;\n        } else if (m == dl) {\n            point.x = l;\n            point.y = y;\n        } else {\n            point.x = r;\n            point.y = y;\n        }\n\n        return point;\n    }\n\n    /**\n     * Helper function for getNearestPointInPerimeter\n     */\n    clamp(x, lower, upper) {\n        return Math.max(lower, Math.min(upper, x));\n    }\n\n    /**\n     * Set the color of the link\n     * @param color the color\n     */\n    setColor(color) {\n\n        if (color != null) {\n            // set the color styling\n            this.color = color;\n            this.path.attr('stroke', this.color);\n            this.head.attr('stroke', this.color);\n            this.head.attr('fill', this.color);\n            this.deleteButton.attr('stroke', this.color);\n            this.deleteButtonX.attr('stroke', this.color);\n        }\n    }\n\n    /**\n     * Set the label\n     * @param label the text label\n     */\n    setLabel(label) {\n\n        if (label != null) {\n\n            // remember the label\n            this.label = label;\n\n            // set the text into the text element\n            this.text.text(label);\n\n            // show the text group now that it has a label\n            this.showTextGroup();\n\n            // reset the width to adjust to the new text length\n            var width = 0;\n\n            try {\n                // get the width of the bounding box of the text node\n                var textBBox = this.text.node.getBBox();\n\n                if (textBBox.width == 0) {\n                    width = this.calculateTextRectWidth(this.label);\n                } else {\n                    width = textBBox.width + 10;\n                }\n            } catch(e) {\n                /*\n                 * we were unable to get the bounding box (likely because\n                 * Firefox threw an error when trying to call getBBox())\n                 * so we will calculate the width based on the label text\n                 */\n                width = this.calculateTextRectWidth(this.label);\n            }\n\n            this.textRect.attr('width', width);\n\n            // recalculate the position of the svg text object\n            var totalLength = this.path.node.getTotalLength();\n            var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n            this.textGroup.cx(midPoint.x);\n            this.textGroup.cy(midPoint.y);\n        }\n    }\n\n    /**\n     * Connect a link the its source and destination nodes\n     */\n    connectLinkToNodes() {\n\n        if (this.sourceNode != null && this.destinationNode != null) {\n\n            // add the link to the outgoing links of its source node\n            this.sourceNode.addOutgoingLink(this);\n\n            // add the link to the incoming links of its destination node\n            this.destinationNode.addIncomingLink(this);\n        }\n    }\n\n    /**\n     * Create the delete button for the link\n     */\n    createDeleteButtonGroup() {\n        // create a group to contain the elements of the delete button\n        this.deleteButtonGroup = this.draw.group();\n\n        /*\n         * create an invisible circle that is placed behind the delete button\n         * and has a larger radius than the delete button. this is used for\n         * mouse over purposes so that we can keep the delete button visible\n         * when the mouse is around the area of the delete button\n         */\n        var invisibleCircleRadius = 30;\n        this.invisibleCircle = this.draw.circle();\n        this.invisibleCircle.radius(invisibleCircleRadius);\n        this.invisibleCircle.fill({ opacity: 0.0});\n\n        // create the delete button circle\n        var deleteButtonRadius = 10;\n        this.deleteButton = this.draw.circle();\n        this.deleteButton.radius(deleteButtonRadius);\n        this.deleteButton.fill({ opacity: 0.0 });\n        this.deleteButton.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n        /*\n         * create the x part of the delete button by creating a + and then\n         * rotating it 45 degrees\n         */\n\n        // get the coordinate of the center of the delete button\n        var deleteButtonMidpointX = this.deleteButton.cx();\n        var deleteButtonMidpointY = this.deleteButton.cy();\n\n        // get the coordinates of the top of the +\n        var topX = deleteButtonMidpointX;\n        var topY = deleteButtonMidpointY - (deleteButtonRadius * 0.7);\n\n        // get the coordinates of the bottom of the +\n        var bottomX = deleteButtonMidpointX;\n        var bottomY = deleteButtonMidpointY + (deleteButtonRadius * 0.7);\n\n        // get the coordinates of the left of the +\n        var leftX = deleteButtonMidpointX - (deleteButtonRadius * 0.7);\n        var leftY = deleteButtonMidpointY;\n\n        // get the coordinates of the right of the +\n        var rightX = deleteButtonMidpointX + (deleteButtonRadius * 0.7);\n        var rightY = deleteButtonMidpointY;\n\n        // create the path for the +\n        var deleteButtonXPath = 'M' + topX + ',' + topY + 'L' + bottomX + ',' + bottomY + 'M' + leftX + ',' + leftY + 'L' + rightX + ',' + rightY;\n\n        // draw the path\n        this.deleteButtonX = this.draw.path(deleteButtonXPath);\n        this.deleteButtonX.stroke({ color: this.color, opacity: 1.0, width: 2 });\n\n        /// rotate the + to create the x\n        this.deleteButtonX.rotate(45);\n\n        /*\n         * disable pointer events on the x so that we only need to set a\n         * mouse listener on the circle\n         */\n        this.deleteButtonX.attr('pointer-events', 'none');\n\n        // add the invisible circle, regular circle, and x to the group\n        this.deleteButtonGroup.add(this.invisibleCircle);\n        this.deleteButtonGroup.add(this.deleteButton);\n        this.deleteButtonGroup.add(this.deleteButtonX);\n\n        // set the location of the delete button group\n        var location = this.getDeleteButtonLocation();\n        var x = location.x;\n        var y = location.y;\n        this.deleteButtonGroup.x(x);\n        this.deleteButtonGroup.y(y);\n\n        // set the listener for when the mouse is over the group\n        this.deleteButtonGroup.mouseover((event) => {\n            this.deleteButtonGroupMouseOver(event);\n        });\n\n        // set the listener for when the mouse moves out of the group\n        this.deleteButtonGroup.mouseout((event) => {\n            this.deleteButtonGroupMouseOut(event);\n        });\n\n        // add the delete button group to the link group\n        this.group.add(this.deleteButtonGroup);\n\n        /*\n         * hide the delete button. we only need to show the delete button\n         * when the link is active.\n         */\n        this.deleteButtonGroup.hide();\n    }\n\n    /**\n     * Called when the mouse is over the delete button group\n     * @param event the mouseover event\n     */\n    deleteButtonGroupMouseOver(event) {\n        // show the delete button\n        this.showDeleteButton();\n    }\n\n    /**\n     * Called when the mouse leaves the delete button group\n     * @param event the mouseout event\n     */\n    deleteButtonGroupMouseOut(event) {\n        if (!this.highlighted) {\n            // the link is not highlighted so we will hide the delete button\n            this.hideDeleteButton();\n        }\n    }\n\n    /**\n     * Called when the delete button is clicked\n     * @param deleteButtonClickedFunction the function to call when the delete\n     * button is clicked\n     */\n    setDeleteButtonClicked(deleteButtonClickedFunction) {\n        // listen for the click event on the delete button to call the function\n        this.deleteButton.click(deleteButtonClickedFunction);\n    }\n\n    /**\n     * Called when the mouse is clicked down on the group\n     * @param linkMouseDownFunction the function to call when the mouse is\n     * clicked down on the group\n     */\n    setLinkMouseDown(linkMouseDownFunction) {\n\n        if (this.group != null) {\n            /*\n             * listen for the mousedown event on the group to call\n             * the function\n             */\n            this.group.mousedown(linkMouseDownFunction);\n        }\n    }\n\n    /**\n     * Called when the mouse is clicked down on the link text group\n     * @param linkTextMouseDownFunction the function to call when the mouse is\n     * clicked down on the link text group\n     */\n    setLinkTextMouseDown(linkTextMouseDownFunction) {\n\n        if (this.textGroup != null) {\n            /*\n             * listen for the mousedown event on the link text group to call\n             * the function\n             */\n            this.textGroup.mousedown(linkTextMouseDownFunction);\n        }\n    }\n\n    /**\n     * Called when the mouse is over the group\n     * @param linkMouseOverFunction the function to call when the mouse is over\n     * the group\n     */\n    setLinkMouseOver(linkMouseOverFunction) {\n        if (this.group != null) {\n            // listen for the mouseover event on the group to call the function\n            this.group.mouseover(linkMouseOverFunction);\n        }\n    }\n\n    /**\n     * Called when the mouse leaves the group\n     * @param linkMouseOutFunction the function to call when the mouse leaves\n     * the group\n     */\n    setLinkMouseOut(linkMouseOutFunction) {\n        if (this.group != null) {\n            // listen for the mouseout event on the group to call the function\n            this.group.mouseout(linkMouseOutFunction);\n        }\n    }\n\n    /**\n    * Calculate the location of the delete button for the link\n    *\n    * Note: This function and the associated functions that are called by this\n    * function are taken from the Concord MySystem github project.\n    * https://github.com/concord-consortium/mysystem_sc\n    * The code is found in the _setRemoveButtonLocation function in the link.js file.\n    * mysystem_sc/apps/my_system/views/link.js\n    */\n    getDeleteButtonLocation() {\n        //var line = raphaelObject.items[2];\n\n        var line = this.path.node;\n        var distanceAlongLine = 35;\n        var distanceAlongNormal = 18;\n        var len, p1, p2, scale, dx, dy, x, y, occluded;\n\n        /*\n        var link = this.get('content');\n        if (!link.isComplete()) return;\n        if (line.attr('path').length < 1) return;     // this can happen after our content is destroyed\n        */\n\n        len = line.getTotalLength();\n        p2  = line.getPointAtLength(len);\n\n        if (len > 50) {\n            p1 = line.getPointAtLength(len - distanceAlongLine);\n\n            dx = p2.x - p1.x;\n            dy = p2.y - p1.y;\n            scale = distanceAlongNormal / distanceAlongLine * (dx > 0 ? 1 : -1);\n\n            x = p1.x + scale * dy;\n            y = p1.y - scale * dx;\n            //occluded = NO;\n        }\n        else {\n            x = 0;\n            y = 0;\n            //occluded = YES;\n        }\n\n        /*\n        this.set('removeButtonX', x);\n        this.set('removeButtonY', y);\n        this.set('isRemoveButtonOccluded', occluded);\n        */\n\n        var location = {};\n        location.x = x;\n        location.y = y;\n\n        return location;\n    }\n\n    /**\n     * Show the delete button\n     */\n    showDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.show();\n        }\n    }\n\n    /**\n     * Hide the delete button\n     */\n    hideDeleteButton() {\n        if (this.deleteButtonGroup != null) {\n            this.deleteButtonGroup.hide();\n        }\n    }\n\n    /**\n     * Create the text group\n     * @returns the text group\n     */\n    createTextGroup() {\n\n        // create the group\n        this.textGroup = this.draw.group();\n\n        // create a rectangle to surround the text\n        this.textRect = this.draw.rect(100, 15);\n        this.textRect.attr('fill', 'white');\n        this.textRect.attr('stroke', 'black');\n        this.textRect.attr('x', 0);\n        this.textRect.attr('y', 10);\n        this.textRect.attr('width', 100);\n        this.textRect.attr('height', 20);\n        this.textRect.radius(5);\n\n        var label = \"\";\n\n        // create the text element\n        this.text = this.draw.text(label);\n        this.text.attr('x', 5);\n        this.text.attr('y', 9);\n        this.text.font({\n            family: 'Arial',\n            size: 12\n        });\n\n        // prevent the text from being highlighted when the user drags the mouse\n        this.text.style('user-select:none');\n        this.text.node.setAttribute('user-select', 'none');\n        this.text.node.setAttribute('style', 'user-select:none');\n\n        // add the rectangle and text to the group\n        this.textGroup.add(this.textRect);\n        this.textGroup.add(this.text);\n\n        var width = 0;\n\n        try {\n            // get the width of the bounding box of the text node\n            var textBBox = this.text.node.getBBox();\n\n            if (textBBox.width == 0) {\n                width = this.calculateTextRectWidth(this.label);\n            } else {\n                width = textBBox.width + 10;\n            }\n        } catch(e) {\n            /*\n             * we were unable to get the bounding box (likely because\n             * Firefox threw an error when trying to call getBBox())\n             * so we will calculate the width based on the label text\n             */\n            width = this.calculateTextRectWidth(this.label);\n        }\n\n        this.textRect.attr('width', width);\n\n        // set the location of the text to be somewhere along the line of the link\n        var totalLength = this.path.node.getTotalLength();\n        var midPoint = this.path.node.getPointAtLength(totalLength * this.textPercentageLocationOnLink);\n        this.textGroup.cx(midPoint.x);\n        this.textGroup.cy(midPoint.y);\n\n        // hide the text group until the student has chosen a link type\n        this.textGroup.hide();\n\n        /*\n         * set the link group id into the text group so we can look it up\n         * later when the mouse is clicked down on the text group\n         */\n        this.textGroup.node.linkGroupId = this.group.id();\n\n        return this.textGroup;\n    }\n\n    /**\n     * Move the text group to the front so that it won't be blocked behind\n     * another element when the student tries to click on the text group.\n     */\n    moveTextGroupToFront() {\n        this.textGroup.front();\n    }\n\n    /**\n     * Show the text group\n     */\n    showTextGroup() {\n\n        if (this.textGroup != null) {\n            this.textGroup.show();\n        }\n    }\n\n    /**\n     * Hide the text group\n     */\n    hideTextGroup() {\n\n        if (this.textGroup != null) {\n            this.textGroup.hide();\n        }\n    }\n\n    /**\n     * Remove all the references to the link and also remove all the elements\n     * from the svg\n     */\n    remove() {\n\n        if (this.sourceNode != null) {\n            // remove the link from the source node's outgoing links\n            this.sourceNode.removeOutgoingLink(this);\n        }\n\n        if (this.destinationNode != null) {\n            // remove the link from the destination node's incoming links\n            this.destinationNode.removeIncomingLink(this);\n        }\n\n        if (this.path != null) {\n            // remove the line\n            this.path.remove();\n        }\n\n        if (this.head != null) {\n            // remove the arrow head\n            this.head.remove();\n        }\n\n        if (this.deleteButtonGroup != null) {\n            // remove the delete button group\n            this.deleteButtonGroup.remove();\n        }\n\n        if (this.textGroup != null) {\n            // remove the text group\n            this.textGroup.remove();\n        }\n\n        if (this.group != null) {\n            // remove the link group\n            this.group.remove();\n        }\n    }\n\n    /**\n     * Calculate the width that the text rectangle should be set to\n     * @param labelText the label text that will be displayed in the rectangle\n     * @return the width that the text rectangle should be set to\n     */\n    calculateTextRectWidth(labelText) {\n        var width = 0;\n\n        if (labelText != null) {\n            width = (labelText.length * 6) + 10;\n        }\n\n        return width;\n    }\n}\n\n\nConceptMapService.$inject = [\n    '$filter',\n    '$q',\n    '$timeout',\n    'ConfigService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default ConceptMapService;\n"]}