{"version":3,"sources":["discussionAuthoringController.es6"],"names":["DiscussionAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","componentContent","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","hideJSONValidMessage","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","$broadcast","jsonStringChanged","e","showSaveErrorAdvancedAuthoring","toJson","html","removeAbsoluteAssetPaths","insertWISELinks","authoringViewComponentChanged","newConnectedComponent","updateOn","connectedComponents","push","index","splice","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","answer","confirm","componentType","a","length","allowedConnectedComponentType","showJSONAuthoring","isJSONValid","saveJSONAuthoringViewChanges","toggleJSONAuthoringView","showJSONValidMessage","showJSONInvalidMessage","$inject"],"mappings":"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","file":"discussionAuthoringController.js","sourcesContent":["'use strict';\n\nimport DiscussionController from \"./discussionController\";\n\nclass DiscussionAuthoringController extends DiscussionController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              DiscussionService,\n              NodeService,\n              NotebookService,\n              NotificationService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              StudentWebSocketService,\n              UtilService,\n              $mdMedia) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      DiscussionService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      StudentWebSocketService,\n      UtilService,\n      $mdMedia);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Discussion'\n      }\n    ];\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n          this.UtilService.hideJSONValidMessage();\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  saveJSONAuthoringViewChanges() {\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n      this.jsonStringChanged = false;\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'showWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    if (this.showJSONAuthoring) {\n      // we were showing the JSON authoring view and now we want to hide it\n      if (this.isJSONValid()) {\n        this.saveJSONAuthoringViewChanges();\n        this.toggleJSONAuthoringView();\n        this.UtilService.hideJSONValidMessage();\n      } else {\n        let answer = confirm(this.$translate('jsonInvalidErrorMessage'));\n        if (answer) {\n          // the author wants to revert back to the last valid JSON\n          this.toggleJSONAuthoringView();\n          this.UtilService.hideJSONValidMessage();\n          this.jsonStringChanged = true;\n        }\n      }\n    } else {\n      // we were not showing the JSON authoring view and now we want to show it\n      this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n      this.toggleJSONAuthoringView();\n    }\n  }\n\n  toggleJSONAuthoringView() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n    if (this.isJSONValid()) {\n      this.UtilService.showJSONValidMessage();\n    } else {\n      this.UtilService.showJSONInvalidMessage();\n    }\n  }\n\n  isJSONValid() {\n    try {\n      angular.fromJson(this.authoringComponentContentJSONString);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nDiscussionAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'DiscussionService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'StudentWebSocketService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default DiscussionAuthoringController;\n"]}