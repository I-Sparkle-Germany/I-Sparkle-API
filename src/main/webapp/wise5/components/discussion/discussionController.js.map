{"version":3,"sources":["discussionController.es6"],"names":[],"mappings":"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","file":"discussionController.js","sourcesContent":["class DiscussionController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                ConfigService,\n                DiscussionService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService,\n                $mdMedia) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.DiscussionService = DiscussionService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.$mdMedia = $mdMedia;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds the text for a new response (not a reply)\n        this.newResponse = '';\n\n        // holds student attachments like assets\n        this.newAttachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the class responses\n        this.classResponses = [];\n\n        // will hold the top level responses\n        this.topLevelResponses = [];\n\n        // the text that is being submitted\n        this.submitText = null;\n\n        // map from component state id to response\n        this.responsesMap = {};\n\n        // whether rich text is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether we have retrieved the classmate responses\n        this.retrievedClassmateResponses = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        this.workgroupId = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.mode = this.$scope.mode;\n\n            if (this.$scope.workgroupId != null) {\n                this.workgroupId = this.$scope.workgroupId;\n            }\n\n            if (this.$scope.nodeId != null) {\n                this.nodeId = this.$scope.nodeId;\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the node content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n            } else {\n                // this is a regular component\n\n                if (this.mode === 'student') {\n                    if (this.ConfigService.isPreview()) {\n                        // we are in preview mode, so get all posts\n                        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                        this.setClassResponses(componentStates);\n                    } else {\n                        // we are in regular student run mode\n\n                        if (this.isClassmateResponsesGated()) {\n                            /*\n                             * classmate responses are gated so we will not show them if the student\n                             * has not submitted a response\n                             */\n\n                            // get the component state from the scope\n                            var componentState = this.$scope.componentState;\n\n                            if (componentState != null) {\n                                /*\n                                 * the student has already submitted a response so we will\n                                 * display the classmate responses\n                                 */\n                                this.getClassmateResponses();\n                            }\n                        } else {\n                            // classmate responses are not gated so we will show them\n                            this.getClassmateResponses();\n                        }\n                    }\n\n                    // check if we need to lock this component\n                    this.calculateDisabled();\n                } else if (this.mode === 'grading') {\n\n                    /*\n                     * get all the posts that this workgroup id is part of. if the student\n                     * posted a top level response we will get the top level response and\n                     * all the replies. if the student replied to a top level response we\n                     * will get the top level response and all the replies.\n                     */\n                    var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n                    this.setClassResponses(componentStates);\n\n                    this.isDisabled = true;\n                } else if (this.mode === 'onlyShowWork') {\n                    this.isDisabled = true;\n                } else if (this.mode === 'authoring') {\n                    this.updateAdvancedAuthoringView();\n\n                    $scope.$watch(function() {\n                        return this.authoringComponentContent;\n                    }.bind(this), function(newValue, oldValue) {\n                        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    }.bind(this), true);\n                }\n            }\n\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The submit button was clicked\n         * @param response the response object related to the submit button\n         */\n        this.$scope.submitbuttonclicked = function(response) {\n\n            if (response) {\n                // this submit button was clicked for a reply\n\n                if(response.replyText){\n                    var componentState = response;\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    /*\n                     * remember the values in the controller so we can read\n                     * from them later when the student data is saved\n                     */\n                    this.$scope.discussionController.studentResponse = componentState.replyText;\n                    this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n                    // clear the reply input\n                    response.replyText = null;\n\n                    this.$scope.discussionController.isSubmit = true;\n                    this.$scope.discussionController.isDirty = true;\n                }\n            } else {\n                // the submit button was clicked for the new post\n\n                /*\n                 * set the response from the top textarea into the\n                 * studentResponse field that we will read from later\n                 * when the student data is saved\n                 */\n                this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n                this.$scope.discussionController.isSubmit = true;\n            }\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var componentState = null;\n\n            // check if the student work is dirty and the student clicked the submit button\n            if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n                // create a component state populated with the student data\n                componentState = this.$scope.discussionController.createComponentState();\n\n                /*\n                 * clear the component values so they aren't accidentally used again\n                 * later\n                 */\n                this.$scope.discussionController.clearComponentValues();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.discussionController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n            // do nothing\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // check if the classmate responses are gated\n                if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n                    /*\n                     * the classmate responses are gated and we haven't retrieved\n                     * them yet so we will obtain them now and show them since the student\n                     * has just submitted a response. getting the classmate responses will\n                     * also get the post the student just saved to the server.\n                     */\n                    this.getClassmateResponses();\n                } else {\n                    /*\n                     * the classmate responses are not gated or have already been retrieved\n                     * which means they are already being displayed. we just need to add the\n                     * new response in this case.\n                     */\n\n                    // add the component state to our collection of class responses\n                    this.addClassResponse(componentState);\n                }\n\n                this.submit();\n\n                // send the student post to web sockets so all the classmates receive it in real time\n                this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(componentState);\n            }\n\n            this.isSubmit = null;\n        }));\n\n        this.$scope.studentdatachanged = function() {\n            this.$scope.discussionController.studentDataChanged();\n        };\n\n        /**\n         * We have recived a web socket message\n         */\n        this.$rootScope.$on('webSocketMessageRecieved', angular.bind(this, function(event, args) {\n            if (args != null) {\n                var data = args.data;\n\n                var componentState = data.data;\n\n                if (componentState != null) {\n\n                    // check that the web socket message is for this step\n                    if (componentState.nodeId === this.nodeId) {\n\n                        // get the sender of the message\n                        var componentStateWorkgroupId = componentState.workgroupId;\n\n                        // get the workgroup id of the signed in student\n                        var workgroupId = this.ConfigService.getWorkgroupId();\n\n                        /*\n                         * check if the signed in student sent the message. if the\n                         * signed in student sent the message we can ignore it.\n                         */\n                        if (workgroupId !== componentStateWorkgroupId) {\n\n                            if (this.retrievedClassmateResponses) {\n                                // display the classmate post\n                                this.addClassResponse(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n\n        var scope = this;\n        var themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors?\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link autoresize',\n            toolbar: 'superscript subscript',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            statusbar: false,\n            forced_root_block: false,\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        this.$scope.$watch(function() { return $mdMedia('gt-md'); }, function(lg) {\n            $scope.lgScreen = lg;\n        });\n\n    }\n\n    /**\n     * Get the classmate responses\n     */\n    getClassmateResponses() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n\n        // make the request for the classmate responses\n        this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then(angular.bind(this, function(result) {\n\n            if (result != null) {\n                var componentStates = result.studentWorkList;\n\n                // set the classmate responses\n                this.setClassResponses(componentStates);\n            }\n        }));\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            // populate the text the student previously typed\n            var studentData = componentState.studentData;\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // handle the submit button click\n        this.$scope.submitbuttonclicked();\n    };\n\n    submit() {\n        if (this.isLockAfterSubmit()) {\n            // disable the component if it was authored to lock after submit\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // set the response into the component state\n            studentData.response = this.studentResponse;\n\n            studentData.attachments = this.newAttachments;\n\n            if (this.componentStateIdReplyingTo != null) {\n                // if this step is replying, set the component state id replying to\n                studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n            }\n\n            componentState.studentData = studentData;\n\n            if (this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) {\n                // create a dummy component state id if we're in preview mode and posting a new response\n                componentState.id = this.UtilService.generateKey();\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.studentData.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Clear the component values so they aren't accidentally used again\n     */\n    clearComponentValues() {\n\n        // clear the student response\n        this.studentResponse = '';\n\n        // clear the new response input\n        this.newResponse = '';\n\n        // clear new attachments input\n        this.newAttachments = [];\n\n        // clear the component state id replying to\n        this.componentStateIdReplyingTo = null;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     * @return whether to lock the component after the student submits\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to gate the classmate responses\n     * @return whether to gate the classmate responses\n     */\n    isClassmateResponsesGated() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the gateClassmateResponses field in the component content\n            if (this.componentContent.gateClassmateResponses) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.newAttachments.indexOf(attachment) != -1) {\n            this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.newAttachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Set the class responses into the controller\n     * @param componentStates the class component states\n     */\n    setClassResponses(componentStates) {\n\n        this.classResponses = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    // get the component state id\n                    var id = componentState.id;\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        if (componentState.studentData.isSubmit) {\n\n                            // add the user names to the component state so we can display next to the response\n                            componentState.userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId, true).join(', ');\n\n                            // add a replies array to the component state that we will fill with component state replies later\n                            componentState.replies = [];\n\n                            // add the component state to our array\n                            this.classResponses.push(componentState);\n                        }\n                    }\n                }\n            }\n        }\n\n        // process the class responses\n        this.processResponses(this.classResponses);\n\n        this.retrievedClassmateResponses = true;\n    };\n\n    /**\n     * Process the class responses. This will put responses into the\n     * replies arrays.\n     * @param classResponses an array of component states\n     */\n    processResponses(componentStates) {\n\n        if (componentStates) {\n            var componentState;\n\n            // loop through all the component states\n            for (var i = 0; i < componentStates.length; i++) {\n                componentState = componentStates[i];\n\n                if (componentState) {\n                    var componentStateId = componentState.id;\n\n                    // set the component state into the map\n                    this.responsesMap[componentStateId] = componentState;\n                }\n            }\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                componentState = componentStates[c];\n\n                if (componentState && componentState.studentData) {\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo) {\n\n                        if (this.responsesMap[componentStateIdReplyingTo] &&\n                            this.responsesMap[componentStateIdReplyingTo].replies) {\n                            /*\n                             * add this component state to the replies array of the\n                             * component state that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n                }\n            }\n\n            this.topLevelResponses = this.getLevel1Responses();\n        }\n    };\n\n    /**\n     * Add a class response to our model\n     * @param componentState the component state to add to our model\n     */\n    addClassResponse(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // check if the student data was a submit\n                var isSubmit = componentState.studentData.isSubmit;\n\n                if (isSubmit) {\n                    // this component state is a submit so we will add it\n\n                    if (componentState != null) {\n\n                        // get the workgroup id\n                        var workgroupId = componentState.workgroupId;\n\n                        // add the user names to the component state so we can display next to the response\n                        componentState.userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId, true).join(', ');\n\n                        // add a replies array to the component state that we will fill with component state replies later\n                        componentState.replies = [];\n\n                        // add the component state to our array of class responses\n                        this.classResponses.push(componentState);\n\n                        // get the component state id\n                        var componentStateId = componentState.id;\n\n                        // add the response to our map\n                        this.responsesMap[componentStateId] = componentState;\n\n                        // get the component state id replying to if any\n                        var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                        if (componentStateIdReplyingTo != null) {\n\n                            // check if we have the component state that was replied to\n                            if (this.responsesMap[componentStateIdReplyingTo] != null &&\n                                this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                                /*\n                                 * add this response to the replies array of the response\n                                 * that was replied to\n                                 */\n                                this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                            }\n                        }\n\n                        this.topLevelResponses = this.getLevel1Responses();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the class responses\n     */\n    getClassResponses() {\n        return this.classResponses;\n    };\n\n    /**\n     * Get the level 1 responses which are posts that are not a\n     * reply to another response.\n     * @return an array of responses that are not a reply to another\n     * response\n     */\n    getLevel1Responses() {\n        var level1Responses = [];\n        var classResponses = this.classResponses;\n\n        if (classResponses != null) {\n\n            // loop through all the class responses\n            for (var r = 0; r < classResponses.length; r++) {\n                var tempClassResponse = classResponses[r];\n\n                if (tempClassResponse != null && tempClassResponse.studentData) {\n\n                    // get the student data\n                    var studentData = tempClassResponse.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo == null) {\n                        /*\n                         * this response was not a reply to another post so it is a\n                         * level 1 response\n                         */\n                        level1Responses.push(tempClassResponse);\n                    }\n                }\n            }\n        }\n\n        return level1Responses;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nDiscussionController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'DiscussionService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}