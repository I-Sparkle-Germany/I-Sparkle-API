{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","newResponse","newAttachments","isDisabled","isDirty","isShowPreviousWork","isSubmit","showAdvancedAuthoring","showJSONAuthoring","classResponses","topLevelResponses","submitText","responsesMap","isRichTextEnabled","isStudentAttachmentEnabled","retrievedClassmateResponses","latestAnnotations","mode","workgroupId","teacherWorkgroupId","connectedComponentUpdateOnOptions","value","text","currentNode","getCurrentNode","id","originalComponentContent","isPreview","componentStates","getComponentStatesByNodeIdAndComponentId","setClassResponses","isClassmateResponsesGated","componentState","getClassmateResponses","getLatestComponentAnnotations","calculateDisabled","getPostsAssociatedWithWorkgroupId","annotations","getInappropriateFlagAnnotationsByComponentStates","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$parent","nodeController","registerComponentController","submitbuttonclicked","response","replyText","componentStateId","discussionController","componentStateIdReplyingTo","createComponentState","$emit","getComponentState","deferred","defer","action","then","clearComponentValues","resolve","promise","$on","event","args","annotation","annotationNodeId","annotationComponentId","studentWork","addClassResponse","submit","messageType","sendStudentToClassmatesInPeriodMessage","studentData","fromWorkgroupId","notificationType","userNamesArray","getUserNamesByWorkgroupId","userNames","map","obj","name","join","notificationMessage","workgroupsNotifiedSoFar","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","savedNotification","push","replies","r","length","reply","indexOf","studentdatachanged","studentDataChanged","data","componentStateWorkgroupId","getWorkgroupId","scope","themePath","getThemePath","tinymceOptions","menubar","plugins","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","statusbar","forced_root_block","setup","ed","on","e","$","target","editorContainer","addClass","parent","removeClass","md","mdScreen","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","runId","getRunId","periodId","getPeriodId","result","studentWorkList","isLockAfterSubmit","getComponentId","createNewComponentState","attachments","generateKey","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","show","showSaveButton","showSubmitButton","gateClassmateResponses","attachment","splice","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","importWorkNodeId","importWorkComponentId","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","setStudentWork","c","latestInappropriateFlagAnnotation","getLatestInappropriateFlagAnnotationByStudentWorkId","processResponses","studentWorkId","a","type","i","getLevel1Responses","level1Responses","tempClassResponse","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","exitListener","$broadcast","components","getComponentsByNodeId","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","index","userInfo","getUserInfoByWorkgroupId","teacherUserInfo","getMyUserInfo","createInappropriateFlagAnnotation","saveAnnotation","getLatestAnnotationByStudentWorkIdAndType","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["class DiscussionController {\r\n    constructor($filter,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                AnnotationService,\r\n                ConfigService,\r\n                DiscussionService,\r\n                NodeService,\r\n                NotificationService,\r\n                ProjectService,\r\n                StudentAssetService,\r\n                StudentDataService,\r\n                StudentWebSocketService,\r\n                UtilService,\r\n                $mdMedia) {\r\n\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.DiscussionService = DiscussionService;\r\n        this.NodeService = NodeService;\r\n        this.NotificationService = NotificationService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentAssetService = StudentAssetService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.StudentWebSocketService = StudentWebSocketService;\r\n        this.UtilService = UtilService;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n        this.$mdMedia = $mdMedia;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // holds the text that the student has typed\r\n        this.studentResponse = '';\r\n\r\n        // holds the text for a new response (not a reply)\r\n        this.newResponse = '';\r\n\r\n        // holds student attachments like assets\r\n        this.newAttachments = [];\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether this part is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        // will hold the class responses\r\n        this.classResponses = [];\r\n\r\n        // will hold the top level responses\r\n        this.topLevelResponses = [];\r\n\r\n        // the text that is being submitted\r\n        this.submitText = null;\r\n\r\n        // map from component state id to response\r\n        this.responsesMap = {};\r\n\r\n        // whether rich text is enabled\r\n        this.isRichTextEnabled = false;\r\n\r\n        // whether students can attach files to their work\r\n        this.isStudentAttachmentEnabled = false;\r\n\r\n        // whether we have retrieved the classmate responses\r\n        this.retrievedClassmateResponses = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        this.workgroupId = null;\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            this.mode = this.$scope.mode;\r\n\r\n            if (this.$scope.workgroupId != null) {\r\n                this.workgroupId = this.$scope.workgroupId;\r\n            }\r\n\r\n            if (this.$scope.nodeId != null) {\r\n                this.nodeId = this.$scope.nodeId;\r\n            }\r\n\r\n            if (this.mode === 'student') {\r\n                if (this.ConfigService.isPreview()) {\r\n                    // we are in preview mode, so get all posts\r\n                    var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                    this.setClassResponses(componentStates);\r\n                } else {\r\n                    // we are in regular student run mode\r\n\r\n                    if (this.isClassmateResponsesGated()) {\r\n                        /*\r\n                         * classmate responses are gated so we will not show them if the student\r\n                         * has not submitted a response\r\n                         */\r\n\r\n                        // get the component state from the scope\r\n                        var componentState = this.$scope.componentState;\r\n\r\n                        if (componentState != null) {\r\n                            /*\r\n                             * the student has already submitted a response so we will\r\n                             * display the classmate responses\r\n                             */\r\n                            this.getClassmateResponses();\r\n                        }\r\n                    } else {\r\n                        // classmate responses are not gated so we will show them\r\n                        this.getClassmateResponses();\r\n                    }\r\n\r\n                    // get the latest annotations\r\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                }\r\n\r\n                // check if we need to lock this component\r\n                this.calculateDisabled();\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n\r\n                /*\r\n                 * get all the posts that this workgroup id is part of. if the student\r\n                 * posted a top level response we will get the top level response and\r\n                 * all the replies. if the student replied to a top level response we\r\n                 * will get the top level response and all the replies.\r\n                 */\r\n                var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\r\n\r\n                // get the innappropriate flag annotations for the component states\r\n                var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\r\n\r\n                // show the posts\r\n                this.setClassResponses(componentStates, annotations);\r\n\r\n                this.isDisabled = true;\r\n\r\n                if (this.mode === 'grading') {\r\n                    // get the latest annotations\r\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                }\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n                }.bind(this), true);\r\n            }\r\n\r\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\r\n\r\n            // set whether studentAttachment is enabled\r\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The submit button was clicked\r\n         * @param response the response object related to the submit button\r\n         */\r\n        this.$scope.submitbuttonclicked = function(response) {\r\n\r\n            if (response) {\r\n                // this submit button was clicked for a reply\r\n\r\n                if (response.replyText){\r\n                    var componentState = response;\r\n\r\n                    // get the component state id\r\n                    var componentStateId = componentState.id;\r\n\r\n                    /*\r\n                     * remember the values in the controller so we can read\r\n                     * from them later when the student data is saved\r\n                     */\r\n                    this.$scope.discussionController.studentResponse = componentState.replyText;\r\n                    this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\r\n\r\n                    // clear the reply input\r\n                    response.replyText = null;\r\n\r\n                    this.$scope.discussionController.isSubmit = true;\r\n                    this.$scope.discussionController.isDirty = true;\r\n                }\r\n            } else {\r\n                // the submit button was clicked for the new post\r\n\r\n                /*\r\n                 * set the response from the top textarea into the\r\n                 * studentResponse field that we will read from later\r\n                 * when the student data is saved\r\n                 */\r\n                this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\r\n\r\n                this.$scope.discussionController.isSubmit = true;\r\n            }\r\n\r\n            if (this.mode === 'authoring') {\r\n                this.createComponentState('submit');\r\n            }\r\n\r\n            // tell the parent node that this component wants to submit\r\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @return a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function() {\r\n            var deferred = this.$q.defer();\r\n\r\n            // check if the student work is dirty and the student clicked the submit button\r\n            if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\r\n\r\n                var action = 'submit';\r\n\r\n                // create a component state populated with the student data\r\n                this.$scope.discussionController.createComponentState(action).then((componentState) => {\r\n                    /*\r\n                     * clear the component values so they aren't accidentally used again\r\n                     * later\r\n                     */\r\n                    this.$scope.discussionController.clearComponentValues();\r\n\r\n                    // set isDirty to false since this student work is about to be saved\r\n                    this.$scope.discussionController.isDirty = false;\r\n\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n                this.isSubmit = true;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', (event, args) => {\r\n\r\n            // do nothing\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // check if the classmate responses are gated\r\n                if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\r\n                    /*\r\n                     * the classmate responses are gated and we haven't retrieved\r\n                     * them yet so we will obtain them now and show them since the student\r\n                     * has just submitted a response. getting the classmate responses will\r\n                     * also get the post the student just saved to the server.\r\n                     */\r\n                    this.getClassmateResponses();\r\n                } else {\r\n                    /*\r\n                     * the classmate responses are not gated or have already been retrieved\r\n                     * which means they are already being displayed. we just need to add the\r\n                     * new response in this case.\r\n                     */\r\n\r\n                    // add the component state to our collection of class responses\r\n                    this.addClassResponse(componentState);\r\n                }\r\n\r\n                this.submit();\r\n\r\n                // send the student post to web sockets so all the classmates receive it in real time\r\n                let messageType = \"studentData\";\r\n                this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\r\n\r\n                // next, send notifications to students who have posted a response in the same thread as this post\r\n                let studentData = componentState.studentData;\r\n                if (studentData != null && this.responsesMap != null) {\r\n                    let componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\r\n                    if (componentStateIdReplyingTo != null) {\r\n                        // populate fields of the notification\r\n                        let fromWorkgroupId = componentState.workgroupId;\r\n                        let notificationType = \"DiscussionReply\";\r\n                        let nodeId = componentState.nodeId;\r\n                        let componentId = componentState.componentId;\r\n                        // add the user names to the component state so we can display next to the response\r\n                        let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\r\n                        let userNames = userNamesArray.map( (obj) => {\r\n                            return obj.name;\r\n                        }).join(', ');\r\n                        let notificationMessage = this.$translate('discussion.repliedToADiscussionYouWereIn', { userNames: userNames });\r\n\r\n                        let workgroupsNotifiedSoFar = [];  // keep track of workgroups we've already notified, in case a workgroup posts twice on a thread we only want to notify once.\r\n                        // check if we have the component state that was replied to\r\n                        if (this.responsesMap[componentStateIdReplyingTo] != null) {\r\n                            let originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\r\n                            let toWorkgroupId = originalPostComponentState.workgroupId; // notify the workgroup who posted this reply\r\n                            if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\r\n                                let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\r\n                                this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\r\n                                    let messageType = \"notification\";\r\n                                    this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\r\n                                });\r\n                                workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\r\n                            }\r\n\r\n                            // also notify repliers to this thread, if any.\r\n                            if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\r\n                                let replies = this.responsesMap[componentStateIdReplyingTo].replies;\r\n\r\n                                for (let r = 0; r < replies.length; r++) {\r\n                                    let reply = replies[r];\r\n                                    let toWorkgroupId = reply.workgroupId; // notify the workgroup who posted this reply\r\n                                    if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId && workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\r\n                                        let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\r\n                                        this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\r\n                                            let messageType = \"notification\";\r\n                                            this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\r\n                                        });\r\n                                        workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.isSubmit = null;\r\n        });\r\n\r\n        this.$scope.studentdatachanged = function() {\r\n            this.$scope.discussionController.studentDataChanged();\r\n        };\r\n\r\n        /**\r\n         * We have recived a web socket message\r\n         */\r\n        this.$rootScope.$on('webSocketMessageRecieved', (event, args) => {\r\n            if (args != null) {\r\n                var data = args.data;\r\n\r\n                var componentState = data.data;\r\n\r\n                if (componentState != null) {\r\n\r\n                    // check that the web socket message is for this step\r\n                    if (componentState.nodeId === this.nodeId) {\r\n\r\n                        // get the sender of the message\r\n                        var componentStateWorkgroupId = componentState.workgroupId;\r\n\r\n                        // get the workgroup id of the signed in student\r\n                        var workgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n                        /*\r\n                         * check if the signed in student sent the message. if the\r\n                         * signed in student sent the message we can ignore it.\r\n                         */\r\n                        if (workgroupId !== componentStateWorkgroupId) {\r\n\r\n                            if (this.retrievedClassmateResponses) {\r\n                                // display the classmate post\r\n                                this.addClassResponse(componentState);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var scope = this;\r\n        var themePath = this.ProjectService.getThemePath();\r\n\r\n        // TODO: make toolbar items and plugins customizable by authors?\r\n        // Rich text editor options\r\n        this.tinymceOptions = {\r\n            //onChange: function(e) {\r\n            //scope.studentDataChanged();\r\n            //},\r\n            menubar: false,\r\n            plugins: 'link autoresize',\r\n            toolbar: 'superscript subscript',\r\n            autoresize_bottom_margin: \"0\",\r\n            autoresize_min_height: \"100\",\r\n            image_advtab: true,\r\n            content_css: themePath + \"/style/tinymce.css\",\r\n            statusbar: false,\r\n            forced_root_block: false,\r\n            setup: function (ed) {\r\n                ed.on(\"focus\", function (e) {\r\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\r\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\r\n                });\r\n\r\n                ed.on(\"blur\", function (e) {\r\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\r\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\r\n                });\r\n            }\r\n        };\r\n\r\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\r\n            $scope.mdScreen = md;\r\n        });\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the classmate responses\r\n     */\r\n    getClassmateResponses() {\r\n        var runId = this.ConfigService.getRunId();\r\n        var periodId = this.ConfigService.getPeriodId();\r\n        var nodeId = this.nodeId;\r\n        var componentId = this.componentId;\r\n\r\n        // make the request for the classmate responses\r\n        this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\r\n\r\n            if (result != null) {\r\n                var componentStates = result.studentWorkList;\r\n\r\n                /*\r\n                 * get the annotations in case there are any that have\r\n                 * inappropriate flags\r\n                 */\r\n                var annotations = result.annotations;\r\n\r\n                // set the classmate responses\r\n                this.setClassResponses(componentStates, annotations);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n            // populate the text the student previously typed\r\n            var studentData = componentState.studentData;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        this.isSubmit = true;\r\n\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n\r\n        // handle the submit button click\r\n        this.$scope.submitbuttonclicked();\r\n    };\r\n\r\n    submit() {\r\n        if (this.isLockAfterSubmit()) {\r\n            // disable the component if it was authored to lock after submit\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flag so we will know we need to save the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        if (componentState != null) {\r\n            var studentData = {};\r\n\r\n            // set the response into the component state\r\n            studentData.response = this.studentResponse;\r\n\r\n            studentData.attachments = this.newAttachments;\r\n\r\n            if (this.componentStateIdReplyingTo != null) {\r\n                // if this step is replying, set the component state id replying to\r\n                studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\r\n            }\r\n\r\n            componentState.studentData = studentData;\r\n\r\n            if ((this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) || this.mode === 'authoring') {\r\n                // create a dummy component state id if we're in preview mode and posting a new response\r\n                componentState.id = this.UtilService.generateKey();\r\n            }\r\n\r\n            if (this.isSubmit) {\r\n                // the student submitted this work\r\n                componentState.studentData.isSubmit = this.isSubmit;\r\n\r\n                /*\r\n                 * reset the isSubmit value so that the next component state\r\n                 * doesn't maintain the same value\r\n                 */\r\n                this.isSubmit = false;\r\n\r\n                if (this.mode === 'authoring') {\r\n                    if (this.StudentDataService.studentData == null) {\r\n                        /*\r\n                         * initialize the student data since this usually doesn't\r\n                         * occur in the authoring mode\r\n                         */\r\n                        this.StudentDataService.studentData = {};\r\n                        this.StudentDataService.studentData.componentStates = [];\r\n                    }\r\n\r\n                    /*\r\n                     * set the node id and component id into the component state.\r\n                     * this is usually performed in the nodeController but since\r\n                     * we are in the authoring mode, the nodeController never gets\r\n                     * called\r\n                     */\r\n                    componentState.nodeId = this.nodeId;\r\n                    componentState.componentId = this.componentId;\r\n\r\n                    // add the component state to the StudentDataService studentData\r\n                    this.StudentDataService.studentData.componentStates.push(componentState);\r\n\r\n                    // get the component states for this component\r\n                    var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                    // set the component states into the component\r\n                    this.setClassResponses(componentStates);\r\n\r\n                    /*\r\n                     * clear the input where the user has entered the text they\r\n                     * are posting\r\n                     */\r\n                    this.clearComponentValues();\r\n                    this.isDirty = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    /**\r\n     * Clear the component values so they aren't accidentally used again\r\n     */\r\n    clearComponentValues() {\r\n\r\n        // clear the student response\r\n        this.studentResponse = '';\r\n\r\n        // clear the new response input\r\n        this.newResponse = '';\r\n\r\n        // clear new attachments input\r\n        this.newAttachments = [];\r\n\r\n        // clear the component state id replying to\r\n        this.componentStateIdReplyingTo = null;\r\n    };\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        var nodeId = this.nodeId;\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the step after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the save button\r\n     * @return whether to show the save button\r\n     */\r\n    showSaveButton() {\r\n        var show = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the showSaveButton field in the component content\r\n            if (this.componentContent.showSaveButton) {\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the submit button\r\n     * @return whether to show the submit button\r\n     */\r\n    showSubmitButton() {\r\n        var show = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the showSubmitButton field in the component content\r\n            if (this.componentContent.showSubmitButton) {\r\n                show = true;\r\n            }\r\n        }\r\n\r\n        return show;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     * @return whether to lock the component after the student submits\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to gate the classmate responses\r\n     * @return whether to gate the classmate responses\r\n     */\r\n    isClassmateResponsesGated() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the gateClassmateResponses field in the component content\r\n            if (this.componentContent.gateClassmateResponses) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    removeAttachment(attachment) {\r\n        if (this.newAttachments.indexOf(attachment) != -1) {\r\n            this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\r\n            this.studentDataChanged();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Attach student asset to this Component's attachments\r\n     * @param studentAsset\r\n     */\r\n    attachStudentAsset(studentAsset) {\r\n        if (studentAsset != null) {\r\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\r\n                if (copiedAsset != null) {\r\n                    var attachment = {\r\n                        studentAssetId: copiedAsset.id,\r\n                        iconURL: copiedAsset.iconURL\r\n                    };\r\n\r\n                    this.newAttachments.push(attachment);\r\n                    this.studentDataChanged();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Get the number of rows for the textarea\r\n     */\r\n    getNumRows() {\r\n        var numRows = null;\r\n\r\n        if (this.componentContent != null) {\r\n            numRows = this.componentContent.numRows;\r\n        }\r\n\r\n        return numRows;\r\n    };\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            var importWorkNodeId = componentContent.importWorkNodeId;\r\n            var importWorkComponentId = componentContent.importWorkComponentId;\r\n\r\n            if (importWorkNodeId != null && importWorkComponentId != null) {\r\n\r\n                // get the latest component state for this component\r\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                /*\r\n                 * we will only import work into this component if the student\r\n                 * has not done any work for this component\r\n                 */\r\n                if(componentState == null) {\r\n                    // the student has not done any work for this component\r\n\r\n                    // get the latest component state from the component we are importing from\r\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\r\n\r\n                    if (importWorkComponentState != null) {\r\n                        /*\r\n                         * populate a new component state with the work from the\r\n                         * imported component state\r\n                         */\r\n                        var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\r\n\r\n                        // populate the component state into this component\r\n                        this.setStudentWork(populatedComponentState);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * Set the class responses into the controller\r\n     * @param componentStates the class component states\r\n     * @param annotations the inappropriate flag annotations\r\n     */\r\n    setClassResponses(componentStates, annotations) {\r\n\r\n        this.classResponses = [];\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n\r\n                    // get the component state id\r\n                    var id = componentState.id;\r\n\r\n                    // get the workgroup id\r\n                    var workgroupId = componentState.workgroupId;\r\n\r\n                    // get the student data\r\n                    var studentData = componentState.studentData;\r\n\r\n                    if (studentData != null) {\r\n\r\n                        if (componentState.studentData.isSubmit) {\r\n\r\n                            // get the latest inappropriate flag for this compnent state\r\n                            var latestInappropriateFlagAnnotation = this.getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, componentState.id);\r\n\r\n                            // add the user names to the component state so we can display next to the response\r\n                            let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\r\n                            componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\r\n\r\n                            // add a replies array to the component state that we will fill with component state replies later\r\n                            componentState.replies = [];\r\n\r\n                            if (this.mode == 'grading' || this.mode == 'gradingRevision') {\r\n\r\n                                if (latestInappropriateFlagAnnotation != null) {\r\n                                    /*\r\n                                     * Set the inappropriate flag annotation into\r\n                                     * the component state. This is used for the\r\n                                     * grading tool to determine whether to show\r\n                                     * the 'Delete' button or the 'Undo Delete'\r\n                                     * button.\r\n                                     */\r\n                                    componentState.latestInappropriateFlagAnnotation = latestInappropriateFlagAnnotation;\r\n                                }\r\n\r\n                                // add the component state to our array\r\n                                this.classResponses.push(componentState);\r\n                            } else if (this.mode == 'student') {\r\n\r\n                                if (latestInappropriateFlagAnnotation != null &&\r\n                                    latestInappropriateFlagAnnotation.data != null &&\r\n                                    latestInappropriateFlagAnnotation.data.action == 'Delete') {\r\n\r\n                                    // do not show this post because the teacher has deleted it\r\n                                } else {\r\n                                    // add the component state to our array\r\n                                    this.classResponses.push(componentState);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // process the class responses\r\n        this.processResponses(this.classResponses);\r\n\r\n        this.retrievedClassmateResponses = true;\r\n    };\r\n\r\n    /**\r\n     * Get the latest inappropriate flag annotation for a student work id\r\n     * @param annotations an array of annotations\r\n     * @param studentWorkId a student work id\r\n     * @return the latest inappropriate flag annotation for the given student\r\n     * work id\r\n     */\r\n    getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, studentWorkId) {\r\n\r\n        if (annotations != null) {\r\n\r\n            // loop through all the annotations from newest to oldest\r\n            for (var a = annotations.length - 1; a >= 0; a--) {\r\n                var annotation = annotations[a];\r\n\r\n                if (annotation != null) {\r\n                    if (studentWorkId == annotation.studentWorkId && annotation.type == 'inappropriateFlag') {\r\n                        /*\r\n                         * we have found an inappropriate flag annotation for\r\n                         * the student work id we are looking for\r\n                         */\r\n                        return annotation;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Process the class responses. This will put responses into the\r\n     * replies arrays.\r\n     * @param classResponses an array of component states\r\n     */\r\n    processResponses(componentStates) {\r\n\r\n        if (componentStates) {\r\n            var componentState;\r\n\r\n            // loop through all the component states\r\n            for (var i = 0; i < componentStates.length; i++) {\r\n                componentState = componentStates[i];\r\n\r\n                if (componentState) {\r\n                    var componentStateId = componentState.id;\r\n\r\n                    // set the component state into the map\r\n                    this.responsesMap[componentStateId] = componentState;\r\n                }\r\n            }\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n                componentState = componentStates[c];\r\n\r\n                if (componentState && componentState.studentData) {\r\n\r\n                    // get the student data\r\n                    var studentData = componentState.studentData;\r\n\r\n                    // get the component state id replying to if any\r\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\r\n\r\n                    if (componentStateIdReplyingTo) {\r\n\r\n                        if (this.responsesMap[componentStateIdReplyingTo] &&\r\n                            this.responsesMap[componentStateIdReplyingTo].replies) {\r\n                            /*\r\n                             * add this component state to the replies array of the\r\n                             * component state that was replied to\r\n                             */\r\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.topLevelResponses = this.getLevel1Responses();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a class response to our model\r\n     * @param componentState the component state to add to our model\r\n     */\r\n    addClassResponse(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            // get the student data\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                if (componentState.studentData.isSubmit) {\r\n                    // this component state is a submit, so we will add it\r\n\r\n                    // get the workgroup id\r\n                    var workgroupId = componentState.workgroupId;\r\n\r\n                    // add the user names to the component state so we can display next to the response\r\n                    let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\r\n                    componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\r\n\r\n                    // add a replies array to the component state that we will fill with component state replies later\r\n                    componentState.replies = [];\r\n\r\n                    // add the component state to our array of class responses\r\n                    this.classResponses.push(componentState);\r\n\r\n                    // get the component state id\r\n                    var componentStateId = componentState.id;\r\n\r\n                    // add the response to our map\r\n                    this.responsesMap[componentStateId] = componentState;\r\n\r\n                    // get the component state id replying to if any\r\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\r\n\r\n                    if (componentStateIdReplyingTo != null) {\r\n\r\n                        // check if we have the component state that was replied to\r\n                        if (this.responsesMap[componentStateIdReplyingTo] != null &&\r\n                            this.responsesMap[componentStateIdReplyingTo].replies != null) {\r\n                            /*\r\n                             * add this response to the replies array of the response\r\n                             * that was replied to\r\n                             */\r\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\r\n                        }\r\n                    }\r\n\r\n                    this.topLevelResponses = this.getLevel1Responses();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the class responses\r\n     */\r\n    getClassResponses() {\r\n        return this.classResponses;\r\n    };\r\n\r\n    /**\r\n     * Get the level 1 responses which are posts that are not a\r\n     * reply to another response.\r\n     * @return an array of responses that are not a reply to another\r\n     * response\r\n     */\r\n    getLevel1Responses() {\r\n        var level1Responses = [];\r\n        var classResponses = this.classResponses;\r\n\r\n        if (classResponses != null) {\r\n\r\n            // loop through all the class responses\r\n            for (var r = 0; r < classResponses.length; r++) {\r\n                var tempClassResponse = classResponses[r];\r\n\r\n                if (tempClassResponse != null && tempClassResponse.studentData) {\r\n\r\n                    // get the student data\r\n                    var studentData = tempClassResponse.studentData;\r\n\r\n                    // get the component state id replying to if any\r\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\r\n\r\n                    if (componentStateIdReplyingTo == null) {\r\n                        /*\r\n                         * this response was not a reply to another post so it is a\r\n                         * level 1 response\r\n                         */\r\n                        level1Responses.push(tempClassResponse);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return level1Responses;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\r\n\r\n            // set the new component into the controller\r\n            this.componentContent = editedComponentContent;\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\r\n            // do nothing\r\n            this.$rootScope.$broadcast('doneExiting');\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The teacher has clicked the delete button to delete a post. We won't\r\n     * actually delete the student work, we'll just create an inappropriate\r\n     * flag annotation which prevents the students in the class from seeing\r\n     * the post.\r\n     * @param componentState the student component state the teacher wants to\r\n     * delete.\r\n     */\r\n    deletebuttonclicked(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            var toWorkgroupId = componentState.workgroupId;\r\n\r\n            var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\r\n\r\n            var periodId = null;\r\n\r\n            if (userInfo != null) {\r\n                periodId = userInfo.periodId;\r\n            }\r\n\r\n            var teacherUserInfo = this.ConfigService.getMyUserInfo();\r\n\r\n            var fromWorkgroupId = null;\r\n\r\n            if (teacherUserInfo != null) {\r\n                fromWorkgroupId = teacherUserInfo.workgroupId;\r\n            }\r\n\r\n            var runId = this.ConfigService.getRunId();\r\n            var nodeId = this.nodeId;\r\n            var componentId = this.componentId;\r\n            var studentWorkId = componentState.id;\r\n            var data = {};\r\n            data.action = \"Delete\";\r\n\r\n            // create the inappropriate flag 'Delete' annotation\r\n            var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\r\n\r\n            // save the annotation to the server\r\n            this.AnnotationService.saveAnnotation(annotation).then(() => {\r\n\r\n                // get the component states made by the student\r\n                var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\r\n\r\n                // get the annotations for the component states\r\n                var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\r\n\r\n                // refresh the teacher view of the posts\r\n                this.setClassResponses(componentStates, annotations);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The teacher has clicked the 'Undo Delete' button to undo a previous\r\n     * deletion of a post. This function will create an inappropriate flag\r\n     * annotation with the action set to 'Undo Delete'. This will make the\r\n     * post visible to the students.\r\n     * @param componentState the student component state the teacher wants to\r\n     * show again.\r\n     */\r\n    undodeletebuttonclicked(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            var toWorkgroupId = componentState.workgroupId;\r\n\r\n            var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\r\n\r\n            var periodId = null;\r\n\r\n            if (userInfo != null) {\r\n                periodId = userInfo.periodId;\r\n            }\r\n\r\n            var teacherUserInfo = this.ConfigService.getMyUserInfo();\r\n\r\n            var fromWorkgroupId = null;\r\n\r\n            if (teacherUserInfo != null) {\r\n                fromWorkgroupId = teacherUserInfo.workgroupId;\r\n            }\r\n\r\n            var runId = this.ConfigService.getRunId();\r\n            var nodeId = this.nodeId;\r\n            var componentId = this.componentId;\r\n            var studentWorkId = componentState.id;\r\n            var data = {};\r\n            data.action = \"Undo Delete\";\r\n\r\n            // create the inappropriate flag annotation\r\n            var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\r\n\r\n            // save the annotation to the server\r\n            this.AnnotationService.saveAnnotation(annotation).then(() => {\r\n\r\n                // get the component states made by the student\r\n                var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\r\n\r\n                // get the annotations for the component states\r\n                var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\r\n\r\n                // refresh the teacher view of the posts\r\n                this.setClassResponses(componentStates, annotations);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the inappropriate flag annotations for these component states\r\n     * @param componentStates an array of component states\r\n     * @return an array of inappropriate flag annotations that are associated\r\n     * with the component states\r\n     */\r\n    getInappropriateFlagAnnotationsByComponentStates(componentStates) {\r\n        var annotations = [];\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n\r\n                    /*\r\n                     * get the latest inappropriate flag annotation for the\r\n                     * component state\r\n                     */\r\n                    var latestInappropriateFlagAnnotation = this.AnnotationService.getLatestAnnotationByStudentWorkIdAndType(componentState.id, 'inappropriateFlag');\r\n\r\n                    if (latestInappropriateFlagAnnotation != null) {\r\n                        annotations.push(latestInappropriateFlagAnnotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return annotations;\r\n    }\r\n}\r\n\r\nDiscussionController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'DiscussionService',\r\n    'NodeService',\r\n    'NotificationService',\r\n    'ProjectService',\r\n    'StudentAssetService',\r\n    'StudentDataService',\r\n    'StudentWebSocketService',\r\n    'UtilService',\r\n    '$mdMedia'\r\n];\r\n\r\nexport default DiscussionController;\r\n"]}