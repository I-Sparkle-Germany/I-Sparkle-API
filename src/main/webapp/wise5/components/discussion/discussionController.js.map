{"version":3,"sources":["discussionController.es6"],"names":[],"mappings":"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","file":"discussionController.js","sourcesContent":["class DiscussionController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                ConfigService,\n                DiscussionService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                StudentWebSocketService,\n                $mdMedia) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.DiscussionService = DiscussionService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.$mdMedia = $mdMedia;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds the text for a new response (not a reply)\n        this.newResponse = '';\n\n        // holds student attachments like assets\n        this.newAttachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the class responses\n        this.classResponses = [];\n\n        // will hold the top level responses\n        this.topLevelResponses = [];\n\n        // the text that is being submitted\n        this.submitText = null;\n\n        // map from component state id to response\n        this.responsesMap = {};\n\n        // whether rich text is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether we have retrieved the classmate responses\n        this.retrievedClassmateResponses = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        this.workgroupId = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.mode = this.$scope.mode;\n\n            if (this.$scope.workgroupId != null) {\n                this.workgroupId = this.$scope.workgroupId;\n            }\n\n            if (this.$scope.nodeId != null) {\n                this.nodeId = this.$scope.nodeId;\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the node content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n            } else {\n                // this is a regular component\n\n                if (this.mode === 'student') {\n                    if (this.ConfigService.isPreview()) {\n                        // we are in preview mode\n                    } else {\n                        // we are in regular student run mode\n\n                        if (this.isClassmateResponsesGated()) {\n                            /*\n                             * classmate responses are gated so we will not show them if the student\n                             * has not submitted a response\n                             */\n\n                            // get the component state from the scope\n                            var componentState = this.$scope.componentState;\n\n                            if (componentState != null) {\n                                /*\n                                 * the student has already submitted a response so we will\n                                 * display the classmate responses\n                                 */\n                                this.getClassmateResponses();\n                            }\n                        } else {\n                            // classmate responses are not gated so we will show them\n                            this.getClassmateResponses();\n                        }\n                    }\n\n                    // check if we need to lock this component\n                    this.calculateDisabled();\n                } else if (this.mode === 'grading') {\n\n                    /*\n                     * get all the posts that this workgroup id is part of. if the student\n                     * posted a top level response we will get the top level response and\n                     * all the replies. if the student replied to a top level response we\n                     * will get the top level response and all the replies.\n                     */\n                    var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n                    this.setClassResponses(componentStates);\n\n                    this.isDisabled = true;\n                } else if (this.mode === 'onlyShowWork') {\n                    this.isDisabled = true;\n                } else if (this.mode === 'authoring') {\n                    this.updateAdvancedAuthoringView();\n\n                    $scope.$watch(function() {\n                        return this.authoringComponentContent;\n                    }.bind(this), function(newValue, oldValue) {\n                        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    }.bind(this), true);\n                }\n            }\n\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The reply button was clicked so we will show or hide the textarea\n         * used to reply to the specific component state\n         * @param componentState the component state that the student wants to reply to\n         */\n        this.$scope.replybuttonclicked = function(componentState) {\n\n            /*\n             * get the value for whether the textarea is currently shown\n             * or not\n             */\n            var previousValue = componentState.showReplyTextarea;\n\n            // change the value to the opposite of what it was previously\n            componentState.showReplyTextarea = !previousValue;\n        }.bind(this);\n\n        /**\n         * The submit button was clicked\n         * @param response the response object related to the submit button\n         */\n        this.$scope.submitbuttonclicked = function(response) {\n\n            if (response) {\n                // this submit button was clicked for a reply\n\n                if(response.replyText){\n                    var componentState = response;\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    /*\n                     * remember the values in the controller so we can read\n                     * from them later when the student data is saved\n                     */\n                    this.$scope.discussionController.studentResponse = componentState.replyText;\n                    this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n                    // clear the reply input\n                    response.replyText = null;\n\n                    this.$scope.discussionController.isSubmit = true;\n                    this.$scope.discussionController.isDirty = true;\n                }\n            } else {\n                // the submit button was clicked for the new post\n\n                /*\n                 * set the response from the top textarea into the\n                 * studentResponse field that we will read from later\n                 * when the student data is saved\n                 */\n                this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n                this.$scope.discussionController.isSubmit = true;\n            }\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var componentState = null;\n\n            // check if the student work is dirty and the student clicked the submit button\n            if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n                // create a component state populated with the student data\n                componentState = this.$scope.discussionController.createComponentState();\n\n                /*\n                 * clear the component values so they aren't accidentally used again\n                 * later\n                 */\n                this.$scope.discussionController.clearComponentValues();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.discussionController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n            // do nothing\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            var componentState = args.studentWork;\n\n            if (componentState != null) {\n\n                // check if the classmate responses are gated\n                if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n                    /*\n                     * the classmate responses are gated and we haven't retrieved\n                     * them yet so we will obtain them now and show them since the student\n                     * has just submitted a response. getting the classmate responses will\n                     * also get the post the student just saved to the server.\n                     */\n                    this.getClassmateResponses();\n                } else {\n                    /*\n                     * the classmate responses are not gated or have already been retrieved\n                     * which means they are already being displayed. we just need to add the\n                     * new response in this case.\n                     */\n                    var nodeId = componentState.nodeId;\n                    var componentId = componentState.componentId;\n\n                    // check that the component state is for this component\n                    if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                        // add the component state to our collection of class responses\n                        this.addClassResponse(componentState);\n                    }\n                }\n\n                // send the student post to web sockets so all the classmates receive it in real time\n                this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(componentState);\n            }\n\n            this.isSubmit = null;\n        }));\n\n        this.$scope.studentdatachanged = function() {\n            this.$scope.discussionController.studentDataChanged();\n        };\n\n        /**\n         * We have recived a web socket message\n         */\n        this.$rootScope.$on('webSocketMessageRecieved', angular.bind(this, function(event, args) {\n            if (args != null) {\n                var data = args.data;\n\n                var componentState = data.data;\n\n                if (componentState != null) {\n\n                    // check that the web socket message is for this step\n                    if (componentState.nodeId === this.nodeId) {\n\n                        // get the sender of the message\n                        var componentStateWorkgroupId = componentState.workgroupId;\n\n                        // get the workgroup id of the signed in student\n                        var workgroupId = this.ConfigService.getWorkgroupId();\n\n                        /*\n                         * check if the signed in student sent the message. if the\n                         * signed in student sent the message we can ignore it.\n                         */\n                        if (workgroupId !== componentStateWorkgroupId) {\n\n                            if (this.retrievedClassmateResponses) {\n                                // display the classmate post\n                                this.addClassResponse(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n\n        var scope = this;\n        var themePath = \"/wise/\" + this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors?\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link autoresize',\n            toolbar: 'superscript subscript',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/css/tinymce.css\",\n            statusbar: false,\n            forced_root_block: false,\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        this.$scope.$watch(function() { return $mdMedia('gt-md'); }, function(lg) {\n            $scope.lgScreen = lg;\n        });\n\n    }\n\n    /**\n     * Get the classmate responses\n     */\n    getClassmateResponses() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n\n        // make the request for the classmate responses\n        this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then(angular.bind(this, function(result) {\n\n            if (result != null) {\n                var componentStates = result.studentWorkList;\n\n                // set the classmate responses\n                this.setClassResponses(componentStates);\n            }\n        }));\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            // populate the text the student previously typed\n            var studentData = componentState.studentData;\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // handle the submit button click\n        this.$scope.submitbuttonclicked();\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // set the response into the component state\n            studentData.response = this.studentResponse;\n\n            studentData.attachments = this.newAttachments;\n\n            if (this.componentStateIdReplyingTo != null) {\n                // if this step is replying, set the component state id replying to\n                studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n            }\n\n            componentState.studentData = studentData;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.studentData.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Clear the component values so they aren't accidentally used again\n     */\n    clearComponentValues() {\n\n        // clear the student response\n        this.studentResponse = '';\n\n        // clear the new response input\n        this.newResponse = '';\n\n        // clear new attachments input\n        this.newAttachments = [];\n\n        // clear the component state id replying to\n        this.componentStateIdReplyingTo = null;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     * @return whether to lock the component after the student submits\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to gate the classmate responses\n     * @return whether to gate the classmate responses\n     */\n    isClassmateResponsesGated() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the gateClassmateResponses field in the component content\n            if (this.componentContent.gateClassmateResponses) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.newAttachments.indexOf(attachment) != -1) {\n            this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        notebookItemId: notebookItem.id,\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.newAttachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // we're importing a StudentWorkNotebookItem\n            var studentWork = notebookItem.studentWork;\n\n            var componentType = studentWork.componentType;\n\n            if (componentType != null) {\n                var childService = this.$injector.get(componentType + 'Service');\n\n                if (childService != null) {\n                    var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                    if (studentWorkHTML != null) {\n                        this.studentResponse += studentWorkHTML;\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    dropCallback_NOLONGER_USED(event, ui, title, $index) {\n        if (this.isDisabled) {\n            // don't import if step is disabled/locked\n            return;\n        }\n\n        var objectType = $(ui.helper.context).data('objectType');\n        if (objectType === 'NotebookItem') {\n            var notebookItem = $(ui.helper.context).data('objectData');\n            if (notebookItem.studentAsset != null) {\n                // we're importing a StudentAssetNotebookItem\n                var studentAsset = notebookItem.studentAsset;\n                this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function (copiedAsset) {\n                    if (copiedAsset != null) {\n                        var copiedAssetImg = '<img notebookItemId=\"' + notebookItem.id + '\" studentAssetId=\"' + copiedAsset.id + '\" id=\"studentAsset_' + copiedAsset.id + '\" class=\"studentAssetReference\" src=\"' + copiedAsset.iconURL + '\"></img>';\n                        this.newResponse += copiedAssetImg;\n                        this.studentDataChanged();\n                    }\n                }));\n            } else if (notebookItem.studentWork != null) {\n                // we're importing a StudentWorkNotebookItem\n                var studentWork = notebookItem.studentWork;\n\n                var componentType = studentWork.componentType;\n\n                if (componentType != null) {\n                    var childService = this.$injector.get(componentType + 'Service');\n\n                    if (childService != null) {\n                        var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                        if (studentWorkHTML != null) {\n                            this.newResponse += studentWorkHTML;\n                            this.studentDataChanged();\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * Set the class responses into the controller\n     * @param componentStates the class component states\n     */\n    setClassResponses(componentStates) {\n\n        this.classResponses = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    // get the component state id\n                    var id = componentState.id;\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        if (componentState.studentData.isSubmit) {\n\n                            // add the user names to the component state so we can display next to the response\n                            componentState.userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId, true).join(', ');\n\n                            // add a replies array to the component state that we will fill with component state replies later\n                            componentState.replies = [];\n\n                            // add the component state to our array\n                            this.classResponses.push(componentState);\n                        }\n                    }\n                }\n            }\n        }\n\n        // process the class responses\n        this.processResponses(this.classResponses);\n\n        this.retrievedClassmateResponses = true;\n    };\n\n    /**\n     * Process the class responses. This will put responses into the\n     * replies arrays.\n     * @param classResponses an array of component states\n     */\n    processResponses(componentStates) {\n\n        if (componentStates) {\n            var componentState;\n\n            // loop through all the component states\n            for (var i = 0; i < componentStates.length; i++) {\n                componentState = componentStates[i];\n\n                if (componentState) {\n                    var componentStateId = componentState.id;\n\n                    // set the component state into the map\n                    this.responsesMap[componentStateId] = componentState;\n                }\n            }\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                componentState = componentStates[c];\n\n                if (componentState && componentState.studentData) {\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo) {\n\n                        if (this.responsesMap[componentStateIdReplyingTo] &&\n                            this.responsesMap[componentStateIdReplyingTo].replies) {\n                            /*\n                             * add this component state to the replies array of the\n                             * component state that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n                }\n            }\n\n            this.topLevelResponses = this.getLevel1Responses();\n        }\n    };\n\n    /**\n     * Add a class response to our model\n     * @param componentState the component state to add to our model\n     */\n    addClassResponse(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // check if the student data was a submit\n                var isSubmit = componentState.studentData.isSubmit;\n\n                if (isSubmit) {\n                    // this component state is a submit so we will add it\n\n                    if (componentState != null) {\n\n                        // get the workgroup id\n                        var workgroupId = componentState.workgroupId;\n\n                        // add the user names to the component state so we can display next to the response\n                        componentState.userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId, true).join(', ');\n\n                        // add a replies array to the component state that we will fill with component state replies later\n                        componentState.replies = [];\n\n                        // add the component state to our array of class responses\n                        this.classResponses.push(componentState);\n\n                        // get the component state id\n                        var componentStateId = componentState.id;\n\n                        // add the response to our map\n                        this.responsesMap[componentStateId] = componentState;\n\n                        // get the component state id replying to if any\n                        var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                        if (componentStateIdReplyingTo != null) {\n\n                            // check if we have the component state that was replied to\n                            if (this.responsesMap[componentStateIdReplyingTo] != null &&\n                                this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                                /*\n                                 * add this response to the replies array of the response\n                                 * that was replied to\n                                 */\n                                this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                            }\n                        }\n\n                        this.topLevelResponses = this.getLevel1Responses();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the class responses\n     */\n    getClassResponses() {\n        return this.classResponses;\n    };\n\n    /**\n     * Get the level 1 responses which are posts that are not a\n     * reply to another response.\n     * @return an array of responses that are not a reply to another\n     * response\n     */\n    getLevel1Responses() {\n        var level1Responses = [];\n        var classResponses = this.classResponses;\n\n        if (classResponses != null) {\n\n            // loop through all the class responses\n            for (var r = 0; r < classResponses.length; r++) {\n                var tempClassResponse = classResponses[r];\n\n                if (tempClassResponse != null && tempClassResponse.studentData) {\n\n                    // get the student data\n                    var studentData = tempClassResponse.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo == null) {\n                        /*\n                         * this response was not a reply to another post so it is a\n                         * level 1 response\n                         */\n                        level1Responses.push(tempClassResponse);\n                    }\n                }\n            }\n        }\n\n        return level1Responses;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nDiscussionController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'DiscussionService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}