{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","newResponse","newAttachments","isDisabled","isDirty","isShowPreviousWork","isSubmit","showAdvancedAuthoring","showJSONAuthoring","classResponses","topLevelResponses","submitText","responsesMap","isRichTextEnabled","isStudentAttachmentEnabled","retrievedClassmateResponses","latestAnnotations","mode","workgroupId","teacherWorkgroupId","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","originalComponentContent","id","isPreview","componentStates","hasConnectedComponent","connectedComponent","connectedComponents","authoringGetConnectedComponentType","getComponentStatesByNodeIdAndComponentId","setClassResponses","getClassmateResponses","isClassmateResponsesGated","componentState","getLatestComponentAnnotations","calculateDisabled","getPostsAssociatedWithWorkgroupId","annotations","getInappropriateFlagAnnotationsByComponentStates","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$parent","nodeController","registerComponentController","submitbuttonclicked","response","replyText","componentStateId","discussionController","componentStateIdReplyingTo","createComponentState","$emit","getComponentState","deferred","defer","action","then","clearComponentValues","resolve","promise","$on","event","args","annotation","annotationNodeId","annotationComponentId","studentWork","addClassResponse","submit","messageType","userNamesArray","getUserNamesByWorkgroupId","sendStudentToClassmatesInPeriodMessage","studentData","fromWorkgroupId","notificationType","userNames","map","obj","name","join","notificationMessage","workgroupsNotifiedSoFar","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","savedNotification","push","replies","r","length","reply","indexOf","studentdatachanged","studentDataChanged","data","componentStateWorkgroupId","getWorkgroupId","scope","themePath","getThemePath","tinymceOptions","menubar","plugins","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","statusbar","forced_root_block","setup","ed","on","e","$","target","editorContainer","addClass","parent","removeClass","md","mdScreen","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","$broadcast","runId","getRunId","periodId","getPeriodId","result","studentWorkList","isLockAfterSubmit","getComponentId","createNewComponentState","attachments","componentType","generateKey","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","show","showSaveButton","showSubmitButton","gateClassmateResponses","attachment","splice","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","importWorkNodeId","importWorkComponentId","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","setStudentWork","c","latestInappropriateFlagAnnotation","getLatestInappropriateFlagAnnotationByStudentWorkId","processResponses","studentWorkId","a","i","getLevel1Responses","level1Responses","tempClassResponse","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","exitListener","components","getComponentsByNodeId","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","authoringViewComponentChanged","newConnectedComponent","updateOn","index","userInfo","getUserInfoByWorkgroupId","teacherUserInfo","getMyUserInfo","createInappropriateFlagAnnotation","saveAnnotation","getLatestAnnotationByStudentWorkIdAndType","tags","tag","answer","confirm","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedResponse","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentType","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass DiscussionController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      DiscussionService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      StudentWebSocketService,\n      UtilService,\n      $mdMedia) {\n    super($filter, $mdDialog, $rootScope, $scope,\n      AnnotationService, ConfigService, NodeService,\n      NotebookService, ProjectService, StudentAssetService,\n      StudentDataService, UtilService);\n    this.$q = $q;\n    this.DiscussionService = DiscussionService;\n    this.NotificationService = NotificationService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.$mdMedia = $mdMedia;\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds the text for a new response (not a reply)\n    this.newResponse = '';\n\n    // holds student attachments like assets\n    this.newAttachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether this part is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // will hold the class responses\n    this.classResponses = [];\n\n    // will hold the top level responses\n    this.topLevelResponses = [];\n\n    // the text that is being submitted\n    this.submitText = null;\n\n    // map from component state id to response\n    this.responsesMap = {};\n\n    // whether rich text is enabled\n    this.isRichTextEnabled = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether we have retrieved the classmate responses\n    this.retrievedClassmateResponses = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    this.workgroupId = null;\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Discussion'\n      }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      this.mode = this.$scope.mode;\n\n      if (this.$scope.workgroupId != null) {\n        this.workgroupId = this.$scope.workgroupId;\n      }\n\n      if (this.$scope.nodeId != null) {\n        this.nodeId = this.$scope.nodeId;\n      }\n\n      if (this.mode === 'student') {\n        if (this.ConfigService.isPreview()) {\n          let componentStates = null;\n          if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            // assume there can only be one connected component\n            let connectedComponent = this.componentContent.connectedComponents[0];\n            if (this.authoringGetConnectedComponentType(connectedComponent) == 'Discussion') {\n              componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                  connectedComponent.nodeId, connectedComponent.componentId);\n            }\n          } else {\n            componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                this.nodeId, this.componentId);\n          }\n          this.setClassResponses(componentStates);\n        } else {\n          // we are in regular student run mode\n\n          if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            // assume there can only be one connected component\n            let connectedComponent = this.componentContent.connectedComponents[0];\n            if (this.authoringGetConnectedComponentType(connectedComponent) == 'Discussion') {\n              this.getClassmateResponses(connectedComponent.nodeId, connectedComponent.componentId);\n            }\n          } else {\n            if (this.isClassmateResponsesGated()) {\n              /*\n               * classmate responses are gated so we will not show them if the student\n               * has not submitted a response\n               */\n\n              // get the component state from the scope\n              var componentState = this.$scope.componentState;\n\n              if (componentState != null) {\n                /*\n                 * the student has already submitted a response so we will\n                 * display the classmate responses\n                 */\n                this.getClassmateResponses();\n              }\n            } else {\n              // classmate responses are not gated so we will show them\n              this.getClassmateResponses();\n            }\n          }\n\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n\n        /*\n         * get all the posts that this workgroup id is part of. if the student\n         * posted a top level response we will get the top level response and\n         * all the replies. if the student replied to a top level response we\n         * will get the top level response and all the replies.\n         */\n        var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n        // get the innappropriate flag annotations for the component states\n        var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n        // show the posts\n        this.setClassResponses(componentStates, annotations);\n\n        this.isDisabled = true;\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n        }.bind(this), true);\n      }\n\n      this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /**\n     * The submit button was clicked\n     * @param response the response object related to the submit button\n     */\n    this.$scope.submitbuttonclicked = function(response) {\n\n      if (response) {\n        // this submit button was clicked for a reply\n\n        if (response.replyText){\n          var componentState = response;\n\n          // get the component state id\n          var componentStateId = componentState.id;\n\n          /*\n           * remember the values in the controller so we can read\n           * from them later when the student data is saved\n           */\n          this.$scope.discussionController.studentResponse = componentState.replyText;\n          this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n          // clear the reply input\n          response.replyText = null;\n\n          this.$scope.discussionController.isSubmit = true;\n          this.$scope.discussionController.isDirty = true;\n        }\n      } else {\n        // the submit button was clicked for the new post\n\n        /*\n         * set the response from the top textarea into the\n         * studentResponse field that we will read from later\n         * when the student data is saved\n         */\n        this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n        this.$scope.discussionController.isSubmit = true;\n      }\n\n      if (this.mode === 'authoring') {\n        this.createComponentState('submit');\n      }\n\n      // tell the parent node that this component wants to submit\n      this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function() {\n      var deferred = this.$q.defer();\n\n      // check if the student work is dirty and the student clicked the submit button\n      if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n\n        var action = 'submit';\n\n        // create a component state populated with the student data\n        this.$scope.discussionController.createComponentState(action).then((componentState) => {\n          /*\n           * clear the component values so they aren't accidentally used again\n           * later\n           */\n          this.$scope.discussionController.clearComponentValues();\n\n          // set isDirty to false since this student work is about to be saved\n          this.$scope.discussionController.isDirty = false;\n\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n        this.isSubmit = true;\n      }\n    });\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n\n      // do nothing\n    });\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // check if the classmate responses are gated\n        if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n          /*\n           * the classmate responses are gated and we haven't retrieved\n           * them yet so we will obtain them now and show them since the student\n           * has just submitted a response. getting the classmate responses will\n           * also get the post the student just saved to the server.\n           */\n          this.getClassmateResponses();\n        } else {\n          /*\n           * the classmate responses are not gated or have already been retrieved\n           * which means they are already being displayed. we just need to add the\n           * new response in this case.\n           */\n\n          // add the component state to our collection of class responses\n          this.addClassResponse(componentState);\n        }\n\n        this.submit();\n\n        // send the student post to web sockets so all the classmates receive it in real time\n        let messageType = 'studentData';\n        componentState.userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(componentState.workgroupId);\n\n        this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\n\n        // next, send notifications to students who have posted a response in the same thread as this post\n        let studentData = componentState.studentData;\n        if (studentData != null && this.responsesMap != null) {\n          let componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n          if (componentStateIdReplyingTo != null) {\n            // populate fields of the notification\n            let fromWorkgroupId = componentState.workgroupId;\n            let notificationType = 'DiscussionReply';\n            let nodeId = componentState.nodeId;\n            let componentId = componentState.componentId;\n            // add the user names to the component state so we can display next to the response\n            let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\n            let userNames = userNamesArray.map( (obj) => {\n              return obj.name;\n            }).join(', ');\n            let notificationMessage = this.$translate('discussion.repliedToADiscussionYouWereIn', { userNames: userNames });\n\n            let workgroupsNotifiedSoFar = [];  // keep track of workgroups we've already notified, in case a workgroup posts twice on a thread we only want to notify once.\n            // check if we have the component state that was replied to\n            if (this.responsesMap[componentStateIdReplyingTo] != null) {\n              let originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n              let toWorkgroupId = originalPostComponentState.workgroupId; // notify the workgroup who posted this reply\n              if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\n                let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                  let messageType = 'notification';\n                  this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                });\n                workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n              }\n\n              // also notify repliers to this thread, if any.\n              if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                let replies = this.responsesMap[componentStateIdReplyingTo].replies;\n\n                for (let r = 0; r < replies.length; r++) {\n                  let reply = replies[r];\n                  let toWorkgroupId = reply.workgroupId; // notify the workgroup who posted this reply\n                  if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId && workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\n                    let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                    this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                      let messageType = 'notification';\n                      this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                    });\n                    workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.isSubmit = null;\n    });\n\n    this.$scope.studentdatachanged = function() {\n      this.$scope.discussionController.studentDataChanged();\n    };\n\n    /**\n     * We have recived a web socket message\n     */\n    this.$rootScope.$on('webSocketMessageRecieved', (event, args) => {\n      if (args != null) {\n        var data = args.data;\n\n        var componentState = data.data;\n\n        if (componentState != null) {\n\n          // check that the web socket message is for this step\n          if (componentState.nodeId === this.nodeId) {\n\n            // get the sender of the message\n            var componentStateWorkgroupId = componentState.workgroupId;\n\n            // get the workgroup id of the signed in student\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            /*\n             * check if the signed in student sent the message. if the\n             * signed in student sent the message we can ignore it.\n             */\n            if (workgroupId !== componentStateWorkgroupId) {\n\n              if (this.retrievedClassmateResponses) {\n                // display the classmate post\n                this.addClassResponse(componentState);\n              }\n            }\n          }\n        }\n      }\n    });\n\n    var scope = this;\n    var themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors?\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link autoresize',\n      toolbar: 'superscript subscript',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      statusbar: false,\n      forced_root_block: false,\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n      $scope.mdScreen = md;\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Get the classmate responses\n   */\n  getClassmateResponses(nodeId = this.nodeId, componentId = this.componentId) {\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n\n    // make the request for the classmate responses\n    this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\n\n      if (result != null) {\n        var componentStates = result.studentWorkList;\n\n        /*\n         * get the annotations in case there are any that have\n         * inappropriate flags\n         */\n        var annotations = result.annotations;\n\n        // set the classmate responses\n        this.setClassResponses(componentStates, annotations);\n      }\n    });\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      // populate the text the student previously typed\n      var studentData = componentState.studentData;\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    this.isSubmit = true;\n\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n\n    // handle the submit button click\n    this.$scope.submitbuttonclicked();\n  };\n\n  submit() {\n    if (this.isLockAfterSubmit()) {\n      // disable the component if it was authored to lock after submit\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n      var studentData = {};\n\n      // set the response into the component state\n      studentData.response = this.studentResponse;\n\n      studentData.attachments = this.newAttachments;\n\n      if (this.componentStateIdReplyingTo != null) {\n        // if this step is replying, set the component state id replying to\n        studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n      }\n\n      componentState.studentData = studentData;\n\n      // set the component type\n      componentState.componentType = 'Discussion';\n\n      // set the node id\n      componentState.nodeId = this.nodeId;\n\n      // set the component id\n      componentState.componentId = this.componentId;\n\n      if ((this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) || this.mode === 'authoring') {\n        // create a dummy component state id if we're in preview mode and posting a new response\n        componentState.id = this.UtilService.generateKey();\n      }\n\n      if (this.isSubmit) {\n        // the student submitted this work\n        componentState.studentData.isSubmit = this.isSubmit;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n          if (this.StudentDataService.studentData == null) {\n            /*\n             * initialize the student data since this usually doesn't\n             * occur in the authoring mode\n             */\n            this.StudentDataService.studentData = {};\n            this.StudentDataService.studentData.componentStates = [];\n          }\n\n          // add the component state to the StudentDataService studentData\n          this.StudentDataService.studentData.componentStates.push(componentState);\n\n          // get the component states for this component\n          var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n          // set the component states into the component\n          this.setClassResponses(componentStates);\n\n          /*\n           * clear the input where the user has entered the text they\n           * are posting\n           */\n          this.clearComponentValues();\n          this.isDirty = false;\n        }\n      }\n    }\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Clear the component values so they aren't accidentally used again\n   */\n  clearComponentValues() {\n\n    // clear the student response\n    this.studentResponse = '';\n\n    // clear the new response input\n    this.newResponse = '';\n\n    // clear new attachments input\n    this.newAttachments = [];\n\n    // clear the component state id replying to\n    this.componentStateIdReplyingTo = null;\n  };\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n      if (this.UtilService.hasConnectedComponent(componentContent)) {\n        for (let connectedComponent of componentContent.connectedComponents) {\n          if (connectedComponent.type == 'showWork') {\n            this.isDisabled = true;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to show the save button\n   * @return whether to show the save button\n   */\n  showSaveButton() {\n    var show = false;\n\n    if (this.componentContent != null) {\n\n      // check the showSaveButton field in the component content\n      if (this.componentContent.showSaveButton) {\n        show = true;\n      }\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to show the submit button\n   * @return whether to show the submit button\n   */\n  showSubmitButton() {\n    var show = false;\n\n    if (this.componentContent != null) {\n\n      // check the showSubmitButton field in the component content\n      if (this.componentContent.showSubmitButton) {\n        show = true;\n      }\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   * @return whether to lock the component after the student submits\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check whether we need to gate the classmate responses\n   * @return whether to gate the classmate responses\n   */\n  isClassmateResponsesGated() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the gateClassmateResponses field in the component content\n      if (this.componentContent.gateClassmateResponses) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.newAttachments.indexOf(attachment) != -1) {\n      this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.newAttachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var importWorkNodeId = componentContent.importWorkNodeId;\n      var importWorkComponentId = componentContent.importWorkComponentId;\n\n      if (importWorkNodeId != null && importWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * Set the class responses into the controller\n   * @param componentStates the class component states\n   * @param annotations the inappropriate flag annotations\n   */\n  setClassResponses(componentStates, annotations) {\n\n    this.classResponses = [];\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n\n          // get the component state id\n          var id = componentState.id;\n\n          // get the workgroup id\n          var workgroupId = componentState.workgroupId;\n\n          // get the student data\n          var studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            if (componentState.studentData.isSubmit) {\n\n              // get the latest inappropriate flag for this compnent state\n              var latestInappropriateFlagAnnotation = this.getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, componentState.id);\n\n              // add the user names to the component state so we can display next to the response\n              let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n              componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n              // add a replies array to the component state that we will fill with component state replies later\n              componentState.replies = [];\n\n              if (this.mode == 'grading' || this.mode == 'gradingRevision') {\n\n                if (latestInappropriateFlagAnnotation != null) {\n                  /*\n                   * Set the inappropriate flag annotation into\n                   * the component state. This is used for the\n                   * grading tool to determine whether to show\n                   * the 'Delete' button or the 'Undo Delete'\n                   * button.\n                   */\n                  componentState.latestInappropriateFlagAnnotation = latestInappropriateFlagAnnotation;\n                }\n\n                // add the component state to our array\n                this.classResponses.push(componentState);\n              } else if (this.mode == 'student') {\n\n                if (latestInappropriateFlagAnnotation != null &&\n                  latestInappropriateFlagAnnotation.data != null &&\n                  latestInappropriateFlagAnnotation.data.action == 'Delete') {\n\n                  // do not show this post because the teacher has deleted it\n                } else {\n                  // add the component state to our array\n                  this.classResponses.push(componentState);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // process the class responses\n    this.processResponses(this.classResponses);\n\n    this.retrievedClassmateResponses = true;\n  };\n\n  /**\n   * Get the latest inappropriate flag annotation for a student work id\n   * @param annotations an array of annotations\n   * @param studentWorkId a student work id\n   * @return the latest inappropriate flag annotation for the given student\n   * work id\n   */\n  getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, studentWorkId) {\n\n    if (annotations != null) {\n\n      // loop through all the annotations from newest to oldest\n      for (var a = annotations.length - 1; a >= 0; a--) {\n        var annotation = annotations[a];\n\n        if (annotation != null) {\n          if (studentWorkId == annotation.studentWorkId && annotation.type == 'inappropriateFlag') {\n            /*\n             * we have found an inappropriate flag annotation for\n             * the student work id we are looking for\n             */\n            return annotation;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process the class responses. This will put responses into the\n   * replies arrays.\n   * @param classResponses an array of component states\n   */\n  processResponses(componentStates) {\n\n    if (componentStates) {\n      var componentState;\n\n      // loop through all the component states\n      for (var i = 0; i < componentStates.length; i++) {\n        componentState = componentStates[i];\n\n        if (componentState) {\n          var componentStateId = componentState.id;\n\n          // set the component state into the map\n          this.responsesMap[componentStateId] = componentState;\n        }\n      }\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        componentState = componentStates[c];\n\n        if (componentState && componentState.studentData) {\n\n          // get the student data\n          var studentData = componentState.studentData;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo) {\n\n            if (this.responsesMap[componentStateIdReplyingTo] &&\n              this.responsesMap[componentStateIdReplyingTo].replies) {\n              /*\n               * add this component state to the replies array of the\n               * component state that was replied to\n               */\n              this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n            }\n          }\n        }\n      }\n\n      this.topLevelResponses = this.getLevel1Responses();\n    }\n  };\n\n  /**\n   * Add a class response to our model\n   * @param componentState the component state to add to our model\n   */\n  addClassResponse(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (componentState.studentData.isSubmit) {\n          // this component state is a submit, so we will add it\n\n          // get the workgroup id\n          var workgroupId = componentState.workgroupId;\n\n          // add the user names to the component state so we can display next to the response\n          let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n          if (userNames.length > 0) {\n            componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n          } else if (componentState.userNamesArray != null) {\n            componentState.userNames = componentState.userNamesArray\n                .map(function(obj) { return obj.name; }).join(', ');\n          }\n\n          // add a replies array to the component state that we will fill with component state replies later\n          componentState.replies = [];\n\n          // add the component state to our array of class responses\n          this.classResponses.push(componentState);\n\n          // get the component state id\n          var componentStateId = componentState.id;\n\n          // add the response to our map\n          this.responsesMap[componentStateId] = componentState;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo != null) {\n\n            // check if we have the component state that was replied to\n            if (this.responsesMap[componentStateIdReplyingTo] != null &&\n              this.responsesMap[componentStateIdReplyingTo].replies != null) {\n              /*\n               * add this response to the replies array of the response\n               * that was replied to\n               */\n              this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n            }\n          }\n\n          this.topLevelResponses = this.getLevel1Responses();\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the class responses\n   */\n  getClassResponses() {\n    return this.classResponses;\n  };\n\n  /**\n   * Get the level 1 responses which are posts that are not a\n   * reply to another response.\n   * @return an array of responses that are not a reply to another\n   * response\n   */\n  getLevel1Responses() {\n    var level1Responses = [];\n    var classResponses = this.classResponses;\n\n    if (classResponses != null) {\n\n      // loop through all the class responses\n      for (var r = 0; r < classResponses.length; r++) {\n        var tempClassResponse = classResponses[r];\n\n        if (tempClassResponse != null && tempClassResponse.studentData) {\n\n          // get the student data\n          var studentData = tempClassResponse.studentData;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo == null) {\n            /*\n             * this response was not a reply to another post so it is a\n             * level 1 response\n             */\n            level1Responses.push(tempClassResponse);\n          }\n        }\n      }\n    }\n\n    return level1Responses;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', (event, args) => {\n      // do nothing\n      this.$rootScope.$broadcast('doneExiting');\n    });\n  };\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The teacher has clicked the delete button to delete a post. We won't\n   * actually delete the student work, we'll just create an inappropriate\n   * flag annotation which prevents the students in the class from seeing\n   * the post.\n   * @param componentState the student component state the teacher wants to\n   * delete.\n   */\n  deletebuttonclicked(componentState) {\n\n    if (componentState != null) {\n\n      var toWorkgroupId = componentState.workgroupId;\n\n      var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n\n      var periodId = null;\n\n      if (userInfo != null) {\n        periodId = userInfo.periodId;\n      }\n\n      var teacherUserInfo = this.ConfigService.getMyUserInfo();\n\n      var fromWorkgroupId = null;\n\n      if (teacherUserInfo != null) {\n        fromWorkgroupId = teacherUserInfo.workgroupId;\n      }\n\n      var runId = this.ConfigService.getRunId();\n      var nodeId = this.nodeId;\n      var componentId = this.componentId;\n      var studentWorkId = componentState.id;\n      var data = {};\n      data.action = 'Delete';\n\n      // create the inappropriate flag 'Delete' annotation\n      var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n\n      // save the annotation to the server\n      this.AnnotationService.saveAnnotation(annotation).then(() => {\n\n        // get the component states made by the student\n        var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n        // get the annotations for the component states\n        var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n        // refresh the teacher view of the posts\n        this.setClassResponses(componentStates, annotations);\n      });\n    }\n  }\n\n  /**\n   * The teacher has clicked the 'Undo Delete' button to undo a previous\n   * deletion of a post. This function will create an inappropriate flag\n   * annotation with the action set to 'Undo Delete'. This will make the\n   * post visible to the students.\n   * @param componentState the student component state the teacher wants to\n   * show again.\n   */\n  undodeletebuttonclicked(componentState) {\n\n    if (componentState != null) {\n\n      var toWorkgroupId = componentState.workgroupId;\n\n      var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n\n      var periodId = null;\n\n      if (userInfo != null) {\n        periodId = userInfo.periodId;\n      }\n\n      var teacherUserInfo = this.ConfigService.getMyUserInfo();\n\n      var fromWorkgroupId = null;\n\n      if (teacherUserInfo != null) {\n        fromWorkgroupId = teacherUserInfo.workgroupId;\n      }\n\n      var runId = this.ConfigService.getRunId();\n      var nodeId = this.nodeId;\n      var componentId = this.componentId;\n      var studentWorkId = componentState.id;\n      var data = {};\n      data.action = 'Undo Delete';\n\n      // create the inappropriate flag annotation\n      var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n\n      // save the annotation to the server\n      this.AnnotationService.saveAnnotation(annotation).then(() => {\n\n        // get the component states made by the student\n        var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n        // get the annotations for the component states\n        var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n        // refresh the teacher view of the posts\n        this.setClassResponses(componentStates, annotations);\n      });\n    }\n  }\n\n  /**\n   * Get the inappropriate flag annotations for these component states\n   * @param componentStates an array of component states\n   * @return an array of inappropriate flag annotations that are associated\n   * with the component states\n   */\n  getInappropriateFlagAnnotationsByComponentStates(componentStates) {\n    var annotations = [];\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n\n          /*\n           * get the latest inappropriate flag annotation for the\n           * component state\n           */\n          var latestInappropriateFlagAnnotation = this.AnnotationService.getLatestAnnotationByStudentWorkIdAndType(componentState.id, 'inappropriateFlag');\n\n          if (latestInappropriateFlagAnnotation != null) {\n            annotations.push(latestInappropriateFlagAnnotation);\n          }\n        }\n      }\n    }\n\n    return annotations;\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedResponse = '';\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            // get the student response\n            let response = studentData.response;\n\n            if (response != null && response != '') {\n              if (mergedResponse != '') {\n                // add a new line between the responses\n                mergedResponse += '\\n';\n              }\n\n              // append the response\n              mergedResponse += response;\n            }\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.response = mergedResponse;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'showWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nDiscussionController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'DiscussionService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'StudentWebSocketService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}