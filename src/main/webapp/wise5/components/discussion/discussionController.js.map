{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","studentResponse","newResponse","classResponses","topLevelResponses","responsesMap","retrievedClassmateResponses","isStudentMode","isPreview","componentStates","hasConnectedComponent","componentContent","connectedComponents","connectedComponent","concat","getComponentStatesByNodeIdAndComponentId","nodeId","componentId","isConnectedComponentImportWorkMode","setClassResponses","retrieveWorkFromTheseComponents","push","getClassmateResponses","isClassmateResponsesGated","componentState","componentStateHasStudentWork","disableComponentIfNecessary","isGradingMode","isGradingRevisionMode","workgroupHasWorkForComponent","workgroupId","componentIds","getGradingComponentIds","getPostsAssociatedWithComponentIdsAndWorkgroupId","annotations","getInappropriateFlagAnnotationsByComponentStates","initializeScopeSubmitButtonClicked","initializeScopeGetComponentState","initializeScopeStudentDataChanged","registerStudentWorkReceivedListener","initializeWatchMdMedia","broadcastDoneRenderingComponent","isShowWorkMode","type","isImportWorkMode","connectedComponentIds","submitbuttonclicked","componentStateReplyingTo","replyText","componentStateId","id","discussionController","componentStateIdReplyingTo","isSubmit","isDirty","isAuthoringMode","createComponentState","$emit","getComponentState","deferred","defer","action","then","clearComponentValues","resolve","promise","studentdatachanged","studentDataChanged","destroyStudentWorkSavedToServerListener","$on","event","args","studentWork","isWorkFromThisComponent","addClassResponse","sendPostToStudentsInThread","studentData","fromWorkgroupId","notificationType","usernamesArray","getUsernamesByWorkgroupId","usernames","map","obj","name","join","notificationMessage","$translate","workgroupsNotifiedSoFar","sendPostToThreadCreator","sendPostToThreadRepliers","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","replies","r","length","reply","indexOf","destroyStudentWorkReceivedListener","isWorkFromConnectedComponent","isWorkFromClassmate","getWorkgroupId","isForThisComponent","$watch","md","mdScreen","components","runId","getRunId","periodId","getPeriodId","result","studentWorkList","createNewComponentState","response","attachments","componentType","mode","generateKey","createComponentStateAdditionalProcessing","isDisabled","showSaveButton","showSubmitButton","gateClassmateResponses","sort","sortByServerSaveTime","latestInappropriateFlagAnnotation","getLatestInappropriateFlagAnnotationByStudentWorkId","getUserIdsDisplay","data","processResponses","componentState1","componentState2","serverSaveTime","userIds","getUserIdsByWorkgroupId","userIdsDisplay","userId","studentWorkId","annotation","getLevel1Responses","filter","threadHasPostFromThisComponentAndWorkgroupId","thisComponentId","thisWorkgroupId","replyComponentState","level1Responses","classResponse","userInfo","getUserInfoByWorkgroupId","teacherUserInfo","getMyUserInfo","createInappropriateFlagAnnotation","saveAnnotation","getPostsAssociatedWithWorkgroupIds","getLatestAnnotationByStudentWorkIdAndType","ComponentController","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["'use strict';\n\nimport ComponentController from '../componentController';\n\nclass DiscussionController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      DiscussionService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      StudentWebSocketService,\n      UtilService,\n      $mdMedia) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.DiscussionService = DiscussionService;\n    this.NotificationService = NotificationService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.$mdMedia = $mdMedia;\n    this.studentResponse = '';\n    this.newResponse = '';\n    this.classResponses = [];\n    this.topLevelResponses = [];\n    this.responsesMap = {};\n    this.retrievedClassmateResponses = false;\n    if (this.isStudentMode()) {\n      if (this.ConfigService.isPreview()) {\n        let componentStates = [];\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          for (const connectedComponent of this.componentContent.connectedComponents) {\n            componentStates = componentStates.concat(this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                connectedComponent.nodeId, connectedComponent.componentId));\n          }\n          if (this.isConnectedComponentImportWorkMode()) {\n            componentStates = componentStates.concat(this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                this.nodeId, this.componentId));\n          }\n        } else {\n          componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n              this.nodeId, this.componentId);\n        }\n        this.setClassResponses(componentStates);\n      } else {\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          const retrieveWorkFromTheseComponents = [];\n          for (const connectedComponent of this.componentContent.connectedComponents) {\n            retrieveWorkFromTheseComponents.push(\n                {nodeId: connectedComponent.nodeId, componentId: connectedComponent.componentId});\n          }\n          if (this.isConnectedComponentImportWorkMode()) {\n            retrieveWorkFromTheseComponents.push({nodeId: this.nodeId, componentId: this.componentId});\n          }\n          this.getClassmateResponses(retrieveWorkFromTheseComponents);\n        } else {\n          if (this.isClassmateResponsesGated()) {\n            const componentState = this.$scope.componentState;\n            if (componentState != null) {\n              if (this.DiscussionService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                this.getClassmateResponses();\n              }\n            }\n          } else {\n            this.getClassmateResponses();\n          }\n        }\n      }\n      this.disableComponentIfNecessary();\n    } else if (this.isGradingMode() || this.isGradingRevisionMode()) {\n      if (this.DiscussionService.workgroupHasWorkForComponent(this.workgroupId, this.componentId)) {\n        const componentIds = this.getGradingComponentIds();\n        const componentStates = this.DiscussionService.\n            getPostsAssociatedWithComponentIdsAndWorkgroupId(componentIds, this.workgroupId);\n        const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n        this.setClassResponses(componentStates, annotations);\n      }\n    }\n    this.initializeScopeSubmitButtonClicked();\n    this.initializeScopeGetComponentState();\n    this.initializeScopeStudentDataChanged();\n    this.registerStudentWorkReceivedListener();\n    this.initializeWatchMdMedia();\n    this.broadcastDoneRenderingComponent();\n  }\n\n  isConnectedComponentShowWorkMode() {\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      let isShowWorkMode = true;\n      for (const connectedComponent of this.componentContent.connectedComponents) {\n        isShowWorkMode = isShowWorkMode && connectedComponent.type === 'showWork';\n      }\n      return isShowWorkMode;\n    }\n    return false;\n  }\n\n  isConnectedComponentImportWorkMode() {\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      let isImportWorkMode = true;\n      for (const connectedComponent of this.componentContent.connectedComponents) {\n        isImportWorkMode = isImportWorkMode && connectedComponent.type === 'importWork';\n      }\n      return isImportWorkMode;\n    }\n    return false;\n  }\n\n  getGradingComponentIds() {\n    const connectedComponentIds = [this.componentId];\n    if (this.componentContent.connectedComponents != null) {\n      for (const connectedComponent of this.componentContent.connectedComponents) {\n        connectedComponentIds.push(connectedComponent.componentId);\n      }\n    }\n    return connectedComponentIds;\n  }\n\n  initializeScopeSubmitButtonClicked() {\n    this.$scope.submitbuttonclicked = (componentStateReplyingTo) => {\n      if (componentStateReplyingTo && componentStateReplyingTo.replyText) {\n        const componentState = componentStateReplyingTo;\n        const componentStateId = componentState.id;\n        this.$scope.discussionController.studentResponse = componentState.replyText;\n        this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n        this.$scope.discussionController.isSubmit = true;\n        this.$scope.discussionController.isDirty = true;\n        componentStateReplyingTo.replyText = null;\n      } else {\n        this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n        this.$scope.discussionController.isSubmit = true;\n      }\n      if (this.isAuthoringMode()) {\n        this.createComponentState('submit');\n      }\n      this.$scope.$emit('componentSubmitTriggered',\n          {\n            nodeId: this.$scope.discussionController.nodeId,\n            componentId: this.$scope.discussionController.componentId\n          }\n       );\n    };\n  }\n\n  initializeScopeGetComponentState() {\n    this.$scope.getComponentState = () => {\n      const deferred = this.$q.defer();\n      if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n        const action = 'submit';\n        this.$scope.discussionController.createComponentState(action).then((componentState) => {\n          this.$scope.discussionController.clearComponentValues();\n          this.$scope.discussionController.isDirty = false;\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n  }\n\n  initializeScopeStudentDataChanged() {\n    this.$scope.studentdatachanged = () => {\n      this.$scope.discussionController.studentDataChanged();\n    };\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.destroyStudentWorkSavedToServerListener =\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      const componentState = args.studentWork;\n      if (this.isWorkFromThisComponent(componentState)) {\n        if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n          this.getClassmateResponses();\n        } else {\n          this.addClassResponse(componentState);\n        }\n        this.disableComponentIfNecessary();\n        this.sendPostToStudentsInThread(componentState);\n      }\n      this.isSubmit = null;\n    });\n  }\n\n  sendPostToStudentsInThread(componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null && this.responsesMap != null) {\n      const componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo != null) {\n        const fromWorkgroupId = componentState.workgroupId;\n        const notificationType = 'DiscussionReply';\n        const nodeId = componentState.nodeId;\n        const componentId = componentState.componentId;\n        const usernamesArray = this.ConfigService.getUsernamesByWorkgroupId(fromWorkgroupId);\n        const usernames = usernamesArray.map((obj) => {\n          return obj.name;\n        }).join(', ');\n        const notificationMessage = this.$translate('discussion.repliedToADiscussionYouWereIn', { usernames: usernames });\n        const workgroupsNotifiedSoFar = [];\n        if (this.responsesMap[componentStateIdReplyingTo] != null) {\n          this.sendPostToThreadCreator(componentStateIdReplyingTo, notificationType, nodeId,\n              componentId, fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar);\n          this.sendPostToThreadRepliers(componentStateIdReplyingTo, notificationType, nodeId,\n              componentId, fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar);\n        }\n      }\n    }\n  }\n\n  sendPostToThreadCreator(componentStateIdReplyingTo, notificationType, nodeId, componentId,\n      fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar) {\n    const originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n    const toWorkgroupId = originalPostComponentState.workgroupId;\n    if (toWorkgroupId != null && toWorkgroupId !== fromWorkgroupId) {\n      const notification = this.NotificationService.createNewNotification(\n          notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n      this.NotificationService.saveNotificationToServer(notification);\n      workgroupsNotifiedSoFar.push(toWorkgroupId);\n    }\n  }\n\n  sendPostToThreadRepliers(componentStateIdReplyingTo, notificationType, nodeId, componentId,\n      fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar) {\n    if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n      const replies = this.responsesMap[componentStateIdReplyingTo].replies;\n      for (let r = 0; r < replies.length; r++) {\n        const reply = replies[r];\n        const toWorkgroupId = reply.workgroupId;\n        if (toWorkgroupId != null && toWorkgroupId !== fromWorkgroupId &&\n            workgroupsNotifiedSoFar.indexOf(toWorkgroupId) === -1) {\n          const notification = this.NotificationService.createNewNotification(\n              notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n          this.NotificationService.saveNotificationToServer(notification);\n          workgroupsNotifiedSoFar.push(toWorkgroupId);\n        }\n      }\n    }\n  }\n\n  registerStudentWorkReceivedListener() {\n    this.destroyStudentWorkReceivedListener =\n        this.$rootScope.$on('studentWorkReceived', (event, componentState) => {\n      if ((this.isWorkFromThisComponent(componentState) ||\n          this.isWorkFromConnectedComponent(componentState)) &&\n          this.isWorkFromClassmate(componentState) &&\n          this.retrievedClassmateResponses) {\n        this.addClassResponse(componentState);\n      }\n    });\n  }\n\n  isWorkFromClassmate(componentState) {\n    return componentState.workgroupId !== this.ConfigService.getWorkgroupId();\n  }\n\n  isWorkFromThisComponent(componentState) {\n    return this.isForThisComponent(componentState);\n  }\n\n  isWorkFromConnectedComponent(componentState) {\n    if (this.componentContent.connectedComponents != null) {\n      for (const connectedComponent of this.componentContent.connectedComponents) {\n        if (connectedComponent.nodeId === componentState.nodeId &&\n          connectedComponent.componentId === componentState.componentId) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  initializeWatchMdMedia() {\n    this.$scope.$watch(() => { return this.$mdMedia('gt-sm'); }, (md) => {\n      this.$scope.mdScreen = md;\n    });\n  }\n\n  getClassmateResponses(components = [{nodeId: this.nodeId, componentId: this.componentId}]) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    this.DiscussionService.getClassmateResponses(runId, periodId, components).then((result) => {\n      this.setClassResponses(result.studentWorkList, result.annotations);\n    });\n  }\n\n  submitButtonClicked() {\n    this.isSubmit = true;\n    this.disableComponentIfNecessary();\n    this.$scope.submitbuttonclicked();\n  }\n\n  studentDataChanged() {\n    this.isDirty = true;\n    const action = 'change';\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged',\n          {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {\n      response: this.studentResponse,\n      attachments: this.attachments,\n    };\n    if (this.componentStateIdReplyingTo != null) {\n      studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n    }\n    componentState.studentData = studentData;\n    componentState.componentType = 'Discussion';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    if ((this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) || this.mode === 'authoring') {\n      componentState.id = this.UtilService.generateKey();\n    }\n    if (this.isSubmit) {\n      componentState.studentData.isSubmit = this.isSubmit;\n      this.isSubmit = false;\n      if (this.mode === 'authoring') {\n        if (this.StudentDataService.studentData == null) {\n          this.StudentDataService.studentData = {};\n          this.StudentDataService.studentData.componentStates = [];\n        }\n        this.StudentDataService.studentData.componentStates.push(componentState);\n        const componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        this.setClassResponses(componentStates);\n        this.clearComponentValues();\n        this.isDirty = false;\n      }\n    }\n    const deferred = this.$q.defer();\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  clearComponentValues() {\n    this.studentResponse = '';\n    this.newResponse = '';\n    this.attachments = [];\n    this.componentStateIdReplyingTo = null;\n  }\n\n  disableComponentIfNecessary() {\n    super.disableComponentIfNecessary();\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      for (let connectedComponent of this.componentContent.connectedComponents) {\n        if (connectedComponent.type === 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n    }\n  }\n\n  showSaveButton() {\n    return this.componentContent.showSaveButton;\n  }\n\n  showSubmitButton() {\n    return this.componentContent.showSubmitButton;\n  }\n\n  isClassmateResponsesGated() {\n    return this.componentContent.gateClassmateResponses;\n  }\n\n  setClassResponses(componentStates, annotations) {\n    this.classResponses = [];\n    componentStates = componentStates.sort(this.sortByServerSaveTime);\n    for (let componentState of componentStates) {\n      if (componentState.studentData.isSubmit) {\n        const workgroupId = componentState.workgroupId;\n        const latestInappropriateFlagAnnotation =\n            this.getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, componentState.id);\n        const usernames = this.ConfigService.getUsernamesByWorkgroupId(workgroupId);\n        if (usernames.length === 0) {\n          componentState.usernames = this.getUserIdsDisplay(workgroupId);\n        } else {\n          componentState.usernames = usernames.map(function(obj) { return obj.name; }).join(', ');\n        }\n        componentState.replies = [];\n        if (this.isGradingMode() || this.isGradingRevisionMode()) {\n          if (latestInappropriateFlagAnnotation != null) {\n            /*\n             * Set the inappropriate flag annotation into the component state. This is used for the\n             * grading tool to determine whether to show the 'Delete' button or the 'Undo Delete'\n             * button.\n             */\n            componentState.latestInappropriateFlagAnnotation = latestInappropriateFlagAnnotation;\n          }\n          this.classResponses.push(componentState);\n        } else if (this.isStudentMode()) {\n          if (latestInappropriateFlagAnnotation != null &&\n              latestInappropriateFlagAnnotation.data != null &&\n              latestInappropriateFlagAnnotation.data.action === 'Delete') {\n            // do not show this post because the teacher has deleted it\n          } else {\n            this.classResponses.push(componentState);\n          }\n        }\n      }\n    }\n    this.processResponses(this.classResponses);\n    this.retrievedClassmateResponses = true;\n  }\n\n  sortByServerSaveTime(componentState1, componentState2) {\n    if (componentState1.serverSaveTime < componentState2.serverSaveTime) {\n      return -1;\n    } else if (componentState1.serverSaveTime > componentState2.serverSaveTime) {\n      return 1;\n    }\n    return 0;\n  }\n\n  getUserIdsDisplay(workgroupId) {\n    const userIds = this.ConfigService.getUserIdsByWorkgroupId(workgroupId);\n    const userIdsDisplay = [];\n    for (let userId of userIds) {\n      userIdsDisplay.push(`Student ${userId}`);\n    }\n    return userIdsDisplay.join(', ');\n  }\n\n  getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, studentWorkId) {\n    if (annotations != null) {\n      for (const annotation of annotations) {\n        if (studentWorkId === annotation.studentWorkId && annotation.type === 'inappropriateFlag') {\n          return annotation;\n        }\n      }\n    }\n    return null;\n  }\n\n  processResponses(componentStates) {\n    for (const componentState of componentStates) {\n      this.responsesMap[componentState.id] = componentState;\n    }\n    for (const componentState of componentStates) {\n      if (componentState && componentState.studentData) {\n        const studentData = componentState.studentData;\n        const componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n        if (componentStateIdReplyingTo) {\n          if (this.responsesMap[componentStateIdReplyingTo] &&\n            this.responsesMap[componentStateIdReplyingTo].replies) {\n            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n          }\n        }\n      }\n    }\n    this.topLevelResponses = this.getLevel1Responses();\n    if (this.isGradingMode() || this.isGradingRevisionMode()) {\n      this.topLevelResponses =\n          this.topLevelResponses.filter(this.threadHasPostFromThisComponentAndWorkgroupId());\n    }\n  }\n\n  threadHasPostFromThisComponentAndWorkgroupId() {\n    const thisComponentId = this.componentId;\n    const thisWorkgroupId = this.workgroupId;\n    return (componentState) => {\n      if (componentState.componentId === thisComponentId &&\n          componentState.workgroupId === thisWorkgroupId) {\n        return true;\n      }\n      for (const replyComponentState of componentState.replies) {\n        if (replyComponentState.componentId === thisComponentId &&\n            replyComponentState.workgroupId === thisWorkgroupId) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  addClassResponse(componentState) {\n    if (componentState.studentData.isSubmit) {\n      const workgroupId = componentState.workgroupId;\n      const usernames = this.ConfigService.getUsernamesByWorkgroupId(workgroupId);\n      if (usernames.length > 0) {\n        componentState.usernames = usernames.map(function(obj) { return obj.name; }).join(', ');\n      } else if (componentState.usernamesArray != null) {\n        componentState.usernames = componentState.usernamesArray\n            .map(function(obj) { return obj.name; }).join(', ');\n      }\n      componentState.replies = [];\n      this.classResponses.push(componentState);\n      this.responsesMap[componentState.id] = componentState;\n      const componentStateIdReplyingTo = componentState.studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo != null) {\n        if (this.responsesMap[componentStateIdReplyingTo] != null &&\n            this.responsesMap[componentStateIdReplyingTo].replies != null) {\n          this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n        }\n      }\n      this.topLevelResponses = this.getLevel1Responses();\n    }\n  }\n\n  getClassResponses() {\n    return this.classResponses;\n  }\n\n  /**\n   * Get the level 1 responses which are posts that are not a reply to\n   * another response.\n   * @return an array of responses that are not a reply to another response\n   */\n  getLevel1Responses() {\n    const level1Responses = [];\n    for (const classResponse of this.classResponses) {\n      const componentStateIdReplyingTo = classResponse.studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo == null) {\n        level1Responses.push(classResponse);\n      }\n    }\n    return level1Responses;\n  }\n\n  /**\n   * The teacher has clicked the delete button to delete a post. We won't\n   * actually delete the student work, we'll just create an inappropriate\n   * flag annotation which prevents the students in the class from seeing\n   * the post.\n   * @param componentState the student component state the teacher wants to\n   * delete.\n   */\n  deletebuttonclicked(componentState) {\n    const toWorkgroupId = componentState.workgroupId;\n    const userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n    const periodId = userInfo.periodId;\n    const teacherUserInfo = this.ConfigService.getMyUserInfo();\n    const fromWorkgroupId = teacherUserInfo.workgroupId;\n    const runId = this.ConfigService.getRunId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const studentWorkId = componentState.id;\n    const data = {\n      action: 'Delete'\n    };\n    const annotation = this.AnnotationService.createInappropriateFlagAnnotation(\n        runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n    this.AnnotationService.saveAnnotation(annotation).then(() => {\n      const componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupIds(\n          this.getGradingComponentIds(), this.workgroupId);\n      const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n      this.setClassResponses(componentStates, annotations);\n    });\n  }\n\n  /**\n   * The teacher has clicked the 'Undo Delete' button to undo a previous\n   * deletion of a post. This function will create an inappropriate flag\n   * annotation with the action set to 'Undo Delete'. This will make the\n   * post visible to the students.\n   * @param componentState the student component state the teacher wants to\n   * show again.\n   */\n  undodeletebuttonclicked(componentState) {\n    const toWorkgroupId = componentState.workgroupId;\n    const userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n    const periodId = userInfo.periodId;\n    const teacherUserInfo = this.ConfigService.getMyUserInfo();\n    const fromWorkgroupId = teacherUserInfo.workgroupId;\n    const runId = this.ConfigService.getRunId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const studentWorkId = componentState.id;\n    const data = {\n      action: 'Undo Delete'\n    };\n    const annotation = this.AnnotationService.createInappropriateFlagAnnotation(\n        runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n    this.AnnotationService.saveAnnotation(annotation).then(() => {\n      const componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupIds(\n          this.getGradingComponentIds(), this.workgroupId);\n      const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n      this.setClassResponses(componentStates, annotations);\n    });\n  }\n\n  /**\n   * Get the inappropriate flag annotations for these component states\n   * @param componentStates an array of component states\n   * @return an array of inappropriate flag annotations that are associated\n   * with the component states\n   */\n  getInappropriateFlagAnnotationsByComponentStates(componentStates) {\n    const annotations = [];\n    if (componentStates != null) {\n      for (let componentState of componentStates) {\n        const latestInappropriateFlagAnnotation =\n            this.AnnotationService.getLatestAnnotationByStudentWorkIdAndType(\n                componentState.id, 'inappropriateFlag');\n        if (latestInappropriateFlagAnnotation != null) {\n          annotations.push(latestInappropriateFlagAnnotation);\n        }\n      }\n    }\n    return annotations;\n  }\n\n  cleanupBeforeExiting() {\n    this.destroyStudentWorkSavedToServerListener();\n    this.destroyStudentWorkReceivedListener();\n  }\n}\n\nDiscussionController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'DiscussionService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'StudentWebSocketService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}