{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$injector","$q","$rootScope","$scope","ConfigService","DiscussionService","NodeService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","newResponse","newAttachments","isDisabled","isDirty","isShowPreviousWork","isSubmit","classResponses","topLevelResponses","submitText","responsesMap","isRichTextEnabled","isStudentAttachmentEnabled","retrievedClassmateResponses","latestAnnotations","mode","workgroupId","teacherWorkgroupId","currentNode","getCurrentNode","id","originalComponentContent","isPreview","componentStates","getComponentStatesByNodeIdAndComponentId","setClassResponses","isClassmateResponsesGated","componentState","getClassmateResponses","$parent","nodeController","getLatestComponentAnnotations","calculateDisabled","getPostsAssociatedWithWorkgroupId","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","registerComponentController","submitbuttonclicked","response","replyText","componentStateId","discussionController","componentStateIdReplyingTo","$emit","getComponentState","deferred","defer","action","createComponentState","then","clearComponentValues","resolve","promise","$on","event","args","studentWork","addClassResponse","submit","messageType","sendStudentToClassmatesInPeriodMessage","studentData","fromWorkgroupId","notificationType","userNamesArray","getUserNamesByWorkgroupId","userNames","map","obj","name","join","notificationMessage","workgroupsNotifiedSoFar","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","savedNotification","push","replies","r","length","reply","indexOf","studentdatachanged","studentDataChanged","data","componentStateWorkgroupId","getWorkgroupId","scope","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","statusbar","forced_root_block","setup","ed","on","e","$","target","editorContainer","addClass","parent","removeClass","md","mdScreen","runId","getRunId","periodId","getPeriodId","result","studentWorkList","isLockAfterSubmit","getComponentId","createNewComponentState","attachments","generateKey","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","show","showSaveButton","showSubmitButton","gateClassmateResponses","attachment","splice","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","importWorkNodeId","importWorkComponentId","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","setStudentWork","c","processResponses","i","getLevel1Responses","level1Responses","tempClassResponse","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","exitListener","$broadcast","components","getComponentsByNodeId","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["class DiscussionController {\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                DiscussionService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService,\n                $mdMedia) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.DiscussionService = DiscussionService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.$mdMedia = $mdMedia;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds the text for a new response (not a reply)\n        this.newResponse = '';\n\n        // holds student attachments like assets\n        this.newAttachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the class responses\n        this.classResponses = [];\n\n        // will hold the top level responses\n        this.topLevelResponses = [];\n\n        // the text that is being submitted\n        this.submitText = null;\n\n        // map from component state id to response\n        this.responsesMap = {};\n\n        // whether rich text is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether we have retrieved the classmate responses\n        this.retrievedClassmateResponses = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.workgroupId = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.mode = this.$scope.mode;\n\n            if (this.$scope.workgroupId != null) {\n                this.workgroupId = this.$scope.workgroupId;\n            }\n\n            if (this.$scope.nodeId != null) {\n                this.nodeId = this.$scope.nodeId;\n            }\n\n            if (this.mode === 'student') {\n                if (this.ConfigService.isPreview()) {\n                    // we are in preview mode, so get all posts\n                    var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                    this.setClassResponses(componentStates);\n                } else {\n                    // we are in regular student run mode\n\n                    if (this.isClassmateResponsesGated()) {\n                        /*\n                         * classmate responses are gated so we will not show them if the student\n                         * has not submitted a response\n                         */\n\n                        // get the component state from the scope\n                        var componentState = this.$scope.componentState;\n\n                        if (componentState != null) {\n                            /*\n                             * the student has already submitted a response so we will\n                             * display the classmate responses\n                             */\n                            this.getClassmateResponses();\n                        }\n                    } else {\n                        // classmate responses are not gated so we will show them\n                        this.getClassmateResponses();\n                    }\n\n                    // get the latest annotations\n                    // TODO: watch for new annotations and update accordingly\n                    this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n            } else if (this.mode === 'grading') {\n\n                /*\n                 * get all the posts that this workgroup id is part of. if the student\n                 * posted a top level response we will get the top level response and\n                 * all the replies. if the student replied to a top level response we\n                 * will get the top level response and all the replies.\n                 */\n                var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n                this.setClassResponses(componentStates);\n\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The submit button was clicked\n         * @param response the response object related to the submit button\n         */\n        this.$scope.submitbuttonclicked = function(response) {\n\n            if (response) {\n                // this submit button was clicked for a reply\n\n                if (response.replyText){\n                    var componentState = response;\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    /*\n                     * remember the values in the controller so we can read\n                     * from them later when the student data is saved\n                     */\n                    this.$scope.discussionController.studentResponse = componentState.replyText;\n                    this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n                    // clear the reply input\n                    response.replyText = null;\n\n                    this.$scope.discussionController.isSubmit = true;\n                    this.$scope.discussionController.isDirty = true;\n                }\n            } else {\n                // the submit button was clicked for the new post\n\n                /*\n                 * set the response from the top textarea into the\n                 * studentResponse field that we will read from later\n                 * when the student data is saved\n                 */\n                this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n                this.$scope.discussionController.isSubmit = true;\n            }\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var deferred = this.$q.defer();\n\n            // check if the student work is dirty and the student clicked the submit button\n            if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n\n                var action = 'submit';\n\n                // create a component state populated with the student data\n                this.$scope.discussionController.createComponentState(action).then((componentState) => {\n                    /*\n                     * clear the component values so they aren't accidentally used again\n                     * later\n                     */\n                    this.$scope.discussionController.clearComponentValues();\n\n                    // set isDirty to false since this student work is about to be saved\n                    this.$scope.discussionController.isDirty = false;\n\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', (event, args) => {\n\n            // do nothing\n        });\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // check if the classmate responses are gated\n                if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n                    /*\n                     * the classmate responses are gated and we haven't retrieved\n                     * them yet so we will obtain them now and show them since the student\n                     * has just submitted a response. getting the classmate responses will\n                     * also get the post the student just saved to the server.\n                     */\n                    this.getClassmateResponses();\n                } else {\n                    /*\n                     * the classmate responses are not gated or have already been retrieved\n                     * which means they are already being displayed. we just need to add the\n                     * new response in this case.\n                     */\n\n                    // add the component state to our collection of class responses\n                    this.addClassResponse(componentState);\n                }\n\n                this.submit();\n\n                // send the student post to web sockets so all the classmates receive it in real time\n                let messageType = \"studentData\";\n                this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\n\n                // next, send notifications to students who have posted a response in the same thread as this post\n                let studentData = componentState.studentData;\n                if (studentData != null && this.responsesMap != null) {\n                    let componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n                    if (componentStateIdReplyingTo != null) {\n                        // populate fields of the notification\n                        let fromWorkgroupId = componentState.workgroupId;\n                        let notificationType = \"DiscussionReply\";\n                        let nodeId = componentState.nodeId;\n                        let componentId = componentState.componentId;\n                        // add the user names to the component state so we can display next to the response\n                        let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\n                        let userNames = userNamesArray.map( (obj) => {\n                            return obj.name;\n                        }).join(', ');\n                        let notificationMessage = userNames + \" replied to a discussion you were in!\";\n\n                        let workgroupsNotifiedSoFar = [];  // keep track of workgroups we've already notified, in case a workgroup posts twice on a thread we only want to notify once.\n                        // check if we have the component state that was replied to\n                        if (this.responsesMap[componentStateIdReplyingTo] != null) {\n                            let originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n                            let toWorkgroupId = originalPostComponentState.workgroupId; // notify the workgroup who posted this reply\n                            if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\n                                let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                                this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                                    let messageType = \"notification\";\n                                    this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                                });\n                                workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                            }\n\n                            // also notify repliers to this thread, if any.\n                            if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                                let replies = this.responsesMap[componentStateIdReplyingTo].replies;\n\n                                for (let r = 0; r < replies.length; r++) {\n                                    let reply = replies[r];\n                                    let toWorkgroupId = reply.workgroupId; // notify the workgroup who posted this reply\n                                    if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId && workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\n                                        let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                                        this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                                            let messageType = \"notification\";\n                                            this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                                        });\n                                        workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.isSubmit = null;\n        });\n\n        this.$scope.studentdatachanged = function() {\n            this.$scope.discussionController.studentDataChanged();\n        };\n\n        /**\n         * We have recived a web socket message\n         */\n        this.$rootScope.$on('webSocketMessageRecieved', (event, args) => {\n            if (args != null) {\n                var data = args.data;\n\n                var componentState = data.data;\n\n                if (componentState != null) {\n\n                    // check that the web socket message is for this step\n                    if (componentState.nodeId === this.nodeId) {\n\n                        // get the sender of the message\n                        var componentStateWorkgroupId = componentState.workgroupId;\n\n                        // get the workgroup id of the signed in student\n                        var workgroupId = this.ConfigService.getWorkgroupId();\n\n                        /*\n                         * check if the signed in student sent the message. if the\n                         * signed in student sent the message we can ignore it.\n                         */\n                        if (workgroupId !== componentStateWorkgroupId) {\n\n                            if (this.retrievedClassmateResponses) {\n                                // display the classmate post\n                                this.addClassResponse(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        var scope = this;\n        var themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors?\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link autoresize',\n            toolbar: 'superscript subscript',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            statusbar: false,\n            forced_root_block: false,\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n            $scope.mdScreen = md;\n        });\n\n    }\n\n    /**\n     * Get the classmate responses\n     */\n    getClassmateResponses() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n\n        // make the request for the classmate responses\n        this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\n\n            if (result != null) {\n                var componentStates = result.studentWorkList;\n\n                // set the classmate responses\n                this.setClassResponses(componentStates);\n            }\n        });\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            // populate the text the student previously typed\n            var studentData = componentState.studentData;\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // handle the submit button click\n        this.$scope.submitbuttonclicked();\n    };\n\n    submit() {\n        if (this.isLockAfterSubmit()) {\n            // disable the component if it was authored to lock after submit\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // set the response into the component state\n            studentData.response = this.studentResponse;\n\n            studentData.attachments = this.newAttachments;\n\n            if (this.componentStateIdReplyingTo != null) {\n                // if this step is replying, set the component state id replying to\n                studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n            }\n\n            componentState.studentData = studentData;\n\n            if (this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) {\n                // create a dummy component state id if we're in preview mode and posting a new response\n                componentState.id = this.UtilService.generateKey();\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.studentData.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Clear the component values so they aren't accidentally used again\n     */\n    clearComponentValues() {\n\n        // clear the student response\n        this.studentResponse = '';\n\n        // clear the new response input\n        this.newResponse = '';\n\n        // clear new attachments input\n        this.newAttachments = [];\n\n        // clear the component state id replying to\n        this.componentStateIdReplyingTo = null;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     * @return whether to lock the component after the student submits\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to gate the classmate responses\n     * @return whether to gate the classmate responses\n     */\n    isClassmateResponsesGated() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the gateClassmateResponses field in the component content\n            if (this.componentContent.gateClassmateResponses) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.newAttachments.indexOf(attachment) != -1) {\n            this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.newAttachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Set the class responses into the controller\n     * @param componentStates the class component states\n     */\n    setClassResponses(componentStates) {\n\n        this.classResponses = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    // get the component state id\n                    var id = componentState.id;\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        if (componentState.studentData.isSubmit) {\n\n                            // add the user names to the component state so we can display next to the response\n                            let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n                            componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n                            // add a replies array to the component state that we will fill with component state replies later\n                            componentState.replies = [];\n\n                            // add the component state to our array\n                            this.classResponses.push(componentState);\n                        }\n                    }\n                }\n            }\n        }\n\n        // process the class responses\n        this.processResponses(this.classResponses);\n\n        this.retrievedClassmateResponses = true;\n    };\n\n    /**\n     * Process the class responses. This will put responses into the\n     * replies arrays.\n     * @param classResponses an array of component states\n     */\n    processResponses(componentStates) {\n\n        if (componentStates) {\n            var componentState;\n\n            // loop through all the component states\n            for (var i = 0; i < componentStates.length; i++) {\n                componentState = componentStates[i];\n\n                if (componentState) {\n                    var componentStateId = componentState.id;\n\n                    // set the component state into the map\n                    this.responsesMap[componentStateId] = componentState;\n                }\n            }\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                componentState = componentStates[c];\n\n                if (componentState && componentState.studentData) {\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo) {\n\n                        if (this.responsesMap[componentStateIdReplyingTo] &&\n                            this.responsesMap[componentStateIdReplyingTo].replies) {\n                            /*\n                             * add this component state to the replies array of the\n                             * component state that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n                }\n            }\n\n            this.topLevelResponses = this.getLevel1Responses();\n        }\n    };\n\n    /**\n     * Add a class response to our model\n     * @param componentState the component state to add to our model\n     */\n    addClassResponse(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (componentState.studentData.isSubmit) {\n                    // this component state is a submit, so we will add it\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // add the user names to the component state so we can display next to the response\n                    let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n                    componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n                    // add a replies array to the component state that we will fill with component state replies later\n                    componentState.replies = [];\n\n                    // add the component state to our array of class responses\n                    this.classResponses.push(componentState);\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    // add the response to our map\n                    this.responsesMap[componentStateId] = componentState;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo != null) {\n\n                        // check if we have the component state that was replied to\n                        if (this.responsesMap[componentStateIdReplyingTo] != null &&\n                            this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                            /*\n                             * add this response to the replies array of the response\n                             * that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n\n                    this.topLevelResponses = this.getLevel1Responses();\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the class responses\n     */\n    getClassResponses() {\n        return this.classResponses;\n    };\n\n    /**\n     * Get the level 1 responses which are posts that are not a\n     * reply to another response.\n     * @return an array of responses that are not a reply to another\n     * response\n     */\n    getLevel1Responses() {\n        var level1Responses = [];\n        var classResponses = this.classResponses;\n\n        if (classResponses != null) {\n\n            // loop through all the class responses\n            for (var r = 0; r < classResponses.length; r++) {\n                var tempClassResponse = classResponses[r];\n\n                if (tempClassResponse != null && tempClassResponse.studentData) {\n\n                    // get the student data\n                    var studentData = tempClassResponse.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo == null) {\n                        /*\n                         * this response was not a reply to another post so it is a\n                         * level 1 response\n                         */\n                        level1Responses.push(tempClassResponse);\n                    }\n                }\n            }\n        }\n\n        return level1Responses;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        });\n    };\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n}\n\nDiscussionController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'DiscussionService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}