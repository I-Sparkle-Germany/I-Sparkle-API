{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","studentResponse","newResponse","classResponses","topLevelResponses","responsesMap","retrievedClassmateResponses","isStudentMode","isPreview","componentStates","hasConnectedComponent","componentContent","connectedComponent","connectedComponents","getComponentStatesByNodeIdAndComponentId","nodeId","componentId","setClassResponses","getClassmateResponses","isClassmateResponsesGated","componentState","componentStateHasStudentWork","disableComponentIfNecessary","isGradingMode","isGradingRevisionMode","getPostsAssociatedWithWorkgroupId","workgroupId","annotations","getInappropriateFlagAnnotationsByComponentStates","initializeScopeSubmitButtonClicked","initializeScopeGetComponentState","initializeScopeStudentDataChanged","registerWebSocketMessageReceivedListener","initializeWatchMdMedia","broadcastDoneRenderingComponent","submitbuttonclicked","componentStateReplyingTo","replyText","componentStateId","id","discussionController","componentStateIdReplyingTo","isSubmit","isDirty","isAuthoringMode","createComponentState","$emit","getComponentState","deferred","defer","action","then","clearComponentValues","resolve","promise","studentdatachanged","studentDataChanged","$on","event","args","studentWork","addClassResponse","sendPostToClassmatesInPeriod","sendPostToStudentsInThread","messageType","userNamesArray","getUserNamesByWorkgroupId","sendStudentToClassmatesInPeriodMessage","studentData","fromWorkgroupId","notificationType","userNames","map","obj","name","join","notificationMessage","$translate","workgroupsNotifiedSoFar","sendPostToThreadCreator","sendPostToThreadRepliers","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","savedNotification","push","replies","r","length","reply","indexOf","data","componentStateWorkgroupId","getWorkgroupId","$watch","md","mdScreen","runId","getRunId","periodId","getPeriodId","result","studentWorkList","createNewComponentState","response","attachments","componentType","mode","generateKey","createComponentStateAdditionalProcessing","type","isDisabled","showSaveButton","showSubmitButton","gateClassmateResponses","latestInappropriateFlagAnnotation","getLatestInappropriateFlagAnnotationByStudentWorkId","processResponses","studentWorkId","annotation","getLevel1Responses","level1Responses","classResponse","userInfo","getUserInfoByWorkgroupId","teacherUserInfo","getMyUserInfo","createInappropriateFlagAnnotation","saveAnnotation","getLatestAnnotationByStudentWorkIdAndType","ComponentController","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass DiscussionController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      DiscussionService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      StudentWebSocketService,\n      UtilService,\n      $mdMedia) {\n    super($filter, $mdDialog, $rootScope, $scope,\n      AnnotationService, ConfigService, NodeService,\n      NotebookService, ProjectService, StudentAssetService,\n      StudentDataService, UtilService);\n    this.$q = $q;\n    this.DiscussionService = DiscussionService;\n    this.NotificationService = NotificationService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.$mdMedia = $mdMedia;\n    this.studentResponse = '';\n    this.newResponse = '';\n    this.classResponses = [];\n    this.topLevelResponses = [];\n    this.responsesMap = {};\n    this.retrievedClassmateResponses = false;\n    if (this.isStudentMode()) {\n      if (this.ConfigService.isPreview()) {\n        let componentStates = null;\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // assume there can only be one connected component\n          const connectedComponent = this.componentContent.connectedComponents[0];\n          componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n              connectedComponent.nodeId, connectedComponent.componentId);\n        } else {\n          componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n              this.nodeId, this.componentId);\n        }\n        this.setClassResponses(componentStates);\n      } else {\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // assume there can only be one connected component\n          const connectedComponent = this.componentContent.connectedComponents[0];\n          this.getClassmateResponses(connectedComponent.nodeId, connectedComponent.componentId);\n        } else {\n          if (this.isClassmateResponsesGated()) {\n            const componentState = this.$scope.componentState;\n            if (this.DiscussionService.componentStateHasStudentWork(componentState, this.componentContent)) {\n              this.getClassmateResponses();\n            }\n          } else {\n            this.getClassmateResponses();\n          }\n        }\n      }\n      this.disableComponentIfNecessary();\n    } else if (this.isGradingMode() || this.isGradingRevisionMode()) {\n      const componentStates =\n          this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n      const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n      this.setClassResponses(componentStates, annotations);\n    }\n    this.initializeScopeSubmitButtonClicked();\n    this.initializeScopeGetComponentState();\n    this.initializeScopeStudentDataChanged();\n    this.registerWebSocketMessageReceivedListener();\n    this.initializeWatchMdMedia();\n    this.broadcastDoneRenderingComponent();\n  }\n\n  initializeScopeSubmitButtonClicked() {\n    this.$scope.submitbuttonclicked = (componentStateReplyingTo) => {\n      if (componentStateReplyingTo && componentStateReplyingTo.replyText) {\n        const componentState = componentStateReplyingTo;\n        const componentStateId = componentState.id;\n        this.$scope.discussionController.studentResponse = componentState.replyText;\n        this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n        this.$scope.discussionController.isSubmit = true;\n        this.$scope.discussionController.isDirty = true;\n        componentStateReplyingTo.replyText = null;\n      } else {\n        this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n        this.$scope.discussionController.isSubmit = true;\n      }\n      if (this.isAuthoringMode()) {\n        this.createComponentState('submit');\n      }\n      this.$scope.$emit('componentSubmitTriggered',\n          {\n            nodeId: this.$scope.discussionController.nodeId,\n            componentId: this.$scope.discussionController.componentId\n          }\n       );\n    };\n  }\n\n  initializeScopeGetComponentState() {\n    this.$scope.getComponentState = () => {\n      const deferred = this.$q.defer();\n      if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n        const action = 'submit';\n        this.$scope.discussionController.createComponentState(action).then((componentState) => {\n          this.$scope.discussionController.clearComponentValues();\n          this.$scope.discussionController.isDirty = false;\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n  }\n\n  initializeScopeStudentDataChanged() {\n    this.$scope.studentdatachanged = () => {\n      this.$scope.discussionController.studentDataChanged();\n    };\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      const componentState = args.studentWork;\n      if (componentState &&\n          this.nodeId === componentState.nodeId &&\n          this.componentId === componentState.componentId) {\n        if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n          this.getClassmateResponses();\n        } else {\n          this.addClassResponse(componentState);\n        }\n        this.disableComponentIfNecessary();\n        this.sendPostToClassmatesInPeriod(componentState);\n        this.sendPostToStudentsInThread(componentState);\n      }\n      this.isSubmit = null;\n    });\n  }\n\n  sendPostToClassmatesInPeriod(componentState) {\n    const messageType = 'studentData';\n    componentState.userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(componentState.workgroupId);\n    this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\n  }\n\n  sendPostToStudentsInThread(componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null && this.responsesMap != null) {\n      const componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo != null) {\n        const fromWorkgroupId = componentState.workgroupId;\n        const notificationType = 'DiscussionReply';\n        const nodeId = componentState.nodeId;\n        const componentId = componentState.componentId;\n        const userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\n        const userNames = userNamesArray.map((obj) => {\n          return obj.name;\n        }).join(', ');\n        const notificationMessage = this.$translate('discussion.repliedToADiscussionYouWereIn', { userNames: userNames });\n        const workgroupsNotifiedSoFar = [];\n        if (this.responsesMap[componentStateIdReplyingTo] != null) {\n          this.sendPostToThreadCreator(componentStateIdReplyingTo, notificationType, nodeId,\n              componentId, fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar);\n          this.sendPostToThreadRepliers(componentStateIdReplyingTo, notificationType, nodeId,\n              componentId, fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar);\n        }\n      }\n    }\n  }\n\n  sendPostToThreadCreator(componentStateIdReplyingTo, notificationType, nodeId, componentId,\n                          fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar) {\n    const originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n    const toWorkgroupId = originalPostComponentState.workgroupId;\n    if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\n      const notification = this.NotificationService.createNewNotification(\n          notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n      this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n        const messageType = 'notification';\n        this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n      });\n      workgroupsNotifiedSoFar.push(toWorkgroupId);\n    }\n  }\n\n  sendPostToThreadRepliers(componentStateIdReplyingTo, notificationType, nodeId, componentId,\n                           fromWorkgroupId, notificationMessage, workgroupsNotifiedSoFar) {\n    if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n      const replies = this.responsesMap[componentStateIdReplyingTo].replies;\n      for (let r = 0; r < replies.length; r++) {\n        const reply = replies[r];\n        const toWorkgroupId = reply.workgroupId;\n        if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId &&\n            workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\n          const notification = this.NotificationService.createNewNotification(\n              notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n          this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n            const messageType = 'notification';\n            this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n          });\n          workgroupsNotifiedSoFar.push(toWorkgroupId);\n        }\n      }\n    }\n  }\n\n  registerWebSocketMessageReceivedListener() {\n    this.$rootScope.$on('webSocketMessageReceived', (event, args) => {\n      const data = args.data;\n      const componentState = data.data;\n      if (componentState.nodeId === this.nodeId && componentState.componentId === this.componentId) {\n        const componentStateWorkgroupId = componentState.workgroupId;\n        const workgroupId = this.ConfigService.getWorkgroupId();\n        if (workgroupId !== componentStateWorkgroupId) {\n          if (this.retrievedClassmateResponses) {\n            this.addClassResponse(componentState);\n          }\n        }\n      }\n    });\n  }\n\n  initializeWatchMdMedia() {\n    this.$scope.$watch(() => { return this.$mdMedia('gt-sm'); }, (md) => {\n      this.$scope.mdScreen = md;\n    });\n  }\n\n  getClassmateResponses(nodeId = this.nodeId, componentId = this.componentId) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\n      if (result != null) {\n        const componentStates = result.studentWorkList;\n        const annotations = result.annotations;\n        this.setClassResponses(componentStates, annotations);\n      }\n    });\n  }\n\n  submitButtonClicked() {\n    this.isSubmit = true;\n    this.disableComponentIfNecessary();\n    this.$scope.submitbuttonclicked();\n  }\n\n  studentDataChanged() {\n    this.isDirty = true;\n    const action = 'change';\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged',\n          {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {\n      response: this.studentResponse,\n      attachments: this.attachments,\n    };\n    if (this.componentStateIdReplyingTo != null) {\n      studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n    }\n    componentState.studentData = studentData;\n    componentState.componentType = 'Discussion';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    if ((this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) || this.mode === 'authoring') {\n      componentState.id = this.UtilService.generateKey();\n    }\n    if (this.isSubmit) {\n      componentState.studentData.isSubmit = this.isSubmit;\n      this.isSubmit = false;\n      if (this.mode === 'authoring') {\n        if (this.StudentDataService.studentData == null) {\n          this.StudentDataService.studentData = {};\n          this.StudentDataService.studentData.componentStates = [];\n        }\n        this.StudentDataService.studentData.componentStates.push(componentState);\n        const componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        this.setClassResponses(componentStates);\n        this.clearComponentValues();\n        this.isDirty = false;\n      }\n    }\n    const deferred = this.$q.defer();\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  clearComponentValues() {\n    this.studentResponse = '';\n    this.newResponse = '';\n    this.attachments = [];\n    this.componentStateIdReplyingTo = null;\n  }\n\n  disableComponentIfNecessary() {\n    super.disableComponentIfNecessary();\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      for (let connectedComponent of this.componentContent.connectedComponents) {\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n    }\n  }\n\n  showSaveButton() {\n    return this.componentContent.showSaveButton;\n  }\n\n  showSubmitButton() {\n    return this.componentContent.showSubmitButton;\n  }\n\n  isClassmateResponsesGated() {\n    return this.componentContent.gateClassmateResponses;\n  }\n\n  setClassResponses(componentStates, annotations) {\n    this.classResponses = [];\n    for (let componentState of componentStates) {\n      if (componentState.studentData.isSubmit) {\n        const workgroupId = componentState.workgroupId;\n        const latestInappropriateFlagAnnotation =\n            this.getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, componentState.id);\n        const userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n        componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n        componentState.replies = [];\n        if (this.isGradingMode() || this.isGradingRevisionMode()) {\n          if (latestInappropriateFlagAnnotation != null) {\n            /*\n             * Set the inappropriate flag annotation into the component state. This is used for the\n             * grading tool to determine whether to show the 'Delete' button or the 'Undo Delete'\n             * button.\n             */\n            componentState.latestInappropriateFlagAnnotation = latestInappropriateFlagAnnotation;\n          }\n          this.classResponses.push(componentState);\n        } else if (this.isStudentMode()) {\n          if (latestInappropriateFlagAnnotation != null &&\n              latestInappropriateFlagAnnotation.data != null &&\n              latestInappropriateFlagAnnotation.data.action == 'Delete') {\n            // do not show this post because the teacher has deleted it\n          } else {\n            this.classResponses.push(componentState);\n          }\n        }\n      }\n    }\n    this.processResponses(this.classResponses);\n    this.retrievedClassmateResponses = true;\n  }\n\n  getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, studentWorkId) {\n    if (annotations != null) {\n      for (let annotation of annotations) {\n        if (studentWorkId == annotation.studentWorkId && annotation.type == 'inappropriateFlag') {\n          return annotation;\n        }\n      }\n    }\n    return null;\n  }\n\n  processResponses(componentStates) {\n    for (let componentState of componentStates) {\n      this.responsesMap[componentState.id] = componentState;\n    }\n    for (let componentState of componentStates) {\n      if (componentState && componentState.studentData) {\n        const studentData = componentState.studentData;\n        const componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n        if (componentStateIdReplyingTo) {\n          if (this.responsesMap[componentStateIdReplyingTo] &&\n            this.responsesMap[componentStateIdReplyingTo].replies) {\n            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n          }\n        }\n      }\n    }\n    this.topLevelResponses = this.getLevel1Responses();\n  }\n\n  addClassResponse(componentState) {\n    if (componentState.studentData.isSubmit) {\n      const workgroupId = componentState.workgroupId;\n      const userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n      if (userNames.length > 0) {\n        componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n      } else if (componentState.userNamesArray != null) {\n        componentState.userNames = componentState.userNamesArray\n            .map(function(obj) { return obj.name; }).join(', ');\n      }\n      componentState.replies = [];\n      this.classResponses.push(componentState);\n      this.responsesMap[componentState.id] = componentState;\n      const componentStateIdReplyingTo = componentState.studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo != null) {\n        if (this.responsesMap[componentStateIdReplyingTo] != null &&\n            this.responsesMap[componentStateIdReplyingTo].replies != null) {\n          this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n        }\n      }\n      this.topLevelResponses = this.getLevel1Responses();\n    }\n  }\n\n  getClassResponses() {\n    return this.classResponses;\n  }\n\n  /**\n   * Get the level 1 responses which are posts that are not a\n   * reply to another response.\n   * @return an array of responses that are not a reply to another\n   * response\n   */\n  getLevel1Responses() {\n    const level1Responses = [];\n    const classResponses = this.classResponses;\n    for (let classResponse of classResponses) {\n      const componentStateIdReplyingTo = classResponse.studentData.componentStateIdReplyingTo;\n      if (componentStateIdReplyingTo == null) {\n        /*\n         * this response was not a reply to another post so it is a\n         * level 1 response\n         */\n        level1Responses.push(classResponse);\n      }\n    }\n\n    return level1Responses;\n  }\n\n  /**\n   * The teacher has clicked the delete button to delete a post. We won't\n   * actually delete the student work, we'll just create an inappropriate\n   * flag annotation which prevents the students in the class from seeing\n   * the post.\n   * @param componentState the student component state the teacher wants to\n   * delete.\n   */\n  deletebuttonclicked(componentState) {\n    const toWorkgroupId = componentState.workgroupId;\n    const userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n    const periodId = userInfo.periodId;\n    const teacherUserInfo = this.ConfigService.getMyUserInfo();\n    const fromWorkgroupId = teacherUserInfo.workgroupId;\n    const runId = this.ConfigService.getRunId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const studentWorkId = componentState.id;\n    const data = {\n      action: 'Delete'\n    };\n    const annotation = this.AnnotationService.createInappropriateFlagAnnotation(\n        runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n    this.AnnotationService.saveAnnotation(annotation).then(() => {\n      const componentStates =\n          this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n      const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n      this.setClassResponses(componentStates, annotations);\n    });\n  }\n\n  /**\n   * The teacher has clicked the 'Undo Delete' button to undo a previous\n   * deletion of a post. This function will create an inappropriate flag\n   * annotation with the action set to 'Undo Delete'. This will make the\n   * post visible to the students.\n   * @param componentState the student component state the teacher wants to\n   * show again.\n   */\n  undodeletebuttonclicked(componentState) {\n    const toWorkgroupId = componentState.workgroupId;\n    const userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n    const periodId = userInfo.periodId;\n    const teacherUserInfo = this.ConfigService.getMyUserInfo();\n    const fromWorkgroupId = teacherUserInfo.workgroupId;\n    const runId = this.ConfigService.getRunId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const studentWorkId = componentState.id;\n    const data = {\n      action: 'Undo Delete'\n    };\n    const annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n    this.AnnotationService.saveAnnotation(annotation).then(() => {\n      const componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n      const annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n      this.setClassResponses(componentStates, annotations);\n    });\n  }\n\n  /**\n   * Get the inappropriate flag annotations for these component states\n   * @param componentStates an array of component states\n   * @return an array of inappropriate flag annotations that are associated\n   * with the component states\n   */\n  getInappropriateFlagAnnotationsByComponentStates(componentStates) {\n    const annotations = [];\n    if (componentStates != null) {\n      for (let componentState of componentStates) {\n        const latestInappropriateFlagAnnotation =\n            this.AnnotationService.getLatestAnnotationByStudentWorkIdAndType(\n                componentState.id, 'inappropriateFlag');\n        if (latestInappropriateFlagAnnotation != null) {\n          annotations.push(latestInappropriateFlagAnnotation);\n        }\n      }\n    }\n    return annotations;\n  }\n}\n\nDiscussionController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'DiscussionService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'StudentWebSocketService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}