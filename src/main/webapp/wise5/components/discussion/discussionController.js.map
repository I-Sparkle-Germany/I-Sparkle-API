{"version":3,"sources":["discussionController.es6"],"names":["DiscussionController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","DiscussionService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","StudentWebSocketService","UtilService","$mdMedia","studentResponse","newResponse","newAttachments","classResponses","topLevelResponses","submitText","responsesMap","isRichTextEnabled","retrievedClassmateResponses","latestAnnotations","originalComponentContent","workgroupId","nodeId","mode","isPreview","componentStates","hasConnectedComponent","componentContent","connectedComponent","connectedComponents","getComponentStatesByNodeIdAndComponentId","componentId","setClassResponses","getClassmateResponses","isClassmateResponsesGated","componentState","getLatestComponentAnnotations","disableComponentIfNecessary","getPostsAssociatedWithWorkgroupId","annotations","getInappropriateFlagAnnotationsByComponentStates","isDisabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isStudentAttachmentEnabled","$parent","nodeController","registerComponentController","submitbuttonclicked","response","replyText","componentStateId","id","discussionController","componentStateIdReplyingTo","isSubmit","isDirty","createComponentState","$emit","bind","getComponentState","deferred","defer","action","then","clearComponentValues","resolve","promise","$on","event","args","studentdatachanged","studentDataChanged","data","componentStateWorkgroupId","getWorkgroupId","addClassResponse","scope","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","statusbar","forced_root_block","setup","ed","on","e","$","target","editorContainer","addClass","parent","removeClass","$watch","md","mdScreen","$broadcast","studentWork","messageType","userNamesArray","getUserNamesByWorkgroupId","sendStudentToClassmatesInPeriodMessage","studentData","fromWorkgroupId","notificationType","userNames","map","obj","name","join","notificationMessage","$translate","workgroupsNotifiedSoFar","originalPostComponentState","toWorkgroupId","notification","createNewNotification","saveNotificationToServer","savedNotification","push","replies","r","length","reply","indexOf","runId","getRunId","periodId","getPeriodId","result","studentWorkList","createNewComponentState","attachments","componentType","generateKey","createComponentStateAdditionalProcessing","type","show","showSaveButton","showSubmitButton","gateClassmateResponses","attachment","splice","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","importWorkNodeId","importWorkComponentId","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","setStudentWork","c","latestInappropriateFlagAnnotation","getLatestInappropriateFlagAnnotationByStudentWorkId","processResponses","studentWorkId","a","annotation","i","getLevel1Responses","level1Responses","tempClassResponse","exitListener","userInfo","getUserInfoByWorkgroupId","teacherUserInfo","getMyUserInfo","createInappropriateFlagAnnotation","saveAnnotation","getLatestAnnotationByStudentWorkIdAndType","mergedComponentState","mergedResponse","$inject"],"mappings":"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","file":"discussionController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass DiscussionController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      DiscussionService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      StudentWebSocketService,\n      UtilService,\n      $mdMedia) {\n    super($filter, $mdDialog, $rootScope, $scope,\n      AnnotationService, ConfigService, NodeService,\n      NotebookService, ProjectService, StudentAssetService,\n      StudentDataService, UtilService);\n    this.$q = $q;\n    this.DiscussionService = DiscussionService;\n    this.NotificationService = NotificationService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.$mdMedia = $mdMedia;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds the text for a new response (not a reply)\n    this.newResponse = '';\n\n    // holds student attachments like assets\n    this.newAttachments = [];\n\n    // will hold the class responses\n    this.classResponses = [];\n\n    // will hold the top level responses\n    this.topLevelResponses = [];\n\n    // the text that is being submitted\n    this.submitText = null;\n\n    // map from component state id to response\n    this.responsesMap = {};\n\n    // whether rich text is enabled\n    this.isRichTextEnabled = false;\n\n    // whether we have retrieved the classmate responses\n    this.retrievedClassmateResponses = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n\n    if (this.$scope.workgroupId != null) {\n      this.workgroupId = this.$scope.workgroupId;\n    }\n\n    if (this.$scope.nodeId != null) {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    if (this.mode === 'student') {\n      if (this.ConfigService.isPreview()) {\n        let componentStates = null;\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // assume there can only be one connected component\n          let connectedComponent = this.componentContent.connectedComponents[0];\n          componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n            connectedComponent.nodeId, connectedComponent.componentId);\n        } else {\n          componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n            this.nodeId, this.componentId);\n        }\n        this.setClassResponses(componentStates);\n      } else {\n        // we are in regular student run mode\n\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // assume there can only be one connected component\n          let connectedComponent = this.componentContent.connectedComponents[0];\n          this.getClassmateResponses(connectedComponent.nodeId, connectedComponent.componentId);\n        } else {\n          if (this.isClassmateResponsesGated()) {\n            /*\n             * classmate responses are gated so we will not show them if the student\n             * has not submitted a response\n             */\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (componentState != null) {\n              /*\n               * the student has already submitted a response so we will\n               * display the classmate responses\n               */\n              this.getClassmateResponses();\n            }\n          } else {\n            // classmate responses are not gated so we will show them\n            this.getClassmateResponses();\n          }\n        }\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n\n      this.disableComponentIfNecessary();\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n\n      /*\n       * get all the posts that this workgroup id is part of. if the student\n       * posted a top level response we will get the top level response and\n       * all the replies. if the student replied to a top level response we\n       * will get the top level response and all the replies.\n       */\n      var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n      // get the innappropriate flag annotations for the component states\n      var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n      // show the posts\n      this.setClassResponses(componentStates, annotations);\n\n      this.isDisabled = true;\n\n      if (this.mode === 'grading') {\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * The submit button was clicked\n     * @param response the response object related to the submit button\n     */\n    this.$scope.submitbuttonclicked = function(response) {\n\n      if (response) {\n        // this submit button was clicked for a reply\n\n        if (response.replyText){\n          var componentState = response;\n\n          // get the component state id\n          var componentStateId = componentState.id;\n\n          /*\n           * remember the values in the controller so we can read\n           * from them later when the student data is saved\n           */\n          this.$scope.discussionController.studentResponse = componentState.replyText;\n          this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n          // clear the reply input\n          response.replyText = null;\n\n          this.$scope.discussionController.isSubmit = true;\n          this.$scope.discussionController.isDirty = true;\n        }\n      } else {\n        // the submit button was clicked for the new post\n\n        /*\n         * set the response from the top textarea into the\n         * studentResponse field that we will read from later\n         * when the student data is saved\n         */\n        this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n        this.$scope.discussionController.isSubmit = true;\n      }\n\n      if (this.mode === 'authoring') {\n        this.createComponentState('submit');\n      }\n\n      // tell the parent node that this component wants to submit\n      this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function() {\n      var deferred = this.$q.defer();\n\n      // check if the student work is dirty and the student clicked the submit button\n      if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n\n        var action = 'submit';\n\n        // create a component state populated with the student data\n        this.$scope.discussionController.createComponentState(action).then((componentState) => {\n          /*\n           * clear the component values so they aren't accidentally used again\n           * later\n           */\n          this.$scope.discussionController.clearComponentValues();\n\n          // set isDirty to false since this student work is about to be saved\n          this.$scope.discussionController.isDirty = false;\n\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n\n      // do nothing\n    });\n\n    this.$scope.studentdatachanged = function() {\n      this.$scope.discussionController.studentDataChanged();\n    };\n\n    /**\n     * We have recived a web socket message\n     */\n    this.$rootScope.$on('webSocketMessageRecieved', (event, args) => {\n      if (args != null) {\n        var data = args.data;\n\n        var componentState = data.data;\n\n        if (componentState != null) {\n\n          // check that the web socket message is for this step\n          if (componentState.nodeId === this.nodeId) {\n\n            // get the sender of the message\n            var componentStateWorkgroupId = componentState.workgroupId;\n\n            // get the workgroup id of the signed in student\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            /*\n             * check if the signed in student sent the message. if the\n             * signed in student sent the message we can ignore it.\n             */\n            if (workgroupId !== componentStateWorkgroupId) {\n\n              if (this.retrievedClassmateResponses) {\n                // display the classmate post\n                this.addClassResponse(componentState);\n              }\n            }\n          }\n        }\n      }\n    });\n\n    var scope = this;\n    var themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors?\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link autoresize',\n      toolbar: 'superscript subscript',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      statusbar: false,\n      forced_root_block: false,\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n      $scope.mdScreen = md;\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // check if the classmate responses are gated\n        if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n          /*\n           * the classmate responses are gated and we haven't retrieved\n           * them yet so we will obtain them now and show them since the student\n           * has just submitted a response. getting the classmate responses will\n           * also get the post the student just saved to the server.\n           */\n          this.getClassmateResponses();\n        } else {\n          /*\n           * the classmate responses are not gated or have already been retrieved\n           * which means they are already being displayed. we just need to add the\n           * new response in this case.\n           */\n\n          // add the component state to our collection of class responses\n          this.addClassResponse(componentState);\n        }\n\n        this.disableComponentIfNecessary();\n\n        // send the student post to web sockets so all the classmates receive it in real time\n        let messageType = 'studentData';\n        componentState.userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(componentState.workgroupId);\n\n        this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\n\n        // next, send notifications to students who have posted a response in the same thread as this post\n        let studentData = componentState.studentData;\n        if (studentData != null && this.responsesMap != null) {\n          let componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n          if (componentStateIdReplyingTo != null) {\n            // populate fields of the notification\n            let fromWorkgroupId = componentState.workgroupId;\n            let notificationType = 'DiscussionReply';\n            let nodeId = componentState.nodeId;\n            let componentId = componentState.componentId;\n            // add the user names to the component state so we can display next to the response\n            let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\n            let userNames = userNamesArray.map( (obj) => {\n              return obj.name;\n            }).join(', ');\n            let notificationMessage = this.$translate('discussion.repliedToADiscussionYouWereIn', { userNames: userNames });\n\n            let workgroupsNotifiedSoFar = [];  // keep track of workgroups we've already notified, in case a workgroup posts twice on a thread we only want to notify once.\n            // check if we have the component state that was replied to\n            if (this.responsesMap[componentStateIdReplyingTo] != null) {\n              let originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n              let toWorkgroupId = originalPostComponentState.workgroupId; // notify the workgroup who posted this reply\n              if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\n                let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                  let messageType = 'notification';\n                  this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                });\n                workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n              }\n\n              // also notify repliers to this thread, if any.\n              if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                let replies = this.responsesMap[componentStateIdReplyingTo].replies;\n\n                for (let r = 0; r < replies.length; r++) {\n                  let reply = replies[r];\n                  let toWorkgroupId = reply.workgroupId; // notify the workgroup who posted this reply\n                  if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId && workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\n                    let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                    this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                      let messageType = 'notification';\n                      this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                    });\n                    workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.isSubmit = null;\n    });\n  }\n\n  /**\n   * Get the classmate responses\n   */\n  getClassmateResponses(nodeId = this.nodeId, componentId = this.componentId) {\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n\n    // make the request for the classmate responses\n    this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\n\n      if (result != null) {\n        var componentStates = result.studentWorkList;\n\n        /*\n         * get the annotations in case there are any that have\n         * inappropriate flags\n         */\n        var annotations = result.annotations;\n\n        // set the classmate responses\n        this.setClassResponses(componentStates, annotations);\n      }\n    });\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      // populate the text the student previously typed\n      var studentData = componentState.studentData;\n    }\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    this.isSubmit = true;\n    this.disableComponentIfNecessary();\n    this.$scope.submitbuttonclicked();\n  };\n\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n      var studentData = {};\n\n      // set the response into the component state\n      studentData.response = this.studentResponse;\n\n      studentData.attachments = this.newAttachments;\n\n      if (this.componentStateIdReplyingTo != null) {\n        // if this step is replying, set the component state id replying to\n        studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n      }\n\n      componentState.studentData = studentData;\n\n      // set the component type\n      componentState.componentType = 'Discussion';\n\n      // set the node id\n      componentState.nodeId = this.nodeId;\n\n      // set the component id\n      componentState.componentId = this.componentId;\n\n      if ((this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) || this.mode === 'authoring') {\n        // create a dummy component state id if we're in preview mode and posting a new response\n        componentState.id = this.UtilService.generateKey();\n      }\n\n      if (this.isSubmit) {\n        // the student submitted this work\n        componentState.studentData.isSubmit = this.isSubmit;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n          if (this.StudentDataService.studentData == null) {\n            /*\n             * initialize the student data since this usually doesn't\n             * occur in the authoring mode\n             */\n            this.StudentDataService.studentData = {};\n            this.StudentDataService.studentData.componentStates = [];\n          }\n\n          // add the component state to the StudentDataService studentData\n          this.StudentDataService.studentData.componentStates.push(componentState);\n\n          // get the component states for this component\n          var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n          // set the component states into the component\n          this.setClassResponses(componentStates);\n\n          /*\n           * clear the input where the user has entered the text they\n           * are posting\n           */\n          this.clearComponentValues();\n          this.isDirty = false;\n        }\n      }\n    }\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Clear the component values so they aren't accidentally used again\n   */\n  clearComponentValues() {\n\n    // clear the student response\n    this.studentResponse = '';\n\n    // clear the new response input\n    this.newResponse = '';\n\n    // clear new attachments input\n    this.newAttachments = [];\n\n    // clear the component state id replying to\n    this.componentStateIdReplyingTo = null;\n  };\n\n  disableComponentIfNecessary() {\n    super.disableComponentIfNecessary();\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      for (let connectedComponent of this.componentContent.connectedComponents) {\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to show the save button\n   * @return whether to show the save button\n   */\n  showSaveButton() {\n    var show = false;\n\n    if (this.componentContent != null) {\n\n      // check the showSaveButton field in the component content\n      if (this.componentContent.showSaveButton) {\n        show = true;\n      }\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to show the submit button\n   * @return whether to show the submit button\n   */\n  showSubmitButton() {\n    var show = false;\n\n    if (this.componentContent != null) {\n\n      // check the showSubmitButton field in the component content\n      if (this.componentContent.showSubmitButton) {\n        show = true;\n      }\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to gate the classmate responses\n   * @return whether to gate the classmate responses\n   */\n  isClassmateResponsesGated() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the gateClassmateResponses field in the component content\n      if (this.componentContent.gateClassmateResponses) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.newAttachments.indexOf(attachment) != -1) {\n      this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.newAttachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var importWorkNodeId = componentContent.importWorkNodeId;\n      var importWorkComponentId = componentContent.importWorkComponentId;\n\n      if (importWorkNodeId != null && importWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Set the class responses into the controller\n   * @param componentStates the class component states\n   * @param annotations the inappropriate flag annotations\n   */\n  setClassResponses(componentStates, annotations) {\n\n    this.classResponses = [];\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n\n          // get the component state id\n          var id = componentState.id;\n\n          // get the workgroup id\n          var workgroupId = componentState.workgroupId;\n\n          // get the student data\n          var studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            if (componentState.studentData.isSubmit) {\n\n              // get the latest inappropriate flag for this compnent state\n              var latestInappropriateFlagAnnotation = this.getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, componentState.id);\n\n              // add the user names to the component state so we can display next to the response\n              let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n              componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n              // add a replies array to the component state that we will fill with component state replies later\n              componentState.replies = [];\n\n              if (this.mode == 'grading' || this.mode == 'gradingRevision') {\n\n                if (latestInappropriateFlagAnnotation != null) {\n                  /*\n                   * Set the inappropriate flag annotation into\n                   * the component state. This is used for the\n                   * grading tool to determine whether to show\n                   * the 'Delete' button or the 'Undo Delete'\n                   * button.\n                   */\n                  componentState.latestInappropriateFlagAnnotation = latestInappropriateFlagAnnotation;\n                }\n\n                // add the component state to our array\n                this.classResponses.push(componentState);\n              } else if (this.mode == 'student') {\n\n                if (latestInappropriateFlagAnnotation != null &&\n                  latestInappropriateFlagAnnotation.data != null &&\n                  latestInappropriateFlagAnnotation.data.action == 'Delete') {\n\n                  // do not show this post because the teacher has deleted it\n                } else {\n                  // add the component state to our array\n                  this.classResponses.push(componentState);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // process the class responses\n    this.processResponses(this.classResponses);\n\n    this.retrievedClassmateResponses = true;\n  };\n\n  /**\n   * Get the latest inappropriate flag annotation for a student work id\n   * @param annotations an array of annotations\n   * @param studentWorkId a student work id\n   * @return the latest inappropriate flag annotation for the given student\n   * work id\n   */\n  getLatestInappropriateFlagAnnotationByStudentWorkId(annotations, studentWorkId) {\n\n    if (annotations != null) {\n\n      // loop through all the annotations from newest to oldest\n      for (var a = annotations.length - 1; a >= 0; a--) {\n        var annotation = annotations[a];\n\n        if (annotation != null) {\n          if (studentWorkId == annotation.studentWorkId && annotation.type == 'inappropriateFlag') {\n            /*\n             * we have found an inappropriate flag annotation for\n             * the student work id we are looking for\n             */\n            return annotation;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process the class responses. This will put responses into the\n   * replies arrays.\n   * @param classResponses an array of component states\n   */\n  processResponses(componentStates) {\n\n    if (componentStates) {\n      var componentState;\n\n      // loop through all the component states\n      for (var i = 0; i < componentStates.length; i++) {\n        componentState = componentStates[i];\n\n        if (componentState) {\n          var componentStateId = componentState.id;\n\n          // set the component state into the map\n          this.responsesMap[componentStateId] = componentState;\n        }\n      }\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        componentState = componentStates[c];\n\n        if (componentState && componentState.studentData) {\n\n          // get the student data\n          var studentData = componentState.studentData;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo) {\n\n            if (this.responsesMap[componentStateIdReplyingTo] &&\n              this.responsesMap[componentStateIdReplyingTo].replies) {\n              /*\n               * add this component state to the replies array of the\n               * component state that was replied to\n               */\n              this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n            }\n          }\n        }\n      }\n\n      this.topLevelResponses = this.getLevel1Responses();\n    }\n  };\n\n  /**\n   * Add a class response to our model\n   * @param componentState the component state to add to our model\n   */\n  addClassResponse(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (componentState.studentData.isSubmit) {\n          // this component state is a submit, so we will add it\n\n          // get the workgroup id\n          var workgroupId = componentState.workgroupId;\n\n          // add the user names to the component state so we can display next to the response\n          let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n          if (userNames.length > 0) {\n            componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n          } else if (componentState.userNamesArray != null) {\n            componentState.userNames = componentState.userNamesArray\n                .map(function(obj) { return obj.name; }).join(', ');\n          }\n\n          // add a replies array to the component state that we will fill with component state replies later\n          componentState.replies = [];\n\n          // add the component state to our array of class responses\n          this.classResponses.push(componentState);\n\n          // get the component state id\n          var componentStateId = componentState.id;\n\n          // add the response to our map\n          this.responsesMap[componentStateId] = componentState;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo != null) {\n\n            // check if we have the component state that was replied to\n            if (this.responsesMap[componentStateIdReplyingTo] != null &&\n              this.responsesMap[componentStateIdReplyingTo].replies != null) {\n              /*\n               * add this response to the replies array of the response\n               * that was replied to\n               */\n              this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n            }\n          }\n\n          this.topLevelResponses = this.getLevel1Responses();\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the class responses\n   */\n  getClassResponses() {\n    return this.classResponses;\n  };\n\n  /**\n   * Get the level 1 responses which are posts that are not a\n   * reply to another response.\n   * @return an array of responses that are not a reply to another\n   * response\n   */\n  getLevel1Responses() {\n    var level1Responses = [];\n    var classResponses = this.classResponses;\n\n    if (classResponses != null) {\n\n      // loop through all the class responses\n      for (var r = 0; r < classResponses.length; r++) {\n        var tempClassResponse = classResponses[r];\n\n        if (tempClassResponse != null && tempClassResponse.studentData) {\n\n          // get the student data\n          var studentData = tempClassResponse.studentData;\n\n          // get the component state id replying to if any\n          var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n          if (componentStateIdReplyingTo == null) {\n            /*\n             * this response was not a reply to another post so it is a\n             * level 1 response\n             */\n            level1Responses.push(tempClassResponse);\n          }\n        }\n      }\n    }\n\n    return level1Responses;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', (event, args) => {\n      // do nothing\n      this.$rootScope.$broadcast('doneExiting');\n    });\n  };\n\n  /**\n   * The teacher has clicked the delete button to delete a post. We won't\n   * actually delete the student work, we'll just create an inappropriate\n   * flag annotation which prevents the students in the class from seeing\n   * the post.\n   * @param componentState the student component state the teacher wants to\n   * delete.\n   */\n  deletebuttonclicked(componentState) {\n\n    if (componentState != null) {\n\n      var toWorkgroupId = componentState.workgroupId;\n\n      var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n\n      var periodId = null;\n\n      if (userInfo != null) {\n        periodId = userInfo.periodId;\n      }\n\n      var teacherUserInfo = this.ConfigService.getMyUserInfo();\n\n      var fromWorkgroupId = null;\n\n      if (teacherUserInfo != null) {\n        fromWorkgroupId = teacherUserInfo.workgroupId;\n      }\n\n      var runId = this.ConfigService.getRunId();\n      var nodeId = this.nodeId;\n      var componentId = this.componentId;\n      var studentWorkId = componentState.id;\n      var data = {};\n      data.action = 'Delete';\n\n      // create the inappropriate flag 'Delete' annotation\n      var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n\n      // save the annotation to the server\n      this.AnnotationService.saveAnnotation(annotation).then(() => {\n\n        // get the component states made by the student\n        var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n        // get the annotations for the component states\n        var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n        // refresh the teacher view of the posts\n        this.setClassResponses(componentStates, annotations);\n      });\n    }\n  }\n\n  /**\n   * The teacher has clicked the 'Undo Delete' button to undo a previous\n   * deletion of a post. This function will create an inappropriate flag\n   * annotation with the action set to 'Undo Delete'. This will make the\n   * post visible to the students.\n   * @param componentState the student component state the teacher wants to\n   * show again.\n   */\n  undodeletebuttonclicked(componentState) {\n\n    if (componentState != null) {\n\n      var toWorkgroupId = componentState.workgroupId;\n\n      var userInfo = this.ConfigService.getUserInfoByWorkgroupId(toWorkgroupId);\n\n      var periodId = null;\n\n      if (userInfo != null) {\n        periodId = userInfo.periodId;\n      }\n\n      var teacherUserInfo = this.ConfigService.getMyUserInfo();\n\n      var fromWorkgroupId = null;\n\n      if (teacherUserInfo != null) {\n        fromWorkgroupId = teacherUserInfo.workgroupId;\n      }\n\n      var runId = this.ConfigService.getRunId();\n      var nodeId = this.nodeId;\n      var componentId = this.componentId;\n      var studentWorkId = componentState.id;\n      var data = {};\n      data.action = 'Undo Delete';\n\n      // create the inappropriate flag annotation\n      var annotation = this.AnnotationService.createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data);\n\n      // save the annotation to the server\n      this.AnnotationService.saveAnnotation(annotation).then(() => {\n\n        // get the component states made by the student\n        var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n        // get the annotations for the component states\n        var annotations = this.getInappropriateFlagAnnotationsByComponentStates(componentStates);\n\n        // refresh the teacher view of the posts\n        this.setClassResponses(componentStates, annotations);\n      });\n    }\n  }\n\n  /**\n   * Get the inappropriate flag annotations for these component states\n   * @param componentStates an array of component states\n   * @return an array of inappropriate flag annotations that are associated\n   * with the component states\n   */\n  getInappropriateFlagAnnotationsByComponentStates(componentStates) {\n    var annotations = [];\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n\n          /*\n           * get the latest inappropriate flag annotation for the\n           * component state\n           */\n          var latestInappropriateFlagAnnotation = this.AnnotationService.getLatestAnnotationByStudentWorkIdAndType(componentState.id, 'inappropriateFlag');\n\n          if (latestInappropriateFlagAnnotation != null) {\n            annotations.push(latestInappropriateFlagAnnotation);\n          }\n        }\n      }\n    }\n\n    return annotations;\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedResponse = '';\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            // get the student response\n            let response = studentData.response;\n\n            if (response != null && response != '') {\n              if (mergedResponse != '') {\n                // add a new line between the responses\n                mergedResponse += '\\n';\n              }\n\n              // append the response\n              mergedResponse += response;\n            }\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.response = mergedResponse;\n      }\n    }\n\n    return mergedComponentState;\n  }\n}\n\nDiscussionController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'DiscussionService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'StudentWebSocketService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}