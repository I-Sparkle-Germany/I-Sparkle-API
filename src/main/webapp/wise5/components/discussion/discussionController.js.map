{"version":3,"sources":["discussionController.es6"],"names":[],"mappings":"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","file":"discussionController.js","sourcesContent":["class DiscussionController {\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                DiscussionService,\n                NodeService,\n                NotificationService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService,\n                $mdMedia) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.DiscussionService = DiscussionService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.$mdMedia = $mdMedia;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds the text for a new response (not a reply)\n        this.newResponse = '';\n\n        // holds student attachments like assets\n        this.newAttachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the class responses\n        this.classResponses = [];\n\n        // will hold the top level responses\n        this.topLevelResponses = [];\n\n        // the text that is being submitted\n        this.submitText = null;\n\n        // map from component state id to response\n        this.responsesMap = {};\n\n        // whether rich text is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether we have retrieved the classmate responses\n        this.retrievedClassmateResponses = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.workgroupId = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.mode = this.$scope.mode;\n\n            if (this.$scope.workgroupId != null) {\n                this.workgroupId = this.$scope.workgroupId;\n            }\n\n            if (this.$scope.nodeId != null) {\n                this.nodeId = this.$scope.nodeId;\n            }\n\n            if (this.mode === 'student') {\n                if (this.ConfigService.isPreview()) {\n                    // we are in preview mode, so get all posts\n                    var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                    this.setClassResponses(componentStates);\n                } else {\n                    // we are in regular student run mode\n\n                    if (this.isClassmateResponsesGated()) {\n                        /*\n                         * classmate responses are gated so we will not show them if the student\n                         * has not submitted a response\n                         */\n\n                        // get the component state from the scope\n                        var componentState = this.$scope.componentState;\n\n                        if (componentState != null) {\n                            /*\n                             * the student has already submitted a response so we will\n                             * display the classmate responses\n                             */\n                            this.getClassmateResponses();\n                        }\n                    } else {\n                        // classmate responses are not gated so we will show them\n                        this.getClassmateResponses();\n                    }\n\n                    // get the latest annotations\n                    // TODO: watch for new annotations and update accordingly\n                    this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n            } else if (this.mode === 'grading') {\n\n                /*\n                 * get all the posts that this workgroup id is part of. if the student\n                 * posted a top level response we will get the top level response and\n                 * all the replies. if the student replied to a top level response we\n                 * will get the top level response and all the replies.\n                 */\n                var componentStates = this.DiscussionService.getPostsAssociatedWithWorkgroupId(this.componentId, this.workgroupId);\n\n                this.setClassResponses(componentStates);\n\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The submit button was clicked\n         * @param response the response object related to the submit button\n         */\n        this.$scope.submitbuttonclicked = function(response) {\n\n            if (response) {\n                // this submit button was clicked for a reply\n\n                if(response.replyText){\n                    var componentState = response;\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    /*\n                     * remember the values in the controller so we can read\n                     * from them later when the student data is saved\n                     */\n                    this.$scope.discussionController.studentResponse = componentState.replyText;\n                    this.$scope.discussionController.componentStateIdReplyingTo = componentStateId;\n\n                    // clear the reply input\n                    response.replyText = null;\n\n                    this.$scope.discussionController.isSubmit = true;\n                    this.$scope.discussionController.isDirty = true;\n                }\n            } else {\n                // the submit button was clicked for the new post\n\n                /*\n                 * set the response from the top textarea into the\n                 * studentResponse field that we will read from later\n                 * when the student data is saved\n                 */\n                this.$scope.discussionController.studentResponse = this.$scope.discussionController.newResponse;\n\n                this.$scope.discussionController.isSubmit = true;\n            }\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.$scope.discussionController.nodeId, componentId: this.$scope.discussionController.componentId});\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var deferred = this.$q.defer();\n\n            // check if the student work is dirty and the student clicked the submit button\n            if (this.$scope.discussionController.isDirty && this.$scope.discussionController.isSubmit) {\n\n                var action = 'submit';\n\n                // create a component state populated with the student data\n                this.$scope.discussionController.createComponentState(action).then((componentState) => {\n                    /*\n                     * clear the component values so they aren't accidentally used again\n                     * later\n                     */\n                    this.$scope.discussionController.clearComponentValues();\n\n                    // set isDirty to false since this student work is about to be saved\n                    this.$scope.discussionController.isDirty = false;\n\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', (event, args) => {\n\n            // do nothing\n        });\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // check if the classmate responses are gated\n                if (this.isClassmateResponsesGated() && !this.retrievedClassmateResponses) {\n                    /*\n                     * the classmate responses are gated and we haven't retrieved\n                     * them yet so we will obtain them now and show them since the student\n                     * has just submitted a response. getting the classmate responses will\n                     * also get the post the student just saved to the server.\n                     */\n                    this.getClassmateResponses();\n                } else {\n                    /*\n                     * the classmate responses are not gated or have already been retrieved\n                     * which means they are already being displayed. we just need to add the\n                     * new response in this case.\n                     */\n\n                    // add the component state to our collection of class responses\n                    this.addClassResponse(componentState);\n                }\n\n                this.submit();\n\n                // send the student post to web sockets so all the classmates receive it in real time\n                let messageType = \"studentData\";\n                this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, componentState);\n\n                // next, send notifications to students who have posted a response in the same thread as this post\n                let studentData = componentState.studentData;\n                if (studentData != null && this.responsesMap != null) {\n                    let componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n                    if (componentStateIdReplyingTo != null) {\n                        // populate fields of the notification\n                        let fromWorkgroupId = componentState.workgroupId;\n                        let notificationType = \"DiscussionReply\";\n                        let nodeId = componentState.nodeId;\n                        let componentId = componentState.componentId;\n                        // add the user names to the component state so we can display next to the response\n                        let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(fromWorkgroupId);\n                        let userNames = userNamesArray.map( (obj) => {\n                            return obj.name;\n                        }).join(', ');\n                        let notificationMessage = userNames + \" replied to a discussion you were in!\";\n\n                        let workgroupsNotifiedSoFar = [];  // keep track of workgroups we've already notified, in case a workgroup posts twice on a thread we only want to notify once.\n                        // check if we have the component state that was replied to\n                        if (this.responsesMap[componentStateIdReplyingTo] != null) {\n                            let originalPostComponentState = this.responsesMap[componentStateIdReplyingTo];\n                            let toWorkgroupId = originalPostComponentState.workgroupId; // notify the workgroup who posted this reply\n                            if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId) {\n                                let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                                this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                                    let messageType = \"notification\";\n                                    this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                                });\n                                workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                            }\n\n                            // also notify repliers to this thread, if any.\n                            if (this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                                let replies = this.responsesMap[componentStateIdReplyingTo].replies;\n\n                                for (let r = 0; r < replies.length; r++) {\n                                    let reply = replies[r];\n                                    let toWorkgroupId = reply.workgroupId; // notify the workgroup who posted this reply\n                                    if (toWorkgroupId != null && toWorkgroupId != fromWorkgroupId && workgroupsNotifiedSoFar.indexOf(toWorkgroupId) == -1) {\n                                        let notification = this.NotificationService.createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, notificationMessage);\n                                        this.NotificationService.saveNotificationToServer(notification).then((savedNotification) => {\n                                            let messageType = \"notification\";\n                                            this.StudentWebSocketService.sendStudentToClassmatesInPeriodMessage(messageType, savedNotification);\n                                        });\n                                        workgroupsNotifiedSoFar.push(toWorkgroupId);  // make sure we don't notify this workgroup again.\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.isSubmit = null;\n        });\n\n        this.$scope.studentdatachanged = function() {\n            this.$scope.discussionController.studentDataChanged();\n        };\n\n        /**\n         * We have recived a web socket message\n         */\n        this.$rootScope.$on('webSocketMessageRecieved', (event, args) => {\n            if (args != null) {\n                var data = args.data;\n\n                var componentState = data.data;\n\n                if (componentState != null) {\n\n                    // check that the web socket message is for this step\n                    if (componentState.nodeId === this.nodeId) {\n\n                        // get the sender of the message\n                        var componentStateWorkgroupId = componentState.workgroupId;\n\n                        // get the workgroup id of the signed in student\n                        var workgroupId = this.ConfigService.getWorkgroupId();\n\n                        /*\n                         * check if the signed in student sent the message. if the\n                         * signed in student sent the message we can ignore it.\n                         */\n                        if (workgroupId !== componentStateWorkgroupId) {\n\n                            if (this.retrievedClassmateResponses) {\n                                // display the classmate post\n                                this.addClassResponse(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        var scope = this;\n        var themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors?\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link autoresize',\n            toolbar: 'superscript subscript',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            statusbar: false,\n            forced_root_block: false,\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n            $scope.mdScreen = md;\n        });\n\n    }\n\n    /**\n     * Get the classmate responses\n     */\n    getClassmateResponses() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n\n        // make the request for the classmate responses\n        this.DiscussionService.getClassmateResponses(runId, periodId, nodeId, componentId).then((result) => {\n\n            if (result != null) {\n                var componentStates = result.studentWorkList;\n\n                // set the classmate responses\n                this.setClassResponses(componentStates);\n            }\n        });\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            // populate the text the student previously typed\n            var studentData = componentState.studentData;\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // handle the submit button click\n        this.$scope.submitbuttonclicked();\n    };\n\n    submit() {\n        if (this.isLockAfterSubmit()) {\n            // disable the component if it was authored to lock after submit\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // set the response into the component state\n            studentData.response = this.studentResponse;\n\n            studentData.attachments = this.newAttachments;\n\n            if (this.componentStateIdReplyingTo != null) {\n                // if this step is replying, set the component state id replying to\n                studentData.componentStateIdReplyingTo = this.componentStateIdReplyingTo;\n            }\n\n            componentState.studentData = studentData;\n\n            if (this.ConfigService.isPreview() && !this.componentStateIdReplyingTo) {\n                // create a dummy component state id if we're in preview mode and posting a new response\n                componentState.id = this.UtilService.generateKey();\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.studentData.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Clear the component values so they aren't accidentally used again\n     */\n    clearComponentValues() {\n\n        // clear the student response\n        this.studentResponse = '';\n\n        // clear the new response input\n        this.newResponse = '';\n\n        // clear new attachments input\n        this.newAttachments = [];\n\n        // clear the component state id replying to\n        this.componentStateIdReplyingTo = null;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     * @return whether to lock the component after the student submits\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to gate the classmate responses\n     * @return whether to gate the classmate responses\n     */\n    isClassmateResponsesGated() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the gateClassmateResponses field in the component content\n            if (this.componentContent.gateClassmateResponses) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.newAttachments.indexOf(attachment) != -1) {\n            this.newAttachments.splice(this.newAttachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.newAttachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DiscussionService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Set the class responses into the controller\n     * @param componentStates the class component states\n     */\n    setClassResponses(componentStates) {\n\n        this.classResponses = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    // get the component state id\n                    var id = componentState.id;\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        if (componentState.studentData.isSubmit) {\n\n                            // add the user names to the component state so we can display next to the response\n                            let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n                            componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n                            // add a replies array to the component state that we will fill with component state replies later\n                            componentState.replies = [];\n\n                            // add the component state to our array\n                            this.classResponses.push(componentState);\n                        }\n                    }\n                }\n            }\n        }\n\n        // process the class responses\n        this.processResponses(this.classResponses);\n\n        this.retrievedClassmateResponses = true;\n    };\n\n    /**\n     * Process the class responses. This will put responses into the\n     * replies arrays.\n     * @param classResponses an array of component states\n     */\n    processResponses(componentStates) {\n\n        if (componentStates) {\n            var componentState;\n\n            // loop through all the component states\n            for (var i = 0; i < componentStates.length; i++) {\n                componentState = componentStates[i];\n\n                if (componentState) {\n                    var componentStateId = componentState.id;\n\n                    // set the component state into the map\n                    this.responsesMap[componentStateId] = componentState;\n                }\n            }\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                componentState = componentStates[c];\n\n                if (componentState && componentState.studentData) {\n\n                    // get the student data\n                    var studentData = componentState.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo) {\n\n                        if (this.responsesMap[componentStateIdReplyingTo] &&\n                            this.responsesMap[componentStateIdReplyingTo].replies) {\n                            /*\n                             * add this component state to the replies array of the\n                             * component state that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n                }\n            }\n\n            this.topLevelResponses = this.getLevel1Responses();\n        }\n    };\n\n    /**\n     * Add a class response to our model\n     * @param componentState the component state to add to our model\n     */\n    addClassResponse(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (componentState.studentData.isSubmit) {\n                    // this component state is a submit, so we will add it\n\n                    // get the workgroup id\n                    var workgroupId = componentState.workgroupId;\n\n                    // add the user names to the component state so we can display next to the response\n                    let userNames = this.ConfigService.getUserNamesByWorkgroupId(workgroupId);\n                    componentState.userNames = userNames.map(function(obj) { return obj.name; }).join(', ');\n\n                    // add a replies array to the component state that we will fill with component state replies later\n                    componentState.replies = [];\n\n                    // add the component state to our array of class responses\n                    this.classResponses.push(componentState);\n\n                    // get the component state id\n                    var componentStateId = componentState.id;\n\n                    // add the response to our map\n                    this.responsesMap[componentStateId] = componentState;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo != null) {\n\n                        // check if we have the component state that was replied to\n                        if (this.responsesMap[componentStateIdReplyingTo] != null &&\n                            this.responsesMap[componentStateIdReplyingTo].replies != null) {\n                            /*\n                             * add this response to the replies array of the response\n                             * that was replied to\n                             */\n                            this.responsesMap[componentStateIdReplyingTo].replies.push(componentState);\n                        }\n                    }\n\n                    this.topLevelResponses = this.getLevel1Responses();\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the class responses\n     */\n    getClassResponses() {\n        return this.classResponses;\n    };\n\n    /**\n     * Get the level 1 responses which are posts that are not a\n     * reply to another response.\n     * @return an array of responses that are not a reply to another\n     * response\n     */\n    getLevel1Responses() {\n        var level1Responses = [];\n        var classResponses = this.classResponses;\n\n        if (classResponses != null) {\n\n            // loop through all the class responses\n            for (var r = 0; r < classResponses.length; r++) {\n                var tempClassResponse = classResponses[r];\n\n                if (tempClassResponse != null && tempClassResponse.studentData) {\n\n                    // get the student data\n                    var studentData = tempClassResponse.studentData;\n\n                    // get the component state id replying to if any\n                    var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                    if (componentStateIdReplyingTo == null) {\n                        /*\n                         * this response was not a reply to another post so it is a\n                         * level 1 response\n                         */\n                        level1Responses.push(tempClassResponse);\n                    }\n                }\n            }\n        }\n\n        return level1Responses;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        });\n    };\n}\n\nDiscussionController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'DiscussionService',\n    'NodeService',\n    'NotificationService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default DiscussionController;\n"]}