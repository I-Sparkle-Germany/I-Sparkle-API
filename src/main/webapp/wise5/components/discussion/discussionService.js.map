{"version":3,"sources":["discussionService.es6"],"names":["DiscussionService","$filter","$http","$rootScope","$q","$injector","ConfigService","StudentDataService","UtilService","getMode","TeacherDataService","get","$translate","component","type","prompt","isStudentAttachmentEnabled","gateClassmateResponses","componentStateFromOtherComponent","otherComponentType","componentState","createComponentState","studentData","runId","periodId","nodeId","componentId","angular","bind","resolve","reject","httpParams","method","url","getConfigParam","params","getStudentWork","getAnnotations","then","result","classmateData","data","componentStates","componentEvents","nodeEvents","c","length","response","workgroupId","allPosts","topLevelComponentIdsFound","getComponentStatesByWorkgroupIdAndComponentId","componentStateIdReplyingTo","indexOf","id","concat","getPostAndAllReplies","push","componentStateId","postAndAllReplies","componentStatesForNodeId","getComponentStatesByComponentId","tempComponentState","componentContent","starterSentence","$inject"],"mappings":"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","file":"discussionService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass DiscussionService extends ComponentService {\n  constructor($filter,\n      $http,\n      $rootScope,\n      $q,\n      $injector,\n      ConfigService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$http = $http;\n    this.$rootScope = $rootScope;\n    this.$q = $q;\n    this.$injector = $injector;\n    this.ConfigService = ConfigService;\n    if (this.ConfigService != null && this.ConfigService.getMode() == 'classroomMonitor') {\n      // in the classroom monitor, we need access to the TeacherDataService so it can retrieve posts and replies for all students\n      this.TeacherDataService = this.$injector.get('TeacherDataService');\n    }\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('discussion.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Discussion';\n    component.prompt = this.$translate('ENTER_PROMPT_HERE');\n    component.isStudentAttachmentEnabled = true;\n    component.gateClassmateResponses = true;\n    return component;\n  }\n\n  populateComponentState(componentStateFromOtherComponent, otherComponentType) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null && otherComponentType != null) {\n      componentState = StudentDataService.createComponentState();\n\n      if (otherComponentType === 'OpenResponse') {\n        componentState.studentData = componentStateFromOtherComponent.studentData;\n      }\n    }\n\n    return componentState;\n  };\n\n  getClassmateResponses(runId, periodId, nodeId, componentId) {\n\n    if (runId != null && periodId != null && nodeId != null && componentId != null) {\n      return this.$q(angular.bind(this, function(resolve, reject) {\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n\n        var params = {};\n        params.runId = runId;\n        params.periodId = periodId;\n        params.nodeId = nodeId;\n        params.componentId = componentId;\n        params.getStudentWork = true;\n        params.getAnnotations = true;\n        httpParams.params = params;\n\n        this.$http(httpParams).then(angular.bind(this, function(result) {\n          var classmateData = result.data;\n\n          //console.log(classmateData);\n\n          resolve(classmateData);\n        }));\n      }));\n    }\n  };\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents) {\n    var result = false;\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        // the component state\n        var componentState = componentStates[c];\n\n        // get the student data from the component state\n        var studentData = componentState.studentData;\n\n        if (studentData != null) {\n          var response = studentData.response;\n\n          if (response != null) {\n            // there is a response so the component is completed\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get all the posts associated with a workgroup id. This will\n   * get all the posts and replies that the workgroup posted\n   * or replied to as well as all the other replies classmates made.\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @returns an array containing all the component states for\n   * top level posts and replies that are associated with the\n   * workgroup\n   */\n  getPostsAssociatedWithWorkgroupId(componentId, workgroupId) {\n    var allPosts = [];\n\n    var topLevelComponentIdsFound = [];\n\n    // get all the component states for the workgroup id\n    var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId);\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n          var studentData = componentState.studentData;\n\n          if (studentData != null) {\n            if (studentData.componentStateIdReplyingTo == null) {\n\n              // check if we have already added the top level post\n              if (topLevelComponentIdsFound.indexOf(componentState.id) == -1) {\n                // we haven't found the top level post yet so\n\n                /*\n                 * the component state is a top level post so we will\n                 * get the post and all the replies to the post\n                 */\n                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, componentState.id));\n\n                topLevelComponentIdsFound.push(componentState.id);\n              }\n            } else {\n\n              // check if we have already added the top level post\n              if (topLevelComponentIdsFound.indexOf(studentData.componentStateIdReplyingTo) == -1) {\n                // we haven't found the top level post yet so\n\n                /*\n                 * the component state is a reply so we will get the\n                 * top level post and all the replies to it\n                 */\n                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, studentData.componentStateIdReplyingTo));\n\n                topLevelComponentIdsFound.push(studentData.componentStateIdReplyingTo);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return allPosts;\n  }\n\n  /**\n   * Get the top level post and all the replies to it\n   * @param componentId the component id\n   * @param componentStateId the component state id\n   * @returns an array containing the top level post and all the replies\n   */\n  getPostAndAllReplies(componentId, componentStateId) {\n    var postAndAllReplies = [];\n\n    // get all the component states for the node\n    var componentStatesForNodeId = this.TeacherDataService.getComponentStatesByComponentId(componentId);\n\n    for (var c = 0; c < componentStatesForNodeId.length; c++) {\n      var tempComponentState = componentStatesForNodeId[c];\n\n      if (tempComponentState != null) {\n        if (componentStateId === tempComponentState.id) {\n          // we have found the top level post\n          postAndAllReplies.push(tempComponentState);\n        } else {\n          // check if the component state is a reply to the post we are looking for\n          var studentData = tempComponentState.studentData;\n\n          if (studentData != null) {\n            var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n            if (componentStateIdReplyingTo != null) {\n              if (componentStateId === componentStateIdReplyingTo) {\n                // this is a reply to the post we are looking for\n                postAndAllReplies.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return postAndAllReplies;\n  };\n\n  componentUsesSaveButton() {\n    return false;\n  }\n\n  componentUsesSubmitButton() {\n    return false;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the response from the student data\n        let response = studentData.response;\n\n        if (componentContent == null) {\n          // the component content was not provided\n\n          if (response != null && response !== '') {\n            // the student has work\n            return true;\n          }\n        } else {\n          // the component content was provided\n\n          let starterSentence = componentContent.starterSentence;\n\n          if (starterSentence == null || starterSentence === '') {\n            // there is no starter sentence\n\n            if (response != null && response !== '') {\n              // the student has work\n              return true;\n            }\n          } else {\n            /*\n             * there is a starter sentence so we will compare it\n             * with the student response\n             */\n\n            if (response != null && response !== '' && response !== starterSentence) {\n              /*\n               * the student has a response that is different than\n               * the starter sentence\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nDiscussionService.$inject = [\n  '$filter',\n  '$http',\n  '$rootScope',\n  '$q',\n  '$injector',\n  'ConfigService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default DiscussionService;\n"]}