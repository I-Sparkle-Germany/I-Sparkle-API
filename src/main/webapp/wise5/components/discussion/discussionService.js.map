{"version":3,"sources":["discussionService.es6"],"names":[],"mappings":"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","file":"discussionService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DiscussionService extends NodeService {\n    constructor($http,\n                $q,\n                ConfigService,\n                TeacherDataService) {\n        super();\n\n        this.$http = $http;\n        this.$q = $q;\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n    }\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'wordCountCompare') {\n            result = this.wordCountCompare(functionParams);\n        }\n\n        return result;\n    };\n\n    wordCountCompare(params) {\n        var result = false;\n\n        if (params != null) {\n            var operator = params.operator;\n            var count = params.count;\n            var nodeVisits = params.nodeVisits;\n\n            var latestNodeState = this.getLatestNodeState(nodeVisits);\n\n            var wordCount = 0;\n\n            if (latestNodeState != null) {\n                var response = latestNodeState.studentData;\n\n                if (response != null) {\n                    wordCount = this.getWordCount(response);\n\n                    if (operator === '<') {\n                        if (wordCount < count) {\n                            result = true;\n                        }\n                    } else if (operator === '>=') {\n                        if (wordCount >= count) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getWordCount(response) {\n        var wordCount = 0;\n\n        if (response != null) {\n            var regex = /\\s+/gi;\n            wordCount = response.trim().replace(regex, ' ').split(' ').length;\n        }\n\n        return wordCount;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.studentData;\n\n            if (response != null) {\n                studentWorkAsHTML = '<p>' + response + '</p>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    populateComponentState(componentStateFromOtherComponent, otherComponentType) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null && otherComponentType != null) {\n            componentState = StudentDataService.createComponentState();\n\n            if (otherComponentType === 'OpenResponse') {\n                componentState.studentData = componentStateFromOtherComponent.studentData;\n            }\n        }\n\n        return componentState;\n    };\n\n    getClassmateResponses(runId, periodId, nodeId, componentId) {\n\n        if (runId != null && periodId != null && nodeId != null && componentId != null) {\n            return this.$q(angular.bind(this, function(resolve, reject) {\n\n                var httpParams = {};\n                httpParams.method = 'GET';\n                httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n\n                var params = {};\n                params.runId = runId;\n                params.periodId = periodId;\n                params.nodeId = nodeId;\n                params.componentId = componentId;\n                params.getStudentWork = true;\n                httpParams.params = params;\n\n                this.$http(httpParams).then(angular.bind(this, function(result) {\n                    var classmateData = result.data;\n\n                    //console.log(classmateData);\n\n                    resolve(classmateData);\n                }));\n            }));\n        }\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var response = studentData.response;\n\n                    if (response != null) {\n                        // there is a response so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get all the posts associated with a workgroup id. This will\n     * get all the posts and replies that the workgroup posted\n     * or replied to as well as all the other replies classmates made.\n     * @param componentId the component id\n     * @param workgroupId the workgroup id\n     * @returns an array containing all the component states for\n     * top level posts and replies that are associated with the\n     * workgroup\n     */\n    getPostsAssociatedWithWorkgroupId(componentId, workgroupId) {\n        var allPosts = [];\n\n        var topLevelComponentIdsFound = [];\n\n        // get all the component states for the workgroup id\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n                        if (studentData.componentStateIdReplyingTo == null) {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(componentState.id) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a top level post so we will\n                                 * get the post and all the replies to the post\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, componentState.id));\n\n                                topLevelComponentIdsFound.push(componentState.id);\n                            }\n                        } else {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(studentData.componentStateIdReplyingTo) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a reply so we will get the\n                                 * top level post and all the replies to it\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, studentData.componentStateIdReplyingTo));\n\n                                topLevelComponentIdsFound.push(studentData.componentStateIdReplyingTo);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return allPosts;\n    }\n\n    /**\n     * Get the top level post and all the replies to it\n     * @param componentId the component id\n     * @param componentStateId the component state id\n     * @returns an array containing the top level post and all the replies\n     */\n    getPostAndAllReplies(componentId, componentStateId) {\n        var postAndAllReplies = [];\n\n        // get all the component states for the node\n        var componentStatesForNodeId = this.TeacherDataService.getComponentStatesByComponentId(componentId);\n\n        for (var c = 0; c < componentStatesForNodeId.length; c++) {\n            var tempComponentState = componentStatesForNodeId[c];\n\n            if (tempComponentState != null) {\n                if (componentStateId === tempComponentState.id) {\n                    // we have found the top level post\n                    postAndAllReplies.push(tempComponentState);\n                } else {\n                    // check if the component state is a reply to the post we are looking for\n                    var studentData = tempComponentState.studentData;\n\n                    if (studentData != null) {\n                        var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                        if (componentStateIdReplyingTo != null) {\n                            if (componentStateId === componentStateIdReplyingTo) {\n                                // this is a reply to the post we are looking for\n                                postAndAllReplies.push(tempComponentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return postAndAllReplies;\n    };\n}\n\nDiscussionService.$inject = [\n    '$http',\n    '$q',\n    'ConfigService',\n    'TeacherDataService'\n];\n\nexport default DiscussionService;"]}