{"version":3,"sources":["discussionService.es6"],"names":["DiscussionService","$filter","$http","$rootScope","$q","$injector","ConfigService","StudentDataService","UtilService","getMode","TeacherDataService","get","$translate","component","type","prompt","isStudentAttachmentEnabled","gateClassmateResponses","runId","periodId","components","resolve","reject","params","getStudentWork","getAnnotations","httpParams","method","url","getConfigParam","then","result","data","componentStates","componentEvents","nodeEvents","hasShowWorkConnectedComponentThatHasWork","hasNodeEnteredEvent","componentState","studentData","response","componentContent","connectedComponents","connectedComponent","getComponentStatesByNodeIdAndComponentId","nodeId","componentId","length","nodeEvent","event","workgroupId","getComponentStatesByWorkgroupIdAndComponentId","componentIds","allPosts","topLevelComponentStateIdsFound","getComponentStatesByWorkgroupIdAndComponentIds","componentStateIdReplyingTo","isTopLevelPost","isTopLevelComponentStateIdFound","id","concat","getPostAndAllRepliesByComponentIds","push","componentStateId","indexOf","postAndAllReplies","componentStatesForComponentIds","getComponentStatesByComponentIds","isStudentWorkHasAttachment","isComponentHasStarterSentence","isStudentWorkHasText","isStudentResponseDifferentFromStarterSentence","starterSentence","attachments","ComponentService","$inject"],"mappings":"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","file":"discussionService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass DiscussionService extends ComponentService {\n  constructor($filter,\n      $http,\n      $rootScope,\n      $q,\n      $injector,\n      ConfigService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$http = $http;\n    this.$rootScope = $rootScope;\n    this.$q = $q;\n    this.$injector = $injector;\n    this.ConfigService = ConfigService;\n    if (this.ConfigService.getMode() === 'classroomMonitor') {\n      /*\n       * In the Classroom Monitor, we need access to the TeacherDataService so we can retrieve posts\n       * for all students.\n       */\n      this.TeacherDataService = this.$injector.get('TeacherDataService');\n    }\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('discussion.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Discussion';\n    component.prompt = this.$translate('ENTER_PROMPT_HERE');\n    component.isStudentAttachmentEnabled = true;\n    component.gateClassmateResponses = true;\n    return component;\n  }\n\n  getClassmateResponses(runId, periodId, components) {\n    return this.$q((resolve, reject) => {\n      const params = {\n        runId: runId,\n        periodId: periodId,\n        components: components,\n        getStudentWork: true,\n        getAnnotations: true\n      };\n      const httpParams = {\n        method: 'GET',\n        url: this.ConfigService.getConfigParam('studentDataURL'),\n        params: params\n      };\n      this.$http(httpParams).then((result) => {\n        resolve(result.data);\n      });\n    });\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents) {\n    if (this.hasShowWorkConnectedComponentThatHasWork(component)) {\n      if (this.hasNodeEnteredEvent(nodeEvents)) {\n        return true;\n      }\n    } else {\n      for (let componentState of componentStates) {\n        if (componentState.studentData.response != null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  hasShowWorkConnectedComponentThatHasWork(componentContent) {\n    const connectedComponents = componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      for (let connectedComponent of connectedComponents) {\n        if (connectedComponent.type === 'showWork') {\n          const componentStates =\n              this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n              connectedComponent.nodeId, connectedComponent.componentId);\n          if (componentStates.length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  hasNodeEnteredEvent(nodeEvents) {\n    for (let nodeEvent of nodeEvents) {\n      if (nodeEvent.event === 'nodeEntered') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  workgroupHasWorkForComponent(workgroupId, componentId) {\n    return this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId,\n        componentId).length > 0;\n  }\n\n  getPostsAssociatedWithComponentIdsAndWorkgroupId(componentIds, workgroupId) {\n    let allPosts = [];\n    const topLevelComponentStateIdsFound = [];\n    const componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentIds(\n        workgroupId, componentIds);\n    for (let componentState of componentStates) {\n      const componentStateIdReplyingTo = componentState.studentData.componentStateIdReplyingTo;\n      if (this.isTopLevelPost(componentState)) {\n        if (!this.isTopLevelComponentStateIdFound(topLevelComponentStateIdsFound, componentState.id)) {\n          allPosts = allPosts.concat(this.getPostAndAllRepliesByComponentIds(componentIds, componentState.id));\n          topLevelComponentStateIdsFound.push(componentState.id);\n        }\n      } else {\n        if (!this.isTopLevelComponentStateIdFound(topLevelComponentStateIdsFound, componentStateIdReplyingTo)) {\n          allPosts = allPosts.concat(this.getPostAndAllRepliesByComponentIds(componentIds, componentStateIdReplyingTo));\n          topLevelComponentStateIdsFound.push(componentStateIdReplyingTo);\n        }\n      }\n    }\n    return allPosts;\n  }\n\n  isTopLevelPost(componentState) {\n    return componentState.studentData.componentStateIdReplyingTo == null;\n  }\n\n  isTopLevelComponentStateIdFound(topLevelComponentStateIdsFound, componentStateId) {\n    return topLevelComponentStateIdsFound.indexOf(componentStateId) !== -1;\n  }\n\n  getPostAndAllRepliesByComponentIds(componentIds, componentStateId) {\n    const postAndAllReplies = [];\n    const componentStatesForComponentIds = this.TeacherDataService.getComponentStatesByComponentIds(componentIds);\n    for (let componentState of componentStatesForComponentIds) {\n      if (componentStateId === componentState.id) {\n        postAndAllReplies.push(componentState);\n      } else {\n        const componentStateIdReplyingTo = componentState.studentData.componentStateIdReplyingTo;\n        if (componentStateId === componentStateIdReplyingTo) {\n          postAndAllReplies.push(componentState);\n        }\n      }\n    }\n    return postAndAllReplies;\n  }\n\n  componentUsesSaveButton() {\n    return false;\n  }\n\n  componentUsesSubmitButton() {\n    return false;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (this.isStudentWorkHasAttachment(componentState)) {\n      return true;\n    }\n    if (this.isComponentHasStarterSentence(componentContent)) {\n      return this.isStudentWorkHasText(componentState) &&\n          this.isStudentResponseDifferentFromStarterSentence(componentState, componentContent);\n    } else {\n      return this.isStudentWorkHasText(componentState);\n    }\n  }\n\n  isComponentHasStarterSentence(componentContent) {\n    const starterSentence = componentContent.starterSentence;\n    return starterSentence != null && starterSentence !== '';\n  }\n\n  isStudentResponseDifferentFromStarterSentence(componentState, componentContent) {\n    const response = componentState.studentData.response;\n    const starterSentence = componentContent.starterSentence;\n    return response !== starterSentence;\n  }\n\n  isStudentWorkHasText(componentState) {\n    const response = componentState.studentData.response;\n    return response != null && response !== '';\n  }\n\n  isStudentWorkHasAttachment(componentState) {\n    const attachments = componentState.studentData.attachments;\n    return attachments != null && attachments.length > 0;\n  }\n}\n\nDiscussionService.$inject = [\n  '$filter',\n  '$http',\n  '$rootScope',\n  '$q',\n  '$injector',\n  'ConfigService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default DiscussionService;\n"]}