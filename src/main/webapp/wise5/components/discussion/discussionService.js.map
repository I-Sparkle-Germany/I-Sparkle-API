{"version":3,"sources":["discussionService.es6"],"names":["DiscussionService","$filter","$http","$rootScope","$q","$injector","ConfigService","StudentDataService","UtilService","$translate","getMode","TeacherDataService","get","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","isStudentAttachmentEnabled","gateClassmateResponses","componentToCopy","createComponent","componentStateFromOtherComponent","otherComponentType","componentState","createComponentState","studentData","runId","periodId","nodeId","componentId","angular","bind","resolve","reject","httpParams","method","url","getConfigParam","params","getStudentWork","getAnnotations","then","result","classmateData","data","componentStates","componentEvents","nodeEvents","c","length","response","workgroupId","allPosts","topLevelComponentIdsFound","getComponentStatesByWorkgroupIdAndComponentId","componentStateIdReplyingTo","indexOf","concat","getPostAndAllReplies","push","componentStateId","postAndAllReplies","componentStatesForNodeId","getComponentStatesByComponentId","tempComponentState","$inject"],"mappings":"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","file":"discussionService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DiscussionService extends NodeService {\n    constructor($filter,\n                $http,\n                $rootScope,\n                $q,\n                $injector,\n                ConfigService,\n                StudentDataService,\n                UtilService) {\n        super();\n\n        this.$filter = $filter;\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.$q = $q;\n        this.$injector = $injector;\n        this.ConfigService = ConfigService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        if (this.ConfigService != null && this.ConfigService.getMode() == \"classroomMonitor\") {\n            // in the classroom monitor, we need access to the TeacherDataService so it can retrieve posts and replies for all students\n            this.TeacherDataService = this.$injector.get('TeacherDataService');\n        }\n    }\n\n    /**\n     * Create a Discussion component object\n     * @returns a new Discussion component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Discussion';\n        component.prompt = this.$translate('ENTER_PROMPT_HERE');\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.isStudentAttachmentEnabled = true;\n        component.gateClassmateResponses = true;\n        return component;\n    }\n\n    /**\n     * Copies an existing Discussion component object\n     * @returns a copied Discussion component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        component.gateClassmateResponses = componentToCopy.gateClassmateResponses;\n        return component;\n    }\n\n    populateComponentState(componentStateFromOtherComponent, otherComponentType) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null && otherComponentType != null) {\n            componentState = StudentDataService.createComponentState();\n\n            if (otherComponentType === 'OpenResponse') {\n                componentState.studentData = componentStateFromOtherComponent.studentData;\n            }\n        }\n\n        return componentState;\n    };\n\n    getClassmateResponses(runId, periodId, nodeId, componentId) {\n\n        if (runId != null && periodId != null && nodeId != null && componentId != null) {\n            return this.$q(angular.bind(this, function(resolve, reject) {\n\n                var httpParams = {};\n                httpParams.method = 'GET';\n                httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n\n                var params = {};\n                params.runId = runId;\n                params.periodId = periodId;\n                params.nodeId = nodeId;\n                params.componentId = componentId;\n                params.getStudentWork = true;\n                params.getAnnotations = true;\n                httpParams.params = params;\n\n                this.$http(httpParams).then(angular.bind(this, function(result) {\n                    var classmateData = result.data;\n\n                    //console.log(classmateData);\n\n                    resolve(classmateData);\n                }));\n            }));\n        }\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var response = studentData.response;\n\n                    if (response != null) {\n                        // there is a response so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get all the posts associated with a workgroup id. This will\n     * get all the posts and replies that the workgroup posted\n     * or replied to as well as all the other replies classmates made.\n     * @param componentId the component id\n     * @param workgroupId the workgroup id\n     * @returns an array containing all the component states for\n     * top level posts and replies that are associated with the\n     * workgroup\n     */\n    getPostsAssociatedWithWorkgroupId(componentId, workgroupId) {\n        var allPosts = [];\n\n        var topLevelComponentIdsFound = [];\n\n        // get all the component states for the workgroup id\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n                        if (studentData.componentStateIdReplyingTo == null) {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(componentState.id) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a top level post so we will\n                                 * get the post and all the replies to the post\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, componentState.id));\n\n                                topLevelComponentIdsFound.push(componentState.id);\n                            }\n                        } else {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(studentData.componentStateIdReplyingTo) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a reply so we will get the\n                                 * top level post and all the replies to it\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, studentData.componentStateIdReplyingTo));\n\n                                topLevelComponentIdsFound.push(studentData.componentStateIdReplyingTo);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return allPosts;\n    }\n\n    /**\n     * Get the top level post and all the replies to it\n     * @param componentId the component id\n     * @param componentStateId the component state id\n     * @returns an array containing the top level post and all the replies\n     */\n    getPostAndAllReplies(componentId, componentStateId) {\n        var postAndAllReplies = [];\n\n        // get all the component states for the node\n        var componentStatesForNodeId = this.TeacherDataService.getComponentStatesByComponentId(componentId);\n\n        for (var c = 0; c < componentStatesForNodeId.length; c++) {\n            var tempComponentState = componentStatesForNodeId[c];\n\n            if (tempComponentState != null) {\n                if (componentStateId === tempComponentState.id) {\n                    // we have found the top level post\n                    postAndAllReplies.push(tempComponentState);\n                } else {\n                    // check if the component state is a reply to the post we are looking for\n                    var studentData = tempComponentState.studentData;\n\n                    if (studentData != null) {\n                        var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                        if (componentStateIdReplyingTo != null) {\n                            if (componentStateId === componentStateIdReplyingTo) {\n                                // this is a reply to the post we are looking for\n                                postAndAllReplies.push(tempComponentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return postAndAllReplies;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return false;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return false;\n    }\n}\n\nDiscussionService.$inject = [\n    '$filter',\n    '$http',\n    '$rootScope',\n    '$q',\n    '$injector',\n    'ConfigService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default DiscussionService;\n"]}