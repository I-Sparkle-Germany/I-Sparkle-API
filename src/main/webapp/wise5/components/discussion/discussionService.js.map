{"version":3,"sources":["discussionService.es6"],"names":[],"mappings":"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","file":"discussionService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DiscussionService extends NodeService {\n    constructor($http,\n                $rootScope,\n                $q,\n                ConfigService,\n                NotificationService,\n                StudentDataService,\n                TeacherDataService,\n                UtilService) {\n        super();\n\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.$q = $q;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.StudentDataService = StudentDataService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Discussion component object\n     * @returns a new Discussion component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Discussion';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = true;\n        component.isStudentAttachmentEnabled = true;\n        component.gateClassmateResponses = true;\n        return component;\n    }\n\n    /**\n     * Copies an existing Discussion component object\n     * @returns a copied Discussion component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n        component.gateClassmateResponses = componentToCopy.gateClassmateResponses;\n        return component;\n    }\n\n    populateComponentState(componentStateFromOtherComponent, otherComponentType) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null && otherComponentType != null) {\n            componentState = StudentDataService.createComponentState();\n\n            if (otherComponentType === 'OpenResponse') {\n                componentState.studentData = componentStateFromOtherComponent.studentData;\n            }\n        }\n\n        return componentState;\n    };\n\n    getClassmateResponses(runId, periodId, nodeId, componentId) {\n\n        if (runId != null && periodId != null && nodeId != null && componentId != null) {\n            return this.$q(angular.bind(this, function(resolve, reject) {\n\n                var httpParams = {};\n                httpParams.method = 'GET';\n                httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n\n                var params = {};\n                params.runId = runId;\n                params.periodId = periodId;\n                params.nodeId = nodeId;\n                params.componentId = componentId;\n                params.getStudentWork = true;\n                httpParams.params = params;\n\n                this.$http(httpParams).then(angular.bind(this, function(result) {\n                    var classmateData = result.data;\n\n                    //console.log(classmateData);\n\n                    resolve(classmateData);\n                }));\n            }));\n        }\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var response = studentData.response;\n\n                    if (response != null) {\n                        // there is a response so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get all the posts associated with a workgroup id. This will\n     * get all the posts and replies that the workgroup posted\n     * or replied to as well as all the other replies classmates made.\n     * @param componentId the component id\n     * @param workgroupId the workgroup id\n     * @returns an array containing all the component states for\n     * top level posts and replies that are associated with the\n     * workgroup\n     */\n    getPostsAssociatedWithWorkgroupId(componentId, workgroupId) {\n        var allPosts = [];\n\n        var topLevelComponentIdsFound = [];\n\n        // get all the component states for the workgroup id\n        var componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n                        if (studentData.componentStateIdReplyingTo == null) {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(componentState.id) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a top level post so we will\n                                 * get the post and all the replies to the post\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, componentState.id));\n\n                                topLevelComponentIdsFound.push(componentState.id);\n                            }\n                        } else {\n\n                            // check if we have already added the top level post\n                            if (topLevelComponentIdsFound.indexOf(studentData.componentStateIdReplyingTo) == -1) {\n                                // we haven't found the top level post yet so\n\n                                /*\n                                 * the component state is a reply so we will get the\n                                 * top level post and all the replies to it\n                                 */\n                                allPosts = allPosts.concat(this.getPostAndAllReplies(componentId, studentData.componentStateIdReplyingTo));\n\n                                topLevelComponentIdsFound.push(studentData.componentStateIdReplyingTo);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return allPosts;\n    }\n\n    /**\n     * Get the top level post and all the replies to it\n     * @param componentId the component id\n     * @param componentStateId the component state id\n     * @returns an array containing the top level post and all the replies\n     */\n    getPostAndAllReplies(componentId, componentStateId) {\n        var postAndAllReplies = [];\n\n        // get all the component states for the node\n        var componentStatesForNodeId = this.TeacherDataService.getComponentStatesByComponentId(componentId);\n\n        for (var c = 0; c < componentStatesForNodeId.length; c++) {\n            var tempComponentState = componentStatesForNodeId[c];\n\n            if (tempComponentState != null) {\n                if (componentStateId === tempComponentState.id) {\n                    // we have found the top level post\n                    postAndAllReplies.push(tempComponentState);\n                } else {\n                    // check if the component state is a reply to the post we are looking for\n                    var studentData = tempComponentState.studentData;\n\n                    if (studentData != null) {\n                        var componentStateIdReplyingTo = studentData.componentStateIdReplyingTo;\n\n                        if (componentStateIdReplyingTo != null) {\n                            if (componentStateId === componentStateIdReplyingTo) {\n                                // this is a reply to the post we are looking for\n                                postAndAllReplies.push(tempComponentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return postAndAllReplies;\n    };\n}\n\nDiscussionService.$inject = [\n    '$http',\n    '$rootScope',\n    '$q',\n    'ConfigService',\n    'NotificationService',\n    'StudentDataService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default DiscussionService;\n"]}