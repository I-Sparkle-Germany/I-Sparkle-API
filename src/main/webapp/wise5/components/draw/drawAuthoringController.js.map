{"version":3,"sources":["drawAuthoringController.es6"],"names":["DrawAuthoringController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","DrawService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","isResetButtonVisible","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","drawingToolId","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","submitCounter","initializeDrawingTool","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","background","authoringViewBackgroundChanged","stampIndex","targetObject","setStampImage","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stamps","Stamps","push","authoringViewComponentChanged","index","stamp","splice","length","answer","confirm","tools","select","line","shape","freeHand","strokeColor","fillColor","clone","strokeWidth","sendBack","sendForward","undo","redo","delete","drawData","getDrawData","starterDrawData","drawingTool","clear","width","starterDrawDataJSONObject","dt","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","starterDrawDataJSON","canvas","backgroundImage","src","projectAssetsDirectoryPath","newSrc","newConnectedComponent","updateOn","connectedComponents","show","$emit","setShowSubmitButtonValue","setBackgroundImage","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","importWorkAsBackground","componentType","authoringGetConnectedComponentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"drawAuthoringController.js","sourcesContent":["'use strict';\n\nimport DrawController from \"./drawController\";\nimport drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\nimport html2canvas from 'html2canvas';\n\nclass DrawAuthoringController extends DrawController {\n  constructor($filter,\n              $injector,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConfigService,\n              DrawService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      DrawService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    this.isResetButtonVisible = true;\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.drawingToolId = 'drawingtool_' + this.nodeId + '_' + this.componentId;\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.submitCounter = 0;\n      this.initializeDrawingTool();\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.background = fileName;\n\n                /*\n                 * the authoring view background has changed so we will\n                 * perform any changes if needed and then save the project\n                 */\n                this.authoringViewBackgroundChanged();\n              } else if (args.target == 'stamp') {\n                // the target is a stamp\n\n                // get the index of the stamp\n                var stampIndex = args.targetObject;\n\n                // get the file name\n                var fileName = assetItem.fileName;\n\n                // set the stamp image\n                this.setStampImage(stampIndex, fileName);\n\n                /*\n                 * the authoring view background has changed so we will\n                 * perform any changes if needed and then save the project\n                 */\n                this.authoringViewBackgroundChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a stamp in the authoring\n   */\n  authoringAddStampButtonClicked() {\n\n    // create the stamps field in the content if it does not exist\n    if (this.authoringComponentContent != null) {\n\n      // create a stamps object if it does not exist\n      if (this.authoringComponentContent.stamps == null) {\n        this.authoringComponentContent.stamps = {};\n      }\n\n      // create the Stamps array if it does not exist\n      if (this.authoringComponentContent.stamps.Stamps == null) {\n        this.authoringComponentContent.stamps.Stamps = [];\n      }\n    }\n\n    /*\n     * create the stamp as an empty string that the author will replace\n     * with a file name or url\n     */\n    this.authoringComponentContent.stamps.Stamps.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a stamp up in the authoring view\n   * @param index the index of the stamp\n   */\n  authoringStampUpClicked(index) {\n\n    // check if the stamp is not already at the top\n    if (index != 0) {\n      // the stamp is not at the top\n\n      // get the stamp string\n      var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // insert the stamp back into the array\n      this.authoringComponentContent.stamps.Stamps.splice(index - 1, 0, stamp);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move the stamp down in the authoring view\n   * @param index the index of the stamp\n   */\n  authoringStampDownClicked(index) {\n\n    // check if the stamp is already at the bottom\n    if (index != this.authoringComponentContent.stamps.Stamps.length - 1) {\n      // the stamp is not at the bottom\n\n      // get the stamp string\n      var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // insert the stamp back into the array\n      this.authoringComponentContent.stamps.Stamps.splice(index + 1, 0, stamp);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a stamp from the authoring view\n   * @param index the index of the stamp\n   */\n  authoringDeleteStampClicked(index) {\n\n    // ask the author if they are sure they want to delete the stamp\n    var answer = confirm(this.$translate('draw.areYouSureYouWantToDeleteThisStamp') + '\\n\\n' + this.authoringComponentContent.stamps.Stamps[index]);\n\n    if (answer) {\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Enable all the tools\n   */\n  authoringEnableAllToolsButtonClicked() {\n\n    if (this.authoringComponentContent.tools == null) {\n      this.authoringComponentContent.tools = {};\n    }\n\n    // enable all the tools\n    this.authoringComponentContent.tools.select = true;\n    this.authoringComponentContent.tools.line = true;\n    this.authoringComponentContent.tools.shape = true;\n    this.authoringComponentContent.tools.freeHand = true;\n    this.authoringComponentContent.tools.text = true;\n    this.authoringComponentContent.tools.stamp = true;\n    this.authoringComponentContent.tools.strokeColor = true;\n    this.authoringComponentContent.tools.fillColor = true;\n    this.authoringComponentContent.tools.clone = true;\n    this.authoringComponentContent.tools.strokeWidth = true;\n    this.authoringComponentContent.tools.sendBack = true;\n    this.authoringComponentContent.tools.sendForward = true;\n    this.authoringComponentContent.tools.undo = true;\n    this.authoringComponentContent.tools.redo = true;\n    this.authoringComponentContent.tools.delete = true;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Disable all the tools\n   */\n  authoringDisableAllToolsButtonClicked() {\n\n    if (this.authoringComponentContent.tools == null) {\n      this.authoringComponentContent.tools = {};\n    }\n\n    // disable all the tools\n    this.authoringComponentContent.tools.select = false;\n    this.authoringComponentContent.tools.line = false;\n    this.authoringComponentContent.tools.shape = false;\n    this.authoringComponentContent.tools.freeHand = false;\n    this.authoringComponentContent.tools.text = false;\n    this.authoringComponentContent.tools.stamp = false;\n    this.authoringComponentContent.tools.strokeColor = false;\n    this.authoringComponentContent.tools.fillColor = false;\n    this.authoringComponentContent.tools.clone = false;\n    this.authoringComponentContent.tools.strokeWidth = false;\n    this.authoringComponentContent.tools.sendBack = false;\n    this.authoringComponentContent.tools.sendForward = false;\n    this.authoringComponentContent.tools.undo = false;\n    this.authoringComponentContent.tools.redo = false;\n    this.authoringComponentContent.tools.delete = false;\n  }\n\n  /**\n   * Save the starter draw data\n   */\n  authoringSaveStarterDrawData() {\n\n    let answer = confirm(this.$translate('draw.areYouSureYouWantToSaveTheStarterDrawing'));\n\n    if (answer) {\n      // get the draw data\n      var drawData = this.getDrawData();\n\n      // set the starter draw data\n      this.authoringComponentContent.starterDrawData = drawData;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete the starter draw data\n   */\n  authoringDeleteStarterDrawData() {\n\n    let answer = confirm(this.$translate('draw.areYouSureYouWantToDeleteTheStarterDrawing'));\n\n    if (answer) {\n      // remove the starter draw data\n      this.authoringComponentContent.starterDrawData = null;\n\n      // clear the drawing\n      this.drawingTool.clear();\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the width\n   */\n  authoringViewWidthChanged() {\n\n    // update the width\n    this.width = this.authoringComponentContent.width;\n\n    // update the starter draw data if there is any\n    if (this.authoringComponentContent.starterDrawData != null) {\n\n      // get the starter draw data as a JSON object\n      var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n      if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n        // update the width in the starter draw data\n        starterDrawDataJSONObject.dt.width = this.width;\n\n        // set the starter draw data back into the component content\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the width is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has changed the height\n   */\n  authoringViewHeightChanged() {\n\n    // update the height\n    this.height = this.authoringComponentContent.height;\n\n    // update the starter draw data if there is any\n    if (this.authoringComponentContent.starterDrawData != null) {\n\n      // get the starter draw data as a JSON object\n      var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n      if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n        // update the height in the starter draw data\n        starterDrawDataJSONObject.dt.height = this.height;\n\n        // set the starter draw data back into the component content\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the height is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has enabled or disabled a tool\n   */\n  authoringViewToolClicked() {\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the height is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * The background has changed so we will update the starter draw data if\n   * it has been set and then save the project\n   */\n  authoringViewBackgroundChanged() {\n\n    // get the starter draw data string\n    var starterDrawData = this.authoringComponentContent.starterDrawData;\n\n    if (starterDrawData != null) {\n\n      // get the starter draw data JSON object\n      var starterDrawDataJSON = angular.fromJson(starterDrawData);\n\n      if (starterDrawDataJSON != null &&\n        starterDrawDataJSON.canvas != null &&\n        starterDrawDataJSON.canvas.backgroundImage != null &&\n        starterDrawDataJSON.canvas.backgroundImage.src != null) {\n\n        // get the background\n        var background = this.authoringComponentContent.background;\n\n        /*\n         * get the project assets directory path\n         * e.g. https://www.berkeley.edu/curriculum/25/assets\n         */\n        var projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath(true);\n\n        /*\n         * generate the absolute path to the background image\n         * e.g. https://www.berkeley.edu/curriculum/25/assets/earth.png\n         */\n        var newSrc = projectAssetsDirectoryPath + '/' + background;\n\n        // set the new src\n        starterDrawDataJSON.canvas.backgroundImage.src = newSrc;\n\n        // convert the starter draw data back into a string\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSON);\n      }\n    }\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Open the asset choose to select an image for the stamp\n   * @param index the index of the stamp\n   */\n  chooseStampImage(index) {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'stamp';\n    params.targetObject = index;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Set the stamp image\n   * @param index the index of the stamp\n   * @param fileName the file name of the image\n   */\n  setStampImage(index, fileName) {\n    this.authoringComponentContent.stamps.Stamps[index] = fileName;\n  }\n\n  handleConnectedComponentsPostProcess() {\n    if (this.componentContent != null &&\n      this.componentContent.background != null) {\n      this.drawingTool.setBackgroundImage(this.componentContent.background);\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n      componentType == 'Embedded' ||\n      componentType == 'Graph' ||\n      componentType == 'Label' ||\n      componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n}\n\nDrawAuthoringController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'DrawService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'];\n\nexport default DrawAuthoringController;\n"]}