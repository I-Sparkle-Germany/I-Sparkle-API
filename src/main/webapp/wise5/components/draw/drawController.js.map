{"version":3,"sources":["drawController.es6"],"names":[],"mappings":"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","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $timeout,\n                DrawService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n        \n        // whether the reset button is visible or not\n        this.isResetButtonVisible = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetButtonVisible = true;\n\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n            } else if (this.mode === 'showPreviousWork') {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function () {\n                // running this in side a timeout ensures that the code only runs after the markup is rendered.\n                // maybe there's a better way to do this, like with an event?\n\n                // initialize the drawing tool\n                this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n                    stamps: this.componentContent.stamps || {},\n                    parseSVG: true\n                });\n                var state = null;\n                $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n                }));\n                $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeBackgroundToCanvas();\n                }));\n                $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeCanvasToBackground();\n                }));\n                $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.shrinkBackgroundToCanvas();\n                }));\n                $(\"#clear\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.clear(true);\n                }));\n                $(\"#save\").on(\"click\", angular.bind(this, function () {\n                    state = drawingTool.save();\n                    $(\"#load\").removeAttr(\"disabled\");\n                }));\n                $(\"#load\").on(\"click\", angular.bind(this, function () {\n                    if (state === null) return;\n                    this.drawingTool.load(state);\n                }));\n\n                // get the show previous work node id if it is provided\n                var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n                var componentState = null;\n\n                if (showPreviousWorkNodeId != null) {\n                    // this component is showing previous work\n                    this.isShowPreviousWork = true;\n\n                    // get the show previous work component id if it is provided\n                    var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                    // get the node content for the other node\n                    var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                    // get the node content for the component we are showing previous work for\n                    this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                    // get the component state for the show previous work\n                    componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n\n                    // disable the component since we are just showing previous work\n                    this.isDisabled = true;\n\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                } else {\n                    // this is a regular component\n\n                    // get the component state from the scope\n                    componentState = this.$scope.componentState;\n\n                    // set whether studentAttachment is enabled\n                    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                    if (this.componentContent.background != null) {\n                        // set the background from the component content\n                        this.drawingTool.setBackgroundImage(this.componentContent.background);\n                    }\n\n                    if (componentState == null) {\n                        /*\n                         * only import work if the student does not already have\n                         * work for this component\n                         */\n\n                        // check if we need to import work\n                        var importWorkNodeId = this.componentContent.importWorkNodeId;\n                        var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                        if (importWorkNodeId != null && importWorkComponentId != null) {\n                            // import the work from the other component\n                            this.importWork();\n                        }\n                    } else {\n                        // populate the student work into this component\n                        this.setStudentWork(componentState);\n                    }\n\n                    // check if we need to lock this component\n                    this.calculateDisabled();\n\n                    // register this component with the parent node\n                    if (this.$scope.$parent && this.$scope.$parent.registerComponentController) {\n                        this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                    }\n\n                    // listen for the drawing changed event\n                    this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n                    // listen for selected tool changed event\n                    this.drawingTool.on('tool:changed', function (toolName) {\n                        // log this event\n                        var category = \"Tool\";\n                        var event = \"toolSelected\";\n                        var data = {};\n                        data.selectedToolName = toolName;\n                        this.StudentDataService.saveComponentEvent(this, category, event, data);\n                    }.bind(this));\n\n                    if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n                        // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n                        $(\".dt-tools\").hide();\n                    }\n                }\n\n            }));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.drawController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.drawController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.drawController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n            \n            // check if the component state is from a connected component\n            if (this.isConnectedComponent(componentState.componentId)) {\n                \n                /*\n                 * make a copy of the component state so we don't accidentally\n                 * change any values in the referenced object\n                 */\n                componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n                \n                // get the connected component params\n                var connectedComponentParams = this.getConnectedComponentParams(componentState.componentId);\n                \n                /*\n                 * check if the the canvas is empty which means the student has \n                 * not drawn anything yet\n                 */\n                var isCanvasEmpty = this.isCanvasEmpty();\n                var connectedComponentParamsSatisfied = false;\n                \n                if (connectedComponentParams.updateOnlyOnSubmit) {\n                    // we will update only if the connected component state was submitted\n                    \n                    if (componentState.isSubmit) {\n                        connectedComponentParamsSatisfied = true;\n                    }\n                } else {\n                    /*\n                     * the component params were satisfied so we may update\n                     * the student work as long as the canvas is empty\n                     */\n                    connectedComponentParamsSatisfied = true;\n                }\n                \n                if (!connectedComponentParams.includeBackground) {\n                    // remove the background from the draw data\n                    this.DrawService.removeBackgroundFromComponentState(componentState);\n                }\n                \n                if (isCanvasEmpty && connectedComponentParamsSatisfied) {\n                    /*\n                     * the canvas is empty and the connected component params\n                     * have been satisfied so we will update the draw data\n                     * in this component\n                     */\n                    \n                    // update the draw data\n                    this.setDrawData(componentState);\n                }\n                \n                if (connectedComponentParamsSatisfied) {\n                    /*\n                     * remember the component state and connected component params\n                     * in case we need to use them again later\n                     */\n                    this.latestConnectedComponentState = componentState;\n                    this.latestConnectedComponentParams = connectedComponentParams;\n                }\n            }\n        }));\n        \n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n            \n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n                \n                // obtain the image blob\n                var imageObject = this.getImageObject();\n                \n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n                    \n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n    }  // end of constructor\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // set the draw data\n            this.setDrawData(componentState);\n\n            /*\n             * check if the latest component state is a submit and perform\n             * any necessary processing\n             */\n            this.processLatestSubmit();\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n    \n    /**\n     * The reset button was clicked\n     */\n    resetButtonClicked() {\n        \n        // ask the student if they are sure they want to clear the drawing\n        var result = confirm('Are you sure you want to clear your drawing?');\n        \n        if (result) {\n            // clear the drawing\n            this.drawingTool.clear();\n            \n            // check if we need to reload student data from a connected component\n            var latestConnectedComponentState = this.latestConnectedComponentState;\n            var latestConnectedComponentParams = this.latestConnectedComponentParams;\n            \n            if (latestConnectedComponentState && latestConnectedComponentParams) {\n                // reload the student data from the connected component\n                this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n            }\n        }\n    }\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Add student asset images as objects in the drawing canvas\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n    \n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n        \n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n            \n            // get the image as a base64 string\n            var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n            \n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n        \n        return pngFile;\n    }\n    \n    /**\n     * Set the draw data\n     * @param componentState the component state\n     */\n    setDrawData(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Check if a component id is a connected component\n     * @param componentId check if this component id is a connected component\n     * @returns whether the component id is a connected component\n     */\n    isConnectedComponent(componentId) {\n        \n        var result = false;\n        \n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n        \n        if (connectedComponents != null) {\n            \n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                \n                // get a connected component\n                var connectedComponent = connectedComponents[c];\n                \n                if (connectedComponent != null) {\n                    var tempComponentId = connectedComponent.id;\n                    \n                    if (componentId === tempComponentId) {\n                        // the component id matches so it is a connected component\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get a connected component params\n     * @param componentId the connected component id\n     * @returns the params for the connected component\n     */\n    getConnectedComponentParams(componentId) {\n        \n        var connectedComponentParams = null;\n        \n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n        \n        if (connectedComponents != null) {\n            \n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n                \n                if (connectedComponent != null) {\n                    var tempComponentId = connectedComponent.id;\n                    \n                    if (componentId === tempComponentId) {\n                        // we have found the connected component we are looking for\n                        connectedComponentParams = connectedComponent;\n                    }\n                }\n            }\n        }\n        \n        return connectedComponentParams;\n    }\n    \n    /**\n     * Check if the student has drawn anything\n     * @returns whether the canvas is empty\n     */\n    isCanvasEmpty() {\n        \n        var result = true;\n        \n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n            \n            // get the objects in the canvas where the student draws\n            var objects = this.drawingTool.canvas.getObjects();\n            \n            if (objects != null && objects.length > 0) {\n                // there are objects in the canvas \n                result = false;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n}\n\nDrawController.$inject = ['$injector',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'DrawService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'];\n\nexport default DrawController;\n"]}