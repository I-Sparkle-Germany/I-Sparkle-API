{"version":3,"sources":["drawController.es6"],"names":["DrawController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","DrawService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","showJSONAuthoring","isResetButtonVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","isShowPreviousWork","isSubmit","drawingTool","originalComponentContent","isStudentAttachmentEnabled","mode","workgroupId","teacherWorkgroupId","latestConnectedComponentState","latestConnectedComponentParams","width","height","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","componentType","type","showSaveButton","showSubmitButton","drawingToolId","latestAnnotations","getLatestComponentAnnotations","componentState","isPromptVisible","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","console","log","bind","newValue","oldValue","injectAssetPaths","initializeDrawingTool","angular","getComponentState","deferred","defer","getState","action","drawController","createComponentState","then","resolve","promise","$on","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","isConnectedComponent","connectedComponentParams","getConnectedComponentParams","updateOn","performUpdate","makeCopyOfJSONObject","isCanvasEmpty","answer","confirm","includeBackground","removeBackgroundFromComponentState","setDrawData","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","background","authoringViewBackgroundChanged","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","DrawingTool","stamps","parseSVG","state","on","setBackgroundImage","val","resizeBackgroundToCanvas","resizeCanvasToBackground","shrinkBackgroundToCanvas","clear","save","removeAttr","load","importPreviousWorkNodeId","importPreviousWorkComponentId","starterDrawData","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","calculateDisabled","$parent","nodeController","registerComponentController","studentDataChanged","toolName","category","data","selectedToolName","saveComponentEvent","setupTools","tools","selectTitle","select","find","show","lineTitle","line","shapeTitle","shape","freeHandTitle","freeHand","textTitle","stampTitle","stamp","cloneTitle","clone","strokeColorTitle","strokeColor","fillColorTitle","fillColor","strokeWidthTitle","strokeWidth","sendBackTitle","sendBack","sendForwardTitle","sendForward","undoTitle","undo","redoTitle","redo","deleteTitle","delete","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","result","isLockAfterSubmit","getComponentId","createNewComponentState","studentData","studentDataJSONString","getDrawData","drawData","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentAsset","copyAssetForReference","copiedAsset","fabric","Image","fromURL","url","oImg","scaleToWidth","studentAssetId","canvas","add","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","objects","getObjects","length","message","isNotebookEnabled","$event","element","addNewItem","exitListener","$broadcast","component","componentHasWork","importPreviousWork","Stamps","push","index","splice","starterDrawDataJSONObject","dt","html","removeAbsoluteAssetPaths","insertWISELinks","params","popup","starterDrawDataJSON","backgroundImage","src","projectAssetsDirectoryPath","newSrc","newConnectedComponent","connectedComponents","$inject"],"mappings":"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","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                DrawService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // whether the reset button is visible or not\n        this.isResetButtonVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        // the default width and height of the canvas\n        this.width = 800;\n        this.height = 600;\n\n        if (this.componentContent.width != null) {\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            this.height = this.componentContent.height;\n        }\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetButtonVisible = true;\n\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isSnipDrawingButtonVisible = false;\n\n                if (this.mode === 'grading') {\n                    // get the latest annotations\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                }\n            } else if (this.mode === 'showPreviousWork') {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipDrawingButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetButtonVisible = true;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    console.log(this.authoringComponentContent);\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    console.log('watch');\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.initializeDrawingTool();\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                }.bind(this), true);\n            }\n\n            // running this in side a timeout ensures that the code only runs after the markup is rendered.\n            // maybe there's a better way to do this, like with an event?\n            this.$timeout(angular.bind(this, this.initializeDrawingTool));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.drawController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.drawController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.drawController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * check if the the canvas is empty which means the student has\n                         * not drawn anything yet\n                         */\n                        if (this.isCanvasEmpty()) {\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has drawn on the canvas so we\n                             * will ask them if they want to update it\n                             */\n                            var answer = confirm(this.$translate('draw.doYouWantToUpdateTheConnectedDrawing'));\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                        }\n\n                        if (performUpdate) {\n\n                            if (!connectedComponentParams.includeBackground) {\n                                // remove the background from the draw data\n                                this.DrawService.removeBackgroundFromComponentState(componentState);\n                            }\n\n                            // update the draw data\n                            this.setDrawData(componentState);\n\n                            // the table has changed\n                            this.$scope.drawController.isDirty = true;\n                            this.$scope.drawController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'background') {\n                                // the target is the background image\n\n                                // set the background file name\n                                this.authoringComponentContent.background = fileName;\n\n                                /*\n                                 * the authoring view background has changed so we will\n                                 * perform any changes if needed and then save the project\n                                 */\n                                this.authoringViewBackgroundChanged();\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n    }  // end of constructor\n\n    /**\n     * Initialize the drawing tool\n     */\n    initializeDrawingTool() {\n\n        this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n            stamps: this.componentContent.stamps || {},\n            parseSVG: true,\n            width: this.width,\n            height: this.height\n        });\n        var state = null;\n        $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n        }));\n        $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.resizeBackgroundToCanvas();\n        }));\n        $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.resizeCanvasToBackground();\n        }));\n        $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.shrinkBackgroundToCanvas();\n        }));\n        $(\"#clear\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.clear(true);\n        }));\n        $(\"#save\").on(\"click\", angular.bind(this, function () {\n            state = drawingTool.save();\n            $(\"#load\").removeAttr(\"disabled\");\n        }));\n        $(\"#load\").on(\"click\", angular.bind(this, function () {\n            if (state === null) return;\n            this.drawingTool.load(state);\n        }));\n\n        var componentState = null;\n\n        // get the component state from the scope\n        componentState = this.$scope.componentState;\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n        }\n\n        if (componentState == null) {\n            /*\n             * only import work or use starter draw data if the student\n             * does not already have work for this component\n             */\n\n            // check if we need to import work\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n            // get the starter draw data if any\n            var starterDrawData = this.componentContent.starterDrawData;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (starterDrawData != null) {\n                // there is starter draw data so we will populate it into the draw tool\n                this.drawingTool.load(starterDrawData);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        // register this component with the parent node\n        if (this.$scope.$parent && this.$scope.$parent.nodeController != null) {\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n\n        // listen for the drawing changed event\n        this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n        // listen for selected tool changed event\n        this.drawingTool.on('tool:changed', function (toolName) {\n            // log this event\n            var category = \"Tool\";\n            var event = \"toolSelected\";\n            var data = {};\n            data.selectedToolName = toolName;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }.bind(this));\n\n        if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n            // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n            $(\".dt-tools\").hide();\n        }\n\n        // show or hide the draw tools\n        this.setupTools();\n    }\n\n    /**\n     * Setup the tools that we will make available to the student\n     */\n    setupTools() {\n\n        // get the tools values from the authored content\n        var tools = this.componentContent.tools;\n\n        if (tools == null) {\n            // we will display all the tools\n        } else {\n            // we will only display the tools the authored specified to show\n\n            // the title for the select button\n            var selectTitle = this.$translate('draw.selectToolTooltip');\n\n            if (tools.select) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + selectTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + selectTitle + '\"]').hide();\n            }\n\n            // the title for the line button\n            var lineTitle = this.$translate('draw.lineToolTooltip');\n\n            if (tools.line) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + lineTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + lineTitle + '\"]').hide();\n            }\n\n            // the title for the shape button\n            var shapeTitle = this.$translate('draw.shapeToolTooltip');\n\n            if (tools.shape) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + shapeTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + shapeTitle + '\"]').hide();\n            }\n\n            // the title for the free hand button\n            var freeHandTitle = this.$translate('draw.freeHandToolTooltip');\n\n            if (tools.freeHand) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').hide();\n            }\n\n            // the title for the text button\n            var textTitle = this.$translate('draw.textToolTooltip');\n\n            if (tools.text) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + textTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + textTitle + '\"]').hide();\n            }\n\n            // the title for the stamp button\n            var stampTitle = this.$translate('draw.stampToolTooltip');\n\n            if (tools.stamp) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + stampTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + stampTitle + '\"]').hide();\n            }\n\n            // the title for the clone button\n            var cloneTitle = this.$translate('draw.cloneToolTooltip');\n\n            if (tools.clone) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + cloneTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + cloneTitle + '\"]').hide();\n            }\n\n            // the title for the stroke color button\n            var strokeColorTitle = this.$translate('draw.strokeColorToolTooltip');\n\n            if (tools.strokeColor) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').hide();\n            }\n\n            // the title for the fill color button\n            var fillColorTitle = this.$translate('draw.fillColorToolTooltip');\n\n            if (tools.fillColor) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').hide();\n            }\n\n            // the title for the stroke width button\n            var strokeWidthTitle = this.$translate('draw.strokeWidthToolTooltip');\n\n            if (tools.strokeWidth) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').hide();\n            }\n\n            // the title for the send back button\n            var sendBackTitle = this.$translate('draw.sendBackToolTooltip');\n\n            if (tools.sendBack) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').hide();\n            }\n\n            // the title for the send forward button\n            var sendForwardTitle = this.$translate('draw.sendForwardToolTooltip');\n\n            if (tools.sendForward) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').hide();\n            }\n\n            // the title for the undo button\n            var undoTitle = this.$translate('draw.undo');\n\n            if (tools.undo) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + undoTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + undoTitle + '\"]').hide();\n            }\n\n            // the title for the redo button\n            var redoTitle = this.$translate('draw.redo');\n\n            if (tools.redo) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + redoTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + redoTitle + '\"]').hide();\n            }\n\n            // the title for the delete button\n            var deleteTitle = this.$translate('draw.deleteToolTooltip');\n\n            if (tools.delete) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + deleteTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + deleteTitle + '\"]').hide();\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // set the draw data\n            this.setDrawData(componentState);\n\n            /*\n             * check if the latest component state is a submit and perform\n             * any necessary processing\n             */\n             this.processLatestSubmit();\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The reset button was clicked\n     */\n    resetButtonClicked() {\n\n        // ask the student if they are sure they want to clear the drawing\n        var result = confirm(this.$translate('draw.areYouSureYouWantToClearYourDrawing'));\n\n        if (result) {\n            // clear the drawing\n            this.drawingTool.clear();\n\n            // check if we need to reload student data from a connected component\n            var latestConnectedComponentState = this.latestConnectedComponentState;\n            var latestConnectedComponentParams = this.latestConnectedComponentParams;\n\n            // get the starter draw data if any\n            var starterDrawData = this.componentContent.starterDrawData;\n\n            if (latestConnectedComponentState && latestConnectedComponentParams) {\n                // reload the student data from the connected component\n                this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n            } else if (starterDrawData != null) {\n                // there is starter draw data so we will populate it into the draw tool\n                this.drawingTool.load(starterDrawData);\n            }\n        }\n    }\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Add student asset images as objects in the drawing canvas\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the draw data\n     * @param componentState the component state\n     */\n    setDrawData(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the student has drawn anything\n     * @returns whether the canvas is empty\n     */\n    isCanvasEmpty() {\n\n        var result = true;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the objects in the canvas where the student draws\n            var objects = this.drawingTool.canvas.getObjects();\n\n            if (objects != null && objects.length > 0) {\n                // there are objects in the canvas\n                result = false;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#drawingtool_' + this.nodeId + '_' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a stamp in the authoring\n     */\n    authoringAddStampButtonClicked() {\n\n        // create the stamps field in the content if it does not exist\n        if (this.authoringComponentContent != null) {\n\n            // create a stamps object if it does not exist\n            if (this.authoringComponentContent.stamps == null) {\n                this.authoringComponentContent.stamps = {};\n            }\n\n            // create the Stamps array if it does not exist\n            if (this.authoringComponentContent.stamps.Stamps == null) {\n                this.authoringComponentContent.stamps.Stamps = [];\n            }\n        }\n\n        /*\n         * create the stamp as an empty string that the author will replace\n         * with a file name or url\n         */\n        this.authoringComponentContent.stamps.Stamps.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a stamp up in the authoring view\n     * @param index the index of the stamp\n     */\n    authoringStampUpClicked(index) {\n\n        // check if the stamp is not already at the top\n        if (index != 0) {\n            // the stamp is not at the top\n\n            // get the stamp string\n            var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n            // insert the stamp back into the array\n            this.authoringComponentContent.stamps.Stamps.splice(index - 1, 0, stamp);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move the stamp down in the authoring view\n     * @param index the index of the stamp\n     */\n    authoringStampDownClicked(index) {\n\n        // check if the stamp is already at the bottom\n        if (index != this.authoringComponentContent.stamps.Stamps.length - 1) {\n            // the stamp is not at the bottom\n\n            // get the stamp string\n            var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n            // insert the stamp back into the array\n            this.authoringComponentContent.stamps.Stamps.splice(index + 1, 0, stamp);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete a stamp from the authoring view\n     * @param index the index of the stamp\n     */\n    authoringDeleteStampClicked(index) {\n\n        // ask the author if they are sure they want to delete the stamp\n        var answer = confirm(this.$translate('draw.areYouSureYouWantToDeleteThisStamp') + '\\n\\n' + this.authoringComponentContent.stamps.Stamps[index]);\n\n        if (answer) {\n\n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Enable all the tools\n     */\n    authoringEnableAllToolsButtonClicked() {\n\n        if (this.authoringComponentContent.tools == null) {\n            this.authoringComponentContent.tools = {};\n        }\n\n        // enable all the tools\n        this.authoringComponentContent.tools.select = true;\n        this.authoringComponentContent.tools.line = true;\n        this.authoringComponentContent.tools.shape = true;\n        this.authoringComponentContent.tools.freeHand = true;\n        this.authoringComponentContent.tools.text = true;\n        this.authoringComponentContent.tools.stamp = true;\n        this.authoringComponentContent.tools.strokeColor = true;\n        this.authoringComponentContent.tools.fillColor = true;\n        this.authoringComponentContent.tools.clone = true;\n        this.authoringComponentContent.tools.strokeWidth = true;\n        this.authoringComponentContent.tools.sendBack = true;\n        this.authoringComponentContent.tools.sendForward = true;\n        this.authoringComponentContent.tools.undo = true;\n        this.authoringComponentContent.tools.redo = true;\n        this.authoringComponentContent.tools.delete = true;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Disable all the tools\n     */\n    authoringDisableAllToolsButtonClicked() {\n\n        if (this.authoringComponentContent.tools == null) {\n            this.authoringComponentContent.tools = {};\n        }\n\n        // disable all the tools\n        this.authoringComponentContent.tools.select = false;\n        this.authoringComponentContent.tools.line = false;\n        this.authoringComponentContent.tools.shape = false;\n        this.authoringComponentContent.tools.freeHand = false;\n        this.authoringComponentContent.tools.text = false;\n        this.authoringComponentContent.tools.stamp = false;\n        this.authoringComponentContent.tools.strokeColor = false;\n        this.authoringComponentContent.tools.fillColor = false;\n        this.authoringComponentContent.tools.clone = false;\n        this.authoringComponentContent.tools.strokeWidth = false;\n        this.authoringComponentContent.tools.sendBack = false;\n        this.authoringComponentContent.tools.sendForward = false;\n        this.authoringComponentContent.tools.undo = false;\n        this.authoringComponentContent.tools.redo = false;\n        this.authoringComponentContent.tools.delete = false;\n    }\n\n    /**\n     * Save the starter draw data\n     */\n    authoringSaveStarterDrawData() {\n\n        // get the draw data\n        var drawData = this.getDrawData();\n\n        // set the starter draw data\n        this.authoringComponentContent.starterDrawData = drawData;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete the starter draw data\n     */\n    authoringDeleteStarterDrawData() {\n\n        // remove the starter draw data\n        this.authoringComponentContent.starterDrawData = null;\n\n        // clear the drawing\n        this.drawingTool.clear();\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the width\n     */\n    authoringViewWidthChanged() {\n\n        // update the width\n        this.width = this.authoringComponentContent.width;\n\n        // update the starter draw data if there is any\n        if (this.authoringComponentContent.starterDrawData != null) {\n\n            // get the starter draw data as a JSON object\n            var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n            if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n                // update the width in the starter draw data\n                starterDrawDataJSONObject.dt.width = this.width;\n\n                // set the starter draw data back into the component content\n                this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n            }\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n\n        // re-initialize the drawing tool so the width is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n\n    /**\n     * The author has changed the height\n     */\n    authoringViewHeightChanged() {\n\n        // update the height\n        this.height = this.authoringComponentContent.height;\n\n        // update the starter draw data if there is any\n        if (this.authoringComponentContent.starterDrawData != null) {\n\n            // get the starter draw data as a JSON object\n            var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n            if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n                // update the height in the starter draw data\n                starterDrawDataJSONObject.dt.height = this.height;\n\n                // set the starter draw data back into the component content\n                this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n            }\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n\n        // re-initialize the drawing tool so the height is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n\n    /**\n     * The author has enabled or disabled a tool\n     */\n    authoringViewToolClicked() {\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n\n        // re-initialize the drawing tool so the height is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the background image\n     */\n    chooseBackgroundImage() {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'background';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * The background has changed so we will update the starter draw data if\n     * it has been set and then save the project\n     */\n    authoringViewBackgroundChanged() {\n\n        // get the starter draw data string\n        var starterDrawData = this.authoringComponentContent.starterDrawData;\n\n        if (starterDrawData != null) {\n\n            // get the starter draw data JSON object\n            var starterDrawDataJSON = angular.fromJson(starterDrawData);\n\n            if (starterDrawDataJSON != null &&\n                starterDrawDataJSON.canvas != null &&\n                starterDrawDataJSON.canvas.backgroundImage != null &&\n                starterDrawDataJSON.canvas.backgroundImage.src != null) {\n\n                // get the background\n                var background = this.authoringComponentContent.background;\n\n                /*\n                 * get the project assets directory path\n                 * e.g. https://www.berkeley.edu/curriculum/25/assets\n                 */\n                var projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath(true);\n\n                /*\n                 * generate the absolute path to the background image\n                 * e.g. https://www.berkeley.edu/curriculum/25/assets/earth.png\n                 */\n                var newSrc = projectAssetsDirectoryPath + \"/\" + background;\n\n                // set the new src\n                starterDrawDataJSON.canvas.backgroundImage.src = newSrc;\n\n                // convert the starter draw data back into a string\n                this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSON);\n            }\n        }\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\nDrawController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'DrawService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'];\n\nexport default DrawController;\n"]}