{"version":3,"sources":["drawController.es6"],"names":["DrawController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","DrawService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","isResetButtonVisible","notebookConfig","getNotebookConfig","drawingTool","latestConnectedComponentState","latestConnectedComponentParams","width","height","componentContent","componentType","type","mode","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","drawingToolId","nodeId","componentId","latestAnnotations","getLatestComponentAnnotations","workgroupId","componentState","id","isPromptVisible","isDisabled","angular","bind","initializeDrawingTool","getComponentState","isSubmit","deferred","defer","getState","action","drawController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$on","event","args","imageObject","getImageObject","$emit","requester","notebookItem","studentWorkId","content","studentWorkIds","importWorkByStudentWorkId","$broadcast","studentWork","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSubmittedMessage","lockIfNecessary","setAutoSavedMessage","setSavedMessage","isConnectedComponent","connectedComponentParams","getConnectedComponentParams","updateOn","performUpdate","makeCopyOfJSONObject","isCanvasEmpty","answer","confirm","$translate","includeBackground","removeBackgroundFromComponentState","setDrawData","submit","DrawingTool","stamps","parseSVG","state","$","on","setBackgroundImage","val","resizeBackgroundToCanvas","resizeCanvasToBackground","shrinkBackgroundToCanvas","clear","save","removeAttr","load","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","starterDrawData","background","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","studentDataChanged","toolName","category","data","selectedToolName","saveComponentEvent","find","hide","setupTools","tools","selectTitle","$drawingTool","select","show","lineTitle","line","shapeTitle","shape","freeHandTitle","freeHand","textTitle","text","stampTitle","stamp","cloneTitle","clone","strokeColorTitle","strokeColor","fillColorTitle","fillColor","strokeWidthTitle","strokeWidth","sendBackTitle","sendBack","sendForwardTitle","sendForward","undoTitle","undo","redoTitle","redo","deleteTitle","delete","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","result","parentStudentWorkIds","createNewComponentState","studentData","studentDataJSONString","getDrawData","drawData","createComponentStateAdditionalProcessing","studentAsset","copyAssetForReference","copiedAsset","fabric","Image","fromURL","url","oImg","scaleToWidth","studentAssetId","canvas","add","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","objects","getObjects","length","$event","element","noteText","addNote","deregisterListener","snipDrawing","saveButtonClicked","componentStates","mergedComponentState","allObjects","firstDrawData","c","drawDataJSON","fromJson","concat","connectedComponent","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","toJson","generateImageFromComponentState","image","$inject"],"mappings":"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","file":"drawController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\nimport html2canvas from 'html2canvas';\n\nclass DrawController extends ComponentController {\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      DrawService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.DrawService = DrawService;\n\n    // whether the reset button is visible or not\n    this.isResetButtonVisible = false;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // will hold the drawing tool object\n    this.drawingTool = null;\n\n    this.latestConnectedComponentState = null;\n    this.latestConnectedComponentParams = null;\n\n    // the default width and height of the canvas\n    this.width = 800;\n    this.height = 600;\n\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n\n    this.componentType = this.componentContent.type;\n\n    if (this.mode === 'student') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.isResetButtonVisible = true;\n\n      this.drawingToolId = 'drawingtool_' + this.nodeId + '_' + this.componentId;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n      // get the component state from the scope\n      let componentState = this.$scope.componentState;\n\n      if (componentState != null) {\n        // create a unique id for the application drawing tool element using this component state\n        this.drawingToolId = 'drawingtool_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.drawingToolId = 'drawingtool_gradingRevision_' + componentState.id;\n        }\n      }\n\n      if (this.mode === 'grading') {\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'showPreviousWork') {\n      // get the component state from the scope\n      var componentState = this.$scope.componentState;\n      if (componentState != null) {\n        this.drawingToolId = 'drawingtool_' + componentState.id;\n      }\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    // running this in side a timeout ensures that the code only runs after the markup is rendered.\n    // maybe there's a better way to do this, like with an event?\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      let deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.drawController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.drawController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.drawController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /*\n     * Listen for the requestImage event which is fired when something needs\n     * an image representation of the student data from a specific\n     * component.\n     */\n    this.$scope.$on('requestImage', (event, args) => {\n      // get the node id and component id from the args\n      var nodeId = args.nodeId;\n      var componentId = args.componentId;\n\n      // check if the image is being requested from this component\n      if (this.nodeId === nodeId && this.componentId === componentId) {\n\n        // obtain the image blob\n        var imageObject = this.getImageObject();\n\n        if (imageObject != null) {\n          var args = {};\n          args.nodeId = nodeId;\n          args.componentId = componentId;\n          args.imageObject = imageObject;\n\n          // fire an event that contains the image object\n          this.$scope.$emit('requestImageCallback', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    this.$scope.$on('notebookItemChosen', (event, args) => {\n      if (args.requester == this.nodeId + '-' + this.componentId) {\n        const notebookItem = args.notebookItem;\n        const studentWorkId = notebookItem.content.studentWorkIds[0];\n        this.importWorkByStudentWorkId(studentWorkId);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        if (isSubmit) {\n          this.setSubmittedMessage(clientSaveTime);\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setAutoSavedMessage(clientSaveTime);\n        } else {\n          this.setSavedMessage(clientSaveTime);\n        }\n      }\n\n      // check if the component state is from a connected component\n      if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n        // get the connected component params\n        var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n        if (connectedComponentParams != null) {\n\n          if (connectedComponentParams.updateOn === 'save' ||\n            (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n            var performUpdate = false;\n\n            /*\n             * make a copy of the component state so we don't accidentally\n             * change any values in the referenced object\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n            /*\n             * check if the the canvas is empty which means the student has\n             * not drawn anything yet\n             */\n            if (this.isCanvasEmpty()) {\n              performUpdate = true;\n            } else {\n              /*\n               * the student has drawn on the canvas so we\n               * will ask them if they want to update it\n               */\n              var answer = confirm(this.$translate('draw.doYouWantToUpdateTheConnectedDrawing'));\n\n              if (answer) {\n                // the student answered yes\n                performUpdate = true;\n              }\n            }\n\n            if (performUpdate) {\n\n              if (!connectedComponentParams.includeBackground) {\n                // remove the background from the draw data\n                this.DrawService.removeBackgroundFromComponentState(componentState);\n              }\n\n              // update the draw data\n              this.setDrawData(componentState);\n\n              // the table has changed\n              this.$scope.drawController.isDirty = true;\n              this.$scope.drawController.isSubmitDirty = true;\n            }\n\n            /*\n             * remember the component state and connected component params\n             * in case we need to use them again later\n             */\n            this.latestConnectedComponentState = componentState;\n            this.latestConnectedComponentParams = connectedComponentParams;\n          }\n        }\n      }\n    }));\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Initialize the drawing tool\n   */\n  initializeDrawingTool() {\n\n    this.drawingTool = new DrawingTool('#' + this.drawingToolId, {\n      stamps: this.componentContent.stamps || {},\n      parseSVG: true,\n      width: this.width,\n      height: this.height\n    });\n    var state = null;\n    $('#set-background').on('click', angular.bind(this, function () {\n      this.drawingTool.setBackgroundImage($('#background-src').val());\n    }));\n    $('#resize-background').on('click', angular.bind(this, function () {\n      this.drawingTool.resizeBackgroundToCanvas();\n    }));\n    $('#resize-canvas').on('click', angular.bind(this, function () {\n      this.drawingTool.resizeCanvasToBackground();\n    }));\n    $('#shrink-background').on('click', angular.bind(this, function () {\n      this.drawingTool.shrinkBackgroundToCanvas();\n    }));\n    $('#clear').on('click', angular.bind(this, function () {\n      this.drawingTool.clear(true);\n    }));\n    $('#save').on('click', angular.bind(this, function () {\n      state = drawingTool.save();\n      $('#load').removeAttr('disabled');\n    }));\n    $('#load').on('click', angular.bind(this, function () {\n      if (state === null) return;\n      this.drawingTool.load(state);\n    }));\n\n    var componentState = null;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.DrawService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null ||\n             !this.DrawService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * only import work or use starter draw data if the student\n         * does not already have work for this component\n         */\n\n        // get the starter draw data if any\n        var starterDrawData = this.componentContent.starterDrawData;\n        if (starterDrawData != null) {\n          // there is starter draw data so we will populate it into the draw tool\n          this.drawingTool.load(starterDrawData);\n\n          if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n          }\n        } else {\n          if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n          }\n        }\n      }\n    } else if (this.mode == 'authoring') {\n\n      if (this.componentContent.starterDrawData != null) {\n        // there is starter draw data so we will populate it into the draw tool\n        this.drawingTool.load(this.componentContent.starterDrawData);\n      }\n\n      if (this.componentContent.background != null) {\n        this.drawingTool.setBackgroundImage(this.componentContent.background);\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    // register this component with the parent node\n    if (this.$scope.$parent && this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /*\n     * Wait before we start listening for the drawing:changed event. We need to wait\n     * because the calls above to this.drawingTool.setBackgroundImage() will cause\n     * the drawing:changed event to be fired from the drawingTool, but when that happens,\n     * we don't want to call this.studentDataChanged() because it marks the student work\n     * as dirty. We only want to call this.studentDataChanged() when the drawing:changed\n     * event occurs in response to the student changing the drawing and this timeout\n     * will help make sure of that.\n     */\n    this.$timeout(angular.bind(this, () => {\n      this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n    }), 500);\n\n    if (this.mode === 'student') {\n      // listen for selected tool changed event\n      this.drawingTool.on('tool:changed', function (toolName) {\n        // log this event\n        var category = 'Tool';\n        var event = 'toolSelected';\n        var data = {};\n        data.selectedToolName = toolName;\n        this.StudentDataService.saveComponentEvent(this, category, event, data);\n      }.bind(this));\n    }\n\n    if (this.mode === 'grading' || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n      // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n      $('#' + this.drawingToolId).find('.dt-tools').hide();\n    } else {\n      // show or hide the draw tools\n      this.setupTools();\n    }\n  }\n\n  /**\n   * Setup the tools that we will make available to the student\n   */\n  setupTools() {\n\n    // get the tools values from the authored content\n    var tools = this.componentContent.tools;\n\n    if (tools == null) {\n      // we will display all the tools\n    } else {\n      // we will only display the tools the authored specified to show\n\n      // the title for the select button\n      var selectTitle = this.$translate('draw.selectToolTooltip');\n      let $drawingTool = $('#' + this.drawingToolId);\n\n      if (tools.select) {\n        $drawingTool.find('[title=\"' + selectTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + selectTitle + '\"]').hide();\n      }\n\n      // the title for the line button\n      var lineTitle = this.$translate('draw.lineToolTooltip');\n\n      if (tools.line) {\n        $drawingTool.find('[title=\"' + lineTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + lineTitle + '\"]').hide();\n      }\n\n      // the title for the shape button\n      var shapeTitle = this.$translate('draw.shapeToolTooltip');\n\n      if (tools.shape) {\n        $drawingTool.find('[title=\"' + shapeTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + shapeTitle + '\"]').hide();\n      }\n\n      // the title for the free hand button\n      var freeHandTitle = this.$translate('draw.freeHandToolTooltip');\n\n      if (tools.freeHand) {\n        $drawingTool.find('[title=\"' + freeHandTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + freeHandTitle + '\"]').hide();\n      }\n\n      // the title for the text button\n      var textTitle = this.$translate('draw.textToolTooltip');\n\n      if (tools.text) {\n        $drawingTool.find('[title=\"' + textTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + textTitle + '\"]').hide();\n      }\n\n      // the title for the stamp button\n      var stampTitle = this.$translate('draw.stampToolTooltip');\n\n      if (tools.stamp) {\n        $drawingTool.find('[title=\"' + stampTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + stampTitle + '\"]').hide();\n      }\n\n      // the title for the clone button\n      var cloneTitle = this.$translate('draw.cloneToolTooltip');\n\n      if (tools.clone) {\n        $drawingTool.find('[title=\"' + cloneTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + cloneTitle + '\"]').hide();\n      }\n\n      // the title for the stroke color button\n      var strokeColorTitle = this.$translate('draw.strokeColorToolTooltip');\n\n      if (tools.strokeColor) {\n        $drawingTool.find('[title=\"' + strokeColorTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + strokeColorTitle + '\"]').hide();\n      }\n\n      // the title for the fill color button\n      var fillColorTitle = this.$translate('draw.fillColorToolTooltip');\n\n      if (tools.fillColor) {\n        $drawingTool.find('[title=\"' + fillColorTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + fillColorTitle + '\"]').hide();\n      }\n\n      // the title for the stroke width button\n      var strokeWidthTitle = this.$translate('draw.strokeWidthToolTooltip');\n\n      if (tools.strokeWidth) {\n        $drawingTool.find('[title=\"' + strokeWidthTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + strokeWidthTitle + '\"]').hide();\n      }\n\n      // the title for the send back button\n      var sendBackTitle = this.$translate('draw.sendBackToolTooltip');\n\n      if (tools.sendBack) {\n        $drawingTool.find('[title=\"' + sendBackTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + sendBackTitle + '\"]').hide();\n      }\n\n      // the title for the send forward button\n      var sendForwardTitle = this.$translate('draw.sendForwardToolTooltip');\n\n      if (tools.sendForward) {\n        $drawingTool.find('[title=\"' + sendForwardTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + sendForwardTitle + '\"]').hide();\n      }\n\n      // the title for the undo button\n      var undoTitle = this.$translate('draw.undo');\n\n      if (tools.undo) {\n        $drawingTool.find('[title=\"' + undoTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + undoTitle + '\"]').hide();\n      }\n\n      // the title for the redo button\n      var redoTitle = this.$translate('draw.redo');\n\n      if (tools.redo) {\n        $drawingTool.find('[title=\"' + redoTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + redoTitle + '\"]').hide();\n      }\n\n      // the title for the delete button\n      var deleteTitle = this.$translate('draw.deleteToolTooltip');\n\n      if (tools.delete) {\n        $drawingTool.find('[title=\"' + deleteTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + deleteTitle + '\"]').hide();\n      }\n\n      if (this.isDisabled) {\n        $drawingTool.find('.dt-tools').hide();\n      }\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // set the draw data\n      this.setDrawData(componentState);\n\n      /*\n       * check if the latest component state is a submit and perform\n       * any necessary processing\n       */\n       this.processLatestSubmit();\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * The reset button was clicked\n   */\n  resetButtonClicked() {\n\n    // ask the student if they are sure they want to clear the drawing\n    var result = confirm(this.$translate('draw.areYouSureYouWantToClearYourDrawing'));\n\n    if (result) {\n      // clear the drawing\n      this.drawingTool.clear();\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (this.latestConnectedComponentState && this.latestConnectedComponentParams) {\n        // reload the student data from the connected component\n        this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n      } else if (this.componentContent.starterDrawData != null) {\n        // this component has starter draw data\n\n        // there is starter draw data so we will populate it into the draw tool\n        this.drawingTool.load(this.componentContent.starterDrawData);\n      }\n\n      if (this.componentContent.background != null && this.componentContent.background != '') {\n        // set the background\n        this.drawingTool.setBackgroundImage(this.componentContent.background);\n      }\n\n      this.parentStudentWorkIds = null;\n    }\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    // get the draw JSON string\n    var studentDataJSONString = this.getDrawData();\n\n    // set the draw JSON string into the draw data\n    studentData.drawData = studentDataJSONString;\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.parentStudentWorkIds != null) {\n      studentData.parentStudentWorkIds = this.parentStudentWorkIds;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Draw';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Add student asset images as objects in the drawing canvas\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n            oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n            // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n            //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n            //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n            //oImg.center();\n            oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n            this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n          });\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the draw data\n   * @return the draw data from the drawing tool as a JSON string\n   */\n  getDrawData() {\n    var drawData = null;\n\n    drawData = this.drawingTool.save();\n\n    return drawData;\n  };\n\n  /**\n   * Get the image object representation of the student data\n   * @returns an image object\n   */\n  getImageObject() {\n    var pngFile = null;\n\n    if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n      // get the image as a base64 string\n      var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n\n      // get the image object\n      pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n    }\n\n    return pngFile;\n  }\n\n  /**\n   * Set the draw data\n   * @param componentState the component state\n   */\n  setDrawData(componentState) {\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        // get the draw data\n        var drawData = studentData.drawData;\n\n        if (drawData != null && drawData != '' && drawData != '{}') {\n          // set the draw data into the drawing tool\n          this.drawingTool.load(drawData);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the student has drawn anything\n   * @returns whether the canvas is empty\n   */\n  isCanvasEmpty() {\n\n    var result = true;\n\n    if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n      // get the objects in the canvas where the student draws\n      var objects = this.drawingTool.canvas.getObjects();\n\n      if (objects != null && objects.length > 0) {\n        // there are objects in the canvas\n        result = false;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Snip the drawing by converting it to an image\n   * @param $event the click event\n   */\n  snipDrawing($event, studentWorkId) {\n    // get the canvas element\n    var canvas = angular.element('#drawingtool_' + this.nodeId + '_' + this.componentId + ' canvas');\n\n    if (canvas != null && canvas.length > 0) {\n\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      var img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // create a notebook item with the image populated into it\n      const noteText = null;\n      this.NotebookService.addNote($event, imageObject, noteText, [ studentWorkId ]);\n    }\n  }\n\n  snipButtonClicked($event) {\n    if (this.isDirty) {\n      const deregisterListener = this.$scope.$on('studentWorkSavedToServer',\n        (event, args) => {\n          let componentState = args.studentWork;\n          if (componentState &&\n            this.nodeId === componentState.nodeId &&\n            this.componentId === componentState.componentId) {\n            this.snipDrawing($event, componentState.id);\n            deregisterListener();\n          }\n        }\n      );\n      this.saveButtonClicked(); // trigger a save\n    } else {\n      const studentWork =\n          this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId)\n      this.snipDrawing($event, studentWork.id);\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      // used to collect the objects from all the component states\n      let allObjects = [];\n\n      // the draw data from the first component state\n      let firstDrawData = {};\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState.componentType == 'Draw') {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            let drawData = studentData.drawData;\n\n            if (drawData != null) {\n\n              // convert the JSON string to a JSON object\n              let drawDataJSON = angular.fromJson(drawData);\n\n              if (drawDataJSON != null &&\n                drawDataJSON.canvas != null &&\n                drawDataJSON.canvas.objects != null) {\n\n                if (c == 0) {\n                  // remember the first draw data\n                  firstDrawData = drawDataJSON;\n                }\n\n                // append the objects\n                allObjects = allObjects.concat(drawDataJSON.canvas.objects);\n              }\n            }\n          }\n        } else if (componentState.componentType == 'Graph' ||\n            componentState.componentType == 'ConceptMap' ||\n            componentState.componentType == 'Embedded' ||\n            componentState.componentType == 'Label' ||\n            componentState.componentType == 'Table') {\n          let connectedComponent =\n            this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n          if (connectedComponent.importWorkAsBackground === true) {\n            this.setComponentStateAsBackgroundImage(componentState);\n          }\n        }\n      }\n\n      if (allObjects != null) {\n\n        // create the draw data with all the objects\n        let drawData = firstDrawData;\n\n        if (drawData != null &&\n            drawData.canvas != null &&\n            drawData.canvas.objects != null) {\n\n          drawData.canvas.objects = allObjects;\n        }\n\n        // set the draw data JSON string into the component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.drawData = angular.toJson(drawData);\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.drawingTool.setBackgroundImage(image.url);\n    });\n  }\n}\n\nDrawController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'DrawService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'];\n\nexport default DrawController;\n"]}