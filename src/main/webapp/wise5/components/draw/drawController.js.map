{"version":3,"sources":["drawController.es6"],"names":[],"mappings":"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","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                ConfigService,\n                DrawService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the reset button is visible or not\n        this.isResetButtonVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetButtonVisible = true;\n\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipDrawingButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function () {\n                // running this in side a timeout ensures that the code only runs after the markup is rendered.\n                // maybe there's a better way to do this, like with an event?\n\n                // initialize the drawing tool\n                this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n                    stamps: this.componentContent.stamps || {},\n                    parseSVG: true\n                });\n                var state = null;\n                $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n                }));\n                $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeBackgroundToCanvas();\n                }));\n                $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeCanvasToBackground();\n                }));\n                $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.shrinkBackgroundToCanvas();\n                }));\n                $(\"#clear\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.clear(true);\n                }));\n                $(\"#save\").on(\"click\", angular.bind(this, function () {\n                    state = drawingTool.save();\n                    $(\"#load\").removeAttr(\"disabled\");\n                }));\n                $(\"#load\").on(\"click\", angular.bind(this, function () {\n                    if (state === null) return;\n                    this.drawingTool.load(state);\n                }));\n\n                var componentState = null;\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                if (this.componentContent.background != null) {\n                    // set the background from the component content\n                    this.drawingTool.setBackgroundImage(this.componentContent.background);\n                }\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                // register this component with the parent node\n                if (this.$scope.$parent && this.$scope.$parent.registerComponentController) {\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n\n                // listen for the drawing changed event\n                this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n                // listen for selected tool changed event\n                this.drawingTool.on('tool:changed', function (toolName) {\n                    // log this event\n                    var category = \"Tool\";\n                    var event = \"toolSelected\";\n                    var data = {};\n                    data.selectedToolName = toolName;\n                    this.StudentDataService.saveComponentEvent(this, category, event, data);\n                }.bind(this));\n\n                if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n                    // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n                    $(\".dt-tools\").hide();\n                }\n\n                // show or hide the draw tools\n                this.setupTools();\n            }));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.drawController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.drawController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.drawController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * check if the the canvas is empty which means the student has\n                         * not drawn anything yet\n                         */\n                        if (this.isCanvasEmpty()) {\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has drawn on the canvas so we\n                             * will ask them if they want to update it\n                             */\n                            var answer = confirm('Do you want to update the connected drawing?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                        }\n\n                        if (performUpdate) {\n\n                            if (!connectedComponentParams.includeBackground) {\n                                // remove the background from the draw data\n                                this.DrawService.removeBackgroundFromComponentState(componentState);\n                            }\n\n                            // update the draw data\n                            this.setDrawData(componentState);\n\n                            // the table has changed\n                            this.$scope.drawController.isDirty = true;\n                            this.$scope.drawController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n    }  // end of constructor\n\n    /**\n     * Setup the tools that we will make available to the student\n     */\n    setupTools() {\n\n        // get the tools values from the authored content\n        var tools = this.componentContent.tools;\n\n        if (tools == null) {\n            // we will display all the tools\n        } else {\n            // we will only display the tools the authored specified to show\n\n            // the title for the select button\n            var selectTitle = \"Select tool\";\n\n            if (tools.select) {\n                $('#' + this.componentId).find('[title=\"' + selectTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + selectTitle + '\"]').hide();\n            }\n\n            // the title for the line button\n            var lineTitle = \"Line tool (click and hold to show available line types)\";\n\n            if (tools.line) {\n                $('#' + this.componentId).find('[title=\"' + lineTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + lineTitle + '\"]').hide();\n            }\n\n            // the title for the shape button\n            var shapeTitle = \"Basic shape tool (click and hold to show available shapes)\";\n\n            if (tools.shape) {\n                $('#' + this.componentId).find('[title=\"' + shapeTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + shapeTitle + '\"]').hide();\n            }\n\n            // the title for the free hand button\n            var freeHandTitle = \"Free hand drawing tool\";\n\n            if (tools.freeHand) {\n                $('#' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').hide();\n            }\n\n            // the title for the text button\n            var textTitle = \"Text tool (click and hold to show available font sizes)\";\n\n            if (tools.text) {\n                $('#' + this.componentId).find('[title=\"' + textTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + textTitle + '\"]').hide();\n            }\n\n            // the title for the stamp button\n            var stampTitle = \"Stamp tool (click and hold to show available categories)\";\n\n            if (tools.stamp) {\n                $('#' + this.componentId).find('[title=\"' + stampTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + stampTitle + '\"]').hide();\n            }\n\n            // the title for the clone button\n            var cloneTitle = \"Clone tool\";\n\n            if (tools.clone) {\n                $('#' + this.componentId).find('[title=\"' + cloneTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + cloneTitle + '\"]').hide();\n            }\n\n            // the title for the stroke color button\n            var strokeColorTitle = \"Stroke color (click and hold to show available colors)\";\n\n            if (tools.strokeColor) {\n                $('#' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').hide();\n            }\n\n            // the title for the fill color button\n            var fillColorTitle = \"Fill color (click and hold to show available colors)\";\n\n            if (tools.fillColor) {\n                $('#' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').hide();\n            }\n\n            // the title for the stroke width button\n            var strokeWidthTitle = \"Stroke width (click and hold to show available options)\";\n\n            if (tools.strokeWidth) {\n                $('#' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').hide();\n            }\n\n            // the title for the send back button\n            var sendBackTitle = \"Send selected objects to back\";\n\n            if (tools.sendBack) {\n                $('#' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').hide();\n            }\n\n            // the title for the send forward button\n            var sendForwardTitle = \"Send selected objects to front\";\n\n            if (tools.sendForward) {\n                $('#' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').hide();\n            }\n\n            // the title for the undo button\n            var undoTitle = \"Undo\";\n\n            if (tools.undo) {\n                $('#' + this.componentId).find('[title=\"' + undoTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + undoTitle + '\"]').hide();\n            }\n\n            // the title for the redo button\n            var redoTitle = \"Redo\";\n\n            if (tools.redo) {\n                $('#' + this.componentId).find('[title=\"' + redoTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + redoTitle + '\"]').hide();\n            }\n\n            // the title for the delete button\n            var deleteTitle = \"Delete selected objects\";\n\n            if (tools.delete) {\n                $('#' + this.componentId).find('[title=\"' + deleteTitle + '\"]').show();\n            } else {\n                $('#' + this.componentId).find('[title=\"' + deleteTitle + '\"]').hide();\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // set the draw data\n            this.setDrawData(componentState);\n\n            /*\n             * check if the latest component state is a submit and perform\n             * any necessary processing\n             */\n            this.processLatestSubmit();\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The reset button was clicked\n     */\n    resetButtonClicked() {\n\n        // ask the student if they are sure they want to clear the drawing\n        var result = confirm('Are you sure you want to clear your drawing?');\n\n        if (result) {\n            // clear the drawing\n            this.drawingTool.clear();\n\n            // check if we need to reload student data from a connected component\n            var latestConnectedComponentState = this.latestConnectedComponentState;\n            var latestConnectedComponentParams = this.latestConnectedComponentParams;\n\n            if (latestConnectedComponentState && latestConnectedComponentParams) {\n                // reload the student data from the connected component\n                this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n            }\n        }\n    }\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Add student asset images as objects in the drawing canvas\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the draw data\n     * @param componentState the component state\n     */\n    setDrawData(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the student has drawn anything\n     * @returns whether the canvas is empty\n     */\n    isCanvasEmpty() {\n\n        var result = true;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the objects in the canvas where the student draws\n            var objects = this.drawingTool.canvas.getObjects();\n\n            if (objects != null && objects.length > 0) {\n                // there are objects in the canvas\n                result = false;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        return this.isSnipDrawingButtonVisible;\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n}\n\nDrawController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'DrawService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'];\n\nexport default DrawController;\n"]}