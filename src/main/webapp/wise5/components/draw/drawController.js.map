{"version":3,"sources":["drawController.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAGM,cAAc;AAChB,aADE,cAAc,CACJ,SAAS,EACT,UAAU,EACV,MAAM,EACN,QAAQ,EACR,WAAW,EACX,WAAW,EACX,cAAc,EACd,mBAAmB,EACnB,kBAAkB,EAAE;8BAT9B,cAAc;;AAUZ,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,YAAI,CAAC,cAAc,GAAG,cAAc,CAAC;AACrC,YAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;AAC/C,YAAI,CAAC,kBAAkB,GAAG,kBAAkB;;;AAAC,AAI7C,YAAI,CAAC,MAAM,GAAG,IAAI;;;AAAC,AAGnB,YAAI,CAAC,WAAW,GAAG,IAAI;;;AAAC,AAGxB,YAAI,CAAC,gBAAgB,GAAG,IAAI;;;AAAC,AAG7B,YAAI,CAAC,yBAAyB,GAAG,IAAI;;;AAAC,AAGtC,YAAI,CAAC,UAAU,GAAG,KAAK;;;AAAC,AAGxB,YAAI,CAAC,OAAO,GAAG,KAAK;;;AAAC,AAGrB,YAAI,CAAC,kBAAkB,GAAG,KAAK;;;AAAC,AAGhC,YAAI,CAAC,QAAQ,GAAG,KAAK;;;AAAC,AAGtB,YAAI,CAAC,WAAW,GAAG,IAAI;;;AAAC,AAGxB,YAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB;;;AAAC,AAGrD,YAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,MAAM,CAAC,yBAAyB;;;AAAC,AAGvE,YAAI,CAAC,0BAA0B,GAAG,KAAK;;;;;AAAC,AAKxC,YAAI,CAAC,IAAI,GAAG,QAAQ;;;;AAAC,AAIrB,YAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;AAClB,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;SAChC;;;AAAA,AAGD,YAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;AAC3D,YAAI,WAAW,IAAI,IAAI,EAAE;AACrB,gBAAI,CAAC,MAAM,GAAG,WAAW,CAAC,EAAE,CAAC;SAChC,MAAM;AACH,gBAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;SACpC;;AAED,YAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;;;AAG/B,gBAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE;;;AAAC,AAG5C,gBAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;;AAEhD,gBAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;AACzB,oBAAI,CAAC,aAAa,GAAG,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;aAC9E,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;;AAEhE,oBAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;AAChD,oBAAI,cAAc,IAAI,IAAI,EAAE;AACxB,wBAAI,CAAC,aAAa,GAAG,cAAc,GAAG,cAAc,CAAC,EAAE,CAAC;iBAC3D;aACJ,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;AAClC,oBAAI,CAAC,aAAa,GAAG,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;AAC3E,oBAAI,CAAC,2BAA2B,EAAE,CAAC;;AAEnC,sBAAM,CAAC,MAAM,CAAC,YAAW;AACrB,2BAAO,IAAI,CAAC,yBAAyB,CAAC;iBACzC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAS,QAAQ,EAAE,QAAQ,EAAE;AACvC,wBAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBAC1E,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;aACvB;;AAED,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;;;;;AAKzC,oBAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE;AACzD,0BAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,EAAE;AAC1C,4BAAQ,EAAE,IAAI;iBACjB,CAAC,CAAC;AACH,oBAAI,KAAK,GAAG,IAAI,CAAC;AACjB,iBAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAC5D,wBAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;iBACnE,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAC/D,wBAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;iBAC/C,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAC3D,wBAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;iBAC/C,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAC/D,wBAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;iBAC/C,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AACnD,wBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAChC,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAClD,yBAAK,GAAG,sBAAY,IAAI,EAAE,CAAC;AAC3B,qBAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;iBACrC,CAAC,CAAC,CAAC;AACJ,iBAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY;AAClD,wBAAI,KAAK,KAAK,IAAI,EAAE,OAAO;AAC3B,wBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAChC,CAAC,CAAC;;;AAAC,AAGJ,oBAAI,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;;AAE1E,oBAAI,cAAc,GAAG,IAAI,CAAC;;AAE1B,oBAAI,sBAAsB,IAAI,IAAI,EAAE;;AAEhC,wBAAI,CAAC,kBAAkB,GAAG,IAAI;;;AAAC,AAG/B,wBAAI,2BAA2B,GAAG,IAAI,CAAC,gBAAgB,CAAC,2BAA2B;;;AAAC,AAGpF,wBAAI,2BAA2B,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,sBAAsB,CAAC;;;AAAC,AAGrG,wBAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,2BAA2B,EAAE,2BAA2B,CAAC;;;AAAC,AAG3H,kCAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,sBAAsB,EAAE,2BAA2B,CAAC;;;AAAC,AAG5I,wBAAI,CAAC,cAAc,CAAC,cAAc,CAAC;;;AAAC,AAGpC,wBAAI,CAAC,UAAU,GAAG,IAAI;;;AAAC,AAGvB,wBAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;iBACvF,MAAM;;;;AAIH,kCAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc;;;AAAC,AAG5C,wBAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC;;AAEnF,wBAAI,cAAc,IAAI,IAAI,EAAE;;;;;;;AAOxB,4BAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;AAC9D,4BAAI,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC;;AAExE,4BAAI,gBAAgB,IAAI,IAAI,IAAI,qBAAqB,IAAI,IAAI,EAAE;;AAE3D,gCAAI,CAAC,UAAU,EAAE,CAAC;yBACrB;qBACJ,MAAM;;AAEH,4BAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;qBACvC;;;AAAA,AAGD,wBAAI,CAAC,iBAAiB,EAAE;;;AAAC,AAGzB,wBAAI,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,EAAE;AACxE,4BAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;qBACvF;;;AAAA,AAGD,wBAAI,CAAC,WAAW,CAAC,EAAE,CAAC,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;;;AAAC,AAGpF,wBAAI,CAAC,WAAW,CAAC,EAAE,CAAC,cAAc,EAAE,UAAU,QAAQ,EAAE;;AAEpD,4BAAI,QAAQ,GAAG,MAAM,CAAC;AACtB,4BAAI,KAAK,GAAG,cAAc,CAAC;AAC3B,4BAAI,IAAI,GAAG,EAAE,CAAC;AACd,4BAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;AACjC,4BAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;qBAC3E,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEd,wBAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;;AAEzD,yBAAC,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;qBACzB;iBACJ;aAEJ,CAAC,CAAC,CAAC;SACP;;;;;;;;AAAA,AAQD,YAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG,YAAW;;AAEvC,gBAAI,cAAc,GAAG,IAAI,CAAC;;AAE1B,gBAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE;;AAEpC,8BAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,oBAAoB,EAAE;;;AAAC,AAGnE,oBAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,GAAG,KAAK,CAAC;aAC9C;;AAED,mBAAO,cAAc,CAAC;SACzB,CAAC,IAAI,CAAC,IAAI,CAAC;;;;;AAAC,AAKb,YAAI,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE;;;AAG1E,gBAAI,MAAM,GAAG,IAAI,CAAC,MAAM;;;AAAC,AAGzB,gBAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;;AAExB,oBAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;;AAE1B,wBAAI,CAAC,UAAU,GAAG,IAAI,CAAC;iBAC1B;aACJ;SACJ,CAAC,CAAC;;;;;;;AAAC,AAOJ,YAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE,EAEpE,CAAC,CAAC,CAAC;KAEP;;;;;;AAAA;iBAhRC,cAAc;;uCAsRD,cAAc,EAAE;;AAE3B,gBAAI,cAAc,IAAI,IAAI,EAAE;;;AAGxB,oBAAI,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;;AAE7C,oBAAI,WAAW,IAAI,IAAI,EAAE;;;AAGrB,wBAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;;AAEpC,wBAAI,QAAQ,IAAI,IAAI,EAAE;;AAElB,4BAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACnC;iBACJ;aACJ;SACJ;;;;;;;4CAKmB;;;AAGhB,gBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC;SACrG;;;;;;;8CAKqB;AAClB,gBAAI,CAAC,QAAQ,GAAG,IAAI;;;AAAC,AAGrB,gBAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;AAC1B,oBAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B;;;AAAA,AAGD,gBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC;SACvG;;;;;;;6CAKoB;;;;;AAKjB,gBAAI,CAAC,OAAO,GAAG,IAAI;;;AAAC,AAGpB,gBAAI,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE;;;AAAC,AAGxC,gBAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,EAAE;;;;;;;;AAAC,AAQjD,gBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAC,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,cAAc,EAAC,CAAC,CAAC;SAChH;;;;;;;;+CAMsB;;;AAGnB,gBAAI,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC;;AAEhE,gBAAI,cAAc,IAAI,IAAI,EAAE;AACxB,oBAAI,WAAW,GAAG,EAAE;;;AAAC,AAGrB,oBAAI,qBAAqB,GAAG,IAAI,CAAC,WAAW,EAAE;;;AAAC,AAG/C,2BAAW,CAAC,QAAQ,GAAG,qBAAqB,CAAC;;AAE7C,oBAAI,IAAI,CAAC,QAAQ,EAAE;;AAEf,kCAAc,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ;;;;;;AAAC,AAMxC,wBAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;iBACzB;;;AAAA,AAGD,8BAAc,CAAC,WAAW,GAAG,WAAW,CAAC;aAC5C;;AAED,mBAAO,cAAc,CAAC;SACzB;;;;;;;4CAKmB;;AAEhB,gBAAI,MAAM,GAAG,IAAI,CAAC,MAAM;;;AAAC,AAGzB,gBAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;;AAE7C,gBAAI,gBAAgB,IAAI,IAAI,EAAE;;;AAG1B,oBAAI,gBAAgB,CAAC,UAAU,EAAE;AAC7B,wBAAI,CAAC,UAAU,GAAG,IAAI,CAAC;iBAC1B,MAAM,IAAI,gBAAgB,CAAC,eAAe,EAAE;;;;AAIzC,wBAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,wCAAwC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC;;;AAAC,AAGtH,wBAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;;AAEpE,wBAAI,WAAW,EAAE;;AAEb,4BAAI,CAAC,UAAU,GAAG,IAAI,CAAC;qBAC1B;iBACJ;aACJ;;AAED,gBAAI,IAAI,CAAC,IAAI,KAAK,qBAAqB,EAAE;;AAErC,oBAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B;SACJ;;;;;;;;yCAMgB;AACb,gBAAI,IAAI,GAAG,KAAK,CAAC;;AAEjB,gBAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;;;AAG/B,oBAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE;AACtC,wBAAI,GAAG,IAAI,CAAC;iBACf;aACJ;;AAED,mBAAO,IAAI,CAAC;SACf;;;;;;;;2CAMkB;AACf,gBAAI,IAAI,GAAG,KAAK,CAAC;;AAEjB,gBAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;;;AAG/B,oBAAI,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;AACxC,wBAAI,GAAG,IAAI,CAAC;iBACf;aACJ;;AAED,mBAAO,IAAI,CAAC;SACf;;;;;;;;4CAMmB;AAChB,gBAAI,MAAM,GAAG,KAAK,CAAC;;AAEnB,gBAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;;;AAG/B,oBAAI,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE;AACvC,0BAAM,GAAG,IAAI,CAAC;iBACjB;aACJ;;AAED,mBAAO,MAAM,CAAC;SACjB;;;sDAE6B,YAAY,EAAE;AACxC,gBAAI,YAAY,CAAC,YAAY,IAAI,IAAI,EAAE;;AAEnC,oBAAI,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC;AAC7C,oBAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,WAAW,EAAE;AACvG,wBAAI,WAAW,IAAI,IAAI,EAAE;AACrB,8BAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,IAAI,EAAE;AACpE,gCAAI,CAAC,YAAY,CAAC,GAAG,CAAC;;;;;AAAC,AAKvB,gCAAI,CAAC,cAAc,GAAG,WAAW,CAAC,EAAE;AAAC,AACrC,gCAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;AAAC,yBACrC,CAAC,CAAC,CAAC;qBACP;iBACJ,CAAC,CAAC,CAAC;aACP,MAAM,IAAI,YAAY,CAAC,WAAW,IAAI,IAAI,EAAE;;AAEzC,wBAAI,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;;AAE3C,wBAAI,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC;;AAE9C,wBAAI,aAAa,IAAI,IAAI,EAAE;AACvB,4BAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC;;AAEjE,4BAAI,YAAY,IAAI,IAAI,EAAE;AACtB,gCAAI,eAAe,GAAG,YAAY,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;;AAErE,gCAAI,eAAe,IAAI,IAAI,EAAE;AACzB,oCAAI,CAAC,eAAe,IAAI,eAAe,CAAC;AACxC,oCAAI,CAAC,kBAAkB,EAAE,CAAC;6BAC7B;yBACJ;qBACJ;iBACJ;SACJ;;;;;;;oCAKW;AACR,gBAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,gBAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;AAC/B,sBAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;aACzC;;AAED,mBAAO,MAAM,CAAC;SACjB;;;;;;;;sCAMa;AACV,gBAAI,QAAQ,GAAG,IAAI,CAAC;;AAEpB,oBAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;;AAEnC,mBAAO,QAAQ,CAAC;SACnB;;;;;;;qCAKY;;;AAGT,gBAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;;AAE7C,gBAAI,gBAAgB,IAAI,IAAI,EAAE;;AAE1B,oBAAI,gBAAgB,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;AACzD,oBAAI,qBAAqB,GAAG,gBAAgB,CAAC,qBAAqB,CAAC;;AAEnE,oBAAI,gBAAgB,IAAI,IAAI,IAAI,qBAAqB,IAAI,IAAI,EAAE;;;AAG3D,wBAAI,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC;;;;;;AAAC,AAM1H,wBAAG,cAAc,IAAI,IAAI,EAAE;;;;AAIvB,4BAAI,wBAAwB,GAAG,IAAI,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;;AAE9I,4BAAI,wBAAwB,IAAI,IAAI,EAAE;;;;;AAKlC,gCAAI,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,wBAAwB,CAAC;;;AAAC,AAGhG,gCAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;yBAChD;qBACJ;iBACJ;aACJ;SACJ;;;;;;;;yCAMgB;AACb,gBAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;;AAE3C,mBAAO,WAAW,CAAC;SACtB;;;;;;;wDAK+B;;;AAG5B,gBAAI,CAAC,2BAA2B,EAAE;;;AAAC,AAGnC,gBAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;SACrC;;;;;;;;gEAMuC;;AAEpC,gBAAI;;;;;AAKA,oBAAI,sBAAsB,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,mCAAmC,CAAC;;;AAAC,AAGxF,oBAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC;;;AAAC,AAG5F,oBAAI,CAAC,gBAAgB,GAAG,sBAAsB;;;AAAC,AAG/C,oBAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;aACrC,CAAC,OAAM,CAAC,EAAE,EAEV;SACJ;;;;;;;sDAK6B;AAC1B,gBAAI,CAAC,mCAAmC,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;SAChG;;;;;;;;+CAMsB;;;;;;AAMnB,gBAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE;;AAEjF,oBAAI,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;aAC7C,CAAC,CAAC,CAAC;SACP;;;WAzoBC,cAAc;;;AA6oBpB,cAAc,CAAC,OAAO,GAAG,CAAC,WAAW,EACjC,YAAY,EACZ,QAAQ,EACR,UAAU,EACV,aAAa,EACb,aAAa,EACb,gBAAgB,EAChB,qBAAqB,EACrB,oBAAoB,CAAC,CAAC;;kBAEX,cAAc","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $timeout,\n                DrawService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // [\"normal\", \"showStudentWorkOnly\"]\n        // whether this component is to be rendered normally or as part of show student work.\n        // If showStudentWorkOnly, usually this means that this component is not editable and nothing will be saved\n        this.mode = \"normal\";\n\n        // setup\n        // set mode if it's passed in through the scope.\n        if (this.$scope.mode) {\n            this.mode = this.$scope.mode;\n        }\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n            } else if (this.mode === 'authoring') {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function () {\n                // running this in side a timeout ensures that the code only runs after the markup is rendered.\n                // maybe there's a better way to do this, like with an event?\n\n                // initialize the drawing tool\n                this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n                    stamps: this.componentContent.stamps || {},\n                    parseSVG: true\n                });\n                var state = null;\n                $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n                }));\n                $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeBackgroundToCanvas();\n                }));\n                $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeCanvasToBackground();\n                }));\n                $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.shrinkBackgroundToCanvas();\n                }));\n                $(\"#clear\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.clear(true);\n                }));\n                $(\"#save\").on(\"click\", angular.bind(this, function () {\n                    state = drawingTool.save();\n                    $(\"#load\").removeAttr(\"disabled\");\n                }));\n                $(\"#load\").on(\"click\", angular.bind(this, function () {\n                    if (state === null) return;\n                    this.drawingTool.load(state);\n                }));\n\n                // get the show previous work node id if it is provided\n                var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n                var componentState = null;\n\n                if (showPreviousWorkNodeId != null) {\n                    // this component is showing previous work\n                    this.isShowPreviousWork = true;\n\n                    // get the show previous work component id if it is provided\n                    var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                    // get the node content for the other node\n                    var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                    // get the node content for the component we are showing previous work for\n                    this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                    // get the component state for the show previous work\n                    componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n\n                    // disable the component since we are just showing previous work\n                    this.isDisabled = true;\n\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                } else {\n                    // this is a regular component\n\n                    // get the component state from the scope\n                    componentState = this.$scope.componentState;\n\n                    // set whether studentAttachment is enabled\n                    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                    if (componentState == null) {\n                        /*\n                         * only import work if the student does not already have\n                         * work for this component\n                         */\n\n                        // check if we need to import work\n                        var importWorkNodeId = this.componentContent.importWorkNodeId;\n                        var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                        if (importWorkNodeId != null && importWorkComponentId != null) {\n                            // import the work from the other component\n                            this.importWork();\n                        }\n                    } else {\n                        // populate the student work into this component\n                        this.setStudentWork(componentState);\n                    }\n\n                    // check if we need to lock this component\n                    this.calculateDisabled();\n\n                    // register this component with the parent node\n                    if (this.$scope.$parent && this.$scope.$parent.registerComponentController) {\n                        this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                    }\n\n                    // listen for the drawing changed event\n                    this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n                    // listen for selected tool changed event\n                    this.drawingTool.on('tool:changed', function (toolName) {\n                        // log this event\n                        var category = \"Tool\";\n                        var event = \"toolSelected\";\n                        var data = {};\n                        data.selectedToolName = toolName;\n                        this.StudentDataService.saveComponentEvent(this, category, event, data);\n                    }.bind(this));\n\n                    if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n                        // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n                        $(\".dt-tools\").hide();\n                    }\n                }\n\n            }));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.drawController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.drawController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.drawController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n    }  // end of constructor\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, angular.bind(this, function(oImg) {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    }));\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // we're importing a StudentWorkNotebookItem\n            var studentWork = notebookItem.studentWork;\n\n            var componentType = studentWork.componentType;\n\n            if (componentType != null) {\n                var childService = this.$injector.get(componentType + 'Service');\n\n                if (childService != null) {\n                    var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                    if (studentWorkHTML != null) {\n                        this.studentResponse += studentWorkHTML;\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n}\n\nDrawController.$inject = ['$injector',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'DrawService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'];\n\nexport default DrawController;\n"]}