{"version":3,"sources":["drawController.es6"],"names":[],"mappings":"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","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $timeout,\n                DrawService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // [\"normal\", \"showStudentWorkOnly\"]\n        // whether this component is to be rendered normally or as part of show student work.\n        // If showStudentWorkOnly, usually this means that this component is not editable and nothing will be saved\n        this.mode = \"normal\";\n\n        // setup\n        // set mode if it's passed in through the scope.\n        if (this.$scope.mode) {\n            this.mode = this.$scope.mode;\n        }\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n            } else if (this.mode === 'authoring') {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function () {\n                // running this in side a timeout ensures that the code only runs after the markup is rendered.\n                // maybe there's a better way to do this, like with an event?\n\n                // initialize the drawing tool\n                this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n                    stamps: this.componentContent.stamps || {},\n                    parseSVG: true\n                });\n                var state = null;\n                $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n                }));\n                $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeBackgroundToCanvas();\n                }));\n                $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.resizeCanvasToBackground();\n                }));\n                $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.shrinkBackgroundToCanvas();\n                }));\n                $(\"#clear\").on(\"click\", angular.bind(this, function () {\n                    this.drawingTool.clear(true);\n                }));\n                $(\"#save\").on(\"click\", angular.bind(this, function () {\n                    state = drawingTool.save();\n                    $(\"#load\").removeAttr(\"disabled\");\n                }));\n                $(\"#load\").on(\"click\", angular.bind(this, function () {\n                    if (state === null) return;\n                    this.drawingTool.load(state);\n                }));\n\n                // get the show previous work node id if it is provided\n                var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n                var componentState = null;\n\n                if (showPreviousWorkNodeId != null) {\n                    // this component is showing previous work\n                    this.isShowPreviousWork = true;\n\n                    // get the show previous work component id if it is provided\n                    var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                    // get the node content for the other node\n                    var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                    // get the node content for the component we are showing previous work for\n                    this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                    // get the component state for the show previous work\n                    componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n\n                    // disable the component since we are just showing previous work\n                    this.isDisabled = true;\n\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                } else {\n                    // this is a regular component\n\n                    // get the component state from the scope\n                    componentState = this.$scope.componentState;\n\n                    // set whether studentAttachment is enabled\n                    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                    if (componentState == null) {\n                        /*\n                         * only import work if the student does not already have\n                         * work for this component\n                         */\n\n                        // check if we need to import work\n                        var importWorkNodeId = this.componentContent.importWorkNodeId;\n                        var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                        if (importWorkNodeId != null && importWorkComponentId != null) {\n                            // import the work from the other component\n                            this.importWork();\n                        }\n                    } else {\n                        // populate the student work into this component\n                        this.setStudentWork(componentState);\n                    }\n\n                    // check if we need to lock this component\n                    this.calculateDisabled();\n\n                    // register this component with the parent node\n                    if (this.$scope.$parent && this.$scope.$parent.registerComponentController) {\n                        this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                    }\n\n                    // listen for the drawing changed event\n                    this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n                    // listen for selected tool changed event\n                    this.drawingTool.on('tool:changed', function (toolName) {\n                        // log this event\n                        var category = \"Tool\";\n                        var event = \"toolSelected\";\n                        var data = {};\n                        data.selectedToolName = toolName;\n                        this.StudentDataService.saveComponentEvent(this, category, event, data);\n                    }.bind(this));\n\n                    if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n                        // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n                        $(\".dt-tools\").hide();\n                    }\n                }\n\n            }));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.drawController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.drawController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.drawController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n    }  // end of constructor\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, angular.bind(this, function(oImg) {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    }));\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // we're importing a StudentWorkNotebookItem\n            var studentWork = notebookItem.studentWork;\n\n            var componentType = studentWork.componentType;\n\n            if (componentType != null) {\n                var childService = this.$injector.get(componentType + 'Service');\n\n                if (childService != null) {\n                    var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                    if (studentWorkHTML != null) {\n                        this.studentResponse += studentWorkHTML;\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n}\n\nDrawController.$inject = ['$injector',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'DrawService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'];\n\nexport default DrawController;\n"]}