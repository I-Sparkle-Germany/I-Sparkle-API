{"version":3,"sources":["drawController.es6"],"names":["DrawController","$injector","$q","$rootScope","$scope","$timeout","ConfigService","DrawService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isSaveButtonVisible","isSubmitButtonVisible","isResetButtonVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","isShowPreviousWork","isSubmit","drawingTool","originalComponentContent","isStudentAttachmentEnabled","mode","workgroupId","teacherWorkgroupId","latestConnectedComponentState","latestConnectedComponentParams","width","height","currentNode","getCurrentNode","id","componentType","type","showSaveButton","showSubmitButton","drawingToolId","latestAnnotations","$parent","nodeController","getLatestComponentAnnotations","componentState","isPromptVisible","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","angular","initializeDrawingTool","getComponentState","deferred","defer","getState","action","drawController","createComponentState","then","resolve","promise","$on","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","isConnectedComponent","connectedComponentParams","getConnectedComponentParams","updateOn","performUpdate","makeCopyOfJSONObject","isCanvasEmpty","answer","confirm","includeBackground","removeBackgroundFromComponentState","setDrawData","imageObject","getImageObject","DrawingTool","stamps","parseSVG","state","$","on","setBackgroundImage","val","resizeBackgroundToCanvas","resizeCanvasToBackground","shrinkBackgroundToCanvas","clear","save","removeAttr","load","background","importPreviousWorkNodeId","importPreviousWorkComponentId","starterDrawData","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","calculateDisabled","registerComponentController","studentDataChanged","toolName","category","data","selectedToolName","saveComponentEvent","hide","setupTools","tools","selectTitle","select","find","show","lineTitle","line","shapeTitle","shape","freeHandTitle","freeHand","textTitle","stampTitle","stamp","cloneTitle","clone","strokeColorTitle","strokeColor","fillColorTitle","fillColor","strokeWidthTitle","strokeWidth","sendBackTitle","sendBack","sendForwardTitle","sendForward","undoTitle","undo","redoTitle","redo","deleteTitle","delete","processLatestSubmit","latestState","result","isLockAfterSubmit","getComponentId","createNewComponentState","studentData","studentDataJSONString","getDrawData","drawData","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentAsset","copyAssetForReference","copiedAsset","fabric","Image","fromURL","url","oImg","scaleToWidth","studentAssetId","canvas","add","prompt","showPreviousWorkPrompt","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","objects","getObjects","length","message","isNotebookEnabled","$event","element","addNewItem","exitListener","$broadcast","component","componentHasWork","importPreviousWork","Stamps","push","index","splice","starterDrawDataJSONObject","dt","$inject"],"mappings":"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","file":"drawController.js","sourcesContent":["import drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\n\nclass DrawController {\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                ConfigService,\n                DrawService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.DrawService = DrawService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the reset button is visible or not\n        this.isResetButtonVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // will hold the drawing tool object\n        this.drawingTool = null;\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n        \n        // the default width and height of the canvas\n        this.width = 800;\n        this.height = 600;\n        \n        if (this.componentContent.width != null) {\n            this.width = this.componentContent.width;\n        }\n        \n        if (this.componentContent.height != null) {\n            this.height = this.componentContent.height;\n        }\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === \"student\") {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetButtonVisible = true;\n\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n\n                // get the latest annotations\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading' || this.mode === \"onlyShowWork\") {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n                if (componentState != null) {\n                    this.drawingToolId = \"drawingtool_\" + componentState.id;\n                }\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipDrawingButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.drawingToolId = \"drawingtool_\" + this.nodeId + \"_\" + this.componentId;\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            // running this in side a timeout ensures that the code only runs after the markup is rendered.\n            // maybe there's a better way to do this, like with an event?\n            this.$timeout(angular.bind(this, this.initializeDrawingTool));\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.drawController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.drawController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.drawController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * check if the the canvas is empty which means the student has\n                         * not drawn anything yet\n                         */\n                        if (this.isCanvasEmpty()) {\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has drawn on the canvas so we\n                             * will ask them if they want to update it\n                             */\n                            var answer = confirm('Do you want to update the connected drawing?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                        }\n\n                        if (performUpdate) {\n\n                            if (!connectedComponentParams.includeBackground) {\n                                // remove the background from the draw data\n                                this.DrawService.removeBackgroundFromComponentState(componentState);\n                            }\n\n                            // update the draw data\n                            this.setDrawData(componentState);\n\n                            // the table has changed\n                            this.$scope.drawController.isDirty = true;\n                            this.$scope.drawController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n    }  // end of constructor\n\n    /**\n     * Initialize the drawing tool\n     */\n    initializeDrawingTool() {\n        \n        this.drawingTool = new DrawingTool(\"#\" + this.drawingToolId, {\n            stamps: this.componentContent.stamps || {},\n            parseSVG: true,\n            width: this.width,\n            height: this.height\n        });\n        var state = null;\n        $(\"#set-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.setBackgroundImage($(\"#background-src\").val());\n        }));\n        $(\"#resize-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.resizeBackgroundToCanvas();\n        }));\n        $(\"#resize-canvas\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.resizeCanvasToBackground();\n        }));\n        $(\"#shrink-background\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.shrinkBackgroundToCanvas();\n        }));\n        $(\"#clear\").on(\"click\", angular.bind(this, function () {\n            this.drawingTool.clear(true);\n        }));\n        $(\"#save\").on(\"click\", angular.bind(this, function () {\n            state = drawingTool.save();\n            $(\"#load\").removeAttr(\"disabled\");\n        }));\n        $(\"#load\").on(\"click\", angular.bind(this, function () {\n            if (state === null) return;\n            this.drawingTool.load(state);\n        }));\n\n        var componentState = null;\n\n        // get the component state from the scope\n        componentState = this.$scope.componentState;\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n        }\n\n        if (componentState == null) {\n            /*\n             * only import work or use starter draw data if the student \n             * does not already have work for this component\n             */\n\n            // check if we need to import work\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n            \n            // get the starter draw data if any\n            var starterDrawData = this.componentContent.starterDrawData;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n            \n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (starterDrawData != null) {\n                // there is starter draw data so we will populate it into the draw tool\n                this.drawingTool.load(starterDrawData);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        // register this component with the parent node\n        if (this.$scope.$parent && this.$scope.$parent.nodeController != null) {\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n\n        // listen for the drawing changed event\n        this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n\n        // listen for selected tool changed event\n        this.drawingTool.on('tool:changed', function (toolName) {\n            // log this event\n            var category = \"Tool\";\n            var event = \"toolSelected\";\n            var data = {};\n            data.selectedToolName = toolName;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }.bind(this));\n\n        if (this.mode === 'grading' || this.mode === 'onlyShowWork') {\n            // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n            $(\".dt-tools\").hide();\n        }\n\n        // show or hide the draw tools\n        this.setupTools();\n    }\n\n    /**\n     * Setup the tools that we will make available to the student\n     */\n    setupTools() {\n\n        // get the tools values from the authored content\n        var tools = this.componentContent.tools;\n\n        if (tools == null) {\n            // we will display all the tools\n        } else {\n            // we will only display the tools the authored specified to show\n\n            // the title for the select button\n            var selectTitle = \"Select tool\";\n\n            if (tools.select) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + selectTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + selectTitle + '\"]').hide();\n            }\n\n            // the title for the line button\n            var lineTitle = \"Line tool (click and hold to show available line types)\";\n\n            if (tools.line) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + lineTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + lineTitle + '\"]').hide();\n            }\n\n            // the title for the shape button\n            var shapeTitle = \"Basic shape tool (click and hold to show available shapes)\";\n\n            if (tools.shape) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + shapeTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + shapeTitle + '\"]').hide();\n            }\n\n            // the title for the free hand button\n            var freeHandTitle = \"Free hand drawing tool\";\n\n            if (tools.freeHand) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + freeHandTitle + '\"]').hide();\n            }\n\n            // the title for the text button\n            var textTitle = \"Text tool (click and hold to show available font sizes)\";\n\n            if (tools.text) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + textTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + textTitle + '\"]').hide();\n            }\n\n            // the title for the stamp button\n            var stampTitle = \"Stamp tool (click and hold to show available categories)\";\n\n            if (tools.stamp) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + stampTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + stampTitle + '\"]').hide();\n            }\n\n            // the title for the clone button\n            var cloneTitle = \"Clone tool\";\n\n            if (tools.clone) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + cloneTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + cloneTitle + '\"]').hide();\n            }\n\n            // the title for the stroke color button\n            var strokeColorTitle = \"Stroke color (click and hold to show available colors)\";\n\n            if (tools.strokeColor) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeColorTitle + '\"]').hide();\n            }\n\n            // the title for the fill color button\n            var fillColorTitle = \"Fill color (click and hold to show available colors)\";\n\n            if (tools.fillColor) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + fillColorTitle + '\"]').hide();\n            }\n\n            // the title for the stroke width button\n            var strokeWidthTitle = \"Stroke width (click and hold to show available options)\";\n\n            if (tools.strokeWidth) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + strokeWidthTitle + '\"]').hide();\n            }\n\n            // the title for the send back button\n            var sendBackTitle = \"Send selected objects to back\";\n\n            if (tools.sendBack) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendBackTitle + '\"]').hide();\n            }\n\n            // the title for the send forward button\n            var sendForwardTitle = \"Send selected objects to front\";\n\n            if (tools.sendForward) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + sendForwardTitle + '\"]').hide();\n            }\n\n            // the title for the undo button\n            var undoTitle = \"Undo\";\n\n            if (tools.undo) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + undoTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + undoTitle + '\"]').hide();\n            }\n\n            // the title for the redo button\n            var redoTitle = \"Redo\";\n\n            if (tools.redo) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + redoTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + redoTitle + '\"]').hide();\n            }\n\n            // the title for the delete button\n            var deleteTitle = \"Delete selected objects\";\n\n            if (tools.delete) {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + deleteTitle + '\"]').show();\n            } else {\n                $('#drawingtool_' + this.nodeId + '_' + this.componentId).find('[title=\"' + deleteTitle + '\"]').hide();\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // set the draw data\n            this.setDrawData(componentState);\n\n            /*\n             * check if the latest component state is a submit and perform\n             * any necessary processing\n             */\n            this.processLatestSubmit();\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The reset button was clicked\n     */\n    resetButtonClicked() {\n\n        // ask the student if they are sure they want to clear the drawing\n        var result = confirm('Are you sure you want to clear your drawing?');\n\n        if (result) {\n            // clear the drawing\n            this.drawingTool.clear();\n\n            // check if we need to reload student data from a connected component\n            var latestConnectedComponentState = this.latestConnectedComponentState;\n            var latestConnectedComponentParams = this.latestConnectedComponentParams;\n            \n            // get the starter draw data if any\n            var starterDrawData = this.componentContent.starterDrawData;\n            \n            if (latestConnectedComponentState && latestConnectedComponentParams) {\n                // reload the student data from the connected component\n                this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n            } else if (starterDrawData != null) {\n                // there is starter draw data so we will populate it into the draw tool\n                this.drawingTool.load(starterDrawData);\n            }\n        }\n    }\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // get the draw JSON string\n            var studentDataJSONString = this.getDrawData();\n\n            // set the draw JSON string into the draw data\n            studentData.drawData = studentDataJSONString;\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n\n        if (this.mode === 'showStudentWorkOnly') {\n            // distable saving if we're in showStudentWorkOnly mode\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Add student asset images as objects in the drawing canvas\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n                        oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n                        // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n                        //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n                        //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n                        //oImg.center();\n                        oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n                        this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the draw data\n     * @return the draw data from the drawing tool as a JSON string\n     */\n    getDrawData() {\n        var drawData = null;\n\n        drawData = this.drawingTool.save();\n\n        return drawData;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                \n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                \n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the draw data\n     * @param componentState the component state\n     */\n    setDrawData(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the draw data\n                var drawData = studentData.drawData;\n\n                if (drawData != null) {\n                    // set the draw data into the drawing tool\n                    this.drawingTool.load(drawData);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the student has drawn anything\n     * @returns whether the canvas is empty\n     */\n    isCanvasEmpty() {\n\n        var result = true;\n\n        if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n            // get the objects in the canvas where the student draws\n            var objects = this.drawingTool.canvas.getObjects();\n\n            if (objects != null && objects.length > 0) {\n                // there are objects in the canvas\n                result = false;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#drawingtool_' + this.nodeId + '_' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work \n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Add a stamp in the authoring\n     */\n    authoringAddStampButtonClicked() {\n        \n        // create the stamps field in the content if it does not exist\n        if (this.authoringComponentContent != null) {\n            \n            // create a stamps object if it does not exist\n            if (this.authoringComponentContent.stamps == null) {\n                this.authoringComponentContent.stamps = {};\n            }\n            \n            // create the Stamps array if it does not exist\n            if (this.authoringComponentContent.stamps.Stamps == null) {\n                this.authoringComponentContent.stamps.Stamps = [];\n            }\n        }\n        \n        /*\n         * create the stamp as an empty string that the author will replace\n         * with a file name or url\n         */\n        this.authoringComponentContent.stamps.Stamps.push('');\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Move a stamp up in the authoring view\n     * @param index the index of the stamp\n     */\n    authoringStampUpClicked(index) {\n        \n        // check if the stamp is not already at the top\n        if (index != 0) {\n            // the stamp is not at the top\n            \n            // get the stamp string\n            var stamp = this.authoringComponentContent.stamps.Stamps[index];\n            \n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n            \n            // insert the stamp back into the array\n            this.authoringComponentContent.stamps.Stamps.splice(index - 1, 0, stamp);\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * Move the stamp down in the authoring view\n     * @param index the index of the stamp\n     */\n    authoringStampDownClicked(index) {\n        \n        // check if the stamp is already at the bottom\n        if (index != this.authoringComponentContent.stamps.Stamps.length - 1) {\n            // the stamp is not at the bottom\n            \n            // get the stamp string\n            var stamp = this.authoringComponentContent.stamps.Stamps[index];\n            \n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n            \n            // insert the stamp back into the array\n            this.authoringComponentContent.stamps.Stamps.splice(index + 1, 0, stamp);\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * Delete a stamp from the authoring view\n     * @param index the index of the stamp\n     */\n    authoringDeleteStampClicked(index) {\n        \n        // ask the author if they are sure they want to delete the stamp\n        var answer = confirm('Are you sure you want to delete this stamp?\\n\\n' + this.authoringComponentContent.stamps.Stamps[index]);\n        \n        if (answer) {\n            \n            // remove the stamp\n            this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * Enable all the tools\n     */\n    authoringEnableAllToolsButtonClicked() {\n        \n        // enable all the tools\n        this.authoringComponentContent.tools.select = true;\n        this.authoringComponentContent.tools.line = true;\n        this.authoringComponentContent.tools.shape = true;\n        this.authoringComponentContent.tools.freeHand = true;\n        this.authoringComponentContent.tools.text = true;\n        this.authoringComponentContent.tools.stamp = true;\n        this.authoringComponentContent.tools.strokeColor = true;\n        this.authoringComponentContent.tools.fillColor = true;\n        this.authoringComponentContent.tools.clone = true;\n        this.authoringComponentContent.tools.strokeWidth = true;\n        this.authoringComponentContent.tools.sendBack = true;\n        this.authoringComponentContent.tools.sendForward = true;\n        this.authoringComponentContent.tools.undo = true;\n        this.authoringComponentContent.tools.redo = true;\n        this.authoringComponentContent.tools.delete = true;\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Disable all the tools\n     */\n    authoringDisableAllToolsButtonClicked() {\n        \n        // disable all the tools\n        this.authoringComponentContent.tools.select = false;\n        this.authoringComponentContent.tools.line = false;\n        this.authoringComponentContent.tools.shape = false;\n        this.authoringComponentContent.tools.freeHand = false;\n        this.authoringComponentContent.tools.text = false;\n        this.authoringComponentContent.tools.stamp = false;\n        this.authoringComponentContent.tools.strokeColor = false;\n        this.authoringComponentContent.tools.fillColor = false;\n        this.authoringComponentContent.tools.clone = false;\n        this.authoringComponentContent.tools.strokeWidth = false;\n        this.authoringComponentContent.tools.sendBack = false;\n        this.authoringComponentContent.tools.sendForward = false;\n        this.authoringComponentContent.tools.undo = false;\n        this.authoringComponentContent.tools.redo = false;\n        this.authoringComponentContent.tools.delete = false;\n    }\n    \n    /**\n     * Save the starter draw data\n     */\n    authoringSaveStarterDrawData() {\n        \n        // get the draw data\n        var drawData = this.getDrawData();\n        \n        // set the starter draw data\n        this.authoringComponentContent.starterDrawData = drawData;\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Delete the starter draw data\n     */\n    authoringDeleteStarterDrawData() {\n        \n        // remove the starter draw data\n        this.authoringComponentContent.starterDrawData = null;\n        \n        // clear the drawing\n        this.drawingTool.clear();\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The author has changed the width\n     */\n    authoringViewWidthChanged() {\n        \n        // update the width\n        this.width = this.authoringComponentContent.width;\n        \n        // update the starter draw data if there is any\n        if (this.authoringComponentContent.starterDrawData != null) {\n            \n            // get the starter draw data as a JSON object\n            var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n            \n            if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n                \n                // update the width in the starter draw data\n                starterDrawDataJSONObject.dt.width = this.width;\n                \n                // set the starter draw data back into the component content\n                this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n            }\n        }\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n        \n        // re-initialize the drawing tool so the width is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n    \n    /**\n     * The author has changed the height\n     */\n    authoringViewHeightChanged() {\n        \n        // update the height\n        this.height = this.authoringComponentContent.height;\n        \n        // update the starter draw data if there is any\n        if (this.authoringComponentContent.starterDrawData != null) {\n            \n            // get the starter draw data as a JSON object\n            var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n            \n            if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n                \n                // update the height in the starter draw data\n                starterDrawDataJSONObject.dt.height = this.height;\n                \n                // set the starter draw data back into the component content\n                this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n            }\n        }\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n        \n        // re-initialize the drawing tool so the height is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n    \n    /**\n     * The author has enabled or disabled a tool\n     */\n    authoringViewToolClicked() {\n        \n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n        \n        // re-initialize the drawing tool so the height is updated\n        this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n}\n\nDrawController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'DrawService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'];\n\nexport default DrawController;\n"]}