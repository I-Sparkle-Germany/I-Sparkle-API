{"version":3,"sources":["drawController.es6"],"names":["DrawController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","DrawService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","isResetButtonVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","drawingTool","originalComponentContent","latestConnectedComponentState","latestConnectedComponentParams","width","height","componentContent","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","componentId","id","componentType","mode","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","drawingToolId","nodeId","latestAnnotations","getLatestComponentAnnotations","workgroupId","componentState","isPromptVisible","isDisabled","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","submitCounter","initializeDrawingTool","angular","getComponentState","isSubmit","deferred","defer","getState","action","drawController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","isConnectedComponent","connectedComponentParams","getConnectedComponentParams","updateOn","performUpdate","makeCopyOfJSONObject","isCanvasEmpty","answer","confirm","includeBackground","removeBackgroundFromComponentState","setDrawData","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","background","authoringViewBackgroundChanged","stampIndex","targetObject","setStampImage","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","requester","notebookItem","studentWorkId","content","studentWorkIds","importWorkByStudentWorkId","$broadcast","DrawingTool","stamps","parseSVG","state","on","setBackgroundImage","val","resizeBackgroundToCanvas","resizeCanvasToBackground","shrinkBackgroundToCanvas","clear","save","removeAttr","load","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","starterDrawData","importWorkNodeId","importWorkComponentId","importWork","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","studentDataChanged","toolName","category","data","selectedToolName","saveComponentEvent","find","setupTools","tools","selectTitle","$drawingTool","select","show","lineTitle","line","shapeTitle","shape","freeHandTitle","freeHand","textTitle","stampTitle","stamp","cloneTitle","clone","strokeColorTitle","strokeColor","fillColorTitle","fillColor","strokeWidthTitle","strokeWidth","sendBackTitle","sendBack","sendForwardTitle","sendForward","undoTitle","undo","redoTitle","redo","deleteTitle","delete","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","result","overwrite","parentStudentWorkIds","isLockAfterSubmit","getComponentId","createNewComponentState","studentData","studentDataJSONString","getDrawData","drawData","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentAsset","copyAssetForReference","copiedAsset","fabric","Image","fromURL","url","oImg","scaleToWidth","studentAssetId","canvas","add","prompt","showPreviousWorkPrompt","importWorkComponentState","conceptMapData","serviceName","has","service","get","createImage","image","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","objects","getObjects","length","time","saveMessage","isNotebookEnabled","$event","element","noteText","addNote","deregisterListener","snipDrawing","saveButtonClicked","exitListener","component","componentHasWork","Stamps","push","authoringViewComponentChanged","index","splice","starterDrawDataJSONObject","dt","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","starterDrawDataJSON","backgroundImage","src","projectAssetsDirectoryPath","newSrc","newConnectedComponent","connectedComponents","setShowSubmitButtonValue","tags","tag","c","connectedComponent","mergedComponentState","createMergedComponentState","allObjects","firstDrawData","drawDataJSON","concat","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","generateImageFromComponentState","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","authoringGetConnectedComponentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","isSpaceExists","insertMode","visibleSpace","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","$inject"],"mappings":"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","file":"drawController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport drawingTool from 'lib/drawingTool/drawing-tool';\nimport drawingToolVendor from 'lib/drawingTool/vendor.min';\nimport html2canvas from 'html2canvas';\n\nclass DrawController extends ComponentController {\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      DrawService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.DrawService = DrawService;\n\n    // whether the reset button is visible or not\n    this.isResetButtonVisible = false;\n\n    // whether the snip drawing button is shown or not\n    this.isSnipDrawingButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // will hold the drawing tool object\n    this.drawingTool = null;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    this.latestConnectedComponentState = null;\n    this.latestConnectedComponentParams = null;\n\n    // the default width and height of the canvas\n    this.width = 800;\n    this.height = 600;\n\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      // get the component type\n      this.componentType = this.componentContent.type;\n\n      if (this.mode === 'student') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.isResetButtonVisible = true;\n\n        this.drawingToolId = 'drawingtool_' + this.nodeId + '_' + this.componentId;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n        this.isSnipDrawingButtonVisible = false;\n\n        // get the component state from the scope\n        let componentState = this.$scope.componentState;\n\n        if (componentState != null) {\n          // create a unique id for the application drawing tool element using this component state\n          this.drawingToolId = 'drawingtool_' + componentState.id;\n          if (this.mode === 'gradingRevision') {\n            this.drawingToolId = 'drawingtool_gradingRevision_' + componentState.id;\n          }\n        }\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'showPreviousWork') {\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n        if (componentState != null) {\n          this.drawingToolId = 'drawingtool_' + componentState.id;\n        }\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipDrawingButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.isResetButtonVisible = true;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.drawingToolId = 'drawingtool_' + this.nodeId + '_' + this.componentId;\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n          this.submitCounter = 0;\n          this.initializeDrawingTool();\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        }.bind(this), true);\n      }\n\n      // running this in side a timeout ensures that the code only runs after the markup is rendered.\n      // maybe there's a better way to do this, like with an event?\n      this.$timeout(angular.bind(this, this.initializeDrawingTool));\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      let deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.drawController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.drawController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.drawController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n\n      // check if the component state is from a connected component\n      if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n        // get the connected component params\n        var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n        if (connectedComponentParams != null) {\n\n          if (connectedComponentParams.updateOn === 'save' ||\n            (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n            var performUpdate = false;\n\n            /*\n             * make a copy of the component state so we don't accidentally\n             * change any values in the referenced object\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n            /*\n             * check if the the canvas is empty which means the student has\n             * not drawn anything yet\n             */\n            if (this.isCanvasEmpty()) {\n              performUpdate = true;\n            } else {\n              /*\n               * the student has drawn on the canvas so we\n               * will ask them if they want to update it\n               */\n              var answer = confirm(this.$translate('draw.doYouWantToUpdateTheConnectedDrawing'));\n\n              if (answer) {\n                // the student answered yes\n                performUpdate = true;\n              }\n            }\n\n            if (performUpdate) {\n\n              if (!connectedComponentParams.includeBackground) {\n                // remove the background from the draw data\n                this.DrawService.removeBackgroundFromComponentState(componentState);\n              }\n\n              // update the draw data\n              this.setDrawData(componentState);\n\n              // the table has changed\n              this.$scope.drawController.isDirty = true;\n              this.$scope.drawController.isSubmitDirty = true;\n            }\n\n            /*\n             * remember the component state and connected component params\n             * in case we need to use them again later\n             */\n            this.latestConnectedComponentState = componentState;\n            this.latestConnectedComponentParams = connectedComponentParams;\n          }\n        }\n      }\n    }));\n\n    /*\n     * Listen for the requestImage event which is fired when something needs\n     * an image representation of the student data from a specific\n     * component.\n     */\n    this.$scope.$on('requestImage', (event, args) => {\n      // get the node id and component id from the args\n      var nodeId = args.nodeId;\n      var componentId = args.componentId;\n\n      // check if the image is being requested from this component\n      if (this.nodeId === nodeId && this.componentId === componentId) {\n\n        // obtain the image blob\n        var imageObject = this.getImageObject();\n\n        if (imageObject != null) {\n          var args = {};\n          args.nodeId = nodeId;\n          args.componentId = componentId;\n          args.imageObject = imageObject;\n\n          // fire an event that contains the image object\n          this.$scope.$emit('requestImageCallback', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.background = fileName;\n\n                /*\n                 * the authoring view background has changed so we will\n                 * perform any changes if needed and then save the project\n                 */\n                this.authoringViewBackgroundChanged();\n              } else if (args.target == 'stamp') {\n                // the target is a stamp\n\n                // get the index of the stamp\n                var stampIndex = args.targetObject;\n\n                // get the file name\n                var fileName = assetItem.fileName;\n\n                // set the stamp image\n                this.setStampImage(stampIndex, fileName);\n\n                /*\n                 * the authoring view background has changed so we will\n                 * perform any changes if needed and then save the project\n                 */\n                this.authoringViewBackgroundChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$scope.$on('notebookItemChosen', (event, args) => {\n      if (args.requester == this.nodeId + '-' + this.componentId) {\n        const notebookItem = args.notebookItem;\n        const studentWorkId = notebookItem.content.studentWorkIds[0];\n        this.importWorkByStudentWorkId(studentWorkId);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Initialize the drawing tool\n   */\n  initializeDrawingTool() {\n\n    this.drawingTool = new DrawingTool('#' + this.drawingToolId, {\n      stamps: this.componentContent.stamps || {},\n      parseSVG: true,\n      width: this.width,\n      height: this.height\n    });\n    var state = null;\n    $('#set-background').on('click', angular.bind(this, function () {\n      this.drawingTool.setBackgroundImage($('#background-src').val());\n    }));\n    $('#resize-background').on('click', angular.bind(this, function () {\n      this.drawingTool.resizeBackgroundToCanvas();\n    }));\n    $('#resize-canvas').on('click', angular.bind(this, function () {\n      this.drawingTool.resizeCanvasToBackground();\n    }));\n    $('#shrink-background').on('click', angular.bind(this, function () {\n      this.drawingTool.shrinkBackgroundToCanvas();\n    }));\n    $('#clear').on('click', angular.bind(this, function () {\n      this.drawingTool.clear(true);\n    }));\n    $('#save').on('click', angular.bind(this, function () {\n      state = drawingTool.save();\n      $('#load').removeAttr('disabled');\n    }));\n    $('#load').on('click', angular.bind(this, function () {\n      if (state === null) return;\n      this.drawingTool.load(state);\n    }));\n\n    var componentState = null;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.DrawService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null ||\n             !this.DrawService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * only import work or use starter draw data if the student\n         * does not already have work for this component\n         */\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        // get the starter draw data if any\n        var starterDrawData = this.componentContent.starterDrawData;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n          if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n          }\n\n          // import the work from the other component\n          this.importWork();\n        } else if (starterDrawData != null) {\n          // there is starter draw data so we will populate it into the draw tool\n          this.drawingTool.load(starterDrawData);\n\n          if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n          }\n        } else {\n          if (this.componentContent.background != null) {\n            // set the background from the component content\n            this.drawingTool.setBackgroundImage(this.componentContent.background);\n          }\n        }\n      }\n    } else if (this.mode == 'authoring') {\n\n      if (this.componentContent.starterDrawData != null) {\n        // there is starter draw data so we will populate it into the draw tool\n        this.drawingTool.load(this.componentContent.starterDrawData);\n      }\n\n      if (this.componentContent.background != null) {\n        this.drawingTool.setBackgroundImage(this.componentContent.background);\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // check if we need to lock this component\n    this.calculateDisabled();\n\n    // register this component with the parent node\n    if (this.$scope.$parent && this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /*\n     * Wait before we start listening for the drawing:changed event. We need to wait\n     * because the calls above to this.drawingTool.setBackgroundImage() will cause\n     * the drawing:changed event to be fired from the drawingTool, but when that happens,\n     * we don't want to call this.studentDataChanged() because it marks the student work\n     * as dirty. We only want to call this.studentDataChanged() when the drawing:changed\n     * event occurs in response to the student changing the drawing and this timeout\n     * will help make sure of that.\n     */\n    this.$timeout(angular.bind(this, () => {\n      this.drawingTool.on('drawing:changed', angular.bind(this, this.studentDataChanged));\n    }), 500);\n\n    if (this.mode === 'student') {\n      // listen for selected tool changed event\n      this.drawingTool.on('tool:changed', function (toolName) {\n        // log this event\n        var category = 'Tool';\n        var event = 'toolSelected';\n        var data = {};\n        data.selectedToolName = toolName;\n        this.StudentDataService.saveComponentEvent(this, category, event, data);\n      }.bind(this));\n    }\n\n    if (this.mode === 'grading' || this.mode === 'gradingRevision' || this.mode === 'onlyShowWork') {\n      // we're in show student work mode, so hide the toolbar and make the drawing non-editable\n      $('#' + this.drawingToolId).find('.dt-tools').hide();\n    } else {\n      // show or hide the draw tools\n      this.setupTools();\n    }\n  }\n\n  /**\n   * Setup the tools that we will make available to the student\n   */\n  setupTools() {\n\n    // get the tools values from the authored content\n    var tools = this.componentContent.tools;\n\n    if (tools == null) {\n      // we will display all the tools\n    } else {\n      // we will only display the tools the authored specified to show\n\n      // the title for the select button\n      var selectTitle = this.$translate('draw.selectToolTooltip');\n      let $drawingTool = $('#' + this.drawingToolId);\n\n      if (tools.select) {\n        $drawingTool.find('[title=\"' + selectTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + selectTitle + '\"]').hide();\n      }\n\n      // the title for the line button\n      var lineTitle = this.$translate('draw.lineToolTooltip');\n\n      if (tools.line) {\n        $drawingTool.find('[title=\"' + lineTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + lineTitle + '\"]').hide();\n      }\n\n      // the title for the shape button\n      var shapeTitle = this.$translate('draw.shapeToolTooltip');\n\n      if (tools.shape) {\n        $drawingTool.find('[title=\"' + shapeTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + shapeTitle + '\"]').hide();\n      }\n\n      // the title for the free hand button\n      var freeHandTitle = this.$translate('draw.freeHandToolTooltip');\n\n      if (tools.freeHand) {\n        $drawingTool.find('[title=\"' + freeHandTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + freeHandTitle + '\"]').hide();\n      }\n\n      // the title for the text button\n      var textTitle = this.$translate('draw.textToolTooltip');\n\n      if (tools.text) {\n        $drawingTool.find('[title=\"' + textTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + textTitle + '\"]').hide();\n      }\n\n      // the title for the stamp button\n      var stampTitle = this.$translate('draw.stampToolTooltip');\n\n      if (tools.stamp) {\n        $drawingTool.find('[title=\"' + stampTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + stampTitle + '\"]').hide();\n      }\n\n      // the title for the clone button\n      var cloneTitle = this.$translate('draw.cloneToolTooltip');\n\n      if (tools.clone) {\n        $drawingTool.find('[title=\"' + cloneTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + cloneTitle + '\"]').hide();\n      }\n\n      // the title for the stroke color button\n      var strokeColorTitle = this.$translate('draw.strokeColorToolTooltip');\n\n      if (tools.strokeColor) {\n        $drawingTool.find('[title=\"' + strokeColorTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + strokeColorTitle + '\"]').hide();\n      }\n\n      // the title for the fill color button\n      var fillColorTitle = this.$translate('draw.fillColorToolTooltip');\n\n      if (tools.fillColor) {\n        $drawingTool.find('[title=\"' + fillColorTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + fillColorTitle + '\"]').hide();\n      }\n\n      // the title for the stroke width button\n      var strokeWidthTitle = this.$translate('draw.strokeWidthToolTooltip');\n\n      if (tools.strokeWidth) {\n        $drawingTool.find('[title=\"' + strokeWidthTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + strokeWidthTitle + '\"]').hide();\n      }\n\n      // the title for the send back button\n      var sendBackTitle = this.$translate('draw.sendBackToolTooltip');\n\n      if (tools.sendBack) {\n        $drawingTool.find('[title=\"' + sendBackTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + sendBackTitle + '\"]').hide();\n      }\n\n      // the title for the send forward button\n      var sendForwardTitle = this.$translate('draw.sendForwardToolTooltip');\n\n      if (tools.sendForward) {\n        $drawingTool.find('[title=\"' + sendForwardTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + sendForwardTitle + '\"]').hide();\n      }\n\n      // the title for the undo button\n      var undoTitle = this.$translate('draw.undo');\n\n      if (tools.undo) {\n        $drawingTool.find('[title=\"' + undoTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + undoTitle + '\"]').hide();\n      }\n\n      // the title for the redo button\n      var redoTitle = this.$translate('draw.redo');\n\n      if (tools.redo) {\n        $drawingTool.find('[title=\"' + redoTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + redoTitle + '\"]').hide();\n      }\n\n      // the title for the delete button\n      var deleteTitle = this.$translate('draw.deleteToolTooltip');\n\n      if (tools.delete) {\n        $drawingTool.find('[title=\"' + deleteTitle + '\"]').show();\n      } else {\n        $drawingTool.find('[title=\"' + deleteTitle + '\"]').hide();\n      }\n\n      if (this.isDisabled) {\n        $drawingTool.find('.dt-tools').hide();\n      }\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // set the draw data\n      this.setDrawData(componentState);\n\n      /*\n       * check if the latest component state is a submit and perform\n       * any necessary processing\n       */\n       this.processLatestSubmit();\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  /**\n   * The reset button was clicked\n   */\n  resetButtonClicked() {\n\n    // ask the student if they are sure they want to clear the drawing\n    var result = confirm(this.$translate('draw.areYouSureYouWantToClearYourDrawing'));\n\n    if (result) {\n      // clear the drawing\n      this.drawingTool.clear();\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (this.latestConnectedComponentState && this.latestConnectedComponentParams) {\n        // reload the student data from the connected component\n        this.setDrawData(latestConnectedComponentState, latestConnectedComponentParams);\n      } else if (this.componentContent.importPreviousWorkNodeId != null &&\n             this.componentContent.importPreviousWorkNodeId != '' &&\n             this.componentContent.importPreviousWorkComponentId != null &&\n             this.componentContent.importPreviousWorkComponentId != '') {\n\n        // this component imports work from another component\n\n        // boolean flag to overwrite the work when we import\n        var overwrite = true;\n\n        // import work from another component\n        this.importWork(overwrite);\n      } else if (this.componentContent.starterDrawData != null) {\n        // this component has starter draw data\n\n        // there is starter draw data so we will populate it into the draw tool\n        this.drawingTool.load(this.componentContent.starterDrawData);\n      }\n\n      if (this.componentContent.background != null && this.componentContent.background != '') {\n        // set the background\n        this.drawingTool.setBackgroundImage(this.componentContent.background);\n      }\n\n      this.parentStudentWorkIds = null;\n    }\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    // get the draw JSON string\n    var studentDataJSONString = this.getDrawData();\n\n    // set the draw JSON string into the draw data\n    studentData.drawData = studentDataJSONString;\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.parentStudentWorkIds != null) {\n      studentData.parentStudentWorkIds = this.parentStudentWorkIds;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Draw';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n\n    if (this.mode === 'showStudentWorkOnly') {\n      // distable saving if we're in showStudentWorkOnly mode\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Add student asset images as objects in the drawing canvas\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          fabric.Image.fromURL(copiedAsset.url, (oImg) => {\n            oImg.scaleToWidth(200);  // set max width and have height scale proportionally\n            // TODO: center image or put them at mouse position? Wasn't straight-forward, tried below but had issues...\n            //oImg.setLeft((this.drawingTool.canvas.width / 2) - (oImg.width / 2));  // center image vertically and horizontally\n            //oImg.setTop((this.drawingTool.canvas.height / 2) - (oImg.height / 2));\n            //oImg.center();\n            oImg.studentAssetId = copiedAsset.id;  // keep track of this asset id\n            this.drawingTool.canvas.add(oImg);   // add copied asset image to canvas\n          });\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the draw data\n   * @return the draw data from the drawing tool as a JSON string\n   */\n  getDrawData() {\n    var drawData = null;\n\n    drawData = this.drawingTool.save();\n\n    return drawData;\n  };\n\n  /**\n   * Import work from another component\n   * @param overwrite boolean value whether to import the work even if the\n   * student already has work for this component\n   */\n  importWork(overwrite) {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null || overwrite == true) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n\n            if (importWorkComponentState.componentType == 'ConceptMap') {\n\n              var conceptMapData = null;\n\n              if (importWorkComponentState.studentData != null) {\n                // get the concept map data from the other component state\n                conceptMapData = importWorkComponentState.studentData.conceptMapData;\n              }\n\n              if (conceptMapData != null) {\n                var serviceName = 'ConceptMapService';\n\n                if (this.$injector.has(serviceName)) {\n\n                  // get the ConceptMapService\n                  var service = this.$injector.get(serviceName);\n\n                  // create an image from the concept map data\n                  service.createImage(conceptMapData, componentContent.width, componentContent.height).then((image) => {\n\n                    // set the image as the background\n                    this.drawingTool.setBackgroundImage(image);\n\n                    // make the work dirty so that it gets saved\n                    this.studentDataChanged();\n                  });\n                }\n              }\n            } else {\n              /*\n               * populate a new component state with the work from the\n               * imported component state\n               */\n              var populatedComponentState = this.DrawService.populateComponentState(importWorkComponentState);\n\n              // populate the component state into this component\n              this.setStudentWork(populatedComponentState);\n\n              if (this.componentContent.background != null && this.componentContent.background != '') {\n                // set the background\n                this.drawingTool.setBackgroundImage(this.componentContent.background);\n\n                // make the work dirty so that it gets saved\n                this.studentDataChanged();\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Get the image object representation of the student data\n   * @returns an image object\n   */\n  getImageObject() {\n    var pngFile = null;\n\n    if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n      // get the image as a base64 string\n      var img_b64 = this.drawingTool.canvas.toDataURL('image/png');\n\n      // get the image object\n      pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n    }\n\n    return pngFile;\n  }\n\n  /**\n   * Set the draw data\n   * @param componentState the component state\n   */\n  setDrawData(componentState) {\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        // get the draw data\n        var drawData = studentData.drawData;\n\n        if (drawData != null && drawData != '' && drawData != '{}') {\n          // set the draw data into the drawing tool\n          this.drawingTool.load(drawData);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the student has drawn anything\n   * @returns whether the canvas is empty\n   */\n  isCanvasEmpty() {\n\n    var result = true;\n\n    if (this.drawingTool != null && this.drawingTool.canvas != null) {\n\n      // get the objects in the canvas where the student draws\n      var objects = this.drawingTool.canvas.getObjects();\n\n      if (objects != null && objects.length > 0) {\n        // there are objects in the canvas\n        result = false;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n\n  /**\n   * Check whether we need to show the snip drawing button\n   * @return whether to show the snip drawing button\n   */\n  showSnipDrawingButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Snip the drawing by converting it to an image\n   * @param $event the click event\n   */\n  snipDrawing($event, studentWorkId) {\n    // get the canvas element\n    var canvas = angular.element('#drawingtool_' + this.nodeId + '_' + this.componentId + ' canvas');\n\n    if (canvas != null && canvas.length > 0) {\n\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      var img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // create a notebook item with the image populated into it\n      const noteText = null;\n      this.NotebookService.addNote($event, imageObject, noteText, [ studentWorkId ]);\n    }\n  }\n\n  snipButtonClicked($event) {\n    if (this.isDirty) {\n      const deregisterListener = this.$scope.$on('studentWorkSavedToServer',\n        (event, args) => {\n          let componentState = args.studentWork;\n          if (componentState &&\n            this.nodeId === componentState.nodeId &&\n            this.componentId === componentState.componentId) {\n            this.snipDrawing($event, componentState.id);\n            deregisterListener();\n          }\n        }\n      );\n      this.saveButtonClicked(); // trigger a save\n    } else {\n      const studentWork =\n          this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId)\n      this.snipDrawing($event, studentWork.id);\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n      this.$rootScope.$broadcast('doneExiting');\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * Add a stamp in the authoring\n   */\n  authoringAddStampButtonClicked() {\n\n    // create the stamps field in the content if it does not exist\n    if (this.authoringComponentContent != null) {\n\n      // create a stamps object if it does not exist\n      if (this.authoringComponentContent.stamps == null) {\n        this.authoringComponentContent.stamps = {};\n      }\n\n      // create the Stamps array if it does not exist\n      if (this.authoringComponentContent.stamps.Stamps == null) {\n        this.authoringComponentContent.stamps.Stamps = [];\n      }\n    }\n\n    /*\n     * create the stamp as an empty string that the author will replace\n     * with a file name or url\n     */\n    this.authoringComponentContent.stamps.Stamps.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a stamp up in the authoring view\n   * @param index the index of the stamp\n   */\n  authoringStampUpClicked(index) {\n\n    // check if the stamp is not already at the top\n    if (index != 0) {\n      // the stamp is not at the top\n\n      // get the stamp string\n      var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // insert the stamp back into the array\n      this.authoringComponentContent.stamps.Stamps.splice(index - 1, 0, stamp);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move the stamp down in the authoring view\n   * @param index the index of the stamp\n   */\n  authoringStampDownClicked(index) {\n\n    // check if the stamp is already at the bottom\n    if (index != this.authoringComponentContent.stamps.Stamps.length - 1) {\n      // the stamp is not at the bottom\n\n      // get the stamp string\n      var stamp = this.authoringComponentContent.stamps.Stamps[index];\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // insert the stamp back into the array\n      this.authoringComponentContent.stamps.Stamps.splice(index + 1, 0, stamp);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a stamp from the authoring view\n   * @param index the index of the stamp\n   */\n  authoringDeleteStampClicked(index) {\n\n    // ask the author if they are sure they want to delete the stamp\n    var answer = confirm(this.$translate('draw.areYouSureYouWantToDeleteThisStamp') + '\\n\\n' + this.authoringComponentContent.stamps.Stamps[index]);\n\n    if (answer) {\n\n      // remove the stamp\n      this.authoringComponentContent.stamps.Stamps.splice(index, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Enable all the tools\n   */\n  authoringEnableAllToolsButtonClicked() {\n\n    if (this.authoringComponentContent.tools == null) {\n      this.authoringComponentContent.tools = {};\n    }\n\n    // enable all the tools\n    this.authoringComponentContent.tools.select = true;\n    this.authoringComponentContent.tools.line = true;\n    this.authoringComponentContent.tools.shape = true;\n    this.authoringComponentContent.tools.freeHand = true;\n    this.authoringComponentContent.tools.text = true;\n    this.authoringComponentContent.tools.stamp = true;\n    this.authoringComponentContent.tools.strokeColor = true;\n    this.authoringComponentContent.tools.fillColor = true;\n    this.authoringComponentContent.tools.clone = true;\n    this.authoringComponentContent.tools.strokeWidth = true;\n    this.authoringComponentContent.tools.sendBack = true;\n    this.authoringComponentContent.tools.sendForward = true;\n    this.authoringComponentContent.tools.undo = true;\n    this.authoringComponentContent.tools.redo = true;\n    this.authoringComponentContent.tools.delete = true;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Disable all the tools\n   */\n  authoringDisableAllToolsButtonClicked() {\n\n    if (this.authoringComponentContent.tools == null) {\n      this.authoringComponentContent.tools = {};\n    }\n\n    // disable all the tools\n    this.authoringComponentContent.tools.select = false;\n    this.authoringComponentContent.tools.line = false;\n    this.authoringComponentContent.tools.shape = false;\n    this.authoringComponentContent.tools.freeHand = false;\n    this.authoringComponentContent.tools.text = false;\n    this.authoringComponentContent.tools.stamp = false;\n    this.authoringComponentContent.tools.strokeColor = false;\n    this.authoringComponentContent.tools.fillColor = false;\n    this.authoringComponentContent.tools.clone = false;\n    this.authoringComponentContent.tools.strokeWidth = false;\n    this.authoringComponentContent.tools.sendBack = false;\n    this.authoringComponentContent.tools.sendForward = false;\n    this.authoringComponentContent.tools.undo = false;\n    this.authoringComponentContent.tools.redo = false;\n    this.authoringComponentContent.tools.delete = false;\n  }\n\n  /**\n   * Save the starter draw data\n   */\n  authoringSaveStarterDrawData() {\n\n    let answer = confirm(this.$translate('draw.areYouSureYouWantToSaveTheStarterDrawing'));\n\n    if (answer) {\n      // get the draw data\n      var drawData = this.getDrawData();\n\n      // set the starter draw data\n      this.authoringComponentContent.starterDrawData = drawData;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete the starter draw data\n   */\n  authoringDeleteStarterDrawData() {\n\n    let answer = confirm(this.$translate('draw.areYouSureYouWantToDeleteTheStarterDrawing'));\n\n    if (answer) {\n      // remove the starter draw data\n      this.authoringComponentContent.starterDrawData = null;\n\n      // clear the drawing\n      this.drawingTool.clear();\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the width\n   */\n  authoringViewWidthChanged() {\n\n    // update the width\n    this.width = this.authoringComponentContent.width;\n\n    // update the starter draw data if there is any\n    if (this.authoringComponentContent.starterDrawData != null) {\n\n      // get the starter draw data as a JSON object\n      var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n      if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n        // update the width in the starter draw data\n        starterDrawDataJSONObject.dt.width = this.width;\n\n        // set the starter draw data back into the component content\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the width is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has changed the height\n   */\n  authoringViewHeightChanged() {\n\n    // update the height\n    this.height = this.authoringComponentContent.height;\n\n    // update the starter draw data if there is any\n    if (this.authoringComponentContent.starterDrawData != null) {\n\n      // get the starter draw data as a JSON object\n      var starterDrawDataJSONObject = angular.fromJson(this.authoringComponentContent.starterDrawData);\n\n      if (starterDrawDataJSONObject != null && starterDrawDataJSONObject.dt != null) {\n\n        // update the height in the starter draw data\n        starterDrawDataJSONObject.dt.height = this.height;\n\n        // set the starter draw data back into the component content\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSONObject);\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the height is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has enabled or disabled a tool\n   */\n  authoringViewToolClicked() {\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n\n    // re-initialize the drawing tool so the height is updated\n    this.$timeout(angular.bind(this, this.initializeDrawingTool));\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * The background has changed so we will update the starter draw data if\n   * it has been set and then save the project\n   */\n  authoringViewBackgroundChanged() {\n\n    // get the starter draw data string\n    var starterDrawData = this.authoringComponentContent.starterDrawData;\n\n    if (starterDrawData != null) {\n\n      // get the starter draw data JSON object\n      var starterDrawDataJSON = angular.fromJson(starterDrawData);\n\n      if (starterDrawDataJSON != null &&\n        starterDrawDataJSON.canvas != null &&\n        starterDrawDataJSON.canvas.backgroundImage != null &&\n        starterDrawDataJSON.canvas.backgroundImage.src != null) {\n\n        // get the background\n        var background = this.authoringComponentContent.background;\n\n        /*\n         * get the project assets directory path\n         * e.g. https://www.berkeley.edu/curriculum/25/assets\n         */\n        var projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath(true);\n\n        /*\n         * generate the absolute path to the background image\n         * e.g. https://www.berkeley.edu/curriculum/25/assets/earth.png\n         */\n        var newSrc = projectAssetsDirectoryPath + '/' + background;\n\n        // set the new src\n        starterDrawDataJSON.canvas.backgroundImage.src = newSrc;\n\n        // convert the starter draw data back into a string\n        this.authoringComponentContent.starterDrawData = angular.toJson(starterDrawDataJSON);\n      }\n    }\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Open the asset choose to select an image for the stamp\n   * @param index the index of the stamp\n   */\n  chooseStampImage(index) {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'stamp';\n    params.targetObject = index;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Set the stamp image\n   * @param index the index of the stamp\n   * @param fileName the file name of the image\n   */\n  setStampImage(index, fileName) {\n    this.authoringComponentContent.stamps.Stamps[index] = fileName;\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      if (this.componentContent != null &&\n          this.componentContent.background != null) {\n\n        /*\n         * this component has a background so we will use it instead of\n         * the background from the connected\n         */\n        this.drawingTool.setBackgroundImage(this.componentContent.background);\n      }\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      // used to collect the objects from all the component states\n      let allObjects = [];\n\n      // the draw data from the first component state\n      let firstDrawData = {};\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState.componentType == 'Draw') {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            let drawData = studentData.drawData;\n\n            if (drawData != null) {\n\n              // convert the JSON string to a JSON object\n              let drawDataJSON = angular.fromJson(drawData);\n\n              if (drawDataJSON != null &&\n                drawDataJSON.canvas != null &&\n                drawDataJSON.canvas.objects != null) {\n\n                if (c == 0) {\n                  // remember the first draw data\n                  firstDrawData = drawDataJSON;\n                }\n\n                // append the objects\n                allObjects = allObjects.concat(drawDataJSON.canvas.objects);\n              }\n            }\n          }\n        } else if (componentState.componentType == 'Graph' ||\n            componentState.componentType == 'ConceptMap' ||\n            componentState.componentType == 'Embedded' ||\n            componentState.componentType == 'Label' ||\n            componentState.componentType == 'Table') {\n          let connectedComponent =\n            this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n          if (connectedComponent.importWorkAsBackground === true) {\n            this.setComponentStateAsBackgroundImage(componentState);\n          }\n        }\n      }\n\n      if (allObjects != null) {\n\n        // create the draw data with all the objects\n        let drawData = firstDrawData;\n\n        if (drawData != null &&\n            drawData.canvas != null &&\n            drawData.canvas.objects != null) {\n\n          drawData.canvas.objects = allObjects;\n        }\n\n        // set the draw data JSON string into the component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.drawData = angular.toJson(drawData);\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.drawingTool.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n        componentType == 'Embedded' ||\n        componentType == 'Graph' ||\n        componentType == 'Label' ||\n        componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n        { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n}\n\nDrawController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'DrawService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'];\n\nexport default DrawController;\n"]}