{"version":3,"sources":["drawService.es6"],"names":[],"mappings":"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","file":"drawService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DrawService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Draw component object\n     * @returns a new Draw component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Draw';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.stamps = {};\n        component.stamps.Stamps = [];\n        return component;\n    }\n\n    /**\n     * Copies an existing Draw component object\n     * @returns a copied Draw component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.stamps = componentToCopy.stamps;\n        component.stamps.Stamps = componentToCopy.stamps.Stamps;\n        return component;\n    }\n\n    getStudentWorkJPEG(componentState) {\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.drawData != null) {\n                var drawData = JSON.parse(studentData.drawData);\n                if (drawData != null && drawData.jpeg != null && drawData.jpeg != \"\") {\n                    return drawData.jpeg;\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Draw') {\n                // the other component is an Draw component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.drawData) {\n                            // there is draw data so the component is completed\n                            // TODO: check for empty drawing or drawing same as initial state\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData) {\n                    if (studentData.drawData) {\n                        // there is draw data so the component is completed\n                        // TODO: check for empty drawing or drawing same as initial state\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n    \n    /**\n     * Remove the background object from the draw data in the component state\n     * @param componentState the component state\n     * @returns the componentState\n     */\n    removeBackgroundFromComponentState(componentState) {\n        \n        if (componentState != null) {\n            var studentData = componentState.studentData;\n            \n            if (studentData != null) {\n                \n                // get the draw data string\n                var drawData = studentData.drawData;\n                \n                if (drawData != null) {\n                    \n                    // convert the draw data string to an object\n                    var drawDataObject = angular.fromJson(drawData);\n                    \n                    if (drawDataObject != null) {\n                        \n                        // get the canvas value\n                        var canvas = drawDataObject.canvas;\n                        \n                        if (canvas != null) {\n                            \n                            // remove the background image from the canvas\n                            delete canvas.backgroundImage;\n                            \n                            // convert the object back to a JSON string\n                            var drawDataJSONString = angular.toJson(drawDataObject);\n                            \n                            if (drawDataJSONString != null) {\n                                // set the draw data JSON string back into the student data\n                                studentData.drawData = drawDataJSONString;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        \n        return componentState;\n    }\n}\n\nDrawService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default DrawService;\n"]}