{"version":3,"sources":["drawService.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAEM;;;AACF,aADE,WACF,CAAY,kBAAZ,EAAgC;8BAD9B,aAC8B;;2EAD9B,yBAC8B;;AAE5B,cAAK,kBAAL,GAA0B,kBAA1B,CAF4B;;KAAhC;;iBADE;;2CAMiB,gBAAgB;AAC/B,gBAAI,kBAAkB,IAAlB,EAAwB;AACxB,oBAAI,cAAc,eAAe,WAAf,CADM;;AAGxB,oBAAI,eAAe,IAAf,IAAuB,YAAY,QAAZ,IAAwB,IAAxB,EAA8B;AACrD,wBAAI,WAAW,KAAK,KAAL,CAAW,YAAY,QAAZ,CAAtB,CADiD;AAErD,wBAAI,YAAY,IAAZ,IAAoB,SAAS,IAAT,IAAiB,IAAjB,IAAyB,SAAS,IAAT,IAAiB,EAAjB,EAAqB;AAClE,+BAAO,SAAS,IAAT,CAD2D;qBAAtE;iBAFJ;aAHJ;AAUA,mBAAO,IAAP,CAX+B;;;;6CAcd,gBAAgB;AACjC,gBAAI,oBAAoB,qBAApB,CAD6B;;AAGjC,gBAAI,kBAAkB,IAAlB,EAAwB;AACxB,oBAAI,cAAc,eAAe,WAAf,CADM;;AAGxB,oBAAI,eAAe,IAAf,IAAuB,YAAY,QAAZ,IAAwB,IAAxB,EAA8B;AACrD,wBAAI,WAAW,KAAK,KAAL,CAAW,YAAY,QAAZ,CAAtB,CADiD;AAErD,wBAAI,YAAY,IAAZ,IAAoB,SAAS,IAAT,IAAiB,IAAjB,IAAyB,SAAS,IAAT,IAAiB,EAAjB,EAAqB;AAClE,4CAAoB,gBAAgB,SAAS,IAAT,GAAgB,WAAhC,CAD8C;qBAAtE;iBAFJ;aAHJ;;AAWA,mBAAO,iBAAP,CAdiC;;;;;;;;;;;+CAuBd,kCAAkC;AACrD,gBAAI,iBAAiB,IAAjB,CADiD;;AAGrD,gBAAI,oCAAoC,IAApC,EAA0C;;;AAG1C,iCAAiB,mBAAmB,oBAAnB,EAAjB;;;AAH0C,oBAMtC,qBAAqB,iCAAiC,aAAjC,CANiB;;AAQ1C,oBAAI,uBAAuB,MAAvB,EAA+B;;;;AAI/B,wBAAI,cAAc,iCAAiC,WAAjC;;;AAJa,wBAO3B,kBAAkB,mBAAmB,oBAAnB,CAAwC,WAAxC,CAAlB;;;AAP2B,kCAU/B,CAAe,WAAf,GAA6B,eAA7B,CAV+B;iBAAnC;aARJ;;AAsBA,mBAAO,cAAP,CAzBqD;;;;;;;;;;;;;oCAoC7C,WAAW,iBAAiB,iBAAiB,YAAY;AACjE,gBAAI,SAAS,KAAT,CAD6D;;AAGjE,gBAAI,mBAAmB,IAAnB,EAAyB;;;AAGzB,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,gBAAgB,MAAhB,EAAwB,GAA5C,EAAiD;;;AAG7C,wBAAI,iBAAiB,gBAAgB,CAAhB,CAAjB;;;AAHyC,wBAMzC,cAAc,eAAe,WAAf,CAN2B;;AAQ7C,wBAAI,eAAe,IAAf,EAAqB;AACrB,4BAAI,WAAW,YAAY,QAAZ,CADM;;AAGrB,4BAAI,YAAY,IAAZ,EAAkB;;AAElB,qCAAS,IAAT,CAFkB;AAGlB,kCAHkB;yBAAtB;qBAHJ;iBARJ;aAHJ;;AAuBA,mBAAO,MAAP,CA1BiE;;;;WA/EnE;;;AA6GN,YAAY,OAAZ,GAAsB,CAAC,oBAAD,CAAtB;;kBAEe","file":"drawService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DrawService extends NodeService {\n    constructor(StudentDataService) {\n        super();\n        this.StudentDataService = StudentDataService;\n    }\n\n    getStudentWorkJPEG(componentState) {\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.drawData != null) {\n                var drawData = JSON.parse(studentData.drawData);\n                if (drawData != null && drawData.jpeg != null && drawData.jpeg != \"\") {\n                    return drawData.jpeg;\n                }\n            }\n        }\n        return null;\n    };\n\n    getStudentWorkAsHTML(componentState) {\n        var studentWorkAsHTML = '<p>Your drawing</p>';\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.drawData != null) {\n                var drawData = JSON.parse(studentData.drawData);\n                if (drawData != null && drawData.jpeg != null && drawData.jpeg != \"\") {\n                    studentWorkAsHTML = '<img src=\\\"' + drawData.jpeg + '\\\"></img>';\n                }\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Draw') {\n                // the other component is an Draw component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var drawData = studentData.drawData;\n\n                    if (drawData != null) {\n                        // there is draw data so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nDrawService.$inject = ['StudentDataService'];\n\nexport default DrawService;\n"]}