{"version":3,"sources":["drawService.es6"],"names":[],"mappings":"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","file":"drawService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DrawService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Draw component object\n     * @returns a new Draw component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Draw';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.stamps = {};\n        component.stamps.Stamps = [];\n\n        return component;\n    }\n\n    getStudentWorkJPEG(componentState) {\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.drawData != null) {\n                var drawData = JSON.parse(studentData.drawData);\n                if (drawData != null && drawData.jpeg != null && drawData.jpeg != \"\") {\n                    return drawData.jpeg;\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Draw') {\n                // the other component is an Draw component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.drawData) {\n                            // there is draw data so the component is completed\n                            // TODO: check for empty drawing or drawing same as initial state\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData) {\n                    if (studentData.drawData) {\n                        // there is draw data so the component is completed\n                        // TODO: check for empty drawing or drawing same as initial state\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nDrawService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default DrawService;\n"]}