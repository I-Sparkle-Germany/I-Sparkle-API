{"version":3,"sources":["drawService.es6"],"names":["DrawService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","stamps","Stamps","tools","select","line","shape","freeHand","text","stamp","strokeColor","fillColor","clone","strokeWidth","sendBack","sendForward","undo","redo","delete","componentToCopy","createComponent","componentState","studentData","drawData","JSON","parse","jpeg","componentStateFromOtherComponent","createComponentState","otherComponentType","componentType","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","drawDataObject","angular","fromJson","canvas","backgroundImage","drawDataJSONString","toJson","componentContent","drawDataJSON","objects","starterDrawData","$inject"],"mappings":"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","file":"drawService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DrawService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Draw\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('draw.componentTypeLabel');\n  }\n\n  /**\n   * Create a Draw component object\n   * @returns a new Draw component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'Draw';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.stamps = {};\n    component.stamps.Stamps = [];\n    component.tools = {};\n    component.tools.select = true;\n    component.tools.line = true;\n    component.tools.shape = true;\n    component.tools.freeHand = true;\n    component.tools.text = true;\n    component.tools.stamp = true;\n    component.tools.strokeColor = true;\n    component.tools.fillColor = true;\n    component.tools.clone = true;\n    component.tools.strokeWidth = true;\n    component.tools.sendBack = true;\n    component.tools.sendForward = true;\n    component.tools.undo = true;\n    component.tools.redo = true;\n    component.tools.delete = true;\n    return component;\n  }\n\n  /**\n   * Copies an existing Draw component object\n   * @returns a copied Draw component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.stamps = componentToCopy.stamps;\n    component.stamps.Stamps = componentToCopy.stamps.Stamps;\n    return component;\n  }\n\n  getStudentWorkJPEG(componentState) {\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null && studentData.drawData != null) {\n        var drawData = JSON.parse(studentData.drawData);\n        if (drawData != null && drawData.jpeg != null && drawData.jpeg != '') {\n          return drawData.jpeg;\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'Draw') {\n        // the other component is an Draw component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.drawData) {\n              // there is draw data so the component is completed\n              // TODO: check for empty drawing or drawing same as initial state\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData) {\n          if (studentData.drawData) {\n            // there is draw data so the component is completed\n            // TODO: check for empty drawing or drawing same as initial state\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Remove the background object from the draw data in the component state\n   * @param componentState the component state\n   * @returns the componentState\n   */\n  removeBackgroundFromComponentState(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the draw data string\n        var drawData = studentData.drawData;\n\n        if (drawData != null) {\n\n          // convert the draw data string to an object\n          var drawDataObject = angular.fromJson(drawData);\n\n          if (drawDataObject != null) {\n\n            // get the canvas value\n            var canvas = drawDataObject.canvas;\n\n            if (canvas != null) {\n\n              // remove the background image from the canvas\n              delete canvas.backgroundImage;\n\n              // convert the object back to a JSON string\n              var drawDataJSONString = angular.toJson(drawDataObject);\n\n              if (drawDataJSONString != null) {\n                // set the draw data JSON string back into the student data\n                studentData.drawData = drawDataJSONString;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    return componentState;\n  }\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the student draw data\n        let drawData = studentData.drawData;\n\n        // get the draw data as a JSON object\n        let drawDataJSON = angular.fromJson(drawData);\n\n        if (componentContent == null) {\n          // the component content was not provided\n\n          if (drawDataJSON != null &&\n            drawDataJSON.canvas != null &&\n            drawDataJSON.canvas.objects != null &&\n            drawDataJSON.canvas.objects.length > 0) {\n\n            return true;\n          }\n        } else {\n          // the component content was provided\n\n          let starterDrawData = componentContent.starterDrawData;\n\n          if (starterDrawData == null || starterDrawData == '') {\n            // there is no starter draw data\n\n            if (drawDataJSON != null &&\n              drawDataJSON.canvas != null &&\n              drawDataJSON.canvas.objects != null &&\n              drawDataJSON.canvas.objects.length > 0) {\n\n              return true;\n            }\n          } else {\n            /*\n             * there is starter draw data so we will compare it with\n             * the student draw data\n             */\n\n            if (drawData != null &&\n              drawData != '' &&\n              drawData !== starterDrawData) {\n              /*\n               * the student draw data is different than the\n               * starter draw data\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nDrawService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default DrawService;\n"]}