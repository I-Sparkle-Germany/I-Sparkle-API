{"version":3,"sources":["drawService.es6"],"names":["DrawService","StudentDataService","UtilService","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","stamps","Stamps","componentToCopy","createComponent","componentState","studentData","drawData","JSON","parse","jpeg","componentStateFromOtherComponent","createComponentState","otherComponentType","componentType","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","drawDataObject","angular","fromJson","canvas","backgroundImage","drawDataJSONString","toJson","$inject"],"mappings":"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","file":"drawService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass DrawService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Draw component object\n     * @returns a new Draw component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Draw';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.stamps = {};\n        component.stamps.Stamps = [];\n        return component;\n    }\n\n    /**\n     * Copies an existing Draw component object\n     * @returns a copied Draw component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.stamps = componentToCopy.stamps;\n        component.stamps.Stamps = componentToCopy.stamps.Stamps;\n        return component;\n    }\n\n    getStudentWorkJPEG(componentState) {\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.drawData != null) {\n                var drawData = JSON.parse(studentData.drawData);\n                if (drawData != null && drawData.jpeg != null && drawData.jpeg != \"\") {\n                    return drawData.jpeg;\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Draw') {\n                // the other component is an Draw component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.drawData) {\n                            // there is draw data so the component is completed\n                            // TODO: check for empty drawing or drawing same as initial state\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData) {\n                    if (studentData.drawData) {\n                        // there is draw data so the component is completed\n                        // TODO: check for empty drawing or drawing same as initial state\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n    \n    /**\n     * Remove the background object from the draw data in the component state\n     * @param componentState the component state\n     * @returns the componentState\n     */\n    removeBackgroundFromComponentState(componentState) {\n        \n        if (componentState != null) {\n            var studentData = componentState.studentData;\n            \n            if (studentData != null) {\n                \n                // get the draw data string\n                var drawData = studentData.drawData;\n                \n                if (drawData != null) {\n                    \n                    // convert the draw data string to an object\n                    var drawDataObject = angular.fromJson(drawData);\n                    \n                    if (drawDataObject != null) {\n                        \n                        // get the canvas value\n                        var canvas = drawDataObject.canvas;\n                        \n                        if (canvas != null) {\n                            \n                            // remove the background image from the canvas\n                            delete canvas.backgroundImage;\n                            \n                            // convert the object back to a JSON string\n                            var drawDataJSONString = angular.toJson(drawDataObject);\n                            \n                            if (drawDataJSONString != null) {\n                                // set the draw data JSON string back into the student data\n                                studentData.drawData = drawDataJSONString;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        \n        return componentState;\n    }\n}\n\nDrawService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default DrawService;\n"]}