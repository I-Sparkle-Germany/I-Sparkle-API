{"version":3,"sources":["drawService.es6"],"names":["DrawService","$filter","$q","StudentAssetService","StudentDataService","UtilService","$translate","component","type","stamps","Stamps","tools","select","line","shape","freeHand","text","stamp","strokeColor","fillColor","clone","strokeWidth","sendBack","sendForward","undo","redo","delete","componentState","studentData","drawData","JSON","parse","jpeg","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","showSubmitButton","showSaveButton","i","l","state","isSubmit","drawDataObject","angular","fromJson","canvas","backgroundImage","drawDataJSONString","toJson","componentContent","drawDataJSON","objects","starterDrawData","deferred","defer","element","nodeId","componentId","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","then","asset","resolve","promise","$inject"],"mappings":"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","file":"drawService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass DrawService extends ComponentService {\n  constructor($filter,\n      $q,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$q = $q;\n    this.StudentAssetService = StudentAssetService;\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('draw.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Draw';\n    component.stamps = {};\n    component.stamps.Stamps = [];\n    component.tools = {};\n    component.tools.select = true;\n    component.tools.line = true;\n    component.tools.shape = true;\n    component.tools.freeHand = true;\n    component.tools.text = true;\n    component.tools.stamp = true;\n    component.tools.strokeColor = true;\n    component.tools.fillColor = true;\n    component.tools.clone = true;\n    component.tools.strokeWidth = true;\n    component.tools.sendBack = true;\n    component.tools.sendForward = true;\n    component.tools.undo = true;\n    component.tools.redo = true;\n    component.tools.delete = true;\n    return component;\n  }\n\n  getStudentWorkJPEG(componentState) {\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null && studentData.drawData != null) {\n        var drawData = JSON.parse(studentData.drawData);\n        if (drawData != null && drawData.jpeg != null && drawData.jpeg != '') {\n          return drawData.jpeg;\n        }\n      }\n    }\n    return null;\n  };\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.drawData) {\n              // there is draw data so the component is completed\n              // TODO: check for empty drawing or drawing same as initial state\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData) {\n          if (studentData.drawData) {\n            // there is draw data so the component is completed\n            // TODO: check for empty drawing or drawing same as initial state\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Remove the background object from the draw data in the component state\n   * @param componentState the component state\n   * @returns the componentState\n   */\n  removeBackgroundFromComponentState(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the draw data string\n        var drawData = studentData.drawData;\n\n        if (drawData != null) {\n\n          // convert the draw data string to an object\n          var drawDataObject = angular.fromJson(drawData);\n\n          if (drawDataObject != null) {\n\n            // get the canvas value\n            var canvas = drawDataObject.canvas;\n\n            if (canvas != null) {\n\n              // remove the background image from the canvas\n              delete canvas.backgroundImage;\n\n              // convert the object back to a JSON string\n              var drawDataJSONString = angular.toJson(drawDataObject);\n\n              if (drawDataJSONString != null) {\n                // set the draw data JSON string back into the student data\n                studentData.drawData = drawDataJSONString;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    return componentState;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the student draw data\n        let drawData = studentData.drawData;\n\n        // get the draw data as a JSON object\n        let drawDataJSON = angular.fromJson(drawData);\n\n        if (componentContent == null) {\n          // the component content was not provided\n\n          if (drawDataJSON != null &&\n            drawDataJSON.canvas != null &&\n            drawDataJSON.canvas.objects != null &&\n            drawDataJSON.canvas.objects.length > 0) {\n\n            return true;\n          }\n        } else {\n          // the component content was provided\n\n          let starterDrawData = componentContent.starterDrawData;\n\n          if (starterDrawData == null || starterDrawData == '') {\n            // there is no starter draw data\n\n            if (drawDataJSON != null &&\n              drawDataJSON.canvas != null &&\n              drawDataJSON.canvas.objects != null &&\n              drawDataJSON.canvas.objects.length > 0) {\n\n              return true;\n            }\n          } else {\n            /*\n             * there is starter draw data so we will compare it with\n             * the student draw data\n             */\n\n            if (drawData != null &&\n              drawData != '' &&\n              drawData !== starterDrawData) {\n              /*\n               * the student draw data is different than the\n               * starter draw data\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    let deferred = this.$q.defer();\n    let canvas = angular.element('#drawingtool_' + componentState.nodeId + '_' + componentState.componentId + ' canvas');\n    if (canvas != null && canvas.length > 0) {\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      let img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      let imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // add the image to the student assets\n      this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n        deferred.resolve(asset);\n      });\n    }\n    return deferred.promise;\n  }\n}\n\nDrawService.$inject = [\n  '$filter',\n  '$q',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default DrawService;\n"]}