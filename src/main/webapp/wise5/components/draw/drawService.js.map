{"version":3,"sources":["drawService.es6"],"names":["DrawService","$filter","$q","StudentAssetService","StudentDataService","UtilService","$translate","component","type","stamps","Stamps","tools","select","line","shape","freeHand","text","stamp","strokeColor","fillColor","clone","strokeWidth","sendBack","sendForward","undo","redo","delete","componentState","studentData","drawData","JSON","parse","jpeg","componentStates","componentEvents","nodeEvents","node","length","submitRequired","showSubmitButton","showSaveButton","isSubmit","drawDataObject","angular","fromJson","canvas","backgroundImage","drawDataJSONString","toJson","componentContent","drawDataString","isDrawDataContainsObjects","isStarterDrawDataExists","starterDrawData","isStudentDrawDataDifferentFromStarterData","objects","deferred","defer","element","nodeId","componentId","canvasBase64String","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","then","asset","resolve","promise","ComponentService","$inject"],"mappings":"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","file":"drawService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass DrawService extends ComponentService {\n  constructor($filter,\n      $q,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$q = $q;\n    this.StudentAssetService = StudentAssetService;\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('draw.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Draw';\n    component.stamps = {};\n    component.stamps.Stamps = [];\n    component.tools = {};\n    component.tools.select = true;\n    component.tools.line = true;\n    component.tools.shape = true;\n    component.tools.freeHand = true;\n    component.tools.text = true;\n    component.tools.stamp = true;\n    component.tools.strokeColor = true;\n    component.tools.fillColor = true;\n    component.tools.clone = true;\n    component.tools.strokeWidth = true;\n    component.tools.sendBack = true;\n    component.tools.sendForward = true;\n    component.tools.undo = true;\n    component.tools.redo = true;\n    component.tools.delete = true;\n    return component;\n  }\n\n  getStudentWorkJPEG(componentState) {\n    const studentData = componentState.studentData;\n    const drawData = JSON.parse(studentData.drawData);\n    if (drawData != null && drawData.jpeg != null && drawData.jpeg != '') {\n      return drawData.jpeg;\n    }\n    return null;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    if (componentStates && componentStates.length) {\n      const submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n      if (submitRequired) {\n        for (let componentState of componentStates) {\n          if (componentState.isSubmit) {\n            return true;\n          }\n        }\n      } else {\n        const componentState = componentStates[componentStates.length - 1];\n        if (componentState.studentData.drawData) {\n          // there is draw data so the component is completed\n          // TODO: check for empty drawing or drawing same as initial state\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Remove the background object from the draw data in the component state\n   * @param componentState the component state\n   * @returns the componentState\n   */\n  removeBackgroundFromComponentState(componentState) {\n    const drawData = componentState.studentData.drawData;\n    const drawDataObject = angular.fromJson(drawData);\n    const canvas = drawDataObject.canvas;\n    delete canvas.backgroundImage;\n    const drawDataJSONString = angular.toJson(drawDataObject);\n    componentState.studentData.drawData = drawDataJSONString;\n    return componentState;\n  }\n\n  /**\n   * @param componentState\n   * @param componentContent (optional)\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      const drawDataString = componentState.studentData.drawData;\n      const drawData = angular.fromJson(drawDataString);\n      if (componentContent == null) {\n        if (this.isDrawDataContainsObjects(drawData)) {\n          return true;\n        }\n      } else {\n        if (this.isStarterDrawDataExists(componentContent)) {\n          const starterDrawData = componentContent.starterDrawData;\n          if (this.isStudentDrawDataDifferentFromStarterData(drawDataString, starterDrawData)) {\n            return true;\n          }\n        } else {\n          if (this.isDrawDataContainsObjects(drawData)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  isDrawDataContainsObjects(drawData) {\n    return drawData.canvas != null && drawData.canvas.objects != null &&\n        drawData.canvas.objects.length > 0;\n  }\n\n  isStarterDrawDataExists(componentContent) {\n    return componentContent.starterDrawData != null && componentContent.starterDrawData !== '';\n  }\n\n  isStudentDrawDataDifferentFromStarterData(drawDataString, starterDrawData) {\n    return drawDataString != null && drawDataString !== '' && drawDataString !== starterDrawData;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    const deferred = this.$q.defer();\n    let canvas = angular.element('#drawingtool_' + componentState.nodeId + '_' + componentState.componentId + ' canvas');\n    if (canvas != null && canvas.length > 0) {\n      canvas = canvas[0];\n      const canvasBase64String = canvas.toDataURL('image/png');\n      const imageObject = this.UtilService.getImageObjectFromBase64String(canvasBase64String);\n      this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n        deferred.resolve(asset);\n      });\n    }\n    return deferred.promise;\n  }\n}\n\nDrawService.$inject = [\n  '$filter',\n  '$q',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default DrawService;\n"]}