{"version":3,"sources":["embeddedController.es6"],"names":[],"mappings":"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","file":"embeddedController.js","sourcesContent":["class EmbeddedController {\n    constructor($scope,\n                $sce,\n                $window,\n                NodeService,\n                EmbeddedService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.$window = $window;\n        this.NodeService = NodeService;\n        this.EmbeddedService = EmbeddedService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // field that will hold the component type\n        this.componentType = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // whether we have data to save\n        this.isDirty = false;\n\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\n            // handle messages received from iframe\n            var messageEventData = messageEvent.data;\n            if (messageEventData.messageType === \"event\") {\n                // save event to WISE\n                var nodeId = this.nodeId;\n                var componentId = this.componentId;\n                var componentType = this.componentType;\n                var category = messageEventData.eventCategory;\n                var event = messageEventData.event;\n                var eventData = messageEventData.eventData;\n\n                // save notebook open/close event\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            } else if (messageEventData.messageType === \"studentWork\") {\n                // save student work to WISE\n                // create a new component state\n                this.componentState = this.NodeService.createNewComponentState();\n\n                // set the student data into the component state\n                this.componentState.studentData = messageEventData.studentData;\n\n                this.componentState.isSubmit = false;\n                if (messageEventData.isSubmit) {\n                    this.componentState.isSubmit = messageEventData.isSubmit;\n                }\n\n                this.componentState.isAutoSave = false;\n                if (messageEventData.isAutoSave) {\n                    this.componentState.isAutoSave = messageEventData.isAutoSave;\n                }\n\n                this.isDirty = true;\n\n                // tell the parent node that this component wants to save\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n\n            }\n        });\n\n        // listen for message events from embedded iframe application\n        this.$window.addEventListener('message', this.messageEventListener);\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.setURL(this.componentContent.url);\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n            } else {\n                // this is a regular component\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n            }\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var componentState = null;\n\n            if (this.$scope.embeddedController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.embeddedController.componentState;\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.embeddedController.isDirty = false;\n                this.$scope.embeddedController.componentState = null;\n            }\n\n            return componentState;\n        }.bind(this);\n\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // unregister messageEventListener\n            this.$window.removeEventListener('message', this.messageEventListener);\n        }));\n    }\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n}\n\nEmbeddedController.$inject = [\n    '$scope',\n    '$sce',\n    '$window',\n    'NodeService',\n    'EmbeddedService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default EmbeddedController;\n\n"]}