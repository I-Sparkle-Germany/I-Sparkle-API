{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$injector","$q","$scope","$sce","$window","AnnotationService","ConfigService","NodeService","NotebookService","EmbeddedService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","latestAnnotations","componentState","embeddedApplicationIFrameId","isSaveButtonVisible","isSubmitButtonVisible","messageEventListener","angular","bind","messageEvent","messageEventData","data","messageType","category","eventCategory","event","eventData","saveVLEEvent","createNewComponentState","studentData","isSubmit","isAutoSave","studentDataChanged","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","studentWork","getStudentWork","message","sendMessageToApplication","addEventListener","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","type","showSaveButton","showSubmitButton","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","$parent","nodeController","registerComponentController","$on","args","embeddedController","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","successMessage","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","annotation","annotationNodeId","annotationComponentId","removeEventListener","latestState","trustedURL","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createComponentStateAdditionalProcessing","window","document","getElementById","contentWindow","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","exitListener","result","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","showPreviousWorkPrompt","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","lockAfterSubmit","studentWorkFromThisNode","getLatestComponentStatesByNodeId","getStudentWorkFromOtherComponents","studentWorkFromOtherComponents","c","otherComponent","tempNodeId","tempComponentId","tempComponentState","getLatestComponentStateByNodeIdAndComponentId","push","importPreviousWork","importPreviousWorkNodeId","importPreviousWorkComponentId","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["import iframeResizer from 'iframe-resizer';\nimport html2canvas from 'html2canvas';\n\nclass EmbeddedController {\n    constructor($filter,\n                $injector,\n                $q,\n                $scope,\n                $sce,\n                $window,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                EmbeddedService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.$window = $window;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.EmbeddedService = EmbeddedService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // field that will hold the component type\n        this.componentType = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the width of the iframe (optional)\n        this.width = null;\n\n        // the height of the iframe (optional)\n        this.height = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // whether we have data to save\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the snip model button is shown or not\n        this.isSnipModelButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // variable to store component states (from application)\n        this.componentState = null;\n\n        // the id of the embedded application's iframe\n        this.embeddedApplicationIFrameId = '';\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\n            // handle messages received from iframe\n            var messageEventData = messageEvent.data;\n            if (messageEventData.messageType === \"event\") {\n                // save event to WISE\n                var nodeId = this.nodeId;\n                var componentId = this.componentId;\n                var componentType = this.componentType;\n                var category = messageEventData.eventCategory;\n                var event = messageEventData.event;\n                var eventData = messageEventData.eventData;\n\n                // save notebook open/close event\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            } else if (messageEventData.messageType === \"studentWork\") {\n                // save student work to WISE\n                // create a new component state\n                this.componentState = this.NodeService.createNewComponentState();\n\n                // set the student data into the component state\n                this.componentState.studentData = messageEventData.studentData;\n\n                this.componentState.isSubmit = false;\n                if (messageEventData.isSubmit) {\n                    this.componentState.isSubmit = messageEventData.isSubmit;\n                }\n\n                this.componentState.isAutoSave = false;\n                if (messageEventData.isAutoSave) {\n                    this.componentState.isAutoSave = messageEventData.isAutoSave;\n                }\n\n                this.isDirty = true;\n\n                // the student data in the model has changed\n                this.studentDataChanged(messageEventData.studentData);\n\n                // tell the parent node that this component wants to save\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n            } else if (messageEventData.messageType === \"applicationInitialized\") {\n                // application has finished loading, so send latest component state to application\n                this.sendLatestWorkToApplication();\n                this.processLatestSubmit();\n\n                // activate iframe-resizer on the embedded app's iframe\n                $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n            } else if (messageEventData.messageType === \"componentDirty\") {\n                let isDirty = messageEventData.isDirty;\n\n                // set component dirty to true/false and notify node\n                this.isDirty = isDirty;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"componentSubmitDirty\") {\n                let isSubmitDirty = messageEventData.isDirty;\n\n                // set component submit dirty to true/false and notify node\n                this.isSubmitDirty = isSubmitDirty;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"studentDataChanged\") {\n                this.studentDataChanged(messageEventData.studentData);\n            } else if (messageEventData.messageType === \"getStudentWork\") {\n                // the embedded application is requesting the student work\n\n                // get the student work\n                var studentWork = this.getStudentWork();\n\n                var message = studentWork;\n                message.messageType = 'studentWork';\n\n                // send the student work to the embedded application\n                this.sendMessageToApplication(message);\n            }\n        });\n\n        // listen for message events from embedded iframe application\n        this.$window.addEventListener('message', this.messageEventListener);\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // id of the iframe that embeds the application\n            this.embeddedApplicationIFrameId = \"componentApp_\" + this.componentId;\n\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === 'student') {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                this.isSnipModelButtonVisible = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.setURL(this.componentContent.url);\n                }.bind(this), true);\n            } else if (this.mode === 'grading') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n            }\n\n            if (this.componentContent != null) {\n                // set the url\n                this.setURL(this.componentContent.url);\n            }\n\n            // get the width\n            this.width = this.componentContent.width ? this.componentContent.width : \"100%\";\n\n            // get the height\n            this.height = this.componentContent.height ? this.componentContent.height : \"100%\";\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n\n            // get the student work\n            var studentWork = this.getStudentWork();\n\n            var message = studentWork;\n            message.messageType = 'nodeSubmitClicked';\n\n            // send the student data to the embedded application\n            this.sendMessageToApplication(message);\n        });\n\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n            var componentState = args.studentWork;\n\n            if (componentState != null) {\n                if (componentState.componentId === this.componentId) {\n                    // a component state for this component was saved\n\n                    // set isDirty to false because the component state was just saved and notify node\n                    this.isDirty = false;\n                    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                    // clear out current componentState\n                    this.$scope.embeddedController.componentState = null;\n\n                    let isAutoSave = componentState.isAutoSave;\n                    let isSubmit = componentState.isSubmit;\n                    let serverSaveTime = componentState.serverSaveTime;\n                    let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                    // set save message\n                    if (isSubmit) {\n                        this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                        this.submit();\n\n                        // set isSubmitDirty to false because the component state was just submitted and notify node\n                        this.isSubmitDirty = false;\n                        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                    } else if (isAutoSave) {\n                        this.setSaveMessage(this.$translate('AUTOSAVED'), clientSaveTime);\n                    } else {\n                        this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                    }\n\n                    // Tell application that this componentState was successfully saved to server;\n                    // include saved state and updated save message\n                    var successMessage = {\n                        messageType: \"componentStateSaved\",\n                        componentState: componentState,\n                        saveMessage: this.saveMessage\n                    };\n                    this.sendMessageToApplication(successMessage);\n\n                    // clear out componentState\n                    this.componentState = {};\n                }\n            }\n\n            // get the student work\n            var studentWork = this.getStudentWork();\n\n            var message = studentWork;\n            message.messageType = 'studentWork';\n\n            // send the student work to the embedded application\n            this.sendMessageToApplication(message);\n        });\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.embeddedController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.embeddedController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // unregister messageEventListener\n            this.$window.removeEventListener('message', this.messageEventListener);\n        }));\n    }\n\n    /**\n     * Check if latest component state is a submission and if not, set isSubmitDirty to true\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LASTSUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LASTSAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged(data) {\n\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // remember the student data\n        this.studentData = data;\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = this.studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    sendLatestWorkToApplication() {\n        // get the latest component state from the scope\n        var message = {\n            messageType: \"componentState\",\n            componentState: this.$scope.componentState\n        };\n\n        // send the latest component state to embedded application\n        this.sendMessageToApplication(message);\n    };\n\n    sendMessageToApplication(message) {\n        // send the message to embedded application via postMessage\n        window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, \"*\")\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Snip the model by converting it to an image\n     * @param $event the click event\n     */\n    snipModel($event) {\n\n        // get the iframe\n        var iframe = $('#componentApp_' + this.componentId);\n\n        if (iframe != null && iframe.length > 0) {\n\n            //get the html from the iframe\n            var modelElement = iframe.contents().find('html');\n\n            if (modelElement != null && modelElement.length > 0) {\n                modelElement = modelElement[0];\n\n                // convert the model element to a canvas element\n                html2canvas(modelElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n                });\n            }\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip model button\n     * @return whether to show the snip model button\n     */\n    showSnipModelButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipModelButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('AREYOUSUREYOUWANTTOCHANGETHISCOMPONENTTYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Get the student work from the components in this node and potentially\n     * from other components\n     * @return an object containing work from the components in this node and\n     * potentially from other components\n     */\n    getStudentWork() {\n\n        var studentWork = {};\n\n        // get the latest component states from this node\n        var studentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n        studentWork.studentWorkFromThisNode = studentWorkFromThisNode;\n\n        /*\n         * this is an array that contains objects with a nodeId and componentId\n         * fields. this specifies what student data we need to obtain.\n         */\n        var getStudentWorkFromOtherComponents = this.componentContent.getStudentWorkFromOtherComponents;\n\n        if (getStudentWorkFromOtherComponents != null) {\n            var studentWorkFromOtherComponents = [];\n\n            // loop through all the objects\n            for (var c = 0; c < getStudentWorkFromOtherComponents.length; c++) {\n                var otherComponent = getStudentWorkFromOtherComponents[c];\n\n                if (otherComponent != null) {\n\n                    // get the node id and component id\n                    var tempNodeId = otherComponent.nodeId;\n                    var tempComponentId = otherComponent.componentId;\n\n                    if (tempNodeId != null) {\n\n                        if (tempComponentId != null) {\n\n                            // get the latest component state for the given component\n                            var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                            if (tempComponentState == null) {\n                                /*\n                                 * there is no component state for the component\n                                 * so we will just add an object with a node id field\n                                 * and component id field and no other fields to show\n                                 * that there is no student data for the component.\n                                 */\n                                tempComponentState = {};\n                                tempComponentState.nodeId = tempNodeId;\n                                tempComponentState.componentId = tempComponentId;\n                            }\n\n                            // add the component state to the array\n                            studentWorkFromOtherComponents.push(tempComponentState);\n                        }\n                    }\n                }\n            }\n\n            studentWork.studentWorkFromOtherComponents = studentWorkFromOtherComponents;\n        }\n\n        return studentWork;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\nEmbeddedController.$inject = [\n    '$filter',\n    '$injector',\n    '$q',\n    '$scope',\n    '$sce',\n    '$window',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'EmbeddedService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default EmbeddedController;\n"]}