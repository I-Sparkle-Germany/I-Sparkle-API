{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$mdDialog","$q","$rootScope","$scope","$sce","$timeout","$window","AnnotationService","ConfigService","EmbeddedService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","latestAnnotations","componentStateId","embeddedApplicationIFrameId","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","showJSONAuthoring","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","originalComponentContent","mode","workgroupId","teacherWorkgroupId","id","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","setURL","componentState","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","message","messageType","sendMessageToApplication","$on","event","args","isSubmit","studentWork","$emit","embeddedController","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","annotation","annotationNodeId","annotationComponentId","angular","removeEventListener","messageEventListener","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","authoringViewComponentChanged","messageEvent","messageEventData","data","category","eventCategory","eventData","saveVLEEvent","setStudentData","studentData","studentDataChanged","sendLatestWorkToApplication","processLatestSubmit","iFrameResize","scrolling","getStudentWorkParams","getStudentWork","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","makeCopyOfJSONObject","$broadcast","contentLocation","window","getElementById","contentWindow","addEventListener","latestState","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","hasConnectedComponent","handleConnectedComponents","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","isNotebookEnabled","exitListener","isApplicationNode","getNodePositionAndTitleByNodeId","getComponentsByNodeId","component","componentHasWork","lockAfterSubmit","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","indexOfComponentToDelete","splice","show","setShowSubmitButtonValue","isPopup","tags","index","tag","indexOfTagToDelete","confirm","mergedComponentState","firstTime","componentStates","mergeFields","connectedComponentState","fields","mergeComponentState","setStudentWork","baseComponentState","newComponentState","mergeField","name","when","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentType","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,kB;;;AACJ,8BAAYC,OAAZ,EACIC,SADJ,EAEIC,EAFJ,EAGIC,UAHJ,EAIIC,MAJJ,EAKIC,IALJ,EAMIC,QANJ,EAOIC,OAPJ,EAQIC,iBARJ,EASIC,aATJ,EAUIC,eAVJ,EAWIC,WAXJ,EAYIC,eAZJ,EAaIC,cAbJ,EAcIC,mBAdJ,EAeIC,kBAfJ,EAgBIC,WAhBJ,EAgBiB;AAAA;;AAAA,wIACThB,OADS,EACAC,SADA,EACWE,UADX,EACuBC,MADvB,EAEbI,iBAFa,EAEMC,aAFN,EAEqBE,WAFrB,EAGbC,eAHa,EAGIC,cAHJ,EAGoBC,mBAHpB,EAIbC,kBAJa,EAIOC,WAJP;;AAKf,UAAKd,EAAL,GAAUA,EAAV;AACA,UAAKG,IAAL,GAAYA,IAAZ;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA,UAAKG,eAAL,GAAuBA,eAAvB;AACA,UAAKO,SAAL,GAAiB,MAAKJ,cAAL,CAAoBI,SAArC;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,gBAAL,GAAwB,IAAxB;AACA,UAAKC,yBAAL,GAAiC,IAAjC;AACA,UAAKC,aAAL,GAAqB,IAArB;AACA,UAAKC,GAAL,GAAW,IAAX;;AAEA;AACA,UAAKC,KAAL,GAAa,IAAb;;AAEA;AACA,UAAKC,MAAL,GAAc,IAAd;;AAEA;AACA,UAAKC,QAAL,GAAgB,IAAhB;;AAEA;AACA,UAAKC,SAAL,GAAiB,IAAjB;;AAEA,UAAKC,OAAL,GAAe,KAAf;AACA,UAAKC,aAAL,GAAqB,KAArB;AACA,UAAKC,wBAAL,GAAgC,IAAhC;AACA,UAAKC,cAAL,GAAsB,MAAKnB,eAAL,CAAqBoB,iBAArB,EAAtB;;AAEA,UAAKC,WAAL,GAAmB;AACjBC,YAAM,EADW;AAEjBC,YAAM;AAFW,KAAnB;;AAKA,UAAKC,iBAAL,GAAyB,IAAzB;AACA,UAAKC,gBAAL,GAAwB,IAAxB;AACA,UAAKC,2BAAL,GAAmC,EAAnC;AACA,UAAKC,mBAAL,GAA2B,KAA3B;AACA,UAAKC,qBAAL,GAA6B,KAA7B;AACA,UAAKC,qBAAL,GAA6B,KAA7B;AACA,UAAKC,iBAAL,GAAyB,KAAzB;;AAEA,UAAKC,iCAAL,GAAyC,CACvC;AACEC,aAAO,QADT;AAEEV,YAAM;AAFR,KADuC,EAKvC;AACEU,aAAO,QADT;AAEEV,YAAM;AAFR,KALuC,CAAzC;;AAWA,UAAKW,8BAAL,GAAsC,CACpC,EAAEC,MAAM,WAAR,EADoC,EAEpC,EAAEA,MAAM,iBAAR,EAFoC,EAGpC,EAAEA,MAAM,YAAR,EAHoC,EAIpC,EAAEA,MAAM,YAAR,EAJoC,EAKpC,EAAEA,MAAM,MAAR,EALoC,EAMpC,EAAEA,MAAM,UAAR,EANoC,EAOpC,EAAEA,MAAM,OAAR,EAPoC,EAQpC,EAAEA,MAAM,OAAR,EARoC,EASpC,EAAEA,MAAM,OAAR,EAToC,EAUpC,EAAEA,MAAM,gBAAR,EAVoC,EAWpC,EAAEA,MAAM,cAAR,EAXoC,EAYpC,EAAEA,MAAM,OAAR,EAZoC,CAAtC;;AAeA,UAAK5B,MAAL,GAAc,MAAKd,MAAL,CAAYc,MAA1B;;AAEA,UAAKE,gBAAL,GAAwB,MAAKhB,MAAL,CAAYgB,gBAApC;AACA,UAAKC,yBAAL,GAAiC,MAAKjB,MAAL,CAAYiB,yBAA7C;;AAEA;;;;AAIA,UAAK0B,wBAAL,GAAgC,MAAK3C,MAAL,CAAY2C,wBAA5C;;AAEA;AACA,UAAKC,IAAL,GAAY,MAAK5C,MAAL,CAAY4C,IAAxB;;AAEA,UAAKC,WAAL,GAAmB,MAAK7C,MAAL,CAAY6C,WAA/B;AACA,UAAKC,kBAAL,GAA0B,MAAK9C,MAAL,CAAY8C,kBAAtC;;AAEA,QAAI,MAAK9B,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,YAAKD,WAAL,GAAmB,MAAKC,gBAAL,CAAsB+B,EAAzC;AACA,YAAKb,2BAAL,GAAmC,kBAAkB,MAAKnB,WAA1D;AACA,YAAKG,aAAL,GAAqB,MAAKF,gBAAL,CAAsB0B,IAA3C;;AAEA,UAAI,MAAKE,IAAL,KAAc,SAAlB,EAA6B;AAC3B,cAAKT,mBAAL,GAA2B,MAAKnB,gBAAL,CAAsBgC,cAAjD;AACA,cAAKZ,qBAAL,GAA6B,MAAKpB,gBAAL,CAAsBiC,gBAAnD;AACA,cAAKjB,iBAAL,GAAyB,MAAK5B,iBAAL,CAAuB8C,6BAAvB,CAAqD,MAAKpC,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAK8B,WAAzF,CAAzB;AACA,cAAKnB,wBAAL,GAAgC,IAAhC;AACD,OALD,MAKO,IAAI,MAAKkB,IAAL,KAAc,WAAlB,EAA+B;AACpC,cAAKO,kBAAL,GAA0B,sBAAsB,MAAKrC,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAAzE;AACA,cAAKqC,oBAAL,GAA4B,MAAKpC,gBAAL,CAAsBqC,MAAlD;;AAEA;AACA,YAAIC,oBAAoB,MAAKC,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;AACA,YAAIC,oBAAoB,MAAK5C,WAAL,CACnB6C,uBADmB,QACW,IADX,EACiB,MAAK3C,MADtB,EAC8B,MAAKC,WADnC,EACgD,QADhD,EAC0DuC,iBAD1D,CAAxB;;AAGA,cAAKI,uBAAL,GAA+B;AAC7BC,mBAAS,CACP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADO,EAEP,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFO,EAGP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHO,EAIP,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJO,EAKP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALO,EAMP,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANO,EAOP,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPO,EAQP,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARO,EASP,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATO,EAUP,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVO,CADoB;AAa7BtC,kBAAQ,GAbqB;AAc7BuC,8BAAoB,IAdS;AAe7BC,mBAAS;AACPC,+BAAmBN;AADZ;AAfoB,SAA/B;;AAoBA,cAAKO,2BAAL;;AAEA/D,eAAOgE,MAAP,CAAc,YAAW;AACvB,iBAAO,KAAK/C,yBAAZ;AACD,SAFa,CAEZgD,IAFY,OAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACzC,eAAKnD,gBAAL,GAAwB,KAAKP,cAAL,CAAoB2D,gBAApB,CAAqCF,QAArC,CAAxB;AACA,eAAK/B,mBAAL,GAA2B,KAAKnB,gBAAL,CAAsBgC,cAAjD;AACA,eAAKZ,qBAAL,GAA6B,KAAKpB,gBAAL,CAAsBiC,gBAAnD;AACA,eAAK7B,KAAL,GAAa,KAAKJ,gBAAL,CAAsBI,KAAtB,GAA8B,KAAKJ,gBAAL,CAAsBI,KAApD,GAA4D,MAAzE;AACA,eAAKC,MAAL,GAAc,KAAKL,gBAAL,CAAsBK,MAAtB,GAA+B,KAAKL,gBAAL,CAAsBK,MAArD,GAA8D,MAA5E;AACA,eAAKgD,MAAL,CAAY,KAAKrD,gBAAL,CAAsBG,GAAlC;AACD,SAPa,CAOZ8C,IAPY,OAFd,EASc,IATd;AAUD,OA3CM,MA2CA,IAAI,MAAKrB,IAAL,KAAc,SAAd,IAA2B,MAAKA,IAAL,KAAc,iBAA7C,EAAgE;AACrE,cAAKT,mBAAL,GAA2B,KAA3B;AACA,cAAKC,qBAAL,GAA6B,KAA7B;AACA,cAAKV,wBAAL,GAAgC,KAAhC;AACA,YAAI4C,iBAAiB,MAAKtE,MAAL,CAAYsE,cAAjC;AACA,YAAIA,kBAAkB,IAAtB,EAA4B;AAC1B;AACA,gBAAKpC,2BAAL,GAAmC,kBAAkBoC,eAAevB,EAApE;AACA,cAAI,MAAKH,IAAL,KAAc,iBAAlB,EAAqC;AACnC,kBAAKV,2BAAL,GAAmC,kCAAkCoC,eAAevB,EAApF;AACD;AACF;;AAED,YAAI,MAAKH,IAAL,KAAc,SAAlB,EAA6B;AAC3B,gBAAKZ,iBAAL,GAAyB,MAAK5B,iBAAL,CAAuB8C,6BAAvB,CAAqD,MAAKpC,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAK8B,WAAzF,CAAzB;AACD;AACF,OAhBM,MAgBA,IAAI,MAAKD,IAAL,KAAc,cAAlB,EAAkC;AACvC,cAAKT,mBAAL,GAA2B,KAA3B;AACA,cAAKC,qBAAL,GAA6B,KAA7B;AACA,cAAKV,wBAAL,GAAgC,KAAhC;AACD,OAJM,MAIA,IAAI,MAAKkB,IAAL,KAAc,kBAAlB,EAAsC;AAC3C,cAAKT,mBAAL,GAA2B,KAA3B;AACA,cAAKC,qBAAL,GAA6B,KAA7B;AACA,cAAKV,wBAAL,GAAgC,KAAhC;AACD;;AAED,UAAI,MAAKV,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,cAAKqD,MAAL,CAAY,MAAKrD,gBAAL,CAAsBG,GAAlC;AACD;;AAED,YAAKC,KAAL,GAAa,MAAKJ,gBAAL,CAAsBI,KAAtB,GAA8B,MAAKJ,gBAAL,CAAsBI,KAApD,GAA4D,MAAzE;AACA,YAAKC,MAAL,GAAc,MAAKL,gBAAL,CAAsBK,MAAtB,GAA+B,MAAKL,gBAAL,CAAsBK,MAArD,GAA8D,MAA5E;;AAEA,UAAI,MAAKrB,MAAL,CAAYuE,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC9C,cAAKxE,MAAL,CAAYuE,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,MAAKzE,MAApE,EAA4E,MAAKgB,gBAAjF;AACD;AACF;;AAED;;;;;;;;AAQA,UAAKhB,MAAL,CAAY0E,0CAAZ,GACI,UAACC,kBAAD,EAAqBC,wBAArB,EAA+CN,cAA/C,EAAkE;AACpE,UAAIO,UAAU,EAAd;AACAA,cAAQC,WAAR,GAAsB,4CAAtB;AACAD,cAAQP,cAAR,GAAyBA,cAAzB;AACA,YAAKS,wBAAL,CAA8BF,OAA9B;AACD,KAND;;AAQA,UAAK7E,MAAL,CAAYgF,GAAZ,CAAgB,mBAAhB,EAAqC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACpD,UAAIpE,SAASoE,KAAKpE,MAAlB;AACA,UAAI,MAAKA,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,cAAKqE,QAAL,GAAgB,IAAhB;AACD;AACF,KALD;;AAOA,UAAKnF,MAAL,CAAYgF,GAAZ,CAAgB,0BAAhB,EAA4C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC3D,UAAIZ,iBAAiBY,KAAKE,WAA1B;AACA,UAAId,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIA,eAAevD,WAAf,KAA+B,MAAKA,WAAxC,EAAqD;AACnD;AACA,gBAAKS,OAAL,GAAe,KAAf;AACA,gBAAKxB,MAAL,CAAYqF,KAAZ,CAAkB,gBAAlB,EAAoC,EAACtE,aAAa,MAAKA,WAAnB,EAAgCS,SAAS,KAAzC,EAApC;AACA,gBAAKxB,MAAL,CAAYsF,kBAAZ,CAA+BhB,cAA/B,GAAgD,IAAhD;;AAEA,cAAIiB,aAAajB,eAAeiB,UAAhC;AACA,cAAIJ,WAAWb,eAAea,QAA9B;AACA,cAAIK,iBAAiBlB,eAAekB,cAApC;AACA,cAAIC,iBAAiB,MAAKpF,aAAL,CAAmBqF,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA,cAAIL,QAAJ,EAAc;AACZ,kBAAKQ,cAAL,CAAoB,MAAKpC,UAAL,CAAgB,WAAhB,CAApB,EAAkDkC,cAAlD;AACA,kBAAKG,MAAL;AACA,kBAAKnE,aAAL,GAAqB,KAArB;AACA,kBAAKzB,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACtE,aAAa,MAAKA,WAAnB,EAAgCS,SAAS,KAAzC,EAA1C;AACD,WALD,MAKO,IAAI+D,UAAJ,EAAgB;AACrB,kBAAKI,cAAL,CAAoB,MAAKpC,UAAL,CAAgB,YAAhB,CAApB,EAAmDkC,cAAnD;AACD,WAFM,MAEA;AACL,kBAAKE,cAAL,CAAoB,MAAKpC,UAAL,CAAgB,OAAhB,CAApB,EAA8CkC,cAA9C;AACD;;AAED,cAAIZ,UAAU,EAAd;AACAA,kBAAQC,WAAR,GAAsB,qBAAtB;AACAD,kBAAQP,cAAR,GAAyBA,cAAzB;AACA,gBAAKS,wBAAL,CAA8BF,OAA9B;AACD;AACF;AACF,KA/BD;;AAiCA;;;;;;;;AAQA,UAAK7E,MAAL,CAAY6F,iBAAZ,GAAgC,UAASV,QAAT,EAAmB;AACjD,UAAIW,WAAW,KAAKhG,EAAL,CAAQiG,KAAR,EAAf;AACA,UAAIC,WAAW,KAAf;AACA,UAAIC,SAAS,QAAb;;AAEA,UAAId,QAAJ,EAAc;AACZ,YAAI,KAAKnF,MAAL,CAAYsF,kBAAZ,CAA+B7D,aAAnC,EAAkD;AAChDuE,qBAAW,IAAX;AACAC,mBAAS,QAAT;AACD;AACF,OALD,MAKO;AACL,YAAI,KAAKjG,MAAL,CAAYsF,kBAAZ,CAA+B9D,OAAnC,EAA4C;AAC1CwE,qBAAW,IAAX;AACAC,mBAAS,MAAT;AACD;AACF;;AAED,UAAID,QAAJ,EAAc;AACZ,aAAKhG,MAAL,CAAYsF,kBAAZ,CAA+BY,oBAA/B,CAAoDD,MAApD,EAA4DE,IAA5D,CAAiE,UAAC7B,cAAD,EAAoB;AACnFwB,mBAASM,OAAT,CAAiB9B,cAAjB;AACD,SAFD;AAGD,OAJD,MAIO;AACL;;;;;AAKAwB,iBAASM,OAAT;AACD;;AAED,aAAON,SAASO,OAAhB;AACD,KA/B+B,CA+B9BpC,IA/B8B,OAAhC;;AAiCA;;;;AAIA,UAAKjE,MAAL,CAAYgF,GAAZ,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC1D,UAAIA,QAAQ,IAAZ,EAAmB;AACjB,YAAIoB,aAAapB,KAAKoB,UAAtB;AACA,YAAIA,cAAc,IAAlB,EAAwB;AACtB,cAAIC,mBAAmBD,WAAWxF,MAAlC;AACA,cAAI0F,wBAAwBF,WAAWvF,WAAvC;AACA,cAAI,MAAKD,MAAL,KAAgByF,gBAAhB,IACF,MAAKxF,WAAL,KAAqByF,qBADvB,EAC8C;AAC5C,kBAAKxE,iBAAL,GAAyB,MAAK5B,iBAAL,CACpB8C,6BADoB,CACU,MAAKpC,MADf,EACuB,MAAKC,WAD5B,EACyC,MAAK8B,WAD9C,CAAzB;AAED;AACF;AACF;AACF,KAbD;;AAgBA;;;;;AAKA,UAAK7C,MAAL,CAAYgF,GAAZ,CAAgB,UAAhB,EAA4ByB,QAAQxC,IAAR,QAAmB,UAASgB,KAAT,EAAgBC,IAAhB,EAAsB;AACnE,WAAK/E,OAAL,CAAauG,mBAAb,CAAiC,SAAjC,EAA4C,KAAKC,oBAAjD;AACD,KAF2B,CAA5B;;AAIA;;;;AAIA,UAAK3G,MAAL,CAAYgF,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAIA,KAAKpE,MAAL,IAAe,MAAKA,MAApB,IAA8BoE,KAAKnE,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACtE,cAAI6F,YAAY1B,KAAK0B,SAArB;AACA,cAAIA,aAAa,IAAjB,EAAuB;AACrB,gBAAIC,WAAWD,UAAUC,QAAzB;AACA,gBAAIA,YAAY,IAAhB,EAAsB;AACpB;AACA,kBAAIC,sBAAsB,MAAKzG,aAAL,CAAmB0G,6BAAnB,EAA1B;AACA,kBAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;AACA,kBAAII,eAAe,EAAnB;;AAEA,kBAAI/B,KAAKgC,MAAL,IAAe,QAAnB,EAA6B;AAC3BD,+BAAe,sBAAsB,MAAKnG,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACD,eAFD,MAEO,IAAImE,KAAKgC,MAAL,IAAe,QAAnB,EAA6B;AAClCD,+BAAe,sBAAsB,MAAKnG,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACD;;AAED,kBAAIkG,gBAAgB,EAApB,EAAwB;AACtB,oBAAI,MAAKrG,WAAL,CAAiBuG,OAAjB,CAAyBN,QAAzB,CAAJ,EAAwC;AACtC;;;;AAIAO,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;AACAD,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACD,iBARD,MAQO,IAAI,MAAKjG,WAAL,CAAiB0G,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC7C;;;;AAIAO,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA,sBAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,+BAAaG,QAAb,GAAwB,MAAxB;AACAH,+BAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAI,oBAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,YAAK1H,SAAL,CAAe+H,IAAf;AACD,KA/CD;;AAiDA;;;;AAIA,UAAK5H,MAAL,CAAYgF,GAAZ,CAAgB,oCAAhB,EAAsD,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACrE,UAAI,MAAKpE,MAAL,IAAeoE,KAAKpE,MAApB,IAA8B,MAAKC,WAAL,IAAoBmE,KAAKnE,WAA3D,EAAwE;AACtE,YAAI8D,UAAU,EAAd;AACAA,gBAAQC,WAAR,GAAsB,oCAAtB;AACAD,gBAAQP,cAAR,GAAyBY,KAAKZ,cAA9B;AACA,cAAKS,wBAAL,CAA8BF,OAA9B;AACD;AACF,KAPD;;AASA;;;;AAIA,UAAK7E,MAAL,CAAYgF,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAIA,KAAKpE,MAAL,IAAe,MAAKA,MAApB,IAA8BoE,KAAKnE,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACtE,cAAI6F,YAAY1B,KAAK0B,SAArB;AACA,cAAIA,aAAa,IAAjB,EAAuB;AACrB,gBAAIC,WAAWD,UAAUC,QAAzB;AACA,gBAAIA,YAAY,IAAhB,EAAsB;AACpB,kBAAI3B,KAAKgC,MAAL,IAAe,WAAnB,EAAgC;AAC9B,sBAAKjG,yBAAL,CAA+BE,GAA/B,GAAqC0F,QAArC;AACA,sBAAKgB,6BAAL;AACD;AACF;AACF;AACF;AACF;AACD,YAAKhI,SAAL,CAAe+H,IAAf;AACD,KAhBD;;AAkBA;;;;AAIA,UAAK5H,MAAL,CAAYgF,GAAZ,CAAgB,gCAAhB,EAAkD,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACjE,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAInE,cAAcmE,KAAKnE,WAAvB;AACA,YAAI,MAAKA,WAAL,KAAqBA,WAAzB,EAAsC;AACpC,gBAAKsB,qBAAL,GAA6B,CAAC,MAAKA,qBAAnC;AACD;AACF;AACF,KAPD;;AASA,UAAKsE,oBAAL,GAA4BF,QAAQxC,IAAR,QAAmB,UAAS6D,YAAT,EAAuB;AACpE,UAAIC,mBAAmBD,aAAaE,IAApC;AACA,UAAID,iBAAiBjD,WAAjB,KAAiC,OAArC,EAA8C;AAC5C,YAAIhE,SAAS,KAAKA,MAAlB;AACA,YAAIC,cAAc,KAAKA,WAAvB;AACA,YAAIG,gBAAgB,KAAKA,aAAzB;AACA,YAAI+G,WAAWF,iBAAiBG,aAAhC;AACA,YAAIjD,QAAQ8C,iBAAiB9C,KAA7B;AACA,YAAIkD,YAAYJ,iBAAiBI,SAAjC;AACA,aAAKxH,kBAAL,CAAwByH,YAAxB,CAAqCtH,MAArC,EAA6CC,WAA7C,EAA0DG,aAA1D,EAAyE+G,QAAzE,EAAmFhD,KAAnF,EAA0FkD,SAA1F;AACD,OARD,MAQO,IAAIJ,iBAAiBjD,WAAjB,KAAiC,aAArC,EAAoD;AACzD,YAAIiD,iBAAiBhF,EAAjB,IAAuB,IAA3B,EAAiC;AAC/B;AACA,eAAKd,gBAAL,GAAwB8F,iBAAiBhF,EAAzC;AACD,SAHD,MAGO;AACL;AACA,eAAKd,gBAAL,GAAwB,IAAxB;AACD;;AAED,YAAI8F,iBAAiB5C,QAArB,EAA+B;AAC7B,eAAKA,QAAL,GAAgB4C,iBAAiB5C,QAAjC;AACD;;AAED,aAAK3D,OAAL,GAAe,IAAf;AACA,aAAK6G,cAAL,CAAoBN,iBAAiBO,WAArC;AACA,aAAKC,kBAAL;;AAEA;AACA,aAAKvI,MAAL,CAAYqF,KAAZ,CAAkB,wBAAlB,EAA4C,EAACvE,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACD,OAnBM,MAmBA,IAAIgH,iBAAiBjD,WAAjB,KAAiC,wBAArC,EAA+D;AACpE,aAAK0D,2BAAL;AACA,aAAKC,mBAAL;;AAEA;AACArB,UAAE,MAAM,KAAKlF,2BAAb,EAA0CwG,YAA1C,CAAuD,EAACC,WAAW,IAAZ,EAAvD;AACD,OANM,MAMA,IAAIZ,iBAAiBjD,WAAjB,KAAiC,gBAArC,EAAuD;AAC5D,YAAItD,WAAUuG,iBAAiBvG,OAA/B;AACA,aAAKA,OAAL,GAAeA,QAAf;AACA,aAAKxB,MAAL,CAAYqF,KAAZ,CAAkB,gBAAlB,EAAoC,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAASA,QAAzC,EAApC;AACD,OAJM,MAIA,IAAIuG,iBAAiBjD,WAAjB,KAAiC,sBAArC,EAA6D;AAClE,YAAIrD,gBAAgBsG,iBAAiBvG,OAArC;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKzB,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAASA,OAAzC,EAA1C;AACD,OAJM,MAIA,IAAIuG,iBAAiBjD,WAAjB,KAAiC,oBAArC,EAA2D;AAChE,aAAKuD,cAAL,CAAoBN,iBAAiBO,WAArC;AACA,aAAKC,kBAAL;AACD,OAHM,MAGA,IAAIR,iBAAiBjD,WAAjB,KAAiC,gBAArC,EAAuD;AAC5D,YAAI8D,uBAAuBb,iBAAiBa,oBAA5C;AACA,YAAIxD,cAAc,KAAKyD,cAAL,CAAoBd,iBAAiBa,oBAArC,CAAlB;AACA,YAAI/D,UAAUO,WAAd;AACAP,gBAAQC,WAAR,GAAsB,aAAtB;AACAD,gBAAQ+D,oBAAR,GAA+BA,oBAA/B;AACA,aAAK7D,wBAAL,CAA8BF,OAA9B;AACD,OAPM,MAOA,IAAIkD,iBAAiBjD,WAAjB,KAAiC,sBAArC,EAA6D;AAClE,YAAIgE,uBAAuB,KAAKC,oBAAL,EAA3B;AACA,YAAIlE,UAAU,EAAd;AACAA,gBAAQC,WAAR,GAAsB,mBAAtB;AACAD,gBAAQmE,iBAAR,GAA4BF,oBAA5B;AACA,aAAK/D,wBAAL,CAA8BF,OAA9B;AACD,OANM,MAMA,IAAIkD,iBAAiBjD,WAAjB,KAAiC,eAArC,EAAsD;AAC3D,YAAID,UAAU,EAAd;AACAA,gBAAQC,WAAR,GAAsB,YAAtB;AACA,YAAImE,aAAa,EAAjB;AACA,YAAI,KAAKjI,gBAAL,CAAsBiI,UAAtB,IAAoC,IAAxC,EAA8C;AAC5CA,uBAAa,KAAKrI,WAAL,CAAiBsI,oBAAjB,CAAsC,KAAKlI,gBAAL,CAAsBiI,UAA5D,CAAb;AACD;AACDA,mBAAWnI,MAAX,GAAoB,KAAKA,MAAzB;AACAmI,mBAAWlI,WAAX,GAAyB,KAAKA,WAA9B;AACA8D,gBAAQoE,UAAR,GAAqBA,UAArB;AACA,aAAKlE,wBAAL,CAA8BF,OAA9B;AACD;AACF,KAvE2B,CAA5B;;AAyEA,UAAK9E,UAAL,CAAgBoJ,UAAhB,CAA2B,wBAA3B,EAAqD,EAAErI,QAAQ,MAAKA,MAAf,EAAuBC,aAAa,MAAKA,WAAzC,EAArD;AAlee;AAmehB;;;;iCAEYqI,e,EAAiB;AAC5BC,aAAO7B,QAAP,CAAgB8B,cAAhB,CAA+B,KAAKpH,2BAApC,EAAiEqH,aAAjE,CAA+EC,gBAA/E,CAAgG,SAAhG,EAA2G,KAAK7C,oBAAhH;AACD;;AAED;;;;;;0CAGsB;AACpB,UAAI8C,cAAc,KAAKzJ,MAAL,CAAYsE,cAA9B;AACA,UAAImF,WAAJ,EAAiB;AACf,YAAIjE,iBAAiBiE,YAAYjE,cAAjC;AACA,YAAIC,iBAAiB,KAAKpF,aAAL,CAAmBqF,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,YAAIiE,YAAYtE,QAAhB,EAA0B;AACxB,eAAK1D,aAAL,GAAqB,KAArB;AACA,eAAKzB,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAAS,KAAzC,EAA1C;AACA,eAAKmE,cAAL,CAAoB,KAAKpC,UAAL,CAAgB,gBAAhB,CAApB,EAAuDkC,cAAvD;AACD,SAJD,MAIO;AACL,eAAKhE,aAAL,GAAqB,IAArB;AACA,eAAKzB,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAAS,IAAzC,EAA1C;AACA,eAAKmE,cAAL,CAAoB,KAAKpC,UAAL,CAAgB,YAAhB,CAApB,EAAmDkC,cAAnD;AACD;AACF;AACF;;;2BAEMtE,G,EAAK;AACV,UAAIA,OAAO,IAAX,EAAiB;AACf,aAAKA,GAAL,GAAW,KAAKlB,IAAL,CAAUyJ,kBAAV,CAA6BvI,GAA7B,CAAX;AACD;AACF;;;6BAEQ;AACP,UAAI,KAAKwI,iBAAL,EAAJ,EAA8B;AAC5B,aAAKC,UAAL,GAAkB,IAAlB;AACD;AACF;;;;;AAED;;;yCAGqB;AAAA;;AACnB;;;;AAIA,WAAKpI,OAAL,GAAe,IAAf;AACA,WAAKxB,MAAL,CAAYqF,KAAZ,CAAkB,gBAAlB,EAAoC,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAAS,IAAzC,EAApC;;AAEA,WAAKC,aAAL,GAAqB,IAArB;AACA,WAAKzB,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACtE,aAAa,KAAKA,WAAnB,EAAgCS,SAAS,IAAzC,EAA1C;;AAEA,WAAKmE,cAAL,CAAoB,EAApB,EAAwB,IAAxB;AACA,UAAI5E,cAAc,KAAK8I,cAAL,EAAlB;;AAEA;;;;;;AAMA,UAAI5D,SAAS,QAAb;;AAEA,WAAKC,oBAAL,CAA0BD,MAA1B,EAAkCE,IAAlC,CAAuC,UAAC7B,cAAD,EAAoB;AACzD,eAAKtE,MAAL,CAAYqF,KAAZ,CAAkB,6BAAlB,EAAiD,EAACvE,QAAQ,OAAKA,MAAd,EAAsBC,aAAaA,WAAnC,EAAgDuD,gBAAgBA,cAAhE,EAAjD;AACD,OAFD;AAGD;;;;;AAED;;;;yCAIqB2B,M,EAAQ;AAC3B,UAAI3B,iBAAiB,KAAK/D,WAAL,CAAiBuJ,uBAAjB,EAArB;;AAEA,UAAI,KAAK7H,gBAAL,IAAyB,IAA7B,EAAmC;AACjCqC,uBAAevB,EAAf,GAAoB,KAAKd,gBAAzB;AACD;;AAED,UAAI,KAAKkD,QAAT,EAAmB;AACjBb,uBAAea,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;;;;AAIA,aAAKA,QAAL,GAAgB,KAAhB;AACD;;AAEDb,qBAAegE,WAAf,GAA6B,KAAKA,WAAlC;AACAhE,qBAAepD,aAAf,GAA+B,UAA/B;AACAoD,qBAAexD,MAAf,GAAwB,KAAKA,MAA7B;AACAwD,qBAAevD,WAAf,GAA6B,KAAKA,WAAlC;;AAEA,UAAI+E,WAAW,KAAKhG,EAAL,CAAQiG,KAAR,EAAf;;AAEA;;;;AAIA,WAAKgE,wCAAL,CAA8CjE,QAA9C,EAAwDxB,cAAxD,EAAwE2B,MAAxE;AACA,aAAOH,SAASO,OAAhB;AACD;;;;;AAED;;;;;;;;;;6DAUyCP,Q,EAAUxB,c,EAAgB2B,M,EAAQ;AACzE;;;;AAIAH,eAASM,OAAT,CAAiB9B,cAAjB;AACD;;;kDAE6B;AAC5B,UAAIA,iBAAiB,KAAKtE,MAAL,CAAYsE,cAAjC;AACA,UAAI,KAAK1D,WAAL,CAAiBoJ,qBAAjB,CAAuC,KAAKhJ,gBAA5C,CAAJ,EAAmE;AACjEsD,yBAAiB,KAAK2F,yBAAL,EAAjB;AACD;AACD,UAAIpF,UAAU;AACZC,qBAAa,gBADD;AAEZR,wBAAgBA;AAFJ,OAAd;;AAKA,WAAKS,wBAAL,CAA8BF,OAA9B;AACD;;;6CAEwBA,O,EAAS;AAChCwE,aAAO7B,QAAP,CAAgB8B,cAAhB,CAA+B,KAAKpH,2BAApC,EAAiEqH,aAAjE,CAA+EW,WAA/E,CAA2FrF,OAA3F,EAAoG,GAApG;AACD;;;;;AAED;;;;;mCAKeA,O,EAAS9C,I,EAAM;AAC5B,WAAKF,WAAL,CAAiBC,IAAjB,GAAwB+C,OAAxB;AACA,WAAKhD,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACD;;;;;AAED;;;;qCAIiB;AACf,aAAO,KAAKf,gBAAL,CAAsB+B,EAA7B;AACD;;;;;AAED;;;oDAGgC;AAC9B,WAAKgB,2BAAL;;AAEA;;;;AAIA,WAAK/D,MAAL,CAAYuE,OAAZ,CAAoB4F,uBAApB,CAA4CC,wBAA5C;AACD;;;;;AAED;;;;4DAIwC;AACtC,UAAI;AACF;;;;AAIA,YAAIC,yBAAyB5D,QAAQ6D,QAAR,CAAiB,KAAKC,mCAAtB,CAA7B;;AAEA,aAAK9J,cAAL,CAAoB+J,gBAApB,CAAqC,KAAK1J,MAA1C,EAAkD,KAAKC,WAAvD,EAAoEsJ,sBAApE;;AAEA,aAAKrJ,gBAAL,GAAwBqJ,sBAAxB;;AAEA;;;;AAIA,aAAKrK,MAAL,CAAYuE,OAAZ,CAAoB4F,uBAApB,CAA4CC,wBAA5C;AACD,OAhBD,CAgBE,OAAMK,CAAN,EAAS;AACT,aAAKzK,MAAL,CAAYuE,OAAZ,CAAoB4F,uBAApB,CAA4CO,8BAA5C;AACD;AACF;;;;;AAED;;;kDAG8B;AAC5B,WAAKH,mCAAL,GAA2C9D,QAAQkE,MAAR,CAAe,KAAK1J,yBAApB,EAA+C,CAA/C,CAA3C;AACD;;;;;AAED;;;;8BAIU2J,M,EAAQ;AAAA;;AAChB,UAAIC,SAASzD,EAAE,MAAM,KAAKlF,2BAAb,CAAb;AACA,UAAI2I,UAAU,IAAV,IAAkBA,OAAOC,MAAP,GAAgB,CAAtC,EAAyC;AACvC,YAAIC,eAAeF,OAAOG,QAAP,GAAkBC,IAAlB,CAAuB,MAAvB,CAAnB;AACA,YAAIF,gBAAgB,IAAhB,IAAwBA,aAAaD,MAAb,GAAsB,CAAlD,EAAqD;AACnDC,yBAAeA,aAAa,CAAb,CAAf;;AAEA;AACA,qCAAYA,YAAZ,EAA0B5E,IAA1B,CAA+B,UAAC+E,MAAD,EAAY;AACzC,gBAAIC,UAAUD,OAAOE,SAAP,CAAiB,WAAjB,CAAd;AACA,gBAAIC,cAAc,OAAKzK,WAAL,CAAiB0K,8BAAjB,CAAgDH,OAAhD,CAAlB;AACA,mBAAK3K,eAAL,CAAqB+K,OAArB,CAA6BX,MAA7B,EAAqCS,WAArC;AACD,WAJD;AAKD;AACF;AACF;;AAED;;;;;;;0CAIsB;AACpB,aAAO,KAAK7K,eAAL,CAAqBgL,iBAArB,MACH,KAAK9J,wBADT;AAED;;AAED;;;;;;;2CAIuB;AACrB;;;;AAIA,WAAK+J,YAAL,GAAoB,KAAKzL,MAAL,CAAYgF,GAAZ,CAAgB,MAAhB,EAAwByB,QAAQxC,IAAR,CAAa,IAAb,EAAmB,UAASgB,KAAT,EAAgBC,IAAhB,EAAsB,CAEpF,CAF2C,CAAxB,CAApB;AAGD;;;;;AAED;;;;;sCAKkBpE,M,EAAQ;AACxB,aAAO,KAAKL,cAAL,CAAoBiL,iBAApB,CAAsC5K,MAAtC,CAAP;AACD;;;oDAE+BA,M,EAAQ;AACtC,aAAO,KAAKL,cAAL,CAAoBkL,+BAApB,CAAoD7K,MAApD,CAAP;AACD;;;0CAEqBA,M,EAAQ;AAC5B,aAAO,KAAKL,cAAL,CAAoBmL,qBAApB,CAA0C9K,MAA1C,CAAP;AACD;;;qCAEgB+K,S,EAAW;AAC1B,UAAIA,aAAa,IAAjB,EAAuB;AACrB,eAAO,KAAKpL,cAAL,CAAoBqL,gBAApB,CAAqCD,SAArC,CAAP;AACD;AACD,aAAO,IAAP;AACD;;;wCAEmB;AAClB,UAAI,KAAK7K,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,YAAI,KAAKA,gBAAL,CAAsB+K,eAA1B,EAA2C;AACzC,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;wCAEmB;AAClB,WAAK5G,QAAL,GAAgB,KAAhB;AACA,WAAKnF,MAAL,CAAYqF,KAAZ,CAAkB,wBAAlB,EAA4C,EAACvE,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACD;;;0CAEqB;AACpB,WAAKoE,QAAL,GAAgB,IAAhB;AACA,WAAKnF,MAAL,CAAYqF,KAAZ,CAAkB,0BAAlB,EAA8C,EAACvE,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACD;;;2CAEsB;AACrB,aAAO,KAAKJ,kBAAL,CAAwBqL,6CAAxB,CAAsE,KAAKlL,MAA3E,EAAmF,KAAKC,WAAxF,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;mCAiBekL,M,EAAQ;AACrB,UAAI7G,cAAc,EAAlB;;AAEA,UAAI6G,UAAU,IAAV,IAAkBA,OAAOC,qCAA7B,EAAoE;AAClE9G,oBAAY+G,kCAAZ,GAAiD,KAAKxL,kBAAL,CAAwBqL,6CAAxB,CAAsE,KAAKlL,MAA3E,EAAmF,KAAKC,WAAxF,CAAjD;AACD;;AAED,UAAIkL,UAAU,IAAV,IAAkBA,OAAOG,kCAA7B,EAAiE;AAC/DhH,oBAAYiH,+BAAZ,GAA8C,KAAK1L,kBAAL,CAAwB2L,wCAAxB,CAAiE,KAAKxL,MAAtE,EAA8E,KAAKC,WAAnF,CAA9C;AACD;;AAED,UAAIkL,UAAU,IAAV,IAAkBA,OAAOM,gCAA7B,EAA+D;AAC7DnH,oBAAYoH,6BAAZ,GAA4C,KAAK7L,kBAAL,CAAwB8L,gCAAxB,CAAyD,KAAK3L,MAA9D,CAA5C;AACD;;AAED,UAAImL,UAAU,IAAV,IAAkBA,OAAOS,6BAA7B,EAA4D;AAC1DtH,oBAAYuH,0BAAZ,GAAyC,KAAKhM,kBAAL,CAAwBiM,0BAAxB,CAAmD,KAAK9L,MAAxD,CAAzC;AACD;;AAED,UAAImL,UAAU,IAAV,IAAkBA,OAAOY,uCAA7B,EAAsE;AACpE;AACA,YAAIC,kBAAkBb,OAAOa,eAA7B;AACA,YAAIC,uCAAuC,EAA3C;AACA,YAAID,mBAAmB,IAAvB,EAA6B;AAAA;AAAA;AAAA;;AAAA;AAC3B,iCAA2BA,eAA3B,8HAA4C;AAAA,kBAAnCE,cAAmC;;AAC1C,kBAAIA,kBAAkB,IAAtB,EAA4B;AAC1B,oBAAIC,aAAaD,eAAelM,MAAhC;AACA,oBAAIoM,kBAAkBF,eAAejM,WAArC;;AAEA,oBAAIkM,cAAc,IAAd,IAAsBC,mBAAmB,IAA7C,EAAmD;AACjD,sBAAIC,qBAAqB,KAAKxM,kBAAL,CAAwBqL,6CAAxB,CAAsEiB,UAAtE,EAAkFC,eAAlF,CAAzB;AACA,sBAAIC,sBAAsB,IAA1B,EAAgC;AAC9BJ,yDAAqCK,IAArC,CAA0CD,kBAA1C;AACD;AACF;AACF;AACF;AAb0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc5B;AACD/H,oBAAY2H,oCAAZ,GAAmDA,oCAAnD;AACD;;AAED,UAAId,UAAU,IAAV,IAAkBA,OAAOoB,oCAA7B,EAAmE;AACjE,YAAIP,kBAAkBb,OAAOa,eAA7B;AACA,YAAIQ,oCAAoC,EAAxC;AACA,YAAIR,mBAAmB,IAAvB,EAA6B;AAAA;AAAA;AAAA;;AAAA;AAC3B,kCAA2BA,eAA3B,mIAA4C;AAAA,kBAAnCE,cAAmC;;AAC1C,kBAAIA,kBAAkB,IAAtB,EAA4B;AAC1B,oBAAIC,aAAaD,eAAelM,MAAhC;AACA,oBAAIoM,kBAAkBF,eAAejM,WAArC;AACA,oBAAIkM,cAAc,IAAd,IAAsBC,mBAAmB,IAA7C,EAAmD;AACjD,sBAAIK,sBAAsB,KAAK5M,kBAAL,CAAwB2L,wCAAxB,CAAiEW,UAAjE,EAA6EC,eAA7E,CAA1B;AACA,sBAAIK,uBAAuB,IAAvB,IAA+BA,oBAAoBzC,MAApB,GAA6B,CAAhE,EAAmE;AACjEwC,wDAAoCA,kCAAkCE,MAAlC,CAAyCD,mBAAzC,CAApC;AACD;AACF;AACF;AACF;AAZ0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa5B;AACDnI,oBAAYkI,iCAAZ,GAAgDA,iCAAhD;AACD;AACD,aAAOlI,WAAP;AACD;;;kDAE6B;AAC5B,UAAIqI,OAAO,KAAKrK,oBAAhB;;AAEA;;;;;;;AAOAqK,aAAO,KAAKpN,aAAL,CAAmBqN,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,aAAO,KAAK7M,WAAL,CAAiB+M,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA,WAAKxM,yBAAL,CAA+BoC,MAA/B,GAAwCoK,IAAxC;AACA,WAAK5F,6BAAL;AACD;;;4CAEuB;AACtB,UAAI+F,wBAAwB,EAA5B;AACAA,4BAAsB9M,MAAtB,GAA+B,KAAKA,MAApC;AACA8M,4BAAsB7M,WAAtB,GAAoC,IAApC;AACA6M,4BAAsBC,QAAtB,GAAiC,QAAjC;AACA,UAAI,KAAK5M,yBAAL,CAA+B6M,mBAA/B,IAAsD,IAA1D,EAAgE;AAC9D,aAAK7M,yBAAL,CAA+B6M,mBAA/B,GAAqD,EAArD;AACD;AACD,WAAK7M,yBAAL,CAA+B6M,mBAA/B,CAAmDV,IAAnD,CAAwDQ,qBAAxD;AACA,WAAK/F,6BAAL;AACD;;;6CAEwBkG,wB,EAA0B;AACjD,UAAI,KAAK9M,yBAAL,CAA+B6M,mBAA/B,IAAsD,IAA1D,EAAgE;AAC9D,aAAK7M,yBAAL,CAA+B6M,mBAA/B,CAAmDE,MAAnD,CAA0DD,wBAA1D,EAAoF,CAApF;AACD;AACD,WAAKlG,6BAAL;AACD;;;6CAEwBoG,I,EAAM;AAC7B,UAAIA,QAAQ,IAAR,IAAgBA,QAAQ,KAA5B,EAAmC;AACjC,aAAKhN,yBAAL,CAA+B+B,cAA/B,GAAgD,KAAhD;AACA,aAAK/B,yBAAL,CAA+BgC,gBAA/B,GAAkD,KAAlD;AACD,OAHD,MAGO;AACL,aAAKhC,yBAAL,CAA+B+B,cAA/B,GAAgD,IAAhD;AACA,aAAK/B,yBAAL,CAA+BgC,gBAA/B,GAAkD,IAAlD;AACD;;AAED;;;;;AAKA,WAAKjD,MAAL,CAAYqF,KAAZ,CAAkB,uCAAlB,EAA2D,EAACvE,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAAqDkC,kBAAkBgL,IAAvE,EAA3D;AACD;;;mDAE8B;AAC7B;;;;AAIA,WAAKC,wBAAL,CAA8B,KAAKjN,yBAAL,CAA+BgC,gBAA7D;AACA,WAAK4E,6BAAL;AACD;;AAED;;;;;;sCAGkB;AAChB,UAAIoE,SAAS,EAAb;AACAA,aAAOkC,OAAP,GAAiB,IAAjB;AACAlC,aAAOnL,MAAP,GAAgB,KAAKA,MAArB;AACAmL,aAAOlL,WAAP,GAAqB,KAAKA,WAA1B;AACAkL,aAAO/E,MAAP,GAAgB,WAAhB;AACA,WAAKnH,UAAL,CAAgBoJ,UAAhB,CAA2B,kBAA3B,EAA+C8C,MAA/C;AACD;;;6BAEQ;AACP,UAAI,KAAKhL,yBAAL,CAA+BmN,IAA/B,IAAuC,IAA3C,EAAiD;AAC/C,aAAKnN,yBAAL,CAA+BmN,IAA/B,GAAsC,EAAtC;AACD;AACD,WAAKnN,yBAAL,CAA+BmN,IAA/B,CAAoChB,IAApC,CAAyC,EAAzC;AACA,WAAKvF,6BAAL;AACD;;AAED;;;;;;;8BAIUwG,K,EAAO;AACf,UAAIA,QAAQ,CAAZ,EAAe;AACb;AACA,YAAIC,MAAM,KAAKrN,yBAAL,CAA+BmN,IAA/B,CAAoCC,KAApC,CAAV;AACA,aAAKpN,yBAAL,CAA+BmN,IAA/B,CAAoCJ,MAApC,CAA2CK,KAA3C,EAAkD,CAAlD;AACA,aAAKpN,yBAAL,CAA+BmN,IAA/B,CAAoCJ,MAApC,CAA2CK,QAAQ,CAAnD,EAAsD,CAAtD,EAAyDC,GAAzD;AACD;AACD,WAAKzG,6BAAL;AACD;;AAED;;;;;;;gCAIYwG,K,EAAO;AACjB,UAAIA,QAAQ,KAAKpN,yBAAL,CAA+BmN,IAA/B,CAAoCtD,MAApC,GAA6C,CAAzD,EAA4D;AAC1D;AACA,YAAIwD,MAAM,KAAKrN,yBAAL,CAA+BmN,IAA/B,CAAoCC,KAApC,CAAV;AACA,aAAKpN,yBAAL,CAA+BmN,IAA/B,CAAoCJ,MAApC,CAA2CK,KAA3C,EAAkD,CAAlD;AACA,aAAKpN,yBAAL,CAA+BmN,IAA/B,CAAoCJ,MAApC,CAA2CK,QAAQ,CAAnD,EAAsD,CAAtD,EAAyDC,GAAzD;AACD;AACD,WAAKzG,6BAAL;AACD;;;8BAES0G,kB,EAAoB;AAC5B,UAAIC,QAAQ,KAAKjL,UAAL,CAAgB,kCAAhB,CAAR,CAAJ,EAAkE;AAChE,aAAKtC,yBAAL,CAA+BmN,IAA/B,CAAoCJ,MAApC,CAA2CO,kBAA3C,EAA+D,CAA/D;AACD;AACD,WAAK1G,6BAAL;AACD;;AAED;;;;;;gDAG4B;AAC1B,UAAI4G,uBAAuB,KAAKzO,MAAL,CAAYsE,cAAvC;AACA,UAAIoK,YAAY,IAAhB;AACA,UAAID,wBAAwB,IAA5B,EAAkC;AAChCA,+BAAuB,KAAKlO,WAAL,CAAiBuJ,uBAAjB,EAAvB;AACA2E,6BAAqBnG,WAArB,GAAmC,EAAnC;AACD,OAHD,MAGO;AACLoG,oBAAY,KAAZ;AACD;AACD,UAAIZ,sBAAsB,KAAK9M,gBAAL,CAAsB8M,mBAAhD;AACA,UAAIA,uBAAuB,IAA3B,EAAiC;AAC/B,YAAIa,kBAAkB,EAAtB;AAD+B;AAAA;AAAA;;AAAA;AAE/B,gCAA+Bb,mBAA/B,mIAAoD;AAAA,gBAA3CnJ,kBAA2C;;AAClD,gBAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,kBAAI7D,SAAS6D,mBAAmB7D,MAAhC;AACA,kBAAIC,cAAc4D,mBAAmB5D,WAArC;AACA,kBAAI2B,OAAOiC,mBAAmBjC,IAA9B;AACA,kBAAIkM,cAAcjK,mBAAmBiK,WAArC;AACA,kBAAIlM,QAAQ,UAAZ,EAAwB;AACtB,oBAAI4B,iBAAiB,KAAK3D,kBAAL,CAAwBqL,6CAAxB,CAAsElL,MAAtE,EAA8EC,WAA9E,CAArB;AACA,oBAAIuD,kBAAkB,IAAtB,EAA4B;AAC1BqK,kCAAgBvB,IAAhB,CAAqB,KAAKxM,WAAL,CAAiBsI,oBAAjB,CAAsC5E,cAAtC,CAArB;AACD;AACD;AACA,qBAAKsF,UAAL,GAAkB,IAAlB;AACD,eAPD,MAOO,IAAIlH,QAAQ,YAAR,IAAwBA,QAAQ,IAApC,EAA0C;AAC/C,oBAAImM,0BAA0B,KAAKlO,kBAAL,CAAwBqL,6CAAxB,CAAsElL,MAAtE,EAA8EC,WAA9E,CAA9B;AACA,oBAAI8N,2BAA2B,IAA/B,EAAqC;AACnC,sBAAIC,SAASnK,mBAAmBmK,MAAhC;AACAL,yCAAuB,KAAKM,mBAAL,CAAyBN,oBAAzB,EAA+CI,uBAA/C,EAAwEC,MAAxE,EAAgFJ,SAAhF,CAAvB;AACD;AACF;AACF;AACF;AAvB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyB/B,YAAID,wBAAwB,IAA5B,EAAkC;AAChC,eAAKO,cAAL,CAAoBP,oBAApB;AACA,eAAKlG,kBAAL;AACD;AACF;AACD,aAAOkG,oBAAP;AACD;;AAED;;;;;;;;;;;wCAQoBQ,kB,EAAoBC,iB,EAAmBN,W,EAAaF,S,EAAW;AACjF,UAAIE,eAAe,IAAnB,EAAyB;AACvB,YAAIM,kBAAkBhO,aAAlB,IAAmC,UAAvC,EAAmD;AACjD;AACA+N,6BAAmB3G,WAAnB,GAAiC,KAAK1H,WAAL,CAAiBsI,oBAAjB,CAAsCgG,kBAAkB5G,WAAxD,CAAjC;AACD;AACF,OALD,MAKO;AACL;AADK;AAAA;AAAA;;AAAA;AAEL,gCAAuBsG,WAAvB,mIAAoC;AAAA,gBAA3BO,UAA2B;;AAClC,gBAAIC,OAAOD,WAAWC,IAAtB;AACA,gBAAIC,OAAOF,WAAWE,IAAtB;AACA,gBAAIpJ,SAASkJ,WAAWlJ,MAAxB;AACA,gBAAIoJ,QAAQ,WAAR,IAAuBX,aAAa,IAAxC,EAA8C;AAC5C,kBAAIzI,UAAU,OAAd,EAAuB;AACrBgJ,mCAAmB3G,WAAnB,CAA+B8G,IAA/B,IAAuCF,kBAAkB5G,WAAlB,CAA8B8G,IAA9B,CAAvC;AACD,eAFD,MAEO,IAAInJ,UAAU,MAAd,EAAsB;AAC3B;AACD;AACF,aAND,MAMO,IAAIoJ,QAAQ,QAAZ,EAAsB;AAC3B,kBAAIpJ,UAAU,OAAd,EAAuB;AACrBgJ,mCAAmB3G,WAAnB,CAA+B8G,IAA/B,IAAuCF,kBAAkB5G,WAAlB,CAA8B8G,IAA9B,CAAvC;AACD,eAFD,MAEO,IAAInJ,UAAU,MAAd,EAAsB;AAC3B;AACD;AACF;AACF;AAnBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBN;AACD,aAAOgJ,kBAAP;AACD;;AAED;;;;;;;mCAIe3K,c,EAAgB;AAC7B,WAAKgE,WAAL,GAAmBhE,eAAegE,WAAlC;AACD;;;;;AAED;;;;mCAIeA,W,EAAa;AAC1B,WAAKA,WAAL,GAAmBA,WAAnB;AACD;;;qDAEgC;AAC/B;;;;AAIA,UAAIsF,wBAAwB,EAA5B;AACAA,4BAAsB9M,MAAtB,GAA+B,KAAKA,MAApC;AACA8M,4BAAsB7M,WAAtB,GAAoC,IAApC;AACA6M,4BAAsBlL,IAAtB,GAA6B,IAA7B;AACA,WAAK4M,gEAAL,CAAsE1B,qBAAtE;;AAEA,UAAI,KAAK3M,yBAAL,CAA+B6M,mBAA/B,IAAsD,IAA1D,EAAgE;AAC9D,aAAK7M,yBAAL,CAA+B6M,mBAA/B,GAAqD,EAArD;AACD;AACD,WAAK7M,yBAAL,CAA+B6M,mBAA/B,CAAmDV,IAAnD,CAAwDQ,qBAAxD;AACA,WAAK/F,6BAAL;AACD;;AAED;;;;;;;;qFAKiElD,kB,EAAoB;AACnF,UAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,YAAI4K,aAAa,KAAK3D,qBAAL,CAA2BjH,mBAAmB7D,MAA9C,CAAjB;AACA,YAAIyO,cAAc,IAAlB,EAAwB;AACtB,cAAIC,4BAA4B,CAAhC;AACA,cAAIC,mBAAmB,IAAvB;AAFsB;AAAA;AAAA;;AAAA;AAGtB,kCAAsBF,UAAtB,mIAAkC;AAAA,kBAAzB1D,SAAyB;;AAChC,kBAAIA,aAAa,IAAjB,EAAuB;AACrB,oBAAI,KAAK6D,+BAAL,CAAqC7D,UAAUnJ,IAA/C,KACAmJ,UAAU9I,EAAV,IAAgB,KAAKhC,WADzB,EACsC;AACpC;AACAyO,+CAA6B,CAA7B;AACAC,qCAAmB5D,SAAnB;AACD;AACF;AACF;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AActB,cAAI2D,6BAA6B,CAAjC,EAAoC;AAClC;;;;AAIA7K,+BAAmB5D,WAAnB,GAAiC0O,iBAAiB1M,EAAlD;AACA4B,+BAAmBjC,IAAnB,GAA0B,YAA1B;AACD;AACF;AACF;AACF;;AAED;;;;;;;sDAIkC2L,K,EAAO;AACvC,UAAIG,QAAQ,KAAKjL,UAAL,CAAgB,iDAAhB,CAAR,CAAJ,EAAiF;AAC/E,YAAI,KAAKtC,yBAAL,CAA+B6M,mBAA/B,IAAsD,IAA1D,EAAgE;AAC9D,eAAK7M,yBAAL,CAA+B6M,mBAA/B,CAAmDE,MAAnD,CAA0DK,KAA1D,EAAiE,CAAjE;AACD;AACD,aAAKxG,6BAAL;AACD;AACF;;AAED;;;;;;;;uDAKmClD,kB,EAAoB;AACrD,UAAIgL,yBAAyB,IAA7B;AACA,UAAIhL,sBAAsB,IAA1B,EAAgC;AAC9B,YAAI7D,SAAS6D,mBAAmB7D,MAAhC;AACA,YAAIC,cAAc4D,mBAAmB5D,WAArC;AACA,YAAI8K,YAAY,KAAKpL,cAAL,CAAoBmP,kCAApB,CAAuD9O,MAAvD,EAA+DC,WAA/D,CAAhB;;AAEA,YAAI8K,aAAa,IAAjB,EAAuB;AACrB8D,mCAAyB9D,UAAUnJ,IAAnC;AACD;AACF;AACD,aAAOiN,sBAAP;AACD;;AAED;;;;;;;6DAIyChL,kB,EAAoB;AAC3D,UAAIA,sBAAsB,IAA1B,EAAgC;AAC9BA,2BAAmB5D,WAAnB,GAAiC,IAAjC;AACA4D,2BAAmBjC,IAAnB,GAA0B,IAA1B;AACA,aAAK4M,gEAAL,CAAsE3K,kBAAtE;AACA,aAAKkD,6BAAL;AACD;AACF;;AAED;;;;;;;kEAI8ClD,kB,EAAoB;AAChE,UAAIA,sBAAsB,IAA1B,EAAgC;AAC9B;AACAA,2BAAmBjC,IAAnB,GAA0B,YAA1B;AACA,aAAKmF,6BAAL;AACD;AACF;;AAED;;;;;;;2DAIuClD,kB,EAAoB;AACzD,UAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,YAAIA,mBAAmBjC,IAAnB,IAA2B,YAA/B,EAA6C;AAC3C;;;AAGD,SAJD,MAIO,IAAIiC,mBAAmBjC,IAAnB,IAA2B,UAA/B,EAA2C;AAChD;;;AAGD;AACD,aAAKmF,6BAAL;AACD;AACF;;AAED;;;;;;;;oDAKgC3G,a,EAAe;AAC7C,UAAIA,iBAAiB,IAArB,EAA2B;AACzB,YAAIuB,iCAAiC,KAAKA,8BAA1C;AADyB;AAAA;AAAA;;AAAA;AAEzB,gCAA0CA,8BAA1C,mIAA0E;AAAA,gBAAjEoN,6BAAiE;;AACxE,gBAAIA,iCAAiC,IAArC,EAA2C;AACzC,kBAAI3O,iBAAiB2O,8BAA8BnN,IAAnD,EAAyD;AACvD,uBAAO,IAAP;AACD;AACF;AACF;AARwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS1B;AACD,aAAO,KAAP;AACD;;AAED;;;;;;4CAGwB;AACtB,WAAKJ,iBAAL,GAAyB,CAAC,KAAKA,iBAA/B;AACA,UAAI,KAAKwN,iBAAL,IAA0B,CAAC,KAAKxN,iBAApC,EAAuD;AACrD;;;;AAIA,aAAKyN,qCAAL;;AAEA,aAAKhQ,UAAL,CAAgBoJ,UAAhB,CAA2B,mBAA3B,EAAgD,EAAEpI,aAAa,KAAKA,WAApB,EAAhD;AACA,aAAK+O,iBAAL,GAAyB,KAAzB;AACD;AACF;;AAED;;;;;;2CAGuB;AACrB,WAAKA,iBAAL,GAAyB,IAAzB;AACD;;;;;;AAGHnQ,mBAAmBqQ,OAAnB,GAA6B,CAC3B,SAD2B,EAE3B,WAF2B,EAG3B,IAH2B,EAI3B,YAJ2B,EAK3B,QAL2B,EAM3B,MAN2B,EAO3B,UAP2B,EAQ3B,SAR2B,EAS3B,mBAT2B,EAU3B,eAV2B,EAW3B,iBAX2B,EAY3B,aAZ2B,EAa3B,iBAb2B,EAc3B,gBAd2B,EAe3B,qBAf2B,EAgB3B,oBAhB2B,EAiB3B,aAjB2B,CAA7B;;kBAoBerQ,kB","file":"embeddedController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\nimport iframeResizer from 'iframe-resizer';\n\nclass EmbeddedController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      EmbeddedService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n      AnnotationService, ConfigService, NodeService,\n      NotebookService, ProjectService, StudentAssetService,\n      StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.EmbeddedService = EmbeddedService;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.nodeId = null;\n    this.componentId = null;\n    this.componentContent = null;\n    this.authoringComponentContent = null;\n    this.componentType = null;\n    this.url = null;\n\n    // the width of the iframe (optional)\n    this.width = null;\n\n    // the height of the iframe (optional)\n    this.height = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.isSnipModelButtonVisible = true;\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    this.latestAnnotations = null;\n    this.componentStateId = null;\n    this.embeddedApplicationIFrameId = '';\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    this.allowedConnectedComponentTypes = [\n      { type: 'Animation' },\n      { type: 'AudioOscillator' },\n      { type: 'ConceptMap' },\n      { type: 'Discussion' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Match' },\n      { type: 'MultipleChoice' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    this.componentContent = this.$scope.componentContent;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    if (this.componentContent != null) {\n      this.componentId = this.componentContent.id;\n      this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n      this.componentType = this.componentContent.type;\n\n      if (this.mode === 'student') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        this.isSnipModelButtonVisible = true;\n      } else if (this.mode === 'authoring') {\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        // create the custom button for inserting WISE assets into summernote\n        var InsertAssetButton = this.UtilService\n            .createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n          this.width = this.componentContent.width ? this.componentContent.width : '100%';\n          this.height = this.componentContent.height ? this.componentContent.height : '100%';\n          this.setURL(this.componentContent.url);\n        }.bind(this), true);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n        let componentState = this.$scope.componentState;\n        if (componentState != null) {\n          // create a unique id for the application iframe using this component state\n          this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n          if (this.mode === 'gradingRevision') {\n            this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n          }\n        }\n\n        if (this.mode === 'grading') {\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n      }\n\n      if (this.componentContent != null) {\n        this.setURL(this.componentContent.url);\n      }\n\n      this.width = this.componentContent.width ? this.componentContent.width : '100%';\n      this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n      if (this.$scope.$parent.nodeController != null) {\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      var message = {};\n      message.messageType = 'handleConnectedComponentStudentDataChanged';\n      message.componentState = componentState;\n      this.sendMessageToApplication(message);\n    }\n\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n      var nodeId = args.nodeId;\n      if (this.nodeId === nodeId) {\n        this.isSubmit = true;\n      }\n    });\n\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      var componentState = args.studentWork;\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          // set isDirty to false because the component state was just saved and notify node\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n          this.$scope.embeddedController.componentState = null;\n\n          let isAutoSave = componentState.isAutoSave;\n          let isSubmit = componentState.isSubmit;\n          let serverSaveTime = componentState.serverSaveTime;\n          let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n          if (isSubmit) {\n            this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n            this.submit();\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n          } else {\n            this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n          }\n\n          var message = {};\n          message.messageType = 'componentStateSaved';\n          message.componentState = componentState;\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.embeddedController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.embeddedController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n      if (args != null ) {\n        var annotation = args.annotation;\n        if (annotation != null) {\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n            this.latestAnnotations = this.AnnotationService\n                .getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      this.$window.removeEventListener('message', this.messageEventListener);\n    }));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          var assetItem = args.assetItem;\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n            if (fileName != null) {\n              // get the assets directory path, e.g. /wise/curriculum/3/\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n      if (this.nodeId == args.nodeId && this.componentId != args.componentId) {\n        var message = {};\n        message.messageType = 'siblingComponentStudentDataChanged';\n        message.componentState = args.componentState;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    /* TODO geoffreykwan we're listening to assetSelected twice?\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          var assetItem = args.assetItem;\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n            if (fileName != null) {\n              if (args.target == 'modelFile') {\n                this.authoringComponentContent.url = fileName;\n                this.authoringViewComponentChanged();\n              }\n            }\n          }\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.messageEventListener = angular.bind(this, function(messageEvent) {\n      var messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var componentType = this.componentType;\n        var category = messageEventData.eventCategory;\n        var event = messageEventData.event;\n        var eventData = messageEventData.eventData;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        if (messageEventData.id != null) {\n          //the model wants to update/overwrite an existing component state\n          this.componentStateId = messageEventData.id;\n        } else {\n          // the model wants to create a new component state\n          this.componentStateId = null;\n        }\n\n        if (messageEventData.isSubmit) {\n          this.isSubmit = messageEventData.isSubmit;\n        }\n\n        this.isDirty = true;\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        this.sendLatestWorkToApplication();\n        this.processLatestSubmit();\n\n        // activate iframe-resizer on the embedded app's iframe\n        $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n      } else if (messageEventData.messageType === 'componentDirty') {\n        let isDirty = messageEventData.isDirty;\n        this.isDirty = isDirty;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        let isSubmitDirty = messageEventData.isDirty;\n        this.isSubmitDirty = isSubmitDirty;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        var getStudentWorkParams = messageEventData.getStudentWorkParams;\n        var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n        var message = studentWork;\n        message.messageType = 'studentWork';\n        message.getStudentWorkParams = getStudentWorkParams;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        var latestComponentState = this.getLatestStudentWork();\n        var message = {};\n        message.messageType = 'latestStudentWork';\n        message.latestStudentWork = latestComponentState;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getParameters') {\n        var message = {};\n        message.messageType = 'parameters';\n        let parameters = {};\n        if (this.componentContent.parameters != null) {\n          parameters = this.UtilService.makeCopyOfJSONObject(this.componentContent.parameters);\n        }\n        parameters.nodeId = this.nodeId;\n        parameters.componentId = this.componentId;\n        message.parameters = parameters;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  iframeLoaded(contentLocation) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.addEventListener('message', this.messageEventListener);\n  }\n\n  /**\n   * Check if latest component state is a submission and if not, set isSubmitDirty to true\n   */\n  processLatestSubmit() {\n    let latestState = this.$scope.componentState;\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  setURL(url) {\n    if (url != null) {\n      this.url = this.$sce.trustAsResourceUrl(url);\n    }\n  };\n\n  submit() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    this.setSaveMessage('', null);\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (this.componentStateId != null) {\n      componentState.id = this.componentStateId;\n    }\n\n    if (this.isSubmit) {\n      componentState.isSubmit = this.isSubmit;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n    }\n\n    componentState.studentData = this.studentData;\n    componentState.componentType = 'Embedded';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  sendLatestWorkToApplication() {\n    let componentState = this.$scope.componentState;\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      componentState = this.handleConnectedComponents();\n    }\n    var message = {\n      messageType: 'componentState',\n      componentState: componentState\n    };\n\n    this.sendMessageToApplication(message);\n  };\n\n  sendMessageToApplication(message) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*');\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n    var iframe = $('#' + this.embeddedApplicationIFrameId);\n    if (iframe != null && iframe.length > 0) {\n      var modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n          var img_b64 = canvas.toDataURL('image/png');\n          var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n          this.NotebookService.addNote($event, imageObject);\n        });\n      }\n    }\n  }\n\n  /**\n   * Check whether we need to show the snip model button\n   * @return whether to show the snip model button\n   */\n  showSnipModelButton() {\n    return this.NotebookService.isNotebookEnabled() &&\n        this.isSnipModelButtonVisible;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  componentHasWork(component) {\n    if (component != null) {\n      return this.ProjectService.componentHasWork(component);\n    }\n    return true;\n  }\n\n  isLockAfterSubmit() {\n    if (this.componentContent != null) {\n      if (this.componentContent.lockAfterSubmit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  submitButtonClicked() {\n    this.isSubmit = true;\n    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  getLatestStudentWork() {\n    return this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n    var studentWork = {};\n\n    if (params != null && params.getLatestStudentWorkFromThisComponent) {\n      studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisComponent) {\n      studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromThisNode) {\n      studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisNode) {\n      studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n      // an array of objects that contain a nodeId and component Id\n      var otherComponents = params.otherComponents;\n      var latestStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentState != null) {\n                latestStudentWorkFromOtherComponents.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n      studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n    }\n\n    if (params != null && params.getAllStudentWorkFromOtherComponents) {\n      var otherComponents = params.otherComponents;\n      var allStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentStates != null && tempComponentStates.length > 0) {\n                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n              }\n            }\n          }\n        }\n      }\n      studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n    }\n    return studentWork;\n  }\n\n  summernoteRubricHTMLChanged() {\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    this.authoringComponentContent.rubric = html;\n    this.authoringViewComponentChanged();\n  }\n\n  addConnectedComponent() {\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  deleteConnectedComponent(indexOfComponentToDelete) {\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(indexOfComponentToDelete, 1);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  setShowSubmitButtonValue(show) {\n    if (show == null || show == false) {\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  showSubmitButtonValueChanged() {\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the model file\n   */\n  chooseModelFile() {\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'modelFile';\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null) {\n      mergedComponentState = this.NodeService.createNewComponentState();\n      mergedComponentState.studentData = {};\n    } else {\n      firstTime = false;\n    }\n    var connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      var componentStates = [];\n      for (var connectedComponent of connectedComponents) {\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n          var mergeFields = connectedComponent.mergeFields;\n          if (type == 'showWork') {\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            var connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (connectedComponentState != null) {\n              let fields = connectedComponent.fields;\n              mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n            }\n          }\n        }\n      }\n\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a new component state into a base component state.\n   * @param baseComponentState The component state we will be merging into.\n   * @param newComponentState The component state we will be merging from.\n   * @param mergeFields The fields to merge.\n   * @param firstTime Whether this is the first time the baseComponentState is\n   * being merged into.\n   */\n  mergeComponentState(baseComponentState, newComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (newComponentState.componentType == 'Embedded') {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(newComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n    this.studentData = componentState.studentData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentData(studentData) {\n    this.studentData = studentData;\n  };\n\n  authoringAddConnectedComponent() {\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'))) {\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n    var connectedComponentType = null;\n    if (connectedComponent != null) {\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        connectedComponentType = component.type;\n      }\n    }\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n    if (componentType != null) {\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n      for (let allowedConnectedComponentType of allowedConnectedComponentTypes) {\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'EmbeddedService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"]}