{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$sce","$window","AnnotationService","ConfigService","NodeService","NotebookService","EmbeddedService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","latestAnnotations","componentStateId","embeddedApplicationIFrameId","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","showJSONAuthoring","messageEventListener","angular","bind","messageEvent","messageEventData","data","messageType","category","eventCategory","event","eventData","saveVLEEvent","id","isSubmit","studentDataChanged","studentData","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","message","sendMessageToApplication","latestComponentState","getLatestStudentWork","latestStudentWork","addEventListener","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","componentState","$parent","nodeController","registerComponentController","$on","args","embeddedController","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","annotation","annotationNodeId","annotationComponentId","removeEventListener","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","latestState","trustedURL","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","window","getElementById","contentWindow","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","exitListener","result","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","showPreviousWorkPrompt","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","lockAfterSubmit","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","c","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","importPreviousWork","importPreviousWorkNodeId","importPreviousWorkComponentId","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","index","splice","show","setShowSubmitButtonValue","popup","$broadcast","tags","tag","componentStates","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","setStudentWork","mergedResponse","connectedComponentType","authoringConnectedComponentComponentIdChanged","a","allowedConnectedComponentType","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["import iframeResizer from 'iframe-resizer';\nimport html2canvas from 'html2canvas';\n\nclass EmbeddedController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $sce,\n                $window,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                EmbeddedService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.$window = $window;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.EmbeddedService = EmbeddedService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // field that will hold the component type\n        this.componentType = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the width of the iframe (optional)\n        this.width = null;\n\n        // the height of the iframe (optional)\n        this.height = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // whether we have data to save\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the snip model button is shown or not\n        this.isSnipModelButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // the latest component state id\n        this.componentStateId = null;\n\n        // the id of the embedded application's iframe\n        this.embeddedApplicationIFrameId = '';\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\n            // handle messages received from iframe\n            var messageEventData = messageEvent.data;\n            if (messageEventData.messageType === \"event\") {\n                // save event to WISE\n                var nodeId = this.nodeId;\n                var componentId = this.componentId;\n                var componentType = this.componentType;\n                var category = messageEventData.eventCategory;\n                var event = messageEventData.event;\n                var eventData = messageEventData.eventData;\n\n                // save notebook open/close event\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            } else if (messageEventData.messageType === \"studentWork\") {\n                // save student work to WISE\n\n                if (messageEventData.id != null) {\n                    /*\n                     * the component state id was provided which means the model\n                     * wants to update/overwrite an existing component state\n                     */\n                    this.componentStateId = messageEventData.id;\n                } else {\n                    /*\n                     * the component state id was not provided which means the\n                     * model wants to create a new component state\n                     */\n                    this.componentStateId = null;\n                }\n\n                if (messageEventData.isSubmit) {\n                    this.isSubmit = messageEventData.isSubmit;\n                }\n\n                this.isDirty = true;\n\n                // the student data in the model has changed\n                this.studentDataChanged(messageEventData.studentData);\n\n                // tell the parent node that this component wants to save\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n            } else if (messageEventData.messageType === \"applicationInitialized\") {\n                // application has finished loading, so send latest component state to application\n                this.sendLatestWorkToApplication();\n                this.processLatestSubmit();\n\n                // activate iframe-resizer on the embedded app's iframe\n                $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n            } else if (messageEventData.messageType === \"componentDirty\") {\n                let isDirty = messageEventData.isDirty;\n\n                // set component dirty to true/false and notify node\n                this.isDirty = isDirty;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"componentSubmitDirty\") {\n                let isSubmitDirty = messageEventData.isDirty;\n\n                // set component submit dirty to true/false and notify node\n                this.isSubmitDirty = isSubmitDirty;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"studentDataChanged\") {\n                this.studentDataChanged(messageEventData.studentData);\n            } else if (messageEventData.messageType === \"getStudentWork\") {\n                // the embedded application is requesting the student work\n\n                // the params for getting the student work\n                var getStudentWorkParams = messageEventData.getStudentWorkParams;\n\n                // get the student work\n                var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n\n                var message = studentWork;\n                message.messageType = 'studentWork';\n                message.getStudentWorkParams = getStudentWorkParams;\n\n                // send the student work to the embedded application\n                this.sendMessageToApplication(message);\n            } else if (messageEventData.messageType === \"getLatestStudentWork\") {\n                // the embedded application is requesting the student work\n\n                // get the latest student work\n                var latestComponentState = this.getLatestStudentWork();\n\n                var message = {};\n                message.messageType = 'latestStudentWork';\n                message.latestStudentWork = latestComponentState;\n\n                // send the student work to the embedded application\n                this.sendMessageToApplication(message);\n            }\n        });\n\n        // listen for message events from embedded iframe application\n        this.$window.addEventListener('message', this.messageEventListener);\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            { type: 'Animation' },\n            { type: 'AudioOscillator' },\n            { type: 'ConceptMap' },\n            { type: 'Discussion' },\n            { type: 'Draw' },\n            { type: 'Embedded' },\n            { type: 'Graph' },\n            { type: 'Label' },\n            { type: 'Match' },\n            { type: 'MultipleChoice' },\n            { type: 'OpenResponse' },\n            { type: 'Table' }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // id of the iframe that embeds the application\n            this.embeddedApplicationIFrameId = \"componentApp_\" + this.componentId;\n\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === 'student') {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                this.isSnipModelButtonVisible = true;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                    // get the width\n                    this.width = this.componentContent.width ? this.componentContent.width : '100%';\n\n                    // get the height\n                    this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n                    this.setURL(this.componentContent.url);\n                }.bind(this), true);\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n\n                // get the component state from the scope\n                let componentState = this.$scope.componentState;\n\n                if (componentState != null) {\n                    // create a unique id for the application iframe using this component state\n                    this.embeddedApplicationIFrameId = \"componentApp_\" + componentState.id;\n                    if (this.mode === 'gradingRevision') {\n                        this.embeddedApplicationIFrameId = \"componentApp_gradingRevision_\" + componentState.id;\n                    }\n                }\n\n                if (this.mode === 'grading') {\n                    // get the latest annotations\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isSnipModelButtonVisible = false;\n            }\n\n            if (this.componentContent != null) {\n                // set the url\n                this.setURL(this.componentContent.url);\n            }\n\n            // get the width\n            this.width = this.componentContent.width ? this.componentContent.width : '100%';\n\n            // get the height\n            this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        });\n\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n            var componentState = args.studentWork;\n\n            if (componentState != null) {\n                if (componentState.componentId === this.componentId) {\n                    // a component state for this component was saved\n\n                    // set isDirty to false because the component state was just saved and notify node\n                    this.isDirty = false;\n                    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                    // clear out current componentState\n                    this.$scope.embeddedController.componentState = null;\n\n                    let isAutoSave = componentState.isAutoSave;\n                    let isSubmit = componentState.isSubmit;\n                    let serverSaveTime = componentState.serverSaveTime;\n                    let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                    // set save message\n                    if (isSubmit) {\n                        this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                        this.submit();\n\n                        // set isSubmitDirty to false because the component state was just submitted and notify node\n                        this.isSubmitDirty = false;\n                        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                    } else if (isAutoSave) {\n                        this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                    } else {\n                        this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                    }\n\n                    var message = {};\n                    message.messageType = 'componentStateSaved';\n                    message.componentState = componentState;\n\n                    // send the student work to the embedded application\n                    this.sendMessageToApplication(message);\n                }\n            }\n        });\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.embeddedController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.embeddedController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // unregister messageEventListener\n            this.$window.removeEventListener('message', this.messageEventListener);\n        }));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n        /*\n         * Listen for the siblingComponentStudentDataChanged event which occurs\n         * when the student data has changed for another component in this step\n         */\n        this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n\n            // create the message\n            var message = {};\n            message.messageType = 'siblingComponentStudentDataChanged';\n            message.componentState = args.componentState;\n\n            // send the student work to the embedded application\n            this.sendMessageToApplication(message);\n        });\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n\n                            if (args.target == 'modelFile') {\n                                // the target is the model file name\n                                this.authoringComponentContent.url = fileName;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Check if latest component state is a submission and if not, set isSubmitDirty to true\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged(data) {\n\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // remember the student data\n        this.studentData = data;\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (this.componentStateId != null) {\n            // set the component state id\n            componentState.id = this.componentStateId;\n        }\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = this.studentData;\n\n        // set the component type\n        componentState.componentType = 'Embedded';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    sendLatestWorkToApplication() {\n        // get the latest component state from the scope\n        var message = {\n            messageType: \"componentState\",\n            componentState: this.$scope.componentState\n        };\n\n        // send the latest component state to embedded application\n        this.sendMessageToApplication(message);\n    };\n\n    sendMessageToApplication(message) {\n        // send the message to embedded application via postMessage\n        window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, \"*\")\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Snip the model by converting it to an image\n     * @param $event the click event\n     */\n    snipModel($event) {\n\n        // get the iframe\n        var iframe = $('#' + this.embeddedApplicationIFrameId);\n\n        if (iframe != null && iframe.length > 0) {\n\n            //get the html from the iframe\n            var modelElement = iframe.contents().find('html');\n\n            if (modelElement != null && modelElement.length > 0) {\n                modelElement = modelElement[0];\n\n                // convert the model element to a canvas element\n                html2canvas(modelElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n                });\n            }\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip model button\n     * @return whether to show the snip model button\n     */\n    showSnipModelButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipModelButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Get the latest component state from this component\n     * @return the latest component state\n     */\n    getLatestStudentWork() {\n\n        // get the latest component state from this component\n        var latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        return latestComponentState;\n    }\n\n    /**\n     * Get the student work from the specified components/nodes\n     * @param params The params for getting the student work. The possible\n     * values to request are\n     * getLatestStudentWorkFromThisComponent\n     * getAllStudentWorkFromThisComponent\n     * getLatestStudentWorkFromThisNode\n     * getAllStudentWorkFromThisNode\n     * getLatestStudentWorkFromOtherComponents\n     * getAllStudentWorkFromOtherComponents\n     * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n     * are requested, the otherComponents param must be provided. otherComponents\n     * should be an array of objects. The objects should contain a nodeId and\n     * componentId.\n     * @return an object containing other objects that contain work from the\n     * specified components/nodes\n     */\n    getStudentWork(params) {\n\n        var studentWork = {};\n\n        if (params != null && params.getLatestStudentWorkFromThisComponent) {\n            // get the latest student work from this component\n            studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n        }\n\n        if (params != null && params.getAllStudentWorkFromThisComponent) {\n            // get all the student work from this component\n            studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        }\n\n        if (params != null && params.getLatestStudentWorkFromThisNode) {\n            // get the latest student work from the components in this node\n            studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n        }\n\n        if (params != null && params.getAllStudentWorkFromThisNode) {\n            // get all the student work from the components in this node\n            studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n        }\n\n        if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n            // get the latest student work from other specified components\n\n            // an array of objects that contain a nodeId and component Id\n            var otherComponents = params.otherComponents;\n\n            var latestStudentWorkFromOtherComponents = [];\n\n            if (otherComponents != null) {\n\n                // loop through all the components we need to get work from\n                for (var c = 0; c < otherComponents.length; c++) {\n                    var otherComponent = otherComponents[c];\n\n                    if (otherComponent != null) {\n\n                        // get the node id and component id\n                        var tempNodeId = otherComponent.nodeId;\n                        var tempComponentId = otherComponent.componentId;\n\n                        if (tempNodeId != null && tempComponentId != null) {\n\n                            // get the latest component state for the given component\n                            var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                            if (tempComponentState != null) {\n                                // add the component state to the array\n                                latestStudentWorkFromOtherComponents.push(tempComponentState);\n                            }\n                        }\n                    }\n                }\n            }\n\n            studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n        }\n\n        if (params != null && params.getAllStudentWorkFromOtherComponents) {\n            // get all the student work from other specified components\n            var otherComponents = params.otherComponents;\n\n            var allStudentWorkFromOtherComponents = [];\n\n            if (otherComponents != null) {\n\n                // loop throuh all the components we need to get work from\n                for (var c = 0; c < otherComponents.length; c++) {\n                    var otherComponent = otherComponents[c];\n\n                    if (otherComponent != null) {\n\n                        // get the node id and component id\n                        var tempNodeId = otherComponent.nodeId;\n                        var tempComponentId = otherComponent.componentId;\n\n                        if (tempNodeId != null && tempComponentId != null) {\n\n                            // get the component states for the given component\n                            var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                            if (tempComponentStates != null && tempComponentStates.length > 0) {\n                                // add the component states to the array\n                                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n                            }\n                        }\n                    }\n                }\n            }\n\n            studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n        }\n\n        return studentWork;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the model file\n     */\n    chooseModelFile() {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'modelFile';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        // create a new component state\n        let mergedComponentState = this.NodeService.createNewComponentState();\n        if (componentStates != null) {\n            // loop through all the component state\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n                    if (studentData != null) {\n\n                    }\n                }\n            }\n\n            if (mergedResponse != null && mergedResponse != '') {\n                mergedComponentState.studentData = {};\n            }\n        }\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = 'importWork';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n\n            // remove all the specific component parameters\n            this.authoringConnectedComponentComponentIdChanged(connectedComponent);\n\n            // clear the component id\n            connectedComponent.componentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\nEmbeddedController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$sce',\n    '$window',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'EmbeddedService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default EmbeddedController;\n"]}