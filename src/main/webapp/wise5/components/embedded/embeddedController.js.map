{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$mdDialog","$q","$rootScope","$scope","$sce","$timeout","$window","AnnotationService","ConfigService","EmbeddedService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","componentType","url","width","height","maxWidth","maxHeight","notebookConfig","getNotebookConfig","componentStateId","embeddedApplicationIFrameId","annotationsToSave","componentId","componentContent","type","mode","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","componentState","id","setURL","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","message","messageType","sendMessageToApplication","getComponentState","isSubmit","deferred","defer","getState","action","embeddedController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","bind","$on","angular","event","args","removeEventListener","messageEventListener","nodeId","messageEvent","messageEventData","data","category","eventCategory","eventData","saveVLEEvent","setStudentData","studentData","annotations","setAnnotations","studentDataChanged","$emit","sendLatestWorkToApplication","processLatestStudentWork","$","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","makeCopyOfJSONObject","projectPath","getConfigParam","projectAssetsPath","latestScoreAnnotation","getLatestScoreAnnotation","getWorkgroupId","latestCommentAnnotation","getLatestCommentAnnotation","$broadcast","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSubmittedMessage","submit","setAutoSavedMessage","setSavedMessage","contentLocation","window","document","getElementById","contentWindow","addEventListener","trustAsResourceUrl","isLockAfterSubmit","isDisabled","createNewComponentState","length","clearAnnotationsToSave","createComponentStateAdditionalProcessing","hasConnectedComponent","handleConnectedComponents","postMessage","$event","iframe","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","submitTriggeredBy","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","mergedComponentState","firstTime","connectedComponents","componentStates","mergeFields","connectedComponentState","fields","mergeComponentState","setStudentWork","baseComponentState","newComponentState","mergeField","name","when","annotation","isAnnotationValid","scoreAnnotation","createAutoScoreAnnotation","updateLatestScoreAnnotation","addToAnnotationsToSave","commentAnnotation","createAutoCommentAnnotation","updateLatestCommentAnnotation","value","ComponentController","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\nimport iframeResizer from 'iframe-resizer';\n\nclass EmbeddedController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      EmbeddedService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.EmbeddedService = EmbeddedService;\n    this.componentType = null;\n    this.url = null;\n\n    // the width of the iframe (optional)\n    this.width = null;\n\n    // the height of the iframe (optional)\n    this.height = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    this.componentStateId = null;\n    this.embeddedApplicationIFrameId = '';\n    this.annotationsToSave = [];\n\n    this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n    this.componentType = this.componentContent.type;\n\n    if (this.mode === 'student') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      let componentState = this.$scope.componentState;\n      if (componentState != null) {\n        // create a unique id for the application iframe using this component state\n        this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n        }\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    }\n\n    if (this.componentContent != null) {\n      this.setURL(this.componentContent.url);\n    }\n\n    this.width = this.componentContent.width ? this.componentContent.width : '100%';\n    this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      var message = {};\n      message.messageType = 'handleConnectedComponentStudentDataChanged';\n      message.componentState = componentState;\n      this.sendMessageToApplication(message);\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.embeddedController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.embeddedController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      this.$window.removeEventListener('message', this.messageEventListener);\n    }));\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n      if (this.nodeId == args.nodeId && this.componentId != args.componentId) {\n        var message = {};\n        message.messageType = 'siblingComponentStudentDataChanged';\n        message.componentState = args.componentState;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.messageEventListener = angular.bind(this, function(messageEvent) {\n      var messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var componentType = this.componentType;\n        var category = messageEventData.eventCategory;\n        var event = messageEventData.event;\n        var eventData = messageEventData.eventData;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        if (messageEventData.id != null) {\n          //the model wants to update/overwrite an existing component state\n          this.componentStateId = messageEventData.id;\n        } else {\n          // the model wants to create a new component state\n          this.componentStateId = null;\n        }\n\n        if (messageEventData.isSubmit) {\n          this.isSubmit = messageEventData.isSubmit;\n        }\n\n        this.isDirty = true;\n        this.setStudentData(messageEventData.studentData);\n        if (messageEventData.annotations != null) {\n          this.setAnnotations(messageEventData.annotations);\n        }\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        this.sendLatestWorkToApplication();\n        this.processLatestStudentWork();\n\n        // activate iframe-resizer on the embedded app's iframe\n        $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n      } else if (messageEventData.messageType === 'componentDirty') {\n        let isDirty = messageEventData.isDirty;\n        this.isDirty = isDirty;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        let isSubmitDirty = messageEventData.isDirty;\n        this.isSubmitDirty = isSubmitDirty;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.setStudentData(messageEventData.studentData);\n        if (messageEventData.annotations != null) {\n          this.setAnnotations(messageEventData.annotations);\n        }\n        this.studentDataChanged();\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        var getStudentWorkParams = messageEventData.getStudentWorkParams;\n        var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n        var message = studentWork;\n        message.messageType = 'studentWork';\n        message.getStudentWorkParams = getStudentWorkParams;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        var latestComponentState = this.getLatestStudentWork();\n        var message = {};\n        message.messageType = 'latestStudentWork';\n        message.latestStudentWork = latestComponentState;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getParameters') {\n        var message = {};\n        message.messageType = 'parameters';\n        let parameters = {};\n        if (this.componentContent.parameters != null) {\n          parameters = this.UtilService.makeCopyOfJSONObject(this.componentContent.parameters);\n        }\n        parameters.nodeId = this.nodeId;\n        parameters.componentId = this.componentId;\n        message.parameters = parameters;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getProjectPath') {\n        const message = {\n          messageType: 'projectPath',\n          projectPath: this.ConfigService.getConfigParam('projectBaseURL'),\n          projectAssetsPath: this.ConfigService.getConfigParam('projectBaseURL') + 'assets'\n        };\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestAnnotations') {\n        const latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(\n            this.nodeId, this.componentId, this.ConfigService.getWorkgroupId(), 'any');\n        const latestCommentAnnotation = this.AnnotationService.getLatestCommentAnnotation(\n            this.nodeId, this.componentId, this.ConfigService.getWorkgroupId(), 'any');\n        const message = {\n          messageType: 'latestAnnotations',\n          latestScoreAnnotation: latestScoreAnnotation,\n          latestCommentAnnotation: latestCommentAnnotation\n        };\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      var componentState = args.studentWork;\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          // set isDirty to false because the component state was just saved and notify node\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n          this.$scope.embeddedController.componentState = null;\n\n          let isAutoSave = componentState.isAutoSave;\n          let isSubmit = componentState.isSubmit;\n          let serverSaveTime = componentState.serverSaveTime;\n          let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n          if (isSubmit) {\n            this.setSubmittedMessage(clientSaveTime);\n            this.submit();\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setAutoSavedMessage(clientSaveTime);\n          } else {\n            this.setSavedMessage(clientSaveTime);\n          }\n\n          var message = {};\n          message.messageType = 'componentStateSaved';\n          message.componentState = componentState;\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n  }\n\n  iframeLoaded(contentLocation) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.addEventListener('message', this.messageEventListener);\n  }\n\n  setURL(url) {\n    if (url != null) {\n      this.url = this.$sce.trustAsResourceUrl(url);\n    }\n  };\n\n  submit() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (this.componentStateId != null) {\n      componentState.id = this.componentStateId;\n    }\n\n    if (this.isSubmit) {\n      componentState.isSubmit = this.isSubmit;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n    }\n\n    componentState.studentData = this.studentData;\n    componentState.componentType = 'Embedded';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    if (this.annotationsToSave.length !== 0) {\n      componentState.annotations = this.annotationsToSave;\n    }\n\n    if (action === 'save') {\n      this.clearAnnotationsToSave();\n    }\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  clearAnnotationsToSave() {\n    this.annotationsToSave = [];\n  }\n\n  sendLatestWorkToApplication() {\n    let componentState = this.$scope.componentState;\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      componentState = this.handleConnectedComponents();\n    }\n    var message = {\n      messageType: 'componentState',\n      componentState: componentState\n    };\n\n    this.sendMessageToApplication(message);\n  };\n\n  sendMessageToApplication(message) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*');\n  };\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n    var iframe = $('#' + this.embeddedApplicationIFrameId);\n    if (iframe != null && iframe.length > 0) {\n      var modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n          var img_b64 = canvas.toDataURL('image/png');\n          var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n          this.NotebookService.addNote($event, imageObject);\n        });\n      }\n    }\n  }\n\n  submit(submitTriggeredBy) {\n    this.isSubmit = true;\n    this.$scope.$emit('componentSubmitTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  getLatestStudentWork() {\n    return this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n    var studentWork = {};\n\n    if (params != null && params.getLatestStudentWorkFromThisComponent) {\n      studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisComponent) {\n      studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromThisNode) {\n      studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisNode) {\n      studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n      // an array of objects that contain a nodeId and component Id\n      var otherComponents = params.otherComponents;\n      var latestStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentState != null) {\n                latestStudentWorkFromOtherComponents.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n      studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n    }\n\n    if (params != null && params.getAllStudentWorkFromOtherComponents) {\n      var otherComponents = params.otherComponents;\n      var allStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentStates != null && tempComponentStates.length > 0) {\n                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n              }\n            }\n          }\n        }\n      }\n      studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n    }\n    return studentWork;\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null) {\n      mergedComponentState = this.NodeService.createNewComponentState();\n      mergedComponentState.studentData = {};\n    } else {\n      firstTime = false;\n    }\n    var connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      var componentStates = [];\n      for (var connectedComponent of connectedComponents) {\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n          var mergeFields = connectedComponent.mergeFields;\n          if (type == 'showWork') {\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            var connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (connectedComponentState != null) {\n              let fields = connectedComponent.fields;\n              mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n            }\n          }\n        }\n      }\n\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a new component state into a base component state.\n   * @param baseComponentState The component state we will be merging into.\n   * @param newComponentState The component state we will be merging from.\n   * @param mergeFields The fields to merge.\n   * @param firstTime Whether this is the first time the baseComponentState is\n   * being merged into.\n   */\n  mergeComponentState(baseComponentState, newComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (newComponentState.componentType == 'Embedded') {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(newComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n    this.studentData = componentState.studentData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentData(studentData) {\n    this.studentData = studentData;\n  };\n\n  setAnnotations(annotations) {\n    for (let annotation of annotations) {\n      if (this.isAnnotationValid(annotation)) {\n        if (annotation.type === 'autoScore') {\n          const scoreAnnotation = this.createAutoScoreAnnotation(annotation.data);\n          this.updateLatestScoreAnnotation(scoreAnnotation);\n          this.addToAnnotationsToSave(scoreAnnotation);\n        } else if (annotation.type === 'autoComment') {\n          const commentAnnotation = this.createAutoCommentAnnotation(annotation.data);\n          this.updateLatestCommentAnnotation(commentAnnotation);\n          this.addToAnnotationsToSave(commentAnnotation);\n        }\n      }\n    }\n  }\n\n  isAnnotationValid(annotation) {\n    return annotation.type != null && annotation.data != null && annotation.data.value != null;\n  }\n\n  addToAnnotationsToSave(annotation) {\n    this.annotationsToSave.push(annotation);\n  }\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'EmbeddedService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"]}