{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$sce","$window","AnnotationService","ConfigService","NodeService","NotebookService","EmbeddedService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","latestAnnotations","componentStateId","embeddedApplicationIFrameId","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","showJSONAuthoring","messageEventListener","angular","bind","messageEvent","messageEventData","data","messageType","category","eventCategory","event","eventData","saveVLEEvent","id","isSubmit","studentDataChanged","studentData","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","message","sendMessageToApplication","latestComponentState","getLatestStudentWork","latestStudentWork","addEventListener","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","type","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","componentState","$parent","nodeController","registerComponentController","$on","args","embeddedController","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","annotation","annotationNodeId","annotationComponentId","removeEventListener","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","latestState","trustedURL","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","window","getElementById","contentWindow","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","exitListener","result","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","showPreviousWorkPrompt","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","lockAfterSubmit","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","c","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","importPreviousWork","importPreviousWorkNodeId","importPreviousWorkComponentId","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","index","splice","show","setShowSubmitButtonValue","popup","$broadcast","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["import iframeResizer from 'iframe-resizer';\r\nimport html2canvas from 'html2canvas';\r\n\r\nclass EmbeddedController {\r\n    constructor($filter,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                $sce,\r\n                $window,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NodeService,\r\n                NotebookService,\r\n                EmbeddedService,\r\n                ProjectService,\r\n                StudentDataService,\r\n                UtilService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$sce = $sce;\r\n        this.$window = $window;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NodeService = NodeService;\r\n        this.NotebookService = NotebookService;\r\n        this.EmbeddedService = EmbeddedService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // field that will hold the component type\r\n        this.componentType = null;\r\n\r\n        // the url to the web page to display\r\n        this.url = null;\r\n\r\n        // the width of the iframe (optional)\r\n        this.width = null;\r\n\r\n        // the height of the iframe (optional)\r\n        this.height = null;\r\n\r\n        // the max width of the iframe\r\n        this.maxWidth = null;\r\n\r\n        // the max height of the iframe\r\n        this.maxHeight = null;\r\n\r\n        // whether we have data to save\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // whether the snip model button is shown or not\r\n        this.isSnipModelButtonVisible = true;\r\n\r\n        // the label for the notebook in thos project\r\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // the latest component state id\r\n        this.componentStateId = null;\r\n\r\n        // the id of the embedded application's iframe\r\n        this.embeddedApplicationIFrameId = '';\r\n\r\n        // whether the save button is shown or not\r\n        this.isSaveButtonVisible = false;\r\n\r\n        // whether the submit button is shown or not\r\n        this.isSubmitButtonVisible = false;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\r\n            // handle messages received from iframe\r\n            var messageEventData = messageEvent.data;\r\n            if (messageEventData.messageType === \"event\") {\r\n                // save event to WISE\r\n                var nodeId = this.nodeId;\r\n                var componentId = this.componentId;\r\n                var componentType = this.componentType;\r\n                var category = messageEventData.eventCategory;\r\n                var event = messageEventData.event;\r\n                var eventData = messageEventData.eventData;\r\n\r\n                // save notebook open/close event\r\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\r\n            } else if (messageEventData.messageType === \"studentWork\") {\r\n                // save student work to WISE\r\n\r\n                if (messageEventData.id != null) {\r\n                    /*\r\n                     * the component state id was provided which means the model\r\n                     * wants to update/overwrite an existing component state\r\n                     */\r\n                    this.componentStateId = messageEventData.id;\r\n                } else {\r\n                    /*\r\n                     * the component state id was not provided which means the\r\n                     * model wants to create a new component state\r\n                     */\r\n                    this.componentStateId = null;\r\n                }\r\n\r\n                if (messageEventData.isSubmit) {\r\n                    this.isSubmit = messageEventData.isSubmit;\r\n                }\r\n\r\n                this.isDirty = true;\r\n\r\n                // the student data in the model has changed\r\n                this.studentDataChanged(messageEventData.studentData);\r\n\r\n                // tell the parent node that this component wants to save\r\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n            } else if (messageEventData.messageType === \"applicationInitialized\") {\r\n                // application has finished loading, so send latest component state to application\r\n                this.sendLatestWorkToApplication();\r\n                this.processLatestSubmit();\r\n\r\n                // activate iframe-resizer on the embedded app's iframe\r\n                $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\r\n            } else if (messageEventData.messageType === \"componentDirty\") {\r\n                let isDirty = messageEventData.isDirty;\r\n\r\n                // set component dirty to true/false and notify node\r\n                this.isDirty = isDirty;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\r\n            } else if (messageEventData.messageType === \"componentSubmitDirty\") {\r\n                let isSubmitDirty = messageEventData.isDirty;\r\n\r\n                // set component submit dirty to true/false and notify node\r\n                this.isSubmitDirty = isSubmitDirty;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\r\n            } else if (messageEventData.messageType === \"studentDataChanged\") {\r\n                this.studentDataChanged(messageEventData.studentData);\r\n            } else if (messageEventData.messageType === \"getStudentWork\") {\r\n                // the embedded application is requesting the student work\r\n\r\n                // the params for getting the student work\r\n                var getStudentWorkParams = messageEventData.getStudentWorkParams;\r\n\r\n                // get the student work\r\n                var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\r\n\r\n                var message = studentWork;\r\n                message.messageType = 'studentWork';\r\n                message.getStudentWorkParams = getStudentWorkParams;\r\n\r\n                // send the student work to the embedded application\r\n                this.sendMessageToApplication(message);\r\n            } else if (messageEventData.messageType === \"getLatestStudentWork\") {\r\n                // the embedded application is requesting the student work\r\n\r\n                // get the latest student work\r\n                var latestComponentState = this.getLatestStudentWork();\r\n\r\n                var message = {};\r\n                message.messageType = 'latestStudentWork';\r\n                message.latestStudentWork = latestComponentState;\r\n\r\n                // send the student work to the embedded application\r\n                this.sendMessageToApplication(message);\r\n            }\r\n        });\r\n\r\n        // listen for message events from embedded iframe application\r\n        this.$window.addEventListener('message', this.messageEventListener);\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            // id of the iframe that embeds the application\r\n            this.embeddedApplicationIFrameId = \"componentApp_\" + this.componentId;\r\n\r\n            this.componentType = this.componentContent.type;\r\n\r\n            if (this.mode === 'student') {\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                this.isSnipModelButtonVisible = true;\r\n            } else if (this.mode === 'authoring') {\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                    // get the width\r\n                    this.width = this.componentContent.width ? this.componentContent.width : '100%';\r\n\r\n                    // get the height\r\n                    this.height = this.componentContent.height ? this.componentContent.height : '100%';\r\n\r\n                    this.setURL(this.componentContent.url);\r\n                }.bind(this), true);\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isSnipModelButtonVisible = false;\r\n\r\n                // get the component state from the scope\r\n                let componentState = this.$scope.componentState;\r\n\r\n                if (componentState != null) {\r\n                    // create a unique id for the application iframe using this component state\r\n                    this.embeddedApplicationIFrameId = \"componentApp_\" + componentState.id;\r\n                    if (this.mode === 'gradingRevision') {\r\n                        this.embeddedApplicationIFrameId = \"componentApp_gradingRevision_\" + componentState.id;\r\n                    }\r\n                }\r\n\r\n                if (this.mode === 'grading') {\r\n                    // get the latest annotations\r\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                }\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isSnipModelButtonVisible = false;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isSnipModelButtonVisible = false;\r\n            }\r\n\r\n            if (this.componentContent != null) {\r\n                // set the url\r\n                this.setURL(this.componentContent.url);\r\n            }\r\n\r\n            // get the width\r\n            this.width = this.componentContent.width ? this.componentContent.width : '100%';\r\n\r\n            // get the height\r\n            this.height = this.componentContent.height ? this.componentContent.height : '100%';\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', (event, args) => {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n                this.isSubmit = true;\r\n            }\r\n        });\r\n\r\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\r\n\r\n            var componentState = args.studentWork;\r\n\r\n            if (componentState != null) {\r\n                if (componentState.componentId === this.componentId) {\r\n                    // a component state for this component was saved\r\n\r\n                    // set isDirty to false because the component state was just saved and notify node\r\n                    this.isDirty = false;\r\n                    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                    // clear out current componentState\r\n                    this.$scope.embeddedController.componentState = null;\r\n\r\n                    let isAutoSave = componentState.isAutoSave;\r\n                    let isSubmit = componentState.isSubmit;\r\n                    let serverSaveTime = componentState.serverSaveTime;\r\n                    let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                    // set save message\r\n                    if (isSubmit) {\r\n                        this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\r\n\r\n                        this.submit();\r\n\r\n                        // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                        this.isSubmitDirty = false;\r\n                        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                    } else if (isAutoSave) {\r\n                        this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                    } else {\r\n                        this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                    }\r\n\r\n                    var message = {};\r\n                    message.messageType = 'componentStateSaved';\r\n                    message.componentState = componentState;\r\n\r\n                    // send the student work to the embedded application\r\n                    this.sendMessageToApplication(message);\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a promise of a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.embeddedController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.embeddedController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.embeddedController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\r\n            // unregister messageEventListener\r\n            this.$window.removeEventListener('message', this.messageEventListener);\r\n        }));\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n\r\n        /*\r\n         * Listen for the siblingComponentStudentDataChanged event which occurs\r\n         * when the student data has changed for another component in this step\r\n         */\r\n        this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\r\n\r\n            // create the message\r\n            var message = {};\r\n            message.messageType = 'siblingComponentStudentDataChanged';\r\n            message.componentState = args.componentState;\r\n\r\n            // send the student work to the embedded application\r\n            this.sendMessageToApplication(message);\r\n        });\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n\r\n                            if (args.target == 'modelFile') {\r\n                                // the target is the model file name\r\n                                this.authoringComponentContent.url = fileName;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if latest component state is a submission and if not, set isSubmitDirty to true\r\n     */\r\n    processLatestSubmit() {\r\n        let latestState = this.$scope.componentState;\r\n\r\n        if (latestState) {\r\n            let serverSaveTime = latestState.serverSaveTime;\r\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n            if (latestState.isSubmit) {\r\n                // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n            } else {\r\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the url\r\n     * @param url the url\r\n     */\r\n    setURL(url) {\r\n        if (url != null) {\r\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\r\n            this.url = trustedURL;\r\n        }\r\n    };\r\n\r\n    submit() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged(data) {\r\n\r\n        /*\r\n         * set the dirty flags so we will know we need to save or submit the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // remember the student data\r\n        this.studentData = data;\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @return the componentState after it has been populated\r\n     */\r\n    createComponentState(action) {\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        if (this.componentStateId != null) {\r\n            // set the component state id\r\n            componentState.id = this.componentStateId;\r\n        }\r\n\r\n        if (this.isSubmit) {\r\n            // the student submitted this work\r\n            componentState.isSubmit = this.isSubmit;\r\n\r\n            /*\r\n             * reset the isSubmit value so that the next component state\r\n             * doesn't maintain the same value\r\n             */\r\n            this.isSubmit = false;\r\n        }\r\n\r\n        // set the student data into the component state\r\n        componentState.studentData = this.studentData;\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    sendLatestWorkToApplication() {\r\n        // get the latest component state from the scope\r\n        var message = {\r\n            messageType: \"componentState\",\r\n            componentState: this.$scope.componentState\r\n        };\r\n\r\n        // send the latest component state to embedded application\r\n        this.sendMessageToApplication(message);\r\n    };\r\n\r\n    sendMessageToApplication(message) {\r\n        // send the message to embedded application via postMessage\r\n        window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, \"*\")\r\n    };\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\r\n\r\n            // set the new component into the controller\r\n            this.componentContent = editedComponentContent;\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * Snip the model by converting it to an image\r\n     * @param $event the click event\r\n     */\r\n    snipModel($event) {\r\n\r\n        // get the iframe\r\n        var iframe = $('#' + this.embeddedApplicationIFrameId);\r\n\r\n        if (iframe != null && iframe.length > 0) {\r\n\r\n            //get the html from the iframe\r\n            var modelElement = iframe.contents().find('html');\r\n\r\n            if (modelElement != null && modelElement.length > 0) {\r\n                modelElement = modelElement[0];\r\n\r\n                // convert the model element to a canvas element\r\n                html2canvas(modelElement).then((canvas) => {\r\n\r\n                    // get the canvas as a base64 string\r\n                    var img_b64 = canvas.toDataURL('image/png');\r\n\r\n                    // get the image object\r\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\r\n\r\n                    // create a notebook item with the image populated into it\r\n                    this.NotebookService.addNewItem($event, imageObject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether we need to show the snip model button\r\n     * @return whether to show the snip model button\r\n     */\r\n    showSnipModelButton() {\r\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipModelButtonVisible) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\r\n\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        this.isSubmit = true;\r\n\r\n        // tell the parent node that this component wants to submit\r\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Get the latest component state from this component\r\n     * @return the latest component state\r\n     */\r\n    getLatestStudentWork() {\r\n\r\n        // get the latest component state from this component\r\n        var latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n        return latestComponentState;\r\n    }\r\n\r\n    /**\r\n     * Get the student work from the specified components/nodes\r\n     * @param params The params for getting the student work. The possible\r\n     * values to request are\r\n     * getLatestStudentWorkFromThisComponent\r\n     * getAllStudentWorkFromThisComponent\r\n     * getLatestStudentWorkFromThisNode\r\n     * getAllStudentWorkFromThisNode\r\n     * getLatestStudentWorkFromOtherComponents\r\n     * getAllStudentWorkFromOtherComponents\r\n     * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\r\n     * are requested, the otherComponents param must be provided. otherComponents\r\n     * should be an array of objects. The objects should contain a nodeId and\r\n     * componentId.\r\n     * @return an object containing other objects that contain work from the\r\n     * specified components/nodes\r\n     */\r\n    getStudentWork(params) {\r\n\r\n        var studentWork = {};\r\n\r\n        if (params != null && params.getLatestStudentWorkFromThisComponent) {\r\n            // get the latest student work from this component\r\n            studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n        }\r\n\r\n        if (params != null && params.getAllStudentWorkFromThisComponent) {\r\n            // get all the student work from this component\r\n            studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n        }\r\n\r\n        if (params != null && params.getLatestStudentWorkFromThisNode) {\r\n            // get the latest student work from the components in this node\r\n            studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\r\n        }\r\n\r\n        if (params != null && params.getAllStudentWorkFromThisNode) {\r\n            // get all the student work from the components in this node\r\n            studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\r\n        }\r\n\r\n        if (params != null && params.getLatestStudentWorkFromOtherComponents) {\r\n            // get the latest student work from other specified components\r\n\r\n            // an array of objects that contain a nodeId and component Id\r\n            var otherComponents = params.otherComponents;\r\n\r\n            var latestStudentWorkFromOtherComponents = [];\r\n\r\n            if (otherComponents != null) {\r\n\r\n                // loop through all the components we need to get work from\r\n                for (var c = 0; c < otherComponents.length; c++) {\r\n                    var otherComponent = otherComponents[c];\r\n\r\n                    if (otherComponent != null) {\r\n\r\n                        // get the node id and component id\r\n                        var tempNodeId = otherComponent.nodeId;\r\n                        var tempComponentId = otherComponent.componentId;\r\n\r\n                        if (tempNodeId != null && tempComponentId != null) {\r\n\r\n                            // get the latest component state for the given component\r\n                            var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\r\n\r\n                            if (tempComponentState != null) {\r\n                                // add the component state to the array\r\n                                latestStudentWorkFromOtherComponents.push(tempComponentState);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\r\n        }\r\n\r\n        if (params != null && params.getAllStudentWorkFromOtherComponents) {\r\n            // get all the student work from other specified components\r\n            var otherComponents = params.otherComponents;\r\n\r\n            var allStudentWorkFromOtherComponents = [];\r\n\r\n            if (otherComponents != null) {\r\n\r\n                // loop throuh all the components we need to get work from\r\n                for (var c = 0; c < otherComponents.length; c++) {\r\n                    var otherComponent = otherComponents[c];\r\n\r\n                    if (otherComponent != null) {\r\n\r\n                        // get the node id and component id\r\n                        var tempNodeId = otherComponent.nodeId;\r\n                        var tempComponentId = otherComponent.componentId;\r\n\r\n                        if (tempNodeId != null && tempComponentId != null) {\r\n\r\n                            // get the component states for the given component\r\n                            var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\r\n\r\n                            if (tempComponentStates != null && tempComponentStates.length > 0) {\r\n                                // add the component states to the array\r\n                                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\r\n        }\r\n\r\n        return studentWork;\r\n    }\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Show the asset popup to allow the author to choose the model file\r\n     */\r\n    chooseModelFile() {\r\n\r\n        // generate the parameters\r\n        var params = {};\r\n        params.popup = true;\r\n        params.nodeId = this.nodeId;\r\n        params.componentId = this.componentId;\r\n        params.target = 'modelFile';\r\n\r\n        // display the asset chooser\r\n        this.$rootScope.$broadcast('openAssetChooser', params);\r\n    }\r\n}\r\n\r\nEmbeddedController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$sce',\r\n    '$window',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NodeService',\r\n    'NotebookService',\r\n    'EmbeddedService',\r\n    'ProjectService',\r\n    'StudentDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default EmbeddedController;\r\n"]}