{"version":3,"sources":["embeddedController.es6"],"names":[],"mappings":"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","file":"embeddedController.js","sourcesContent":["class EmbeddedController {\n    constructor($scope,\n                $sce,\n                $window,\n                NodeService,\n                EmbeddedService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.$window = $window;\n        this.NodeService = NodeService;\n        this.EmbeddedService = EmbeddedService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // field that will hold the component type\n        this.componentType = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // whether we have data to save\n        this.isDirty = false;\n\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\n            // handle messages received from iframe\n            var messageEventData = messageEvent.data;\n            if (messageEventData.messageType === \"event\") {\n                // save event to WISE\n                var nodeId = this.nodeId;\n                var componentId = this.componentId;\n                var componentType = this.componentType;\n                var category = messageEventData.eventCategory;\n                var event = messageEventData.event;\n                var eventData = messageEventData.eventData;\n\n                // save notebook open/close event\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            } else if (messageEventData.messageType === \"studentWork\") {\n                // save student work to WISE\n                // create a new component state\n                this.componentState = this.NodeService.createNewComponentState();\n\n                // set the student data into the component state\n                this.componentState.studentData = messageEventData.studentData;\n\n                this.componentState.isSubmit = false;\n                if (messageEventData.isSubmit) {\n                    this.componentState.isSubmit = messageEventData.isSubmit;\n                }\n\n                this.componentState.isAutoSave = false;\n                if (messageEventData.isAutoSave) {\n                    this.componentState.isAutoSave = messageEventData.isAutoSave;\n                }\n\n                this.isDirty = true;\n\n                // tell the parent node that this component wants to save\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n\n            }\n        });\n\n        // listen for message events from embedded iframe application\n        this.$window.addEventListener('message', this.messageEventListener);\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.setURL(this.componentContent.url);\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n            } else {\n                // this is a regular component\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n            }\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var componentState = null;\n\n            if (this.$scope.embeddedController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.embeddedController.componentState;\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.embeddedController.isDirty = false;\n                this.$scope.embeddedController.componentState = null;\n            }\n\n            return componentState;\n        }.bind(this);\n\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // unregister messageEventListener\n            this.$window.removeEventListener('message', this.messageEventListener);\n        }));\n    }\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n}\n\nEmbeddedController.$inject = [\n    '$scope',\n    '$sce',\n    '$window',\n    'NodeService',\n    'EmbeddedService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default EmbeddedController;\n\n"]}