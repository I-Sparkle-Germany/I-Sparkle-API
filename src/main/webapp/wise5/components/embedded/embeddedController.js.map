{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$sce","$window","AnnotationService","ConfigService","NodeService","NotebookService","EmbeddedService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","notebookConfig","getNotebookConfig","saveMessage","text","time","latestAnnotations","componentStateId","embeddedApplicationIFrameId","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","showJSONAuthoring","messageEventListener","angular","bind","messageEvent","messageEventData","data","messageType","category","eventCategory","event","eventData","saveVLEEvent","id","isSubmit","studentDataChanged","studentData","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","message","sendMessageToApplication","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","addEventListener","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","componentState","$parent","nodeController","registerComponentController","$on","args","embeddedController","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","annotation","annotationNodeId","annotationComponentId","removeEventListener","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","authoringViewComponentChanged","latestState","trustedURL","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","window","getElementById","contentWindow","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","exitListener","result","isApplicationNode","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","showPreviousWorkPrompt","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","lockAfterSubmit","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","c","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","importPreviousWork","importPreviousWorkNodeId","importPreviousWorkComponentId","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","index","splice","show","setShowSubmitButtonValue","isPopup","$broadcast","tags","tag","componentStates","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","setStudentWork","mergedResponse","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["import iframeResizer from 'iframe-resizer';\nimport html2canvas from 'html2canvas';\n\nclass EmbeddedController {\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $window,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      EmbeddedService,\n      ProjectService,\n      StudentDataService,\n      UtilService) {\n\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$sce = $sce;\n    this.$window = $window;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.EmbeddedService = EmbeddedService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // field that will hold the component type\n    this.componentType = null;\n\n    // the url to the web page to display\n    this.url = null;\n\n    // the width of the iframe (optional)\n    this.width = null;\n\n    // the height of the iframe (optional)\n    this.height = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    // whether we have data to save\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether the snip model button is shown or not\n    this.isSnipModelButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // the latest component state id\n    this.componentStateId = null;\n\n    // the id of the embedded application's iframe\n    this.embeddedApplicationIFrameId = '';\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    this.messageEventListener = angular.bind(this, function(messageEvent) {\n      // handle messages received from iframe\n      var messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        // save event to WISE\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var componentType = this.componentType;\n        var category = messageEventData.eventCategory;\n        var event = messageEventData.event;\n        var eventData = messageEventData.eventData;\n\n        // save notebook open/close event\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        // save student work to WISE\n\n        if (messageEventData.id != null) {\n          /*\n           * the component state id was provided which means the model\n           * wants to update/overwrite an existing component state\n           */\n          this.componentStateId = messageEventData.id;\n        } else {\n          /*\n           * the component state id was not provided which means the\n           * model wants to create a new component state\n           */\n          this.componentStateId = null;\n        }\n\n        if (messageEventData.isSubmit) {\n          this.isSubmit = messageEventData.isSubmit;\n        }\n\n        this.isDirty = true;\n\n        // the student data in the model has changed\n        this.studentDataChanged(messageEventData.studentData);\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        // application has finished loading, so send latest component state to application\n        this.sendLatestWorkToApplication();\n        this.processLatestSubmit();\n\n        // activate iframe-resizer on the embedded app's iframe\n        $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n      } else if (messageEventData.messageType === 'componentDirty') {\n        let isDirty = messageEventData.isDirty;\n\n        // set component dirty to true/false and notify node\n        this.isDirty = isDirty;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        let isSubmitDirty = messageEventData.isDirty;\n\n        // set component submit dirty to true/false and notify node\n        this.isSubmitDirty = isSubmitDirty;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.studentDataChanged(messageEventData.studentData);\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        // the embedded application is requesting the student work\n\n        // the params for getting the student work\n        var getStudentWorkParams = messageEventData.getStudentWorkParams;\n\n        // get the student work\n        var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n\n        var message = studentWork;\n        message.messageType = 'studentWork';\n        message.getStudentWorkParams = getStudentWorkParams;\n\n        // send the student work to the embedded application\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        // the embedded application is requesting the student work\n\n        // get the latest student work\n        var latestComponentState = this.getLatestStudentWork();\n\n        var message = {};\n        message.messageType = 'latestStudentWork';\n        message.latestStudentWork = latestComponentState;\n\n        // send the student work to the embedded application\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getParameters') {\n        // the embedded application is requesting the parameters\n        var message = {};\n        message.messageType = 'parameters';\n        message.parameters = this.componentContent.parameters;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    // listen for message events from embedded iframe application\n    this.$window.addEventListener('message', this.messageEventListener);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'Animation' },\n      { type: 'AudioOscillator' },\n      { type: 'ConceptMap' },\n      { type: 'Discussion' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Match' },\n      { type: 'MultipleChoice' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    // get the current node and node id\n    var currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      this.nodeId = currentNode.id;\n    } else {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      // id of the iframe that embeds the application\n      this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n\n      this.componentType = this.componentContent.type;\n\n      if (this.mode === 'student') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        this.isSnipModelButtonVisible = true;\n      } else if (this.mode === 'authoring') {\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n          // get the width\n          this.width = this.componentContent.width ? this.componentContent.width : '100%';\n\n          // get the height\n          this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n          this.setURL(this.componentContent.url);\n        }.bind(this), true);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n\n        // get the component state from the scope\n        let componentState = this.$scope.componentState;\n\n        if (componentState != null) {\n          // create a unique id for the application iframe using this component state\n          this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n          if (this.mode === 'gradingRevision') {\n            this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n          }\n        }\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isSnipModelButtonVisible = false;\n      }\n\n      if (this.componentContent != null) {\n        // set the url\n        this.setURL(this.componentContent.url);\n      }\n\n      // get the width\n      this.width = this.componentContent.width ? this.componentContent.width : '100%';\n\n      // get the height\n      this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n        this.isSubmit = true;\n      }\n    });\n\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n\n      var componentState = args.studentWork;\n\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          // a component state for this component was saved\n\n          // set isDirty to false because the component state was just saved and notify node\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n          // clear out current componentState\n          this.$scope.embeddedController.componentState = null;\n\n          let isAutoSave = componentState.isAutoSave;\n          let isSubmit = componentState.isSubmit;\n          let serverSaveTime = componentState.serverSaveTime;\n          let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n          // set save message\n          if (isSubmit) {\n            this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n            this.submit();\n\n            // set isSubmitDirty to false because the component state was just submitted and notify node\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n          } else {\n            this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n          }\n\n          var message = {};\n          message.messageType = 'componentStateSaved';\n          message.componentState = componentState;\n\n          // send the student work to the embedded application\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.embeddedController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.embeddedController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      // unregister messageEventListener\n      this.$window.removeEventListener('message', this.messageEventListener);\n    }));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n\n      // create the message\n      var message = {};\n      message.messageType = 'siblingComponentStudentDataChanged';\n      message.componentState = args.componentState;\n\n      // send the student work to the embedded application\n      this.sendMessageToApplication(message);\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n\n              if (args.target == 'modelFile') {\n                // the target is the model file name\n                this.authoringComponentContent.url = fileName;\n\n                // save the project\n                this.authoringViewComponentChanged();\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * Check if latest component state is a submission and if not, set isSubmitDirty to true\n   */\n  processLatestSubmit() {\n    let latestState = this.$scope.componentState;\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Set the url\n   * @param url the url\n   */\n  setURL(url) {\n    if (url != null) {\n      var trustedURL = this.$sce.trustAsResourceUrl(url);\n      this.url = trustedURL;\n    }\n  };\n\n  submit() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged(data) {\n\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // remember the student data\n    this.studentData = data;\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (this.componentStateId != null) {\n      // set the component state id\n      componentState.id = this.componentStateId;\n    }\n\n    if (this.isSubmit) {\n      // the student submitted this work\n      componentState.isSubmit = this.isSubmit;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n    }\n\n    // set the student data into the component state\n    componentState.studentData = this.studentData;\n\n    // set the component type\n    componentState.componentType = 'Embedded';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  sendLatestWorkToApplication() {\n    // get the latest component state from the scope\n    var message = {\n      messageType: 'componentState',\n      componentState: this.$scope.componentState\n    };\n\n    // send the latest component state to embedded application\n    this.sendMessageToApplication(message);\n  };\n\n  sendMessageToApplication(message) {\n    // send the message to embedded application via postMessage\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*')\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n\n    // get the iframe\n    var iframe = $('#' + this.embeddedApplicationIFrameId);\n\n    if (iframe != null && iframe.length > 0) {\n\n      //get the html from the iframe\n      var modelElement = iframe.contents().find('html');\n\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n\n          // get the canvas as a base64 string\n          var img_b64 = canvas.toDataURL('image/png');\n\n          // get the image object\n          var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n          // create a notebook item with the image populated into it\n          this.NotebookService.addNewItem($event, imageObject);\n        });\n      }\n    }\n  }\n\n  /**\n   * Check whether we need to show the snip model button\n   * @return whether to show the snip model button\n   */\n  showSnipModelButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipModelButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    this.isSubmit = true;\n\n    // tell the parent node that this component wants to submit\n    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Get the latest component state from this component\n   * @return the latest component state\n   */\n  getLatestStudentWork() {\n\n    // get the latest component state from this component\n    var latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    return latestComponentState;\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n\n    var studentWork = {};\n\n    if (params != null && params.getLatestStudentWorkFromThisComponent) {\n      // get the latest student work from this component\n      studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisComponent) {\n      // get all the student work from this component\n      studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromThisNode) {\n      // get the latest student work from the components in this node\n      studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisNode) {\n      // get all the student work from the components in this node\n      studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n      // get the latest student work from other specified components\n\n      // an array of objects that contain a nodeId and component Id\n      var otherComponents = params.otherComponents;\n\n      var latestStudentWorkFromOtherComponents = [];\n\n      if (otherComponents != null) {\n\n        // loop through all the components we need to get work from\n        for (var c = 0; c < otherComponents.length; c++) {\n          var otherComponent = otherComponents[c];\n\n          if (otherComponent != null) {\n\n            // get the node id and component id\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n\n              // get the latest component state for the given component\n              var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n              if (tempComponentState != null) {\n                // add the component state to the array\n                latestStudentWorkFromOtherComponents.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n\n      studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n    }\n\n    if (params != null && params.getAllStudentWorkFromOtherComponents) {\n      // get all the student work from other specified components\n      var otherComponents = params.otherComponents;\n\n      var allStudentWorkFromOtherComponents = [];\n\n      if (otherComponents != null) {\n\n        // loop throuh all the components we need to get work from\n        for (var c = 0; c < otherComponents.length; c++) {\n          var otherComponent = otherComponents[c];\n\n          if (otherComponent != null) {\n\n            // get the node id and component id\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n\n              // get the component states for the given component\n              var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n              if (tempComponentStates != null && tempComponentStates.length > 0) {\n                // add the component states to the array\n                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n              }\n            }\n          }\n        }\n      }\n\n      studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n    }\n\n    return studentWork;\n  }\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the model file\n   */\n  chooseModelFile() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'modelFile';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        mergedComponentState.studentData = {};\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'EmbeddedService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"]}