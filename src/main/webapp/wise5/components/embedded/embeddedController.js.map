{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$mdDialog","$q","$rootScope","$scope","$sce","$timeout","$window","AnnotationService","ConfigService","EmbeddedService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","componentType","url","width","height","maxWidth","maxHeight","notebookConfig","getNotebookConfig","latestAnnotations","componentStateId","embeddedApplicationIFrameId","originalComponentContent","componentId","componentContent","type","mode","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","workgroupId","componentState","id","setURL","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","message","messageType","sendMessageToApplication","getComponentState","isSubmit","deferred","defer","getState","action","embeddedController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","bind","$on","angular","event","args","removeEventListener","messageEventListener","messageEvent","messageEventData","data","category","eventCategory","eventData","saveVLEEvent","setStudentData","studentData","studentDataChanged","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","makeCopyOfJSONObject","$broadcast","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","$translate","submit","contentLocation","window","document","getElementById","contentWindow","addEventListener","latestState","trustAsResourceUrl","isLockAfterSubmit","isDisabled","createNewComponentState","createComponentStateAdditionalProcessing","hasConnectedComponent","handleConnectedComponents","postMessage","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","exitListener","submitTriggeredBy","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","mergedComponentState","firstTime","connectedComponents","componentStates","mergeFields","connectedComponentState","fields","mergeComponentState","setStudentWork","baseComponentState","newComponentState","mergeField","name","when","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\nimport iframeResizer from 'iframe-resizer';\n\nclass EmbeddedController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      EmbeddedService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.EmbeddedService = EmbeddedService;\n    this.componentType = null;\n    this.url = null;\n\n    // the width of the iframe (optional)\n    this.width = null;\n\n    // the height of the iframe (optional)\n    this.height = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    this.latestAnnotations = null;\n    this.componentStateId = null;\n    this.embeddedApplicationIFrameId = '';\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n\n    this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n    this.componentType = this.componentContent.type;\n\n    if (this.mode === 'student') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      let componentState = this.$scope.componentState;\n      if (componentState != null) {\n        // create a unique id for the application iframe using this component state\n        this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n        }\n      }\n\n      if (this.mode === 'grading') {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    }\n\n    if (this.componentContent != null) {\n      this.setURL(this.componentContent.url);\n    }\n\n    this.width = this.componentContent.width ? this.componentContent.width : '100%';\n    this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n    if (this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      var message = {};\n      message.messageType = 'handleConnectedComponentStudentDataChanged';\n      message.componentState = componentState;\n      this.sendMessageToApplication(message);\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.embeddedController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.embeddedController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      this.$window.removeEventListener('message', this.messageEventListener);\n    }));\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n      if (this.nodeId == args.nodeId && this.componentId != args.componentId) {\n        var message = {};\n        message.messageType = 'siblingComponentStudentDataChanged';\n        message.componentState = args.componentState;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.messageEventListener = angular.bind(this, function(messageEvent) {\n      var messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var componentType = this.componentType;\n        var category = messageEventData.eventCategory;\n        var event = messageEventData.event;\n        var eventData = messageEventData.eventData;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        if (messageEventData.id != null) {\n          //the model wants to update/overwrite an existing component state\n          this.componentStateId = messageEventData.id;\n        } else {\n          // the model wants to create a new component state\n          this.componentStateId = null;\n        }\n\n        if (messageEventData.isSubmit) {\n          this.isSubmit = messageEventData.isSubmit;\n        }\n\n        this.isDirty = true;\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        this.sendLatestWorkToApplication();\n        this.processLatestSubmit();\n\n        // activate iframe-resizer on the embedded app's iframe\n        $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n      } else if (messageEventData.messageType === 'componentDirty') {\n        let isDirty = messageEventData.isDirty;\n        this.isDirty = isDirty;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        let isSubmitDirty = messageEventData.isDirty;\n        this.isSubmitDirty = isSubmitDirty;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        var getStudentWorkParams = messageEventData.getStudentWorkParams;\n        var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n        var message = studentWork;\n        message.messageType = 'studentWork';\n        message.getStudentWorkParams = getStudentWorkParams;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        var latestComponentState = this.getLatestStudentWork();\n        var message = {};\n        message.messageType = 'latestStudentWork';\n        message.latestStudentWork = latestComponentState;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getParameters') {\n        var message = {};\n        message.messageType = 'parameters';\n        let parameters = {};\n        if (this.componentContent.parameters != null) {\n          parameters = this.UtilService.makeCopyOfJSONObject(this.componentContent.parameters);\n        }\n        parameters.nodeId = this.nodeId;\n        parameters.componentId = this.componentId;\n        message.parameters = parameters;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      var componentState = args.studentWork;\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          // set isDirty to false because the component state was just saved and notify node\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n          this.$scope.embeddedController.componentState = null;\n\n          let isAutoSave = componentState.isAutoSave;\n          let isSubmit = componentState.isSubmit;\n          let serverSaveTime = componentState.serverSaveTime;\n          let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n          if (isSubmit) {\n            this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n            this.submit();\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n          } else {\n            this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n          }\n\n          var message = {};\n          message.messageType = 'componentStateSaved';\n          message.componentState = componentState;\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n  }\n\n  iframeLoaded(contentLocation) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.addEventListener('message', this.messageEventListener);\n  }\n\n  /**\n   * Check if latest component state is a submission and if not, set isSubmitDirty to true\n   */\n  processLatestSubmit() {\n    let latestState = this.$scope.componentState;\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  setURL(url) {\n    if (url != null) {\n      this.url = this.$sce.trustAsResourceUrl(url);\n    }\n  };\n\n  submit() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (this.componentStateId != null) {\n      componentState.id = this.componentStateId;\n    }\n\n    if (this.isSubmit) {\n      componentState.isSubmit = this.isSubmit;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n    }\n\n    componentState.studentData = this.studentData;\n    componentState.componentType = 'Embedded';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  };\n\n  sendLatestWorkToApplication() {\n    let componentState = this.$scope.componentState;\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      componentState = this.handleConnectedComponents();\n    }\n    var message = {\n      messageType: 'componentState',\n      componentState: componentState\n    };\n\n    this.sendMessageToApplication(message);\n  };\n\n  sendMessageToApplication(message) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*');\n  };\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n    var iframe = $('#' + this.embeddedApplicationIFrameId);\n    if (iframe != null && iframe.length > 0) {\n      var modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n          var img_b64 = canvas.toDataURL('image/png');\n          var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n          this.NotebookService.addNote($event, imageObject);\n        });\n      }\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  submit(submitTriggeredBy) {\n    this.isSubmit = true;\n    this.$scope.$emit('componentSubmitTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  getLatestStudentWork() {\n    return this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n    var studentWork = {};\n\n    if (params != null && params.getLatestStudentWorkFromThisComponent) {\n      studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisComponent) {\n      studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromThisNode) {\n      studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisNode) {\n      studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n      // an array of objects that contain a nodeId and component Id\n      var otherComponents = params.otherComponents;\n      var latestStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentState != null) {\n                latestStudentWorkFromOtherComponents.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n      studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n    }\n\n    if (params != null && params.getAllStudentWorkFromOtherComponents) {\n      var otherComponents = params.otherComponents;\n      var allStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentStates != null && tempComponentStates.length > 0) {\n                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n              }\n            }\n          }\n        }\n      }\n      studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n    }\n    return studentWork;\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null) {\n      mergedComponentState = this.NodeService.createNewComponentState();\n      mergedComponentState.studentData = {};\n    } else {\n      firstTime = false;\n    }\n    var connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      var componentStates = [];\n      for (var connectedComponent of connectedComponents) {\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n          var mergeFields = connectedComponent.mergeFields;\n          if (type == 'showWork') {\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            var connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (connectedComponentState != null) {\n              let fields = connectedComponent.fields;\n              mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n            }\n          }\n        }\n      }\n\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a new component state into a base component state.\n   * @param baseComponentState The component state we will be merging into.\n   * @param newComponentState The component state we will be merging from.\n   * @param mergeFields The fields to merge.\n   * @param firstTime Whether this is the first time the baseComponentState is\n   * being merged into.\n   */\n  mergeComponentState(baseComponentState, newComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (newComponentState.componentType == 'Embedded') {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(newComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n    this.studentData = componentState.studentData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentData(studentData) {\n    this.studentData = studentData;\n  };\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'EmbeddedService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"]}