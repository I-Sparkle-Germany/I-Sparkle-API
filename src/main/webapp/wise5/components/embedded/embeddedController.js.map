{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$mdDialog","$q","$rootScope","$scope","$sce","$timeout","$window","AnnotationService","ConfigService","EmbeddedService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","componentType","url","setWidthAndHeight","componentContent","width","height","maxWidth","maxHeight","notebookConfig","getNotebookConfig","componentStateId","embeddedApplicationIFrameId","annotationsToSave","componentId","type","isGradingMode","isGradingRevisionMode","componentState","id","setURL","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","message","messageType","sendMessageToApplication","initializeScopeGetComponentState","$on","event","args","isEventTargetThisComponent","initializeMessageEventListener","broadcastDoneRenderingComponent","removeEventListener","messageEventListener","messageEvent","messageEventData","data","handleEventMessage","handleStudentWorkMessage","handleApplicationInitializedMessage","handleComponentDirtyMessage","handleComponentSubmitDirtyMessage","handleStudentDataChangedMessage","handleGetStudentWorkMessage","handleGetLatestStudentWorkMessage","handleGetParametersMessage","handleGetProjectPathMessage","handleGetLatestAnnotationsMessage","nodeId","category","eventCategory","eventData","saveVLEEvent","isSubmit","isDirty","setStudentData","studentData","annotations","setAnnotations","studentDataChanged","$emit","sendLatestWorkToApplication","processLatestStudentWork","$","iFrameResize","scrolling","isSubmitDirty","getStudentWorkParams","studentWork","getStudentWork","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","makeCopyOfJSONObject","projectPath","getConfigParam","projectAssetsPath","latestScoreAnnotation","getLatestScoreAnnotation","getWorkgroupId","latestCommentAnnotation","getLatestCommentAnnotation","embeddedController","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSubmittedMessage","submit","setAutoSavedMessage","setSavedMessage","contentLocation","window","document","getElementById","contentWindow","addEventListener","trustAsResourceUrl","action","createNewComponentState","length","clearAnnotationsToSave","deferred","defer","createComponentStateAdditionalProcessing","promise","hasConnectedComponent","handleConnectedComponents","postMessage","$event","iframe","modelElement","contents","find","then","canvas","base64Image","toDataURL","imageObject","getImageObjectFromBase64String","addNote","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","latestStudentWorkFromOtherComponents","otherComponents","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","tempComponentStates","concat","mergedComponentState","firstTime","connectedComponents","componentStates","handleShowWorkConnectedComponent","handleImportWorkConnectedComponent","setStudentWork","isDisabled","connectedComponentState","fields","when","mergeComponentState","toComponentState","fromComponentState","mergeFields","mergeField","name","annotation","isAnnotationValid","scoreAnnotation","createAutoScoreAnnotation","updateLatestScoreAnnotation","addToAnnotationsToSave","commentAnnotation","createAutoCommentAnnotation","updateLatestCommentAnnotation","value","ComponentController","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\nimport iframeResizer from 'iframe-resizer';\n\nclass EmbeddedController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      EmbeddedService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.EmbeddedService = EmbeddedService;\n    this.componentType = null;\n    this.url = null;\n    this.setWidthAndHeight(this.componentContent.width, this.componentContent.height);\n    this.maxWidth = null;\n    this.maxHeight = null;\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    this.componentStateId = null;\n    this.embeddedApplicationIFrameId = '';\n    this.annotationsToSave = [];\n    this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n    this.componentType = this.componentContent.type;\n\n    if (this.isGradingMode() || this.isGradingRevisionMode()) {\n      const componentState = this.$scope.componentState;\n      if (componentState != null) {\n        this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n        if (this.isGradingRevisionMode()) {\n          this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n        }\n      }\n    }\n\n    this.setURL(this.componentContent.url);\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      const message = {\n        messageType: 'handleConnectedComponentStudentDataChanged',\n        componentState: componentState\n      };\n      this.sendMessageToApplication(message);\n    };\n\n    this.initializeScopeGetComponentState(this.$scope, 'embeddedController');\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step.\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n      if (this.isEventTargetThisComponent(args)) {\n        const message = {\n          messageType: 'siblingComponentStudentDataChanged',\n          componentState: args.componentState\n        };\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.initializeMessageEventListener();\n    this.broadcastDoneRenderingComponent();\n  }\n\n  setWidthAndHeight(width, height) {\n    this.width = width ? width + 'px' : 'none';\n    this.height = height ? height + 'px' : '600px';\n  }\n\n  cleanupBeforeExiting() {\n    this.$window.removeEventListener('message', this.messageEventListener);\n  }\n\n  initializeMessageEventListener() {\n    this.messageEventListener = (messageEvent) => {\n      const messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        this.handleEventMessage(messageEventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        this.handleStudentWorkMessage(messageEventData);\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        this.handleApplicationInitializedMessage(messageEventData);\n      } else if (messageEventData.messageType === 'componentDirty') {\n        this.handleComponentDirtyMessage(messageEventData);\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        this.handleComponentSubmitDirtyMessage(messageEventData);\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.handleStudentDataChangedMessage(messageEventData);\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        this.handleGetStudentWorkMessage(messageEventData);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        this.handleGetLatestStudentWorkMessage(messageEventData);\n      } else if (messageEventData.messageType === 'getParameters') {\n        this.handleGetParametersMessage(messageEventData);\n      } else if (messageEventData.messageType === 'getProjectPath') {\n        this.handleGetProjectPathMessage(messageEventData);\n      } else if (messageEventData.messageType === 'getLatestAnnotations') {\n        this.handleGetLatestAnnotationsMessage(messageEventData);\n      }\n    };\n  }\n\n  handleEventMessage(messageEventData) {\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const componentType = this.componentType;\n    const category = messageEventData.eventCategory;\n    const event = messageEventData.event;\n    const eventData = messageEventData.eventData;\n    this.StudentDataService.saveVLEEvent(\n        nodeId, componentId, componentType, category, event, eventData);\n  }\n\n  handleStudentWorkMessage(messageEventData) {\n    if (messageEventData.id != null) {\n      //the model wants to update/overwrite an existing component state\n      this.componentStateId = messageEventData.id;\n    } else {\n      // the model wants to create a new component state\n      this.componentStateId = null;\n    }\n\n    if (messageEventData.isSubmit) {\n      this.isSubmit = messageEventData.isSubmit;\n    }\n\n    this.isDirty = true;\n    this.setStudentData(messageEventData.studentData);\n    if (messageEventData.annotations != null) {\n      this.setAnnotations(messageEventData.annotations);\n    }\n    this.studentDataChanged();\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  handleApplicationInitializedMessage(messageEventData) {\n    this.sendLatestWorkToApplication();\n    this.processLatestStudentWork();\n    $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n  }\n\n  handleComponentDirtyMessage(messageEventData) {\n    this.isDirty = messageEventData.isDirty;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  handleComponentSubmitDirtyMessage(messageEventData) {\n    this.isSubmitDirty = messageEventData.isDirty;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  handleStudentDataChangedMessage(messageEventData) {\n    this.setStudentData(messageEventData.studentData);\n    if (messageEventData.annotations != null) {\n      this.setAnnotations(messageEventData.annotations);\n    }\n    this.studentDataChanged();\n  }\n\n  handleGetStudentWorkMessage(messageEventData) {\n    const getStudentWorkParams = messageEventData.getStudentWorkParams;\n    const studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n    const message = studentWork;\n    message.messageType = 'studentWork';\n    message.getStudentWorkParams = getStudentWorkParams;\n    this.sendMessageToApplication(message);\n  }\n\n  handleGetLatestStudentWorkMessage(messageEventData) {\n    const latestComponentState = this.getLatestStudentWork();\n    const message = {\n      messageType: 'latestStudentWork',\n      latestStudentWork: latestComponentState\n    };\n    this.sendMessageToApplication(message);\n  }\n\n  handleGetParametersMessage(messageEventData) {\n    let parameters = {};\n    if (this.componentContent.parameters != null) {\n      parameters = this.UtilService.makeCopyOfJSONObject(this.componentContent.parameters);\n    }\n    parameters.nodeId = this.nodeId;\n    parameters.componentId = this.componentId;\n    const message = {\n      messageType: 'parameters',\n      parameters: parameters\n    };\n    this.sendMessageToApplication(message);\n  }\n\n  handleGetProjectPathMessage(messageEventData) {\n    const message = {\n      messageType: 'projectPath',\n      projectPath: this.ConfigService.getConfigParam('projectBaseURL'),\n      projectAssetsPath: this.ConfigService.getConfigParam('projectBaseURL') + 'assets'\n    };\n    this.sendMessageToApplication(message);\n  }\n\n  handleGetLatestAnnotationsMessage(messageEventData) {\n    const latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(\n      this.nodeId, this.componentId, this.ConfigService.getWorkgroupId(), 'any');\n    const latestCommentAnnotation = this.AnnotationService.getLatestCommentAnnotation(\n      this.nodeId, this.componentId, this.ConfigService.getWorkgroupId(), 'any');\n    const message = {\n      messageType: 'latestAnnotations',\n      latestScoreAnnotation: latestScoreAnnotation,\n      latestCommentAnnotation: latestCommentAnnotation\n    };\n    this.sendMessageToApplication(message);\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      const componentState = args.studentWork;\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n          this.$scope.embeddedController.componentState = null;\n          const isAutoSave = componentState.isAutoSave;\n          const isSubmit = componentState.isSubmit;\n          const serverSaveTime = componentState.serverSaveTime;\n          const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n          if (isSubmit) {\n            this.setSubmittedMessage(clientSaveTime);\n            this.submit();\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setAutoSavedMessage(clientSaveTime);\n          } else {\n            this.setSavedMessage(clientSaveTime);\n          }\n          const message = {\n            messageType: 'componentStateSaved',\n            componentState: componentState\n          };\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n  }\n\n  iframeLoaded(contentLocation) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.addEventListener('message', this.messageEventListener);\n  }\n\n  setURL(url) {\n    this.url = this.$sce.trustAsResourceUrl(url);\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n    const componentState = this.NodeService.createNewComponentState();\n    componentState.studentData = this.studentData;\n    componentState.componentType = 'Embedded';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    if (this.componentStateId != null) {\n      componentState.id = this.componentStateId;\n    }\n    if (this.isSubmit) {\n      componentState.isSubmit = this.isSubmit;\n      this.isSubmit = false;\n    }\n    if (this.annotationsToSave.length !== 0) {\n      componentState.annotations = this.annotationsToSave;\n    }\n    if (action === 'save') {\n      this.clearAnnotationsToSave();\n    }\n    const deferred = this.$q.defer();\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  clearAnnotationsToSave() {\n    this.annotationsToSave = [];\n  }\n\n  sendLatestWorkToApplication() {\n    let componentState = this.$scope.componentState;\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      componentState = this.handleConnectedComponents();\n    }\n    const message = {\n      messageType: 'componentState',\n      componentState: componentState\n    };\n    this.sendMessageToApplication(message);\n  }\n\n  sendMessageToApplication(message) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*');\n  }\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n    const iframe = $('#' + this.embeddedApplicationIFrameId);\n    if (iframe != null && iframe.length > 0) {\n      let modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n        html2canvas(modelElement).then((canvas) => {\n          const base64Image = canvas.toDataURL('image/png');\n          const imageObject = this.UtilService.getImageObjectFromBase64String(base64Image);\n          this.NotebookService.addNote($event, imageObject);\n        });\n      }\n    }\n  }\n\n  getLatestStudentWork() {\n    return this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n    const studentWork = {};\n    if (params != null) {\n      if (params.getLatestStudentWorkFromThisComponent) {\n        studentWork.latestStudentWorkFromThisComponent =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(\n                this.nodeId, this.componentId);\n      }\n      if (params.getAllStudentWorkFromThisComponent) {\n        studentWork.allStudentWorkFromThisComponent =\n            this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                this.nodeId, this.componentId);\n      }\n      if (params.getLatestStudentWorkFromThisNode) {\n        studentWork.latestStudentWorkFromThisNode =\n            this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n      }\n      if (params.getAllStudentWorkFromThisNode) {\n        studentWork.allStudentWorkFromThisNode =\n            this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n      }\n      if (params.getLatestStudentWorkFromOtherComponents) {\n        studentWork.latestStudentWorkFromOtherComponents =\n            this.getLatestStudentWorkFromOtherComponents(params.otherComponents);\n      }\n      if (params.getAllStudentWorkFromOtherComponents) {\n        studentWork.allStudentWorkFromOtherComponents =\n            this.getAllStudentWorkFromOtherComponents(params.otherComponents);\n      }\n    }\n    return studentWork;\n  }\n\n  getLatestStudentWorkFromOtherComponents(otherComponents) {\n    const latestStudentWorkFromOtherComponents = [];\n    if (otherComponents != null) {\n      for (let otherComponent of otherComponents) {\n        const tempNodeId = otherComponent.nodeId;\n        const tempComponentId = otherComponent.componentId;\n        if (tempNodeId != null && tempComponentId != null) {\n          const tempComponentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(\n              tempNodeId, tempComponentId);\n          if (tempComponentState != null) {\n            latestStudentWorkFromOtherComponents.push(tempComponentState);\n          }\n        }\n      }\n    }\n    return latestStudentWorkFromOtherComponents;\n  }\n\n  getAllStudentWorkFromOtherComponents(otherComponents) {\n    let allStudentWorkFromOtherComponents = [];\n    if (otherComponents != null) {\n      for (let otherComponent of otherComponents) {\n        if (otherComponent != null) {\n          const tempNodeId = otherComponent.nodeId;\n          const tempComponentId = otherComponent.componentId;\n          if (tempNodeId != null && tempComponentId != null) {\n            let tempComponentStates =\n              this.StudentDataService.getComponentStatesByNodeIdAndComponentId(\n                tempNodeId, tempComponentId);\n            if (tempComponentStates != null && tempComponentStates.length > 0) {\n              allStudentWorkFromOtherComponents =\n                  allStudentWorkFromOtherComponents.concat(tempComponentStates);\n            }\n          }\n        }\n      }\n    }\n    return allStudentWorkFromOtherComponents;\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null) {\n      mergedComponentState = this.NodeService.createNewComponentState();\n      mergedComponentState.studentData = {};\n    } else {\n      firstTime = false;\n    }\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const type = connectedComponent.type;\n        if (type === 'showWork') {\n          this.handleShowWorkConnectedComponent(connectedComponent, componentStates);\n        } else if (type === 'importWork' || type == null) {\n          mergedComponentState =\n              this.handleImportWorkConnectedComponent(\n                  connectedComponent, mergedComponentState, firstTime)\n        }\n      }\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  handleShowWorkConnectedComponent(connectedComponent, componentStates) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    const componentState =\n      this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (componentState != null) {\n      componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n    }\n    this.isDisabled = true;\n  }\n\n  handleImportWorkConnectedComponent(connectedComponent, mergedComponentState, firstTime) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    const connectedComponentState =\n      this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (connectedComponentState != null) {\n      const fields = connectedComponent.fields;\n      const when = connectedComponent.when;\n      if (when == null || (when === 'firstTime' && firstTime)) {\n        mergedComponentState = this.mergeComponentState(\n          mergedComponentState, connectedComponentState, fields, firstTime);\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a new component state into a base component state.\n   * @param toComponentState The component state we will be merging into.\n   * @param fromComponentState The component state we will be merging from.\n   * @param mergeFields The fields to merge.\n   * @param firstTime Whether this is the first time the baseComponentState is\n   * being merged into.\n   */\n  mergeComponentState(toComponentState, fromComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      // there are no merge fields specified so we will get all of the fields\n      if (fromComponentState.componentType === 'Embedded') {\n        toComponentState.studentData =\n            this.UtilService.makeCopyOfJSONObject(fromComponentState.studentData);\n      }\n    } else {\n      for (let mergeField of mergeFields) {\n        this.mergeField(toComponentState, fromComponentState, mergeField, firstTime);\n      }\n    }\n    return toComponentState;\n  }\n\n  mergeField(toComponentState, fromComponentState, mergeField, firstTime) {\n    const name = mergeField.name;\n    const when = mergeField.when;\n    const action = mergeField.action;\n    if (when == 'firstTime' && firstTime == true) {\n      if (action == 'write') {\n        toComponentState.studentData[name] = fromComponentState.studentData[name];\n      } else if (action == 'read') {\n        // TODO\n      }\n    } else if (when == 'always') {\n      if (action == 'write') {\n        toComponentState.studentData[name] = fromComponentState.studentData[name];\n      } else if (action == 'read') {\n        // TODO\n      }\n    }\n  }\n\n  setStudentWork(componentState) {\n    this.studentData = componentState.studentData;\n  }\n\n  setStudentData(studentData) {\n    this.studentData = studentData;\n  }\n\n  setAnnotations(annotations) {\n    for (let annotation of annotations) {\n      if (this.isAnnotationValid(annotation)) {\n        if (annotation.type === 'autoScore') {\n          const scoreAnnotation = this.createAutoScoreAnnotation(annotation.data);\n          this.updateLatestScoreAnnotation(scoreAnnotation);\n          this.addToAnnotationsToSave(scoreAnnotation);\n        } else if (annotation.type === 'autoComment') {\n          const commentAnnotation = this.createAutoCommentAnnotation(annotation.data);\n          this.updateLatestCommentAnnotation(commentAnnotation);\n          this.addToAnnotationsToSave(commentAnnotation);\n        }\n      }\n    }\n  }\n\n  isAnnotationValid(annotation) {\n    return annotation.type != null && annotation.data != null && annotation.data.value != null;\n  }\n\n  addToAnnotationsToSave(annotation) {\n    this.annotationsToSave.push(annotation);\n  }\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'EmbeddedService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"],"file":"embeddedController.js"}