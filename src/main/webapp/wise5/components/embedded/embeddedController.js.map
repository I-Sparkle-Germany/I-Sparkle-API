{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$q","$scope","$sce","$window","ConfigService","NodeService","NotebookService","EmbeddedService","ProjectService","StudentDataService","UtilService","nodeId","componentId","componentContent","authoringComponentContent","componentType","url","width","height","maxWidth","maxHeight","isDirty","isSubmitDirty","isSnipModelButtonVisible","saveMessage","text","time","latestAnnotations","componentState","embeddedApplicationIFrameId","messageEventListener","angular","bind","messageEvent","messageEventData","data","messageType","category","eventCategory","event","eventData","saveVLEEvent","createNewComponentState","studentData","isSubmit","isAutoSave","$emit","sendLatestWorkToApplication","processLatestSubmit","$","iFrameResize","scrolling","studentDataChanged","addEventListener","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","type","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","registerComponentController","$on","args","componentStates","i","l","length","currentState","embeddedController","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","successMessage","sendMessageToApplication","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","removeEventListener","latestState","trustedURL","trustAsResourceUrl","isLockAfterSubmit","isDisabled","getComponentId","createComponentStateAdditionalProcessing","message","window","document","getElementById","contentWindow","postMessage","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","toJson","$event","iframe","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","exitListener","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["import iframeResizer from 'iframe-resizer';\nimport html2canvas from 'html2canvas';\n\nclass EmbeddedController {\n    constructor($q,\n                $scope,\n                $sce,\n                $window,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                EmbeddedService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.$window = $window;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.EmbeddedService = EmbeddedService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // field that will hold the component type\n        this.componentType = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the width of the iframe (optional)\n        this.width = null;\n\n        // the height of the iframe (optional)\n        this.height = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // whether we have data to save\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether the snip model button is shown or not\n        this.isSnipModelButtonVisible = true;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // variable to store component states (from application)\n        this.componentState = null;\n\n        // the id of the embedded application's iframe\n        this.embeddedApplicationIFrameId = '';\n\n        this.messageEventListener = angular.bind(this, function(messageEvent) {\n            // handle messages received from iframe\n            var messageEventData = messageEvent.data;\n            if (messageEventData.messageType === \"event\") {\n                // save event to WISE\n                var nodeId = this.nodeId;\n                var componentId = this.componentId;\n                var componentType = this.componentType;\n                var category = messageEventData.eventCategory;\n                var event = messageEventData.event;\n                var eventData = messageEventData.eventData;\n\n                // save notebook open/close event\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            } else if (messageEventData.messageType === \"studentWork\") {\n                // save student work to WISE\n                // create a new component state\n                this.componentState = this.NodeService.createNewComponentState();\n\n                // set the student data into the component state\n                this.componentState.studentData = messageEventData.studentData;\n\n                this.componentState.isSubmit = false;\n                if (messageEventData.isSubmit) {\n                    this.componentState.isSubmit = messageEventData.isSubmit;\n                }\n\n                this.componentState.isAutoSave = false;\n                if (messageEventData.isAutoSave) {\n                    this.componentState.isAutoSave = messageEventData.isAutoSave;\n                }\n\n                this.isDirty = true;\n\n                // tell the parent node that this component wants to save\n                this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n            } else if (messageEventData.messageType === \"applicationInitialized\") {\n                // application has finished loading, so send latest component state to application\n                this.sendLatestWorkToApplication();\n                this.processLatestSubmit();\n\n                // activate iframe-resizer on the embedded app's iframe\n                $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n            } else if (messageEventData.messageType === \"componentDirty\") {\n                let isDirty = messageEventData.isDirty;\n\n                // set component dirty to true/false and notify node\n                this.isDirty = isDirty;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"componentSubmitDirty\") {\n                let isSubmitDirty = messageEventData.isDirty;\n\n                // set component submit dirty to true/false and notify node\n                this.isSubmitDirty = isSubmitDirty;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n            } else if (messageEventData.messageType === \"studentDataChanged\") {\n                this.studentDataChanged(messageEventData.studentData);\n            }\n        });\n\n        // listen for message events from embedded iframe application\n        this.$window.addEventListener('message', this.messageEventListener);\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // id of the iframe that embeds the application\n            this.embeddedApplicationIFrameId = \"componentApp_\" + this.componentId;\n\n            this.componentType = this.componentContent.type;\n\n            if (this.mode === 'student') {\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                this.isSnipModelButtonVisible = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.setURL(this.componentContent.url);\n                }.bind(this), true);\n            } else if (this.mode === 'grading') {\n                this.isSnipModelButtonVisible = false;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isSnipModelButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isSnipModelButtonVisible = false;\n            }\n\n            if (this.componentContent != null) {\n                // set the url\n                this.setURL(this.componentContent.url);\n            }\n\n            // get the width\n            this.width = this.componentContent.width ? this.componentContent.width : \"100%\";\n\n            // get the height\n            this.height = this.componentContent.height ? this.componentContent.height : \"100%\";\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for saveComponentStateSuccess event from node controller, set dirty and save message accordingly\n         */\n        this.$scope.$on('saveComponentStateSuccess', angular.bind(this, function(event, args) {\n\n            // get the component states that were saved\n            let componentStates = args.componentStates;\n            for (let i = 0, l = componentStates.length; i < l; i++) {\n                let currentState = componentStates[i];\n                if (currentState.componentId === this.componentId) {\n                    // a component state for this component was saved\n\n                    // set isDirty to false because the component state was just saved and notify node\n                    this.isDirty = false;\n                    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                    // clear out current componentState\n                    this.$scope.embeddedController.componentState = null;\n\n                    let isAutoSave = currentState.isAutoSave;\n                    let isSubmit = currentState.isSubmit;\n                    let serverSaveTime = componentState.serverSaveTime;\n                    let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                    // set save message\n                    if (isSubmit) {\n                        this.setSaveMessage('Submitted', clientSaveTime);\n\n                        this.submit();\n\n                        // set isSubmitDirty to false because the component state was just submitted and notify node\n                        this.isSubmitDirty = false;\n                        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                    } else if (isAutoSave) {\n                        this.setSaveMessage('Auto-saved', clientSaveTime);\n                    } else {\n                        this.setSaveMessage('Saved', clientSaveTime);\n                    }\n\n                    // Tell application that this componentState was successfully saved to server;\n                    // include saved state and updated save message\n                    var successMessage = {\n                        messageType: \"componentStateSaved\",\n                        componentState: currentState,\n                        saveMessage: this.saveMessage\n                    };\n                    this.sendMessageToApplication(successMessage);\n\n                    // clear out componentState\n                    this.componentState = {};\n                }\n            }\n        }));\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.embeddedController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.embeddedController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // unregister messageEventListener\n            this.$window.removeEventListener('message', this.messageEventListener);\n        }));\n    }\n\n    /**\n     * Check if latest component state is a submission and if not, set isSubmitDirty to true\n     */\n    processLatestSubmit() {\n        let latestState = this.$scope.componentState;\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged(data) {\n\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = this.studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    sendLatestWorkToApplication() {\n        // get the latest component state from the scope\n        var message = {\n            messageType: \"componentState\",\n            componentState: this.$scope.componentState\n        };\n\n        // send the latest component state to embedded application\n        this.sendMessageToApplication(message);\n    };\n\n    sendMessageToApplication(message) {\n        // send the message to embedded application via postMessage\n        window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, \"*\")\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Snip the model by converting it to an image\n     * @param $event the click event\n     */\n    snipModel($event) {\n\n        // get the iframe\n        var iframe = $('#componentApp_' + this.componentId);\n\n        if (iframe != null && iframe.length > 0) {\n\n            //get the html from the iframe\n            var modelElement = iframe.contents().find('html');\n\n            if (modelElement != null && modelElement.length > 0) {\n                modelElement = modelElement[0];\n\n                // convert the model element to a canvas element\n                html2canvas(modelElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n                });\n            }\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip model button\n     * @return whether to show the snip model button\n     */\n    showSnipModelButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipModelButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n}\n\nEmbeddedController.$inject = [\n    '$q',\n    '$scope',\n    '$sce',\n    '$window',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'EmbeddedService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default EmbeddedController;\n"]}