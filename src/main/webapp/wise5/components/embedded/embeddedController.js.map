{"version":3,"sources":["embeddedController.es6"],"names":["EmbeddedController","$filter","$mdDialog","$q","$rootScope","$scope","$sce","$timeout","$window","AnnotationService","ConfigService","EmbeddedService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","componentType","url","width","height","maxWidth","maxHeight","notebookConfig","getNotebookConfig","latestAnnotations","componentStateId","embeddedApplicationIFrameId","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","originalComponentContent","componentId","componentContent","mode","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","workgroupId","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","setURL","componentState","id","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","message","messageType","sendMessageToApplication","getComponentState","isSubmit","deferred","defer","getState","action","embeddedController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$on","angular","event","args","removeEventListener","messageEventListener","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","authoringViewComponentChanged","showAdvancedAuthoring","messageEvent","messageEventData","data","category","eventCategory","eventData","saveVLEEvent","setStudentData","studentData","studentDataChanged","$emit","sendLatestWorkToApplication","processLatestSubmit","iFrameResize","scrolling","getStudentWorkParams","studentWork","getStudentWork","latestComponentState","getLatestStudentWork","latestStudentWork","parameters","makeCopyOfJSONObject","$broadcast","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","contentLocation","window","getElementById","contentWindow","addEventListener","latestState","trustAsResourceUrl","isLockAfterSubmit","isDisabled","createNewComponentState","createComponentStateAdditionalProcessing","hasConnectedComponent","handleConnectedComponents","postMessage","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","$event","iframe","length","modelElement","contents","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","exitListener","submitTriggeredBy","getLatestComponentStateByNodeIdAndComponentId","params","getLatestStudentWorkFromThisComponent","latestStudentWorkFromThisComponent","getAllStudentWorkFromThisComponent","allStudentWorkFromThisComponent","getComponentStatesByNodeIdAndComponentId","getLatestStudentWorkFromThisNode","latestStudentWorkFromThisNode","getLatestComponentStatesByNodeId","getAllStudentWorkFromThisNode","allStudentWorkFromThisNode","getComponentStatesByNodeId","getLatestStudentWorkFromOtherComponents","otherComponents","latestStudentWorkFromOtherComponents","otherComponent","tempNodeId","tempComponentId","tempComponentState","push","getAllStudentWorkFromOtherComponents","allStudentWorkFromOtherComponents","tempComponentStates","concat","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","indexOfComponentToDelete","splice","show","setShowSubmitButtonValue","isPopup","tags","index","tag","indexOfTagToDelete","confirm","mergedComponentState","firstTime","componentStates","mergeFields","connectedComponentState","fields","mergeComponentState","setStudentWork","baseComponentState","newComponentState","mergeField","name","when","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"embeddedController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\nimport iframeResizer from 'iframe-resizer';\n\nclass EmbeddedController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $sce,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      EmbeddedService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.EmbeddedService = EmbeddedService;\n    this.componentType = null;\n    this.url = null;\n\n    // the width of the iframe (optional)\n    this.width = null;\n\n    // the height of the iframe (optional)\n    this.height = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    this.latestAnnotations = null;\n    this.componentStateId = null;\n    this.embeddedApplicationIFrameId = '';\n\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    this.allowedConnectedComponentTypes = [\n      { type: 'Animation' },\n      { type: 'AudioOscillator' },\n      { type: 'ConceptMap' },\n      { type: 'Discussion' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Match' },\n      { type: 'MultipleChoice' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n\n    this.embeddedApplicationIFrameId = 'componentApp_' + this.componentId;\n    this.componentType = this.componentContent.type;\n\n    if (this.mode === 'student') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'authoring') {\n      this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n      this.summernoteRubricHTML = this.componentContent.rubric;\n\n      // the tooltip text for the insert WISE asset button\n      var insertAssetString = this.$translate('INSERT_ASSET');\n\n      // create the custom button for inserting WISE assets into summernote\n      var InsertAssetButton = this.UtilService\n        .createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n      this.summernoteRubricOptions = {\n        toolbar: [\n          ['style', ['style']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['fontname', ['fontname']],\n          ['fontsize', ['fontsize']],\n          ['color', ['color']],\n          ['para', ['ul', 'ol', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'video']],\n          ['view', ['fullscreen', 'codeview', 'help']],\n          ['customButton', ['insertAssetButton']]\n        ],\n        height: 300,\n        disableDragAndDrop: true,\n        buttons: {\n          insertAssetButton: InsertAssetButton\n        }\n      };\n\n      this.updateAdvancedAuthoringView();\n\n      $scope.$watch(function() {\n        return this.authoringComponentContent;\n      }.bind(this), function(newValue, oldValue) {\n        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.width = this.componentContent.width ? this.componentContent.width : '100%';\n        this.height = this.componentContent.height ? this.componentContent.height : '100%';\n        this.setURL(this.componentContent.url);\n      }.bind(this), true);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      let componentState = this.$scope.componentState;\n      if (componentState != null) {\n        // create a unique id for the application iframe using this component state\n        this.embeddedApplicationIFrameId = 'componentApp_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.embeddedApplicationIFrameId = 'componentApp_gradingRevision_' + componentState.id;\n        }\n      }\n\n      if (this.mode === 'grading') {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n    }\n\n    if (this.componentContent != null) {\n      this.setURL(this.componentContent.url);\n    }\n\n    this.width = this.componentContent.width ? this.componentContent.width : '100%';\n    this.height = this.componentContent.height ? this.componentContent.height : '100%';\n\n    if (this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      var message = {};\n      message.messageType = 'handleConnectedComponentStudentDataChanged';\n      message.componentState = componentState;\n      this.sendMessageToApplication(message);\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.embeddedController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.embeddedController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        this.$scope.embeddedController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      this.$window.removeEventListener('message', this.messageEventListener);\n    }));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          var assetItem = args.assetItem;\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n            if (fileName != null) {\n              // get the assets directory path, e.g. /wise/curriculum/3/\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * Listen for the siblingComponentStudentDataChanged event which occurs\n     * when the student data has changed for another component in this step\n     */\n    this.$scope.$on('siblingComponentStudentDataChanged', (event, args) => {\n      if (this.nodeId == args.nodeId && this.componentId != args.componentId) {\n        var message = {};\n        message.messageType = 'siblingComponentStudentDataChanged';\n        message.componentState = args.componentState;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    /* TODO geoffreykwan we're listening to assetSelected twice?\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          var assetItem = args.assetItem;\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n            if (fileName != null) {\n              if (args.target == 'modelFile') {\n                this.authoringComponentContent.url = fileName;\n                this.authoringViewComponentChanged();\n              }\n            }\n          }\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.messageEventListener = angular.bind(this, function(messageEvent) {\n      var messageEventData = messageEvent.data;\n      if (messageEventData.messageType === 'event') {\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var componentType = this.componentType;\n        var category = messageEventData.eventCategory;\n        var event = messageEventData.event;\n        var eventData = messageEventData.eventData;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n      } else if (messageEventData.messageType === 'studentWork') {\n        if (messageEventData.id != null) {\n          //the model wants to update/overwrite an existing component state\n          this.componentStateId = messageEventData.id;\n        } else {\n          // the model wants to create a new component state\n          this.componentStateId = null;\n        }\n\n        if (messageEventData.isSubmit) {\n          this.isSubmit = messageEventData.isSubmit;\n        }\n\n        this.isDirty = true;\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n      } else if (messageEventData.messageType === 'applicationInitialized') {\n        this.sendLatestWorkToApplication();\n        this.processLatestSubmit();\n\n        // activate iframe-resizer on the embedded app's iframe\n        $('#' + this.embeddedApplicationIFrameId).iFrameResize({scrolling: true});\n      } else if (messageEventData.messageType === 'componentDirty') {\n        let isDirty = messageEventData.isDirty;\n        this.isDirty = isDirty;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'componentSubmitDirty') {\n        let isSubmitDirty = messageEventData.isDirty;\n        this.isSubmitDirty = isSubmitDirty;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n      } else if (messageEventData.messageType === 'studentDataChanged') {\n        this.setStudentData(messageEventData.studentData);\n        this.studentDataChanged();\n      } else if (messageEventData.messageType === 'getStudentWork') {\n        var getStudentWorkParams = messageEventData.getStudentWorkParams;\n        var studentWork = this.getStudentWork(messageEventData.getStudentWorkParams);\n        var message = studentWork;\n        message.messageType = 'studentWork';\n        message.getStudentWorkParams = getStudentWorkParams;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getLatestStudentWork') {\n        var latestComponentState = this.getLatestStudentWork();\n        var message = {};\n        message.messageType = 'latestStudentWork';\n        message.latestStudentWork = latestComponentState;\n        this.sendMessageToApplication(message);\n      } else if (messageEventData.messageType === 'getParameters') {\n        var message = {};\n        message.messageType = 'parameters';\n        let parameters = {};\n        if (this.componentContent.parameters != null) {\n          parameters = this.UtilService.makeCopyOfJSONObject(this.componentContent.parameters);\n        }\n        parameters.nodeId = this.nodeId;\n        parameters.componentId = this.componentId;\n        message.parameters = parameters;\n        this.sendMessageToApplication(message);\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      var componentState = args.studentWork;\n      if (componentState != null) {\n        if (componentState.componentId === this.componentId) {\n          // set isDirty to false because the component state was just saved and notify node\n          this.isDirty = false;\n          this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n          this.$scope.embeddedController.componentState = null;\n\n          let isAutoSave = componentState.isAutoSave;\n          let isSubmit = componentState.isSubmit;\n          let serverSaveTime = componentState.serverSaveTime;\n          let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n          if (isSubmit) {\n            this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n            this.submit();\n            this.isSubmitDirty = false;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          } else if (isAutoSave) {\n            this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n          } else {\n            this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n          }\n\n          var message = {};\n          message.messageType = 'componentStateSaved';\n          message.componentState = componentState;\n          this.sendMessageToApplication(message);\n        }\n      }\n    });\n  }\n\n  iframeLoaded(contentLocation) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.addEventListener('message', this.messageEventListener);\n  }\n\n  /**\n   * Check if latest component state is a submission and if not, set isSubmitDirty to true\n   */\n  processLatestSubmit() {\n    let latestState = this.$scope.componentState;\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  setURL(url) {\n    if (url != null) {\n      this.url = this.$sce.trustAsResourceUrl(url);\n    }\n  };\n\n  submit() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @return the componentState after it has been populated\n   */\n  createComponentState(action) {\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (this.componentStateId != null) {\n      componentState.id = this.componentStateId;\n    }\n\n    if (this.isSubmit) {\n      componentState.isSubmit = this.isSubmit;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n    }\n\n    componentState.studentData = this.studentData;\n    componentState.componentType = 'Embedded';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  };\n\n  sendLatestWorkToApplication() {\n    let componentState = this.$scope.componentState;\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      componentState = this.handleConnectedComponents();\n    }\n    var message = {\n      messageType: 'componentState',\n      componentState: componentState\n    };\n\n    this.sendMessageToApplication(message);\n  };\n\n  sendMessageToApplication(message) {\n    window.document.getElementById(this.embeddedApplicationIFrameId).contentWindow.postMessage(message, '*');\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Snip the model by converting it to an image\n   * @param $event the click event\n   */\n  snipModel($event) {\n    var iframe = $('#' + this.embeddedApplicationIFrameId);\n    if (iframe != null && iframe.length > 0) {\n      var modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n          var img_b64 = canvas.toDataURL('image/png');\n          var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n          this.NotebookService.addNote($event, imageObject);\n        });\n      }\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  submit(submitTriggeredBy) {\n    this.isSubmit = true;\n    this.$scope.$emit('componentSubmitTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  getLatestStudentWork() {\n    return this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  /**\n   * Get the student work from the specified components/nodes\n   * @param params The params for getting the student work. The possible\n   * values to request are\n   * getLatestStudentWorkFromThisComponent\n   * getAllStudentWorkFromThisComponent\n   * getLatestStudentWorkFromThisNode\n   * getAllStudentWorkFromThisNode\n   * getLatestStudentWorkFromOtherComponents\n   * getAllStudentWorkFromOtherComponents\n   * If getLatestStudentWorkFromOtherComponents or getAllStudentWorkFromOtherComponents\n   * are requested, the otherComponents param must be provided. otherComponents\n   * should be an array of objects. The objects should contain a nodeId and\n   * componentId.\n   * @return an object containing other objects that contain work from the\n   * specified components/nodes\n   */\n  getStudentWork(params) {\n    var studentWork = {};\n\n    if (params != null && params.getLatestStudentWorkFromThisComponent) {\n      studentWork.latestStudentWorkFromThisComponent = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisComponent) {\n      studentWork.allStudentWorkFromThisComponent = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromThisNode) {\n      studentWork.latestStudentWorkFromThisNode = this.StudentDataService.getLatestComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getAllStudentWorkFromThisNode) {\n      studentWork.allStudentWorkFromThisNode = this.StudentDataService.getComponentStatesByNodeId(this.nodeId);\n    }\n\n    if (params != null && params.getLatestStudentWorkFromOtherComponents) {\n      // an array of objects that contain a nodeId and component Id\n      var otherComponents = params.otherComponents;\n      var latestStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentState != null) {\n                latestStudentWorkFromOtherComponents.push(tempComponentState);\n              }\n            }\n          }\n        }\n      }\n      studentWork.latestStudentWorkFromOtherComponents = latestStudentWorkFromOtherComponents;\n    }\n\n    if (params != null && params.getAllStudentWorkFromOtherComponents) {\n      var otherComponents = params.otherComponents;\n      var allStudentWorkFromOtherComponents = [];\n      if (otherComponents != null) {\n        for (var otherComponent of otherComponents) {\n          if (otherComponent != null) {\n            var tempNodeId = otherComponent.nodeId;\n            var tempComponentId = otherComponent.componentId;\n            if (tempNodeId != null && tempComponentId != null) {\n              var tempComponentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n              if (tempComponentStates != null && tempComponentStates.length > 0) {\n                allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents.concat(tempComponentStates);\n              }\n            }\n          }\n        }\n      }\n      studentWork.allStudentWorkFromOtherComponents = allStudentWorkFromOtherComponents;\n    }\n    return studentWork;\n  }\n\n  summernoteRubricHTMLChanged() {\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    this.authoringComponentContent.rubric = html;\n    this.authoringViewComponentChanged();\n  }\n\n  addConnectedComponent() {\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  deleteConnectedComponent(indexOfComponentToDelete) {\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(indexOfComponentToDelete, 1);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  setShowSubmitButtonValue(show) {\n    if (show == null || show == false) {\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  showSubmitButtonValueChanged() {\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the model file\n   */\n  chooseModelFile() {\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'modelFile';\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n    }\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null) {\n      mergedComponentState = this.NodeService.createNewComponentState();\n      mergedComponentState.studentData = {};\n    } else {\n      firstTime = false;\n    }\n    var connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      var componentStates = [];\n      for (var connectedComponent of connectedComponents) {\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n          var mergeFields = connectedComponent.mergeFields;\n          if (type == 'showWork') {\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            var connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (connectedComponentState != null) {\n              let fields = connectedComponent.fields;\n              mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n            }\n          }\n        }\n      }\n\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a new component state into a base component state.\n   * @param baseComponentState The component state we will be merging into.\n   * @param newComponentState The component state we will be merging from.\n   * @param mergeFields The fields to merge.\n   * @param firstTime Whether this is the first time the baseComponentState is\n   * being merged into.\n   */\n  mergeComponentState(baseComponentState, newComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (newComponentState.componentType == 'Embedded') {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(newComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = newComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n    this.studentData = componentState.studentData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentData(studentData) {\n    this.studentData = studentData;\n  };\n\n  authoringAddConnectedComponent() {\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'))) {\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n    var connectedComponentType = null;\n    if (connectedComponent != null) {\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        connectedComponentType = component.type;\n      }\n    }\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n    if (componentType != null) {\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n      for (let allowedConnectedComponentType of allowedConnectedComponentTypes) {\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nEmbeddedController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$sce',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'EmbeddedService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedController;\n"]}