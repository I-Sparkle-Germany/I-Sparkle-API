{"version":3,"sources":["embeddedService.es6"],"names":["EmbeddedService","$filter","UtilService","$translate","component","id","generateKey","type","url","showSaveButton","showSubmitButton","componentToCopy","createComponent","componentStates","componentEvents","nodeEvents","result","isCompletedFieldInComponentState","c","length","componentState","studentData","isCompleted","e","event","componentContent","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,e;;;AACJ,2BAAYC,OAAZ,EAAqBC,WAArB,EAAkC;AAAA;;AAAA;;AAEhC,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAKC,UAAL,GAAkB,MAAKF,OAAL,CAAa,WAAb,CAAlB;AAJgC;AAKjC;;AAED;;;;;;;;;4CAKwB;AACtB,aAAO,KAAKE,UAAL,CAAgB,6BAAhB,CAAP;AACD;;AAED;;;;;;;sCAIkB;AAChB,UAAIC,YAAY,EAAhB;AACAA,gBAAUC,EAAV,GAAe,KAAKH,WAAL,CAAiBI,WAAjB,EAAf;AACAF,gBAAUG,IAAV,GAAiB,UAAjB;AACAH,gBAAUI,GAAV,GAAgB,EAAhB;AACAJ,gBAAUK,cAAV,GAA2B,KAA3B;AACAL,gBAAUM,gBAAV,GAA6B,KAA7B;AACA,aAAON,SAAP;AACD;;AAED;;;;;;;kCAIcO,e,EAAiB;AAC7B,UAAIP,YAAY,KAAKQ,eAAL,EAAhB;AACAR,gBAAUI,GAAV,GAAgBG,gBAAgBH,GAAhC;AACAJ,gBAAUK,cAAV,GAA2BE,gBAAgBF,cAA3C;AACAL,gBAAUM,gBAAV,GAA6BC,gBAAgBD,gBAA7C;AACA,aAAON,SAAP;AACD;;AAED;;;;;;;;;;;gCAQYA,S,EAAWS,e,EAAiBC,e,EAAiBC,U,EAAY;AACnE,UAAIC,SAAS,KAAb;AACA,UAAIC,mCAAmC,KAAvC;AACA,UAAIJ,mBAAmB,IAAvB,EAA6B;AAC3B,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIL,gBAAgBM,MAApC,EAA4CD,GAA5C,EAAiD;AAC/C,cAAIE,iBAAiBP,gBAAgBK,CAAhB,CAArB;AACA,cAAIE,kBAAkB,IAAtB,EAA4B;AAC1B,gBAAIC,cAAcD,eAAeC,WAAjC;AACA,gBAAIA,eAAe,IAAnB,EAAyB;AACvB,kBAAIA,YAAYC,WAAZ,IAA2B,IAA/B,EAAqC;AACnC;;;;AAIAL,mDAAmC,IAAnC;;AAEA,oBAAII,YAAYC,WAAZ,KAA4B,IAAhC,EAAsC;AACpC;;;;AAIA,yBAAO,IAAP;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,UAAIL,oCAAoC,KAAxC,EAA+C;AAC7C;;;;;AAKA,YAAIF,cAAc,IAAlB,EAAwB;AACtB,eAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIR,WAAWI,MAA/B,EAAuCI,GAAvC,EAA4C;AAC1C,gBAAIC,QAAQT,WAAWQ,CAAX,CAAZ;AACA,gBAAIC,SAAS,IAAT,IAAiBA,MAAMA,KAAN,KAAgB,aAArC,EAAoD;AAClDR,uBAAS,IAAT;AACA;AACD;AACF;AACF;AACF;AACD,aAAOA,MAAP;AACD;;;;;AAED;;;;;;;qCAOiBZ,S,EAAW;AAC1B,aAAO,KAAP;AACD;;AAED;;;;;;;8CAI0B;AACxB,aAAO,IAAP;AACD;;AAED;;;;;;;gDAI4B;AAC1B,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;;iDAS6BgB,c,EAAgBK,gB,EAAkB;AAC7D,UAAIL,kBAAkB,IAAtB,EAA4B;AAC1B,YAAIC,cAAcD,eAAeC,WAAjC;AACA,YAAIA,eAAe,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;;;;AAGHrB,gBAAgB0B,OAAhB,GAA0B,CACxB,SADwB,EAExB,aAFwB,CAA1B;;kBAKe1B,e","file":"embeddedService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass EmbeddedService extends NodeService {\n  constructor($filter, UtilService) {\n    super();\n    this.$filter = $filter;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Embedded\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('embedded.componentTypeLabel');\n  }\n\n  /**\n   * Create an Embedded component object\n   * @returns a new Embedded component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'Embedded';\n    component.url = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    return component;\n  }\n\n  /**\n   * Copies an existing Embedded component object\n   * @returns a copied Embedded component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.url = componentToCopy.url;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    return component;\n  }\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents) {\n    var result = false;\n    var isCompletedFieldInComponentState = false;\n    if (componentStates != null) {\n      for (var c = 0; c < componentStates.length; c++) {\n        var componentState = componentStates[c];\n        if (componentState != null) {\n          var studentData = componentState.studentData;\n          if (studentData != null) {\n            if (studentData.isCompleted != null) {\n              /*\n               * the model has set the isCompleted field in the\n               * student data\n               */\n              isCompletedFieldInComponentState = true;\n\n              if (studentData.isCompleted === true) {\n                /*\n                 * the model has set the isCompleted field to true\n                 * which means the student has completed the component\n                 */\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (isCompletedFieldInComponentState == false) {\n      /*\n       * the isCompleted field was not set into the component state so\n       * we will look for events to determine isCompleted\n       */\n\n      if (nodeEvents != null) {\n        for (var e = 0; e < nodeEvents.length; e++) {\n          var event = nodeEvents[e];\n          if (event != null && event.event === 'nodeEntered') {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return false;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nEmbeddedService.$inject = [\n  '$filter',\n  'UtilService'\n];\n\nexport default EmbeddedService;\n"]}