{"version":3,"sources":["embeddedService.es6"],"names":["EmbeddedService","UtilService","component","id","generateKey","type","url","showSaveButton","showSubmitButton","componentToCopy","createComponent","componentStates","componentEvents","nodeEvents","result","isCompletedFieldInComponentState","c","length","componentState","studentData","isCompleted","e","event","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,e;;;AACF,6BAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAErB,cAAKA,WAAL,GAAmBA,WAAnB;AAFqB;AAGxB;;AAED;;;;;;;;0CAIkB;AACd,gBAAIC,YAAY,EAAhB;AACAA,sBAAUC,EAAV,GAAe,KAAKF,WAAL,CAAiBG,WAAjB,EAAf;AACAF,sBAAUG,IAAV,GAAiB,UAAjB;AACAH,sBAAUI,GAAV,GAAgB,EAAhB;AACAJ,sBAAUK,cAAV,GAA2B,KAA3B;AACAL,sBAAUM,gBAAV,GAA6B,KAA7B;AACA,mBAAON,SAAP;AACH;;AAED;;;;;;;sCAIcO,e,EAAiB;AAC3B,gBAAIP,YAAY,KAAKQ,eAAL,EAAhB;AACAR,sBAAUI,GAAV,GAAgBG,gBAAgBH,GAAhC;AACAJ,sBAAUK,cAAV,GAA2BE,gBAAgBF,cAA3C;AACAL,sBAAUM,gBAAV,GAA6BC,gBAAgBD,gBAA7C;AACA,mBAAON,SAAP;AACH;;AAED;;;;;;;;;;;oCAQYA,S,EAAWS,e,EAAiBC,e,EAAiBC,U,EAAY;AACjE,gBAAIC,SAAS,KAAb;;AAEA,gBAAIC,mCAAmC,KAAvC;;AAEA,gBAAIJ,mBAAmB,IAAvB,EAA6B;;AAEzB;;;;AAIA,qBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIL,gBAAgBM,MAApC,EAA4CD,GAA5C,EAAiD;;AAE7C;AACA,wBAAIE,iBAAiBP,gBAAgBK,CAAhB,CAArB;;AAEA,wBAAIE,kBAAkB,IAAtB,EAA4B;AACxB;AACA,4BAAIC,cAAcD,eAAeC,WAAjC;;AAEA,4BAAIA,eAAe,IAAnB,EAAyB;;AAErB,gCAAIA,YAAYC,WAAZ,IAA2B,IAA/B,EAAqC;AACjC;;;;AAIAL,mEAAmC,IAAnC;;AAEA,oCAAII,YAAYC,WAAZ,KAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,2CAAO,IAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,gBAAIL,oCAAoC,KAAxC,EAA+C;AAC3C;;;;;AAKA,oBAAIF,cAAc,IAAlB,EAAwB;;AAEpB;AACA,yBAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIR,WAAWI,MAA/B,EAAuCI,GAAvC,EAA4C;;AAExC;AACA,4BAAIC,QAAQT,WAAWQ,CAAX,CAAZ;;AAEA,4BAAIC,SAAS,IAAT,IAAiBA,MAAMA,KAAN,KAAgB,aAArC,EAAoD;AAChDR,qCAAS,IAAT;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;;;;yCAOiBZ,S,EAAW;AACxB,mBAAO,IAAP;AACH;;AAED;;;;;;;kDAI0B;AACtB,mBAAO,IAAP;AACH;;AAED;;;;;;;oDAI4B;AACxB,mBAAO,IAAP;AACH;;;;;;AAGLF,gBAAgBuB,OAAhB,GAA0B,CACtB,aADsB,CAA1B;;kBAIevB,e","file":"embeddedService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass EmbeddedService extends NodeService {\n    constructor(UtilService) {\n        super();\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create an Embedded component object\n     * @returns a new Embedded component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Embedded';\n        component.url = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        return component;\n    }\n\n    /**\n     * Copies an existing Embedded component object\n     * @returns a copied Embedded component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.url = componentToCopy.url;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        return component;\n    }\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        var isCompletedFieldInComponentState = false;\n\n        if (componentStates != null) {\n\n            /*\n             * loop through all the component states and look for a component\n             * that has the isCompleted field set to true\n             */\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // get a component state\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    // get the student data from the model\n                    var studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        if (studentData.isCompleted != null) {\n                            /*\n                             * the model has set the isCompleted field in the\n                             * student data\n                             */\n                            isCompletedFieldInComponentState = true;\n\n                            if (studentData.isCompleted === true) {\n                                /*\n                                 * the model has set the isCompleted field to true\n                                 * which means the student has completed the component\n                                 */\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (isCompletedFieldInComponentState == false) {\n            /*\n             * the isCompleted field was not set into the component state so\n             * we will look for events to determine isCompleted\n             */\n\n            if (nodeEvents != null) {\n\n                // loop through all the events\n                for (var e = 0; e < nodeEvents.length; e++) {\n\n                    // get an event\n                    var event = nodeEvents[e];\n\n                    if (event != null && event.event === 'nodeEntered') {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n}\n\nEmbeddedService.$inject = [\n    'UtilService'\n];\n\nexport default EmbeddedService;\n"]}