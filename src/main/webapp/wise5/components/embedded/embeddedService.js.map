{"version":3,"sources":["embeddedService.es6"],"names":["EmbeddedService","UtilService","component","id","generateKey","type","url","showSaveButton","showSubmitButton","componentToCopy","createComponent","componentStates","componentEvents","nodeEvents","result","isCompletedFieldInComponentState","c","length","componentState","studentData","isCompleted","e","event","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,e;;;AACF,6BAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAErB,cAAKA,WAAL,GAAmBA,WAAnB;AAFqB;AAGxB;;AAED;;;;;;;;0CAIkB;AACd,gBAAIC,YAAY,EAAhB;AACAA,sBAAUC,EAAV,GAAe,KAAKF,WAAL,CAAiBG,WAAjB,EAAf;AACAF,sBAAUG,IAAV,GAAiB,UAAjB;AACAH,sBAAUI,GAAV,GAAgB,EAAhB;AACAJ,sBAAUK,cAAV,GAA2B,KAA3B;AACAL,sBAAUM,gBAAV,GAA6B,KAA7B;AACA,mBAAON,SAAP;AACH;;AAED;;;;;;;sCAIcO,e,EAAiB;AAC3B,gBAAIP,YAAY,KAAKQ,eAAL,EAAhB;AACAR,sBAAUI,GAAV,GAAgBG,gBAAgBH,GAAhC;AACAJ,sBAAUK,cAAV,GAA2BE,gBAAgBF,cAA3C;AACAL,sBAAUM,gBAAV,GAA6BC,gBAAgBD,gBAA7C;AACA,mBAAON,SAAP;AACH;;AAED;;;;;;;;;;;oCAQYA,S,EAAWS,e,EAAiBC,e,EAAiBC,U,EAAY;AACjE,gBAAIC,SAAS,KAAb;;AAEA,gBAAIC,mCAAmC,KAAvC;;AAEA,gBAAIJ,mBAAmB,IAAvB,EAA6B;;AAEzB;;;;AAIA,qBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIL,gBAAgBM,MAApC,EAA4CD,GAA5C,EAAiD;;AAE7C;AACA,wBAAIE,iBAAiBP,gBAAgBK,CAAhB,CAArB;;AAEA,wBAAIE,kBAAkB,IAAtB,EAA4B;AACxB;AACA,4BAAIC,cAAcD,eAAeC,WAAjC;;AAEA,4BAAIA,eAAe,IAAnB,EAAyB;;AAErB,gCAAIA,YAAYC,WAAZ,IAA2B,IAA/B,EAAqC;AACjC;;;;AAIAL,mEAAmC,IAAnC;;AAEA,oCAAII,YAAYC,WAAZ,KAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,2CAAO,IAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,gBAAIL,oCAAoC,KAAxC,EAA+C;AAC3C;;;;;AAKA,oBAAIF,cAAc,IAAlB,EAAwB;;AAEpB;AACA,yBAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIR,WAAWI,MAA/B,EAAuCI,GAAvC,EAA4C;;AAExC;AACA,4BAAIC,QAAQT,WAAWQ,CAAX,CAAZ;;AAEA,4BAAIC,SAAS,IAAT,IAAiBA,MAAMA,KAAN,KAAgB,aAArC,EAAoD;AAChDR,qCAAS,IAAT;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;;;;yCAOiBZ,S,EAAW;AACxB,mBAAO,KAAP;AACH;;AAED;;;;;;;kDAI0B;AACtB,mBAAO,IAAP;AACH;;AAED;;;;;;;oDAI4B;AACxB,mBAAO,IAAP;AACH;;;;;;AAGLF,gBAAgBuB,OAAhB,GAA0B,CACtB,aADsB,CAA1B;;kBAIevB,e","file":"embeddedService.js","sourcesContent":["import NodeService from '../../services/nodeService';\r\n\r\nclass EmbeddedService extends NodeService {\r\n    constructor(UtilService) {\r\n        super();\r\n        this.UtilService = UtilService;\r\n    }\r\n\r\n    /**\r\n     * Create an Embedded component object\r\n     * @returns a new Embedded component object\r\n     */\r\n    createComponent() {\r\n        var component = {};\r\n        component.id = this.UtilService.generateKey();\r\n        component.type = 'Embedded';\r\n        component.url = '';\r\n        component.showSaveButton = false;\r\n        component.showSubmitButton = false;\r\n        return component;\r\n    }\r\n\r\n    /**\r\n     * Copies an existing Embedded component object\r\n     * @returns a copied Embedded component object\r\n     */\r\n    copyComponent(componentToCopy) {\r\n        var component = this.createComponent();\r\n        component.url = componentToCopy.url;\r\n        component.showSaveButton = componentToCopy.showSaveButton;\r\n        component.showSubmitButton = componentToCopy.showSubmitButton;\r\n        return component;\r\n    }\r\n\r\n    /**\r\n     * Check if the component was completed\r\n     * @param component the component object\r\n     * @param componentStates the component states for the specific component\r\n     * @param componentEvents the events for the specific component\r\n     * @param nodeEvents the events for the parent node of the component\r\n     * @returns whether the component was completed\r\n     */\r\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\r\n        var result = false;\r\n\r\n        var isCompletedFieldInComponentState = false;\r\n\r\n        if (componentStates != null) {\r\n\r\n            /*\r\n             * loop through all the component states and look for a component\r\n             * that has the isCompleted field set to true\r\n             */\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n\r\n                // get a component state\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n                    // get the student data from the model\r\n                    var studentData = componentState.studentData;\r\n\r\n                    if (studentData != null) {\r\n\r\n                        if (studentData.isCompleted != null) {\r\n                            /*\r\n                             * the model has set the isCompleted field in the\r\n                             * student data\r\n                             */\r\n                            isCompletedFieldInComponentState = true;\r\n\r\n                            if (studentData.isCompleted === true) {\r\n                                /*\r\n                                 * the model has set the isCompleted field to true\r\n                                 * which means the student has completed the component\r\n                                 */\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isCompletedFieldInComponentState == false) {\r\n            /*\r\n             * the isCompleted field was not set into the component state so\r\n             * we will look for events to determine isCompleted\r\n             */\r\n\r\n            if (nodeEvents != null) {\r\n\r\n                // loop through all the events\r\n                for (var e = 0; e < nodeEvents.length; e++) {\r\n\r\n                    // get an event\r\n                    var event = nodeEvents[e];\r\n\r\n                    if (event != null && event.event === 'nodeEntered') {\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Whether this component generates student work\r\n     * @param component (optional) the component object. if the component object\r\n     * is not provided, we will use the default value of whether the\r\n     * component type usually has work.\r\n     * @return whether this component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Whether this component uses a save button\r\n     * @return whether this component uses a save button\r\n     */\r\n    componentUsesSaveButton() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Whether this component uses a submit button\r\n     * @return whether this component uses a submit button\r\n     */\r\n    componentUsesSubmitButton() {\r\n        return true;\r\n    }\r\n}\r\n\r\nEmbeddedService.$inject = [\r\n    'UtilService'\r\n];\r\n\r\nexport default EmbeddedService;\r\n"]}