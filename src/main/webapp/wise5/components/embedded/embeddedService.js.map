{"version":3,"sources":["embeddedService.es6"],"names":["EmbeddedService","$filter","$q","StudentAssetService","StudentDataService","UtilService","$translate","component","type","url","componentStates","componentEvents","nodeEvents","result","isCompletedFieldInComponentState","componentState","studentData","isCompleted","event","componentContent","deferred","defer","iframe","$","componentId","length","modelElement","contents","find","then","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","asset","resolve","promise","$inject"],"mappings":"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","file":"embeddedService.js","sourcesContent":["import ComponentService from '../componentService';\nimport html2canvas from 'html2canvas';\n\nclass EmbeddedService extends ComponentService {\n  constructor(\n      $filter,\n      $q,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$q = $q;\n    this.StudentAssetService = StudentAssetService;\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('embedded.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Embedded';\n    component.url = '';\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents) {\n    var result = false;\n    var isCompletedFieldInComponentState = false;\n    if (componentStates != null) {\n      for (var componentState of componentStates) {\n        if (componentState != null) {\n          var studentData = componentState.studentData;\n          if (studentData != null) {\n            if (studentData.isCompleted != null) {\n              /*\n               * the model has set the isCompleted field in the\n               * student data\n               */\n              isCompletedFieldInComponentState = true;\n\n              if (studentData.isCompleted === true) {\n                /*\n                 * the model has set the isCompleted field to true\n                 * which means the student has completed the component\n                 */\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (isCompletedFieldInComponentState == false) {\n      /*\n       * the isCompleted field was not set into the component state so\n       * we will look for events to determine isCompleted\n       */\n\n      if (nodeEvents != null) {\n        for (var event of nodeEvents) {\n          if (event != null && event.event === 'nodeEntered') {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n  componentHasWork(component) {\n    return false;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    let deferred = this.$q.defer();\n    let iframe = $('#componentApp_' + componentState.componentId);\n    if (iframe != null && iframe.length > 0) {\n      let modelElement = iframe.contents().find('html');\n      if (modelElement != null && modelElement.length > 0) {\n        modelElement = modelElement[0];\n        // convert the model element to a canvas element\n        html2canvas(modelElement).then((canvas) => {\n          let img_b64 = canvas.toDataURL('image/png');\n          let imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n          // add the image to the student assets\n          this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n            deferred.resolve(asset);\n          });\n        });\n      }\n    }\n    return deferred.promise;\n  }\n}\n\nEmbeddedService.$inject = [\n  '$filter',\n  '$q',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default EmbeddedService;\n"]}