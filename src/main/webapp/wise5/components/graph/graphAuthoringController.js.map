{"version":3,"sources":["graphAuthoringController.es6"],"names":["GraphAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","availableGraphTypes","value","text","$translate","availableRoundingOptions","availableSymbols","availableLineTypes","availableXAxisTypes","allowedConnectedComponentTypes","type","isResetSeriesButtonVisible","isSelectSeriesVisible","backgroundImage","componentContent","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","series","xAxis","yAxis","submitCounter","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","graphType","legendEnabled","hideLegend","showTrialSelect","hideTrialSelect","setSeries","makeCopyOfJSONObject","setDefaultActiveSeries","trials","newTrial","clearPlotLines","setupGraph","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","newSeries","createNewSeries","push","index","confirmMessage","seriesName","name","answer","confirm","splice","enableTrials","canCreateNewTrials","canDeleteTrials","hideAllTrialsOnNewTrial","params","isPopup","$broadcast","categories","categoryName","data","dataPoint","length","min","max","authoringConvertAllSeriesDataPoints","units","s","tempSeries","marker","symbol","xAxisType","convertSeriesDataPoints","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponents","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","authoringSetImportWorkAsBackgroundIfApplicable","seriesNumbers","seriesNumberIndex","connectedComponentType","authoringGetConnectedComponentType","skipFirstRow","xColumn","yColumn","showClassmateWorkSource","showClassmateWork","componentType","importWorkAsBackground","$inject"],"mappings":"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","file":"graphAuthoringController.js","sourcesContent":["'use strict';\n\nimport GraphController from \"./graphController\";\nimport html2canvas from 'html2canvas';\n\nclass GraphAuthoringController extends GraphController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConfigService,\n              GraphService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the available graph types\n    this.availableGraphTypes = [\n      {\n        value: 'line',\n        text: this.$translate('graph.linePlot')\n      },\n      {\n        value: 'column',\n        text: this.$translate('graph.columnPlot')\n      },\n      {\n        value: 'scatter',\n        text: this.$translate('graph.scatterPlot')\n      }\n    ];\n\n    // the options for rounding data point values\n    this.availableRoundingOptions = [\n      {\n        value: null,\n        text: this.$translate('graph.noRounding')\n      },\n      {\n        value: 'integer',\n        text: this.$translate('graph.roundToInteger')\n      },\n      {\n        value: 'tenth',\n        text: this.$translate('graph.roundToTenth')\n      },\n      {\n        value: 'hundredth',\n        text: this.$translate('graph.roundToHundredth')\n      }\n    ];\n\n    // the options for data point symbols\n    this.availableSymbols = [\n      {\n        value: 'circle',\n        text: this.$translate('graph.circle')\n      },\n      {\n        value: 'square',\n        text: this.$translate('graph.square')\n      },\n      {\n        value: 'triangle',\n        text: this.$translate('graph.triangle')\n      },\n      {\n        value: 'triangle-down',\n        text: this.$translate('graph.triangleDown')\n      },\n      {\n        value: 'diamond',\n        text: this.$translate('graph.diamond')\n      }\n    ];\n\n    // the options for line types\n    this.availableLineTypes = [\n      {\n        value: 'Solid',\n        text: this.$translate('graph.solid')\n      },\n      {\n        value: 'Dash',\n        text: this.$translate('graph.dash')\n      },\n      {\n        value: 'Dot',\n        text: this.$translate('graph.dot')\n      },\n      {\n        value: 'ShortDash',\n        text: this.$translate('graph.shortDash')\n      },\n      {\n        value: 'ShortDot',\n        text: this.$translate('graph.shortDot')\n      }\n    ];\n\n    // the options for the x axis types\n    this.availableXAxisTypes = [\n      {\n        value: 'limits',\n        text: 'Limits'\n      },\n      {\n        value: 'categories',\n        text: 'Categories'\n      }\n    ]\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'Animation' },\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.isResetSeriesButtonVisible = true;\n    this.isSelectSeriesVisible = true;\n\n    this.backgroundImage = this.componentContent.backgroundImage;\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.series = null;\n      this.xAxis = null;\n      this.yAxis = null;\n      this.submitCounter = 0;\n      this.backgroundImage = this.componentContent.backgroundImage;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.graphType = this.componentContent.graphType;\n      this.isResetSeriesButtonVisible = true;\n      this.isSelectSeriesVisible = true;\n      this.legendEnabled = !this.componentContent.hideLegend;\n      this.showTrialSelect = !this.componentContent.hideTrialSelect;\n      this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n      this.setDefaultActiveSeries();\n      this.trials = [];\n      this.newTrial();\n      this.clearPlotLines();\n      this.setupGraph();\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * Add a series in the authoring view\n   */\n  authoringAddSeriesClicked() {\n\n    // create a new series\n    var newSeries = this.createNewSeries();\n\n    // add the new series\n    this.authoringComponentContent.series.push(newSeries);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a series in the authoring view\n   * @param the index of the series in the series array\n   */\n  authoringDeleteSeriesClicked(index) {\n\n    var confirmMessage = '';\n    var seriesName = '';\n\n    if (this.authoringComponentContent.series != null) {\n\n      // get the series\n      var series = this.authoringComponentContent.series[index];\n\n      if (series != null && series.name != null) {\n\n        // get the series name\n        seriesName = series.name;\n      }\n    }\n\n    if (seriesName == null || seriesName == '') {\n      // the series does not have a name\n      confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheSeries');\n    } else {\n      // the series has a name\n      confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheNamedSeries', { seriesName: seriesName });\n    }\n\n    // ask the author if they are sure they want to delete the series\n    var answer = confirm(confirmMessage);\n\n    if (answer) {\n      // remove the series from the series array\n      this.authoringComponentContent.series.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  };\n\n  /**\n   * The \"Enable Trials\" checkbox was clicked\n   */\n  authoringViewEnableTrialsClicked() {\n\n    if (this.authoringComponentContent.enableTrials) {\n      // trials are now enabled\n      this.authoringComponentContent.canCreateNewTrials = true;\n      this.authoringComponentContent.canDeleteTrials = true;\n    } else {\n      // trials are now disabled\n      this.authoringComponentContent.canCreateNewTrials = false;\n      this.authoringComponentContent.canDeleteTrials = false;\n      this.authoringComponentContent.hideAllTrialsOnNewTrial = true;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add an x axis category\n   */\n  authoringAddXAxisCategory() {\n\n    // add an empty string as a new category\n    this.authoringComponentContent.xAxis.categories.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete an x axis category\n   * @param index the index of the category to delete\n   */\n  authoringDeleteXAxisCategory(index) {\n\n    if (index != null) {\n\n      var confirmMessage = '';\n\n      var categoryName = '';\n\n      if (this.authoringComponentContent.xAxis != null &&\n        this.authoringComponentContent.xAxis.categories != null) {\n\n        // get the category name\n        categoryName = this.authoringComponentContent.xAxis.categories[index];\n      }\n\n      if (categoryName == null || categoryName == '') {\n        // there category does not have a name\n        confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheCategory');\n      } else {\n        // the category has a name\n        confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheNamedCategory', { categoryName: categoryName });\n      }\n\n      // ask the author if they are sure they want to delete the category\n      var answer = confirm(confirmMessage);\n\n      if (answer) {\n        // remove the category at the given index\n        this.authoringComponentContent.xAxis.categories.splice(index, 1);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Add an empty data point to the series\n   * @param series the series to add the empty data point to\n   */\n  authoringAddSeriesDataPoint(series) {\n\n    if (series != null && series.data != null) {\n\n      if (this.authoringComponentContent.xAxis.type == null ||\n        this.authoringComponentContent.xAxis.type === 'limits') {\n        // add an empty data point to the series\n        series.data.push([]);\n      } else if (this.authoringComponentContent.xAxis.type === 'categories') {\n        // add an empty data point to the series\n        series.data.push(null);\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a data point from a series\n   * @param series the series to delete a data point from\n   * @param index the index of the data point to delete\n   */\n  authoringDeleteSeriesDataPoint(series, index) {\n\n    if (series != null && series.data != null) {\n\n      // ask the author if they are sure they want to delete the point\n      var answer = confirm(this.$translate('graph.areYouSureYouWantToDeleteTheDataPoint'));\n\n      if (answer) {\n        // delete the data point at the given index\n        series.data.splice(index, 1);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a data point up\n   * @param series the series the data point belongs to\n   * @param index the index of the data point in the series\n   */\n  authoringMoveSeriesDataPointUp(series, index) {\n    if (series != null && series.data != null) {\n\n      if (index > 0) {\n        // the data point is not at the top so we can move it up\n\n        // remember the data point we are moving\n        var dataPoint = series.data[index];\n\n        // remove the data point at the given index\n        series.data.splice(index, 1);\n\n        // insert the data point back in at one index back\n        series.data.splice(index - 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a data point down\n   * @param series the series the data point belongs to\n   * @param index the index of the data point in the series\n   */\n  authoringMoveSeriesDataPointDown(series, index) {\n    if (series != null && series.data != null) {\n\n      if (index < series.data.length - 1) {\n        // the data point is not at the bottom so we can move it down\n\n        // remember the data point we are moving\n        var dataPoint = series.data[index];\n\n        // remove the data point at the given index\n        series.data.splice(index, 1);\n\n        // insert the data point back in at one index back\n        series.data.splice(index + 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The graph type changed so we will handle updating the series data points\n   * @param newValue the new value of the graph type\n   * @param oldValue the old value of the graph type\n   */\n  authoringViewGraphTypeChanged(newValue, oldValue) {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the x axis type\n   * @param newValue the new x axis type\n   * @param oldValue the old x axis type\n   */\n  authoringViewXAxisTypeChanged(newValue, oldValue) {\n    // ask the author if they are sure they want to change the x axis type\n    let answer = confirm(this.$translate('graph.areYouSureYouWantToChangeTheXAxisType'));\n\n    if (answer) {\n      // the author answered yes to change the type\n      if (newValue === 'limits') {\n        if (oldValue === 'categories') {\n          // the graph type is changing from categories to limits\n          delete this.authoringComponentContent.xAxis.categories;\n          this.authoringComponentContent.xAxis.min = 0;\n          this.authoringComponentContent.xAxis.max = 10;\n          this.authoringConvertAllSeriesDataPoints(newValue);\n        }\n      } else if (newValue === 'categories') {\n        if (oldValue === 'limits' || oldValue === '' || oldValue == null) {\n          // the graph type is changing from limits to categories\n          delete this.authoringComponentContent.xAxis.min;\n          delete this.authoringComponentContent.xAxis.max;\n          delete this.authoringComponentContent.xAxis.units;\n          delete this.authoringComponentContent.yAxis.units;\n          this.authoringComponentContent.xAxis.categories = [];\n          this.authoringConvertAllSeriesDataPoints(newValue);\n        }\n      }\n    } else {\n      // the author answered no so we will not change the type\n      // revert the x axis type\n      this.authoringComponentContent.xAxis.type = oldValue;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add symbols to all the series\n   */\n  authoringAddSymbolsToSeries() {\n\n    // get all the series\n    var series = this.authoringComponentContent.series;\n\n    if (series != null) {\n\n      // loop through all the series\n      for (var s = 0; s < series.length; s++) {\n\n        // get a series\n        var tempSeries = series[s];\n\n        if (tempSeries != null) {\n          // set the symbol to circle\n          tempSeries.marker = {};\n          tempSeries.marker.symbol = 'circle';\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert the data points in all the series\n   * @param graphType the x axis type to convert the data points to\n   */\n  authoringConvertAllSeriesDataPoints(xAxisType) {\n\n    // get all the series\n    var series = this.authoringComponentContent.series;\n\n    if (series != null) {\n\n      // loop through all the series\n      for (var s = 0; s < series.length; s++) {\n\n        // get a series\n        var tempSeries = series[s];\n\n        // convert the data points in the series\n        this.convertSeriesDataPoints(tempSeries, xAxisType);\n      }\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    if (this.authoringComponentContent.connectedComponents.length > 1) {\n      /*\n       * there is more than one connected component so we will enable\n       * trials so that each connected component can put work in a\n       * different trial\n       */\n      this.authoringComponentContent.enableTrials = true;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a connected component series number\n   * @param connectedComponent the connected component object\n   */\n  authoringAddConnectedComponentSeriesNumber(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // add an empty value into the series numbers\n      connectedComponent.seriesNumbers.push(null);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a connected component series number\n   * @param connectedComponent the connected component object\n   * @param seriesNumberIndex the series number index to delete\n   */\n  authoringDeleteConnectedComponentSeriesNumber(connectedComponent, seriesNumberIndex) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // remove the element at the given index\n      connectedComponent.seriesNumbers.splice(seriesNumberIndex, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed a series number\n   * @param connectedComponent the connected component object\n   * @param seriesNumberIndex the series number index to update\n   * @param value the new series number value\n   */\n  authoringConnectedComponentSeriesNumberChanged(connectedComponent, seriesNumberIndex, value) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // make sure the index is in the range of acceptable indexes\n      if (seriesNumberIndex < connectedComponent.seriesNumbers.length) {\n\n        // update the series number at the given index\n        connectedComponent.seriesNumbers[seriesNumberIndex] = value;\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // get the new component type\n      var connectedComponentType = this.authoringGetConnectedComponentType(connectedComponent);\n\n      if (connectedComponentType != 'Embedded') {\n        /*\n         * the component type is not Embedded so we will remove the\n         * seriesNumbers field\n         */\n        delete connectedComponent.seriesNumbers;\n      }\n\n      if (connectedComponentType != 'Table') {\n        /*\n         * the component type is not Table so we will remove the\n         * skipFirstRow, xColumn, and yColumn fields\n         */\n        delete connectedComponent.skipFirstRow;\n        delete connectedComponent.xColumn;\n        delete connectedComponent.yColumn;\n      }\n\n      if (connectedComponentType != 'Graph') {\n        /*\n         * the component type is not Graph so we will remove the\n         * show classmate work fields\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      }\n\n      if (connectedComponentType == 'Table') {\n        // set default values for the connected component params\n        connectedComponent.skipFirstRow = true;\n        connectedComponent.xColumn = 0;\n        connectedComponent.yColumn = 1;\n      }\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The showClassmateWork value has changed in a connected component\n   * @param connectedComponent the connected component that changed\n   */\n  connectedComponentShowClassmateWorkChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.showClassmateWork) {\n        /*\n         * show classmate work was enabled so we will default the\n         * show classmate work source to period\n         */\n        connectedComponent.showClassmateWorkSource = 'period';\n      } else {\n        /*\n         * the show classmate work was disabled so we will remove\n         * the show classmate work fields\n         */\n        delete connectedComponent.showClassmateWork;\n        delete connectedComponent.showClassmateWorkSource;\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n      componentType == 'Draw' ||\n      componentType == 'Label') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      } else if (connectedComponent.type == 'showClassmateWork') {\n        /*\n         * the type has changed to show classmate work so we will enable\n         * trials so that each classmate work will show up in a\n         * different trial\n         */\n        this.authoringComponentContent.enableTrials = true;\n\n        if (connectedComponent.showClassmateWorkSource == null) {\n          connectedComponent.showClassmateWorkSource = 'period';\n        }\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n}\n\n\nGraphAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphAuthoringController;\n"]}