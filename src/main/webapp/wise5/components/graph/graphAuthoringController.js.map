{"version":3,"sources":["graphAuthoringController.es6"],"names":["GraphAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","availableGraphTypes","value","text","$translate","availableRoundingOptions","availableSymbols","availableLineTypes","availableXAxisTypes","connectedComponentUpdateOnOptions","allowedConnectedComponentTypes","type","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","isResetSeriesButtonVisible","isSelectSeriesVisible","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","backgroundImage","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","series","xAxis","yAxis","submitCounter","graphType","legendEnabled","hideLegend","showTrialSelect","hideTrialSelect","setSeries","makeCopyOfJSONObject","setDefaultActiveSeries","trials","newTrial","clearPlotLines","setupGraph","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","newSeries","createNewSeries","push","index","confirmMessage","seriesName","name","answer","confirm","splice","enableTrials","canCreateNewTrials","canDeleteTrials","hideAllTrialsOnNewTrial","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","categories","categoryName","data","dataPoint","length","min","max","authoringConvertAllSeriesDataPoints","units","s","tempSeries","marker","symbol","xAxisType","convertSeriesDataPoints","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponents","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","authoringSetImportWorkAsBackgroundIfApplicable","show","$emit","setShowSubmitButtonValue","seriesNumbers","seriesNumberIndex","connectedComponentType","getComponentByNodeIdAndComponentId","importWorkAsBackground","authoringGetConnectedComponentType","skipFirstRow","xColumn","yColumn","showClassmateWorkSource","showClassmateWork","componentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"graphAuthoringController.js","sourcesContent":["'use strict';\n\nimport GraphController from \"./graphController\";\nimport html2canvas from 'html2canvas';\n\nclass GraphAuthoringController extends GraphController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              AnnotationService,\n              ConfigService,\n              GraphService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the available graph types\n    this.availableGraphTypes = [\n      {\n        value: 'line',\n        text: this.$translate('graph.linePlot')\n      },\n      {\n        value: 'column',\n        text: this.$translate('graph.columnPlot')\n      },\n      {\n        value: 'scatter',\n        text: this.$translate('graph.scatterPlot')\n      }\n    ];\n\n    // the options for rounding data point values\n    this.availableRoundingOptions = [\n      {\n        value: null,\n        text: this.$translate('graph.noRounding')\n      },\n      {\n        value: 'integer',\n        text: this.$translate('graph.roundToInteger')\n      },\n      {\n        value: 'tenth',\n        text: this.$translate('graph.roundToTenth')\n      },\n      {\n        value: 'hundredth',\n        text: this.$translate('graph.roundToHundredth')\n      }\n    ];\n\n    // the options for data point symbols\n    this.availableSymbols = [\n      {\n        value: 'circle',\n        text: this.$translate('graph.circle')\n      },\n      {\n        value: 'square',\n        text: this.$translate('graph.square')\n      },\n      {\n        value: 'triangle',\n        text: this.$translate('graph.triangle')\n      },\n      {\n        value: 'triangle-down',\n        text: this.$translate('graph.triangleDown')\n      },\n      {\n        value: 'diamond',\n        text: this.$translate('graph.diamond')\n      }\n    ];\n\n    // the options for line types\n    this.availableLineTypes = [\n      {\n        value: 'Solid',\n        text: this.$translate('graph.solid')\n      },\n      {\n        value: 'Dash',\n        text: this.$translate('graph.dash')\n      },\n      {\n        value: 'Dot',\n        text: this.$translate('graph.dot')\n      },\n      {\n        value: 'ShortDash',\n        text: this.$translate('graph.shortDash')\n      },\n      {\n        value: 'ShortDot',\n        text: this.$translate('graph.shortDot')\n      }\n    ];\n\n    // the options for the x axis types\n    this.availableXAxisTypes = [\n      {\n        value: 'limits',\n        text: 'Limits'\n      },\n      {\n        value: 'categories',\n        text: 'Categories'\n      }\n    ]\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: this.$translate('change')\n      },\n      {\n        value: 'save',\n        text: this.$translate('SAVE')\n      },\n      {\n        value: 'submit',\n        text: this.$translate('SUBMIT')\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'Animation' },\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'Table' }\n    ];\n\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    this.isResetSeriesButtonVisible = true;\n    this.isSelectSeriesVisible = true;\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.backgroundImage = this.componentContent.backgroundImage;\n    this.updateAdvancedAuthoringView()\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.series = null;\n      this.xAxis = null;\n      this.yAxis = null;\n      this.submitCounter = 0;\n      this.backgroundImage = this.componentContent.backgroundImage;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.graphType = this.componentContent.graphType;\n      this.isResetSeriesButtonVisible = true;\n      this.isSelectSeriesVisible = true;\n      this.legendEnabled = !this.componentContent.hideLegend;\n      this.showTrialSelect = !this.componentContent.hideTrialSelect;\n      this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n      this.setDefaultActiveSeries();\n      this.trials = [];\n      this.newTrial();\n      this.clearPlotLines();\n      this.setupGraph();\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the new component into the controller\n      this.componentContent = authoringComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a series in the authoring view\n   */\n  authoringAddSeriesClicked() {\n\n    // create a new series\n    var newSeries = this.createNewSeries();\n\n    // add the new series\n    this.authoringComponentContent.series.push(newSeries);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a series in the authoring view\n   * @param the index of the series in the series array\n   */\n  authoringDeleteSeriesClicked(index) {\n\n    var confirmMessage = '';\n    var seriesName = '';\n\n    if (this.authoringComponentContent.series != null) {\n\n      // get the series\n      var series = this.authoringComponentContent.series[index];\n\n      if (series != null && series.name != null) {\n\n        // get the series name\n        seriesName = series.name;\n      }\n    }\n\n    if (seriesName == null || seriesName == '') {\n      // the series does not have a name\n      confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheSeries');\n    } else {\n      // the series has a name\n      confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheNamedSeries', { seriesName: seriesName });\n    }\n\n    // ask the author if they are sure they want to delete the series\n    var answer = confirm(confirmMessage);\n\n    if (answer) {\n      // remove the series from the series array\n      this.authoringComponentContent.series.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  };\n\n  /**\n   * The \"Enable Trials\" checkbox was clicked\n   */\n  authoringViewEnableTrialsClicked() {\n\n    if (this.authoringComponentContent.enableTrials) {\n      // trials are now enabled\n      this.authoringComponentContent.canCreateNewTrials = true;\n      this.authoringComponentContent.canDeleteTrials = true;\n    } else {\n      // trials are now disabled\n      this.authoringComponentContent.canCreateNewTrials = false;\n      this.authoringComponentContent.canDeleteTrials = false;\n      this.authoringComponentContent.hideAllTrialsOnNewTrial = true;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add an x axis category\n   */\n  authoringAddXAxisCategory() {\n\n    // add an empty string as a new category\n    this.authoringComponentContent.xAxis.categories.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete an x axis category\n   * @param index the index of the category to delete\n   */\n  authoringDeleteXAxisCategory(index) {\n\n    if (index != null) {\n\n      var confirmMessage = '';\n\n      var categoryName = '';\n\n      if (this.authoringComponentContent.xAxis != null &&\n        this.authoringComponentContent.xAxis.categories != null) {\n\n        // get the category name\n        categoryName = this.authoringComponentContent.xAxis.categories[index];\n      }\n\n      if (categoryName == null || categoryName == '') {\n        // there category does not have a name\n        confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheCategory');\n      } else {\n        // the category has a name\n        confirmMessage = this.$translate('graph.areYouSureYouWantToDeleteTheNamedCategory', { categoryName: categoryName });\n      }\n\n      // ask the author if they are sure they want to delete the category\n      var answer = confirm(confirmMessage);\n\n      if (answer) {\n        // remove the category at the given index\n        this.authoringComponentContent.xAxis.categories.splice(index, 1);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Add an empty data point to the series\n   * @param series the series to add the empty data point to\n   */\n  authoringAddSeriesDataPoint(series) {\n\n    if (series != null && series.data != null) {\n\n      if (this.authoringComponentContent.xAxis.type == null ||\n        this.authoringComponentContent.xAxis.type === 'limits') {\n        // add an empty data point to the series\n        series.data.push([]);\n      } else if (this.authoringComponentContent.xAxis.type === 'categories') {\n        // add an empty data point to the series\n        series.data.push(null);\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a data point from a series\n   * @param series the series to delete a data point from\n   * @param index the index of the data point to delete\n   */\n  authoringDeleteSeriesDataPoint(series, index) {\n\n    if (series != null && series.data != null) {\n\n      // ask the author if they are sure they want to delete the point\n      var answer = confirm(this.$translate('graph.areYouSureYouWantToDeleteTheDataPoint'));\n\n      if (answer) {\n        // delete the data point at the given index\n        series.data.splice(index, 1);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a data point up\n   * @param series the series the data point belongs to\n   * @param index the index of the data point in the series\n   */\n  authoringMoveSeriesDataPointUp(series, index) {\n    if (series != null && series.data != null) {\n\n      if (index > 0) {\n        // the data point is not at the top so we can move it up\n\n        // remember the data point we are moving\n        var dataPoint = series.data[index];\n\n        // remove the data point at the given index\n        series.data.splice(index, 1);\n\n        // insert the data point back in at one index back\n        series.data.splice(index - 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a data point down\n   * @param series the series the data point belongs to\n   * @param index the index of the data point in the series\n   */\n  authoringMoveSeriesDataPointDown(series, index) {\n    if (series != null && series.data != null) {\n\n      if (index < series.data.length - 1) {\n        // the data point is not at the bottom so we can move it down\n\n        // remember the data point we are moving\n        var dataPoint = series.data[index];\n\n        // remove the data point at the given index\n        series.data.splice(index, 1);\n\n        // insert the data point back in at one index back\n        series.data.splice(index + 1, 0, dataPoint);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The graph type changed so we will handle updating the series data points\n   * @param newValue the new value of the graph type\n   * @param oldValue the old value of the graph type\n   */\n  authoringViewGraphTypeChanged(newValue, oldValue) {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the x axis type\n   * @param newValue the new x axis type\n   * @param oldValue the old x axis type\n   */\n  authoringViewXAxisTypeChanged(newValue, oldValue) {\n    // ask the author if they are sure they want to change the x axis type\n    let answer = confirm(this.$translate('graph.areYouSureYouWantToChangeTheXAxisType'));\n\n    if (answer) {\n      // the author answered yes to change the type\n      if (newValue === 'limits') {\n        if (oldValue === 'categories') {\n          // the graph type is changing from categories to limits\n          delete this.authoringComponentContent.xAxis.categories;\n          this.authoringComponentContent.xAxis.min = 0;\n          this.authoringComponentContent.xAxis.max = 10;\n          this.authoringConvertAllSeriesDataPoints(newValue);\n        }\n      } else if (newValue === 'categories') {\n        if (oldValue === 'limits' || oldValue === '' || oldValue == null) {\n          // the graph type is changing from limits to categories\n          delete this.authoringComponentContent.xAxis.min;\n          delete this.authoringComponentContent.xAxis.max;\n          delete this.authoringComponentContent.xAxis.units;\n          delete this.authoringComponentContent.yAxis.units;\n          this.authoringComponentContent.xAxis.categories = [];\n          this.authoringConvertAllSeriesDataPoints(newValue);\n        }\n      }\n    } else {\n      // the author answered no so we will not change the type\n      // revert the x axis type\n      this.authoringComponentContent.xAxis.type = oldValue;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add symbols to all the series\n   */\n  authoringAddSymbolsToSeries() {\n\n    // get all the series\n    var series = this.authoringComponentContent.series;\n\n    if (series != null) {\n\n      // loop through all the series\n      for (var s = 0; s < series.length; s++) {\n\n        // get a series\n        var tempSeries = series[s];\n\n        if (tempSeries != null) {\n          // set the symbol to circle\n          tempSeries.marker = {};\n          tempSeries.marker.symbol = 'circle';\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert the data points in all the series\n   * @param graphType the x axis type to convert the data points to\n   */\n  authoringConvertAllSeriesDataPoints(xAxisType) {\n\n    // get all the series\n    var series = this.authoringComponentContent.series;\n\n    if (series != null) {\n\n      // loop through all the series\n      for (var s = 0; s < series.length; s++) {\n\n        // get a series\n        var tempSeries = series[s];\n\n        // convert the data points in the series\n        this.convertSeriesDataPoints(tempSeries, xAxisType);\n      }\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    if (this.authoringComponentContent.connectedComponents.length > 1) {\n      /*\n       * there is more than one connected component so we will enable\n       * trials so that each connected component can put work in a\n       * different trial\n       */\n      this.authoringComponentContent.enableTrials = true;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component series number\n   * @param connectedComponent the connected component object\n   */\n  authoringAddConnectedComponentSeriesNumber(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // add an empty value into the series numbers\n      connectedComponent.seriesNumbers.push(null);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a connected component series number\n   * @param connectedComponent the connected component object\n   * @param seriesNumberIndex the series number index to delete\n   */\n  authoringDeleteConnectedComponentSeriesNumber(connectedComponent, seriesNumberIndex) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // remove the element at the given index\n      connectedComponent.seriesNumbers.splice(seriesNumberIndex, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed a series number\n   * @param connectedComponent the connected component object\n   * @param seriesNumberIndex the series number index to update\n   * @param value the new series number value\n   */\n  authoringConnectedComponentSeriesNumberChanged(connectedComponent, seriesNumberIndex, value) {\n\n    if (connectedComponent != null) {\n\n      // initialize the series numbers if necessary\n      if (connectedComponent.seriesNumbers == null) {\n        connectedComponent.seriesNumbers = [];\n      }\n\n      // make sure the index is in the range of acceptable indexes\n      if (seriesNumberIndex < connectedComponent.seriesNumbers.length) {\n\n        // update the series number at the given index\n        connectedComponent.seriesNumbers[seriesNumberIndex] = value;\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // get the new component type\n      var connectedComponentType = this.authoringGetConnectedComponentType(connectedComponent);\n\n      if (connectedComponentType != 'Embedded') {\n        /*\n         * the component type is not Embedded so we will remove the\n         * seriesNumbers field\n         */\n        delete connectedComponent.seriesNumbers;\n      }\n\n      if (connectedComponentType != 'Table') {\n        /*\n         * the component type is not Table so we will remove the\n         * skipFirstRow, xColumn, and yColumn fields\n         */\n        delete connectedComponent.skipFirstRow;\n        delete connectedComponent.xColumn;\n        delete connectedComponent.yColumn;\n      }\n\n      if (connectedComponentType != 'Graph') {\n        /*\n         * the component type is not Graph so we will remove the\n         * show classmate work fields\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      }\n\n      if (connectedComponentType == 'Table') {\n        // set default values for the connected component params\n        connectedComponent.skipFirstRow = true;\n        connectedComponent.xColumn = 0;\n        connectedComponent.yColumn = 1;\n      }\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The showClassmateWork value has changed in a connected component\n   * @param connectedComponent the connected component that changed\n   */\n  connectedComponentShowClassmateWorkChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.showClassmateWork) {\n        /*\n         * show classmate work was enabled so we will default the\n         * show classmate work source to period\n         */\n        connectedComponent.showClassmateWorkSource = 'period';\n      } else {\n        /*\n         * the show classmate work was disabled so we will remove\n         * the show classmate work fields\n         */\n        delete connectedComponent.showClassmateWork;\n        delete connectedComponent.showClassmateWorkSource;\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n      componentType == 'Draw' ||\n      componentType == 'Label') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n        delete connectedComponent.showClassmateWorkSource;\n      } else if (connectedComponent.type == 'showClassmateWork') {\n        /*\n         * the type has changed to show classmate work so we will enable\n         * trials so that each classmate work will show up in a\n         * different trial\n         */\n        this.authoringComponentContent.enableTrials = true;\n\n        if (connectedComponent.showClassmateWorkSource == null) {\n          connectedComponent.showClassmateWorkSource = 'period';\n        }\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (!connectedComponent.importWorkAsBackground) {\n      delete connectedComponent.importWorkAsBackground;\n    }\n    this.authoringViewComponentChanged();\n  }\n}\n\n\nGraphAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphAuthoringController;\n"]}