{"version":3,"sources":["graphController.es6"],"names":["GraphController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","graphType","series","seriesColors","seriesMarkers","activeSeries","isResetGraphButtonVisible","isSelectSeriesVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","showUndoButton","isLegendEnabled","hasCustomLegendBeenSet","showTrialSelect","chartId","width","height","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","mouseOverPoints","initialComponentState","undoStack","addNextComponentStateToUndoStack","componentId","hiddenCanvasId","initializeComponentContentParams","componentState","isStudentMode","initializeStudentMode","mode","initializeGradingMode","initializeOnlyShowWorkMode","componentStateHasStudentWork","componentContent","setStudentWork","previousComponentState","canSubmit","isSubmitButtonDisabled","disableComponentIfNecessary","initializeHandleConnectedComponentStudentDataChanged","initializeDeleteKeyPressedListener","initializeFileUploadChanged","initializeScopeGetComponentState","drawGraph","then","broadcastDoneRenderingComponent","hideLegend","hideTrialSelect","isResetSeriesButtonVisible","newTrial","hasConnectedComponentAlwaysField","handleConnectedComponents","hasConnectedComponent","id","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","handleTableConnectedComponentStudentDataChanged","handleEmbeddedConnectedComponentStudentDataChanged","handleAnimationConnectedComponentStudentDataChanged","deleteKeyPressedListenerDestroyer","$on","handleDeleteKeyPressed","fileUploadChanged","element","activeSeriesData","data","overwrite","length","confirm","$translate","uploadFileAndReadContent","value","files","reader","FileReader","onload","fileContent","result","readCSVIntoActiveSeries","setUploadedFileName","fileName","studentDataChanged","scope","name","readAsText","uploadAsset","studentData","tableData","rows","convertRowDataToSeriesData","seriesIndex","isStudentDataVersion1","trial","isDirty","makeCopyOfJSONObject","processConnectedComponentStudentData","t","setVerticalPlotLine","submit","setupMouseMoveListenerDone","$","unbind","bind","e","mouseDown","mouseDownEventOccurred","offsetX","offsetY","x","handleMouseDownXPosition","y","handleMouseDownYPosition","saveMouseOverPoints","currentTimestamp","Date","getTime","timeBetweenSendingMouseOverPoints","lastSavedMouseMoveTimestamp","addMouseOverPoint","chart","highcharts","chartXAxis","xAxis","toValue","makeSureXIsWithinXMinMaxLimits","showMouseXPlotLine","showXPlotLine","chartYAxis","yAxis","makeSureYIsWithinYMinMaxLimits","showMouseYPlotLine","showYPlotLine","text","removePlotLine","plotLine","color","label","verticalAlign","addPlotLine","highlightXRangeFromZero","drawRangeRectangle","min","max","xMin","xMax","yMin","yMax","strokeColor","strokeWidth","fillColor","fillOpacity","createRectangleIfNecessary","convertToXPixels","convertToYPixels","updateRectanglePositionAndSize","graphUnitValue","translate","rectangle","renderer","rect","css","stroke","fill","add","attr","plotLeft","plotHeight","plotTop","align","Highcharts","charts","push","useTimeout","deferred","defer","clearChartConfig","drawGraphHelper","promise","title","setupXAxis","setupYAxis","setupWidth","setupHeight","setupXAxisLimitSpacerWidth","isTrialsEnabled","getSeriesFromTrials","plotBands","getPlotBandsFromTrials","getSeries","setDefaultActiveSeries","setAllSeriesFields","refreshSeriesIds","updateMinMaxAxisValues","plotLines","zoomType","getZoomType","chartConfig","createChartConfig","useCustomLegend","setCustomLegend","allowDecimals","xAxisLimitSpacerWidth","show","concat","trialPlotBands","clearSeriesIds","setSeriesIds","singleSeries","setSingleSeriesFields","canEdit","isActiveSeries","draggableX","draggableY","cursor","stickyTracking","shared","allowPointSelect","enableMouseTracking","allowPointMouseOver","isMousePlotLineOn","options","legend","enabled","tooltip","formatter","createTooltipFormatter","plotBackgroundImage","events","load","resolve","click","createGraphClickHandler","plotOptions","dragSensitivity","legendItemClick","createLegendItemClickHandler","point","drag","createPointDragEventHandler","drop","createPointDropEventHandler","exporting","buttons","contextButton","loading","func","createGraphCallbackHandler","thisGraphController","isLimitXAxisType","getSeriesText","xText","getXTextForLimitGraph","yText","getYTextForLimitGraph","combineXTextAndYText","isCategoriesXAxisType","getXTextForCategoriesGraph","getYTextForCategoriesGraph","pointHasCustomTooltip","userOptions","units","performRounding","xAxisUnits","getXAxisUnits","yAxisUnits","getYAxisUnits","category","getCategoryByIndex","index","event","isIgnoreClickEvent","handleGraphClickEvent","currentTime","lastDropTime","isDisabled","activeSeriesId","visible","alert","addPointToSeries","canHideSeries","canStudentHideSeriesOnLegendClick","yAxisSeries","getSeriesById","dragging","target","showXPlotLineIfOn","showYPlotLineIfOn","isMouseXPlotLineOn","isMouseYPlotLineOn","isSaveMouseOverPoints","setupMouseMoveListener","reflow","userAgent","navigator","indexOf","matrixRegEx","currentTransform","newTransform","replace","html","customLegend","d","dataPoint","tempDataXValue","splice","tempTrial","editableTrials","canEditTrial","getSeriesByIndex","setActiveSeries","setSeries","setXAxis","setYAxis","confirmMessage","seriesName","resetSeriesHelper","isReset","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","setActiveSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","submitCounter","processLatestStudentWork","useTimeoutSetupGraph","emitComponentDirty","isSubmitDirty","emitComponentSubmitDirty","clearSaveText","action","createComponentState","emitComponentStudentDataChanged","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","isSubmit","nodeId","createComponentStateAdditionalProcessing","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","additionalProcessingFunction","all","isPromptVisible","multipleSeries","s","showClassmateWorkSource","getClassmateStudentWork","componentStates","promises","getTrialsFromComponentState","promiseResults","mergedTrials","nodePositionAndTitle","getNodePositionAndTitleByNodeId","generateKey","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","newSeriesIndex","marker","getSkipFirstRowValue","getXColumnValue","getYColumnValue","r","row","xCell","yCell","addPointFromTableIntoData","xNumber","Number","yNumber","isNaN","allSeries","usedSeriesIds","getAllUsedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","selectedPoints","getSelectedPoints","indexesToDelete","selectedPoint","sort","reverse","i","symbol","isActiveSeriesIndex","hasEditableSeries","trialNumbers","getTrialNumbers","maxTrialNumber","trialNumberRegex","tempTrialName","match","exec","tempTrialNumber","parseInt","trialIndex","trialToRemove","trialToRemoveId","makeHighestTrialActive","getSelectedTrialsText","highestTrial","getHighestTrial","highestTrialIndex","trialId","getTrialById","lastShownTrialId","lastShownTrial","a","idToShow","arraysContainSameValues","previousTrialIdsToShow","idsToShow","fields","parseLatestTrial","field","when","firstTime","readConnectedComponentFieldFromStudentData","selectedCells","selectedTrialIds","convertSelectedCellsToTrialIds","includes","deleteTrialsByTrialId","trialIdsToDelete","trialIdToDelete","deleteTrialId","latestStudentDataTrial","getLatestStudentDataTrial","latestStudentDataTrialId","removeDefaultTrialIfNecessary","latestTrial","createNewTrialIfNecessary","copySeriesIntoTrial","copyTrialNameIntoTrial","copyPlotBandsIntoTrial","setLastTrialToActive","xPlotLine","activeTrialChanged","newSeries","dashStyle","firstTrial","isTrialHasEmptySeries","deleteFirstTrial","isSeriesEmpty","shift","hideAllTrials","createNewTrial","oldTrial","isAddSeries","copySeries","highlightLatestPoint","highlightPointOnX","xPointToHighlight","seriesNumbers","minMaxValues","getMinMaxValues","updateXAxisMinMaxIfNecessary","updateYAxisMinMaxIfNecessary","locked","minPadding","maxPadding","tempX","tempY","constructor","$event","svgString","getSVG","hiddenCanvas","document","getElementById","renderCallback","base64Image","toDataURL","imageObject","getImageObjectFromBase64String","addNote","csvString","lines","split","line","values","parseFloat","xAxisType","convertedData","oldDataPoint","Array","isArray","number","roundValuesTo","roundToNearestInteger","roundToNearestTenth","roundToNearestHundredth","Math","round","zIndex","$apply","connectedComponentBackgroundImage","connectedComponents","handleShowClassmateWorkConnectedComponent","handleShowOrImportWorkConnectedComponent","handleConnectedComponentPromiseResults","isPreview","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","getTrialsFromClassmates","component","getComponentByNodeIdAndComponentId","injectAssetPaths","connectedComponentOfComponentState","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","setCanEditForAllSeries","promiseResult","newComponentState","handleConnectedComponentsHelper","generateImageFromComponentState","image","url","mergedComponentState","connectedComponentState","mergeComponentState","mergeNullComponentState","baseComponentState","mergeFields","mergeField","readConnectedComponentField","pop","categories","getXValueFromDataPoint","getYValueFromDataPoint","getLatestMouseOverPointX","getLatestMouseOverPointY","seriesId","points","refresh","removeHoverStateFromPoints","setHoverStateOnPoint","setState","latestSeries","latestPoint","selectedCell","material","bevTemp","airTemp","selectedTrialId","enableTrials","ComponentController","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["'use strict';\n\nimport ComponentController from '../componentController';\nimport canvg from 'canvg';\nimport html2canvas from 'html2canvas';\n\nclass GraphController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.GraphService = GraphService;\n    this.graphType = null;\n    this.series = [];\n    this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n    this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n    this.activeSeries = null;\n    this.isResetGraphButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    this.hideAllTrialsOnNewTrial = true;\n    this.showUndoButton = false;\n    this.isLegendEnabled = true;\n    this.hasCustomLegendBeenSet = false;\n    this.showTrialSelect = true;\n    this.chartId = 'chart1';\n    this.width = null;\n    this.height = null;\n    this.trials = [];\n    this.activeTrial = null;\n    this.trialIdsToShow = [];\n    this.selectedTrialsText = '';\n    this.studentDataVersion = 2;\n    this.canCreateNewTrials = false;\n    this.canDeleteTrials = false;\n    this.uploadedFileName = null;\n    this.backgroundImage = null;\n    this.mouseOverPoints = [];\n    this.initialComponentState = null;\n    /*\n     * An array to store the component states for the student to undo.\n     * The undoStack will contain the component states from the current\n     * visit except for the current component state.\n     */\n    this.undoStack = [];\n    /*\n     * whether to add the next component state created in\n     * studentDataChanged() to the undoStack\n     */\n    this.addNextComponentStateToUndoStack = false;\n    this.chartId = 'chart_' + this.componentId;\n    this.hiddenCanvasId = 'hiddenCanvas_' + this.componentId;\n    this.initializeComponentContentParams();\n    const componentState = this.$scope.componentState;\n    if (this.isStudentMode()) {\n      this.initializeStudentMode(componentState);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.initializeGradingMode(componentState);\n    } else if (this.mode === 'onlyShowWork') {\n      this.initializeOnlyShowWorkMode();\n    }\n    if (!this.isStudentMode() &&\n        this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    }\n    this.initialComponentState = componentState;\n    this.previousComponentState = componentState;\n    if (!this.canSubmit()) {\n      this.isSubmitButtonDisabled = true;\n    }\n    this.disableComponentIfNecessary();\n    this.initializeHandleConnectedComponentStudentDataChanged();\n    this.initializeDeleteKeyPressedListener();\n    this.initializeFileUploadChanged();\n    this.initializeScopeGetComponentState(this.$scope, 'graphController');\n    this.drawGraph().then(() => {\n      this.broadcastDoneRenderingComponent();\n    });\n  }\n\n  initializeComponentContentParams() {\n    this.graphType = this.componentContent.graphType;\n    if (this.graphType == null) {\n      this.graphType = 'line';\n    }\n    if (this.componentContent.canCreateNewTrials != null) {\n      this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n    }\n    if (this.componentContent.canDeleteTrials != null) {\n      this.canDeleteTrials = this.componentContent.canDeleteTrials;\n    }\n    if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n      this.hideAllTrialsOnNewTrial = false;\n    }\n    if (this.componentContent.hideLegend) {\n      this.isLegendEnabled = false;\n    }\n    if (this.componentContent.hideTrialSelect) {\n      this.showTrialSelect = false;\n    }\n  }\n\n  initializeStudentMode(componentState) {\n    this.isResetSeriesButtonVisible = true;\n    this.isSelectSeriesVisible = true;\n    this.backgroundImage = this.componentContent.backgroundImage;\n    if (!this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.newTrial();\n    }\n    if (this.UtilService.hasConnectedComponentAlwaysField(this.componentContent)) {\n      this.handleConnectedComponents();\n    } else if (this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.handleConnectedComponents();\n    }\n  }\n\n  initializeGradingMode(componentState) {\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    if (componentState != null) {\n      if (this.mode === 'gradingRevision') {\n        this.chartId = 'chart_gradingRevision_' + componentState.id;\n      } else {\n        this.chartId = 'chart_' + componentState.id;\n      }\n    }\n  }\n\n  initializeOnlyShowWorkMode() {\n    this.isResetGraphButtonVisible = false;\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.backgroundImage = this.componentContent.backgroundImage;\n  }\n\n  initializeHandleConnectedComponentStudentDataChanged() {\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      const componentType = connectedComponent.type;\n      if (componentType === 'Table') {\n        this.handleTableConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Embedded') {\n        this.handleEmbeddedConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Animation') {\n        this.handleAnimationConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      }\n    };\n  }\n\n  initializeDeleteKeyPressedListener() {\n    this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n      this.handleDeleteKeyPressed();\n    });\n  }\n\n  initializeFileUploadChanged() {\n    this.$scope.fileUploadChanged = (element) => {\n      const activeSeriesData = this.activeSeries.data;\n      let overwrite = true;\n      if (activeSeriesData.length > 0) {\n        if (!confirm(this.$translate('graph.areYouSureYouWantToOverwriteTheCurrentLineData'))) {\n          overwrite = false;\n        }\n      }\n      if (overwrite) {\n        this.uploadFileAndReadContent(element);\n      }\n      /*\n       * clear the file input element value so that onchange() will be\n       * called again if the student wants to upload the same file again\n       */\n      element.value = null;\n    };\n  }\n\n  uploadFileAndReadContent(element) {\n    const files = element.files;\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileContent = reader.result;\n      this.readCSVIntoActiveSeries(fileContent);\n      this.setUploadedFileName(this.fileName);\n      this.studentDataChanged();\n    };\n    reader.scope = this;\n    reader.fileName = files[0].name;\n    reader.readAsText(files[0]);\n    this.StudentAssetService.uploadAsset(files[0]);\n  }\n\n  cleanupBeforeExiting() {\n    this.deleteKeyPressedListenerDestroyer();\n  }\n\n  handleTableConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null && studentData.tableData != null) {\n      const rows = studentData.tableData;\n      const data = this.convertRowDataToSeriesData(rows, connectedComponentParams);\n      let seriesIndex = connectedComponentParams.seriesIndex;\n      if (seriesIndex == null) {\n        seriesIndex = 0;\n      }\n      if (this.isStudentDataVersion1()) {\n        let series = this.series[seriesIndex];\n        if (series == null) {\n          series = {};\n          this.series[seriesIndex] = series;\n        }\n        series.data = data;\n      } else {\n        const trial = this.activeTrial;\n        if (trial != null && trial.series != null) {\n          let series = trial.series[seriesIndex];\n          if (series == null) {\n            series = {};\n            this.series[seriesIndex] = series;\n          }\n          series.data = data;\n        }\n      }\n      this.drawGraph();\n      this.isDirty = true;\n    }\n  }\n\n  handleEmbeddedConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n    const studentData = componentState.studentData;\n    this.processConnectedComponentStudentData(studentData, connectedComponentParams);\n    this.studentDataChanged();\n  }\n\n  handleAnimationConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    if (componentState.t != null) {\n      this.setVerticalPlotLine(componentState.t);\n      this.drawGraph();\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setupMouseMoveListener() {\n    if (!this.setupMouseMoveListenerDone) {\n      /*\n       * Remove all existing listeners on the chart div to make sure we don't\n       * bind a listener multiple times.\n       */\n      $('#' + this.chartId).unbind();\n      $('#' + this.chartId).bind('mousedown', (e) => {\n        this.mouseDown = true;\n        this.mouseDownEventOccurred(e);\n      });\n      $('#' + this.chartId).bind('mouseup', (e) => {\n        this.mouseDown = false;\n      });\n      $('#' + this.chartId).bind('mousemove', (e) => {\n        if (this.mouseDown) {\n          this.mouseDownEventOccurred(e);\n        }\n      });\n      $('#' + this.chartId).bind('mouseleave', (e) => {\n        this.mouseDown = false;\n      });\n      this.setupMouseMoveListenerDone = true;\n    }\n  }\n\n  /**\n   * The student has moved the mouse while holding the mouse button down.\n   * @param e The mouse event.\n   */\n  mouseDownEventOccurred(e) {\n    /*\n     * Firefox displays abnormal behavior when the student drags the plot line.\n     * In Firefox, when the mouse is on top of the plot line, the event will\n     * contain offset values relative to the plot line instead of relative to\n     * the graph container. We always want the offset values relative to the\n     * graph container so we will ignore events where the offset values are\n     * relative to the plot line.\n     */\n    if (e.offsetX < 10 || e.offsetY < 10) {\n      return;\n    }\n    const x = this.handleMouseDownXPosition(e);\n    const y = this.handleMouseDownYPosition(e);\n    if (this.componentContent.saveMouseOverPoints) {\n      /*\n       * Make sure we aren't saving the points too frequently. We want to avoid\n       * saving too many unnecessary data points.\n       */\n      const currentTimestamp = new Date().getTime();\n      /*\n       * Make sure this many milliseconds has passed before saving another mouse\n       * over point.\n       */\n      const timeBetweenSendingMouseOverPoints = 200;\n      if (this.lastSavedMouseMoveTimestamp == null ||\n          currentTimestamp - this.lastSavedMouseMoveTimestamp > timeBetweenSendingMouseOverPoints) {\n        this.addMouseOverPoint(x, y);\n        this.studentDataChanged();\n        this.lastSavedMouseMoveTimestamp = currentTimestamp;\n      }\n    }\n  }\n\n  handleMouseDownXPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    let x = chartXAxis.toValue(e.offsetX, false);\n    x = this.makeSureXIsWithinXMinMaxLimits(x);\n    if (this.componentContent.showMouseXPlotLine) {\n      this.showXPlotLine(x);\n    }\n    return x;\n  }\n\n  handleMouseDownYPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    let y = chartYAxis.toValue(e.offsetY, false);\n    y = this.makeSureYIsWithinYMinMaxLimits(y);\n    if (this.componentContent.showMouseYPlotLine) {\n      this.showYPlotLine(y);\n    }\n    return y;\n  }\n\n  /**\n   * Show the vertical plot line at the given x.\n   * @param x The x value to show the vertical line at.\n   * @param text The text to show on the plot line.\n   */\n  showXPlotLine(x, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    const plotLine = {\n      value: x,\n      color: 'red',\n      width: 4,\n      id: 'plot-line-x'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        verticalAlign: 'top'\n      };\n    }\n    chartXAxis.addPlotLine(plotLine);\n    if (this.componentContent.highlightXRangeFromZero) {\n      this.drawRangeRectangle(0, x, chart.yAxis[0].min, chart.yAxis[0].max);\n    }\n  }\n\n  /**\n   * Draw a rectangle on the graph. This is used for highlighting a range.\n   * @param xMin The left x value in the graph x axis units.\n   * @param xMax The right x value in the graph x axis units.\n   * @param yMin The bottom y value in the graph y axis units.\n   * @param yMax The top y value in the graph y axis units.\n   * @param strokeColor The color of the border.\n   * @param strokeWidth The width of the border.\n   * @param fillColor The color inside the rectangle.\n   * @param fillOpacity The opacity of the color inside the rectangle.\n   */\n  drawRangeRectangle(xMin, xMax, yMin, yMax, strokeColor = 'black', strokeWidth = '.5',\n      fillColor = 'black', fillOpacity = '.1') {\n    this.createRectangleIfNecessary(strokeColor, strokeWidth, fillColor, fillOpacity);\n    xMin = this.convertToXPixels(xMin);\n    xMax = this.convertToXPixels(xMax);\n    yMin = this.convertToYPixels(yMin);\n    yMax = this.convertToYPixels(yMax);\n    this.updateRectanglePositionAndSize(xMin, xMax, yMin, yMax);\n  }\n\n  convertToXPixels(graphUnitValue) {\n    const chart = $('#' + this.chartId).highcharts();\n    return chart.xAxis[0].translate(graphUnitValue);\n  }\n\n  convertToYPixels(graphUnitValue) {\n    const chart = $('#' + this.chartId).highcharts();\n    return chart.yAxis[0].translate(graphUnitValue);\n  }\n\n  createRectangleIfNecessary(strokeColor, strokeWidth, fillColor, fillOpacity) {\n    if (this.rectangle == null) {\n      const chart = $('#' + this.chartId).highcharts();\n      this.rectangle = chart.renderer.rect(0,0,0,0,0).css({\n        stroke: strokeColor,\n        strokeWidth: strokeWidth,\n        fill: fillColor,\n        fillOpacity: fillOpacity\n      }).add();\n    }\n  }\n\n  updateRectanglePositionAndSize(xMin, xMax, yMin, yMax) {\n    const chart = $('#' + this.chartId).highcharts();\n    this.rectangle.attr({\n      x: xMin + chart.plotLeft,\n      y: chart.plotHeight + chart.plotTop - yMax,\n      width: xMax - xMin,\n      height: yMax - yMin\n    });\n  }\n\n  /**\n   * Show the horizontal plot line at the given y.\n   * @param y The y value to show the horizontal line at.\n   * @param text The text to show on the plot line.\n   */\n  showYPlotLine(y, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n    const plotLine = {\n      value: y,\n      color: 'red',\n      width: 2,\n      id: 'plot-line-y'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        align: 'right'\n      };\n    }\n    chartYAxis.addPlotLine(plotLine);\n  }\n\n  clearPlotLines() {\n    const chart = Highcharts.charts[0];\n    const chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    const chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n  }\n\n  /**\n   * If the x value is not within the x min and max limits, we will modify the x value to be at the\n   * limit.\n   * @param x the x value\n   * @return an x value between the x min and max limits\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    if (x < this.xAxis.min) {\n      x = this.xAxis.min;\n    }\n    if (x > this.xAxis.max) {\n      x = this.xAxis.max;\n    }\n    return x;\n  }\n\n  /**\n   * If the y value is not within the y min and max limits, we will modify the y value to be at the\n   * limit.\n   * @param y the y value\n   * @return a y value between the y min and max limits\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    if (y < this.yAxis.min) {\n      y = this.yAxis.min;\n    }\n    if (y > this.yAxis.max) {\n      y = this.yAxis.max;\n    }\n    return y;\n  }\n\n  /**\n   * Add a mouse over point to the array of student mouse over points.\n   * @param x the x value in graph units\n   * @param y the y value in graph units\n   */\n  addMouseOverPoint(x, y) {\n    this.mouseOverPoints.push([x, y]);\n  }\n\n  /**\n   * @param useTimeout whether to call the drawGraphHelper() function in a timeout callback\n   */\n  drawGraph(useTimeout) {\n    const deferred = this.$q.defer();\n    if (useTimeout) {\n      /*\n       * Clear the chart config so that the graph is completely refreshed. We need to do this\n       * otherwise all the series will react to mouseover but we only want the active series to\n       * react to mouseover.\n       */\n      this.clearChartConfig();\n      /*\n       * Call the setup graph helper after a timeout. this is required so that the graph is\n       * completely refreshed so that only the active series will react to mouseover.\n       */\n      this.$timeout(() => {\n        this.drawGraphHelper(deferred);\n      });\n    } else {\n      this.drawGraphHelper(deferred);\n    }\n    return deferred.promise;\n  }\n\n  /**\n   * @param deferred A promise that should be resolved after the graph is done rendering.\n   */\n  drawGraphHelper(deferred) {\n    const title = this.componentContent.title;\n    const xAxis = this.setupXAxis();\n    const yAxis = this.setupYAxis();\n    this.setupWidth();\n    this.setupHeight();\n    this.setupXAxisLimitSpacerWidth();\n    let series = null;\n    if (this.isTrialsEnabled()) {\n      series = this.getSeriesFromTrials(this.trials);\n      xAxis.plotBands = this.getPlotBandsFromTrials(this.trials);\n    } else {\n      series = this.getSeries();\n    }\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    }\n    this.showUndoButton = false;\n    this.setAllSeriesFields(series);\n    this.refreshSeriesIds(series);\n    this.updateMinMaxAxisValues(series, xAxis, yAxis);\n    if (this.plotLines != null) {\n      xAxis.plotLines = this.plotLines;\n    }\n    const zoomType = this.getZoomType();\n    this.chartConfig = this.createChartConfig(deferred, title, xAxis, yAxis, series, zoomType);\n    if (this.componentContent.useCustomLegend) {\n      // use a timeout so the graph has a chance to render before we set the custom legend\n      this.$timeout(() => {\n        this.setCustomLegend();\n      });\n    }\n    return deferred.promise;\n  }\n\n  setupXAxis() {\n    if (this.xAxis == null && this.componentContent.xAxis != null) {\n      this.xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n    }\n    if (this.xAxis != null) {\n      this.xAxis.allowDecimals = false;\n      this.xAxis.plotBands = null;\n      if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n        this.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n      }\n    }\n    return this.xAxis;\n  }\n\n  setupYAxis() {\n    if (this.yAxis == null && this.componentContent.yAxis != null) {\n      this.yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n    }\n    if (this.yAxis != null) {\n      this.yAxis.allowDecimals = false;\n    }\n    return this.yAxis;\n  }\n\n  setupWidth() {\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n  }\n\n  setupHeight() {\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n  }\n\n  setupXAxisLimitSpacerWidth() {\n    if (this.width > 100) {\n      this.xAxisLimitSpacerWidth = this.width - 100;\n    } else {\n      this.xAxisLimitSpacerWidth = 0;\n    }\n  }\n\n  getSeriesFromTrials(trials) {\n    let series = [];\n    for (const trial of trials) {\n      if (trial.show) {\n        series = series.concat(trial.series);\n      }\n    }\n    return series;\n  }\n\n  getPlotBandsFromTrials(trials) {\n    let trialPlotBands = [];\n    for (const trial of trials) {\n      if (trial.show && trial.xAxis != null && trial.xAxis.plotBands != null) {\n        trialPlotBands = trialPlotBands.concat(trial.xAxis.plotBands);\n      }\n    }\n    return trialPlotBands;\n  }\n\n  refreshSeriesIds(series) {\n    this.clearSeriesIds(series);\n    this.setSeriesIds(series);\n  }\n\n  setAllSeriesFields(series) {\n    for (const singleSeries of series) {\n      this.setSingleSeriesFields(singleSeries);\n    }\n  }\n\n  setSingleSeriesFields(singleSeries) {\n    if (singleSeries.canEdit && this.isActiveSeries(singleSeries)) {\n      if (this.graphType === 'line' || this.graphType === 'scatter') {\n        singleSeries.draggableX = true;\n      } else if (this.graphType === 'column') {\n        singleSeries.draggableX = false;\n      }\n      singleSeries.draggableY = true;\n      singleSeries.cursor = 'move';\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n      this.showUndoButton = true;\n    } else {\n      singleSeries.draggableX = false;\n      singleSeries.draggableY = false;\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = false;\n      singleSeries.enableMouseTracking = false;\n    }\n    if (singleSeries.allowPointMouseOver === true) {\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n    }\n    if (this.isMousePlotLineOn()) {\n      singleSeries.enableMouseTracking = true;\n    }\n  }\n\n  getZoomType() {\n    return this.mode === 'grading' || this.mode === 'gradingRevision' ? 'xy' : null;\n  }\n\n  clearChartConfig() {\n    this.chartConfig = {\n      chart: {\n        options: {\n          chart: {}\n        }\n      }\n    };\n  }\n\n  createChartConfig(deferred, title, xAxis, yAxis, series, zoomType) {\n    const chartConfig = {\n      options: {\n        legend: {\n          enabled: this.isLegendEnabled\n        },\n        tooltip: {\n          formatter: this.createTooltipFormatter()\n        },\n        chart: {\n          width: this.width,\n          height: this.height,\n          type: this.graphType,\n          zoomType: zoomType,\n          plotBackgroundImage: this.backgroundImage,\n          events: {\n            load: function() {\n              deferred.resolve(this);\n            },\n            click: this.createGraphClickHandler()\n          }\n        },\n        plotOptions: {\n          series: {\n            dragSensitivity: 10,\n            stickyTracking: false,\n            events: {\n              legendItemClick: this.createLegendItemClickHandler()\n            },\n            point: {\n              events: {\n                drag: this.createPointDragEventHandler(),\n                drop: this.createPointDropEventHandler()\n              }\n            }\n          }\n        },\n        exporting: {\n          buttons: {\n            contextButton: {\n              enabled: false\n            }\n          }\n        }\n      },\n      series: series,\n      title: {\n        text: title\n      },\n      xAxis: xAxis,\n      yAxis: yAxis,\n      loading: false,\n      func: this.createGraphCallbackHandler()\n    };\n    return chartConfig;\n  }\n\n  createTooltipFormatter() {\n    const thisGraphController = this;\n    return function() {\n      let text = '';\n      if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForLimitGraph(this.series, this.x);\n        const yText = thisGraphController.getYTextForLimitGraph(this.series, this.y);\n        text += thisGraphController.combineXTextAndYText(xText, yText);\n      } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForCategoriesGraph(this.point, this.x);\n        const yText = thisGraphController.getYTextForCategoriesGraph(this.y);\n        text += xText + ' ' + yText;\n      }\n      if (thisGraphController.pointHasCustomTooltip(this.point)) {\n        text += '<br/>' + this.point.tooltip;\n      }\n      return text;\n    };\n  }\n\n  getXAxisUnits(series) {\n    if (series.xAxis != null && series.xAxis.userOptions != null &&\n        series.xAxis.userOptions.units != null) {\n      return series.xAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  getYAxisUnits(series) {\n    if (series.yAxis != null && series.yAxis.userOptions != null &&\n        series.yAxis.userOptions.units != null) {\n      return series.yAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  isLimitXAxisType(xAxis) {\n    return xAxis.type === 'limits';\n  }\n\n  isCategoriesXAxisType(xAxis) {\n    return xAxis.type === 'categories';\n  }\n\n  getSeriesText(series) {\n    let text = '';\n    if (series.name !== '') {\n      text = '<b>' + series.name + '</b><br/>';\n    }\n    return text;\n  }\n\n  getXTextForLimitGraph(series, x) {\n    let text = this.performRounding(x);\n    let xAxisUnits = this.getXAxisUnits(series);\n    if (xAxisUnits != null && xAxisUnits !== '') {\n      text += ' ' + xAxisUnits;\n    }\n    return text;\n  }\n\n  getYTextForLimitGraph(series, y) {\n    let text = this.performRounding(y);\n    let yAxisUnits = this.getYAxisUnits(this.series);\n    if (yAxisUnits != null && yAxisUnits !== '') {\n      text += ' ' + yAxisUnits;\n    }\n    return text;\n  }\n\n  combineXTextAndYText(xText, yText) {\n    let text = xText;\n    if (xText !== '') {\n      text += ', ';\n    }\n    text += yText;\n    return text;\n  }\n\n  getXTextForCategoriesGraph(point, x) {\n    const category = this.getCategoryByIndex(point.index);\n    if (category != null) {\n      return category;\n    } else {\n      return this.performRounding(x);\n    }\n  }\n\n  getYTextForCategoriesGraph(y) {\n    return this.performRounding(y);\n  }\n\n  pointHasCustomTooltip(point) {\n    return point.tooltip != null && point.tooltip !== '';\n  }\n\n  createGraphClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (thisGraphController.graphType === 'line' || thisGraphController.graphType === 'scatter') {\n        if (thisGraphController.isIgnoreClickEvent()) {\n          return;\n        } else {\n          thisGraphController.handleGraphClickEvent(event, this.series);\n        }\n      }\n    };\n  }\n\n  /*\n   * Check if the last drop event was within the last 100 milliseconds so we will not register the\n   * click. We need to do this because when students drag points, a click event is fired when they\n   * release the mouse button. we don't want that click event to create a new point so we need to\n   * ignore it.\n   */\n  isIgnoreClickEvent() {\n    const currentTime = new Date().getTime();\n    return this.lastDropTime != null && ((currentTime - this.lastDropTime) < 100);\n  }\n\n  handleGraphClickEvent(event, series) {\n    if (!this.isDisabled) {\n      const activeSeries = this.activeSeries;\n      if (activeSeries != null && this.canEdit(activeSeries)) {\n        const activeSeriesId = activeSeries.id;\n        for (const singleSeries of series) {\n          if (activeSeriesId === singleSeries.options.id && !singleSeries.visible) {\n            // the series is not visible so we will not add the point\n            alert(this.$translate('graph.studentAddingPointToHiddenSeriesMessage'));\n            return;\n          }\n        }\n        const x = this.performRounding(event.xAxis[0].value);\n        const y = this.performRounding(event.yAxis[0].value);\n        this.addPointToSeries(activeSeries, x, y);\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      } else {\n        if (!this.isMousePlotLineOn()) {\n          // the student is trying to add a point to a series that can't be edited\n          alert(this.$translate('graph.youCanNotEditThisSeriesPleaseChooseASeriesThatCanBeEdited'));\n        }\n      }\n    }\n  }\n\n  createLegendItemClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      const canHideSeries =\n        thisGraphController.componentContent.canStudentHideSeriesOnLegendClick === true;\n      if (canHideSeries) {\n        /*\n         * Update the show field in all the series depending on whether each line is active\n         * in the legend.\n         */\n        for (const yAxisSeries of this.yAxis.series) {\n          let series = thisGraphController.getSeriesById(yAxisSeries.userOptions.id);\n          if (this.userOptions.id === series.id) {\n            series.show = !yAxisSeries.visible;\n          } else {\n            series.show = yAxisSeries.visible;\n          }\n        }\n        thisGraphController.studentDataChanged();\n      }\n      return canHideSeries;\n    };\n  }\n\n  createPointDragEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (!thisGraphController.isDisabled) {\n        const activeSeries = thisGraphController.activeSeries;\n        if (thisGraphController.canEdit(activeSeries)) {\n          thisGraphController.dragging = true;\n        }\n      }\n    };\n  }\n\n  createPointDropEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      // the student has stopped dragging the point and dropped the point\n      if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n        const activeSeries = thisGraphController.activeSeries;\n        thisGraphController.dragging = false;\n        thisGraphController.lastDropTime = new Date().getTime();\n        const target = event.target;\n        const x = thisGraphController.performRounding(target.x);\n        const y = thisGraphController.performRounding(target.y);\n        const index = target.index;\n        const data = activeSeries.data;\n        if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n          data[index] = [x, y];\n        } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n          data[index] = y;\n        }\n        thisGraphController.addNextComponentStateToUndoStack = true;\n        thisGraphController.studentDataChanged();\n      }\n    };\n  }\n\n  createGraphCallbackHandler() {\n    const thisGraphController = this;\n    return function(chart) {\n      thisGraphController.$timeout(function () {\n        thisGraphController.showXPlotLineIfOn('Drag Me');\n        thisGraphController.showYPlotLineIfOn('Drag Me');\n        if (thisGraphController.isMouseXPlotLineOn() ||\n          thisGraphController.isMouseYPlotLineOn() ||\n          thisGraphController.isSaveMouseOverPoints()) {\n          thisGraphController.setupMouseMoveListener();\n        }\n        chart.reflow();\n      }, 1000);\n    };\n  }\n\n  /**\n   * Overwrite the existing legend with the custom authored legend.\n   */\n  setCustomLegend() {\n    if (!this.hasCustomLegendBeenSet) {\n      if ($('.highcharts-legend').length > 0) {\n        // move the legend to the very left by setting the x position to 0\n        const userAgent = navigator.userAgent;\n        if (userAgent.indexOf('Firefox') !== -1) {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the translate.\n           * Example\n           * \"translate(227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"translate(\"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the translate is captured in group 2.\n           */\n          const matrixRegEx = /(translate\\()(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').attr('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').attr('transform', newTransform);\n        } else {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the matrix.\n           * Example\n           * \"matrix(1, 0, 0, 1, 227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"matrix(1, 0, 0, 1, \"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the matrix is captured in group 2.\n           */\n          const matrixRegEx = /(matrix\\(\\d*,\\s*\\d*,\\s*\\d*,\\s*\\d*,\\s*)(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').css('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').css('transform', newTransform);\n        }\n        $('.highcharts-legend').html(this.componentContent.customLegend);\n      }\n      this.hasCustomLegendBeenSet = true;\n    }\n  }\n\n  addPointToSeries(series, x, y) {\n    const data = series.data;\n    if (this.isCategoriesXAxisType(this.componentContent.xAxis)) {\n      data[x] = y;\n    } else {\n      data.push([x, y]);\n    }\n  }\n\n  /**\n   * Remove a point from a series. We will remove all points that have the given x value.\n   * @param series the series to remove the point from\n   * @param x the x value of the point to remove\n   */\n  removePointFromSeries(series, x) {\n    const data = series.data;\n    for (let d = 0; d < data.length; d++) {\n      const dataPoint = data[d];\n      const tempDataXValue = dataPoint[0];\n      if (x === tempDataXValue) {\n        data.splice(d, 1);\n        d--;\n      }\n    }\n  }\n\n  canEdit(series) {\n    return series.canEdit;\n  }\n\n  setSeries(series) {\n    this.series = series;\n  }\n\n  getSeries() {\n    return this.series;\n  }\n\n  setSeriesByIndex(series, index) {\n    this.series[index] = series;\n  }\n\n  getSeriesByIndex(index) {\n    return this.series[index];\n  }\n\n  setTrials(trials) {\n    this.trials = trials;\n  }\n\n  getTrials() {\n    return this.trials;\n  }\n\n  /**\n   * Get the index of the trial\n   * @param trial the trial object\n   * @return the index of the trial within the trials array\n   */\n  getTrialIndex(trial) {\n    for (let t = 0; t < this.trials.length; t++) {\n      const tempTrial = this.trials[t];\n      if (trial === tempTrial) {\n        return t;\n      }\n    }\n    return -1;\n  }\n\n  setActiveTrialByIndex(index) {\n    this.activeTrial = this.trials[index];\n  }\n\n  canEditTrial(trial) {\n    let series = trial.series;\n    for (const singleSeries of series) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set whether to show the active trial select menu\n   * @return whether to show the active trial select menu\n   */\n  showSelectActiveTrials() {\n    let editableTrials = 0;\n    for (const trial of this.trials) {\n      if (this.canEditTrial(trial) && trial.show) {\n        editableTrials++;\n        if (editableTrials > 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  setXAxis(xAxis) {\n    this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n  }\n\n  getXAxis() {\n    return this.xAxis;\n  }\n\n  setYAxis(yAxis) {\n    this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n  }\n\n  getYAxis() {\n    return this.yAxis;\n  }\n\n  setActiveSeries(series) {\n    this.activeSeries = series;\n  }\n\n  setActiveSeriesByIndex(index) {\n    const series = this.getSeriesByIndex(index);\n    this.setActiveSeries(series);\n  }\n\n  resetGraph() {\n    this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n    if (this.componentContent.xAxis != null) {\n      this.setXAxis(this.componentContent.xAxis);\n    }\n    if (this.componentContent.yAxis != null) {\n      this.setYAxis(this.componentContent.yAxis);\n    }\n    // set the active series to null so that the default series will become selected later\n    this.setActiveSeries(null);\n    this.backgroundImage = this.componentContent.backgroundImage;\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  resetSeries() {\n    let confirmMessage = '';\n    const seriesName = this.activeSeries.name;\n    if (seriesName === '') {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheSeries');\n    } else {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheNamedSeries', { seriesName: seriesName });\n    }\n    if (confirm(confirmMessage)) {\n      this.resetSeriesHelper();\n    }\n  }\n\n  resetSeriesHelper() {\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.newTrial();\n      const isReset = true;\n      this.handleConnectedComponents(isReset);\n    } else {\n      const activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n      let originalSeries = this.componentContent.series[activeSeriesIndex];\n      if (originalSeries != null) {\n        originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n        this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n        if (this.componentContent.xAxis != null) {\n          this.setXAxis(this.componentContent.xAxis);\n        }\n        if (this.componentContent.yAxis != null) {\n          this.setYAxis(this.componentContent.yAxis);\n        }\n        this.backgroundImage = this.componentContent.backgroundImage;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      this.studentDataVersion = 1;\n      this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n    } else {\n      this.studentDataVersion = studentData.version;\n      if (studentData.trials != null && studentData.trials.length > 0) {\n        const trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n        this.setTrials(trialsCopy);\n        const activeTrialIndex = studentData.activeTrialIndex;\n        if (activeTrialIndex == null) {\n          if (trialsCopy.length > 0) {\n            this.setActiveTrialByIndex(studentData.trials.length - 1);\n          }\n        } else {\n          this.setActiveTrialByIndex(activeTrialIndex);\n        }\n        if (this.activeTrial != null && this.activeTrial.series != null) {\n          this.series = this.activeTrial.series;\n        }\n      }\n    }\n    this.setTrialIdsToShow();\n    if (studentData.xAxis != null) {\n      this.setXAxis(studentData.xAxis);\n    }\n    if (studentData.yAxis != null) {\n      this.setYAxis(studentData.yAxis);\n    }\n    this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n    if (studentData.backgroundImage != null) {\n      this.backgroundImage = studentData.backgroundImage;\n    }\n    const submitCounter = studentData.submitCounter;\n    if (submitCounter != null) {\n      this.submitCounter = submitCounter;\n    }\n    if (studentData.mouseOverPoints != null &&\n      studentData.mouseOverPoints.length > 0) {\n      this.mouseOverPoints = studentData.mouseOverPoints;\n    }\n    this.processLatestStudentWork();\n  }\n\n  activeSeriesChanged() {\n    const useTimeoutSetupGraph = true;\n    this.studentDataChanged(useTimeoutSetupGraph);\n  }\n\n  studentDataChanged(useTimeoutSetupGraph) {\n    this.isDirty = true;\n    this.emitComponentDirty(true);\n    this.isSubmitDirty = true;\n    this.emitComponentSubmitDirty(true);\n    this.clearSaveText();\n    this.drawGraph(useTimeoutSetupGraph);\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    const action = 'change';\n    this.createComponentState(action).then((componentState) => {\n      if (this.addNextComponentStateToUndoStack) {\n        if (this.previousComponentState != null) {\n          this.undoStack.push(this.previousComponentState);\n        }\n        /*\n         * Remember this current component state for the next time\n         * studentDataChanged() is called. The next time\n         * studentDataChanged() is called, this will be the previous\n         * component state and we will add it to the undoStack. We do not\n         * want to put the current component state onto the undoStack\n         * because if the student clicks undo and this current component\n         * state is on the top of the stack, the graph won't change.\n         * Basically the undoStack contains the component states from the\n         * current visit except for the current component state.\n         */\n        this.previousComponentState = componentState;\n        this.addNextComponentStateToUndoStack = false;\n      }\n      /*\n       * fire the componentStudentDataChanged event after a short timeout\n       * so that the other component handleConnectedComponentStudentDataChanged()\n       * listeners can initialize before this and are then able to process\n       * this componentStudentDataChanged event\n       */\n      this.$timeout(() => {\n        this.emitComponentStudentDataChanged(componentState);\n      }, 100);\n    });\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {};\n    studentData.version = this.studentDataVersion;\n    if (this.isStudentDataVersion1()) {\n      studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n    } else {\n      if (this.trials != null) {\n        studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n        const activeTrialIndex = this.getTrialIndex(this.activeTrial);\n        studentData.activeTrialIndex = activeTrialIndex;\n      }\n    }\n    studentData.xAxis = this.UtilService.makeCopyOfJSONObject(this.getXAxis());\n    delete studentData.xAxis.plotBands;\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n      studentData.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n    }\n    studentData.yAxis = this.getYAxis();\n    const activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n    if (activeSeriesIndex != null) {\n      studentData.activeSeriesIndex = activeSeriesIndex;\n    }\n    const uploadedFileName = this.getUploadedFileName();\n    if (uploadedFileName != null) {\n      studentData.uploadedFileName = uploadedFileName;\n    }\n    if (this.backgroundImage != null) {\n      studentData.backgroundImage = this.backgroundImage;\n    }\n    studentData.submitCounter = this.submitCounter;\n    if (this.mouseOverPoints.length !== 0) {\n      studentData.mouseOverPoints = this.mouseOverPoints;\n    }\n    componentState.isSubmit = this.isSubmit;\n    componentState.studentData = studentData;\n    componentState.componentType = 'Graph';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    this.isSubmit = false;\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the component state\n   * Note: this function must call deferred.resolve() otherwise student work will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      const additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (const additionalProcessingFunction of additionalProcessingFunctions) {\n        const defer = this.$q.defer();\n        const promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      deferred.resolve(componentState);\n    }\n  }\n\n  showPrompt() {\n    return this.isPromptVisible === true;\n  }\n\n  showResetGraphButton() {\n    return this.isResetGraphButtonVisible === true;\n  }\n\n  showResetSeriesButton() {\n    return this.isResetSeriesButtonVisible === true;\n  }\n\n  getSeriesIndex(series) {\n    const multipleSeries = this.getSeries();\n    for (let s = 0; s < multipleSeries.length; s++) {\n      const singleSeries = multipleSeries[s];\n      if (series === singleSeries) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  getSeriesByIndex(index) {\n    const series = this.getSeries();\n    return series[index];\n  }\n\n  getSeriesById(id) {\n    for (const singleSeries of this.getSeries()) {\n      if (singleSeries.id === id) {\n        return singleSeries;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the trials from classmates\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Whether to get the work only from the\n   * period the student is in or from all the periods. The possible values\n   * are \"period\" or \"class\".\n   * @return a promise that will return all the trials from the classmates\n   */\n  getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource) {\n    const deferred = this.$q.defer();\n    this.StudentDataService.getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource).then((componentStates) => {\n      const promises = [];\n      for (const componentState of componentStates) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n      }\n      this.$q.all(promises).then((promiseResults) => {\n        const mergedTrials = [];\n        for (const trials of promiseResults) {\n          for (const trial of trials) {\n            mergedTrials.push(trial);\n          }\n        }\n        deferred.resolve(mergedTrials);\n      });\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Get the trials from a component state.\n   * Note: The code in this function doesn't actually require usage of a\n   * promise. It's just the code that calls this function that utilizes\n   * promise functionality. It's possible to refactor the code so that this\n   * function doesn't need to return a promise.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param componentState the component state\n   * @return a promise that will return the trials from the component state\n   */\n  getTrialsFromComponentState(nodeId, componentId, componentState) {\n    const deferred = this.$q.defer();\n    const mergedTrials = [];\n    const nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      const series = studentData.series;\n      const newTrial = {\n        id: this.UtilService.generateKey(10),\n        name: nodePositionAndTitle,\n        show: true,\n        series: series\n      };\n      mergedTrials.push(newTrial);\n    } else {\n      const trials = studentData.trials;\n      if (trials != null) {\n        for (const trial of trials) {\n          const newTrial = this.UtilService.makeCopyOfJSONObject(trial);\n          newTrial.name = nodePositionAndTitle;\n          newTrial.show = true;\n          mergedTrials.push(newTrial);\n        }\n      }\n    }\n    deferred.resolve(mergedTrials);\n    return deferred.promise;\n  }\n\n  /**\n   * Handle importing external data (we only support csv for now)\n   * @param studentAsset CSV file student asset\n   */\n  attachStudentAsset(studentAsset) {\n    this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n      this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n        const rowData = this.StudentDataService.CSVToArray(assetContent);\n        const params = {\n          skipFirstRow: true,\n          xColumn: 0,\n          yColumn: 1\n        };\n        const seriesData = this.convertRowDataToSeriesData(rowData, params);\n        const newSeriesIndex = this.series.length;\n        const series = {\n          name: copiedAsset.fileName,\n          color: this.seriesColors[newSeriesIndex],\n          marker: {\n            'symbol': this.seriesMarkers[newSeriesIndex]\n          },\n          canEdit: false\n        };\n        this.series[newSeriesIndex] = series;\n        series.data = seriesData;\n        this.isDirty = true;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      });\n    });\n  }\n\n  /**\n   * Convert the table data into series data\n   * @param componentState the component state to get table data from\n   * @param params (optional) the params to specify what columns\n   * and rows to use from the table data\n   */\n  convertRowDataToSeriesData(rows, params) {\n    const data = [];\n    let skipFirstRow = this.getSkipFirstRowValue(params);\n    let xColumn = this.getXColumnValue(params);\n    let yColumn = this.getYColumnValue(params);\n    for (let r = 0; r < rows.length; r++) {\n      if (skipFirstRow && r === 0) {\n        continue;\n      }\n      const row = rows[r];\n      const xCell = row[xColumn];\n      const yCell = row[yColumn];\n      if (xCell != null && yCell != null) {\n        this.addPointFromTableIntoData(xCell, yCell, data);\n      }\n    }\n    return data;\n  }\n\n  getSkipFirstRowValue(params) {\n    if (params == null) {\n      return false;\n    } else {\n      return params.skipFirstRow;\n    }\n  }\n\n  getXColumnValue(params) {\n    if (params == null || params.xColumn == null) {\n      return 0;\n    } else {\n      return params.xColumn;\n    }\n  }\n\n  getYColumnValue(params) {\n    if (params == null || params.yColumn == null) {\n      return 1;\n    } else {\n      return params.yColumn;\n    }\n  }\n\n  addPointFromTableIntoData(xCell, yCell, data) {\n    let xText = xCell.text;\n    let yText = yCell.text;\n    if (xText != null && xText !== '' && yText != null && yText !== '') {\n      const xNumber = Number(xText);\n      const yNumber = Number(yText);\n      const point = [];\n      if (!isNaN(xNumber)) {\n        point.push(xNumber);\n      } else {\n        point.push(xText);\n      }\n      if (!isNaN(yNumber)) {\n        point.push(yNumber);\n      } else {\n        point.push(yText);\n      }\n      data.push(point);\n    }\n  }\n\n  setSeriesIds(allSeries) {\n    const usedSeriesIds = this.getAllUsedSeriesIds(allSeries);\n    for (const singleSeries of allSeries) {\n      if (singleSeries.id == null) {\n        const nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n        singleSeries.id = nextSeriesId;\n        usedSeriesIds.push(nextSeriesId);\n      }\n    }\n  }\n\n  getAllUsedSeriesIds(allSeries) {\n    const usedSeriesIds = [];\n    for (const singleSeries of allSeries) {\n      usedSeriesIds.push(singleSeries.id);\n    }\n    return usedSeriesIds;\n  }\n\n  /**\n   * Get the next available series id\n   * @param usedSeriesIds an array of used series ids\n   * @returns the next available series id\n   */\n  getNextSeriesId(usedSeriesIds) {\n    let nextSeriesId = null;\n    let currentSeriesNumber = 0;\n    let foundNextSeriesId = false;\n    while (!foundNextSeriesId) {\n      const tempSeriesId = 'series-' + currentSeriesNumber;\n      if (usedSeriesIds.indexOf(tempSeriesId) === -1) {\n        nextSeriesId = tempSeriesId;\n        foundNextSeriesId = true;\n      } else {\n        currentSeriesNumber++;\n      }\n    }\n    return nextSeriesId;\n  }\n\n  handleDeleteKeyPressed() {\n    const series = this.activeSeries;\n    if (this.canEdit(series)) {\n      const chart = $('#' + this.chartId).highcharts();\n      const selectedPoints = chart.getSelectedPoints();\n      let index = null;\n      if (selectedPoints != null) {\n        const indexesToDelete = [];\n        const data = series.data;\n        for (const selectedPoint of selectedPoints) {\n          index = selectedPoint.index;\n          const dataPoint = data[index];\n          if (dataPoint != null) {\n            /*\n             * make sure the x and y values match the selected point\n             * that we are going to delete\n             */\n            if (dataPoint[0] === selectedPoint.x || dataPoint[1] === selectedPoint.y) {\n              indexesToDelete.push(index);\n            }\n          }\n        }\n        /*\n         * order the array from largest to smallest. we are doing this\n         * so that we delete the points from the end first. if we delete\n         * points starting from lower indexes first, then the indexes\n         * will shift and we will end up deleting the wrong points.\n         */\n        indexesToDelete.sort().reverse();\n        // loop through all the indexes and remove them from the series data\n        for (let i = 0; i < indexesToDelete.length; i++) {\n          data.splice(indexesToDelete[i], 1);\n        }\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createNewSeries() {\n    return {\n      name: '',\n      data: [],\n      marker: {\n        symbol: 'circle'\n      },\n      canEdit: true\n    };\n  }\n\n  isActiveSeries(series) {\n    const seriesIndex = this.getSeriesIndex(series);\n    return this.isActiveSeriesIndex(seriesIndex);\n  }\n\n  isActiveSeriesIndex(seriesIndex) {\n    return this.series.indexOf(this.activeSeries) === seriesIndex;\n  }\n\n  isShowSelectSeriesInput() {\n    return this.trialIdsToShow.length && this.hasEditableSeries() &&\n        this.isSelectSeriesVisible && this.series.length > 1;\n  }\n\n  newTrialButtonClicked() {\n    this.newTrial();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  newTrial() {\n    const activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n    const trialNumbers = this.getTrialNumbers();\n    let maxTrialNumber = 0;\n    if (trialNumbers.length > 0) {\n      maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n    }\n    if (this.hideAllTrialsOnNewTrial) {\n      for (const trial of this.trials) {\n        trial.show = false;\n      }\n    }\n    const series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n    const trial = {\n      name: this.$translate('graph.trial') + ' ' + (maxTrialNumber + 1),\n      series: series,\n      show: true,\n      id: this.UtilService.generateKey(10)\n    };\n    this.trials.push(trial);\n    this.activeTrial = trial;\n    this.series = series;\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    } else {\n      this.setActiveSeriesByIndex(activeSeriesIndex);\n    }\n    this.setTrialIdsToShow();\n  }\n\n  getTrialNumbers() {\n    const trialNumbers = [];\n    const trialNumberRegex = /Trial (\\d*)/;\n    for (const trial of this.trials) {\n      const tempTrialName = trial.name;\n      const match = trialNumberRegex.exec(tempTrialName);\n      if (match != null && match.length > 0) {\n        const tempTrialNumber = match[1];\n        trialNumbers.push(parseInt(tempTrialNumber));\n      }\n    }\n    trialNumbers.sort();\n    return trialNumbers;\n  }\n\n  deleteTrial(trialIndex) {\n    const trialToRemove = this.trials[trialIndex];\n    const trialToRemoveId = trialToRemove.id;\n    this.trials.splice(trialIndex, 1);\n    for (let t = 0; t < this.trialIdsToShow.length; t++) {\n      if (trialToRemoveId === this.trialIdsToShow[t]) {\n        this.trialIdsToShow.splice(t, 1);\n      }\n    }\n    if (this.trials.length === 0) {\n      // there are no more trials so we will create a new empty trial\n      this.newTrial();\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n    } else if (this.trials.length > 0) {\n      if (trialToRemove === this.activeTrial) {\n        this.makeHighestTrialActive();\n      }\n    }\n    this.setTrialIdsToShow();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  makeHighestTrialActive() {\n    this.activeTrial = null;\n    this.activeSeries = null;\n    this.series = [];\n    const highestTrial = this.getHighestTrial();\n    if (highestTrial != null) {\n      const seriesIndex = this.getSeriesIndex(this.activeSeries);\n      this.activeTrial = highestTrial;\n      this.setSeries(this.activeTrial.series);\n      if (seriesIndex != null) {\n        this.setActiveSeriesByIndex(seriesIndex);\n      }\n    }\n  }\n\n  getHighestTrial() {\n    let highestTrialIndex = null;\n    let highestTrial = null;\n    for (const trialId of this.trialIdsToShow) {\n      const trial = this.getTrialById(trialId);\n      const trialIndex = this.getTrialIndex(trial);\n      if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n        highestTrialIndex = trialIndex;\n        highestTrial = trial;\n      }\n    }\n    return highestTrial;\n  }\n\n  activeTrialChanged() {\n    const seriesIndex = this.getSeriesIndex(this.activeSeries);\n    const activeTrial = this.activeTrial;\n    this.series = activeTrial.series;\n    this.setActiveSeriesByIndex(seriesIndex);\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  trialIdsToShowChanged() {\n    let trialIdsToShow = this.trialIdsToShow;\n    for (const trial of this.trials) {\n      const id = trial.id;\n      if (trialIdsToShow.indexOf(id) !== -1) {\n        trial.show = true;\n      } else {\n        trial.show = false;\n        if (this.activeTrial != null && this.activeTrial.id === id) {\n          this.activeTrial = null;\n          this.activeSeries = null;\n          this.series = [];\n        }\n      }\n    }\n    if (this.trialIdsToShow.length > 0) {\n      const lastShownTrialId = this.trialIdsToShow[this.trialIdsToShow.length - 1];\n      const lastShownTrial = this.getTrialById(lastShownTrialId);\n      if (lastShownTrial != null) {\n        const seriesIndex = this.getSeriesIndex(this.activeSeries);\n        this.activeTrial = lastShownTrial;\n        this.setSeries(this.activeTrial.series);\n        if (seriesIndex != null) {\n          this.setActiveSeriesByIndex(seriesIndex);\n        }\n      }\n    }\n    // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n    // TODO: figure out why this check is sometimes necessary and remove\n    for (let a = 0; a < trialIdsToShow.length; a++) {\n      let idToShow = trialIdsToShow[a];\n      if (!this.getTrialById(idToShow)) {\n        trialIdsToShow.splice(a, 1);\n      }\n    }\n    /*\n     * Make sure the trialIdsToShow has actually changed. Sometimes\n     * trialIdsToShowChanged() gets called even if trialIdsToShow\n     * does not change because the model for the trial checkbox\n     * select is graphController.trials. This means trialIdsToShowChanged()\n     * will be called when we replace the trials increateComponentState()\n     * but this does not necessarily mean the trialIdsToShow has changed.\n     * We do this check to minimize the number of times studentDataChanged()\n     * is called.\n     */\n    if (!this.UtilService.arraysContainSameValues(this.previousTrialIdsToShow, trialIdsToShow)) {\n      this.trialIdsToShow = trialIdsToShow;\n      this.studentDataChanged();\n    }\n    /*\n     * Remember the trial ids to show so we can use it to make sure the\n     * trialIdsToShow actually change the next time trialIdsToShowChanged()\n     * is called.\n     */\n    this.previousTrialIdsToShow = this.UtilService.makeCopyOfJSONObject(this.trialIdsToShow);\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  setTrialIdsToShow() {\n    const idsToShow = [];\n    for (const trial of this.trials) {\n      if (trial.show) {\n        idsToShow.push(trial.id);\n      }\n    }\n    this.trialIdsToShow = idsToShow;\n  }\n\n  getSelectedTrialsText() {\n    if (this.trialIdsToShow.length === 1) {\n      const id = this.trialIdsToShow[0];\n      return this.getTrialById(id).name;\n    } else if (this.trialIdsToShow.length > 1) {\n      return this.trialIdsToShow.length + ' ' + this.$translate('graph.trialsShown');\n    } else {\n      return this.$translate('graph.selectTrialsToShow');\n    }\n  }\n\n  /**\n   * Process the student data that we have received from a connected component.\n   * @param studentData The student data from a connected component.\n   * @param params The connected component params.\n   */\n  processConnectedComponentStudentData(studentData, params) {\n    if (params.fields == null) {\n      /*\n       * we do not need to look at specific fields so we will directly\n       * parse the the trial data from the student data.\n       */\n      this.parseLatestTrial(studentData, params);\n    } else {\n      // we need to process specific fields in the student data\n      for (const field of params.fields) {\n        const name = field.name;\n        const when = field.when;\n        const action = field.action;\n        const firstTime = false;\n        if (when === 'firstTime' && firstTime === true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            this.readConnectedComponentFieldFromStudentData(studentData, params, name);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the field from the new student data and perform any processing on our\n   * existing student data based upon the new student data.\n   * @param studentData The new student data from the connected component.\n   * @param params The connected component params.\n   * @param name The field name to read and process.\n   */\n  readConnectedComponentFieldFromStudentData(studentData, params, name) {\n    if (name === 'selectedCells') {\n      // only show the trials that are specified in the selectedCells array\n      let selectedCells = studentData[name];\n      if (selectedCells != null) {\n        let selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (let trial of this.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (name === 'trial') {\n      this.parseLatestTrial(studentData, params);\n    } else if (name === 'trialIdsToDelete') {\n      this.deleteTrialsByTrialId(studentData.trialIdsToDelete);\n    }\n  }\n\n  /**\n   * Delete the trials\n   * @param trialIdsToDelete An array of trial ids to delete\n   */\n  deleteTrialsByTrialId(trialIdsToDelete) {\n    if (trialIdsToDelete != null) {\n      for (let trialIdToDelete of trialIdsToDelete) {\n        this.deleteTrialId(trialIdToDelete);\n      }\n    }\n  }\n\n  /**\n   * Delete a trial\n   * @param trialId The trial id string to delete\n   */\n  deleteTrialId(trialId) {\n    for (let t = 0; t < this.trials.length; t++) {\n      let trial = this.trials[t];\n      if (trial.id === trialId) {\n        this.trials.splice(t, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Parse the latest trial and set it into the component\n   * @param studentData the student data object that has a trials field\n   * @param params (optional) parameters that specify what to use from the\n   * student data\n   */\n  parseLatestTrial(studentData, params) {\n    const latestStudentDataTrial = this.getLatestStudentDataTrial(studentData);\n    const latestStudentDataTrialId = latestStudentDataTrial.id;\n    this.removeDefaultTrialIfNecessary(latestStudentDataTrialId);\n    const latestTrial = this.createNewTrialIfNecessary(latestStudentDataTrialId);\n    this.copySeriesIntoTrial(latestStudentDataTrial, latestTrial, studentData, params);\n    this.copyTrialNameIntoTrial(latestStudentDataTrial, latestTrial);\n    this.copyPlotBandsIntoTrial(latestStudentDataTrial, latestTrial);\n    this.setLastTrialToActive();\n    if (studentData.xPlotLine != null) {\n      this.showXPlotLine(studentData.xPlotLine);\n    }\n    this.setTrialIdsToShow();\n    this.activeTrialChanged();\n  }\n\n  getLatestStudentDataTrial(studentData) {\n    let latestStudentDataTrial = null;\n    if (studentData.trial != null) {\n      latestStudentDataTrial = studentData.trial;\n    }\n    if (studentData.trials != null && studentData.trials.length > 0) {\n      latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n    }\n    return latestStudentDataTrial;\n  }\n\n  hideAllTrials() {\n    for (const trial of this.trials) {\n      trial.show = false;\n    }\n  }\n\n  createNewTrial(id) {\n    return {\n      id: id,\n      name: '',\n      series: [],\n      show: true\n    };\n  }\n\n  copySeries(series) {\n    const newSeries = {\n      name: series.name,\n      data: series.data,\n      color: series.color,\n      canEdit: false,\n      allowPointSelect: false\n    };\n    if (series.marker != null) {\n      newSeries.marker = series.marker;\n    }\n    if (series.dashStyle != null) {\n      newSeries.dashStyle = series.dashStyle;\n    }\n    if (series.allowPointMouseOver != null) {\n      newSeries.allowPointMouseOver = series.allowPointMouseOver;\n    }\n    return newSeries;\n  }\n\n  removeDefaultTrialIfNecessary(latestStudentDataTrialId) {\n    /*\n     * remove the first default trial that is automatically created\n     * when the student first visits the component otherwise there\n     * will be a blank trial.\n     */\n    if (this.trials.length > 0) {\n      const firstTrial = this.trials[0];\n      /*\n       * check if the trial has any series. if the trial doesn't\n       * have any series it means it was automatically created by\n       * the component.\n       */\n      if (this.isTrialHasEmptySeries(firstTrial)) {\n        if (firstTrial.id == null || firstTrial.id !== latestStudentDataTrialId) {\n          this.deleteFirstTrial(this.trials);\n        }\n      }\n    }\n  }\n\n  isTrialHasEmptySeries(trial) {\n    return trial.series == null || trial.series.length === 0 || this.isSeriesEmpty(trial.series);\n  }\n\n  isSeriesEmpty(series) {\n    return series.length === 1 && series[0].data.length === 0;\n  }\n\n  deleteFirstTrial(trials) {\n    trials.shift();\n  }\n\n  createNewTrialIfNecessary(trialId) {\n    let trial = this.getTrialById(trialId);\n    if (trial == null) {\n      if (this.hideAllTrialsOnNewTrial) {\n        this.hideAllTrials();\n      }\n      trial = this.createNewTrial(trialId);\n      trial.show = true;\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n      this.trials.push(trial);\n    }\n    return trial;\n  }\n\n  copySeriesIntoTrial(oldTrial, newTrial, studentData, params) {\n    newTrial.series = [];\n    const series = oldTrial.series;\n    for (let s = 0; s < series.length; s++) {\n      if (this.isAddSeries(params, s)) {\n        newTrial.series.push(this.copySeries(series[s]));\n        if (params.highlightLatestPoint) {\n          this.$timeout(() => {\n            this.highlightPointOnX(studentData.trial.id, studentData.xPointToHighlight);\n          }, 1);\n        }\n      }\n    }\n  }\n\n  isAddSeries(params, seriesIndex) {\n    return params == null || params.seriesNumbers == null || params.seriesNumbers.length === 0 ||\n      (params.seriesNumbers != null && params.seriesNumbers.indexOf(seriesIndex) !== -1);\n  }\n\n  copyTrialNameIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.name != null) {\n      newTrial.name = oldTrial.name;\n    }\n  }\n\n  copyPlotBandsIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.xAxis != null && oldTrial.xAxis.plotBands != null) {\n      if (newTrial.xAxis == null) {\n        newTrial.xAxis = {};\n      }\n      newTrial.xAxis.plotBands = oldTrial.xAxis.plotBands;\n    }\n  }\n\n  setLastTrialToActive() {\n    if (this.trials.length > 0) {\n      this.activeTrial = this.trials[this.trials.length - 1];\n      this.activeTrial.show = true;\n    }\n  }\n\n  getTrialById(id) {\n    for (const trial of this.trials) {\n      if (trial.id === id) {\n        return trial;\n      }\n    }\n    return null;\n  }\n\n  hasEditableSeries() {\n    for (const singleSeries of this.getSeries()) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Update the x and y axis min and max values if necessary to make sure\n   * all points are visible in the graph view.\n   * @param series the an array of series\n   * @param xAxis the x axis object\n   * @param yAxis the y axis object\n   */\n  updateMinMaxAxisValues(series, xAxis, yAxis) {\n    const minMaxValues = this.getMinMaxValues(series);\n    this.updateXAxisMinMaxIfNecessary(xAxis, minMaxValues);\n    this.updateYAxisMinMaxIfNecessary(yAxis, minMaxValues);\n  }\n\n  updateXAxisMinMaxIfNecessary(xAxis, minMaxValues) {\n    if (xAxis != null && !xAxis.locked) {\n      if (minMaxValues.xMin < xAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.min = null;\n        xAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.xMax >= xAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.max = null;\n        xAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  updateYAxisMinMaxIfNecessary(yAxis, minMaxValues) {\n    if (yAxis != null && !yAxis.locked) {\n      if (minMaxValues.yMin < yAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.min = null;\n        yAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.yMax >= yAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.max = null;\n        yAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  getMinMaxValues(series) {\n    let xMin = 0;\n    let xMax = 0;\n    let yMin = 0;\n    let yMax = 0;\n    for (const singleSeries of series) {\n      const data = singleSeries.data;\n      for (const dataPoint of data) {\n        if (dataPoint != null) {\n          let tempX = null;\n          let tempY = null;\n          if (dataPoint.constructor.name === 'Object') {\n            tempX = dataPoint.x;\n            tempY = dataPoint.y;\n          } else if (dataPoint.constructor.name === 'Array') {\n            tempX = dataPoint[0];\n            tempY = dataPoint[1];\n          } else if (dataPoint.constructor.name === 'Number') {\n            tempY = dataPoint;\n          }\n          if (tempX > xMax) {\n            xMax = tempX;\n          }\n          if (tempX < xMin) {\n            xMin = tempX;\n          }\n          if (tempY > yMax) {\n            yMax = tempY;\n          }\n          if (tempY < yMin) {\n            yMin = tempY;\n          }\n        }\n      }\n    }\n    const result = {\n      xMin: xMin,\n      xMax: xMax,\n      yMin: yMin,\n      yMax: yMax\n    };\n    return result;\n  }\n\n  clearSeriesIds(series) {\n    for (const singleSeries of series) {\n      singleSeries.id = null;\n    }\n  }\n\n  snipGraph($event) {\n    const chart = $('#' + this.chartId).highcharts();\n    const svgString = chart.getSVG();\n    const hiddenCanvas = document.getElementById(this.hiddenCanvasId);\n    canvg(hiddenCanvas, svgString, { renderCallback: () => {\n        const base64Image = hiddenCanvas.toDataURL('image/png');\n        const imageObject = this.UtilService.getImageObjectFromBase64String(base64Image);\n        this.NotebookService.addNote($event, imageObject);\n      }\n    });\n  }\n\n  readCSVIntoActiveSeries(csvString) {\n    const lines = csvString.split(/\\r\\n|\\n/);\n    this.activeSeries.data = [];\n    for (const line of lines) {\n      const values = line.split(',');\n      const x = parseFloat(values[0]);\n      const y = parseFloat(values[1]);\n      if (!isNaN(x) && !isNaN(y)) {\n        const dataPoint = [x, y];\n        this.activeSeries.data.push(dataPoint);\n      }\n    }\n  }\n\n  setUploadedFileName(fileName) {\n    this.uploadedFileName = fileName;\n  }\n\n  getUploadedFileName() {\n    return this.uploadedFileName;\n  }\n\n  /**\n   * Convert all the data points in the series\n   * @param series convert the data points in the series\n   * @param xAxisType the new x axis type to convert to\n   */\n  convertSeriesDataPoints(series, xAxisType) {\n    const data = series.data;\n    const convertedData = [];\n    for (let d = 0; d < data.length; d++) {\n      const oldDataPoint = data[d];\n      if (xAxisType == null || xAxisType === '' || xAxisType === 'limits') {\n        if (!Array.isArray(oldDataPoint)) {\n          convertedData.push([(d + 1), oldDataPoint]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      } else if (xAxisType === 'categories') {\n        if (Array.isArray(oldDataPoint)) {\n          convertedData.push(oldDataPoint[1]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      }\n    }\n    series.data = convertedData;\n  }\n\n  /**\n   * Round the number according to the authoring settings\n   * @param number a number\n   * @return the rounded number\n   */\n  performRounding(number) {\n    if (this.componentContent.roundValuesTo === 'integer') {\n      number = this.roundToNearestInteger(number);\n    } else if (this.componentContent.roundValuesTo === 'tenth') {\n      number = this.roundToNearestTenth(number);\n    } else if (this.componentContent.roundValuesTo === 'hundredth') {\n      number = this.roundToNearestHundredth(number);\n    }\n    return number;\n  }\n\n  roundToNearestInteger(x) {\n    x = parseFloat(x);\n    x = Math.round(x);\n    return x;\n  }\n\n  roundToNearestTenth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 10) / 10;\n    return x;\n  }\n\n  roundToNearestHundredth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 100) / 100;\n    return x;\n  }\n\n  /**\n   * Set the active series to the first series that the student can edit\n   * or if there are no series the student can edit, set the active series\n   * to the first series.\n   */\n  setDefaultActiveSeries() {\n    for (let s = 0; s < this.series.length; s++) {\n      const singleSeries = this.series[s];\n      if (singleSeries.canEdit) {\n        this.setActiveSeriesByIndex(s);\n        break;\n      }\n    }\n    if (this.activeSeries == null && this.series.length > 0) {\n      /*\n       * we did not find any series that the student can edit so we will\n       * just set the active series to be the first series\n       */\n      this.setActiveSeriesByIndex(0);\n    }\n  }\n\n  setVerticalPlotLine(x) {\n    const plotLine = {\n      color: 'red',\n      width: 2,\n      value: x,\n      zIndex: 5\n    };\n    this.plotLines = [\n      plotLine\n    ];\n    /*\n     * Call $apply() so that the red plot line position gets updated. If we\n     * don't call this, the line position won't get updated unless the student\n     * moves their mouse around which forces angular to update.\n     */\n    this.$timeout(() => {\n      this.$scope.$apply();\n    });\n  }\n\n  /**\n   * Import any work we need from connected components\n   * @param {boolean} isReset (optional) Whether this function call was\n   * triggered by the student clicking the reset button.\n   */\n  handleConnectedComponents(isReset) {\n    /*\n     * This will hold all the promises that will return the trials that we want. The trials will\n     * either be from this student or from classmates.\n     */\n    const promises = [];\n    /*\n     * this will end up containing the background from the last\n     * connected component\n     */\n    let connectedComponentBackgroundImage = null;\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const type = connectedComponent.type;\n      if (type === 'showClassmateWork') {\n        connectedComponentBackgroundImage =\n            this.handleShowClassmateWorkConnectedComponent(connectedComponent, promises);\n      } else if (type === 'showWork' || type === 'importWork' || type == null) {\n        connectedComponentBackgroundImage =\n            this.handleShowOrImportWorkConnectedComponent(connectedComponent, promises);\n      }\n    }\n\n    /*\n     * wait for all the promises to resolve because we may need to request the classmate work from\n     * the server\n     */\n    this.$q.all(promises).then(\n        this.handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset));\n  }\n\n  handleShowClassmateWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    this.isDisabled = true;\n    if (this.ConfigService.isPreview()) {\n      const latestComponentState = this.StudentDataService.\n      getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n      if (latestComponentState != null) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (latestComponentState != null &&\n            latestComponentState.studentData != null &&\n            latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    } else {\n      const showClassmateWorkSource = connectedComponent.showClassmateWorkSource;\n      promises.push(this.getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource));\n      let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n      component = this.ProjectService.injectAssetPaths(component);\n      connectedComponentBackgroundImage = component.backgroundImage;\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleShowOrImportWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    let latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (latestComponentState != null) {\n      if (latestComponentState.componentType === 'ConceptMap' ||\n          latestComponentState.componentType === 'Draw' ||\n          latestComponentState.componentType === 'Label') {\n        let connectedComponentOfComponentState = this.UtilService.\n            getConnectedComponentByComponentState(this.componentContent, latestComponentState);\n        if (connectedComponentOfComponentState.importWorkAsBackground === true) {\n          promises.push(this.setComponentStateAsBackgroundImage(latestComponentState));\n        }\n      } else {\n        if (connectedComponent.type === 'showWork') {\n          this.isDisabled = true;\n          latestComponentState = this.UtilService.makeCopyOfJSONObject(latestComponentState);\n          const canEdit = false;\n          this.setCanEditForAllSeries(latestComponentState, canEdit);\n        }\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (latestComponentState != null &&\n          latestComponentState.studentData != null &&\n          latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset) {\n    return (promiseResults) => {\n      /*\n       * First we will accumulate all the trials into one new component state and then we will\n       * perform connected component processing.\n       */\n      const mergedTrials = [];\n      /*\n       * Loop through all the promise results. There will be a promise result for each component we\n       * are importing from. Each promiseResult is an array of trials or an image url.\n       */\n      for (const promiseResult of promiseResults) {\n        if (promiseResult instanceof Array) {\n          const trials = promiseResult;\n          for (const trial of trials) {\n            mergedTrials.push(trial);\n          }\n        } else if (typeof(promiseResult) === 'string') {\n          connectedComponentBackgroundImage = promiseResult;\n        }\n      }\n      let newComponentState = this.NodeService.createNewComponentState();\n      newComponentState.studentData = {\n        trials: mergedTrials,\n        version: 2\n      };\n      if (this.componentContent.backgroundImage != null &&\n          this.componentContent.backgroundImage !== '') {\n        newComponentState.studentData.backgroundImage = this.componentContent.backgroundImage;\n      } else if (connectedComponentBackgroundImage != null) {\n        newComponentState.studentData.backgroundImage = connectedComponentBackgroundImage;\n      }\n      newComponentState = this.handleConnectedComponentsHelper(newComponentState, isReset);\n      this.setStudentWork(newComponentState);\n      this.studentDataChanged();\n    };\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   * @return A promise that returns the url of the image that is generated from the component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    return this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      return image.url;\n    });\n  }\n\n  /**\n   * Perform additional connected component processing.\n   * @param newComponentState The new component state generated by accumulating the trials from all\n   * the connected component student data.\n   */\n  handleConnectedComponentsHelper(newComponentState, isReset) {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null || isReset ||\n        !this.GraphService.componentStateHasStudentWork(mergedComponentState)) {\n      mergedComponentState = newComponentState;\n    } else {\n      /*\n       * This component has previous student data so this is not the first time this component is\n       * being loaded.\n       */\n      firstTime = false;\n    }\n    const componentStates = [];\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const nodeId = connectedComponent.nodeId;\n      const componentId = connectedComponent.componentId;\n      const type = connectedComponent.type;\n      if (type === 'showClassmateWork') {\n        mergedComponentState = newComponentState;\n      } else if (type === 'importWork' || type == null) {\n        const connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        const fields = connectedComponent.fields;\n        if (connectedComponentState != null) {\n          mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n        } else {\n          mergedComponentState = this.mergeNullComponentState(mergedComponentState, fields, firstTime);\n        }\n      }\n    }\n    if (mergedComponentState.studentData.version == null) {\n      mergedComponentState.studentData.version = this.studentDataVersion;\n    }\n    if (newComponentState.studentData.backgroundImage != null) {\n      mergedComponentState.studentData.backgroundImage = newComponentState.studentData.backgroundImage;\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the component state from the connected component into the component\n   * state from this component.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at in the connectedComponentState. Each object can contain 3 fields which\n   * are \"name\", \"when\", \"action\".\n   * - \"name\" is the name of the field in the connectedComponentState.studentData object\n   *   For example, if connectedComponentState is from a Graph component, we may author the value to be \"trials\"\n   * - \"when\" possible values\n   *     \"firstTime\" means we merge the \"name\" field only the first time we visit the component\n   *     \"always\" means we merge the \"name\" field every time we visit the component\n   * - \"action\" possible values\n   *     \"read\" means we look at the value of the \"name\" field and perform processing on it to generate\n   *       some value that we will set into the baseComponentState\n   *     \"write\" means we copy the value of the \"name\" field from connectedComponentState.studentData to\n   *       baseComponentState.studentData\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeComponentState(baseComponentState, connectedComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (connectedComponentState.componentType === 'Graph' && firstTime) {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(connectedComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime) {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * We want to merge the component state from the connected component into this\n   * component but the connected component does not have any work. We will\n   * instead use default values.\n   * @param baseComponentState The component state from this component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at. (see comment for mergeComponentState() for more information).\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeNullComponentState(baseComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      // TODO\n    } else {\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime == true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            const connectedComponentState = null;\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Read the field from the connected component's component state.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param field The field to look at in the connected component's component\n   * state.\n   */\n  readConnectedComponentField(baseComponentState, connectedComponentState, field) {\n    if (field === 'selectedCells') {\n      if (connectedComponentState == null) {\n        // we will default to hide all the trials\n        for (const trial of baseComponentState.studentData.trials) {\n          trial.show = false;\n        }\n      } else {\n        // loop through all the trials and show the ones that are in the selected cells array\n        const studentData = connectedComponentState.studentData;\n        const selectedCells = studentData[field];\n        const selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (const trial of baseComponentState.studentData.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (field === 'trial') {\n      // TODO\n    }\n  }\n\n  setCanEditForAllSeries(componentState, canEdit) {\n    for (const trial of componentState.studentData.trials) {\n      for (const singleSeries of trial.series) {\n        singleSeries.canEdit = canEdit;\n      }\n    }\n  }\n\n  undoClicked() {\n    if (this.undoStack.length > 0) {\n      const previousComponentState = this.undoStack.pop();\n      this.setStudentWork(previousComponentState);\n      this.previousComponentState = previousComponentState;\n      this.drawGraph();\n    } else if (this.initialComponentState == null) {\n      this.previousComponentState = null;\n      this.trials = [];\n      this.newTrial();\n      this.resetSeriesHelper();\n      this.drawGraph();\n    }\n  }\n\n  trialCheckboxClicked() {\n    this.addNextComponentStateToUndoStack = true;\n  }\n\n  getCategoryByIndex(index) {\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.categories != null &&\n        index < this.componentContent.xAxis.categories.length) {\n      return this.componentContent.xAxis.categories[index];\n    }\n    return null;\n  }\n\n  isMousePlotLineOn() {\n    return this.isMouseXPlotLineOn() || this.isMouseYPlotLineOn();\n  }\n\n  isMouseXPlotLineOn() {\n    return this.componentContent.showMouseXPlotLine;\n  }\n\n  isMouseYPlotLineOn() {\n    return this.componentContent.showMouseYPlotLine;\n  }\n\n  isSaveMouseOverPoints() {\n    return this.componentContent.saveMouseOverPoints;\n  }\n\n  getXValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[0];\n    }\n    return null;\n  }\n\n  getYValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[1];\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointX() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getXValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointY() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getYValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  showXPlotLineIfOn(text = null) {\n    if (this.isMouseXPlotLineOn()) {\n      let x = this.getLatestMouseOverPointX();\n      if (x == null) {\n        x = 0;\n      }\n      this.showXPlotLine(x, text);\n    }\n  }\n\n  showYPlotLineIfOn(text = null) {\n    if (this.isMouseYPlotLineOn()) {\n      let y = this.getLatestMouseOverPointY();\n      if (y == null) {\n        y = 0;\n      }\n      this.showYPlotLine(y, text);\n    }\n  }\n\n  showTooltipOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (const singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n        }\n      }\n      const points = series.points;\n      for (const point of points) {\n        if (point.x === x) {\n          chart.tooltip.refresh(point);\n        }\n      }\n    }\n  }\n\n  highlightPointOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (const singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n          this.removeHoverStateFromPoints(singleSeries.points);\n        }\n      }\n      this.setHoverStateOnPoint(series.points, x);\n    }\n  }\n\n  removeHoverStateFromPoints(points) {\n    for (const point of points) {\n      point.setState('');\n    }\n  }\n\n  setHoverStateOnPoint(points, x) {\n    for (const point of points) {\n      if (point.x === x) {\n        point.setState('hover');\n      }\n    }\n  }\n\n  showTooltipOnLatestPoint() {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      const latestSeries = chart.series[chart.series.length - 1];\n      const points = latestSeries.points;\n      if (points.length > 0) {\n        const latestPoint = points[points.length - 1];\n        chart.tooltip.refresh(latestPoint);\n      }\n    }\n  }\n\n  convertSelectedCellsToTrialIds(selectedCells) {\n    const selectedTrialIds = [];\n    for (const selectedCell of selectedCells) {\n      const material = selectedCell.material;\n      const bevTemp = selectedCell.bevTemp;\n      const airTemp = selectedCell.airTemp;\n      const selectedTrialId = material + '-' + bevTemp + 'Liquid';\n      selectedTrialIds.push(selectedTrialId);\n    }\n    return selectedTrialIds;\n  }\n\n  isTrialsEnabled() {\n    return this.componentContent.enableTrials === true;\n  }\n\n  isStudentDataVersion1(version) {\n    if (version == null) {\n      return this.studentDataVersion == null || this.studentDataVersion === 1;\n    } else {\n      return version === 1;\n    }\n  }\n}\n\nGraphController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphController;\n"]}