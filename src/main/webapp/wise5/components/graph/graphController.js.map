{"version":3,"sources":["graphController.es6"],"names":[],"mappings":"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","file":"graphController.js","sourcesContent":["\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                GraphService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = 800;\n\n        // the height of the graph\n        this.height = 500;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                // get the series\n                                var series = this.$scope.graphController.series[seriesIndex];\n\n                                if (series == null) {\n                                    // the series is null so we will create a series\n                                    series = {};\n                                    this.$scope.graphController.series[seriesIndex] = series;\n                                }\n\n                                // set the data into the series\n                                series.data = data;\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeriesIndex(s)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        //this.setSeriesIds(allSeries);\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drope event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the series can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = xAxis;\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = yAxis;\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n\n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // populate the student data into the component\n                this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the series data\n            studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n}\n\n\nGraphController.$inject = [\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}