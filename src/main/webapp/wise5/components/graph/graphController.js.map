{"version":3,"sources":["graphController.es6"],"names":["GraphController","$q","$rootScope","$scope","ConfigService","GraphService","NodeService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","series","seriesColors","seriesMarkers","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","activeSeries","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","chartId","width","height","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","trials","activeTrial","studentDataVersion","showSaveButton","showSubmitButton","isResetSeriesButtonVisible","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","xAxis","yAxis","setupGraph","componentState","importWorkNodeId","importWorkComponentId","importWork","newTrial","setStudentWork","calculateDisabled","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","makeCopyOfJSONObject","parseTrials","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","deleteKeyPressedListenerDestroyer","handleDeleteKeyPressed","title","graphType","allowDecimals","thisGraphController","getSeries","length","setSeries","setActiveSeriesByIndex","s","tempSeries","regression","regressionSettings","xMin","min","xMax","max","numberOfPoints","draggableX","draggableY","allowPointSelect","canEdit","isActiveSeriesIndex","cursor","regressionSeries","allSeries","concat","setSeriesIds","chartConfig","options","tooltip","formatter","x","roundToNearestTenth","y","chart","events","click","e","currentTime","Date","getTime","lastDropTime","value","addPointToSeries","studentDataChanged","plotOptions","stickyTracking","point","drag","dragging","drop","target","index","loading","pointAdded","d","tempPoint","tempDataXValue","splice","push","tempData","userOptions","seriesId","activeSeriesId","result","t","tempTrial","setActiveSeries","getSeriesByIndex","setXAxis","setYAxis","confirmMessage","seriesName","name","answer","confirm","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","$$phase","$apply","createNewComponentState","getTrialIndex","getXAxis","getYAxis","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","show","prompt","showPreviousWorkPrompt","seriesArray","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","fileName","color","marker","r","row","xCell","yCell","xText","yText","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","indexOf","parseFloat","Math","round","$","highcharts","selectedPoints","getSelectedPoints","indexes","selectedPoint","sort","reverse","i","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","editedComponentContent","toJson","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newSeries","createNewSeries","symbol","message","exitListener","$broadcast","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","exec","tempTrialNumber","parseInt","maxTrialNumber","trialIndex","activeTrialChanged","singleSeries","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                GraphService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = 800;\n\n        // the height of the graph\n        this.height = 500;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        this.trials = [];\n        this.activeTrial = null;\n        this.studentDataVersion = 2;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else {\n                    \n                    /* \n                     * trials are enabled so we will create an empty trial\n                     * since there is no student work\n                     */\n                    this.newTrial();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                var studentDataVersion = this.$scope.graphController.studentDataVersion;\n                                \n                                if (studentDataVersion == null || studentDataVersion == 1) {\n                                    // the student data is version 1 which has no trials\n                                    \n                                    // get the series\n                                    var series = this.$scope.graphController.series[seriesIndex];\n\n                                    if (series == null) {\n                                        // the series is null so we will create a series\n                                        series = {};\n                                        this.$scope.graphController.series[seriesIndex] = series;\n                                    }\n\n                                    // set the data into the series\n                                    series.data = data;\n                                } else {\n                                    // the student data is the newer version that has trials\n                                    \n                                    // get the active trial\n                                    var trial = this.$scope.graphController.activeTrial;\n                                    \n                                    if (trial != null && trial.series != null) {\n                                        \n                                        // get the series\n                                        var series = trial.series[seriesIndex];\n                                        \n                                        if (series == null) {\n                                            // the series is null so we will create a series\n                                            series = {};\n                                            this.$scope.graphController.series[seriesIndex] = series;\n                                        }\n\n                                        // set the data into the series\n                                        series.data = data;\n                                    }\n                                }\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                } else if (componentType == 'Embedded') {\n                    \n                    // convert the embedded data to series data\n                    if (componentState != null) {\n\n                        /*\n                         * make a copy of the component state so that we don't\n                         * reference the exact component state object from the\n                         * other component in case field values change.\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n                        \n                        // parse the trials and set it into the component\n                        this.parseTrials(studentData);\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeriesIndex(s)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        this.setSeriesIds(allSeries);\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drope event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the series can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n    \n    /**\n     * Set the trials\n     * @param trials the trials\n     */\n    setTrials(trials) {\n        this.trials = trials;\n    }\n    \n    /**\n     * Get the trials\n     * @return the trials\n     */\n    getTrials() {\n        return this.trials;\n    }\n    \n    /**\n     * Get the index of the trial\n     * @param trial the trial object\n     * @return the index of the trial within the trials array\n     */\n    getTrialIndex(trial) {\n        \n        var index = -1;\n        \n        if (trial != null) {\n            \n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n                \n                if (trial == tempTrial) {\n                    // we have found the trial we are looking for\n                    index = t;\n                    break;\n                }\n            }\n        }\n        \n        return index;\n    }\n    \n    /**\n     * Set the active trial\n     * @param index the index of the trial to make active\n     */\n    setActiveTrialByIndex(index) {\n        \n        if (index != null) {\n            \n            // get the trial\n            var trial = this.trials[index];\n            \n            if (trial != null) {\n                // make the trial the active trial\n                this.activeTrial = trial;\n            }\n        }\n    }\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = xAxis;\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = yAxis;\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n\n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                \n                if (studentData.version == null || studentData.version == 1) {\n                    // the student data is version 1 which has no trials\n                    this.studentDataVersion = 1;\n                    \n                    // populate the student data into the component\n                    this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                } else {\n                    // the student data is the newer version that has trials\n                    \n                    this.studentDataVersion = studentData.version;\n                    \n                    if (studentData.trials != null) {\n                        \n                        // make a copy of the trials\n                        var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n                        \n                        // remember the trials\n                        this.setTrials(trialsCopy);\n                        \n                        // get the trial to show\n                        var activeTrialIndex = studentData.activeTrialIndex;\n                        \n                        if (activeTrialIndex == null) {\n                            /*\n                             * there is no active trial index so we will show the\n                             * last trial\n                             */\n                            \n                            if (trialsCopy.length > 0) {\n                                //make the last trial the active trial to show\n                                this.setActiveTrialByIndex(studentData.trials.length - 1);\n                            }\n                        } else {\n                            // there is an active trial index\n                            this.setActiveTrialByIndex(activeTrialIndex);\n                        }\n                        \n                        if (this.activeTrial != null && this.activeTrial.series != null) {\n                            // set the active trial series to be the series to display\n                            this.series = this.activeTrial.series;\n                        }\n                        \n                        // redraw the graph\n                        this.setupGraph();\n                    }\n                }\n                \n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            studentData.version = this.studentDataVersion;\n\n            if (this.studentDataVersion == 1) {\n                // insert the series data\n                studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n            } else {\n                if (this.trials != null) {\n                    // make a copy of the trials\n                    studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n                    \n                    // remember which trial is being shown\n                    var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n                    studentData.activeTrialIndex = activeTrialIndex;\n                }\n            }\n            \n            /*\n            \n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n            */\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n            \n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            /*\n             * loop through all the series to get the existing ids that are\n             * being used\n             */\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId != null) {\n                    // remember the series id\n                    usedSeriesIds.push(seriesId);\n                }\n            }\n            \n            // loop through all the series\n            for (var y = 0; y < allSeries.length; y++) {\n                var series = allSeries[y];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n    \n    /**\n     * Create a new trial\n     */\n    newTrial() {\n        \n        // get the index of the active series\n        var activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n        \n        // get the current number of trials\n        var trialCount = this.trials.length;\n        \n        // make a copy of the original series (most likely blank with no points)\n        var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n        \n        // regex to find the trial number from the trial names\n        var trialNameRegex = /Trial (\\d*)/;\n        var trialNumbers = [];\n        \n        // loop through all the trials\n        for (var t = 0; t < this.trials.length; t++) {\n            var tempTrial = this.trials[t];\n            \n            if (tempTrial != null) {\n                // get a trial name\n                var tempTrialName = tempTrial.name;\n                \n                // run the regex matcher on the trial name\n                var match = trialNameRegex.exec(tempTrialName);\n                var tempTrialNumber = match[1];\n                \n                if (tempTrialNumber != null) {\n                    /*\n                     * get the number e.g. if the trial name is \"Trial 2\",\n                     * the trial number is 2\n                     */\n                    trialNumbers.push(parseInt(tempTrialNumber));\n                }\n            }\n        }\n        \n        // sort the trial numbers from smallest to largest\n        trialNumbers.sort();\n        \n        var maxTrialNumber = 0;\n        \n        if (trialNumbers.length > 0) {\n            // get the highest trial number\n            maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n        }\n        \n        // make a new trial with a trial number one larger than the existing max\n        var trial = {};\n        trial.name = 'Trial ' + (maxTrialNumber + 1);\n        trial.series = series;\n        \n        // add the trial to the array of trials\n        this.trials.push(trial);\n        \n        // set the new trial to be the active trial\n        this.activeTrial = trial;\n        \n        // set the series to be displayed\n        this.series = series;\n        \n        /*\n         * set the active series index so that the the active series\n         * is the same as before.\n         */\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n        \n        // redraw the graph\n        this.setupGraph();\n        \n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * Delete a trial\n     */\n    deleteTrial() {\n        \n        /*\n         * get the index of the active trial which will be the trial we are\n         * going to delete\n         */\n        var trialIndex = this.trials.indexOf(this.activeTrial);\n        \n        if (trialIndex != null && trialIndex != -1) {\n            \n            // remove the trial from the array of trials\n            this.trials.splice(trialIndex, 1);\n            \n            if (this.trials.length == 0) {\n                // there are no more trials so we will create a new empty trial\n                this.newTrial();\n            } else if (this.trials.length > 0) {\n                // set the active trial to the next highest trial number\n                if (trialIndex > (this.trials.length - 1)) {\n                    /*\n                     * the trial index is higher than any available index\n                     * in the trials array so we will just use the last index\n                     */\n                    this.activeTrial = this.trials[this.trials.length - 1];\n                    this.activeTrialChanged(this.trials.length - 1);\n                } else {\n                    // make the next highest trial the active trial\n                    this.activeTrial = this.trials[trialIndex];\n                    this.activeTrialChanged(trialIndex);\n                }\n            }\n        }\n        \n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * The student has selected a different trial to view\n     */\n    activeTrialChanged() {\n        \n        // get the index of the active series\n        var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n        \n        // get the active trial\n        var activeTrial = this.activeTrial;\n        \n        if (activeTrial != null) {\n            \n            // get the series from the trial\n            var series = activeTrial.series;\n            \n            // set the series to be displayed\n            this.series = series;\n            \n            /*\n             * set the active series index so that the the active series\n             * is the same as before.\n             */\n            this.setActiveSeriesByIndex(activeSeriesIndex);\n            \n            // redraw the graph\n            this.setupGraph();\n        }\n        \n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * Parse the trials and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseTrials(studentData) {\n        \n        if (studentData != null) {\n            \n            // get the trials\n            var trials = studentData.trials;\n            \n            if (trials != null) {\n                \n                this.trials = [];\n                \n                // loop through all the trials in the student data\n                for (var t = 0; t < trials.length; t++) {\n                    var tempTrial = trials[t];\n                    \n                    if (tempTrial != null) {\n                        \n                        // create a trial object\n                        var newTrial = {};\n                        \n                        if (tempTrial.name != null) {\n                            \n                            // set the trial name\n                            newTrial.name = tempTrial.name;\n                        }\n                        \n                        if (tempTrial.series != null) {\n                            \n                            // set the trial series\n                            newTrial.series = [];\n                            \n                            var tempSeries = tempTrial.series;\n                            \n                            if (tempSeries != null) {\n                                \n                                // loop through all the series in the trial\n                                for (var s = 0; s < tempSeries.length; s++) {\n                                    \n                                    // get a single series\n                                    var singleSeries = tempSeries[s];\n                                    \n                                    if (singleSeries != null) {\n                                        \n                                        // get the series name and data\n                                        var seriesName = singleSeries.name;\n                                        var seriesData = singleSeries.data;\n                                        \n                                        // make a series object\n                                        var newSeries = {};\n                                        newSeries.name = seriesName;\n                                        newSeries.data = seriesData;\n                                        newSeries.canEdit = false;\n                                        newSeries.allowPointSelect = false;\n                                        \n                                        // add the series to the trial\n                                        newTrial.series.push(newSeries);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // add the trial to the array of trials\n                        this.trials.push(newTrial);\n                    }\n                }\n                \n                if (trials.length > 0) {\n                    // make the last trial the active trial\n                    this.activeTrial = this.trials[trials.length - 1];\n                }\n            }\n            \n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n}\n\n\nGraphController.$inject = [\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}