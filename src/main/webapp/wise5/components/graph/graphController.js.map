{"version":3,"sources":["graphController.es6"],"names":["GraphController","$injector","$q","$rootScope","$scope","$timeout","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","series","seriesColors","seriesMarkers","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","activeSeries","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","chartId","width","height","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","showSaveButton","showSubmitButton","isResetSeriesButtonVisible","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","xAxis","yAxis","setupGraph","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","newTrial","setStudentWork","calculateDisabled","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","makeCopyOfJSONObject","parseLatestTrial","studentDataChanged","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","deleteKeyPressedListenerDestroyer","handleDeleteKeyPressed","fileUploadChanged","element","overwrite","activeSeriesData","length","answer","confirm","files","reader","FileReader","onload","fileContent","result","scope","readCSV","setUploadedFileName","fileName","name","readAsText","uploadAsset","value","title","graphType","allowDecimals","thisGraphController","getSeries","enableTrials","t","show","tempSeries","concat","setSeries","setActiveSeriesByIndex","s","regression","regressionSettings","xMin","min","xMax","max","numberOfPoints","draggableX","draggableY","allowPointSelect","canEdit","isActiveSeries","cursor","regressionSeries","allSeries","clearSeriesIds","setSeriesIds","updateMinMaxAxisValues","timeout","chartConfig","options","tooltip","formatter","x","roundToNearestTenth","y","chart","plotBackgroundImage","events","click","e","currentTime","Date","getTime","lastDropTime","addPointToSeries","plotOptions","stickyTracking","point","drag","dragging","drop","target","index","loading","func","reflow","pointAdded","d","tempPoint","tempDataXValue","splice","push","tempData","userOptions","seriesId","activeSeriesId","tempTrial","i","currentSeries","editableTrials","canEditTrial","setActiveSeries","getSeriesByIndex","setXAxis","setYAxis","confirmMessage","seriesName","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","$$phase","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","prompt","showPreviousWorkPrompt","seriesArray","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","color","marker","r","row","xCell","yCell","xText","yText","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","indexOf","parseFloat","Math","round","$","highcharts","selectedPoints","getSelectedPoints","indexes","selectedPoint","sort","reverse","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newSeries","createNewSeries","symbol","message","exitListener","$broadcast","isActiveSeriesIndex","hasEditableSeries","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","exec","tempTrialNumber","parseInt","maxTrialNumber","generateKey","trialIndex","trialToRemove","trialToRemoveId","highestTrialIndex","highestTrial","trialId","getTrialById","getSelectedTrialsText","lastShownTrialId","lastShownTrial","a","idToShow","idsToShow","singleSeries","activeTrialChanged","latestStudentDataTrial","latestStudentDataTrialId","firstTrial","shift","latestTrial","seriesColor","minMaxValues","getMinMaxValues","minPadding","maxPadding","yMin","yMax","tempX","tempY","constructor","isNotebookEnabled","$event","highchartsDiv","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","csv","lines","split","lineNumber","line","values","dataPoint","component","componentHasWork","importPreviousWork","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($injector,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                ConfigService,\n                GraphService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // whether to only show the new trial when a new trial is created\n        this.hideAllTrialsOnNewTrial = true;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = null;\n\n        // the height of the graph\n        this.height = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.trials = [];\n        this.activeTrial = null;\n        this.trialIdsToShow = [];\n        this.selectedTrialsText = \"\";\n\n        this.studentDataVersion = 2;\n\n        this.canCreateNewTrials = false;\n        this.canDeleteTrials = false;\n        \n        this.uploadedFileName = null;\n        \n        this.backgroundImage = null;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.componentContent.canCreateNewTrials) {\n                this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n            }\n\n            if (this.componentContent.canDeleteTrials) {\n                this.canDeleteTrials = this.componentContent.canDeleteTrials;\n            }\n\n            if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n                this.hideAllTrialsOnNewTrial = false;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                //this.isResetGraphButtonVisible = this.componentContent.showResetGraphButton;\n                //this.isResetSeriesButtonVisible = this.componentContent.showResetSeriesButton;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'authoring') {\n                this.backgroundImage = this.componentContent.backgroundImage;\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.backgroundImage = this.componentContent.backgroundImage;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n                \n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n                \n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n                \n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else {\n\n                    /*\n                     * trials are enabled so we will create an empty trial\n                     * since there is no student work\n                     */\n                    this.newTrial();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                var studentDataVersion = this.$scope.graphController.studentDataVersion;\n\n                                if (studentDataVersion == null || studentDataVersion == 1) {\n                                    // the student data is version 1 which has no trials\n\n                                    // get the series\n                                    var series = this.$scope.graphController.series[seriesIndex];\n\n                                    if (series == null) {\n                                        // the series is null so we will create a series\n                                        series = {};\n                                        this.$scope.graphController.series[seriesIndex] = series;\n                                    }\n\n                                    // set the data into the series\n                                    series.data = data;\n                                } else {\n                                    // the student data is the newer version that has trials\n\n                                    // get the active trial\n                                    var trial = this.$scope.graphController.activeTrial;\n\n                                    if (trial != null && trial.series != null) {\n\n                                        // get the series\n                                        var series = trial.series[seriesIndex];\n\n                                        if (series == null) {\n                                            // the series is null so we will create a series\n                                            series = {};\n                                            this.$scope.graphController.series[seriesIndex] = series;\n                                        }\n\n                                        // set the data into the series\n                                        series.data = data;\n                                    }\n                                }\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                } else if (componentType == 'Embedded') {\n\n                    // convert the embedded data to series data\n                    if (componentState != null) {\n\n                        /*\n                         * make a copy of the component state so that we don't\n                         * reference the exact component state object from the\n                         * other component in case field values change.\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        // parse the latest trial and set it into the component\n                        this.parseLatestTrial(studentData);\n\n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n        \n        /**\n         * The student has changed the file input\n         * @param element the file input element\n         */\n        this.$scope.fileUploadChanged = function(element) {\n            \n            var overwrite = true;\n            \n            // check if the active series already has data\n            if (this.graphController != null &&\n                this.graphController.activeSeries != null &&\n                this.graphController.activeSeries.data != null) {\n                \n                var activeSeriesData = this.graphController.activeSeries.data;\n                \n                if (activeSeriesData.length > 0) {\n                    /*\n                     * the active series already has data so we will ask the \n                     * student if they want to overwrite the data\n                     */\n                    \n                    var answer = confirm(\"Are you sure you want to overwrite the current line data?\");\n                    \n                    if (!answer) {\n                        // the student does not want to overwrite the data\n                        overwrite = false;\n                    }\n                }\n            }\n            \n            if (overwrite) {\n                // obtain the file content and overwrite the data in the graph\n                \n                // get the files from the file input element\n                var files = element.files;\n                \n                if (files != null && files.length > 0) {\n                    \n                    var reader = new FileReader();\n                    \n                    // this is the callback function for reader.readAsText()\n                    reader.onload = function() {\n                        \n                        // get the file contente\n                        var fileContent = reader.result;\n                        \n                        /*\n                         * read the csv file content and load the data into\n                         * the active series\n                         */\n                        this.scope.graphController.readCSV(fileContent);\n                        \n                        // remember the file name\n                        this.scope.graphController.setUploadedFileName(this.fileName);\n                        \n                        // redraw the graph\n                        this.scope.graphController.setupGraph();\n                        \n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.scope.graphController.studentDataChanged();\n                    }\n                    \n                    /*\n                     * save a reference to this scope in the reader so that we\n                     * have access to the scope and graphController in the\n                     * reader.onload() function\n                     */\n                    reader.scope = this;\n                    \n                    // remember the file name\n                    reader.fileName = files[0].name;\n                    \n                    // read the text from the file\n                    reader.readAsText(files[0]);\n                    \n                    // upload the file to the studentuploads folder\n                    this.graphController.StudentAssetService.uploadAsset(files[0]);\n                }\n            }\n            \n            /*\n             * clear the file input element value so that onchange() will be\n             * called again if the student wants to upload the same file again\n             */\n            element.value = null;\n        }\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if (this.componentContent.enableTrials) {\n            /*\n             * trials are enabled so we will show the ones the student\n             * has checked\n             */\n            series = [];\n\n            var trials = this.trials;\n\n            // loop through all the trials\n            for (var t = 0; t < trials.length; t++) {\n                var trial = trials[t];\n\n                if (trial != null) {\n\n                    if (trial.show) {\n                        /*\n                         * we want to show this trial so we will append the\n                         * series from it\n                         */\n                        var tempSeries = trial.series;\n                        series = series.concat(tempSeries);\n                    }\n                }\n            }\n        }\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeries(tempSeries)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        // clear all the series ids\n        this.clearSeriesIds(allSeries);\n\n        // give all series ids\n        this.setSeriesIds(allSeries);\n\n        /*\n         * update the min and max x and y values if necessary so that all\n         * points are visible\n         */\n        this.updateMinMaxAxisValues(allSeries, xAxis, yAxis);\n        let timeout = this.$timeout;\n        \n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    plotBackgroundImage: this.backgroundImage,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drop event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false,\n            func: function (chart) {\n                timeout(function () {\n                    chart.reflow();\n                }, 1000);\n            }\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the student can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n\n    /**\n     * Set the trials\n     * @param trials the trials\n     */\n    setTrials(trials) {\n        this.trials = trials;\n    }\n\n    /**\n     * Get the trials\n     * @return the trials\n     */\n    getTrials() {\n        return this.trials;\n    }\n\n    /**\n     * Get the index of the trial\n     * @param trial the trial object\n     * @return the index of the trial within the trials array\n     */\n    getTrialIndex(trial) {\n\n        var index = -1;\n\n        if (trial != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (trial == tempTrial) {\n                    // we have found the trial we are looking for\n                    index = t;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    /**\n     * Set the active trial\n     * @param index the index of the trial to make active\n     */\n    setActiveTrialByIndex(index) {\n\n        if (index != null) {\n\n            // get the trial\n            var trial = this.trials[index];\n\n            if (trial != null) {\n                // make the trial the active trial\n                this.activeTrial = trial;\n            }\n        }\n    }\n\n    /**\n     * Check whether the student is allowed to edit a given trial\n     * @param trial the trial object to check\n     * @return boolean whether the student can edit the trial\n     */\n    canEditTrial(trial) {\n        let result = false;\n        let series = trial.series;\n\n        for (let i = 0; i < series.length; i++) {\n            let currentSeries = series[i];\n            if (currentSeries.canEdit) {\n                // at least one series in this trial is editable\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set whether to show the active trial select menu\n     * @return whether to show the active trial select menu\n     */\n    showSelectActiveTrials() {\n        let result = false;\n        let editableTrials = 0;\n        for (let i = 0; i < this.trials.length; i++) {\n            let trial = this.trials[i];\n            if (this.canEditTrial(trial) && trial.show) {\n                editableTrials++;\n                if (editableTrials > 1) {\n                    // there are more than one editable trials, so show the menu\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n        \n        // set the background image\n        this.backgroundImage = this.componentContent.backgroundImage;\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n                    \n                    if (this.componentContent.xAxis != null) {\n                        // reset the x axis\n                        this.setXAxis(this.componentContent.xAxis);\n                    }\n\n                    if (this.componentContent.yAxis != null) {\n                        // reset the y axis\n                        this.setYAxis(this.componentContent.yAxis);\n                    }\n                    \n                    // reset the background image\n                    this.backgroundImage = this.componentContent.backgroundImage;\n                    \n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (studentData.version == null || studentData.version == 1) {\n                    // the student data is version 1 which has no trials\n                    this.studentDataVersion = 1;\n\n                    // populate the student data into the component\n                    this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                } else {\n                    // the student data is the newer version that has trials\n\n                    this.studentDataVersion = studentData.version;\n\n                    if (studentData.trials != null && studentData.trials.length > 0) {\n\n                        // make a copy of the trials\n                        var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n\n                        // remember the trials\n                        this.setTrials(trialsCopy);\n\n                        // get the trial to show\n                        var activeTrialIndex = studentData.activeTrialIndex;\n\n                        if (activeTrialIndex == null) {\n                            /*\n                             * there is no active trial index so we will show the\n                             * last trial\n                             */\n\n                            if (trialsCopy.length > 0) {\n                                //make the last trial the active trial to show\n                                this.setActiveTrialByIndex(studentData.trials.length - 1);\n                            }\n                        } else {\n                            // there is an active trial index\n                            this.setActiveTrialByIndex(activeTrialIndex);\n                        }\n\n                        if (this.activeTrial != null && this.activeTrial.series != null) {\n                            // set the active trial series to be the series to display\n                            this.series = this.activeTrial.series;\n                        }\n\n                        // redraw the graph\n                        this.setupGraph();\n                    }\n                }\n\n                this.setTrialIdsToShow();\n\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                if (studentData.backgroundImage != null) {\n                    // set the background from the student data\n                    this.backgroundImage = studentData.backgroundImage;\n                }\n                \n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n                // and it still seems to work. Do we need this line?\n                // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n                //this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            studentData.version = this.studentDataVersion;\n\n            if (this.studentDataVersion == 1) {\n                // insert the series data\n                studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n            } else {\n                if (this.trials != null) {\n                    // make a copy of the trials\n                    studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n\n                    // remember which trial is being shown\n                    var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n                    studentData.activeTrialIndex = activeTrialIndex;\n                }\n            }\n\n            /*\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n            */\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n            \n            // get the uploaded file name if any\n            var uploadedFileName = this.getUploadedFileName();\n            \n            if (uploadedFileName != null) {\n                // set the uploaded file name\n                studentData.uploadedFileName = uploadedFileName;\n            }\n            \n            if (this.backgroundImage != null) {\n                studentData.backgroundImage = this.backgroundImage;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                \n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                \n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            /*\n             * loop through all the series to get the existing ids that are\n             * being used\n             */\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId != null) {\n                    // remember the series id\n                    usedSeriesIds.push(seriesId);\n                }\n            }\n\n            // loop through all the series\n            for (var y = 0; y < allSeries.length; y++) {\n                var series = allSeries[y];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = authoringComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series != null && this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.trialIdsToShow.length && this.hasEditableSeries() && this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Create a new trial\n     */\n    newTrial() {\n\n        // get the current number of trials\n        var trialCount = this.trials.length;\n\n        // make a copy of the original series (most likely blank with no points)\n        var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n\n        // regex to find the trial number from the trial names\n        var trialNameRegex = /Trial (\\d*)/;\n        var trialNumbers = [];\n\n        // loop through all the trials\n        for (var t = 0; t < this.trials.length; t++) {\n            var tempTrial = this.trials[t];\n\n            if (tempTrial != null) {\n                // get a trial name\n                var tempTrialName = tempTrial.name;\n\n                // run the regex matcher on the trial name\n                var match = trialNameRegex.exec(tempTrialName);\n\n                if (match != null && match.length > 0) {\n                    // we have found a trial name that looks like \"Trial X\"\n\n                    /*\n                     * get the trial number e.g. if the trial name is \"Trial 3\",\n                     * the trial number is 3\n                     */\n                    var tempTrialNumber = match[1];\n\n                    if (tempTrialNumber != null) {\n                        /*\n                         * get the number e.g. if the trial name is \"Trial 2\",\n                         * the trial number is 2\n                         */\n                        trialNumbers.push(parseInt(tempTrialNumber));\n                    }\n                }\n            }\n        }\n\n        // sort the trial numbers from smallest to largest\n        trialNumbers.sort();\n\n        var maxTrialNumber = 0;\n\n        if (trialNumbers.length > 0) {\n            // get the highest trial number\n            maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n        }\n\n        if (this.hideAllTrialsOnNewTrial) {\n            // we only want to show the latest trial\n\n            // loop through all the existing trials and hide them\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null) {\n                    tempTrial.show = false;\n                }\n            }\n        }\n\n        // make a new trial with a trial number one larger than the existing max\n        var trial = {};\n        trial.name = 'Trial ' + (maxTrialNumber + 1);\n        trial.series = series;\n        trial.show = true;\n        trial.id = this.UtilService.generateKey(10);\n\n        // add the trial to the array of trials\n        this.trials.push(trial);\n\n        // set the new trial to be the active trial\n        this.activeTrial = trial;\n\n        // set the series to be displayed\n        this.series = series;\n\n        var activeSeriesIndex = 0;\n\n        if (this.activeSeries != null) {\n            // get the index of the active series\n            activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n        }\n\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n\n        this.setTrialIdsToShow();\n\n        // redraw the graph\n        this.setupGraph();\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * Delete a trial\n     * @param trialIndex the index (in the trials array) of the trial to delete\n     */\n    deleteTrial(trialIndex) {\n\n        if (trialIndex == null) {\n            trialIndex = this.trials.indexOf(this.activeTrial);\n        }\n\n        if (trialIndex != null && trialIndex != -1) {\n            \n            // get the trial to remove\n            var trialToRemove = this.trials[trialIndex];\n            \n            // get the trial id of the trial to remove\n            var trialToRemoveId = trialToRemove.id;\n            \n            // remove the trial from the array of trials\n            this.trials.splice(trialIndex, 1);\n            \n            // remove the trial id from the trial ids to show array\n            for (var t = 0; t < this.trialIdsToShow.length; t++) {\n                if (trialToRemoveId == this.trialIdsToShow[t]) {\n                    // remove the trial id\n                    this.trialIdsToShow.splice(t, 1);\n                    \n                    /*\n                     * move the counter back one because we have just removed\n                     * an element from the array. a trial id should never show\n                     * up more than once in the trialIdsToShow array but we\n                     * will go through the whole array just to be safe.\n                     */\n                    t--;\n                }\n            }\n            \n            if (this.trials.length == 0) {\n                // there are no more trials so we will create a new empty trial\n                this.newTrial();\n\n                // reset the axis limits\n                this.setXAxis(this.componentContent.xAxis);\n                this.setYAxis(this.componentContent.yAxis);\n            } else if (this.trials.length > 0) {\n                if (trialToRemove == this.activeTrial) {\n                    // remove the references to the trial that we are deleting\n                    this.activeTrial = null;\n                    this.activeSeries = null;\n                    this.series = null;\n                    \n                    // make the highest shown trial the active trial\n                    var highestTrialIndex = null;\n                    var highestTrial = null;\n                    \n                    // loop through the shown trials\n                    for (var t = 0; t < this.trialIdsToShow.length; t++) {\n                        var trialId = this.trialIdsToShow[t];\n                        \n                        // get one of the shown trials\n                        var trial = this.getTrialById(trialId);\n                        \n                        if (trial != null) {\n                            \n                            // get the trial index\n                            var trialIndex = this.getTrialIndex(trial);\n                            \n                            if (trialIndex != null) {\n                                \n                                if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n                                    /*\n                                     * this is the highest trial we have seen so\n                                     * far so we will remember it\n                                     */\n                                    highestTrialIndex = trialIndex;\n                                    highestTrial = trial;\n                                }\n                            }\n                        }\n                    }\n                    \n                    if (highestTrial != null) {\n                        /*\n                         * get the index of the active series so that we can set the\n                         * same series to be active in the new active trial\n                         */\n                        var seriesIndex = this.getSeriesIndex(this.activeSeries);\n                        \n                        // set the highest shown trial to be the active trial\n                        this.activeTrial = highestTrial;\n                        \n                        // set the series\n                        this.setSeries(this.activeTrial.series);\n                        \n                        if (seriesIndex != null) {\n                            // set the active series\n                            this.setActiveSeriesByIndex(seriesIndex);\n                        }\n                    }\n                }\n            }\n\n            this.setTrialIdsToShow();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n        \n        // update the selected trial text\n        this.selectedTrialsText = this.getSelectedTrialsText();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected a different trial to edit\n     */\n    activeTrialChanged() {\n\n        // get the active trial\n        var activeTrial = this.activeTrial;\n\n        if (activeTrial != null) {\n\n            // get the index of the active series\n            var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n            if (seriesIndex == null) {\n                // default the index to 0\n                seriesIndex = 0;\n            }\n\n            // get the series from the trial\n            var series = activeTrial.series;\n\n            // set the series to be displayed\n            this.series = series;\n\n            /*\n             * set the active series index to the same series index of the\n             * previously active series\n             */\n            this.setActiveSeriesByIndex(seriesIndex);\n\n            // redraw the graph\n            this.setupGraph();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected different trials to view\n     */\n    trialIdsToShowChanged() {\n        // get the trial indexes to show\n        let trialIdsToShow = this.trialIdsToShow;\n        let trials = this.trials;\n\n        // update the trials\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            let id = trial.id;\n            \n            if (trialIdsToShow.indexOf(id) > -1) {\n                trial.show = true;\n            } else {\n                trial.show = false;\n                \n                if (this.activeTrial != null && this.activeTrial.id == id) {\n                    // the active trial is no longer shown\n                    this.activeTrial = null;\n                    this.activeSeries = null;\n                    this.series = null;\n                }\n            }\n        }\n        \n        // get the latest trial that was checked and make it the active trial\n        if (this.trialIdsToShow.length > 0) {\n            \n            // get the latest trial that was checked\n            var lastShownTrialId = this.trialIdsToShow[this.trialIdsToShow.length - 1];\n            var lastShownTrial = this.getTrialById(lastShownTrialId);\n            \n            if (lastShownTrial != null) {\n                \n                /*\n                 * get the index of the active series so that we can set the\n                 * same series to active in the new active trial\n                 */\n                var seriesIndex = this.getSeriesIndex(this.activeSeries);\n                \n                // set the last shown trial to be the active trial\n                this.activeTrial = lastShownTrial;\n                \n                // set the series\n                this.setSeries(this.activeTrial.series);\n                \n                if (seriesIndex != null) {\n                    // set the active series\n                    this.setActiveSeriesByIndex(seriesIndex);\n                }\n            }\n        }\n        \n        // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n        // TODO: figure out why this check is sometimes necessary and remove\n        for (let a = 0; a < trialIdsToShow.length; a++) {\n            let idToShow = trialIdsToShow[a];\n            if (!this.getTrialById(idToShow)) {\n                trialIdsToShow.splice(a, 1);\n            }\n            this.trialIdsToShow = trialIdsToShow;\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // update the selected trial text\n        this.selectedTrialsText = this.getSelectedTrialsText();\n    };\n\n    /**\n     * Set which trials are selected in the trial select model\n     */\n    setTrialIdsToShow() {\n        let idsToShow = [];\n\n        let trials = this.trials;\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            if (trial.show) {\n                // trial is visible on graph, so add it to the ids to show model\n                let id = trial.id;\n                idsToShow.push(id);\n            }\n        }\n\n        this.trialIdsToShow = idsToShow;\n    };\n\n    /**\n     * Get the text to show in the trials select dropdown\n     */\n    getSelectedTrialsText() {\n        if (this.trialIdsToShow.length === 1) {\n            let id = this.trialIdsToShow[0];\n            let name = this.getTrialById(id).name;\n            return name;\n        } else if (this.trialIdsToShow.length > 1) {\n            return this.trialIdsToShow.length + \" trials shown\";\n        } else {\n            return \"Select trials to show\";\n        }\n    };\n\n    /**\n     * Parse the trials and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseTrials0(studentData) {\n\n        if (studentData != null) {\n\n            // get the trials\n            var trials = studentData.trials;\n\n            if (trials != null) {\n\n                this.trials = [];\n\n                // loop through all the trials in the student data\n                for (var t = 0; t < trials.length; t++) {\n                    var tempTrial = trials[t];\n\n                    if (tempTrial != null) {\n\n                        // create a trial object\n                        var newTrial = {};\n\n                        if (tempTrial.name != null) {\n\n                            // set the trial name\n                            newTrial.name = tempTrial.name;\n                        }\n\n                        if (tempTrial.series != null) {\n\n                            // set the trial series\n                            newTrial.series = [];\n\n                            var tempSeries = tempTrial.series;\n\n                            if (tempSeries != null) {\n\n                                // loop through all the series in the trial\n                                for (var s = 0; s < tempSeries.length; s++) {\n\n                                    // get a single series\n                                    var singleSeries = tempSeries[s];\n\n                                    if (singleSeries != null) {\n\n                                        // get the series name and data\n                                        var seriesName = singleSeries.name;\n                                        var seriesData = singleSeries.data;\n\n                                        // make a series object\n                                        var newSeries = {};\n                                        newSeries.name = seriesName;\n                                        newSeries.data = seriesData;\n                                        newSeries.canEdit = false;\n                                        newSeries.allowPointSelect = false;\n\n                                        // add the series to the trial\n                                        newTrial.series.push(newSeries);\n                                    }\n                                }\n                            }\n                        }\n\n                        // add the trial to the array of trials\n                        this.trials.push(newTrial);\n                    }\n                }\n\n                if (trials.length > 0) {\n                    // make the last trial the active trial\n                    this.activeTrial = this.trials[trials.length - 1];\n                }\n            }\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Parse the latest trial and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseLatestTrial(studentData) {\n\n        if (studentData != null) {\n\n            var latestStudentDataTrial = null;\n\n            if (studentData.trial != null) {\n                // the student data only has one trial\n                latestStudentDataTrial = studentData.trial;\n            }\n\n            if (studentData.trials != null && studentData.trials.length > 0) {\n                // the student data has an array of trials\n                latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n            }\n\n            if (latestStudentDataTrial != null) {\n\n                // get the latest student data trial id\n                var latestStudentDataTrialId = latestStudentDataTrial.id;\n\n                /*\n                 * remove the first default trial that is automatically created\n                 * when the student first visits the component otherwise there\n                 * will be a blank trial.\n                 */\n                if (this.trials.length > 0) {\n\n                    // get the first trial\n                    var firstTrial = this.trials[0];\n\n                    if (firstTrial != null) {\n\n                        /*\n                         * check if the trial has any series. if the trial doesn't\n                         * have any series it means it was automatically created by\n                         * the component.\n                         */\n                        if (!firstTrial.series.length || (firstTrial.series.length === 1 && !firstTrial.series[0].data.length)) {\n                            if (firstTrial.id !== latestStudentDataTrialId) {\n                                // delete the first trial\n                                this.trials.shift();\n                            }\n                        }\n                    }\n                }\n\n\n                // get the trial with the given trial id\n                var latestTrial = this.getTrialById(latestStudentDataTrialId);\n\n                if (latestTrial == null) {\n                    /*\n                     * we did not find a trial with the given id which means\n                     * this is a new trial\n                     */\n\n                    if (this.hideAllTrialsOnNewTrial) {\n                        // we only show the latest trial when a new trial starts\n\n                        // loop through all the existing trials and hide them\n                        for (var t = 0; t < this.trials.length; t++) {\n                            var tempTrial = this.trials[t];\n\n                            if (tempTrial != null) {\n                                tempTrial.show = false;\n                            }\n                        }\n                    }\n\n                    // create the new trial\n                    latestTrial = {};\n\n                    latestTrial.id = latestStudentDataTrialId;\n\n                    latestTrial.show = true;\n\n                    this.setXAxis(this.componentContent.xAxis);\n                    this.setYAxis(this.componentContent.yAxis);\n\n                    // add the trial to the array of trials\n                    this.trials.push(latestTrial);\n                }\n\n                if (latestStudentDataTrial.name != null) {\n\n                    // set the trial name\n                    latestTrial.name = latestStudentDataTrial.name;\n                }\n\n                if (latestStudentDataTrial.series != null) {\n\n                    // set the trial series\n                    latestTrial.series = [];\n\n                    var tempSeries = latestStudentDataTrial.series;\n\n                    if (tempSeries != null) {\n\n                        // loop through all the series in the trial\n                        for (var s = 0; s < tempSeries.length; s++) {\n\n                            // get a single series\n                            var singleSeries = tempSeries[s];\n\n                            if (singleSeries != null) {\n\n                                // get the series name and data\n                                var seriesName = singleSeries.name;\n                                var seriesData = singleSeries.data;\n                                var seriesColor = singleSeries.color;\n\n                                // make a series object\n                                var newSeries = {};\n                                newSeries.name = seriesName;\n                                newSeries.data = seriesData;\n                                newSeries.color = seriesColor;\n                                newSeries.canEdit = false;\n                                newSeries.allowPointSelect = false;\n\n                                // add the series to the trial\n                                latestTrial.series.push(newSeries);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (this.trials.length > 0) {\n                // make the last trial the active trial\n                this.activeTrial = this.trials[this.trials.length - 1];\n                this.activeTrial.show = true;\n            }\n\n            this.setTrialIdsToShow();\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Get the trial by id\n     * @param id the trial id\n     * @returns the trial with the given id or null\n     */\n    getTrialById(id) {\n\n        var trial = null;\n\n        if (id != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null && tempTrial.id == id) {\n                    // we have found the trial with the id we want\n                    trial = tempTrial;\n                    break;\n                }\n            }\n        }\n\n        return trial;\n    }\n\n    /**\n     * Check if there is an editable series\n     * @return whether there is an editable series\n     */\n    hasEditableSeries() {\n\n        var result = false;\n\n        // get the array of series\n        var series = this.getSeries();\n\n        if (series != null) {\n\n            // loop through all the lines\n            for (var s = 0; s < series.length; s++) {\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    if (tempSeries.canEdit) {\n                        // this line can be edited\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Update the x and y axis min and max values if necessary to make sure\n     * all points are visible in the graph view.\n     * @param series the an array of series\n     * @param xAxis the x axis object\n     * @param yAxis the y axis object\n     */\n    updateMinMaxAxisValues(series, xAxis, yAxis) {\n\n        // get the min and max x and y values\n        var minMaxValues = this.getMinMaxValues(series);\n\n        if (minMaxValues != null) {\n\n            if (xAxis != null) {\n                if (minMaxValues.xMin < xAxis.min) {\n                    /*\n                     * there is a point that has a smaller x value than the\n                     * specified x axis min. we will remove the min value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the min x value automatically\n                     */\n                    xAxis.min = null;\n                    xAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.xMax >= xAxis.max) {\n                    /*\n                     * there is a point that has a larger x value than the\n                     * specified x axis max. we will remove the max value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the max x value automatically\n                     */\n                    xAxis.max = null;\n                    xAxis.maxPadding = 0.2;\n                }\n            }\n\n            if (yAxis != null) {\n                if (minMaxValues.yMin < yAxis.min) {\n                    /*\n                     * there is a point that has a smaller y value than the\n                     * specified y axis min. we will remove the min value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the min y value automatically\n                     */\n                    yAxis.min = null;\n                    yAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.yMax >= yAxis.max) {\n                    /*\n                     * there is a point that has a larger y value than the\n                     * specified y axis max. we will remove the max value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the max y value automatically\n                     */\n                    yAxis.max = null;\n                    yAxis.maxPadding = 0.2;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the min and max x and y values\n     * @param series an array of series\n     * @returns an object containing the min and max x and y values from the\n     * series data\n     */\n    getMinMaxValues(series) {\n\n        var result = {};\n        var xMin = 0;\n        var xMax = 0;\n        var yMin = 0;\n        var yMax = 0;\n\n        if (series != null) {\n\n            // loop through all the series\n            for (var s = 0; s < series.length; s++) {\n\n                // get a single series\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    // get the data from the single series\n                    var data = tempSeries.data;\n\n                    if (data != null) {\n\n                        // loop through all the data points in the single series\n                        for (var d = 0; d < data.length; d++) {\n                            var tempData = data[d];\n\n                            var tempX = null;\n                            var tempY = null;\n\n                            if (tempData != null) {\n                                if (tempData.constructor.name == 'Object') {\n                                    /*\n                                     * the element is an object so we will get\n                                     * the x and y fields\n                                     */\n                                    tempX = tempData.x;\n                                    tempY = tempData.y;\n                                } else if (tempData.constructor.name == 'Array') {\n                                    /*\n                                     * the element is an array so we will get\n                                     * the first and second element in the array\n                                     * which correspond to the x and y values\n                                     */\n                                    tempX = tempData[0];\n                                    tempY = tempData[1];\n                                }\n                            }\n\n                            if (tempX > xMax) {\n                                /*\n                                 * we have found a data point with a greater x\n                                 * value than what we have previously found\n                                 */\n                                xMax = tempX;\n                            }\n\n                            if (tempX < xMin) {\n                                /*\n                                 * we have found a data point with a smaller x\n                                 * value than what we have previously found\n                                 */\n                                xMin = tempX\n                            }\n\n                            if (tempY > yMax) {\n                                /*\n                                 * we have found a data point with a greater y\n                                 * value than what we have previously found\n                                 */\n                                yMax = tempY;\n                            }\n\n                            if (tempY < yMin) {\n                                /*\n                                 * we have found a data point with a smaller y\n                                 * value than what we have previously found\n                                 */\n                                yMin = tempY;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        result.xMin = xMin;\n        result.xMax = xMax;\n        result.yMin = yMin;\n        result.yMax = yMax;\n\n        return result;\n    }\n\n    /**\n     * Clear all the series ids\n     * @param allSeries all of the series\n     */\n    clearSeriesIds(allSeries) {\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var s = 0; s < allSeries.length; s++) {\n                var tempSeries = allSeries[s];\n\n                if (tempSeries != null) {\n                    // clear the id\n                    tempSeries.id = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable Trials\" checkbox was clicked\n     */\n    authoringViewEnableTrialsClicked() {\n\n        if (this.authoringComponentContent.enableTrials) {\n            // trials are now enabled\n            this.authoringComponentContent.canCreateNewTrials = true;\n            this.authoringComponentContent.canDeleteTrials = true;\n        } else {\n            // trials are now disabled\n            this.authoringComponentContent.canCreateNewTrials = false;\n            this.authoringComponentContent.canDeleteTrials = false;\n            this.authoringComponentContent.hideAllTrialsOnNewTrial = true;\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the highcharts div\n        var highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n\n        if (highchartsDiv != null && highchartsDiv.length > 0) {\n            highchartsDiv = highchartsDiv[0];\n\n            // convert the model element to a canvas element\n            html2canvas(highchartsDiv).then((canvas) => {\n\n                // get the canvas as a base64 string\n                var img_b64 = canvas.toDataURL('image/png');\n\n                // get the image object\n                var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            });\n        }\n    }\n    \n    /**\n     * Read a csv string and load the data into the active series\n     * @param csv a csv string\n     */\n    readCSV(csv) {\n        \n        if (csv != null) {\n            \n            // splite the string into lines\n            var lines = csv.split(/\\r\\n|\\n/);\n            \n            // clear the data in the active series\n            this.activeSeries.data = [];\n            \n            // loop through all the lines\n            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n                \n                // get a line\n                var line = lines[lineNumber];\n                \n                if (line != null) {\n                    \n                    // split the line to get the values\n                    var values = line.split(\",\");\n                    \n                    if (values != null) {\n                        \n                        // get the x and y values\n                        var x = parseFloat(values[0]);\n                        var y = parseFloat(values[1]);\n                        \n                        if (!isNaN(x) && !isNaN(y)) {\n                            // make the data point\n                            var dataPoint = [x, y];\n                            \n                            // add the data point to the active series\n                            this.activeSeries.data.push(dataPoint);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Set the uploaded file name\n     * @param fileName the file name\n     */\n    setUploadedFileName(fileName) {\n        this.uploadedFileName = fileName;\n    }\n    \n    /**\n     * Get the uploaded file name\n     * @return the uploaded file name\n     */\n    getUploadedFileName() {\n        return this.uploadedFileName;\n    }\n    \n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work \n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\n\nGraphController.$inject = [\n    '$injector',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}