{"version":3,"sources":["graphController.es6"],"names":[],"mappings":"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","file":"graphController.js","sourcesContent":["\n//import $ from 'jquery';\nimport Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\nimport draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($rootScope,\n                $scope,\n                GraphService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = true;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.component;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetGraphButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isDisabled = true;\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                //var showPreviousWorkPrompt = this.componentContent.showPreviousWorkPrompt;\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                /*\n                 if (!showPreviousWorkPrompt) {\n                 this.componentContent = '';\n                 }\n                 */\n\n                // hide the prompt, save, submit, and reset graph buttons when showing previous work\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                if (componentState == null) {\n                    // the component state will be passed into the scope when we are in the grading tool\n                    componentState = this.$scope.componentState;\n                }\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // setup the graph\n                this.setupGraph();\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                // setup the graph\n                this.setupGraph();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                // get the series\n                                var series = this.$scope.graphController.series[seriesIndex];\n\n                                if (series == null) {\n                                    // the series is null so we will create a series\n                                    series = {};\n                                    this.$scope.graphController.series[seriesIndex] = series;\n                                }\n\n                                // set the data into the series\n                                series.data = data;\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Handle the delete key press\n         */\n        this.$scope.handleDeleteKeyPressed = function() {\n            this.$scope.graphController.handleDeleteKeyPressed();\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.graphController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.graphController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.graphController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.StudentDataService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                } else if (tempSeries.canEdit) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.cursor = 'move';\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        //this.setSeriesIds(allSeries);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    type: graphType,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n\n                                    /*\n                                     * the last drope event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            /*\n                             * check if the student can click to add data\n                             * on the graph\n                             */\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var series = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (series != null && thisGraphController.canEdit(series)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // remove any point with the given x value\n                                    //thisGraphController.removePointFromSeries(series, x);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(series, x, y);\n\n                                    /*\n                                     * notify the controller that the student data has changed\n                                     * so that the graph will be redrawn\n                                     */\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        allowPointSelect: true,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    // get the active series\n                                    var series = thisGraphController.activeSeries;\n\n                                    // check if the student is allowed to edit the active series\n                                    if (series != null && thisGraphController.canEdit(series)) {\n                                        // set a flag to note that the student is dragging a point\n                                        thisGraphController.dragging = true;\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    // get the active series\n                                    var series = thisGraphController.activeSeries;\n\n                                    // check if the student is allowed to edit the active series\n                                    if (series != null && thisGraphController.canEdit(series)) {\n\n                                        if (thisGraphController.dragging) {\n\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var currentTarget = e.currentTarget;\n\n                                            if (currentTarget != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(currentTarget.x);\n                                                var y = thisGraphController.roundToNearestTenth(currentTarget.y);\n\n                                                // get the index of the point\n                                                var index = currentTarget.index;\n\n                                                // get the series data\n                                                var data = series.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the series can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = xAxis;\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = yAxis;\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.StudentDataService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // populate the student data into the component\n                this.setSeries(this.StudentDataService.makeCopyOfJSONObject(studentData.series));\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n\n            // re-draw the graph\n            this.setupGraph();\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n\n        // the student data has changed\n        this.studentDataChanged();\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        //force redraw\n        this.$scope.$apply();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the series data\n            studentData.series = this.StudentDataService.makeCopyOfJSONObject(this.getSeries());\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                series.id = null;\n            }\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        notebookItemId: notebookItem.id,\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then(angular.bind(this, function(assetContent) {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    }));\n                    this.studentDataChanged();\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // TODO implement me\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                } else {\n                    xText = xCell;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                } else {\n                    yText = yCell;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#chart1').highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\n\nGraphController.$inject = [\n    '$rootScope',\n    '$scope',\n    'GraphService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default GraphController;\n"]}