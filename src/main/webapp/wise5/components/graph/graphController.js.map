{"version":3,"sources":["graphController.es6"],"names":["GraphController","$q","$rootScope","$scope","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","series","seriesColors","seriesMarkers","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","activeSeries","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","isSnipDrawingButtonVisible","chartId","width","height","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","workgroupId","teacherWorkgroupId","trials","activeTrial","studentDataVersion","canCreateNewTrials","canDeleteTrials","showSaveButton","showSubmitButton","isResetSeriesButtonVisible","$parent","nodeController","getLatestComponentAnnotations","componentState","importWorkNodeId","importWorkComponentId","importWork","newTrial","setStudentWork","calculateDisabled","setupGraph","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","makeCopyOfJSONObject","parseLatestTrial","studentDataChanged","bind","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","deleteKeyPressedListenerDestroyer","handleDeleteKeyPressed","title","graphType","xAxis","yAxis","allowDecimals","thisGraphController","getSeries","enableTrials","t","length","show","tempSeries","concat","setSeries","setActiveSeriesByIndex","s","regression","regressionSettings","xMin","min","xMax","max","numberOfPoints","draggableX","draggableY","allowPointSelect","canEdit","isActiveSeriesIndex","cursor","regressionSeries","allSeries","clearSeriesIds","setSeriesIds","updateMinMaxAxisValues","chartConfig","options","tooltip","formatter","x","roundToNearestTenth","y","chart","events","click","e","currentTime","Date","getTime","lastDropTime","value","addPointToSeries","plotOptions","stickyTracking","point","drag","dragging","drop","target","index","loading","pointAdded","d","tempPoint","tempDataXValue","splice","push","tempData","userOptions","seriesId","activeSeriesId","result","tempTrial","setActiveSeries","getSeriesByIndex","setXAxis","setYAxis","confirmMessage","seriesName","name","answer","confirm","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","$$phase","createNewComponentState","getTrialIndex","getXAxis","getYAxis","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","prompt","showPreviousWorkPrompt","seriesArray","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","fileName","color","marker","r","row","xCell","yCell","xText","yText","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","indexOf","parseFloat","Math","round","$","highcharts","selectedPoints","getSelectedPoints","indexes","selectedPoint","sort","reverse","i","updateAdvancedAuthoringView","toJson","advancedAuthoringViewComponentChanged","fromJson","replaceComponent","nodeAuthoringController","authoringViewNodeChanged","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newSeries","createNewSeries","symbol","message","exitListener","$broadcast","hasEditableSeries","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","exec","tempTrialNumber","parseInt","maxTrialNumber","showAllTrialsOnNewTrial","trialIndex","activeTrialChanged","singleSeries","latestStudentDataTrial","firstTrial","shift","latestStudentDataTrialId","latestTrial","getTrialById","seriesColor","minMaxValues","getMinMaxValues","minPadding","maxPadding","yMin","yMax","tempX","tempY","constructor","isNotebookEnabled","$event","highchartsDiv","element","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                GraphService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n        \n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = 800;\n\n        // the height of the graph\n        this.height = 500;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n        \n        this.trials = [];\n        this.activeTrial = null;\n        this.studentDataVersion = 2;\n        \n        this.canCreateNewTrials = false;\n        this.canDeleteTrials = false;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n            \n            if (this.componentContent.canCreateNewTrials) {\n                this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n            }\n            \n            if (this.componentContent.canDeleteTrials) {\n                this.canDeleteTrials = this.componentContent.canDeleteTrials;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else {\n                    \n                    /* \n                     * trials are enabled so we will create an empty trial\n                     * since there is no student work\n                     */\n                    this.newTrial();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                var studentDataVersion = this.$scope.graphController.studentDataVersion;\n                                \n                                if (studentDataVersion == null || studentDataVersion == 1) {\n                                    // the student data is version 1 which has no trials\n                                    \n                                    // get the series\n                                    var series = this.$scope.graphController.series[seriesIndex];\n\n                                    if (series == null) {\n                                        // the series is null so we will create a series\n                                        series = {};\n                                        this.$scope.graphController.series[seriesIndex] = series;\n                                    }\n\n                                    // set the data into the series\n                                    series.data = data;\n                                } else {\n                                    // the student data is the newer version that has trials\n                                    \n                                    // get the active trial\n                                    var trial = this.$scope.graphController.activeTrial;\n                                    \n                                    if (trial != null && trial.series != null) {\n                                        \n                                        // get the series\n                                        var series = trial.series[seriesIndex];\n                                        \n                                        if (series == null) {\n                                            // the series is null so we will create a series\n                                            series = {};\n                                            this.$scope.graphController.series[seriesIndex] = series;\n                                        }\n\n                                        // set the data into the series\n                                        series.data = data;\n                                    }\n                                }\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                } else if (componentType == 'Embedded') {\n                    \n                    // convert the embedded data to series data\n                    if (componentState != null) {\n\n                        /*\n                         * make a copy of the component state so that we don't\n                         * reference the exact component state object from the\n                         * other component in case field values change.\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n                        \n                        // parse the latest trial and set it into the component\n                        this.parseLatestTrial(studentData);\n                        \n                        /*\n                         * notify the controller that the student data has \n                         * changed so that it will perform any necessary saving\n                         */\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n        \n        if (this.componentContent.enableTrials) {\n            /*\n             * trials are enabled so we will show the ones the student \n             * has checked\n             */\n            series = [];\n            \n            var trials = this.trials;\n            \n            // loop through all the trials\n            for (var t = 0; t < trials.length; t++) {\n                var trial = trials[t];\n                \n                if (trial != null) {\n                    \n                    if (trial.show) {\n                        /*\n                         * we want to show this trial so we will append the\n                         * series from it\n                         */\n                        var tempSeries = trial.series;\n                        series = series.concat(tempSeries);\n                    }\n                }\n            }\n        }\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeriesIndex(s)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        // clear all the series ids\n        this.clearSeriesIds(allSeries);\n        \n        // give all series ids\n        this.setSeriesIds(allSeries);\n        \n        /*\n         * update the min and max x and y values if necessary so that all\n         * points are visible\n         */\n        this.updateMinMaxAxisValues(allSeries, xAxis, yAxis);\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drop event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the series can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n    \n    /**\n     * Set the trials\n     * @param trials the trials\n     */\n    setTrials(trials) {\n        this.trials = trials;\n    }\n    \n    /**\n     * Get the trials\n     * @return the trials\n     */\n    getTrials() {\n        return this.trials;\n    }\n    \n    /**\n     * Get the index of the trial\n     * @param trial the trial object\n     * @return the index of the trial within the trials array\n     */\n    getTrialIndex(trial) {\n        \n        var index = -1;\n        \n        if (trial != null) {\n            \n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n                \n                if (trial == tempTrial) {\n                    // we have found the trial we are looking for\n                    index = t;\n                    break;\n                }\n            }\n        }\n        \n        return index;\n    }\n    \n    /**\n     * Set the active trial\n     * @param index the index of the trial to make active\n     */\n    setActiveTrialByIndex(index) {\n        \n        if (index != null) {\n            \n            // get the trial\n            var trial = this.trials[index];\n            \n            if (trial != null) {\n                // make the trial the active trial\n                this.activeTrial = trial;\n            }\n        }\n    }\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n\n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                \n                if (studentData.version == null || studentData.version == 1) {\n                    // the student data is version 1 which has no trials\n                    this.studentDataVersion = 1;\n                    \n                    // populate the student data into the component\n                    this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                } else {\n                    // the student data is the newer version that has trials\n                    \n                    this.studentDataVersion = studentData.version;\n                    \n                    if (studentData.trials != null && studentData.trials.length > 0) {\n                        \n                        // make a copy of the trials\n                        var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n                        \n                        // remember the trials\n                        this.setTrials(trialsCopy);\n                        \n                        // get the trial to show\n                        var activeTrialIndex = studentData.activeTrialIndex;\n                        \n                        if (activeTrialIndex == null) {\n                            /*\n                             * there is no active trial index so we will show the\n                             * last trial\n                             */\n                            \n                            if (trialsCopy.length > 0) {\n                                //make the last trial the active trial to show\n                                this.setActiveTrialByIndex(studentData.trials.length - 1);\n                            }\n                        } else {\n                            // there is an active trial index\n                            this.setActiveTrialByIndex(activeTrialIndex);\n                        }\n                        \n                        if (this.activeTrial != null && this.activeTrial.series != null) {\n                            // set the active trial series to be the series to display\n                            this.series = this.activeTrial.series;\n                        }\n                        \n                        // redraw the graph\n                        this.setupGraph();\n                    }\n                }\n                \n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n        \n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n                // and it still seems to work. Do we need this line?\n                // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n                //this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            studentData.version = this.studentDataVersion;\n\n            if (this.studentDataVersion == 1) {\n                // insert the series data\n                studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n            } else {\n                if (this.trials != null) {\n                    // make a copy of the trials\n                    studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n                    \n                    // remember which trial is being shown\n                    var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n                    studentData.activeTrialIndex = activeTrialIndex;\n                }\n            }\n            \n            /*\n            \n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n            */\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n            \n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            /*\n             * loop through all the series to get the existing ids that are\n             * being used\n             */\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId != null) {\n                    // remember the series id\n                    usedSeriesIds.push(seriesId);\n                }\n            }\n            \n            // loop through all the series\n            for (var y = 0; y < allSeries.length; y++) {\n                var series = allSeries[y];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n        this.advancedAuthoringViewComponentChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = authoringComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n        }\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.hasEditableSeries() && this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n    \n    /**\n     * Create a new trial\n     */\n    newTrial() {\n        \n        // get the current number of trials\n        var trialCount = this.trials.length;\n        \n        // make a copy of the original series (most likely blank with no points)\n        var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n        \n        // regex to find the trial number from the trial names\n        var trialNameRegex = /Trial (\\d*)/;\n        var trialNumbers = [];\n        \n        // loop through all the trials\n        for (var t = 0; t < this.trials.length; t++) {\n            var tempTrial = this.trials[t];\n            \n            if (tempTrial != null) {\n                // get a trial name\n                var tempTrialName = tempTrial.name;\n                \n                // run the regex matcher on the trial name\n                var match = trialNameRegex.exec(tempTrialName);\n                \n                if (match != null && match.length > 0) {\n                    // we have found a trial name that looks like \"Trial X\"\n                    \n                    /*\n                     * get the trial number e.g. if the trial name is \"Trial 3\",\n                     * the trial number is 3\n                     */\n                    var tempTrialNumber = match[1];\n                    \n                    if (tempTrialNumber != null) {\n                        /*\n                         * get the number e.g. if the trial name is \"Trial 2\",\n                         * the trial number is 2\n                         */\n                        trialNumbers.push(parseInt(tempTrialNumber));\n                    }\n                }\n            }\n        }\n        \n        // sort the trial numbers from smallest to largest\n        trialNumbers.sort();\n        \n        var maxTrialNumber = 0;\n        \n        if (trialNumbers.length > 0) {\n            // get the highest trial number\n            maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n        }\n        \n        if (!this.componentContent.showAllTrialsOnNewTrial) {\n            // we only want to show the latest trial\n            \n            // loop through all the existing trials and hide them\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n                \n                if (tempTrial != null) {\n                    tempTrial.show = false;\n                }\n            }\n        }\n        \n        // make a new trial with a trial number one larger than the existing max\n        var trial = {};\n        trial.name = 'Trial ' + (maxTrialNumber + 1);\n        trial.series = series;\n        trial.show = true;\n        \n        // add the trial to the array of trials\n        this.trials.push(trial);\n        \n        // set the new trial to be the active trial\n        this.activeTrial = trial;\n        \n        // set the series to be displayed\n        this.series = series;\n        \n        var activeSeriesIndex = 0;\n        \n        if (this.activeSeries != null) {\n            // get the index of the active series\n            activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n        }\n        \n        this.setActiveSeriesByIndex(activeSeriesIndex);\n        \n        // redraw the graph\n        this.setupGraph();\n        \n        /*\n         * notify the controller that the student data has \n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n        \n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * Delete a trial\n     */\n    deleteTrial(trialIndex) {\n        \n        /*\n         * get the index of the active trial which will be the trial we are\n         * going to delete\n         */\n        //var trialIndex = this.trials.indexOf(this.activeTrial);\n        \n        if (trialIndex == null) {\n            trialIndex = this.trials.indexOf(this.activeTrial);\n        }\n        \n        if (trialIndex != null && trialIndex != -1) {\n            \n            // remove the trial from the array of trials\n            this.trials.splice(trialIndex, 1);\n            \n            if (this.trials.length == 0) {\n                // there are no more trials so we will create a new empty trial\n                this.newTrial();\n                \n                // reset the axis limits\n                this.setXAxis(this.componentContent.xAxis);\n                this.setYAxis(this.componentContent.yAxis);\n            } else if (this.trials.length > 0) {\n                // set the active trial to the next highest trial number\n                if (trialIndex > (this.trials.length - 1)) {\n                    /*\n                     * the trial index is higher than any available index\n                     * in the trials array so we will just use the last index\n                     */\n                    this.activeTrial = this.trials[this.trials.length - 1];\n                    this.activeTrialChanged(this.trials.length - 1);\n                } else {\n                    // make the next highest trial the active trial\n                    this.activeTrial = this.trials[trialIndex];\n                    this.activeTrialChanged(trialIndex);\n                }\n            }\n        }\n        \n        /*\n         * notify the controller that the student data has \n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n        \n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * The student has selected a different trial to view\n     */\n    activeTrialChanged() {\n        \n        // get the index of the active series\n        var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n        \n        // get the active trial\n        var activeTrial = this.activeTrial;\n        \n        if (activeTrial != null) {\n            \n            // get the series from the trial\n            var series = activeTrial.series;\n\n            // set the series to be displayed\n            this.series = series;\n            \n            /*\n             * set the active series index so that the the active series\n             * is the same as before.\n             */\n            this.setActiveSeriesByIndex(activeSeriesIndex);\n            \n            // redraw the graph\n            this.setupGraph();\n        }\n        \n        /*\n         * notify the controller that the student data has \n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n        \n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n    \n    /**\n     * Parse the trials and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseTrials0(studentData) {\n        \n        if (studentData != null) {\n            \n            // get the trials\n            var trials = studentData.trials;\n            \n            if (trials != null) {\n                \n                this.trials = [];\n                \n                // loop through all the trials in the student data\n                for (var t = 0; t < trials.length; t++) {\n                    var tempTrial = trials[t];\n                    \n                    if (tempTrial != null) {\n                        \n                        // create a trial object\n                        var newTrial = {};\n                        \n                        if (tempTrial.name != null) {\n                            \n                            // set the trial name\n                            newTrial.name = tempTrial.name;\n                        }\n                        \n                        if (tempTrial.series != null) {\n                            \n                            // set the trial series\n                            newTrial.series = [];\n                            \n                            var tempSeries = tempTrial.series;\n                            \n                            if (tempSeries != null) {\n                                \n                                // loop through all the series in the trial\n                                for (var s = 0; s < tempSeries.length; s++) {\n                                    \n                                    // get a single series\n                                    var singleSeries = tempSeries[s];\n                                    \n                                    if (singleSeries != null) {\n                                        \n                                        // get the series name and data\n                                        var seriesName = singleSeries.name;\n                                        var seriesData = singleSeries.data;\n                                        \n                                        // make a series object\n                                        var newSeries = {};\n                                        newSeries.name = seriesName;\n                                        newSeries.data = seriesData;\n                                        newSeries.canEdit = false;\n                                        newSeries.allowPointSelect = false;\n                                        \n                                        // add the series to the trial\n                                        newTrial.series.push(newSeries);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // add the trial to the array of trials\n                        this.trials.push(newTrial);\n                    }\n                }\n                \n                if (trials.length > 0) {\n                    // make the last trial the active trial\n                    this.activeTrial = this.trials[trials.length - 1];\n                }\n            }\n            \n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n    \n    /**\n     * Parse the latest trial and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseLatestTrial(studentData) {\n        \n        if (studentData != null) {\n            \n            var latestStudentDataTrial = null;\n            \n            if (studentData.trial != null) {\n                // the student data only has one trial\n                latestStudentDataTrial = studentData.trial;\n            }\n            \n            if (studentData.trials != null && studentData.trials.length > 0) {\n                // the student data has an array of trials\n                latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n            }\n            \n            if (latestStudentDataTrial != null) {\n                \n                /*\n                 * remove the first default trial that is automatically created\n                 * when the student first visits the component otherwise there\n                 * will be a blank trial.\n                 */\n                if (this.trials.length > 0) {\n                    \n                    // get the first trial\n                    var firstTrial = this.trials[0];\n                    \n                    if (firstTrial != null) {\n                        \n                        /*\n                         * check if the trial has an id. if the trial doesn't\n                         * have an id it means it was automatically created by\n                         * the component.\n                         */\n                        if (firstTrial.id == null) {\n                            // delete the first trial\n                            this.trials.shift();\n                        }\n                    }\n                }\n                \n                // get the latest student data trial id\n                var latestStudentDataTrialId = latestStudentDataTrial.id;\n                \n                // get the trial with the given trial id\n                var latestTrial = this.getTrialById(latestStudentDataTrialId);\n                \n                if (latestTrial == null) {\n                    /* \n                     * we did not find a trial with the given id which means\n                     * this is a new trial\n                     */\n                    \n                    if (!this.componentContent.showAllTrialsOnNewTrial) {\n                        // we only show the latest trial when a new trial starts\n                        \n                        // loop through all the existing trials and hide them\n                        for (var t = 0; t < this.trials.length; t++) {\n                            var tempTrial = this.trials[t];\n                            \n                            if (tempTrial != null) {\n                                tempTrial.show = false;\n                            }\n                        }\n                    }\n                    \n                    // create the new trial\n                    latestTrial = {};\n                    \n                    latestTrial.id = latestStudentDataTrialId;\n                    \n                    latestTrial.show = true;\n                    \n                    this.setXAxis(this.componentContent.xAxis);\n                    this.setYAxis(this.componentContent.yAxis);\n                    \n                    // add the trial to the array of trials\n                    this.trials.push(latestTrial);\n                }\n                \n                if (latestStudentDataTrial.name != null) {\n                    \n                    // set the trial name\n                    latestTrial.name = latestStudentDataTrial.name;\n                }\n                \n                if (latestStudentDataTrial.series != null) {\n                    \n                    // set the trial series\n                    latestTrial.series = [];\n                    \n                    var tempSeries = latestStudentDataTrial.series;\n                    \n                    if (tempSeries != null) {\n                        \n                        // loop through all the series in the trial\n                        for (var s = 0; s < tempSeries.length; s++) {\n                            \n                            // get a single series\n                            var singleSeries = tempSeries[s];\n                            \n                            if (singleSeries != null) {\n                                \n                                // get the series name and data\n                                var seriesName = singleSeries.name;\n                                var seriesData = singleSeries.data;\n                                var seriesColor = singleSeries.color;\n                                \n                                // make a series object\n                                var newSeries = {};\n                                newSeries.name = seriesName;\n                                newSeries.data = seriesData;\n                                newSeries.color = seriesColor;\n                                newSeries.canEdit = false;\n                                newSeries.allowPointSelect = false;\n                                \n                                // add the series to the trial\n                                latestTrial.series.push(newSeries);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            if (this.trials.length > 0) {\n                // make the last trial the active trial\n                this.activeTrial = this.trials[this.trials.length - 1];\n                this.activeTrial.show = true;\n            }\n            \n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n    \n    /**\n     * Get the trial by id\n     * @param id the trial id\n     * @returns the trial with the given id or null\n     */\n    getTrialById(id) {\n        \n        var trial = null;\n        \n        if (id != null) {\n            \n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n                \n                if (tempTrial != null && tempTrial.id == id) {\n                    // we have found the trial with the id we want\n                    trial = tempTrial;\n                    break;\n                }\n            }\n        }\n        \n        return trial;\n    }\n    \n    /**\n     * Check if there is an editable series\n     * @return whether there is an editable series\n     */\n    hasEditableSeries() {\n        \n        var result = false;\n        \n        // get the array of series\n        var series = this.getSeries();\n        \n        if (series != null) {\n            \n            // loop through all the lines\n            for (var s = 0; s < series.length; s++) {\n                var tempSeries = series[s];\n                \n                if (tempSeries != null) {\n                    \n                    if (tempSeries.canEdit) {\n                        // this line can be edited\n                        result = true;\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Update the x and y axis min and max values if necessary to make sure\n     * all points are visible in the graph view.\n     * @param series the an array of series\n     * @param xAxis the x axis object\n     * @param yAxis the y axis object\n     */\n    updateMinMaxAxisValues(series, xAxis, yAxis) {\n        \n        // get the min and max x and y values\n        var minMaxValues = this.getMinMaxValues(series);\n        \n        if (minMaxValues != null) {\n            \n            if (xAxis != null) {\n                if (minMaxValues.xMin < xAxis.min) {\n                    /*\n                     * there is a point that has a smaller x value than the\n                     * specified x axis min. we will remove the min value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the min x value automatically\n                     */\n                    xAxis.min = null;\n                    xAxis.minPadding = 0.2;\n                }\n                \n                if (minMaxValues.xMax >= xAxis.max) {\n                    /*\n                     * there is a point that has a larger x value than the\n                     * specified x axis max. we will remove the max value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the max x value automatically\n                     */\n                    xAxis.max = null;\n                    xAxis.maxPadding = 0.2;\n                }\n            }\n            \n            if (yAxis != null) {\n                if (minMaxValues.yMin < yAxis.min) {\n                    /*\n                     * there is a point that has a smaller y value than the\n                     * specified y axis min. we will remove the min value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the min y value automatically\n                     */\n                    yAxis.min = null;\n                    yAxis.minPadding = 0.2;\n                }\n                \n                if (minMaxValues.yMax >= yAxis.max) {\n                    /*\n                     * there is a point that has a larger y value than the\n                     * specified y axis max. we will remove the max value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the max y value automatically\n                     */\n                    yAxis.max = null;\n                    yAxis.maxPadding = 0.2;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get the min and max x and y values\n     * @param series an array of series\n     * @returns an object containing the min and max x and y values from the\n     * series data\n     */\n    getMinMaxValues(series) {\n        \n        var result = {};\n        var xMin = 0;\n        var xMax = 0;\n        var yMin = 0;\n        var yMax = 0;\n        \n        if (series != null) {\n            \n            // loop through all the series\n            for (var s = 0; s < series.length; s++) {\n                \n                // get a single series\n                var tempSeries = series[s];\n                \n                if (tempSeries != null) {\n                    \n                    // get the data from the single series\n                    var data = tempSeries.data;\n                    \n                    if (data != null) {\n                        \n                        // loop through all the data points in the single series\n                        for (var d = 0; d < data.length; d++) {\n                            var tempData = data[d];\n                            \n                            var tempX = null;\n                            var tempY = null;\n                            \n                            if (tempData != null) {\n                                if (tempData.constructor.name == 'Object') {\n                                    /*\n                                     * the element is an object so we will get\n                                     * the x and y fields\n                                     */\n                                    tempX = tempData.x;\n                                    tempY = tempData.y;\n                                } else if (tempData.constructor.name == 'Array') {\n                                    /*\n                                     * the element is an array so we will get\n                                     * the first and second element in the array\n                                     * which correspond to the x and y values\n                                     */\n                                    tempX = tempData[0];\n                                    tempY = tempData[1];\n                                }\n                            }\n                            \n                            if (tempX > xMax) {\n                                /*\n                                 * we have found a data point with a greater x\n                                 * value than what we have previously found\n                                 */\n                                xMax = tempX;\n                            }\n                            \n                            if (tempX < xMin) {\n                                /*\n                                 * we have found a data point with a smaller x\n                                 * value than what we have previously found\n                                 */\n                                xMin = tempX\n                            }\n                            \n                            if (tempY > yMax) {\n                                /*\n                                 * we have found a data point with a greater y\n                                 * value than what we have previously found\n                                 */\n                                yMax = tempY;\n                            }\n                            \n                            if (tempY < yMin) {\n                                /*\n                                 * we have found a data point with a smaller y\n                                 * value than what we have previously found\n                                 */\n                                yMin = tempY;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        result.xMin = xMin;\n        result.xMax = xMax;\n        result.yMin = yMin;\n        result.yMax = yMax;\n        \n        return result;\n    }\n    \n    /**\n     * Clear all the series ids\n     * @param allSeries all of the series\n     */\n    clearSeriesIds(allSeries) {\n        \n        if (allSeries != null) {\n            \n            // loop through all the series\n            for (var s = 0; s < allSeries.length; s++) {\n                var tempSeries = allSeries[s];\n                \n                if (tempSeries != null) {\n                    // clear the id\n                    tempSeries.id = null;\n                }\n            }\n        }\n    }\n    \n    /**\n     * The \"Enable Trials\" checkbox was clicked\n     */\n    authoringViewEnableTrialsClicked() {\n        \n        if (this.authoringComponentContent.enableTrials) {\n            // trials are now enabled\n            this.authoringComponentContent.canCreateNewTrials = true;\n            this.authoringComponentContent.canDeleteTrials = true;\n        } else {\n            // trials are now disabled\n            this.authoringComponentContent.canCreateNewTrials = false;\n            this.authoringComponentContent.canDeleteTrials = false;\n            this.authoringComponentContent.showAllTrialsOnNewTrial = false;\n        }\n        \n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the highcharts div\n        var highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n        \n        if (highchartsDiv != null && highchartsDiv.length > 0) {\n            highchartsDiv = highchartsDiv[0];\n            \n            // convert the model element to a canvas element\n            html2canvas(highchartsDiv).then((canvas) => {\n\n                // get the canvas as a base64 string\n                var img_b64 = canvas.toDataURL('image/png');\n\n                // get the image object\n                var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            });\n        }\n    }\n}\n\n\nGraphController.$inject = [\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}