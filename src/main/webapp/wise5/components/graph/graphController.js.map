{"version":3,"sources":["graphController.es6"],"names":["GraphController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","series","seriesColors","seriesMarkers","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","activeSeries","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","chartId","width","height","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","showSaveButton","showSubmitButton","isResetSeriesButtonVisible","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","xAxis","yAxis","setupGraph","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","newTrial","setStudentWork","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","makeCopyOfJSONObject","parseLatestTrial","studentDataChanged","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","deleteKeyPressedListenerDestroyer","handleDeleteKeyPressed","annotation","annotationNodeId","annotationComponentId","fileUploadChanged","element","overwrite","activeSeriesData","length","answer","confirm","files","reader","FileReader","onload","fileContent","result","scope","readCSV","setUploadedFileName","fileName","name","readAsText","uploadAsset","value","assetItem","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","title","graphType","allowDecimals","thisGraphController","getSeries","enableTrials","t","show","tempSeries","concat","setSeries","setActiveSeriesByIndex","s","regression","regressionSettings","xMin","min","xMax","max","numberOfPoints","draggableX","draggableY","allowPointSelect","canEdit","isActiveSeries","cursor","regressionSeries","allSeries","clearSeriesIds","setSeriesIds","updateMinMaxAxisValues","timeout","chartConfig","options","tooltip","formatter","x","roundToNearestTenth","y","chart","plotBackgroundImage","events","click","e","currentTime","Date","getTime","lastDropTime","addPointToSeries","plotOptions","stickyTracking","point","drag","dragging","drop","index","loading","func","reflow","pointAdded","d","tempPoint","tempDataXValue","splice","push","tempData","userOptions","seriesId","activeSeriesId","tempTrial","i","currentSeries","editableTrials","canEditTrial","setActiveSeries","getSeriesByIndex","setXAxis","setYAxis","confirmMessage","seriesName","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","$$phase","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","prompt","showPreviousWorkPrompt","seriesArray","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","color","marker","r","row","xCell","yCell","xText","yText","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","indexOf","parseFloat","Math","round","highcharts","selectedPoints","getSelectedPoints","indexes","selectedPoint","sort","reverse","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newSeries","createNewSeries","symbol","message","exitListener","$broadcast","isActiveSeriesIndex","hasEditableSeries","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","exec","tempTrialNumber","parseInt","maxTrialNumber","generateKey","trialIndex","trialToRemove","trialToRemoveId","highestTrialIndex","highestTrial","trialId","getTrialById","getSelectedTrialsText","lastShownTrialId","lastShownTrial","a","idToShow","idsToShow","singleSeries","activeTrialChanged","latestStudentDataTrial","latestStudentDataTrialId","firstTrial","shift","latestTrial","seriesColor","minMaxValues","getMinMaxValues","minPadding","maxPadding","yMin","yMax","tempX","tempY","constructor","isNotebookEnabled","$event","highchartsDiv","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","csv","lines","split","lineNumber","line","values","dataPoint","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","popup","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                GraphService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // whether to only show the new trial when a new trial is created\n        this.hideAllTrialsOnNewTrial = true;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = null;\n\n        // the height of the graph\n        this.height = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.trials = [];\n        this.activeTrial = null;\n        this.trialIdsToShow = [];\n        this.selectedTrialsText = \"\";\n\n        this.studentDataVersion = 2;\n\n        this.canCreateNewTrials = false;\n        this.canDeleteTrials = false;\n\n        this.uploadedFileName = null;\n\n        this.backgroundImage = null;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.componentContent.canCreateNewTrials) {\n                this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n            }\n\n            if (this.componentContent.canDeleteTrials) {\n                this.canDeleteTrials = this.componentContent.canDeleteTrials;\n            }\n\n            if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n                this.hideAllTrialsOnNewTrial = false;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                //this.isResetGraphButtonVisible = this.componentContent.showResetGraphButton;\n                //this.isResetSeriesButtonVisible = this.componentContent.showResetSeriesButton;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n                this.backgroundImage = this.componentContent.backgroundImage;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.backgroundImage = this.componentContent.backgroundImage;\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.backgroundImage = this.componentContent.backgroundImage;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else {\n\n                    /*\n                     * trials are enabled so we will create an empty trial\n                     * since there is no student work\n                     */\n                    this.newTrial();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                var studentDataVersion = this.$scope.graphController.studentDataVersion;\n\n                                if (studentDataVersion == null || studentDataVersion == 1) {\n                                    // the student data is version 1 which has no trials\n\n                                    // get the series\n                                    var series = this.$scope.graphController.series[seriesIndex];\n\n                                    if (series == null) {\n                                        // the series is null so we will create a series\n                                        series = {};\n                                        this.$scope.graphController.series[seriesIndex] = series;\n                                    }\n\n                                    // set the data into the series\n                                    series.data = data;\n                                } else {\n                                    // the student data is the newer version that has trials\n\n                                    // get the active trial\n                                    var trial = this.$scope.graphController.activeTrial;\n\n                                    if (trial != null && trial.series != null) {\n\n                                        // get the series\n                                        var series = trial.series[seriesIndex];\n\n                                        if (series == null) {\n                                            // the series is null so we will create a series\n                                            series = {};\n                                            this.$scope.graphController.series[seriesIndex] = series;\n                                        }\n\n                                        // set the data into the series\n                                        series.data = data;\n                                    }\n                                }\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                } else if (componentType == 'Embedded') {\n\n                    // convert the embedded data to series data\n                    if (componentState != null) {\n\n                        /*\n                         * make a copy of the component state so that we don't\n                         * reference the exact component state object from the\n                         * other component in case field values change.\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        // parse the latest trial and set it into the component\n                        this.parseLatestTrial(studentData);\n\n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n\n        /**\n         * The student has changed the file input\n         * @param element the file input element\n         */\n        this.$scope.fileUploadChanged = function(element) {\n\n            var overwrite = true;\n\n            // check if the active series already has data\n            if (this.graphController != null &&\n                this.graphController.activeSeries != null &&\n                this.graphController.activeSeries.data != null) {\n\n                var activeSeriesData = this.graphController.activeSeries.data;\n\n                if (activeSeriesData.length > 0) {\n                    /*\n                     * the active series already has data so we will ask the\n                     * student if they want to overwrite the data\n                     */\n                    var answer = confirm(this.$translate('graph.areYouSureYouWantToOverwriteTheCurrentLineData'));\n                    if (!answer) {\n                        // the student does not want to overwrite the data\n                        overwrite = false;\n                    }\n                }\n            }\n\n            if (overwrite) {\n                // obtain the file content and overwrite the data in the graph\n\n                // get the files from the file input element\n                var files = element.files;\n\n                if (files != null && files.length > 0) {\n\n                    var reader = new FileReader();\n\n                    // this is the callback function for reader.readAsText()\n                    reader.onload = function() {\n\n                        // get the file contente\n                        var fileContent = reader.result;\n\n                        /*\n                         * read the csv file content and load the data into\n                         * the active series\n                         */\n                        this.scope.graphController.readCSV(fileContent);\n\n                        // remember the file name\n                        this.scope.graphController.setUploadedFileName(this.fileName);\n\n                        // redraw the graph\n                        this.scope.graphController.setupGraph();\n\n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.scope.graphController.studentDataChanged();\n                    }\n\n                    /*\n                     * save a reference to this scope in the reader so that we\n                     * have access to the scope and graphController in the\n                     * reader.onload() function\n                     */\n                    reader.scope = this;\n\n                    // remember the file name\n                    reader.fileName = files[0].name;\n\n                    // read the text from the file\n                    reader.readAsText(files[0]);\n\n                    // upload the file to the studentuploads folder\n                    this.graphController.StudentAssetService.uploadAsset(files[0]);\n                }\n            }\n\n            /*\n             * clear the file input element value so that onchange() will be\n             * called again if the student wants to upload the same file again\n             */\n            element.value = null;\n        }\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'background') {\n                                // the target is the background image\n\n                                // set the background file name\n                                this.authoringComponentContent.backgroundImage = fileName;\n\n                                // the authoring component content has changed so we will save the project\n                                this.authoringViewComponentChanged();\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if (this.componentContent.enableTrials) {\n            /*\n             * trials are enabled so we will show the ones the student\n             * has checked\n             */\n            series = [];\n\n            var trials = this.trials;\n\n            // loop through all the trials\n            for (var t = 0; t < trials.length; t++) {\n                var trial = trials[t];\n\n                if (trial != null) {\n\n                    if (trial.show) {\n                        /*\n                         * we want to show this trial so we will append the\n                         * series from it\n                         */\n                        var tempSeries = trial.series;\n                        series = series.concat(tempSeries);\n                    }\n                }\n            }\n        }\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeries(tempSeries)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        // clear all the series ids\n        this.clearSeriesIds(allSeries);\n\n        // give all series ids\n        this.setSeriesIds(allSeries);\n\n        /*\n         * update the min and max x and y values if necessary so that all\n         * points are visible\n         */\n        this.updateMinMaxAxisValues(allSeries, xAxis, yAxis);\n        let timeout = this.$timeout;\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    plotBackgroundImage: this.backgroundImage,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drop event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false,\n            func: function (chart) {\n                timeout(function () {\n                    chart.reflow();\n                }, 1000);\n            }\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the student can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n\n    /**\n     * Set the trials\n     * @param trials the trials\n     */\n    setTrials(trials) {\n        this.trials = trials;\n    }\n\n    /**\n     * Get the trials\n     * @return the trials\n     */\n    getTrials() {\n        return this.trials;\n    }\n\n    /**\n     * Get the index of the trial\n     * @param trial the trial object\n     * @return the index of the trial within the trials array\n     */\n    getTrialIndex(trial) {\n\n        var index = -1;\n\n        if (trial != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (trial == tempTrial) {\n                    // we have found the trial we are looking for\n                    index = t;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    /**\n     * Set the active trial\n     * @param index the index of the trial to make active\n     */\n    setActiveTrialByIndex(index) {\n\n        if (index != null) {\n\n            // get the trial\n            var trial = this.trials[index];\n\n            if (trial != null) {\n                // make the trial the active trial\n                this.activeTrial = trial;\n            }\n        }\n    }\n\n    /**\n     * Check whether the student is allowed to edit a given trial\n     * @param trial the trial object to check\n     * @return boolean whether the student can edit the trial\n     */\n    canEditTrial(trial) {\n        let result = false;\n        let series = trial.series;\n\n        for (let i = 0; i < series.length; i++) {\n            let currentSeries = series[i];\n            if (currentSeries.canEdit) {\n                // at least one series in this trial is editable\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set whether to show the active trial select menu\n     * @return whether to show the active trial select menu\n     */\n    showSelectActiveTrials() {\n        let result = false;\n        let editableTrials = 0;\n        for (let i = 0; i < this.trials.length; i++) {\n            let trial = this.trials[i];\n            if (this.canEditTrial(trial) && trial.show) {\n                editableTrials++;\n                if (editableTrials > 1) {\n                    // there are more than one editable trials, so show the menu\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        // set the background image\n        this.backgroundImage = this.componentContent.backgroundImage;\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheSeries');\n        } else {\n            confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheNamedSeries');\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n\n                    if (this.componentContent.xAxis != null) {\n                        // reset the x axis\n                        this.setXAxis(this.componentContent.xAxis);\n                    }\n\n                    if (this.componentContent.yAxis != null) {\n                        // reset the y axis\n                        this.setYAxis(this.componentContent.yAxis);\n                    }\n\n                    // reset the background image\n                    this.backgroundImage = this.componentContent.backgroundImage;\n\n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (studentData.version == null || studentData.version == 1) {\n                    // the student data is version 1 which has no trials\n                    this.studentDataVersion = 1;\n\n                    // populate the student data into the component\n                    this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                } else {\n                    // the student data is the newer version that has trials\n\n                    this.studentDataVersion = studentData.version;\n\n                    if (studentData.trials != null && studentData.trials.length > 0) {\n\n                        // make a copy of the trials\n                        var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n\n                        // remember the trials\n                        this.setTrials(trialsCopy);\n\n                        // get the trial to show\n                        var activeTrialIndex = studentData.activeTrialIndex;\n\n                        if (activeTrialIndex == null) {\n                            /*\n                             * there is no active trial index so we will show the\n                             * last trial\n                             */\n\n                            if (trialsCopy.length > 0) {\n                                //make the last trial the active trial to show\n                                this.setActiveTrialByIndex(studentData.trials.length - 1);\n                            }\n                        } else {\n                            // there is an active trial index\n                            this.setActiveTrialByIndex(activeTrialIndex);\n                        }\n\n                        if (this.activeTrial != null && this.activeTrial.series != null) {\n                            // set the active trial series to be the series to display\n                            this.series = this.activeTrial.series;\n                        }\n\n                        // redraw the graph\n                        this.setupGraph();\n                    }\n                }\n\n                this.setTrialIdsToShow();\n\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                if (studentData.backgroundImage != null) {\n                    // set the background from the student data\n                    this.backgroundImage = studentData.backgroundImage;\n                }\n\n                this.processLatestSubmit();\n\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n                // and it still seems to work. Do we need this line?\n                // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n                //this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            studentData.version = this.studentDataVersion;\n\n            if (this.studentDataVersion == 1) {\n                // insert the series data\n                studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n            } else {\n                if (this.trials != null) {\n                    // make a copy of the trials\n                    studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n\n                    // remember which trial is being shown\n                    var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n                    studentData.activeTrialIndex = activeTrialIndex;\n                }\n            }\n\n            /*\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n            */\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            // get the uploaded file name if any\n            var uploadedFileName = this.getUploadedFileName();\n\n            if (uploadedFileName != null) {\n                // set the uploaded file name\n                studentData.uploadedFileName = uploadedFileName;\n            }\n\n            if (this.backgroundImage != null) {\n                studentData.backgroundImage = this.backgroundImage;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            /*\n             * loop through all the series to get the existing ids that are\n             * being used\n             */\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId != null) {\n                    // remember the series id\n                    usedSeriesIds.push(seriesId);\n                }\n            }\n\n            // loop through all the series\n            for (var y = 0; y < allSeries.length; y++) {\n                var series = allSeries[y];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = authoringComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series != null && this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.trialIdsToShow.length && this.hasEditableSeries() && this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Create a new trial\n     */\n    newTrial() {\n\n        // get the current number of trials\n        var trialCount = this.trials.length;\n\n        // make a copy of the original series (most likely blank with no points)\n        var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n\n        // regex to find the trial number from the trial names\n        var trialNameRegex = /Trial (\\d*)/;\n        var trialNumbers = [];\n\n        // loop through all the trials\n        for (var t = 0; t < this.trials.length; t++) {\n            var tempTrial = this.trials[t];\n\n            if (tempTrial != null) {\n                // get a trial name\n                var tempTrialName = tempTrial.name;\n\n                // run the regex matcher on the trial name\n                var match = trialNameRegex.exec(tempTrialName);\n\n                if (match != null && match.length > 0) {\n                    // we have found a trial name that looks like \"Trial X\"\n\n                    /*\n                     * get the trial number e.g. if the trial name is \"Trial 3\",\n                     * the trial number is 3\n                     */\n                    var tempTrialNumber = match[1];\n\n                    if (tempTrialNumber != null) {\n                        /*\n                         * get the number e.g. if the trial name is \"Trial 2\",\n                         * the trial number is 2\n                         */\n                        trialNumbers.push(parseInt(tempTrialNumber));\n                    }\n                }\n            }\n        }\n\n        // sort the trial numbers from smallest to largest\n        trialNumbers.sort();\n\n        var maxTrialNumber = 0;\n\n        if (trialNumbers.length > 0) {\n            // get the highest trial number\n            maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n        }\n\n        if (this.hideAllTrialsOnNewTrial) {\n            // we only want to show the latest trial\n\n            // loop through all the existing trials and hide them\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null) {\n                    tempTrial.show = false;\n                }\n            }\n        }\n\n        // make a new trial with a trial number one larger than the existing max\n        var trial = {};\n        trial.name = this.$translate('graph.trial') + ' ' + (maxTrialNumber + 1);\n        trial.series = series;\n        trial.show = true;\n        trial.id = this.UtilService.generateKey(10);\n\n        // add the trial to the array of trials\n        this.trials.push(trial);\n\n        // set the new trial to be the active trial\n        this.activeTrial = trial;\n\n        // set the series to be displayed\n        this.series = series;\n\n        var activeSeriesIndex = 0;\n\n        if (this.activeSeries != null) {\n            // get the index of the active series\n            activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n        }\n\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n\n        this.setTrialIdsToShow();\n\n        // redraw the graph\n        this.setupGraph();\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * Delete a trial\n     * @param trialIndex the index (in the trials array) of the trial to delete\n     */\n    deleteTrial(trialIndex) {\n\n        if (trialIndex == null) {\n            trialIndex = this.trials.indexOf(this.activeTrial);\n        }\n\n        if (trialIndex != null && trialIndex != -1) {\n\n            // get the trial to remove\n            var trialToRemove = this.trials[trialIndex];\n\n            // get the trial id of the trial to remove\n            var trialToRemoveId = trialToRemove.id;\n\n            // remove the trial from the array of trials\n            this.trials.splice(trialIndex, 1);\n\n            // remove the trial id from the trial ids to show array\n            for (var t = 0; t < this.trialIdsToShow.length; t++) {\n                if (trialToRemoveId == this.trialIdsToShow[t]) {\n                    // remove the trial id\n                    this.trialIdsToShow.splice(t, 1);\n\n                    /*\n                     * move the counter back one because we have just removed\n                     * an element from the array. a trial id should never show\n                     * up more than once in the trialIdsToShow array but we\n                     * will go through the whole array just to be safe.\n                     */\n                    t--;\n                }\n            }\n\n            if (this.trials.length == 0) {\n                // there are no more trials so we will create a new empty trial\n                this.newTrial();\n\n                // reset the axis limits\n                this.setXAxis(this.componentContent.xAxis);\n                this.setYAxis(this.componentContent.yAxis);\n            } else if (this.trials.length > 0) {\n                if (trialToRemove == this.activeTrial) {\n                    // remove the references to the trial that we are deleting\n                    this.activeTrial = null;\n                    this.activeSeries = null;\n                    this.series = null;\n\n                    // make the highest shown trial the active trial\n                    var highestTrialIndex = null;\n                    var highestTrial = null;\n\n                    // loop through the shown trials\n                    for (var t = 0; t < this.trialIdsToShow.length; t++) {\n                        var trialId = this.trialIdsToShow[t];\n\n                        // get one of the shown trials\n                        var trial = this.getTrialById(trialId);\n\n                        if (trial != null) {\n\n                            // get the trial index\n                            var trialIndex = this.getTrialIndex(trial);\n\n                            if (trialIndex != null) {\n\n                                if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n                                    /*\n                                     * this is the highest trial we have seen so\n                                     * far so we will remember it\n                                     */\n                                    highestTrialIndex = trialIndex;\n                                    highestTrial = trial;\n                                }\n                            }\n                        }\n                    }\n\n                    if (highestTrial != null) {\n                        /*\n                         * get the index of the active series so that we can set the\n                         * same series to be active in the new active trial\n                         */\n                        var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n                        // set the highest shown trial to be the active trial\n                        this.activeTrial = highestTrial;\n\n                        // set the series\n                        this.setSeries(this.activeTrial.series);\n\n                        if (seriesIndex != null) {\n                            // set the active series\n                            this.setActiveSeriesByIndex(seriesIndex);\n                        }\n                    }\n                }\n            }\n\n            this.setTrialIdsToShow();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // update the selected trial text\n        this.selectedTrialsText = this.getSelectedTrialsText();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected a different trial to edit\n     */\n    activeTrialChanged() {\n\n        // get the active trial\n        var activeTrial = this.activeTrial;\n\n        if (activeTrial != null) {\n\n            // get the index of the active series\n            var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n            if (seriesIndex == null) {\n                // default the index to 0\n                seriesIndex = 0;\n            }\n\n            // get the series from the trial\n            var series = activeTrial.series;\n\n            // set the series to be displayed\n            this.series = series;\n\n            /*\n             * set the active series index to the same series index of the\n             * previously active series\n             */\n            this.setActiveSeriesByIndex(seriesIndex);\n\n            // redraw the graph\n            this.setupGraph();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected different trials to view\n     */\n    trialIdsToShowChanged() {\n        // get the trial indexes to show\n        let trialIdsToShow = this.trialIdsToShow;\n        let trials = this.trials;\n\n        // update the trials\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            let id = trial.id;\n\n            if (trialIdsToShow.indexOf(id) > -1) {\n                trial.show = true;\n            } else {\n                trial.show = false;\n\n                if (this.activeTrial != null && this.activeTrial.id == id) {\n                    // the active trial is no longer shown\n                    this.activeTrial = null;\n                    this.activeSeries = null;\n                    this.series = null;\n                }\n            }\n        }\n\n        // get the latest trial that was checked and make it the active trial\n        if (this.trialIdsToShow.length > 0) {\n\n            // get the latest trial that was checked\n            var lastShownTrialId = this.trialIdsToShow[this.trialIdsToShow.length - 1];\n            var lastShownTrial = this.getTrialById(lastShownTrialId);\n\n            if (lastShownTrial != null) {\n\n                /*\n                 * get the index of the active series so that we can set the\n                 * same series to active in the new active trial\n                 */\n                var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n                // set the last shown trial to be the active trial\n                this.activeTrial = lastShownTrial;\n\n                // set the series\n                this.setSeries(this.activeTrial.series);\n\n                if (seriesIndex != null) {\n                    // set the active series\n                    this.setActiveSeriesByIndex(seriesIndex);\n                }\n            }\n        }\n\n        // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n        // TODO: figure out why this check is sometimes necessary and remove\n        for (let a = 0; a < trialIdsToShow.length; a++) {\n            let idToShow = trialIdsToShow[a];\n            if (!this.getTrialById(idToShow)) {\n                trialIdsToShow.splice(a, 1);\n            }\n            this.trialIdsToShow = trialIdsToShow;\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // update the selected trial text\n        this.selectedTrialsText = this.getSelectedTrialsText();\n    };\n\n    /**\n     * Set which trials are selected in the trial select model\n     */\n    setTrialIdsToShow() {\n        let idsToShow = [];\n\n        let trials = this.trials;\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            if (trial.show) {\n                // trial is visible on graph, so add it to the ids to show model\n                let id = trial.id;\n                idsToShow.push(id);\n            }\n        }\n\n        this.trialIdsToShow = idsToShow;\n    };\n\n    /**\n     * Get the text to show in the trials select dropdown\n     */\n    getSelectedTrialsText() {\n        if (this.trialIdsToShow.length === 1) {\n            let id = this.trialIdsToShow[0];\n            let name = this.getTrialById(id).name;\n            return name;\n        } else if (this.trialIdsToShow.length > 1) {\n            return this.trialIdsToShow.length + \" \" + this.$translate('graph.trialsShown');\n        } else {\n            return this.$translate('graph.selectTrialsToShow');\n        }\n    };\n\n    /**\n     * Parse the trials and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseTrials0(studentData) {\n\n        if (studentData != null) {\n\n            // get the trials\n            var trials = studentData.trials;\n\n            if (trials != null) {\n\n                this.trials = [];\n\n                // loop through all the trials in the student data\n                for (var t = 0; t < trials.length; t++) {\n                    var tempTrial = trials[t];\n\n                    if (tempTrial != null) {\n\n                        // create a trial object\n                        var newTrial = {};\n\n                        if (tempTrial.name != null) {\n\n                            // set the trial name\n                            newTrial.name = tempTrial.name;\n                        }\n\n                        if (tempTrial.series != null) {\n\n                            // set the trial series\n                            newTrial.series = [];\n\n                            var tempSeries = tempTrial.series;\n\n                            if (tempSeries != null) {\n\n                                // loop through all the series in the trial\n                                for (var s = 0; s < tempSeries.length; s++) {\n\n                                    // get a single series\n                                    var singleSeries = tempSeries[s];\n\n                                    if (singleSeries != null) {\n\n                                        // get the series name and data\n                                        var seriesName = singleSeries.name;\n                                        var seriesData = singleSeries.data;\n\n                                        // make a series object\n                                        var newSeries = {};\n                                        newSeries.name = seriesName;\n                                        newSeries.data = seriesData;\n                                        newSeries.canEdit = false;\n                                        newSeries.allowPointSelect = false;\n\n                                        // add the series to the trial\n                                        newTrial.series.push(newSeries);\n                                    }\n                                }\n                            }\n                        }\n\n                        // add the trial to the array of trials\n                        this.trials.push(newTrial);\n                    }\n                }\n\n                if (trials.length > 0) {\n                    // make the last trial the active trial\n                    this.activeTrial = this.trials[trials.length - 1];\n                }\n            }\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Parse the latest trial and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseLatestTrial(studentData) {\n\n        if (studentData != null) {\n\n            var latestStudentDataTrial = null;\n\n            if (studentData.trial != null) {\n                // the student data only has one trial\n                latestStudentDataTrial = studentData.trial;\n            }\n\n            if (studentData.trials != null && studentData.trials.length > 0) {\n                // the student data has an array of trials\n                latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n            }\n\n            if (latestStudentDataTrial != null) {\n\n                // get the latest student data trial id\n                var latestStudentDataTrialId = latestStudentDataTrial.id;\n\n                /*\n                 * remove the first default trial that is automatically created\n                 * when the student first visits the component otherwise there\n                 * will be a blank trial.\n                 */\n                if (this.trials.length > 0) {\n\n                    // get the first trial\n                    var firstTrial = this.trials[0];\n\n                    if (firstTrial != null) {\n\n                        /*\n                         * check if the trial has any series. if the trial doesn't\n                         * have any series it means it was automatically created by\n                         * the component.\n                         */\n                        if (!firstTrial.series.length || (firstTrial.series.length === 1 && !firstTrial.series[0].data.length)) {\n                            if (firstTrial.id !== latestStudentDataTrialId) {\n                                // delete the first trial\n                                this.trials.shift();\n                            }\n                        }\n                    }\n                }\n\n\n                // get the trial with the given trial id\n                var latestTrial = this.getTrialById(latestStudentDataTrialId);\n\n                if (latestTrial == null) {\n                    /*\n                     * we did not find a trial with the given id which means\n                     * this is a new trial\n                     */\n\n                    if (this.hideAllTrialsOnNewTrial) {\n                        // we only show the latest trial when a new trial starts\n\n                        // loop through all the existing trials and hide them\n                        for (var t = 0; t < this.trials.length; t++) {\n                            var tempTrial = this.trials[t];\n\n                            if (tempTrial != null) {\n                                tempTrial.show = false;\n                            }\n                        }\n                    }\n\n                    // create the new trial\n                    latestTrial = {};\n\n                    latestTrial.id = latestStudentDataTrialId;\n\n                    latestTrial.show = true;\n\n                    this.setXAxis(this.componentContent.xAxis);\n                    this.setYAxis(this.componentContent.yAxis);\n\n                    // add the trial to the array of trials\n                    this.trials.push(latestTrial);\n                }\n\n                if (latestStudentDataTrial.name != null) {\n\n                    // set the trial name\n                    latestTrial.name = latestStudentDataTrial.name;\n                }\n\n                if (latestStudentDataTrial.series != null) {\n\n                    // set the trial series\n                    latestTrial.series = [];\n\n                    var tempSeries = latestStudentDataTrial.series;\n\n                    if (tempSeries != null) {\n\n                        // loop through all the series in the trial\n                        for (var s = 0; s < tempSeries.length; s++) {\n\n                            // get a single series\n                            var singleSeries = tempSeries[s];\n\n                            if (singleSeries != null) {\n\n                                // get the series name and data\n                                var seriesName = singleSeries.name;\n                                var seriesData = singleSeries.data;\n                                var seriesColor = singleSeries.color;\n\n                                // make a series object\n                                var newSeries = {};\n                                newSeries.name = seriesName;\n                                newSeries.data = seriesData;\n                                newSeries.color = seriesColor;\n                                newSeries.canEdit = false;\n                                newSeries.allowPointSelect = false;\n\n                                // add the series to the trial\n                                latestTrial.series.push(newSeries);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (this.trials.length > 0) {\n                // make the last trial the active trial\n                this.activeTrial = this.trials[this.trials.length - 1];\n                this.activeTrial.show = true;\n            }\n\n            this.setTrialIdsToShow();\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Get the trial by id\n     * @param id the trial id\n     * @returns the trial with the given id or null\n     */\n    getTrialById(id) {\n\n        var trial = null;\n\n        if (id != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null && tempTrial.id == id) {\n                    // we have found the trial with the id we want\n                    trial = tempTrial;\n                    break;\n                }\n            }\n        }\n\n        return trial;\n    }\n\n    /**\n     * Check if there is an editable series\n     * @return whether there is an editable series\n     */\n    hasEditableSeries() {\n\n        var result = false;\n\n        // get the array of series\n        var series = this.getSeries();\n\n        if (series != null) {\n\n            // loop through all the lines\n            for (var s = 0; s < series.length; s++) {\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    if (tempSeries.canEdit) {\n                        // this line can be edited\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Update the x and y axis min and max values if necessary to make sure\n     * all points are visible in the graph view.\n     * @param series the an array of series\n     * @param xAxis the x axis object\n     * @param yAxis the y axis object\n     */\n    updateMinMaxAxisValues(series, xAxis, yAxis) {\n\n        // get the min and max x and y values\n        var minMaxValues = this.getMinMaxValues(series);\n\n        if (minMaxValues != null) {\n\n            if (xAxis != null) {\n                if (minMaxValues.xMin < xAxis.min) {\n                    /*\n                     * there is a point that has a smaller x value than the\n                     * specified x axis min. we will remove the min value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the min x value automatically\n                     */\n                    xAxis.min = null;\n                    xAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.xMax >= xAxis.max) {\n                    /*\n                     * there is a point that has a larger x value than the\n                     * specified x axis max. we will remove the max value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the max x value automatically\n                     */\n                    xAxis.max = null;\n                    xAxis.maxPadding = 0.2;\n                }\n            }\n\n            if (yAxis != null) {\n                if (minMaxValues.yMin < yAxis.min) {\n                    /*\n                     * there is a point that has a smaller y value than the\n                     * specified y axis min. we will remove the min value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the min y value automatically\n                     */\n                    yAxis.min = null;\n                    yAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.yMax >= yAxis.max) {\n                    /*\n                     * there is a point that has a larger y value than the\n                     * specified y axis max. we will remove the max value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the max y value automatically\n                     */\n                    yAxis.max = null;\n                    yAxis.maxPadding = 0.2;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the min and max x and y values\n     * @param series an array of series\n     * @returns an object containing the min and max x and y values from the\n     * series data\n     */\n    getMinMaxValues(series) {\n\n        var result = {};\n        var xMin = 0;\n        var xMax = 0;\n        var yMin = 0;\n        var yMax = 0;\n\n        if (series != null) {\n\n            // loop through all the series\n            for (var s = 0; s < series.length; s++) {\n\n                // get a single series\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    // get the data from the single series\n                    var data = tempSeries.data;\n\n                    if (data != null) {\n\n                        // loop through all the data points in the single series\n                        for (var d = 0; d < data.length; d++) {\n                            var tempData = data[d];\n\n                            var tempX = null;\n                            var tempY = null;\n\n                            if (tempData != null) {\n                                if (tempData.constructor.name == 'Object') {\n                                    /*\n                                     * the element is an object so we will get\n                                     * the x and y fields\n                                     */\n                                    tempX = tempData.x;\n                                    tempY = tempData.y;\n                                } else if (tempData.constructor.name == 'Array') {\n                                    /*\n                                     * the element is an array so we will get\n                                     * the first and second element in the array\n                                     * which correspond to the x and y values\n                                     */\n                                    tempX = tempData[0];\n                                    tempY = tempData[1];\n                                }\n                            }\n\n                            if (tempX > xMax) {\n                                /*\n                                 * we have found a data point with a greater x\n                                 * value than what we have previously found\n                                 */\n                                xMax = tempX;\n                            }\n\n                            if (tempX < xMin) {\n                                /*\n                                 * we have found a data point with a smaller x\n                                 * value than what we have previously found\n                                 */\n                                xMin = tempX\n                            }\n\n                            if (tempY > yMax) {\n                                /*\n                                 * we have found a data point with a greater y\n                                 * value than what we have previously found\n                                 */\n                                yMax = tempY;\n                            }\n\n                            if (tempY < yMin) {\n                                /*\n                                 * we have found a data point with a smaller y\n                                 * value than what we have previously found\n                                 */\n                                yMin = tempY;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        result.xMin = xMin;\n        result.xMax = xMax;\n        result.yMin = yMin;\n        result.yMax = yMax;\n\n        return result;\n    }\n\n    /**\n     * Clear all the series ids\n     * @param allSeries all of the series\n     */\n    clearSeriesIds(allSeries) {\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var s = 0; s < allSeries.length; s++) {\n                var tempSeries = allSeries[s];\n\n                if (tempSeries != null) {\n                    // clear the id\n                    tempSeries.id = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable Trials\" checkbox was clicked\n     */\n    authoringViewEnableTrialsClicked() {\n\n        if (this.authoringComponentContent.enableTrials) {\n            // trials are now enabled\n            this.authoringComponentContent.canCreateNewTrials = true;\n            this.authoringComponentContent.canDeleteTrials = true;\n        } else {\n            // trials are now disabled\n            this.authoringComponentContent.canCreateNewTrials = false;\n            this.authoringComponentContent.canDeleteTrials = false;\n            this.authoringComponentContent.hideAllTrialsOnNewTrial = true;\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the highcharts div\n        var highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n\n        if (highchartsDiv != null && highchartsDiv.length > 0) {\n            highchartsDiv = highchartsDiv[0];\n\n            // convert the model element to a canvas element\n            html2canvas(highchartsDiv).then((canvas) => {\n\n                // get the canvas as a base64 string\n                var img_b64 = canvas.toDataURL('image/png');\n\n                // get the image object\n                var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            });\n        }\n    }\n\n    /**\n     * Read a csv string and load the data into the active series\n     * @param csv a csv string\n     */\n    readCSV(csv) {\n\n        if (csv != null) {\n\n            // splite the string into lines\n            var lines = csv.split(/\\r\\n|\\n/);\n\n            // clear the data in the active series\n            this.activeSeries.data = [];\n\n            // loop through all the lines\n            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n\n                // get a line\n                var line = lines[lineNumber];\n\n                if (line != null) {\n\n                    // split the line to get the values\n                    var values = line.split(\",\");\n\n                    if (values != null) {\n\n                        // get the x and y values\n                        var x = parseFloat(values[0]);\n                        var y = parseFloat(values[1]);\n\n                        if (!isNaN(x) && !isNaN(y)) {\n                            // make the data point\n                            var dataPoint = [x, y];\n\n                            // add the data point to the active series\n                            this.activeSeries.data.push(dataPoint);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the uploaded file name\n     * @param fileName the file name\n     */\n    setUploadedFileName(fileName) {\n        this.uploadedFileName = fileName;\n    }\n\n    /**\n     * Get the uploaded file name\n     * @return the uploaded file name\n     */\n    getUploadedFileName() {\n        return this.uploadedFileName;\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose the background image\n     */\n    chooseBackgroundImage() {\n\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'background';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n}\n\n\nGraphController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}