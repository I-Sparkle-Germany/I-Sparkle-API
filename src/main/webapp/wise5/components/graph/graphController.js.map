{"version":3,"sources":["graphController.es6"],"names":["GraphController","$q","$rootScope","$scope","$timeout","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","series","seriesColors","seriesMarkers","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","activeSeries","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","isSnipDrawingButtonVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","chartId","width","height","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","showSaveButton","showSubmitButton","isResetSeriesButtonVisible","showResetSeriesButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","xAxis","yAxis","setupGraph","componentState","importWorkNodeId","importWorkComponentId","importWork","newTrial","setStudentWork","calculateDisabled","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","makeCopyOfJSONObject","parseLatestTrial","studentDataChanged","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","deleteKeyPressedListenerDestroyer","handleDeleteKeyPressed","fileUploadChanged","element","overwrite","activeSeriesData","length","answer","confirm","files","reader","FileReader","onload","fileContent","result","scope","readCSV","setUploadedFileName","fileName","name","readAsText","uploadAsset","value","title","graphType","allowDecimals","thisGraphController","getSeries","enableTrials","t","show","tempSeries","concat","setSeries","setActiveSeriesByIndex","s","regression","regressionSettings","xMin","min","xMax","max","numberOfPoints","draggableX","draggableY","allowPointSelect","canEdit","isActiveSeries","cursor","regressionSeries","allSeries","clearSeriesIds","setSeriesIds","updateMinMaxAxisValues","timeout","chartConfig","options","tooltip","formatter","x","roundToNearestTenth","y","chart","plotBackgroundImage","events","click","e","currentTime","Date","getTime","lastDropTime","addPointToSeries","plotOptions","stickyTracking","point","drag","dragging","drop","target","index","loading","func","reflow","pointAdded","d","tempPoint","tempDataXValue","splice","push","tempData","userOptions","seriesId","activeSeriesId","tempTrial","i","currentSeries","editableTrials","canEditTrial","setActiveSeries","getSeriesByIndex","setXAxis","setYAxis","confirmMessage","seriesName","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","$$phase","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","prompt","showPreviousWorkPrompt","seriesArray","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","color","marker","r","row","xCell","yCell","xText","yText","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","indexOf","parseFloat","Math","round","$","highcharts","selectedPoints","getSelectedPoints","indexes","selectedPoint","sort","reverse","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","toJson","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newSeries","createNewSeries","symbol","message","exitListener","$broadcast","isActiveSeriesIndex","hasEditableSeries","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","exec","tempTrialNumber","parseInt","maxTrialNumber","generateKey","trialIndex","activeTrialChanged","a","idToShow","getTrialById","getSelectedTrialsText","idsToShow","singleSeries","latestStudentDataTrial","latestStudentDataTrialId","firstTrial","shift","latestTrial","seriesColor","minMaxValues","getMinMaxValues","minPadding","maxPadding","yMin","yMax","tempX","tempY","constructor","isNotebookEnabled","$event","highchartsDiv","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","csv","lines","split","lineNumber","line","values","dataPoint","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($q,\n                $rootScope,\n                $scope,\n                $timeout,\n                ConfigService,\n                GraphService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // whether the snip drawing button is shown or not\n        this.isSnipDrawingButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // whether to only show the new trial when a new trial is created\n        this.hideAllTrialsOnNewTrial = true;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n\n        // the width of the graph\n        this.width = null;\n\n        // the height of the graph\n        this.height = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        this.trials = [];\n        this.activeTrial = null;\n        this.trialIdsToShow = [];\n        this.selectedTrialsText = \"\";\n\n        this.studentDataVersion = 2;\n\n        this.canCreateNewTrials = false;\n        this.canDeleteTrials = false;\n        \n        this.uploadedFileName = null;\n        \n        this.backgroundImage = null;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.componentContent.canCreateNewTrials) {\n                this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n            }\n\n            if (this.componentContent.canDeleteTrials) {\n                this.canDeleteTrials = this.componentContent.canDeleteTrials;\n            }\n\n            if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n                this.hideAllTrialsOnNewTrial = false;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                this.isResetSeriesButtonVisible = this.componentContent.showResetSeriesButton;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n                this.isSnipDrawingButtonVisible = false;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else {\n\n                    /*\n                     * trials are enabled so we will create an empty trial\n                     * since there is no student work\n                     */\n                    this.newTrial();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            // setup the graph\n            this.setupGraph();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                var studentDataVersion = this.$scope.graphController.studentDataVersion;\n\n                                if (studentDataVersion == null || studentDataVersion == 1) {\n                                    // the student data is version 1 which has no trials\n\n                                    // get the series\n                                    var series = this.$scope.graphController.series[seriesIndex];\n\n                                    if (series == null) {\n                                        // the series is null so we will create a series\n                                        series = {};\n                                        this.$scope.graphController.series[seriesIndex] = series;\n                                    }\n\n                                    // set the data into the series\n                                    series.data = data;\n                                } else {\n                                    // the student data is the newer version that has trials\n\n                                    // get the active trial\n                                    var trial = this.$scope.graphController.activeTrial;\n\n                                    if (trial != null && trial.series != null) {\n\n                                        // get the series\n                                        var series = trial.series[seriesIndex];\n\n                                        if (series == null) {\n                                            // the series is null so we will create a series\n                                            series = {};\n                                            this.$scope.graphController.series[seriesIndex] = series;\n                                        }\n\n                                        // set the data into the series\n                                        series.data = data;\n                                    }\n                                }\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                } else if (componentType == 'Embedded') {\n\n                    // convert the embedded data to series data\n                    if (componentState != null) {\n\n                        /*\n                         * make a copy of the component state so that we don't\n                         * reference the exact component state object from the\n                         * other component in case field values change.\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        // parse the latest trial and set it into the component\n                        this.parseLatestTrial(studentData);\n\n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.graphController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n        \n        /**\n         * The student has changed the file input\n         * @param element the file input element\n         */\n        this.$scope.fileUploadChanged = function(element) {\n            \n            var overwrite = true;\n            \n            // check if the active series already has data\n            if (this.graphController != null &&\n                this.graphController.activeSeries != null &&\n                this.graphController.activeSeries.data != null) {\n                \n                var activeSeriesData = this.graphController.activeSeries.data;\n                \n                if (activeSeriesData.length > 0) {\n                    /*\n                     * the active series already has data so we will ask the \n                     * student if they want to overwrite the data\n                     */\n                    \n                    var answer = confirm(\"Are you sure you want to overwrite the current line data?\");\n                    \n                    if (!answer) {\n                        // the student does not want to overwrite the data\n                        overwrite = false;\n                    }\n                }\n            }\n            \n            if (overwrite) {\n                // obtain the file content and overwrite the data in the graph\n                \n                // get the files from the file input element\n                var files = element.files;\n                \n                if (files != null && files.length > 0) {\n                    \n                    var reader = new FileReader();\n                    \n                    // this is the callback function for reader.readAsText()\n                    reader.onload = function() {\n                        \n                        // get the file contente\n                        var fileContent = reader.result;\n                        \n                        /*\n                         * read the csv file content and load the data into\n                         * the active series\n                         */\n                        this.scope.graphController.readCSV(fileContent);\n                        \n                        // remember the file name\n                        this.scope.graphController.setUploadedFileName(this.fileName);\n                        \n                        // redraw the graph\n                        this.scope.graphController.setupGraph();\n                        \n                        /*\n                         * notify the controller that the student data has\n                         * changed so that it will perform any necessary saving\n                         */\n                        this.scope.graphController.studentDataChanged();\n                    }\n                    \n                    /*\n                     * save a reference to this scope in the reader so that we\n                     * have access to the scope and graphController in the\n                     * reader.onload() function\n                     */\n                    reader.scope = this;\n                    \n                    // remember the file name\n                    reader.fileName = files[0].name;\n                    \n                    // read the text from the file\n                    reader.readAsText(files[0]);\n                    \n                    // upload the file to the studentuploads folder\n                    this.graphController.StudentAssetService.uploadAsset(files[0]);\n                }\n            }\n            \n            /*\n             * clear the file input element value so that onchange() will be\n             * called again if the student wants to upload the same file again\n             */\n            element.value = null;\n        }\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n\n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n\n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n\n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n\n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if (this.componentContent.enableTrials) {\n            /*\n             * trials are enabled so we will show the ones the student\n             * has checked\n             */\n            series = [];\n\n            var trials = this.trials;\n\n            // loop through all the trials\n            for (var t = 0; t < trials.length; t++) {\n                var trial = trials[t];\n\n                if (trial != null) {\n\n                    if (trial.show) {\n                        /*\n                         * we want to show this trial so we will append the\n                         * series from it\n                         */\n                        var tempSeries = trial.series;\n                        series = series.concat(tempSeries);\n                    }\n                }\n            }\n        }\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeries(tempSeries)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        // clear all the series ids\n        this.clearSeriesIds(allSeries);\n\n        // give all series ids\n        this.setSeriesIds(allSeries);\n\n        /*\n         * update the min and max x and y values if necessary so that all\n         * points are visible\n         */\n        this.updateMinMaxAxisValues(allSeries, xAxis, yAxis);\n        let timeout = this.$timeout;\n        \n        this.backgroundImage = this.componentContent.backgroundImage;\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    plotBackgroundImage: this.backgroundImage,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drop event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false,\n            func: function (chart) {\n                timeout(function () {\n                    chart.reflow();\n                }, 1000);\n            }\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the student can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n\n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n\n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n\n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n\n    /**\n     * Set the trials\n     * @param trials the trials\n     */\n    setTrials(trials) {\n        this.trials = trials;\n    }\n\n    /**\n     * Get the trials\n     * @return the trials\n     */\n    getTrials() {\n        return this.trials;\n    }\n\n    /**\n     * Get the index of the trial\n     * @param trial the trial object\n     * @return the index of the trial within the trials array\n     */\n    getTrialIndex(trial) {\n\n        var index = -1;\n\n        if (trial != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (trial == tempTrial) {\n                    // we have found the trial we are looking for\n                    index = t;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    /**\n     * Set the active trial\n     * @param index the index of the trial to make active\n     */\n    setActiveTrialByIndex(index) {\n\n        if (index != null) {\n\n            // get the trial\n            var trial = this.trials[index];\n\n            if (trial != null) {\n                // make the trial the active trial\n                this.activeTrial = trial;\n            }\n        }\n    }\n\n    /**\n     * Check whether the student is allowed to edit a given trial\n     * @param trial the trial object to check\n     * @return boolean whether the student can edit the trial\n     */\n    canEditTrial(trial) {\n        let result = false;\n        let series = trial.series;\n\n        for (let i = 0; i < series.length; i++) {\n            let currentSeries = series[i];\n            if (currentSeries.canEdit) {\n                // at least one series in this trial is editable\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set whether to show the active trial select menu\n     * @return whether to show the active trial select menu\n     */\n    showSelectActiveTrials() {\n        let result = false;\n        let editableTrials = 0;\n        for (let i = 0; i < this.trials.length; i++) {\n            let trial = this.trials[i];\n            if (this.canEditTrial(trial) && trial.show) {\n                editableTrials++;\n                if (editableTrials > 1) {\n                    // there are more than one editable trials, so show the menu\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n\n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n\n        var confirmMessage = '';\n\n        // get the series name\n        var seriesName = this.activeSeries.name;\n\n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n\n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n\n        if (answer) {\n            // the student answer yes to reset the series\n\n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n\n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n                if (originalSeries != null) {\n\n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n\n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (studentData.version == null || studentData.version == 1) {\n                    // the student data is version 1 which has no trials\n                    this.studentDataVersion = 1;\n\n                    // populate the student data into the component\n                    this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                } else {\n                    // the student data is the newer version that has trials\n\n                    this.studentDataVersion = studentData.version;\n\n                    if (studentData.trials != null && studentData.trials.length > 0) {\n\n                        // make a copy of the trials\n                        var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n\n                        // remember the trials\n                        this.setTrials(trialsCopy);\n\n                        // get the trial to show\n                        var activeTrialIndex = studentData.activeTrialIndex;\n\n                        if (activeTrialIndex == null) {\n                            /*\n                             * there is no active trial index so we will show the\n                             * last trial\n                             */\n\n                            if (trialsCopy.length > 0) {\n                                //make the last trial the active trial to show\n                                this.setActiveTrialByIndex(studentData.trials.length - 1);\n                            }\n                        } else {\n                            // there is an active trial index\n                            this.setActiveTrialByIndex(activeTrialIndex);\n                        }\n\n                        if (this.activeTrial != null && this.activeTrial.series != null) {\n                            // set the active trial series to be the series to display\n                            this.series = this.activeTrial.series;\n                        }\n\n                        // redraw the graph\n                        this.setupGraph();\n                    }\n                }\n\n                this.setTrialIdsToShow();\n\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            // check if a digest is in progress\n            if(!this.$scope.$$phase) {\n                // digest is not in progress so we can force a redraw\n                // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n                // and it still seems to work. Do we need this line?\n                // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n                //this.$scope.$apply();\n            }\n\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            studentData.version = this.studentDataVersion;\n\n            if (this.studentDataVersion == 1) {\n                // insert the series data\n                studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n            } else {\n                if (this.trials != null) {\n                    // make a copy of the trials\n                    studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n\n                    // remember which trial is being shown\n                    var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n                    studentData.activeTrialIndex = activeTrialIndex;\n                }\n            }\n\n            /*\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n            */\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n            \n            // get the uploaded file name if any\n            var uploadedFileName = this.getUploadedFileName();\n            \n            if (uploadedFileName != null) {\n                // set the uploaded file name\n                studentData.uploadedFileName = uploadedFileName;\n            }\n            \n            if (this.backgroundImage != null) {\n                studentData.backgroundImage = this.backgroundImage;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n\n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            /*\n             * loop through all the series to get the existing ids that are\n             * being used\n             */\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId != null) {\n                    // remember the series id\n                    usedSeriesIds.push(seriesId);\n                }\n            }\n\n            // loop through all the series\n            for (var y = 0; y < allSeries.length; y++) {\n                var series = allSeries[y];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = authoringComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.trialIdsToShow.length && this.hasEditableSeries() && this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n\n    /**\n     * Create a new trial\n     */\n    newTrial() {\n\n        // get the current number of trials\n        var trialCount = this.trials.length;\n\n        // make a copy of the original series (most likely blank with no points)\n        var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n\n        // regex to find the trial number from the trial names\n        var trialNameRegex = /Trial (\\d*)/;\n        var trialNumbers = [];\n\n        // loop through all the trials\n        for (var t = 0; t < this.trials.length; t++) {\n            var tempTrial = this.trials[t];\n\n            if (tempTrial != null) {\n                // get a trial name\n                var tempTrialName = tempTrial.name;\n\n                // run the regex matcher on the trial name\n                var match = trialNameRegex.exec(tempTrialName);\n\n                if (match != null && match.length > 0) {\n                    // we have found a trial name that looks like \"Trial X\"\n\n                    /*\n                     * get the trial number e.g. if the trial name is \"Trial 3\",\n                     * the trial number is 3\n                     */\n                    var tempTrialNumber = match[1];\n\n                    if (tempTrialNumber != null) {\n                        /*\n                         * get the number e.g. if the trial name is \"Trial 2\",\n                         * the trial number is 2\n                         */\n                        trialNumbers.push(parseInt(tempTrialNumber));\n                    }\n                }\n            }\n        }\n\n        // sort the trial numbers from smallest to largest\n        trialNumbers.sort();\n\n        var maxTrialNumber = 0;\n\n        if (trialNumbers.length > 0) {\n            // get the highest trial number\n            maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n        }\n\n        if (this.hideAllTrialsOnNewTrial) {\n            // we only want to show the latest trial\n\n            // loop through all the existing trials and hide them\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null) {\n                    tempTrial.show = false;\n                }\n            }\n        }\n\n        // make a new trial with a trial number one larger than the existing max\n        var trial = {};\n        trial.name = 'Trial ' + (maxTrialNumber + 1);\n        trial.series = series;\n        trial.show = true;\n        trial.id = this.UtilService.generateKey(10);\n\n        // add the trial to the array of trials\n        this.trials.push(trial);\n\n        // set the new trial to be the active trial\n        this.activeTrial = trial;\n\n        // set the series to be displayed\n        this.series = series;\n\n        var activeSeriesIndex = 0;\n\n        if (this.activeSeries != null) {\n            // get the index of the active series\n            activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n        }\n\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n\n        this.setTrialIdsToShow();\n\n        // redraw the graph\n        this.setupGraph();\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * Delete a trial\n     * @param trialIndex the index (in the trials array) of the trial to delete\n     */\n    deleteTrial(trialIndex) {\n        /*\n         * get the index of the active trial which will be the trial we are\n         * going to delete\n         */\n        //var trialIndex = this.trials.indexOf(this.activeTrial);\n\n        if (trialIndex == null) {\n            trialIndex = this.trials.indexOf(this.activeTrial);\n        }\n\n        if (trialIndex != null && trialIndex != -1) {\n            // remove the trial from the array of trials\n            this.trials.splice(trialIndex, 1);\n\n            if (this.trials.length == 0) {\n                // there are no more trials so we will create a new empty trial\n                this.newTrial();\n\n                // reset the axis limits\n                this.setXAxis(this.componentContent.xAxis);\n                this.setYAxis(this.componentContent.yAxis);\n            } else if (this.trials.length > 0) {\n                // set the active trial to the next highest trial number\n                if (trialIndex > (this.trials.length - 1)) {\n                    /*\n                     * the trial index is higher than any available index\n                     * in the trials array so we will just use the last index\n                     */\n                    this.activeTrial = this.trials[this.trials.length - 1];\n                    this.activeTrialChanged(this.trials.length - 1);\n                } else {\n                    // make the next highest trial the active trial\n                    this.activeTrial = this.trials[trialIndex];\n                    this.activeTrialChanged(trialIndex);\n                }\n            }\n\n            this.setTrialIdsToShow();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected a different trial to edit\n     */\n    activeTrialChanged() {\n\n        // get the active trial\n        var activeTrial = this.activeTrial;\n\n        if (activeTrial != null) {\n\n            // get the series from the trial\n            var series = activeTrial.series;\n\n            // set the series to be displayed\n            this.series = series;\n\n            /*\n             * set the active series index to the first series in the active trial\n             */\n            this.setActiveSeriesByIndex(0);\n\n            // redraw the graph\n            this.setupGraph();\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // tell the parent node that this component wants to save\n        //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    }\n\n    /**\n     * The student has selected different trials to view\n     */\n    trialIdsToShowChanged() {\n        // get the trial indexes to show\n        let trialIdsToShow = this.trialIdsToShow;\n        let trials = this.trials;\n\n        // update the trials\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            let id = trial.id;\n            if (trialIdsToShow.indexOf(id) > -1) {\n                trial.show = true;\n            } else {\n                trial.show = false;\n            }\n        }\n\n        // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n        // TODO: figure out why this check is sometimes necessary and remove\n        for (let a = 0; a < trialIdsToShow.length; a++) {\n            let idToShow = trialIdsToShow[a];\n            if (!this.getTrialById(idToShow)) {\n                trialIdsToShow.splice(a, 1);\n            }\n            this.trialIdsToShow = trialIdsToShow;\n        }\n\n        /*\n         * notify the controller that the student data has\n         * changed so that it will perform any necessary saving\n         */\n        this.studentDataChanged();\n\n        // update the selected trial text\n        this.selectedTrialsText = this.getSelectedTrialsText();\n    };\n\n    /**\n     * Set which trials are selected in the trial select model\n     */\n    setTrialIdsToShow() {\n        let idsToShow = [];\n\n        let trials = this.trials;\n        for (let i = 0; i < trials.length; i++) {\n            let trial = trials[i];\n            if (trial.show) {\n                // trial is visible on graph, so add it to the ids to show model\n                let id = trial.id;\n                idsToShow.push(id);\n            }\n        }\n\n        this.trialIdsToShow = idsToShow;\n    };\n\n    /**\n     * Get the text to show in the trials select dropdown\n     */\n    getSelectedTrialsText() {\n        if (this.trialIdsToShow.length === 1) {\n            let id = this.trialIdsToShow[0];\n            let name = this.getTrialById(id).name;\n            return name;\n        } else if (this.trialIdsToShow.length > 1) {\n            return this.trialIdsToShow.length + \" trials shown\";\n        } else {\n            return \"Select trials to show\";\n        }\n    };\n\n    /**\n     * Parse the trials and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseTrials0(studentData) {\n\n        if (studentData != null) {\n\n            // get the trials\n            var trials = studentData.trials;\n\n            if (trials != null) {\n\n                this.trials = [];\n\n                // loop through all the trials in the student data\n                for (var t = 0; t < trials.length; t++) {\n                    var tempTrial = trials[t];\n\n                    if (tempTrial != null) {\n\n                        // create a trial object\n                        var newTrial = {};\n\n                        if (tempTrial.name != null) {\n\n                            // set the trial name\n                            newTrial.name = tempTrial.name;\n                        }\n\n                        if (tempTrial.series != null) {\n\n                            // set the trial series\n                            newTrial.series = [];\n\n                            var tempSeries = tempTrial.series;\n\n                            if (tempSeries != null) {\n\n                                // loop through all the series in the trial\n                                for (var s = 0; s < tempSeries.length; s++) {\n\n                                    // get a single series\n                                    var singleSeries = tempSeries[s];\n\n                                    if (singleSeries != null) {\n\n                                        // get the series name and data\n                                        var seriesName = singleSeries.name;\n                                        var seriesData = singleSeries.data;\n\n                                        // make a series object\n                                        var newSeries = {};\n                                        newSeries.name = seriesName;\n                                        newSeries.data = seriesData;\n                                        newSeries.canEdit = false;\n                                        newSeries.allowPointSelect = false;\n\n                                        // add the series to the trial\n                                        newTrial.series.push(newSeries);\n                                    }\n                                }\n                            }\n                        }\n\n                        // add the trial to the array of trials\n                        this.trials.push(newTrial);\n                    }\n                }\n\n                if (trials.length > 0) {\n                    // make the last trial the active trial\n                    this.activeTrial = this.trials[trials.length - 1];\n                }\n            }\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Parse the latest trial and set it into the component\n     * @param studentData the student data object that has a trials field\n     */\n    parseLatestTrial(studentData) {\n\n        if (studentData != null) {\n\n            var latestStudentDataTrial = null;\n\n            if (studentData.trial != null) {\n                // the student data only has one trial\n                latestStudentDataTrial = studentData.trial;\n            }\n\n            if (studentData.trials != null && studentData.trials.length > 0) {\n                // the student data has an array of trials\n                latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n            }\n\n            if (latestStudentDataTrial != null) {\n\n                // get the latest student data trial id\n                var latestStudentDataTrialId = latestStudentDataTrial.id;\n\n                /*\n                 * remove the first default trial that is automatically created\n                 * when the student first visits the component otherwise there\n                 * will be a blank trial.\n                 */\n                if (this.trials.length > 0) {\n\n                    // get the first trial\n                    var firstTrial = this.trials[0];\n\n                    if (firstTrial != null) {\n\n                        /*\n                         * check if the trial has any series. if the trial doesn't\n                         * have any series it means it was automatically created by\n                         * the component.\n                         */\n                        if (!firstTrial.series.length || (firstTrial.series.length === 1 && !firstTrial.series[0].data.length)) {\n                            if (firstTrial.id !== latestStudentDataTrialId) {\n                                // delete the first trial\n                                this.trials.shift();\n                            }\n                        }\n                    }\n                }\n\n\n                // get the trial with the given trial id\n                var latestTrial = this.getTrialById(latestStudentDataTrialId);\n\n                if (latestTrial == null) {\n                    /*\n                     * we did not find a trial with the given id which means\n                     * this is a new trial\n                     */\n\n                    if (this.hideAllTrialsOnNewTrial) {\n                        // we only show the latest trial when a new trial starts\n\n                        // loop through all the existing trials and hide them\n                        for (var t = 0; t < this.trials.length; t++) {\n                            var tempTrial = this.trials[t];\n\n                            if (tempTrial != null) {\n                                tempTrial.show = false;\n                            }\n                        }\n                    }\n\n                    // create the new trial\n                    latestTrial = {};\n\n                    latestTrial.id = latestStudentDataTrialId;\n\n                    latestTrial.show = true;\n\n                    this.setXAxis(this.componentContent.xAxis);\n                    this.setYAxis(this.componentContent.yAxis);\n\n                    // add the trial to the array of trials\n                    this.trials.push(latestTrial);\n                }\n\n                if (latestStudentDataTrial.name != null) {\n\n                    // set the trial name\n                    latestTrial.name = latestStudentDataTrial.name;\n                }\n\n                if (latestStudentDataTrial.series != null) {\n\n                    // set the trial series\n                    latestTrial.series = [];\n\n                    var tempSeries = latestStudentDataTrial.series;\n\n                    if (tempSeries != null) {\n\n                        // loop through all the series in the trial\n                        for (var s = 0; s < tempSeries.length; s++) {\n\n                            // get a single series\n                            var singleSeries = tempSeries[s];\n\n                            if (singleSeries != null) {\n\n                                // get the series name and data\n                                var seriesName = singleSeries.name;\n                                var seriesData = singleSeries.data;\n                                var seriesColor = singleSeries.color;\n\n                                // make a series object\n                                var newSeries = {};\n                                newSeries.name = seriesName;\n                                newSeries.data = seriesData;\n                                newSeries.color = seriesColor;\n                                newSeries.canEdit = false;\n                                newSeries.allowPointSelect = false;\n\n                                // add the series to the trial\n                                latestTrial.series.push(newSeries);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (this.trials.length > 0) {\n                // make the last trial the active trial\n                this.activeTrial = this.trials[this.trials.length - 1];\n                this.activeTrial.show = true;\n            }\n\n            this.setTrialIdsToShow();\n\n            // redraw the graph so that the active trial gets displayed\n            this.activeTrialChanged();\n        }\n    }\n\n    /**\n     * Get the trial by id\n     * @param id the trial id\n     * @returns the trial with the given id or null\n     */\n    getTrialById(id) {\n\n        var trial = null;\n\n        if (id != null) {\n\n            // loop through all the trials\n            for (var t = 0; t < this.trials.length; t++) {\n                var tempTrial = this.trials[t];\n\n                if (tempTrial != null && tempTrial.id == id) {\n                    // we have found the trial with the id we want\n                    trial = tempTrial;\n                    break;\n                }\n            }\n        }\n\n        return trial;\n    }\n\n    /**\n     * Check if there is an editable series\n     * @return whether there is an editable series\n     */\n    hasEditableSeries() {\n\n        var result = false;\n\n        // get the array of series\n        var series = this.getSeries();\n\n        if (series != null) {\n\n            // loop through all the lines\n            for (var s = 0; s < series.length; s++) {\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    if (tempSeries.canEdit) {\n                        // this line can be edited\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Update the x and y axis min and max values if necessary to make sure\n     * all points are visible in the graph view.\n     * @param series the an array of series\n     * @param xAxis the x axis object\n     * @param yAxis the y axis object\n     */\n    updateMinMaxAxisValues(series, xAxis, yAxis) {\n\n        // get the min and max x and y values\n        var minMaxValues = this.getMinMaxValues(series);\n\n        if (minMaxValues != null) {\n\n            if (xAxis != null) {\n                if (minMaxValues.xMin < xAxis.min) {\n                    /*\n                     * there is a point that has a smaller x value than the\n                     * specified x axis min. we will remove the min value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the min x value automatically\n                     */\n                    xAxis.min = null;\n                    xAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.xMax >= xAxis.max) {\n                    /*\n                     * there is a point that has a larger x value than the\n                     * specified x axis max. we will remove the max value from\n                     * the xAxis object so that highcharts will automatically\n                     * set the max x value automatically\n                     */\n                    xAxis.max = null;\n                    xAxis.maxPadding = 0.2;\n                }\n            }\n\n            if (yAxis != null) {\n                if (minMaxValues.yMin < yAxis.min) {\n                    /*\n                     * there is a point that has a smaller y value than the\n                     * specified y axis min. we will remove the min value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the min y value automatically\n                     */\n                    yAxis.min = null;\n                    yAxis.minPadding = 0.2;\n                }\n\n                if (minMaxValues.yMax >= yAxis.max) {\n                    /*\n                     * there is a point that has a larger y value than the\n                     * specified y axis max. we will remove the max value from\n                     * the yAxis object so that highcharts will automatically\n                     * set the max y value automatically\n                     */\n                    yAxis.max = null;\n                    yAxis.maxPadding = 0.2;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the min and max x and y values\n     * @param series an array of series\n     * @returns an object containing the min and max x and y values from the\n     * series data\n     */\n    getMinMaxValues(series) {\n\n        var result = {};\n        var xMin = 0;\n        var xMax = 0;\n        var yMin = 0;\n        var yMax = 0;\n\n        if (series != null) {\n\n            // loop through all the series\n            for (var s = 0; s < series.length; s++) {\n\n                // get a single series\n                var tempSeries = series[s];\n\n                if (tempSeries != null) {\n\n                    // get the data from the single series\n                    var data = tempSeries.data;\n\n                    if (data != null) {\n\n                        // loop through all the data points in the single series\n                        for (var d = 0; d < data.length; d++) {\n                            var tempData = data[d];\n\n                            var tempX = null;\n                            var tempY = null;\n\n                            if (tempData != null) {\n                                if (tempData.constructor.name == 'Object') {\n                                    /*\n                                     * the element is an object so we will get\n                                     * the x and y fields\n                                     */\n                                    tempX = tempData.x;\n                                    tempY = tempData.y;\n                                } else if (tempData.constructor.name == 'Array') {\n                                    /*\n                                     * the element is an array so we will get\n                                     * the first and second element in the array\n                                     * which correspond to the x and y values\n                                     */\n                                    tempX = tempData[0];\n                                    tempY = tempData[1];\n                                }\n                            }\n\n                            if (tempX > xMax) {\n                                /*\n                                 * we have found a data point with a greater x\n                                 * value than what we have previously found\n                                 */\n                                xMax = tempX;\n                            }\n\n                            if (tempX < xMin) {\n                                /*\n                                 * we have found a data point with a smaller x\n                                 * value than what we have previously found\n                                 */\n                                xMin = tempX\n                            }\n\n                            if (tempY > yMax) {\n                                /*\n                                 * we have found a data point with a greater y\n                                 * value than what we have previously found\n                                 */\n                                yMax = tempY;\n                            }\n\n                            if (tempY < yMin) {\n                                /*\n                                 * we have found a data point with a smaller y\n                                 * value than what we have previously found\n                                 */\n                                yMin = tempY;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        result.xMin = xMin;\n        result.xMax = xMax;\n        result.yMin = yMin;\n        result.yMax = yMax;\n\n        return result;\n    }\n\n    /**\n     * Clear all the series ids\n     * @param allSeries all of the series\n     */\n    clearSeriesIds(allSeries) {\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var s = 0; s < allSeries.length; s++) {\n                var tempSeries = allSeries[s];\n\n                if (tempSeries != null) {\n                    // clear the id\n                    tempSeries.id = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable Trials\" checkbox was clicked\n     */\n    authoringViewEnableTrialsClicked() {\n\n        if (this.authoringComponentContent.enableTrials) {\n            // trials are now enabled\n            this.authoringComponentContent.canCreateNewTrials = true;\n            this.authoringComponentContent.canDeleteTrials = true;\n        } else {\n            // trials are now disabled\n            this.authoringComponentContent.canCreateNewTrials = false;\n            this.authoringComponentContent.canDeleteTrials = false;\n            this.authoringComponentContent.hideAllTrialsOnNewTrial = true;\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check whether we need to show the snip drawing button\n     * @return whether to show the snip drawing button\n     */\n    showSnipDrawingButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipDrawingButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the drawing by converting it to an image\n     * @param $event the click event\n     */\n    snipDrawing($event) {\n\n        // get the highcharts div\n        var highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n\n        if (highchartsDiv != null && highchartsDiv.length > 0) {\n            highchartsDiv = highchartsDiv[0];\n\n            // convert the model element to a canvas element\n            html2canvas(highchartsDiv).then((canvas) => {\n\n                // get the canvas as a base64 string\n                var img_b64 = canvas.toDataURL('image/png');\n\n                // get the image object\n                var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            });\n        }\n    }\n    \n    /**\n     * Read a csv string and load the data into the active series\n     * @param csv a csv string\n     */\n    readCSV(csv) {\n        \n        if (csv != null) {\n            \n            // splite the string into lines\n            var lines = csv.split(/\\r\\n|\\n/);\n            \n            // clear the data in the active series\n            this.activeSeries.data = [];\n            \n            // loop through all the lines\n            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n                \n                // get a line\n                var line = lines[lineNumber];\n                \n                if (line != null) {\n                    \n                    // split the line to get the values\n                    var values = line.split(\",\");\n                    \n                    if (values != null) {\n                        \n                        // get the x and y values\n                        var x = parseFloat(values[0]);\n                        var y = parseFloat(values[1]);\n                        \n                        if (!isNaN(x) && !isNaN(y)) {\n                            // make the data point\n                            var dataPoint = [x, y];\n                            \n                            // add the data point to the active series\n                            this.activeSeries.data.push(dataPoint);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Set the uploaded file name\n     * @param fileName the file name\n     */\n    setUploadedFileName(fileName) {\n        this.uploadedFileName = fileName;\n    }\n    \n    /**\n     * Get the uploaded file name\n     * @return the uploaded file name\n     */\n    getUploadedFileName() {\n        return this.uploadedFileName;\n    }\n}\n\n\nGraphController.$inject = [\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'GraphService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}