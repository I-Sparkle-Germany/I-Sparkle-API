{"version":3,"sources":["graphController.es6"],"names":["GraphController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","graphType","series","seriesColors","seriesMarkers","activeSeries","isResetGraphButtonVisible","isSelectSeriesVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","showUndoButton","isLegendEnabled","hasCustomLegendBeenSet","showTrialSelect","chartId","width","height","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","mouseOverPoints","initialComponentState","undoStack","addNextComponentStateToUndoStack","componentId","initializeComponentContentParams","componentState","isStudentMode","initializeStudentMode","mode","initializeGradingMode","initializeOnlyShowWorkMode","componentStateHasStudentWork","componentContent","setStudentWork","previousComponentState","canSubmit","isSubmitButtonDisabled","disableComponentIfNecessary","initializeHandleConnectedComponentStudentDataChanged","initializeDeleteKeyPressedListener","initializeFileUploadChanged","initializeScopeGetComponentState","drawGraph","then","broadcastDoneRenderingComponent","hideLegend","hideTrialSelect","isResetSeriesButtonVisible","newTrial","hasConnectedComponentAlwaysField","handleConnectedComponents","hasConnectedComponent","id","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","handleTableConnectedComponentStudentDataChanged","handleEmbeddedConnectedComponentStudentDataChanged","handleAnimationConnectedComponentStudentDataChanged","deleteKeyPressedListenerDestroyer","$on","handleDeleteKeyPressed","fileUploadChanged","element","activeSeriesData","data","overwrite","length","confirm","$translate","uploadFileAndReadContent","value","files","reader","FileReader","onload","fileContent","result","readCSVIntoActiveSeries","setUploadedFileName","fileName","studentDataChanged","scope","name","readAsText","uploadAsset","studentData","tableData","rows","convertRowDataToSeriesData","seriesIndex","isStudentDataVersion1","trial","isDirty","makeCopyOfJSONObject","processConnectedComponentStudentData","t","setVerticalPlotLine","submit","setupMouseMoveListenerDone","$","unbind","bind","e","mouseDown","mouseDownEventOccurred","offsetX","offsetY","x","handleMouseDownXPosition","y","handleMouseDownYPosition","saveMouseOverPoints","currentTimestamp","Date","getTime","timeBetweenSendingMouseOverPoints","lastSavedMouseMoveTimestamp","addMouseOverPoint","chart","highcharts","chartXAxis","xAxis","toValue","makeSureXIsWithinXMinMaxLimits","showMouseXPlotLine","showXPlotLine","chartYAxis","yAxis","makeSureYIsWithinYMinMaxLimits","showMouseYPlotLine","showYPlotLine","text","removePlotLine","plotLine","color","label","verticalAlign","addPlotLine","highlightXRangeFromZero","drawRangeRectangle","min","max","xMin","xMax","yMin","yMax","strokeColor","strokeWidth","fillColor","fillOpacity","translate","rectangle","renderer","rect","css","stroke","fill","add","attr","plotLeft","plotHeight","plotTop","align","Highcharts","charts","push","useTimeout","deferred","defer","clearChartConfig","drawGraphHelper","promise","title","setupXAxis","setupYAxis","setupWidth","setupHeight","setupXAxisLimitSpacerWidth","isTrialsEnabled","getSeriesFromTrials","plotBands","getPlotBandsFromTrials","getSeries","setDefaultActiveSeries","setAllSeriesFields","refreshSeriesIds","updateMinMaxAxisValues","plotLines","zoomType","getZoomType","chartConfig","createChartConfig","useCustomLegend","setCustomLegend","allowDecimals","xAxisLimitSpacerWidth","show","concat","trialPlotBands","clearSeriesIds","setSeriesIds","singleSeries","setSingleSeriesFields","canEdit","isActiveSeries","draggableX","draggableY","cursor","stickyTracking","shared","allowPointSelect","enableMouseTracking","allowPointMouseOver","isMousePlotLineOn","options","legend","enabled","tooltip","formatter","createTooltipFormatter","plotBackgroundImage","events","load","resolve","click","createGraphClickHandler","plotOptions","dragSensitivity","legendItemClick","createLegendItemClickHandler","point","drag","createPointDragEventHandler","drop","createPointDropEventHandler","loading","func","createGraphCallbackHandler","thisGraphController","isLimitXAxisType","getSeriesText","xText","getXTextForLimitGraph","yText","getYTextForLimitGraph","combineXTextAndYText","isCategoriesXAxisType","getXTextForCategoriesGraph","getYTextForCategoriesGraph","pointHasCustomTooltip","userOptions","units","performRounding","xAxisUnits","getXAxisUnits","yAxisUnits","getYAxisUnits","category","getCategoryByIndex","index","event","isIgnoreClickEvent","handleGraphClickEvent","currentTime","lastDropTime","isDisabled","activeSeriesId","visible","alert","addPointToSeries","canHideSeries","canStudentHideSeriesOnLegendClick","yAxisSeries","getSeriesById","dragging","target","showXPlotLineIfOn","showYPlotLineIfOn","isMouseXPlotLineOn","isMouseYPlotLineOn","isSaveMouseOverPoints","setupMouseMoveListener","reflow","userAgent","navigator","indexOf","matrixRegEx","currentTransform","newTransform","replace","html","customLegend","dataPoint","tempDataXValue","splice","d","tempTrial","editableTrials","canEditTrial","getSeriesByIndex","setActiveSeries","setSeries","setXAxis","setYAxis","confirmMessage","seriesName","resetSeriesHelper","isReset","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","setActiveSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","submitCounter","processLatestStudentWork","useTimeoutSetupGraph","emitComponentDirty","isSubmitDirty","emitComponentSubmitDirty","clearSaveText","action","createComponentState","emitComponentStudentDataChanged","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","isSubmit","nodeId","createComponentStateAdditionalProcessing","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","additionalProcessingFunction","all","isPromptVisible","multipleSeries","s","showClassmateWorkSource","getClassmateStudentWork","componentStates","promises","getTrialsFromComponentState","promiseResults","mergedTrials","nodePositionAndTitle","getNodePositionAndTitleByNodeId","generateKey","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","newSeriesIndex","marker","regression","regressionSettings","getSkipFirstRowValue","getXColumnValue","getYColumnValue","r","row","xCell","yCell","addPointFromTableIntoData","xNumber","Number","yNumber","isNaN","allSeries","usedSeriesIds","getAllUsedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","selectedPoints","getSelectedPoints","indexesToDelete","selectedPoint","sort","reverse","i","symbol","isActiveSeriesIndex","hasEditableSeries","trialNumbers","getTrialNumbers","maxTrialNumber","trialNumberRegex","tempTrialName","match","exec","tempTrialNumber","parseInt","trialIndex","trialToRemove","trialToRemoveId","makeHighestTrialActive","getSelectedTrialsText","highestTrial","getHighestTrial","highestTrialIndex","trialId","getTrialById","lastShownTrialId","lastShownTrial","a","idToShow","arraysContainSameValues","previousTrialIdsToShow","idsToShow","fields","parseLatestTrial","field","when","firstTime","readConnectedComponentFieldFromStudentData","selectedCells","selectedTrialIds","convertSelectedCellsToTrialIds","includes","deleteTrialsByTrialId","trialIdsToDelete","trialIdToDelete","deleteTrialId","latestStudentDataTrial","getLatestStudentDataTrial","latestStudentDataTrialId","removeDefaultTrialIfNecessary","latestTrial","createNewTrialIfNecessary","copySeriesintoTrial","copyTrialNameIntoTrial","copyPlotBandsIntoTrial","setLastTrialToActive","xPlotLine","activeTrialChanged","newSeries","alloWPointSelect","dashStyle","firstTrial","isTrialHasEmptySeries","deleteFirstTrial","isSeriesEmpty","shift","hideAllTrials","createNewTrial","oldTrial","isAddSeries","copySeries","highlightLatestPoint","highlightPointOnX","xPointToHighlight","seriesNumbers","minMaxValues","getMinMaxValues","updateXAxisMinMaxIfNecessary","updateYAxisMinMaxIfNecessary","locked","minPadding","maxPadding","tempX","tempY","constructor","$event","highchartsDiv","angular","find","canvas","canvasBase64Image","toDataURL","imageObject","getImageObjectFromBase64String","addNote","csvString","lines","split","line","values","parseFloat","xAxisType","convertedData","oldDataPoint","Array","isArray","number","roundValuesTo","roundToNearestInteger","roundToNearestTenth","roundToNearestHundredth","Math","round","zIndex","$apply","connectedComponentBackgroundImage","connectedComponents","handleShowClassmateWorkConnectedComponent","handleShowOrImportWorkConnectedComponent","handleConnectedComponentPromiseResults","isPreview","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","getTrialsFromClassmates","component","getComponentByNodeIdAndComponentId","injectAssetPaths","connectedComponentOfComponentState","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","promiseResult","newComponentState","handleConnectedComponentsHelper","generateImageFromComponentState","image","url","mergedComponentState","connectedComponentState","mergeComponentState","mergeNullComponentState","baseComponentState","mergeFields","mergeField","readConnectedComponentField","pop","categories","getXValueFromDataPoint","getYValueFromDataPoint","getLatestMouseOverPointX","getLatestMouseOverPointY","seriesId","points","refresh","removeHoverStateFromPoints","setHoverStateOnPoint","setState","latestSeries","latestPoint","selectedCell","material","bevTemp","airTemp","selectedTrialId","enableTrials","ComponentController","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\n\nclass GraphController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.GraphService = GraphService;\n    this.graphType = null;\n    this.series = [];\n    this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n    this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n    this.activeSeries = null;\n    this.isResetGraphButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    this.hideAllTrialsOnNewTrial = true;\n    this.showUndoButton = false;\n    this.isLegendEnabled = true;\n    this.hasCustomLegendBeenSet = false;\n    this.showTrialSelect = true;\n    this.chartId = 'chart1';\n    this.width = null;\n    this.height = null;\n    this.trials = [];\n    this.activeTrial = null;\n    this.trialIdsToShow = [];\n    this.selectedTrialsText = '';\n    this.studentDataVersion = 2;\n    this.canCreateNewTrials = false;\n    this.canDeleteTrials = false;\n    this.uploadedFileName = null;\n    this.backgroundImage = null;\n    this.mouseOverPoints = [];\n    this.initialComponentState = null;\n    /*\n     * An array to store the component states for the student to undo.\n     * The undoStack will contain the component states from the current\n     * visit except for the current component state.\n     */\n    this.undoStack = [];\n    /*\n     * whether to add the next component state created in\n     * studentDataChanged() to the undoStack\n     */\n    this.addNextComponentStateToUndoStack = false;\n    this.chartId = 'chart_' + this.componentId;\n    this.initializeComponentContentParams();\n    const componentState = this.$scope.componentState;\n    if (this.isStudentMode()) {\n      this.initializeStudentMode(componentState);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.initializeGradingMode(componentState);\n    } else if (this.mode === 'onlyShowWork') {\n      this.initializeOnlyShowWorkMode();\n    }\n    if (!this.isStudentMode() &&\n        this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    }\n    this.initialComponentState = componentState;\n    this.previousComponentState = componentState;\n    if (!this.canSubmit()) {\n      this.isSubmitButtonDisabled = true;\n    }\n    this.disableComponentIfNecessary();\n    this.initializeHandleConnectedComponentStudentDataChanged();\n    this.initializeDeleteKeyPressedListener();\n    this.initializeFileUploadChanged();\n    this.initializeScopeGetComponentState(this.$scope, 'graphController');\n    this.drawGraph().then(() => {\n      this.broadcastDoneRenderingComponent();\n    });\n  }\n\n  initializeComponentContentParams() {\n    this.graphType = this.componentContent.graphType;\n    if (this.graphType == null) {\n      this.graphType = 'line';\n    }\n    if (this.componentContent.canCreateNewTrials != null) {\n      this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n    }\n    if (this.componentContent.canDeleteTrials != null) {\n      this.canDeleteTrials = this.componentContent.canDeleteTrials;\n    }\n    if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n      this.hideAllTrialsOnNewTrial = false;\n    }\n    if (this.componentContent.hideLegend) {\n      this.isLegendEnabled = false;\n    }\n    if (this.componentContent.hideTrialSelect) {\n      this.showTrialSelect = false;\n    }\n  }\n\n  initializeStudentMode(componentState) {\n    this.isResetSeriesButtonVisible = true;\n    this.isSelectSeriesVisible = true;\n    this.backgroundImage = this.componentContent.backgroundImage;\n    if (!this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.newTrial();\n    }\n    if (this.UtilService.hasConnectedComponentAlwaysField(this.componentContent)) {\n      this.handleConnectedComponents();\n    } else if (this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.handleConnectedComponents();\n    }\n  }\n\n  initializeGradingMode(componentState) {\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    if (componentState != null) {\n      if (this.mode === 'gradingRevision') {\n        this.chartId = 'chart_gradingRevision_' + componentState.id;\n      } else {\n        this.chartId = 'chart_' + componentState.id;\n      }\n    }\n  }\n\n  initializeOnlyShowWorkMode() {\n    this.isResetGraphButtonVisible = false;\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.backgroundImage = this.componentContent.backgroundImage;\n  }\n\n  initializeHandleConnectedComponentStudentDataChanged() {\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      const componentType = connectedComponent.type;\n      if (componentType === 'Table') {\n        this.handleTableConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Embedded') {\n        this.handleEmbeddedConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Animation') {\n        this.handleAnimationConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      }\n    };\n  }\n\n  initializeDeleteKeyPressedListener() {\n    this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n      this.handleDeleteKeyPressed();\n    });\n  }\n\n  initializeFileUploadChanged() {\n    this.$scope.fileUploadChanged = (element) => {\n      const activeSeriesData = this.activeSeries.data;\n      let overwrite = true;\n      if (activeSeriesData.length > 0) {\n        if (!confirm(this.$translate('graph.areYouSureYouWantToOverwriteTheCurrentLineData'))) {\n          overwrite = false;\n        }\n      }\n      if (overwrite) {\n        this.uploadFileAndReadContent(element);\n      }\n      /*\n       * clear the file input element value so that onchange() will be\n       * called again if the student wants to upload the same file again\n       */\n      element.value = null;\n    };\n  }\n\n  uploadFileAndReadContent(element) {\n    const files = element.files;\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileContent = reader.result;\n      this.readCSVIntoActiveSeries(fileContent);\n      this.setUploadedFileName(this.fileName);\n      this.studentDataChanged();\n    };\n    reader.scope = this;\n    reader.fileName = files[0].name;\n    reader.readAsText(files[0]);\n    this.StudentAssetService.uploadAsset(files[0]);\n  }\n\n  cleanupBeforeExiting() {\n    this.deleteKeyPressedListenerDestroyer();\n  }\n\n  handleTableConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null && studentData.tableData != null) {\n      const rows = studentData.tableData;\n      const data = this.convertRowDataToSeriesData(rows, connectedComponentParams);\n      let seriesIndex = connectedComponentParams.seriesIndex;\n      if (seriesIndex == null) {\n        seriesIndex = 0;\n      }\n      if (this.isStudentDataVersion1()) {\n        let series = this.series[seriesIndex];\n        if (series == null) {\n          series = {};\n          this.series[seriesIndex] = series;\n        }\n        series.data = data;\n      } else {\n        const trial = this.activeTrial;\n        if (trial != null && trial.series != null) {\n          let series = trial.series[seriesIndex];\n          if (series == null) {\n            series = {};\n            this.series[seriesIndex] = series;\n          }\n          series.data = data;\n        }\n      }\n      this.drawGraph();\n      this.isDirty = true;\n    }\n  }\n\n  handleEmbeddedConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n    const studentData = componentState.studentData;\n    this.processConnectedComponentStudentData(studentData, connectedComponentParams);\n    this.studentDataChanged();\n  }\n\n  handleAnimationConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    if (componentState.t != null) {\n      this.setVerticalPlotLine(componentState.t);\n      this.drawGraph();\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setupMouseMoveListener() {\n    if (!this.setupMouseMoveListenerDone) {\n      /*\n       * Remove all existing listeners on the chart div to make sure we don't\n       * bind a listener multiple times.\n       */\n      $('#' + this.chartId).unbind();\n      $('#' + this.chartId).bind('mousedown', (e) => {\n        this.mouseDown = true;\n        this.mouseDownEventOccurred(e);\n      });\n      $('#' + this.chartId).bind('mouseup', (e) => {\n        this.mouseDown = false;\n      });\n      $('#' + this.chartId).bind('mousemove', (e) => {\n        if (this.mouseDown) {\n          this.mouseDownEventOccurred(e);\n        }\n      });\n      $('#' + this.chartId).bind('mouseleave', (e) => {\n        this.mouseDown = false;\n      });\n      this.setupMouseMoveListenerDone = true;\n    }\n  }\n\n  /**\n   * The student has moved the mouse while holding the mouse button down.\n   * @param e The mouse event.\n   */\n  mouseDownEventOccurred(e) {\n    /*\n     * Firefox displays abnormal behavior when the student drags the plot line.\n     * In Firefox, when the mouse is on top of the plot line, the event will\n     * contain offset values relative to the plot line instead of relative to\n     * the graph container. We always want the offset values relative to the\n     * graph container so we will ignore events where the offset values are\n     * relative to the plot line.\n     */\n    if (e.offsetX < 10 || e.offsetY < 10) {\n      return;\n    }\n    const x = this.handleMouseDownXPosition(e);\n    const y = this.handleMouseDownYPosition(e);\n    if (this.componentContent.saveMouseOverPoints) {\n      /*\n       * Make sure we aren't saving the points too frequently. We want to avoid\n       * saving too many unnecessary data points.\n       */\n      const currentTimestamp = new Date().getTime();\n      /*\n       * Make sure this many milliseconds has passed before saving another mouse\n       * over point.\n       */\n      const timeBetweenSendingMouseOverPoints = 200;\n      if (this.lastSavedMouseMoveTimestamp == null ||\n          currentTimestamp - this.lastSavedMouseMoveTimestamp > timeBetweenSendingMouseOverPoints) {\n        this.addMouseOverPoint(x, y);\n        this.studentDataChanged();\n        this.lastSavedMouseMoveTimestamp = currentTimestamp;\n      }\n    }\n  }\n\n  handleMouseDownXPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    let x = chartXAxis.toValue(e.offsetX, false);\n    x = this.makeSureXIsWithinXMinMaxLimits(x);\n    if (this.componentContent.showMouseXPlotLine) {\n      this.showXPlotLine(x);\n    }\n    return x;\n  }\n\n  handleMouseDownYPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    let y = chartYAxis.toValue(e.offsetY, false);\n    y = this.makeSureYIsWithinYMinMaxLimits(y);\n    if (this.componentContent.showMouseYPlotLine) {\n      this.showYPlotLine(y);\n    }\n    return y;\n  }\n\n  /**\n   * Show the vertical plot line at the given x.\n   * @param x The x value to show the vertical line at.\n   * @param text The text to show on the plot line.\n   */\n  showXPlotLine(x, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    const plotLine = {\n      value: x,\n      color: 'red',\n      width: 4,\n      id: 'plot-line-x'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        verticalAlign: 'top'\n      };\n    }\n    chartXAxis.addPlotLine(plotLine);\n    if (this.componentContent.highlightXRangeFromZero) {\n      this.drawRangeRectangle(0, x, chart.yAxis[0].min, chart.yAxis[0].max);\n    }\n  }\n\n  /**\n   * Draw a rectangle on the graph. This is used for highlighting a range.\n   * @param xMin The left x value in the graph x axis units.\n   * @param xMax The right x value in the graph x axis units.\n   * @param yMin The bottom y value in the graph y axis units.\n   * @param yMax The top y value in the graph y axis units.\n   * @param strokeColor The color of the border.\n   * @param strokeWidth The width of the border.\n   * @param fillColor The color inside the rectangle.\n   * @param fillOpacity The opacity of the color inside the rectangle.\n   */\n  drawRangeRectangle(xMin, xMax, yMin, yMax, strokeColor = 'black', strokeWidth = '.5',\n      fillColor = 'black', fillOpacity = '.1') {\n    const chart = $('#' + this.chartId).highcharts();\n    // convert the x and y values to pixel values\n    xMin = chart.xAxis[0].translate(xMin);\n    xMax = chart.xAxis[0].translate(xMax);\n    yMin = chart.yAxis[0].translate(yMin);\n    yMax = chart.yAxis[0].translate(yMax);\n    // create the rectangle if it hasn't been created before\n    if (this.rectangle == null) {\n      this.rectangle = chart.renderer.rect(0,0,0,0,0).css({\n        stroke: strokeColor,\n        strokeWidth: strokeWidth,\n        fill: fillColor,\n        fillOpacity: fillOpacity\n      }).add();\n    }\n    // update the rectangle position and size\n    this.rectangle.attr({\n      x: xMin + chart.plotLeft,\n      y: chart.plotHeight + chart.plotTop - yMax,\n      width: xMax - xMin,\n      height: yMax - yMin\n    });\n  }\n\n  /**\n   * Show the horizontal plot line at the given y.\n   * @param y The y value to show the horizontal line at.\n   * @param text The text to show on the plot line.\n   */\n  showYPlotLine(y, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n    const plotLine = {\n      value: y,\n      color: 'red',\n      width: 2,\n      id: 'plot-line-y'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        align: 'right'\n      };\n    }\n    chartYAxis.addPlotLine(plotLine);\n  }\n\n  clearPlotLines() {\n    const chart = Highcharts.charts[0];\n    const chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    const chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n  }\n\n  /**\n   * If the x value is not within the x min and max limits, we will modify the x value to be at the\n   * limit.\n   * @param x the x value\n   * @return an x value between the x min and max limits\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    if (x < this.xAxis.min) {\n      x = this.xAxis.min;\n    }\n    if (x > this.xAxis.max) {\n      x = this.xAxis.max;\n    }\n    return x;\n  }\n\n  /**\n   * If the y value is not within the y min and max limits, we will modify the y value to be at the\n   * limit.\n   * @param y the y value\n   * @return a y value between the y min and max limits\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    if (y < this.yAxis.min) {\n      y = this.yAxis.min;\n    }\n    if (y > this.yAxis.max) {\n      y = this.yAxis.max;\n    }\n    return y;\n  }\n\n  /**\n   * Add a mouse over point to the array of student mouse over points.\n   * @param x the x value in graph units\n   * @param y the y value in graph units\n   */\n  addMouseOverPoint(x, y) {\n    this.mouseOverPoints.push([x, y]);\n  }\n\n  /**\n   * @param useTimeout whether to call the drawGraphHelper() function in a timeout callback\n   */\n  drawGraph(useTimeout) {\n    const deferred = this.$q.defer();\n    if (useTimeout) {\n      /*\n       * Clear the chart config so that the graph is completely refreshed. We need to do this\n       * otherwise all the series will react to mouseover but we only want the active series to\n       * react to mouseover.\n       */\n      this.clearChartConfig();\n      /*\n       * Call the setup graph helper after a timeout. this is required so that the graph is\n       * completely refreshed so that only the active series will react to mouseover.\n       */\n      this.$timeout(() => {\n        this.drawGraphHelper(deferred);\n      });\n    } else {\n      this.drawGraphHelper(deferred);\n    }\n    return deferred.promise;\n  }\n\n  /**\n   * @param deferred A promise that should be resolved after the graph is done rendering.\n   */\n  drawGraphHelper(deferred) {\n    const title = this.componentContent.title;\n    const xAxis = this.setupXAxis();\n    const yAxis = this.setupYAxis();\n    this.setupWidth();\n    this.setupHeight();\n    this.setupXAxisLimitSpacerWidth();\n    let series = null;\n    if (this.isTrialsEnabled()) {\n      series = this.getSeriesFromTrials(this.trials);\n      xAxis.plotBands = this.getPlotBandsFromTrials(this.trials);\n    } else {\n      series = this.getSeries();\n    }\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    }\n    this.showUndoButton = false;\n    this.setAllSeriesFields(series);\n    this.refreshSeriesIds(series);\n    this.updateMinMaxAxisValues(series, xAxis, yAxis);\n    if (this.plotLines != null) {\n      xAxis.plotLines = this.plotLines;\n    }\n    const zoomType = this.getZoomType();\n    this.chartConfig = this.createChartConfig(deferred, title, xAxis, yAxis, series, zoomType);\n    if (this.componentContent.useCustomLegend) {\n      // use a timeout so the graph has a chance to render before we set the custom legend\n      this.$timeout(() => {\n        this.setCustomLegend();\n      });\n    }\n    return deferred.promise;\n  }\n\n  setupXAxis() {\n    if (this.xAxis == null && this.componentContent.xAxis != null) {\n      this.xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n    }\n    if (this.xAxis != null) {\n      this.xAxis.allowDecimals = false;\n      this.xAxis.plotBands = null;\n      if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n        this.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n      }\n    }\n    return this.xAxis;\n  }\n\n  setupYAxis() {\n    if (this.yAxis == null && this.componentContent.yAxis != null) {\n      this.yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n    }\n    if (this.yAxis != null) {\n      this.yAxis.allowDecimals = false;\n    }\n    return this.yAxis;\n  }\n\n  setupWidth() {\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n  }\n\n  setupHeight() {\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n  }\n\n  setupXAxisLimitSpacerWidth() {\n    if (this.width > 100) {\n      this.xAxisLimitSpacerWidth = this.width - 100;\n    } else {\n      this.xAxisLimitSpacerWidth = 0;\n    }\n  }\n\n  getSeriesFromTrials(trials) {\n    let series = [];\n    for (const trial of trials) {\n      if (trial.show) {\n        series = series.concat(trial.series);\n      }\n    }\n    return series;\n  }\n\n  getPlotBandsFromTrials(trials) {\n    let trialPlotBands = [];\n    for (const trial of trials) {\n      if (trial.show && trial.xAxis != null && trial.xAxis.plotBands != null) {\n        trialPlotBands = trialPlotBands.concat(trial.xAxis.plotBands);\n      }\n    }\n    return trialPlotBands;\n  }\n\n  refreshSeriesIds(series) {\n    this.clearSeriesIds(series);\n    this.setSeriesIds(series);\n  }\n\n  setAllSeriesFields(series) {\n    for (const singleSeries of series) {\n      this.setSingleSeriesFields(singleSeries);\n    }\n  }\n\n  setSingleSeriesFields(singleSeries) {\n    if (singleSeries.canEdit && this.isActiveSeries(singleSeries)) {\n      if (this.graphType === 'line' || this.graphType === 'scatter') {\n        singleSeries.draggableX = true;\n      } else if (this.graphType === 'column') {\n        singleSeries.draggableX = false;\n      }\n      singleSeries.draggableY = true;\n      singleSeries.cursor = 'move';\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n      this.showUndoButton = true;\n    } else {\n      singleSeries.draggableX = false;\n      singleSeries.draggableY = false;\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = false;\n      singleSeries.enableMouseTracking = false;\n    }\n    if (singleSeries.allowPointMouseOver === true) {\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n    }\n    if (this.isMousePlotLineOn()) {\n      singleSeries.enableMouseTracking = true;\n    }\n  }\n\n  getZoomType() {\n    return this.mode === 'grading' || this.mode === 'gradingRevision' ? 'xy' : null;\n  }\n\n  clearChartConfig() {\n    this.chartConfig = {\n      chart: {\n        options: {\n          chart: {}\n        }\n      }\n    };\n  }\n\n  createChartConfig(deferred, title, xAxis, yAxis, series, zoomType) {\n    const chartConfig = {\n      options: {\n        legend: {\n          enabled: this.isLegendEnabled\n        },\n        tooltip: {\n          formatter: this.createTooltipFormatter()\n        },\n        chart: {\n          width: this.width,\n          height: this.height,\n          type: this.graphType,\n          zoomType: zoomType,\n          plotBackgroundImage: this.backgroundImage,\n          events: {\n            load: function() {\n              deferred.resolve(this);\n            },\n            click: this.createGraphClickHandler()\n          }\n        },\n        plotOptions: {\n          series: {\n            dragSensitivity: 10,\n            stickyTracking: false,\n            events: {\n              legendItemClick: this.createLegendItemClickHandler()\n            },\n            point: {\n              events: {\n                drag: this.createPointDragEventHandler(),\n                drop: this.createPointDropEventHandler()\n              }\n            }\n          }\n        }\n      },\n      series: series,\n      title: {\n        text: title\n      },\n      xAxis: xAxis,\n      yAxis: yAxis,\n      loading: false,\n      func: this.createGraphCallbackHandler()\n    };\n    return chartConfig;\n  }\n\n  createTooltipFormatter() {\n    const thisGraphController = this;\n    return function() {\n      let text = '';\n      if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForLimitGraph(this.series, this.x);\n        const yText = thisGraphController.getYTextForLimitGraph(this.series, this.y);\n        text += thisGraphController.combineXTextAndYText(xText, yText);\n      } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForCategoriesGraph(this.point, this.x);\n        const yText = thisGraphController.getYTextForCategoriesGraph(this.y);\n        text += xText + ' ' + yText;\n      }\n      if (thisGraphController.pointHasCustomTooltip(this.point)) {\n        text += '<br/>' + this.point.tooltip;\n      }\n      return text;\n    };\n  }\n\n  getXAxisUnits(series) {\n    if (series.xAxis != null && series.xAxis.userOptions != null &&\n        series.xAxis.userOptions.units != null) {\n      return series.xAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  getYAxisUnits(series) {\n    if (series.yAxis != null && series.yAxis.userOptions != null &&\n        series.yAxis.userOptions.units != null) {\n      return series.yAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  isLimitXAxisType(xAxis) {\n    return xAxis.type === 'limits';\n  }\n\n  isCategoriesXAxisType(xAxis) {\n    return xAxis.type === 'categories';\n  }\n\n  getSeriesText(series) {\n    let text = '';\n    if (series.name !== '') {\n      text = '<b>' + series.name + '</b><br/>';\n    }\n    return text;\n  }\n\n  getXTextForLimitGraph(series, x) {\n    let text = this.performRounding(x);\n    let xAxisUnits = this.getXAxisUnits(series);\n    if (xAxisUnits != null && xAxisUnits !== '') {\n      text += ' ' + xAxisUnits;\n    }\n    return text;\n  }\n\n  getYTextForLimitGraph(series, y) {\n    let text = this.performRounding(y);\n    let yAxisUnits = this.getYAxisUnits(this.series);\n    if (yAxisUnits != null && yAxisUnits !== '') {\n      text += ' ' + yAxisUnits;\n    }\n    return text;\n  }\n\n  combineXTextAndYText(xText, yText) {\n    let text = xText;\n    if (xText !== '') {\n      text += ', ';\n    }\n    text += yText;\n    return text;\n  }\n\n  getXTextForCategoriesGraph(point, x) {\n    const category = this.getCategoryByIndex(point.index);\n    if (category != null) {\n      return category;\n    } else {\n      return this.performRounding(x);\n    }\n  }\n\n  getYTextForCategoriesGraph(y) {\n    return this.performRounding(y);\n  }\n\n  pointHasCustomTooltip(point) {\n    return point.tooltip != null && point.tooltip !== '';\n  }\n\n  createGraphClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (thisGraphController.graphType === 'line' || thisGraphController.graphType === 'scatter') {\n        if (thisGraphController.isIgnoreClickEvent()) {\n          return;\n        } else {\n          thisGraphController.handleGraphClickEvent(event, this.series);\n        }\n      }\n    };\n  }\n\n  /*\n   * Check if the last drop event was within the last 100 milliseconds so we will not register the\n   * click. We need to do this because when students drag points, a click event is fired when they\n   * release the mouse button. we don't want that click event to create a new point so we need to\n   * ignore it.\n   */\n  isIgnoreClickEvent() {\n    const currentTime = new Date().getTime();\n    return this.lastDropTime != null && ((currentTime - this.lastDropTime) < 100);\n  }\n\n  handleGraphClickEvent(event, series) {\n    if (!this.isDisabled) {\n      const activeSeries = this.activeSeries;\n      if (activeSeries != null && this.canEdit(activeSeries)) {\n        const activeSeriesId = activeSeries.id;\n        for (const singleSeries of series) {\n          if (activeSeriesId === singleSeries.options.id && !singleSeries.visible) {\n            // the series is not visible so we will not add the point\n            alert(this.$translate('graph.studentAddingPointToHiddenSeriesMessage'));\n            return;\n          }\n        }\n        const x = this.performRounding(event.xAxis[0].value);\n        const y = this.performRounding(event.yAxis[0].value);\n        this.addPointToSeries(activeSeries, x, y);\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      } else {\n        if (!this.isMousePlotLineOn()) {\n          // the student is trying to add a point to a series that can't be edited\n          alert(this.$translate('graph.youCanNotEditThisSeriesPleaseChooseASeriesThatCanBeEdited'));\n        }\n      }\n    }\n  }\n\n  createLegendItemClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      const canHideSeries =\n        thisGraphController.componentContent.canStudentHideSeriesOnLegendClick === true;\n      if (canHideSeries) {\n        /*\n         * Update the show field in all the series depending on whether each line is active\n         * in the legend.\n         */\n        for (const yAxisSeries of this.yAxis.series) {\n          let series = thisGraphController.getSeriesById(yAxisSeries.userOptions.id);\n          if (this.userOptions.id === series.id) {\n            series.show = !yAxisSeries.visible;\n          } else {\n            series.show = yAxisSeries.visible;\n          }\n        }\n        thisGraphController.studentDataChanged();\n      }\n      return canHideSeries;\n    };\n  }\n\n  createPointDragEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (!thisGraphController.isDisabled) {\n        const activeSeries = thisGraphController.activeSeries;\n        if (thisGraphController.canEdit(activeSeries)) {\n          thisGraphController.dragging = true;\n        }\n      }\n    };\n  }\n\n  createPointDropEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      // the student has stopped dragging the point and dropped the point\n      if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n        const activeSeries = thisGraphController.activeSeries;\n        thisGraphController.dragging = false;\n        thisGraphController.lastDropTime = new Date().getTime();\n        const target = event.target;\n        const x = thisGraphController.performRounding(target.x);\n        const y = thisGraphController.performRounding(target.y);\n        const index = target.index;\n        const data = activeSeries.data;\n        if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n          data[index] = [x, y];\n        } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n          data[index] = y;\n        }\n        thisGraphController.addNextComponentStateToUndoStack = true;\n        thisGraphController.studentDataChanged();\n      }\n    };\n  }\n\n  createGraphCallbackHandler() {\n    const thisGraphController = this;\n    return function(chart) {\n      thisGraphController.$timeout(function () {\n        thisGraphController.showXPlotLineIfOn('Drag Me');\n        thisGraphController.showYPlotLineIfOn('Drag Me');\n        if (thisGraphController.isMouseXPlotLineOn() ||\n          thisGraphController.isMouseYPlotLineOn() ||\n          thisGraphController.isSaveMouseOverPoints()) {\n          thisGraphController.setupMouseMoveListener();\n        }\n        chart.reflow();\n      }, 1000);\n    };\n  }\n\n  /**\n   * Overwrite the existing legend with the custom authored legend.\n   */\n  setCustomLegend() {\n    if (!this.hasCustomLegendBeenSet) {\n      if ($('.highcharts-legend').length > 0) {\n        // move the legend to the very left by setting the x position to 0\n        const userAgent = navigator.userAgent;\n        if (userAgent.indexOf('Firefox') !== -1) {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the translate.\n           * Example\n           * \"translate(227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"translate(\"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the translate is captured in group 2.\n           */\n          const matrixRegEx = /(translate\\()(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').attr('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').attr('transform', newTransform);\n        } else {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the matrix.\n           * Example\n           * \"matrix(1, 0, 0, 1, 227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"matrix(1, 0, 0, 1, \"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the matrix is captured in group 2.\n           */\n          const matrixRegEx = /(matrix\\(\\d*,\\s*\\d*,\\s*\\d*,\\s*\\d*,\\s*)(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').css('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').css('transform', newTransform);\n        }\n        $('.highcharts-legend').html(this.componentContent.customLegend);\n      }\n      this.hasCustomLegendBeenSet = true;\n    }\n  }\n\n  addPointToSeries(series, x, y) {\n    const data = series.data;\n    if (this.isCategoriesXAxisType(this.componentContent.xAxis)) {\n      data[x] = y;\n    } else {\n      data.push([x, y]);\n    }\n  }\n\n  /**\n   * Remove a point from a series. We will remove all points that have the given x value.\n   * @param series the series to remove the point from\n   * @param x the x value of the point to remove\n   */\n  removePointFromSeries(series, x) {\n    const data = series.data;\n    for (const dataPoint of data) {\n      const tempDataXValue = dataPoint[0];\n      if (x === tempDataXValue) {\n        data.splice(d, 1);\n        d--;\n      }\n    }\n  }\n\n  canEdit(series) {\n    return series.canEdit;\n  }\n\n  setSeries(series) {\n    this.series = series;\n  }\n\n  getSeries() {\n    return this.series;\n  }\n\n  setSeriesByIndex(series, index) {\n    this.series[index] = series;\n  }\n\n  getSeriesByIndex(index) {\n    return this.series[index];\n  }\n\n  setTrials(trials) {\n    this.trials = trials;\n  }\n\n  getTrials() {\n    return this.trials;\n  }\n\n  /**\n   * Get the index of the trial\n   * @param trial the trial object\n   * @return the index of the trial within the trials array\n   */\n  getTrialIndex(trial) {\n    for (let t = 0; t < this.trials.length; t++) {\n      const tempTrial = this.trials[t];\n      if (trial === tempTrial) {\n        return t;\n      }\n    }\n    return -1;\n  }\n\n  setActiveTrialByIndex(index) {\n    this.activeTrial = this.trials[index];\n  }\n\n  canEditTrial(trial) {\n    let series = trial.series;\n    for (const singleSeries of series) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set whether to show the active trial select menu\n   * @return whether to show the active trial select menu\n   */\n  showSelectActiveTrials() {\n    let editableTrials = 0;\n    for (const trial of this.trials) {\n      if (this.canEditTrial(trial) && trial.show) {\n        editableTrials++;\n        if (editableTrials > 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  setXAxis(xAxis) {\n    this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n  }\n\n  getXAxis() {\n    return this.xAxis;\n  }\n\n  setYAxis(yAxis) {\n    this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n  }\n\n  getYAxis() {\n    return this.yAxis;\n  }\n\n  setActiveSeries(series) {\n    this.activeSeries = series;\n  }\n\n  setActiveSeriesByIndex(index) {\n    const series = this.getSeriesByIndex(index);\n    this.setActiveSeries(series);\n  }\n\n  resetGraph() {\n    this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n    if (this.componentContent.xAxis != null) {\n      this.setXAxis(this.componentContent.xAxis);\n    }\n    if (this.componentContent.yAxis != null) {\n      this.setYAxis(this.componentContent.yAxis);\n    }\n    // set the active series to null so that the default series will become selected later\n    this.setActiveSeries(null);\n    this.backgroundImage = this.componentContent.backgroundImage;\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  resetSeries() {\n    let confirmMessage = '';\n    const seriesName = this.activeSeries.name;\n    if ( seriesName === '') {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheSeries');\n    } else {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheNamedSeries', { seriesName: seriesName });\n    }\n    if (confirm(confirmMessage)) {\n      this.resetSeriesHelper();\n    }\n  }\n\n  resetSeriesHelper() {\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.newTrial();\n      const isReset = true;\n      this.handleConnectedComponents(isReset);\n    } else {\n      const activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n      let originalSeries = this.componentContent.series[activeSeriesIndex];\n      if (originalSeries != null) {\n        originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n        this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n        if (this.componentContent.xAxis != null) {\n          this.setXAxis(this.componentContent.xAxis);\n        }\n        if (this.componentContent.yAxis != null) {\n          this.setYAxis(this.componentContent.yAxis);\n        }\n        this.backgroundImage = this.componentContent.backgroundImage;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      this.studentDataVersion = 1;\n      this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n    } else {\n      this.studentDataVersion = studentData.version;\n      if (studentData.trials != null && studentData.trials.length > 0) {\n        const trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n        this.setTrials(trialsCopy);\n        const activeTrialIndex = studentData.activeTrialIndex;\n        if (activeTrialIndex == null) {\n          if (trialsCopy.length > 0) {\n            this.setActiveTrialByIndex(studentData.trials.length - 1);\n          }\n        } else {\n          this.setActiveTrialByIndex(activeTrialIndex);\n        }\n        if (this.activeTrial != null && this.activeTrial.series != null) {\n          this.series = this.activeTrial.series;\n        }\n      }\n    }\n    this.setTrialIdsToShow();\n    if (studentData.xAxis != null) {\n      this.setXAxis(studentData.xAxis);\n    }\n    if (studentData.yAxis != null) {\n      this.setYAxis(studentData.yAxis);\n    }\n    this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n    if (studentData.backgroundImage != null) {\n      this.backgroundImage = studentData.backgroundImage;\n    }\n    const submitCounter = studentData.submitCounter;\n    if (submitCounter != null) {\n      this.submitCounter = submitCounter;\n    }\n    if (studentData.mouseOverPoints != null &&\n      studentData.mouseOverPoints.length > 0) {\n      this.mouseOverPoints = studentData.mouseOverPoints;\n    }\n    this.processLatestStudentWork();\n  }\n\n  activeSeriesChanged() {\n    const useTimeoutSetupGraph = true;\n    this.studentDataChanged(useTimeoutSetupGraph);\n  }\n\n  studentDataChanged(useTimeoutSetupGraph) {\n    this.isDirty = true;\n    this.emitComponentDirty(true);\n    this.isSubmitDirty = true;\n    this.emitComponentSubmitDirty(true);\n    this.clearSaveText();\n    this.drawGraph(useTimeoutSetupGraph);\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    const action = 'change';\n    this.createComponentState(action).then((componentState) => {\n      if (this.addNextComponentStateToUndoStack) {\n        if (this.previousComponentState != null) {\n          this.undoStack.push(this.previousComponentState);\n        }\n        /*\n         * Remember this current component state for the next time\n         * studentDataChanged() is called. The next time\n         * studentDataChanged() is called, this will be the previous\n         * component state and we will add it to the undoStack. We do not\n         * want to put the current component state onto the undoStack\n         * because if the student clicks undo and this current component\n         * state is on the top of the stack, the graph won't change.\n         * Basically the undoStack contains the component states from the\n         * current visit except for the current component state.\n         */\n        this.previousComponentState = componentState;\n        this.addNextComponentStateToUndoStack = false;\n      }\n      /*\n       * fire the componentStudentDataChanged event after a short timeout\n       * so that the other component handleConnectedComponentStudentDataChanged()\n       * listeners can initialize before this and are then able to process\n       * this componentStudentDataChanged event\n       */\n      this.$timeout(() => {\n        this.emitComponentStudentDataChanged(componentState);\n      }, 100);\n    });\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {};\n    studentData.version = this.studentDataVersion;\n    if (this.isStudentDataVersion1()) {\n      studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n    } else {\n      if (this.trials != null) {\n        studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n        const activeTrialIndex = this.getTrialIndex(this.activeTrial);\n        studentData.activeTrialIndex = activeTrialIndex;\n      }\n    }\n    studentData.xAxis = this.UtilService.makeCopyOfJSONObject(this.getXAxis());\n    delete studentData.xAxis.plotBands;\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n      studentData.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n    }\n    studentData.yAxis = this.getYAxis();\n    const activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n    if (activeSeriesIndex != null) {\n      studentData.activeSeriesIndex = activeSeriesIndex;\n    }\n    const uploadedFileName = this.getUploadedFileName();\n    if (uploadedFileName != null) {\n      studentData.uploadedFileName = uploadedFileName;\n    }\n    if (this.backgroundImage != null) {\n      studentData.backgroundImage = this.backgroundImage;\n    }\n    studentData.submitCounter = this.submitCounter;\n    if (this.mouseOverPoints.length !== 0) {\n      studentData.mouseOverPoints = this.mouseOverPoints;\n    }\n    componentState.isSubmit = this.isSubmit;\n    componentState.studentData = studentData;\n    componentState.componentType = 'Graph';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    this.isSubmit = false;\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the component state\n   * Note: this function must call deferred.resolve() otherwise student work will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      const additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (const additionalProcessingFunction of additionalProcessingFunctions) {\n        const defer = this.$q.defer();\n        const promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      deferred.resolve(componentState);\n    }\n  }\n\n  showPrompt() {\n    return this.isPromptVisible === true;\n  }\n\n  showResetGraphButton() {\n    return this.isResetGraphButtonVisible === true;\n  }\n\n  showResetSeriesButton() {\n    return this.isResetSeriesButtonVisible === true;\n  }\n\n  getSeriesIndex(series) {\n    const multipleSeries = this.getSeries();\n    for (let s = 0; s < multipleSeries.length; s++) {\n      const singleSeries = multipleSeries[s];\n      if (series === singleSeries) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  getSeriesByIndex(index) {\n    const series = this.getSeries();\n    return series[index];\n  }\n\n  getSeriesById(id) {\n    for (let singleSeries of this.getSeries()) {\n      if (singleSeries.id === id) {\n        return singleSeries;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the trials from classmates\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Whether to get the work only from the\n   * period the student is in or from all the periods. The possible values\n   * are \"period\" or \"class\".\n   * @return a promise that will return all the trials from the classmates\n   */\n  getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource) {\n    const deferred = this.$q.defer();\n    this.StudentDataService.getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource).then((componentStates) => {\n      const promises = [];\n      for (const componentState of componentStates) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n      }\n      this.$q.all(promises).then((promiseResults) => {\n        const mergedTrials = [];\n        for (const trials of promiseResults) {\n          for (const trial of trials) {\n            mergedTrials.push(trial);\n          }\n        }\n        deferred.resolve(mergedTrials);\n      });\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Get the trials from a component state.\n   * Note: The code in this function doesn't actually require usage of a\n   * promise. It's just the code that calls this function that utilizes\n   * promise functionality. It's possible to refactor the code so that this\n   * function doesn't need to return a promise.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param componentState the component state\n   * @return a promise that will return the trials from the component state\n   */\n  getTrialsFromComponentState(nodeId, componentId, componentState) {\n    const deferred = this.$q.defer();\n    const mergedTrials = [];\n    const nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      const series = studentData.series;\n      const newTrial = {\n        id: this.UtilService.generateKey(10),\n        name: nodePositionAndTitle,\n        show: true,\n        series: series\n      };\n      mergedTrials.push(newTrial);\n    } else {\n      const trials = studentData.trials;\n      if (trials != null) {\n        for (const trial of trials) {\n          const newTrial = this.UtilService.makeCopyOfJSONObject(trial);\n          newTrial.name = nodePositionAndTitle;\n          newTrial.show = true;\n          mergedTrials.push(newTrial);\n        }\n      }\n    }\n    deferred.resolve(mergedTrials);\n    return deferred.promise;\n  }\n\n  /**\n   * Handle importing external data (we only support csv for now)\n   * @param studentAsset CSV file student asset\n   */\n  attachStudentAsset(studentAsset) {\n    this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n      this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n        const rowData = this.StudentDataService.CSVToArray(assetContent);\n        const params = {\n          skipFirstRow: true,\n          xColumn: 0,\n          yColumn: 1\n        };\n        const seriesData = this.convertRowDataToSeriesData(rowData, params);\n        const newSeriesIndex = this.series.length;\n        const series = {\n          name: copiedAsset.fileName,\n          color: this.seriesColors[newSeriesIndex],\n          marker: {\n            'symbol': this.seriesMarkers[newSeriesIndex]\n          },\n          regression: false,\n          regressionSettings: {},\n          canEdit: false\n        };\n        this.series[newSeriesIndex] = series;\n        series.data = seriesData;\n        this.isDirty = true;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      });\n    });\n  }\n\n  /**\n   * Convert the table data into series data\n   * @param componentState the component state to get table data from\n   * @param params (optional) the params to specify what columns\n   * and rows to use from the table data\n   */\n  convertRowDataToSeriesData(rows, params) {\n    const data = [];\n    let skipFirstRow = this.getSkipFirstRowValue(params);\n    let xColumn = this.getXColumnValue(params);\n    let yColumn = this.getYColumnValue(params);\n    for (let r = 0; r < rows.length; r++) {\n      if (skipFirstRow && r === 0) {\n        continue;\n      }\n      const row = rows[r];\n      const xCell = row[xColumn];\n      const yCell = row[yColumn];\n      if (xCell != null && yCell != null) {\n        this.addPointFromTableIntoData(xCell, yCell, data);\n      }\n    }\n    return data;\n  }\n\n  getSkipFirstRowValue(params) {\n    if (params == null) {\n      return false;\n    } else {\n      return params.skipFirstRow;\n    }\n  }\n\n  getXColumnValue(params) {\n    if (params == null) {\n      return 0;\n    } else {\n      return params.xColumn;\n    }\n  }\n\n  getYColumnValue(params) {\n    if (params == null) {\n      return 1;\n    } else {\n      return params.yColumn;\n    }\n  }\n\n  addPointFromTableIntoData(xCell, yCell, data) {\n    let xText = xCell.text;\n    let yText = yCell.text;\n    if (xText != null && xText !== '' && yText != null && yText !== '') {\n      const xNumber = Number(xText);\n      const yNumber = Number(yText);\n      const point = [];\n      if (!isNaN(xNumber)) {\n        point.push(xNumber);\n      } else {\n        point.push(xText);\n      }\n      if (!isNaN(yNumber)) {\n        point.push(yNumber);\n      } else {\n        point.push(yText);\n      }\n      data.push(point);\n    }\n  }\n\n  setSeriesIds(allSeries) {\n    const usedSeriesIds = this.getAllUsedSeriesIds(allSeries);\n    for (const singleSeries of allSeries) {\n      if (singleSeries.id == null) {\n        const nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n        singleSeries.id = nextSeriesId;\n        usedSeriesIds.push(nextSeriesId);\n      }\n    }\n  }\n\n  getAllUsedSeriesIds(allSeries) {\n    const usedSeriesIds = [];\n    for (const singleSeries of allSeries) {\n      usedSeriesIds.push(singleSeries.id);\n    }\n    return usedSeriesIds;\n  }\n\n  /**\n   * Get the next available series id\n   * @param usedSeriesIds an array of used series ids\n   * @returns the next available series id\n   */\n  getNextSeriesId(usedSeriesIds) {\n    let nextSeriesId = null;\n    let currentSeriesNumber = 0;\n    let foundNextSeriesId = false;\n    while (!foundNextSeriesId) {\n      const tempSeriesId = 'series-' + currentSeriesNumber;\n      if (usedSeriesIds.indexOf(tempSeriesId) === -1) {\n        nextSeriesId = tempSeriesId;\n        foundNextSeriesId = true;\n      } else {\n        currentSeriesNumber++;\n      }\n    }\n    return nextSeriesId;\n  }\n\n  handleDeleteKeyPressed() {\n    const series = this.activeSeries;\n    if (this.canEdit(series)) {\n      const chart = $('#' + this.chartId).highcharts();\n      const selectedPoints = chart.getSelectedPoints();\n      let index = null;\n      if (selectedPoints != null) {\n        const indexesToDelete = [];\n        const data = series.data;\n        for (const selectedPoint of selectedPoints) {\n          index = selectedPoint.index;\n          const dataPoint = data[index];\n          if (dataPoint != null) {\n            /*\n             * make sure the x and y values match the selected point\n             * that we are going to delete\n             */\n            if (dataPoint[0] === selectedPoint.x || dataPoint[1] === selectedPoint.y) {\n              indexesToDelete.push(index);\n            }\n          }\n        }\n        /*\n         * order the array from largest to smallest. we are doing this\n         * so that we delete the points from the end first. if we delete\n         * points starting from lower indexes first, then the indexes\n         * will shift and we will end up deleting the wrong points.\n         */\n        indexesToDelete.sort().reverse();\n        // loop through all the indexes and remove them from the series data\n        for (let i = 0; i < indexesToDelete.length; i++) {\n          data.splice(indexesToDelete[i], 1);\n        }\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createNewSeries() {\n    return {\n      name: '',\n      data: [],\n      marker: {\n        symbol: 'circle'\n      },\n      canEdit: true\n    };\n  }\n\n  isActiveSeries(series) {\n    const seriesIndex = this.getSeriesIndex(series);\n    return this.isActiveSeriesIndex(seriesIndex);\n  }\n\n  isActiveSeriesIndex(seriesIndex) {\n    if (this.series != null && this.series.indexOf(this.activeSeries) === seriesIndex) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Whether to show the select series input\n   * @returns whether to show the select series input\n   */\n  showSelectSeries() {\n    if (this.trialIdsToShow.length && this.hasEditableSeries() &&\n        this.isSelectSeriesVisible && this.series.length > 1) {\n      return true;\n    }\n    return false;\n  }\n\n  newTrialButtonClicked() {\n    this.newTrial();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  newTrial() {\n    const activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n    const trialNumbers = this.getTrialNumbers();\n    let maxTrialNumber = 0;\n    if (trialNumbers.length > 0) {\n      maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n    }\n    if (this.hideAllTrialsOnNewTrial) {\n      for (let trial of this.trials) {\n        trial.show = false;\n      }\n    }\n    const series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n    const trial = {\n      name: this.$translate('graph.trial') + ' ' + (maxTrialNumber + 1),\n      series: series,\n      show: true,\n      id: this.UtilService.generateKey(10)\n    };\n    this.trials.push(trial);\n    this.activeTrial = trial;\n    this.series = series;\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    } else {\n      this.setActiveSeriesByIndex(activeSeriesIndex);\n    }\n    this.setTrialIdsToShow();\n  }\n\n  getTrialNumbers() {\n    const trialNumbers = [];\n    const trialNumberRegex = /Trial (\\d*)/;\n    for (const trial of this.trials) {\n      const tempTrialName = trial.name;\n      const match = trialNumberRegex.exec(tempTrialName);\n      if (match != null && match.length > 0) {\n        const tempTrialNumber = match[1];\n        trialNumbers.push(parseInt(tempTrialNumber));\n      }\n    }\n    trialNumbers.sort();\n    return trialNumbers;\n  }\n\n  deleteTrial(trialIndex) {\n    const trialToRemove = this.trials[trialIndex];\n    const trialToRemoveId = trialToRemove.id;\n    this.trials.splice(trialIndex, 1);\n    for (let t = 0; t < this.trialIdsToShow.length; t++) {\n      if (trialToRemoveId === this.trialIdsToShow[t]) {\n        this.trialIdsToShow.splice(t, 1);\n      }\n    }\n    if (this.trials.length === 0) {\n      // there are no more trials so we will create a new empty trial\n      this.newTrial();\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n    } else if (this.trials.length > 0) {\n      if (trialToRemove === this.activeTrial) {\n        this.makeHighestTrialActive();\n      }\n    }\n    this.setTrialIdsToShow();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  makeHighestTrialActive() {\n    this.activeTrial = null;\n    this.activeSeries = null;\n    this.series = null;\n    const highestTrial = this.getHighestTrial();\n    if (highestTrial != null) {\n      const seriesIndex = this.getSeriesIndex(this.activeSeries);\n      this.activeTrial = highestTrial;\n      this.setSeries(this.activeTrial.series);\n      if (seriesIndex != null) {\n        this.setActiveSeriesByIndex(seriesIndex);\n      }\n    }\n  }\n\n  getHighestTrial() {\n    let highestTrialIndex = null;\n    let highestTrial = null;\n    for (const trialId of this.trialIdsToShow) {\n      const trial = this.getTrialById(trialId);\n      const trialIndex = this.getTrialIndex(trial);\n      if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n        highestTrialIndex = trialIndex;\n        highestTrial = trial;\n      }\n    }\n    return highestTrial;\n  }\n\n  activeTrialChanged() {\n    const seriesIndex = this.getSeriesIndex(this.activeSeries);\n    const activeTrial = this.activeTrial;\n    this.series = activeTrial.series;\n    this.setActiveSeriesByIndex(seriesIndex);\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  trialIdsToShowChanged() {\n    let trialIdsToShow = this.trialIdsToShow;\n    for (const trial of this.trials) {\n      const id = trial.id;\n      if (trialIdsToShow.indexOf(id) !== -1) {\n        trial.show = true;\n      } else {\n        trial.show = false;\n        if (this.activeTrial.id === id) {\n          this.activeTrial = null;\n          this.activeSeries = null;\n          this.series = null;\n        }\n      }\n    }\n    if (this.trialIdsToShow.length > 0) {\n      const lastShownTrialId = this.trialIdsToShow[this.trialIdsToShow.length - 1];\n      const lastShownTrial = this.getTrialById(lastShownTrialId);\n      if (lastShownTrial != null) {\n        const seriesIndex = this.getSeriesIndex(this.activeSeries);\n        this.activeTrial = lastShownTrial;\n        this.setSeries(this.activeTrial.series);\n        if (seriesIndex != null) {\n          this.setActiveSeriesByIndex(seriesIndex);\n        }\n      }\n    }\n    // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n    // TODO: figure out why this check is sometimes necessary and remove\n    for (let a = 0; a < trialIdsToShow.length; a++) {\n      let idToShow = trialIdsToShow[a];\n      if (!this.getTrialById(idToShow)) {\n        trialIdsToShow.splice(a, 1);\n      }\n    }\n    /*\n     * Make sure the trialIdsToShow has actually changed. Sometimes\n     * trialIdsToShowChanged() gets called even if trialIdsToShow\n     * does not change because the model for the trial checkbox\n     * select is graphController.trials. This means trialIdsToShowChanged()\n     * will be called when we replace the trials increateComponentState()\n     * but this does not necessarily mean the trialIdsToShow has changed.\n     * We do this check to minimize the number of times studentDataChanged()\n     * is called.\n     */\n    if (!this.UtilService.arraysContainSameValues(this.previousTrialIdsToShow, trialIdsToShow)) {\n      this.trialIdsToShow = trialIdsToShow;\n      this.studentDataChanged();\n    }\n    /*\n     * Remember the trial ids to show so we can use it to make sure the\n     * trialIdsToShow actually change the next time trialIdsToShowChanged()\n     * is called.\n     */\n    this.previousTrialIdsToShow = this.UtilService.makeCopyOfJSONObject(this.trialIdsToShow);\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  setTrialIdsToShow() {\n    const idsToShow = [];\n    for (const trial of this.trials) {\n      if (trial.show) {\n        idsToShow.push(trial.id);\n      }\n    }\n    this.trialIdsToShow = idsToShow;\n  }\n\n  getSelectedTrialsText() {\n    if (this.trialIdsToShow.length === 1) {\n      const id = this.trialIdsToShow[0];\n      return this.getTrialById(id).name;\n    } else if (this.trialIdsToShow.length > 1) {\n      return this.trialIdsToShow.length + ' ' + this.$translate('graph.trialsShown');\n    } else {\n      return this.$translate('graph.selectTrialsToShow');\n    }\n  }\n\n  /**\n   * Process the student data that we have received from a connected component.\n   * @param studentData The student data from a connected component.\n   * @param params The connected component params.\n   */\n  processConnectedComponentStudentData(studentData, params) {\n    if (params.fields == null) {\n      /*\n       * we do not need to look at specific fields so we will directly\n       * parse the the trial data from the student data.\n       */\n      this.parseLatestTrial(studentData, params);\n    } else {\n      // we need to process specific fields in the student data\n      for (let field of params.fields) {\n        const name = field.name;\n        const when = field.when;\n        const action = field.action;\n        const firstTime = false;\n        if (when === 'firstTime' && firstTime === true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            this.readConnectedComponentFieldFromStudentData(studentData, params, name);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the field from the new student data and perform any processing on our\n   * existing student data based upon the new student data.\n   * @param studentData The new student data from the connected component.\n   * @param params The connected component params.\n   * @param name The field name to read and process.\n   */\n  readConnectedComponentFieldFromStudentData(studentData, params, name) {\n    if (name === 'selectedCells') {\n      // only show the trials that are specified in the selectedCells array\n      let selectedCells = studentData[name];\n      if (selectedCells != null) {\n        let selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (let trial of this.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (name === 'trial') {\n      this.parseLatestTrial(studentData, params);\n    } else if (name === 'trialIdsToDelete') {\n      this.deleteTrialsByTrialId(studentData.trialIdsToDelete);\n    }\n  }\n\n  /**\n   * Delete the trials\n   * @param trialIdsToDelete An array of trial ids to delete\n   */\n  deleteTrialsByTrialId(trialIdsToDelete) {\n    if (trialIdsToDelete != null) {\n      for (let trialIdToDelete of trialIdsToDelete) {\n        this.deleteTrialId(trialIdToDelete);\n      }\n    }\n  }\n\n  /**\n   * Delete a trial\n   * @param trialId The trial id string to delete\n   */\n  deleteTrialId(trialId) {\n    for (let t = 0; t < this.trials.length; t++) {\n      let trial = this.trials[t];\n      if (trial.id === trialId) {\n        this.trials.splice(t, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Parse the latest trial and set it into the component\n   * @param studentData the student data object that has a trials field\n   * @param params (optional) parameters that specify what to use from the\n   * student data\n   */\n  parseLatestTrial(studentData, params) {\n    const latestStudentDataTrial = this.getLatestStudentDataTrial(studentData);\n    const latestStudentDataTrialId = latestStudentDataTrial.id;\n    this.removeDefaultTrialIfNecessary(latestStudentDataTrialId);\n    const latestTrial = this.createNewTrialIfNecessary(latestStudentDataTrialId);\n    this.copySeriesintoTrial(latestStudentDataTrial, latestTrial, studentData, params);\n    this.copyTrialNameIntoTrial(latestStudentDataTrial, latestTrial);\n    this.copyPlotBandsIntoTrial(latestStudentDataTrial, latestTrial);\n    this.setLastTrialToActive();\n    if (studentData.xPlotLine != null) {\n      this.showXPlotLine(studentData.xPlotLine);\n    }\n    this.setTrialIdsToShow();\n    this.activeTrialChanged();\n  }\n\n  getLatestStudentDataTrial(studentData) {\n    let latestStudentDataTrial = null;\n    if (studentData.trial != null) {\n      latestStudentDataTrial = studentData.trial;\n    }\n    if (studentData.trials != null && studentData.trials.length > 0) {\n      latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n    }\n    return latestStudentDataTrial;\n  }\n\n  hideAllTrials() {\n    for (const trial of this.trials) {\n      trial.show = false;\n    }\n  }\n\n  createNewTrial(id) {\n    return {\n      id: id,\n      name: '',\n      series: [],\n      show: true\n    };\n  }\n\n  copySeries(series) {\n    const newSeries = {\n      name: series.name,\n      data: series.data,\n      color: series.color,\n      canEdit: false,\n      alloWPointSelect: false\n    };\n    if (series.marker != null) {\n      newSeries.marker = series.marker;\n    }\n    if (series.dashStyle != null) {\n      newSeries.dashStyle = series.dashStyle;\n    }\n    if (series.allowPointMouseOver != null) {\n      newSeries.allowPointMouseOver = series.allowPointMouseOver;\n    }\n    return newSeries;\n  }\n\n  removeDefaultTrialIfNecessary(latestStudentDataTrialId) {\n    /*\n     * remove the first default trial that is automatically created\n     * when the student first visits the component otherwise there\n     * will be a blank trial.\n     */\n    if (this.trials.length > 0) {\n      const firstTrial = this.trials[0];\n      /*\n       * check if the trial has any series. if the trial doesn't\n       * have any series it means it was automatically created by\n       * the component.\n       */\n      if (this.isTrialHasEmptySeries(firstTrial)) {\n        if (firstTrial.id == null || firstTrial.id !== latestStudentDataTrialId) {\n          this.deleteFirstTrial(this.trials);\n        }\n      }\n    }\n  }\n\n  isTrialHasEmptySeries(trial) {\n    return trial.series == null || trial.series.length === 0 || this.isSeriesEmpty(trial.series);\n  }\n\n  isSeriesEmpty(series) {\n    return series.length === 1 && series[0].data.length === 0;\n  }\n\n  deleteFirstTrial(trials) {\n    trials.shift();\n  }\n\n  createNewTrialIfNecessary(trialId) {\n    let trial = this.getTrialById(trialId);\n    if (trial == null) {\n      if (this.hideAllTrialsOnNewTrial) {\n        this.hideAllTrials();\n      }\n      trial = this.createNewTrial(trialId);\n      trial.show = true;\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n      this.trials.push(trial);\n    }\n    return trial;\n  }\n\n  copySeriesintoTrial(oldTrial, newTrial, studentData, params) {\n    newTrial.series = [];\n    const series = oldTrial.series;\n    for (let s = 0; s < series.length; s++) {\n      if (this.isAddSeries(params, s)) {\n        newTrial.series.push(this.copySeries(series[s]));\n        if (params.highlightLatestPoint) {\n          this.$timeout(() => {\n            this.highlightPointOnX(studentData.trial.id, studentData.xPointToHighlight);\n          }, 1);\n        }\n      }\n    }\n  }\n\n  isAddSeries(params, seriesIndex) {\n    return params == null || params.seriesNumbers == null || params.seriesNumbers.length === 0 ||\n      (params.seriesNumbers != null && params.seriesNumbers.indexOf(seriesIndex) !== -1);\n  }\n\n  copyTrialNameIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.name != null) {\n      newTrial.name = oldTrial.name;\n    }\n  }\n\n  copyPlotBandsIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.xAxis != null && oldTrial.xAxis.plotBands != null) {\n      if (newTrial.xAxis == null) {\n        newTrial.xAxis = {};\n      }\n      newTrial.xAxis.plotBands = oldTrial.xAxis.plotBands;\n    }\n  }\n\n  setLastTrialToActive() {\n    if (this.trials.length > 0) {\n      this.activeTrial = this.trials[this.trials.length - 1];\n      this.activeTrial.show = true;\n    }\n  }\n  getTrialById(id) {\n    for (const trial of this.trials) {\n      if (trial.id === id) {\n        return trial;\n      }\n    }\n    return null;\n  }\n\n  hasEditableSeries() {\n    for (const singleSeries of this.getSeries()) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Update the x and y axis min and max values if necessary to make sure\n   * all points are visible in the graph view.\n   * @param series the an array of series\n   * @param xAxis the x axis object\n   * @param yAxis the y axis object\n   */\n  updateMinMaxAxisValues(series, xAxis, yAxis) {\n    const minMaxValues = this.getMinMaxValues(series);\n    this.updateXAxisMinMaxIfNecessary(xAxis, minMaxValues);\n    this.updateYAxisMinMaxIfNecessary(yAxis, minMaxValues);\n  }\n\n  updateXAxisMinMaxIfNecessary(xAxis, minMaxValues) {\n    if (xAxis != null && !xAxis.locked) {\n      if (minMaxValues.xMin < xAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.min = null;\n        xAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.xMax >= xAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.max = null;\n        xAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  updateYAxisMinMaxIfNecessary(yAxis, minMaxValues) {\n    if (yAxis != null && !yAxis.locked) {\n      if (minMaxValues.yMin < yAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.min = null;\n        yAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.yMax >= yAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.max = null;\n        yAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  getMinMaxValues(series) {\n    let xMin = 0;\n    let xMax = 0;\n    let yMin = 0;\n    let yMax = 0;\n    for (const singleSeries of series) {\n      const data = singleSeries.data;\n      for (const dataPoint of data) {\n        if (dataPoint != null) {\n          let tempX = null;\n          let tempY = null;\n          if (dataPoint.constructor.name === 'Object') {\n            tempX = dataPoint.x;\n            tempY = dataPoint.y;\n          } else if (dataPoint.constructor.name === 'Array') {\n            tempX = dataPoint[0];\n            tempY = dataPoint[1];\n          } else if(dataPoint.constructor.name === 'Number') {\n            tempY = dataPoint;\n          }\n          if (tempX > xMax) {\n            xMax = tempX;\n          }\n          if (tempX < xMin) {\n            xMin = tempX;\n          }\n          if (tempY > yMax) {\n            yMax = tempY;\n          }\n          if (tempY < yMin) {\n            yMin = tempY;\n          }\n        }\n      }\n    }\n    const result = {\n      xMin: xMin,\n      xMax: xMax,\n      yMin: yMin,\n      yMax: yMax\n    };\n    return result;\n  }\n\n  clearSeriesIds(series) {\n    for (const singleSeries of series) {\n      singleSeries.id = null;\n    }\n  }\n\n  /**\n   * Snip the drawing by converting it to an image\n   * @param $event the click event\n   */\n  snipDrawing($event) {\n    let highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n    if (highchartsDiv != null && highchartsDiv.length > 0) {\n      highchartsDiv = highchartsDiv[0];\n      html2canvas(highchartsDiv).then((canvas) => {\n        const canvasBase64Image = canvas.toDataURL('image/png');\n        const imageObject = this.UtilService.getImageObjectFromBase64String(canvasBase64Image);\n        this.NotebookService.addNote($event, imageObject);\n      });\n    }\n  }\n\n  readCSVIntoActiveSeries(csvString) {\n    const lines = csvString.split(/\\r\\n|\\n/);\n    this.activeSeries.data = [];\n    for (const line of lines) {\n      const values = line.split(',');\n      const x = parseFloat(values[0]);\n      const y = parseFloat(values[1]);\n      if (!isNaN(x) && !isNaN(y)) {\n        const dataPoint = [x, y];\n        this.activeSeries.data.push(dataPoint);\n      }\n    }\n  }\n\n  setUploadedFileName(fileName) {\n    this.uploadedFileName = fileName;\n  }\n\n  getUploadedFileName() {\n    return this.uploadedFileName;\n  }\n\n  /**\n   * Convert all the data points in the series\n   * @param series convert the data points in the series\n   * @param xAxisType the new x axis type to convert to\n   */\n  convertSeriesDataPoints(series, xAxisType) {\n    const data = series.data;\n    const convertedData = [];\n    for (let d = 0; d < data.length; d++) {\n      const oldDataPoint = data[d];\n      if (xAxisType == null || xAxisType === '' || xAxisType === 'limits') {\n        if (!Array.isArray(oldDataPoint)) {\n          convertedData.push([(d + 1), oldDataPoint]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      } else if (xAxisType === 'categories') {\n        if (Array.isArray(oldDataPoint)) {\n          convertedData.push(oldDataPoint[1]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      }\n    }\n    series.data = convertedData;\n  }\n\n  /**\n   * Round the number according to the authoring settings\n   * @param number a number\n   * @return the rounded number\n   */\n  performRounding(number) {\n    if (this.componentContent.roundValuesTo === 'integer') {\n      number = this.roundToNearestInteger(number);\n    } else if (this.componentContent.roundValuesTo === 'tenth') {\n      number = this.roundToNearestTenth(number);\n    } else if (this.componentContent.roundValuesTo === 'hundredth') {\n      number = this.roundToNearestHundredth(number);\n    }\n    return number;\n  }\n\n  roundToNearestInteger(x) {\n    x = parseFloat(x);\n    x = Math.round(x);\n    return x;\n  }\n\n  roundToNearestTenth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 10) / 10;\n    return x;\n  }\n\n  roundToNearestHundredth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 100) / 100;\n    return x;\n  }\n\n  /**\n   * Set the active series to the first series that the student can edit\n   * or if there are no series the student can edit, set the active series\n   * to the first series.\n   */\n  setDefaultActiveSeries() {\n    for (let s = 0; s < this.series.length; s++) {\n      const singleSeries = this.series[s];\n      if (singleSeries.canEdit) {\n        this.setActiveSeriesByIndex(s);\n        break;\n      }\n    }\n    if (this.activeSeries == null && this.series.length > 0) {\n      /*\n       * we did not find any series that the student can edit so we will\n       * just set the active series to be the first series\n       */\n      this.setActiveSeriesByIndex(0);\n    }\n  }\n\n  setVerticalPlotLine(x) {\n    const plotLine = {\n      color: 'red',\n      width: 2,\n      value: x,\n      zIndex: 5\n    };\n    this.plotLines = [\n      plotLine\n    ];\n    /*\n     * Call $apply() so that the red plot line position gets updated. If we\n     * don't call this, the line position won't get updated unless the student\n     * moves their mouse around which forces angular to update.\n     */\n    this.$timeout(() => {\n      this.$scope.$apply();\n    });\n  }\n\n  /**\n   * Import any work we need from connected components\n   * @param {boolean} isReset (optional) Whether this function call was\n   * triggered by the student clicking the reset button.\n   */\n  handleConnectedComponents(isReset) {\n    /*\n     * This will hold all the promises that will return the trials that we want. The trials will\n     * either be from this student or from classmates.\n     */\n    const promises = [];\n    /*\n     * this will end up containing the background from the last\n     * connected component\n     */\n    let connectedComponentBackgroundImage = null;\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const type = connectedComponent.type;\n      if (type === 'showClassmateWork') {\n        connectedComponentBackgroundImage =\n            this.handleShowClassmateWorkConnectedComponent(connectedComponent, promises);\n      } else if (type === 'showWork' || type === 'importWork' || type == null) {\n        connectedComponentBackgroundImage =\n            this.handleShowOrImportWorkConnectedComponent(connectedComponent, promises);\n      }\n    }\n\n    /*\n     * wait for all the promises to resolve because we may need to request the classmate work from\n     * the server\n     */\n    this.$q.all(promises).then(\n        this.handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset));\n  }\n\n  handleShowClassmateWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    this.isDisabled = true;\n    if (this.ConfigService.isPreview()) {\n      const latestComponentState = this.StudentDataService.\n      getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n      if (latestComponentState != null) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (latestComponentState != null &&\n            latestComponentState.studentData != null &&\n            latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    } else {\n      const showClassmateWorkSource = connectedComponent.showClassmateWorkSource;\n      promises.push(this.getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource));\n      let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n      component = this.ProjectService.injectAssetPaths(component);\n      connectedComponentBackgroundImage = component.backgroundImage;\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleShowOrImportWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    const latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (latestComponentState != null) {\n      if (latestComponentState.componentType === 'ConceptMap' ||\n          latestComponentState.componentType === 'Draw' ||\n          latestComponentState.componentType === 'Label') {\n        let connectedComponentOfComponentState = this.UtilService.\n        getConnectedComponentByComponentState(this.componentContent, latestComponentState);\n        if (connectedComponentOfComponentState.importWorkAsBackground === true) {\n          promises.push(this.setComponentStateAsBackgroundImage(latestComponentState));\n        }\n      } else {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (connectedComponent.type === 'showWork') {\n          this.isDisabled = true;\n        }\n        if (latestComponentState != null &&\n            latestComponentState.studentData != null &&\n            latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset) {\n    return (promiseResults) => {\n      /*\n       * First we will accumulate all the trials into one new component state and then we will\n       * perform connected component processing.\n       */\n      const mergedTrials = [];\n      /*\n       * Loop through all the promise results. There will be a promise result for each component we\n       * are importing from. Each promiseResult is an array of trials or an image url.\n       */\n      for (let promiseResult of promiseResults) {\n        if (promiseResult instanceof Array) {\n          let trials = promiseResult;\n          for (const trial of trials) {\n            mergedTrials.push(trial);\n          }\n        } else if (typeof(promiseResult) === \"string\") {\n          connectedComponentBackgroundImage = promiseResult;\n        }\n      }\n      let newComponentState = this.NodeService.createNewComponentState();\n      newComponentState.studentData = {\n        trials: mergedTrials,\n        version: 2\n      };\n      if (this.componentContent.backgroundImage != null &&\n        this.componentContent.backgroundImage !== '') {\n        newComponentState.studentData.backgroundImage = this.componentContent.backgroundImage;\n      } else if (connectedComponentBackgroundImage != null) {\n        newComponentState.studentData.backgroundImage = connectedComponentBackgroundImage;\n      }\n      newComponentState = this.handleConnectedComponentsHelper(newComponentState, isReset);\n      this.setStudentWork(newComponentState);\n      this.studentDataChanged();\n    };\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   * @return A promise that returns the url of the image that is generated from the component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    return this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      return image.url;\n    });\n  }\n\n  /**\n   * Perform additional connected component processing.\n   * @param newComponentState The new component state generated by accumulating the trials from all\n   * the connected component student data.\n   */\n  handleConnectedComponentsHelper(newComponentState, isReset) {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null || isReset) {\n      mergedComponentState = newComponentState;\n    } else {\n      /*\n       * This component has previous student data so this is not the first time this component is\n       * being loaded.\n       */\n      firstTime = false;\n    }\n    const componentStates = [];\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const nodeId = connectedComponent.nodeId;\n      const componentId = connectedComponent.componentId;\n      const type = connectedComponent.type;\n      if (type === 'showWork') {\n        const componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n      } else if (type === 'showClassmateWork') {\n        mergedComponentState = newComponentState;\n      } else if (type === 'importWork' || type == null) {\n        const connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        const fields = connectedComponent.fields;\n        if (connectedComponentState != null) {\n          mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n        } else {\n          mergedComponentState = this.mergeNullComponentState(mergedComponentState, fields, firstTime);\n        }\n      }\n    }\n    if (mergedComponentState.studentData.version == null) {\n      mergedComponentState.studentData.version = this.studentDataVersion;\n    }\n    if (newComponentState.studentData.backgroundImage != null) {\n      mergedComponentState.studentData.backgroundImage = newComponentState.studentData.backgroundImage;\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the component state from the connected component into the component\n   * state from this component.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at in the connectedComponentState. Each object can contain 3 fields which\n   * are \"name\", \"when\", \"action\".\n   * - \"name\" is the name of the field in the connectedComponentState.studentData object\n   *   For example, if connectedComponentState is from a Graph component, we may author the value to be \"trials\"\n   * - \"when\" possible values\n   *     \"firstTime\" means we merge the \"name\" field only the first time we visit the component\n   *     \"always\" means we merge the \"name\" field every time we visit the component\n   * - \"action\" possible values\n   *     \"read\" means we look at the value of the \"name\" field and perform processing on it to generate\n   *       some value that we will set into the baseComponentState\n   *     \"write\" means we copy the value of the \"name\" field from connectedComponentState.studentData to\n   *       baseComponentState.studentData\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeComponentState(baseComponentState, connectedComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (connectedComponentState.componentType === 'Graph' && firstTime) {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(connectedComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime) {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * We want to merge the component state from the connected component into this\n   * component but the connected component does not have any work. We will\n   * instead use default values.\n   * @param baseComponentState The component state from this component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at. (see comment for mergeComponentState() for more information).\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeNullComponentState(baseComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      // TODO\n    } else {\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime == true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            const connectedComponentState = null;\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Read the field from the connected component's component state.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param field The field to look at in the connected component's component\n   * state.\n   */\n  readConnectedComponentField(baseComponentState, connectedComponentState, field) {\n    if (field === 'selectedCells') {\n      if (connectedComponentState == null) {\n        // we will default to hide all the trials\n        for (let trial of baseComponentState.studentData.trials) {\n          trial.show = false;\n        }\n      } else {\n        // loop through all the trials and show the ones that are in the selected cells array\n        const studentData = connectedComponentState.studentData;\n        const selectedCells = studentData[field];\n        const selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (let trial of baseComponentState.studentData.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (field === 'trial') {\n      // TODO\n    }\n  }\n\n  undoClicked() {\n    if (this.undoStack != null && this.undoStack.length > 0) {\n      const previousComponentState = this.undoStack.pop();\n      this.setStudentWork(previousComponentState);\n      this.previousComponentState = previousComponentState;\n      this.drawGraph();\n    } else if (this.initialComponentState == null) {\n      this.previousComponentState = null;\n      this.trials = [];\n      this.newTrial();\n      this.resetSeriesHelper();\n      this.drawGraph();\n    }\n  }\n\n  trialCheckboxClicked() {\n    this.addNextComponentStateToUndoStack = true;\n  }\n\n  getCategoryByIndex(index) {\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.categories != null &&\n        index < this.componentContent.xAxis.categories.length) {\n      return this.componentContent.xAxis.categories[index];\n    }\n    return null;\n  }\n\n  isMousePlotLineOn() {\n    if (this.isMouseXPlotLineOn() || this.isMouseYPlotLineOn()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isMouseXPlotLineOn() {\n    return this.componentContent.showMouseXPlotLine;\n  }\n\n  isMouseYPlotLineOn() {\n    return this.componentContent.showMouseYPlotLine;\n  }\n\n  isSaveMouseOverPoints() {\n    return this.componentContent.saveMouseOverPoints;\n  }\n\n  getXValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[0];\n    }\n    return null;\n  }\n\n  getYValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[1];\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointX() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getXValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointY() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getYValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  showXPlotLineIfOn(text = null) {\n    if (this.isMouseXPlotLineOn()) {\n      let x = this.getLatestMouseOverPointX();\n      if (x == null) {\n        x = 0;\n      }\n      this.showXPlotLine(x, text);\n    }\n  }\n\n  showYPlotLineIfOn(text = null) {\n    if (this.isMouseYPlotLineOn()) {\n      let y = this.getLatestMouseOverPointY();\n      if (y == null) {\n        y = 0;\n      }\n      this.showYPlotLine(y, text);\n    }\n  }\n\n  showTooltipOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (const singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n        }\n      }\n      const points = series.points;\n      for (const point of points) {\n        if (point.x === x) {\n          chart.tooltip.refresh(point);\n        }\n      }\n    }\n  }\n\n  highlightPointOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (let singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n          this.removeHoverStateFromPoints(singleSeries.points);\n        }\n      }\n      this.setHoverStateOnPoint(series.points, x);\n    }\n  }\n\n  removeHoverStateFromPoints(points) {\n    for (const point of points) {\n      point.setState('');\n    }\n  }\n\n  setHoverStateOnPoint(points, x) {\n    for (const point of points) {\n      if (point.x === x) {\n        point.setState('hover');\n      }\n    }\n  }\n\n  showTooltipOnLatestPoint() {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      const latestSeries = chart.series[chart.series.length - 1];\n      const points = latestSeries.points;\n      if (points.length > 0) {\n        const latestPoint = points[points.length - 1];\n        chart.tooltip.refresh(latestPoint);\n      }\n    }\n  }\n\n  convertSelectedCellsToTrialIds(selectedCells) {\n    const selectedTrialIds = [];\n    for (const selectedCell of selectedCells) {\n      const material = selectedCell.material;\n      const bevTemp = selectedCell.bevTemp;\n      const airTemp = selectedCell.airTemp;\n      const selectedTrialId = material + '-' + bevTemp + 'Liquid';\n      selectedTrialIds.push(selectedTrialId);\n    }\n    return selectedTrialIds;\n  }\n\n  isTrialsEnabled() {\n    return this.componentContent.enableTrials === true;\n  }\n\n  isStudentDataVersion1(version) {\n    if (version == null) {\n      return this.studentDataVersion == null || this.studentDataVersion === 1;\n    } else {\n      return version == null || version === 1;\n    }\n  }\n}\n\nGraphController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphController;\n"]}