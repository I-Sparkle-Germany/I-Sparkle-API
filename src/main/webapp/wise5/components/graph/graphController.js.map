{"version":3,"sources":["graphController.es6"],"names":["GraphController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","graphType","series","seriesColors","seriesMarkers","activeSeries","latestAnnotations","isResetGraphButtonVisible","isSelectSeriesVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","showUndoButton","legendEnabled","hasCustomLegendBeenSet","showTrialSelect","chartId","width","height","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","undoStack","initialComponentState","addNextComponentStateToUndoStack","mouseOverPoints","componentId","componentContent","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","isResetSeriesButtonVisible","getLatestComponentAnnotations","nodeId","workgroupId","isDisabled","componentState","id","isStudentAttachmentEnabled","componentStateHasStudentWork","newTrial","hasConnectedComponentAlwaysField","handleConnectedComponents","setStudentWork","hasConnectedComponent","previousComponentState","maxSubmitCount","submitCounter","isSubmitButtonDisabled","hideLegend","hideTrialSelect","disableComponentIfNecessary","setupGraph","then","$broadcast","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","studentData","tableData","rows","data","graphController","convertRowDataToSeriesData","seriesIndex","trial","isDirty","makeCopyOfJSONObject","processConnectedComponentStudentData","studentDataChanged","t","setVerticalPlotLine","bind","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","resolve","promise","deleteKeyPressedListenerDestroyer","$on","handleDeleteKeyPressed","angular","event","args","fileUploadChanged","element","overwrite","activeSeriesData","length","answer","confirm","$translate","files","reader","FileReader","onload","fileContent","result","scope","readCSV","setUploadedFileName","fileName","name","readAsText","uploadAsset","value","submit","setupMouseMoveListenerDone","$","unbind","e","mouseDown","mouseDownEventOccurred","offsetX","offsetY","chart","highcharts","chartXAxis","xAxis","x","toValue","makeSureXIsWithinXMinMaxLimits","showMouseXPlotLine","showXPlotLine","chartYAxis","yAxis","y","makeSureYIsWithinYMinMaxLimits","showMouseYPlotLine","showYPlotLine","saveMouseOverPoints","currentTimestamp","Date","getTime","timeBetweenSendingMouseOverPoints","lastSavedMouseMoveTimestamp","addMouseOverPoint","text","removePlotLine","plotLine","color","label","verticalAlign","addPlotLine","highlightXRangeFromZero","drawRangeRectangle","min","max","xMin","xMax","yMin","yMax","strokeColor","strokeWidth","fillColor","fillOpacity","translate","rectangle","renderer","rect","css","stroke","fill","add","attr","plotLeft","plotHeight","plotTop","align","Highcharts","charts","mouseOverPoint","push","useTimeout","chartConfig","options","setupGraphHelper","title","allowDecimals","plotBands","xAxisLimitSpacerWidth","thisGraphController","getSeries","trialPlotBands","enableTrials","show","tempSeries","concat","setSeries","setDefaultActiveSeries","s","regression","regressionSettings","numberOfPoints","canEdit","isActiveSeries","draggableX","draggableY","cursor","stickyTracking","shared","allowPointSelect","enableMouseTracking","allowPointMouseOver","isMousePlotLineOn","regressionSeries","allSeries","clearSeriesIds","setSeriesIds","updateMinMaxAxisValues","timeout","plotLines","zoomType","legend","enabled","tooltip","formatter","xText","yText","xAxisUnits","yAxisUnits","userOptions","units","seriesName","performRounding","category","getCategoryByIndex","point","index","plotBackgroundImage","events","load","click","currentTime","lastDropTime","activeSeriesId","visible","alert","addPointToSeries","plotOptions","dragSensitivity","legendItemClick","canStudentHideSeriesOnLegendClick","yAxisSeries","getSeriesById","drag","dragging","drop","target","loading","func","showXPlotLineIfOn","showYPlotLineIfOn","isMouseXPlotLineOn","isMouseYPlotLineOn","isSaveMouseOverPoints","setupMouseMoveListener","reflow","useCustomLegend","setCustomLegend","userAgent","navigator","indexOf","currentTransform","matrixRegEx","results","exec","newTransform","replace","html","customLegend","pointAdded","d","tempPoint","tempDataXValue","splice","tempData","seriesId","tempTrial","i","currentSeries","editableTrials","canEditTrial","setActiveSeries","getSeriesByIndex","resetGraphHelper","setXAxis","setYAxis","confirmMessage","resetSeriesHelper","isReset","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","setActiveSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","$emit","setSubmittedMessage","setSavedMessage","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","useTimeoutSetupGraph","clearSaveText","$$phase","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","createComponentStateAdditionalProcessing","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","additionalProcessingFunction","all","seriesArray","showClassmateWorkSource","getClassmateStudentWork","componentStates","promises","c","getTrialsFromComponentState","promiseResults","mergedTrials","p","nodePositionAndTitle","getNodePositionAndTitleByNodeId","generateKey","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","marker","r","row","xCell","yCell","xNumber","Number","yNumber","isNaN","usedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","selectedPoints","getSelectedPoints","indexes","selectedPoint","dataPoint","sort","reverse","newSeries","symbol","isActiveSeriesIndex","hasEditableSeries","trialCount","trialNameRegex","trialNumbers","tempTrialName","match","tempTrialNumber","parseInt","maxTrialNumber","trialIndex","trialToRemove","trialToRemoveId","highestTrialIndex","highestTrial","trialId","getTrialById","getSelectedTrialsText","lastShownTrialId","lastShownTrial","a","idToShow","arraysContainSameValues","previousTrialIdsToShow","idsToShow","fields","parseLatestTrial","field","when","firstTime","readConnectedComponentFieldFromStudentData","selectedCells","selectedTrialIds","convertSelectedCellsToTrialIds","includes","deleteTrialsByTrialId","trialIdsToDelete","trialIdToDelete","deleteTrialId","latestStudentDataTrial","latestStudentDataTrialId","firstTrial","shift","latestTrial","seriesNumbers","singleSeries","seriesColor","dashStyle","highlightLatestPoint","highlightPointOnX","xPointToHighlight","xPlotLine","activeTrialChanged","minMaxValues","getMinMaxValues","locked","minPadding","maxPadding","tempX","tempY","constructor","$event","highchartsDiv","find","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","csv","lines","split","lineNumber","line","values","parseFloat","xAxisType","newData","oldDataPoint","Array","isArray","newDataPoint","number","roundValuesTo","roundToNearestInteger","roundToNearestTenth","roundToNearestHundredth","Math","round","zIndex","$apply","connectedComponents","connectedComponentBackgroundImage","isPreview","getTrialsFromClassmates","component","getComponentByNodeIdAndComponentId","injectAssetPaths","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","promiseResult","newComponentState","handleConnectedComponentsHelper","generateImageFromComponentState","image","url","mergedComponentState","mergeFields","connectedComponentState","mergeComponentState","mergeNullComponentState","baseComponentState","mergeField","readConnectedComponentField","pop","categories","getXValueFromDataPoint","getYValueFromDataPoint","getLatestMouseOverPointX","getLatestMouseOverPointY","points","refresh","setState","latestSeries","latestPoint","selectedCell","material","bevTemp","airTemp","selectedTrialId","$inject"],"mappings":"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","file":"graphController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\n\nclass GraphController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.GraphService = GraphService;\n\n    // the graph type\n    this.graphType = null;\n\n    // holds all the series\n    this.series = [];\n\n    // which color the series will be in\n    this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n    // series marker options\n    this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n    // will hold the active series\n    this.activeSeries = null;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the reset graph button is shown or not\n    this.isResetGraphButtonVisible = false;\n\n    // whether the select series input is shown or not\n    this.isSelectSeriesVisible = false;\n\n    // the label for the notebook in the project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // whether to only show the new trial when a new trial is created\n    this.hideAllTrialsOnNewTrial = true;\n\n    // whether to show the undo button\n    this.showUndoButton = false;\n\n    this.legendEnabled = true;\n\n    this.hasCustomLegendBeenSet = false;\n\n    this.showTrialSelect = true;\n\n    // the id of the chart element\n    this.chartId = 'chart1';\n\n\n\n    // the width of the graph\n    this.width = null;\n\n    // the height of the graph\n    this.height = null;\n\n    this.trials = [];\n    this.activeTrial = null;\n    this.trialIdsToShow = [];\n    this.selectedTrialsText = '';\n\n    this.studentDataVersion = 2;\n\n    this.canCreateNewTrials = false;\n    this.canDeleteTrials = false;\n\n    this.uploadedFileName = null;\n\n    this.backgroundImage = null;\n\n    /*\n     * An array to store the component states for the student to undo.\n     * The undoStack will contain the component states from the current\n     * visit except for the current component state.\n     */\n    this.undoStack = [];\n\n    // used to hold the component state that is loaded when this component loads\n    this.initialComponentState = null;\n\n    /*\n     * whether to add the next component state created in\n     * studentDataChanged() to the undoStack\n     */\n    this.addNextComponentStateToUndoStack = false;\n\n    this.mouseOverPoints = [];\n\n\n    // set the chart id\n    this.chartId = 'chart_' + this.componentId;\n\n    // get the graph type\n    this.graphType = this.componentContent.graphType;\n\n    if (this.graphType == null) {\n      // there is no graph type so we will default to line plot\n      this.graphType = 'line';\n    }\n\n    if (this.componentContent.canCreateNewTrials) {\n      this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n    }\n\n    if (this.componentContent.canDeleteTrials) {\n      this.canDeleteTrials = this.componentContent.canDeleteTrials;\n    }\n\n    if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n      this.hideAllTrialsOnNewTrial = false;\n    }\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.isResetSeriesButtonVisible = true;\n      this.isSelectSeriesVisible = true;\n\n      // get the latest annotations\n      // TODO: watch for new annotations and update accordingly\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      this.backgroundImage = this.componentContent.backgroundImage;\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      //this.isResetGraphButtonVisible = false;\n      this.isResetSeriesButtonVisible = false;\n      this.isSelectSeriesVisible = false;\n      this.isDisabled = true;\n\n      // get the component state from the scope\n      let componentState = this.$scope.componentState;\n\n      if (componentState != null) {\n        // create a unique id for the chart element using this component state\n        this.chartId = 'chart_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.chartId = 'chart_gradingRevision_' + componentState.id;\n        }\n      }\n\n      if (this.mode === 'grading') {\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isResetGraphButtonVisible = false;\n      this.isResetSeriesButtonVisible = false;\n      this.isSelectSeriesVisible = false;\n      this.isDisabled = true;\n      this.backgroundImage = this.componentContent.backgroundImage;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n      this.backgroundImage = this.componentContent.backgroundImage;\n    }\n\n    // get the component state from the scope\n    let componentState = this.$scope.componentState;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (!this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.newTrial();\n      }\n      if (this.UtilService.hasConnectedComponentAlwaysField(this.componentContent)) {\n        /*\n         * This component has a connected component that we always want to look at for\n         * merging student data.\n         */\n        this.handleConnectedComponents();\n      } else if (this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        // this student has previous work so we will load it\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        /*\n         * This student doesn't have any previous work but this component has connected components\n         * so we will get the work from the connected component.\n         */\n        this.handleConnectedComponents();\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    if (componentState != null) {\n      // there is an initial component state so we will remember it\n      this.initialComponentState = componentState;\n\n      /*\n       * remember this component state as the previous component\n       * state for undo purposes\n       */\n      this.previousComponentState = componentState;\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    if (this.componentContent.hideLegend) {\n      this.legendEnabled = false;\n    }\n\n    if (this.componentContent.hideTrialSelect) {\n      this.showTrialSelect = false;\n    }\n\n    this.disableComponentIfNecessary();\n\n    // setup the graph\n    this.setupGraph().then(() => {\n      this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n    });\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the student data from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n      if (connectedComponent != null && componentState != null) {\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        if (componentType === 'Table') {\n\n          // convert the table data to series data\n          if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null && studentData.tableData != null) {\n\n              // get the rows in the table\n              var rows = studentData.tableData;\n\n              var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n              // get the index of the series that we will put the data into\n              var seriesIndex = connectedComponentParams.seriesIndex;\n\n              if (seriesIndex == null) {\n                seriesIndex = 0;\n              }\n\n              var studentDataVersion = this.$scope.graphController.studentDataVersion;\n\n              if (studentDataVersion == null || studentDataVersion == 1) {\n                // the student data is version 1 which has no trials\n\n                // get the series\n                var series = this.$scope.graphController.series[seriesIndex];\n\n                if (series == null) {\n                  // the series is null so we will create a series\n                  series = {};\n                  this.$scope.graphController.series[seriesIndex] = series;\n                }\n\n                // set the data into the series\n                series.data = data;\n              } else {\n                // the student data is the newer version that has trials\n\n                // get the active trial\n                var trial = this.$scope.graphController.activeTrial;\n\n                if (trial != null && trial.series != null) {\n\n                  // get the series\n                  var series = trial.series[seriesIndex];\n\n                  if (series == null) {\n                    // the series is null so we will create a series\n                    series = {};\n                    this.$scope.graphController.series[seriesIndex] = series;\n                  }\n\n                  // set the data into the series\n                  series.data = data;\n                }\n              }\n\n              // render the graph\n              this.$scope.graphController.setupGraph();\n\n              // the graph has changed\n              this.$scope.graphController.isDirty = true;\n            }\n          }\n        } else if (componentType == 'Embedded') {\n          // convert the embedded data to series data\n          if (componentState != null) {\n            /*\n             * make a copy of the component state so that we don't\n             * reference the exact component state object from the\n             * other component in case field values change.\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n            let studentData = componentState.studentData;\n            this.processConnectedComponentStudentData(studentData, connectedComponentParams);\n            this.studentDataChanged();\n          }\n        } else if (componentType == 'Animation') {\n\n          if (componentState != null && componentState.t != null) {\n\n            // set the vertical plot line to show where t is\n            this.setVerticalPlotLine(componentState.t);\n\n            // redraw the graph so that the plot line displays\n            this.setupGraph();\n          }\n        }\n      }\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.graphController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.graphController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.graphController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /*\n     * Handle the delete key pressed event\n     */\n    this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n      this.handleDeleteKeyPressed();\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      // destroy the delete key pressed listener\n      this.deleteKeyPressedListenerDestroyer();\n    }));\n\n    /**\n     * The student has changed the file input\n     * @param element the file input element\n     */\n    this.$scope.fileUploadChanged = function(element) {\n\n      var overwrite = true;\n\n      // check if the active series already has data\n      if (this.graphController != null &&\n        this.graphController.activeSeries != null &&\n        this.graphController.activeSeries.data != null) {\n\n        var activeSeriesData = this.graphController.activeSeries.data;\n\n        if (activeSeriesData.length > 0) {\n          /*\n           * the active series already has data so we will ask the\n           * student if they want to overwrite the data\n           */\n          var answer = confirm(this.graphController.$translate('graph.areYouSureYouWantToOverwriteTheCurrentLineData'));\n          if (!answer) {\n            // the student does not want to overwrite the data\n            overwrite = false;\n          }\n        }\n      }\n\n      if (overwrite) {\n        // obtain the file content and overwrite the data in the graph\n\n        // get the files from the file input element\n        var files = element.files;\n\n        if (files != null && files.length > 0) {\n\n          var reader = new FileReader();\n\n          // this is the callback function for reader.readAsText()\n          reader.onload = function() {\n\n            // get the file contente\n            var fileContent = reader.result;\n\n            /*\n             * read the csv file content and load the data into\n             * the active series\n             */\n            this.scope.graphController.readCSV(fileContent);\n\n            // remember the file name\n            this.scope.graphController.setUploadedFileName(this.fileName);\n            this.scope.graphController.studentDataChanged();\n          }\n\n          /*\n           * save a reference to this scope in the reader so that we\n           * have access to the scope and graphController in the\n           * reader.onload() function\n           */\n          reader.scope = this;\n\n          // remember the file name\n          reader.fileName = files[0].name;\n\n          // read the text from the file\n          reader.readAsText(files[0]);\n\n          // upload the file to the studentuploads folder\n          this.graphController.StudentAssetService.uploadAsset(files[0]);\n        }\n      }\n\n      /*\n       * clear the file input element value so that onchange() will be\n       * called again if the student wants to upload the same file again\n       */\n      element.value = null;\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Set up the mouse over listener which will be used to draw plot lines at the\n   * mouse position.\n   */\n  setupMouseMoveListener() {\n\n    // Make sure we only add the listeners once.\n    if (!this.setupMouseMoveListenerDone) {\n\n      /*\n       * Remove all existing listeners on the chart div to make sure we don't\n       * bind a listener multiple times.\n       */\n      $('#' + this.chartId).unbind();\n\n      $('#' + this.chartId).bind('mousedown', (e) => {\n        this.mouseDown = true;\n        this.mouseDownEventOccurred(e);\n      });\n\n      $('#' + this.chartId).bind('mouseup', (e) => {\n        this.mouseDown = false;\n      });\n\n      $('#' + this.chartId).bind('mousemove', (e) => {\n        if (this.mouseDown) {\n          this.mouseDownEventOccurred(e);\n        }\n      });\n\n      $('#' + this.chartId).bind('mouseleave', (e) => {\n        this.mouseDown = false;\n      });\n\n      this.setupMouseMoveListenerDone = true;\n    }\n  }\n\n  /**\n   * The student has moved the mouse while holding the mouse button down.\n   * @param e The mouse event.\n   */\n  mouseDownEventOccurred(e) {\n    /*\n     * Firefox displays abnormal behavior when the student drags the plot line.\n     * In Firefox, when the mouse is on top of the plot line, the event will\n     * contain offset values relative to the plot line instead of relative to\n     * the graph container. We always want the offset values relative to the\n     * graph container so we will ignore events where the offset values are\n     * relative to the plot line.\n     */\n    if (e.offsetX < 10 || e.offsetY < 10) {\n      return;\n    }\n\n    let chart = $('#' + this.chartId).highcharts();\n\n    // handle the x position of the mouse\n    let chartXAxis = chart.xAxis[0];\n    let x = chartXAxis.toValue(e.offsetX, false);\n    x = this.makeSureXIsWithinXMinMaxLimits(x);\n    if (this.componentContent.showMouseXPlotLine) {\n      this.showXPlotLine(x);\n    }\n\n    // handle the y position of the mouse\n    let chartYAxis = chart.yAxis[0];\n    let y = chartYAxis.toValue(e.offsetY, false);\n    y = this.makeSureYIsWithinYMinMaxLimits(y);\n    if (this.componentContent.showMouseYPlotLine) {\n      this.showYPlotLine(y);\n    }\n\n    if (this.componentContent.saveMouseOverPoints) {\n      /*\n       * Make sure we aren't saving the points too frequently. We want to avoid\n       * saving too many unnecessary data points.\n       */\n      let currentTimestamp = new Date().getTime();\n\n      /*\n       * Make sure this many milliseconds has passed before saving another mouse\n       * over point.\n       */\n      let timeBetweenSendingMouseOverPoints = 200;\n\n      if (this.lastSavedMouseMoveTimestamp == null ||\n            currentTimestamp - this.lastSavedMouseMoveTimestamp > timeBetweenSendingMouseOverPoints) {\n        this.addMouseOverPoint(x, y);\n        this.studentDataChanged();\n        this.lastSavedMouseMoveTimestamp = currentTimestamp;\n      }\n    }\n  }\n\n  /**\n   * Show the vertical plot line at the given x.\n   * @param x The x value to show the vertical line at.\n   * @param text The text to show on the plot line.\n   */\n  showXPlotLine(x, text) {\n    let chart = $('#' + this.chartId).highcharts();\n    let chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    let plotLine = {\n        value: x,\n        color: 'red',\n        width: 4,\n        id: 'plot-line-x'\n    };\n    if (text != null && text != '') {\n      plotLine.label = {\n        text: text,\n        verticalAlign: 'top'\n      }\n    }\n    chartXAxis.addPlotLine(plotLine);\n\n    if (this.componentContent.highlightXRangeFromZero) {\n      this.drawRangeRectangle(0, x, chart.yAxis[0].min, chart.yAxis[0].max);\n    }\n  }\n\n  /**\n   * Draw a rectangle on the graph. This is used for highlighting a range.\n   * @param xMin The left x value in the graph x axis units.\n   * @param xMax The right x value in the graph x axis units.\n   * @param yMin The bottom y value in the graph y axis units.\n   * @param yMax The top y value in the graph y axis units.\n   * @param strokeColor The color of the border.\n   * @param strokeWidth The width of the border.\n   * @param fillColor The color inside the rectangle.\n   * @param fillOpacity The opacity of the color inside the rectangle.\n   */\n  drawRangeRectangle(xMin, xMax, yMin, yMax,\n      strokeColor = 'black', strokeWidth = '.5',\n      fillColor = 'black', fillOpacity = '.1') {\n\n    let chart = $('#' + this.chartId).highcharts();\n\n    // convert the x and y values to pixel values\n    xMin = chart.xAxis[0].translate(xMin);\n    xMax = chart.xAxis[0].translate(xMax);\n    yMin = chart.yAxis[0].translate(yMin);\n    yMax = chart.yAxis[0].translate(yMax);\n\n    // create the rectangle if it hasn't been created before\n    if (this.rectangle == null) {\n      this.rectangle = chart.renderer.rect(0,0,0,0,0).css({\n        stroke: strokeColor,\n        strokeWidth: strokeWidth,\n        fill: fillColor,\n        fillOpacity: fillOpacity\n      }).add();\n    }\n\n    // update the rectangle position and size\n    this.rectangle.attr({\n      x: xMin + chart.plotLeft,\n      y: chart.plotHeight + chart.plotTop - yMax,\n      width: xMax - xMin,\n      height: yMax - yMin\n    });\n  }\n\n  /**\n   * Show the horizontal plot line at the given y.\n   * @param y The y value to show the horizontal line at.\n   * @param text The text to show on the plot line.\n   */\n  showYPlotLine(y, text) {\n    let chart = $('#' + this.chartId).highcharts();\n    let chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n    let plotLine = {\n        value: y,\n        color: 'red',\n        width: 2,\n        id: 'plot-line-y'\n    };\n    if (text != null && text != '') {\n      plotLine.label = {\n        text: text,\n        align: 'right'\n      }\n    }\n    chartYAxis.addPlotLine(plotLine);\n  }\n\n  /**\n   * Clear the x and y plot lines on the graph.\n   */\n  clearPlotLines() {\n    let chart = Highcharts.charts[0];\n    let chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    let chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n  }\n\n  /**\n   * If the x value is not within the x min and max limits, we will modify the\n   * x value to be at the limit.\n   * @param x the x value\n   * @return an x value between the x min and max limits\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    if (x < this.xAxis.min) {\n      x = this.xAxis.min;\n    }\n\n    if (x > this.xAxis.max) {\n      x = this.xAxis.max;\n    }\n\n    return x;\n  }\n\n  /**\n   * If the y value is not within the y min and max limits, we will modify the\n   * y value to be at the limit.\n   * @param y the y value\n   * @return a y value between the y min and max limits\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    if (y < this.yAxis.min) {\n      y = this.yAxis.min;\n    }\n\n    if (y > this.yAxis.max) {\n      y = this.yAxis.max;\n    }\n\n    return y;\n  }\n\n  /**\n   * Add a mouse over point to the array of student mouse over points.\n   * @param x the x value in graph units\n   * @param y the y value in graph units\n   */\n  addMouseOverPoint(x, y) {\n    let mouseOverPoint = [x, y];\n    this.mouseOverPoints.push(mouseOverPoint);\n  }\n\n  /**\n   * Setup the graph\n   * @param useTimeout whether to call the setupGraphHelper() function in\n   * a timeout callback\n   */\n  setupGraph(useTimeout) {\n\n    var deferred = this.$q.defer();\n\n    if (useTimeout) {\n      // call the setup graph helper after a timeout\n\n      /*\n       * clear the chart config so that the graph is completely refreshed.\n       * we need to do this otherwise all the series will react to\n       * mouseover but we only want the active series to react to\n       * mouseover.\n       */\n      this.chartConfig = {\n        chart: {\n          options: {\n            chart: {}\n          }\n        }\n      };\n\n      /*\n       * call the setup graph helper after a timeout. this is required\n       * so that the graph is completely refreshed so that only the\n       * active series will react to mouseover.\n       */\n      this.$timeout(() => {\n        this.setupGraphHelper(deferred);\n      });\n    } else {\n      // call the setup graph helper immediately\n      this.setupGraphHelper(deferred);\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * The helper function for setting up the graph.\n   * @param deferred A promise that should be resolved after the graph is done\n   * rendering.\n   */\n  setupGraphHelper(deferred) {\n\n    // get the title\n    var title = this.componentContent.title;\n\n    // get the x and y axis attributes from the student data\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (this.xAxis == null && this.componentContent.xAxis != null) {\n      /*\n       * the student does not have x axis data so we will use the\n       * x axis from the component content\n       */\n      xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n      this.xAxis = xAxis;\n    }\n\n    if (this.xAxis != null) {\n      // do not display decimals on the x axis\n      this.xAxis.allowDecimals = false;\n\n      this.xAxis.plotBands = null;\n      if (this.componentContent.xAxis != null &&\n          this.componentContent.xAxis.plotBands != null) {\n        // Get the authored plot bands.\n        this.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n      }\n    }\n\n    if (this.yAxis == null && this.componentContent.yAxis != null) {\n      /*\n       * the student does not have y axis data so we will use the\n       * y axis from the component content\n       */\n      yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n      this.yAxis = yAxis;\n    }\n\n    if (this.yAxis != null) {\n      // do not display decimals on the y axis\n      this.yAxis.allowDecimals = false;\n    }\n\n    if (this.componentContent.width != null) {\n      // set the width of the graph\n      this.width = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      // set the height of the graph\n      this.height = this.componentContent.height;\n    }\n\n    // set the width of the span between the student x min and x max inputs\n    if (this.width > 100) {\n      this.xAxisLimitSpacerWidth = this.width - 100;\n    } else {\n      this.xAxisLimitSpacerWidth = 0;\n    }\n\n    /*\n     * remember this graph controller so we can access it in the click\n     * event for the graph\n     */\n    var thisGraphController = this;\n\n    // get all the series from the student data\n    var series = this.getSeries();\n\n    var trialPlotBands = [];\n\n    if (this.componentContent.enableTrials) {\n      /*\n       * trials are enabled so we will show the ones the student\n       * has checked\n       */\n      series = [];\n\n      var trials = this.trials;\n\n      // loop through all the trials\n      for (var t = 0; t < trials.length; t++) {\n        var trial = trials[t];\n\n        if (trial != null) {\n\n          if (trial.show) {\n            /*\n             * we want to show this trial so we will append the\n             * series from it\n             */\n            var tempSeries = trial.series;\n            series = series.concat(tempSeries);\n\n            if (trial.xAxis != null &&\n                trial.xAxis.plotBands != null) {\n              /*\n               * Accumulate the plot bands from the trials that\n               * we are showing.\n               */\n              trialPlotBands = trialPlotBands.concat(trial.xAxis.plotBands);\n            }\n          }\n        }\n      }\n    }\n\n    if (trialPlotBands.length > 0) {\n      if (xAxis.plotBands == null) {\n        xAxis.plotBands = [];\n      }\n      // Add the student plot bands to the x axis.\n      xAxis.plotBands = xAxis.plotBands.concat(trialPlotBands);\n    }\n\n    if ((series == null || series.length === 0) && this.componentContent.series != null) {\n      /*\n       * use the series from the component content if the student does not\n       * have any series data\n       */\n      series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n      this.setSeries(series);\n    }\n\n    // add the event that will remove a point when clicked\n    //this.addClickToRemovePointEvent(series);\n\n    this.setDefaultActiveSeries();\n\n    this.showUndoButton = false;\n\n    // loop through all the series and\n    for (var s = 0; s < series.length; s++) {\n      var tempSeries = series[s];\n\n      // check if the series should have a regression line generated for it\n      if (tempSeries != null) {\n\n        if (tempSeries.regression) {\n          if (tempSeries.regressionSettings == null) {\n            // initialize the regression settings object if necessary\n            tempSeries.regressionSettings = {};\n          }\n\n          // get the regression settings object\n          var regressionSettings = tempSeries.regressionSettings;\n\n          // add these regression settings\n          regressionSettings.xMin = xAxis.min;\n          regressionSettings.xMax = xAxis.max;\n          regressionSettings.numberOfPoints = 100;\n        }\n\n        if (tempSeries.canEdit && this.isActiveSeries(tempSeries)) {\n          // the series is the active one so we will allow the student to interact with it\n          // set the fields to allow points to be draggable\n          if (this.graphType === 'line' || this.graphType === 'scatter') {\n            // students can drag points horizontally on line and scatter plots\n            tempSeries.draggableX = true;\n          } else if (this.graphType === 'column') {\n            // students can not drag points horizontally on column plots\n            tempSeries.draggableX = false;\n          }\n          tempSeries.draggableY = true;\n          tempSeries.cursor = 'move';\n          tempSeries.stickyTracking = false;\n          tempSeries.shared = false;\n          tempSeries.allowPointSelect = true;\n          tempSeries.enableMouseTracking = true;\n          this.showUndoButton = true;\n        } else {\n          // the series is not active so we will not allow the student to interact with it\n          tempSeries.draggableX = false;\n          tempSeries.draggableY = false;\n          tempSeries.stickyTracking = false;\n          tempSeries.shared = false;\n          tempSeries.allowPointSelect = false;\n          tempSeries.enableMouseTracking = false;\n        }\n\n        // a series can be customized to allow mousing over points even when not the active series\n        if (tempSeries.allowPointMouseOver === true) {\n          tempSeries.allowPointSelect = true;\n          tempSeries.enableMouseTracking = true;\n        }\n\n        if (this.isMousePlotLineOn()) {\n          tempSeries.enableMouseTracking = true;\n        }\n      }\n    }\n\n    /*\n     * generate an array of regression series for the series that\n     * requrie a regression line\n     */\n    //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n    var regressionSeries = [];\n    this.regressionSeries = regressionSeries;\n\n    /*\n     * create an array that will contain all the regular series and all\n     * the regression series\n     */\n    var allSeries = [];\n    allSeries = allSeries.concat(series);\n\n    //regressionSeries[0].id = 'series-2';\n    //regressionSeries[1].id = 'series-3';\n    //this.setSeriesIds(regressionSeries);\n    allSeries = allSeries.concat(regressionSeries);\n\n    // clear all the series ids\n    this.clearSeriesIds(allSeries);\n\n    // give all series ids\n    this.setSeriesIds(allSeries);\n\n    /*\n     * update the min and max x and y values if necessary so that all\n     * points are visible\n     */\n    this.updateMinMaxAxisValues(allSeries, xAxis, yAxis);\n    let timeout = this.$timeout;\n\n    if (this.plotLines != null) {\n      // set the plot lines\n      xAxis.plotLines = this.plotLines;\n    }\n\n    // let user zoom the graph in the grading tool by clicking and dragging with mouse\n    // TODO: provide authoring option to allow zooming for students?\n    let zoomType = this.mode === 'grading' || this.mode === 'gradingRevision' ? 'xy' : null;\n\n    let legendEnabled = this.legendEnabled;\n\n    this.chartConfig = {\n      options: {\n        legend: {\n          enabled: legendEnabled\n        },\n        tooltip: {\n          formatter: function(){\n            if (this.series != null) {\n              var text = '';\n\n              var xText = '';\n              var yText = '';\n\n              var xAxisUnits = '';\n              var yAxisUnits = '';\n\n              if (this.series.xAxis != null &&\n                this.series.xAxis.userOptions != null &&\n                this.series.xAxis.userOptions.units != null) {\n\n                // get the x axis units\n                xAxisUnits = this.series.xAxis.userOptions.units;\n              }\n              if (this.series.yAxis != null &&\n                this.series.yAxis.userOptions != null &&\n                this.series.yAxis.userOptions.units != null) {\n\n                // get the y axis units\n                yAxisUnits = this.series.yAxis.userOptions.units;\n              }\n\n              if (thisGraphController.xAxis.type == null ||\n                thisGraphController.xAxis.type === '' ||\n                thisGraphController.xAxis.type === 'limits') {\n\n\n                var seriesName = this.series.name;\n\n                // get the x and y values\n                var x = thisGraphController.performRounding(this.x);\n                var y = thisGraphController.performRounding(this.y);\n\n                if (seriesName != null && seriesName != '') {\n                  // add the series name\n                  text += '<b>' + seriesName + '</b><br/>';\n                }\n\n                if (x != null && x != '') {\n\n                  // get the x value\n                  xText += x;\n\n                  if (xAxisUnits != null && xAxisUnits != '') {\n                    // add the x units\n                    xText += ' ' + xAxisUnits;\n                  }\n                }\n\n                if (y != null && y != '') {\n\n                  // get the y value\n                  yText += y;\n\n                  if (yAxisUnits != null && yAxisUnits != '') {\n\n                    // add the y units\n                    yText += ' ' + yAxisUnits;\n                  }\n                }\n\n                if (xText != null && xText != '') {\n\n                  // add the x text\n                  text += xText;\n                }\n\n                if (yText != null && yText != '') {\n\n                  if (xText != null && xText != '') {\n                    // separate the xText and the yText with a comma\n                    text += ', ';\n                  }\n\n                  // add the y text\n                  text += yText;\n                }\n              } else if (thisGraphController.xAxis.type === 'categories') {\n\n                var text = '';\n                var seriesName = this.series.name;\n\n                // get the x and y values\n                var x = thisGraphController.performRounding(this.x);\n                var y = thisGraphController.performRounding(this.y);\n                var category = thisGraphController.getCategoryByIndex(this.point.index);\n\n                if (seriesName != null && seriesName != '') {\n                  // add the series name\n                  text += '<b>' + seriesName + '</b><br/>';\n                }\n\n                if (category != null) {\n                  xText = category;\n                } else if (x != null && x != '') {\n                  // get the x value\n                  xText += x;\n                }\n\n                if (y != null && y != '') {\n                  // get the y value\n                  yText += y;\n                }\n\n                // add the x and y text\n                text += xText + ' ' + yText;\n              }\n\n              if (this.point.tooltip != null && this.point.tooltip != '') {\n                // this point has a custom tooltip so we will display it\n                text += '<br/>' + this.point.tooltip;\n              }\n\n              return text;\n            }\n          }\n        },\n        chart: {\n          width: this.width,\n          height: this.height,\n          type: this.graphType,\n          zoomType: zoomType,\n          plotBackgroundImage: this.backgroundImage,\n          events: {\n            load: function() {\n              deferred.resolve(this);\n            },\n            click: function(e) {\n              if (thisGraphController.graphType == 'line' ||\n                thisGraphController.graphType == 'scatter') {\n                // only attempt to add a new point if the graph type is line or scatter\n\n                // get the current time\n                var currentTime = new Date().getTime();\n\n                // check if a drop event recently occurred\n                if (thisGraphController.lastDropTime != null) {\n\n                  // check if the last drop event was not within the last 100 milliseconds\n                  if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                    /*\n                     * the last drop event was within the last 100 milliseconds so we\n                     * will not register this click. we need to do this because when\n                     * students drag points, a click event is fired when they release\n                     * the mouse button. we don't want that click event to create a new\n                     * point so we need to ignore it.\n                     */\n                    return;\n                  }\n                }\n\n                //check if the student can change the graph\n                if (!thisGraphController.isDisabled) {\n\n                  // get the active series\n                  var activeSeries = thisGraphController.activeSeries;\n\n                  // check if the student is allowed to edit the active series\n                  if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                    // make sure the series is visible\n\n                    // get the active series id\n                    var activeSeriesId = activeSeries.id;\n\n                    // loop through all the series\n                    for (var s = 0; s < this.series.length; s++) {\n                      var tempSeries = this.series[s];\n\n                      if (tempSeries != null) {\n                        if (activeSeriesId == tempSeries.options.id) {\n                          // we have found the active series\n\n                          if (!tempSeries.visible) {\n                            // the series is not visible so we will not add the point\n                            alert(thisGraphController.$translate('graph.studentAddingPointToHiddenSeriesMessage'));\n                            return;\n                          }\n                        }\n                      }\n                    }\n\n                    /*\n                     * get the x and y positions that were clicked and round\n                     * them to the nearest tenth\n                     */\n                    var x = thisGraphController.performRounding(e.xAxis[0].value);\n                    var y = thisGraphController.performRounding(e.yAxis[0].value);\n\n                    // add the point to the series\n                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                    /*\n                     * add the next component state created in studentDataChanged() to the\n                     * undo stack\n                     */\n                    thisGraphController.addNextComponentStateToUndoStack = true;\n                    thisGraphController.studentDataChanged();\n                  } else {\n                    if (thisGraphController.isMousePlotLineOn()) {\n                      // do nothing\n                    } else {\n                      /*\n                       * the student is trying to add a point to a series\n                       * that can't be edited\n                       */\n                      alert(thisGraphController.$translate('graph.youCanNotEditThisSeriesPleaseChooseASeriesThatCanBeEdited'));\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        plotOptions: {\n          series: {\n            dragSensitivity: 10,\n            stickyTracking: false,\n            events: {\n              legendItemClick: function(event) {\n                // the student clicked on a series in the legend\n\n                if (thisGraphController.componentContent.canStudentHideSeriesOnLegendClick != null) {\n                  if (thisGraphController.componentContent.canStudentHideSeriesOnLegendClick) {\n                    /*\n                     * Update the show field in all the series depending on\n                     * whether each line is active in the legend.\n                     */\n                    for (let yAxisSeries of this.yAxis.series) {\n                      let series = thisGraphController.getSeriesById(yAxisSeries.userOptions.id);\n                      if (this.userOptions.id == series.id) {\n                        series.show = !yAxisSeries.visible;\n                      } else {\n                        series.show = yAxisSeries.visible;\n                      }\n                    }\n                    thisGraphController.studentDataChanged();\n                  }\n\n                  // the value has been authored so we will use it\n                  return thisGraphController.componentContent.canStudentHideSeriesOnLegendClick;\n                } else {\n                  // if this has not been authored, we will default to not hiding the series\n                  return false;\n                }\n              }\n            },\n            point: {\n              events: {\n                drag: function (e) {\n                  // the student has started dragging a point\n\n                  //check if the student can change the graph\n                  if (!thisGraphController.isDisabled) {\n\n                    // get the active series\n                    var activeSeries = thisGraphController.activeSeries;\n\n                    if (activeSeries != null) {\n                      // check if the student is allowed to edit the active series\n                      if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                        // set a flag to note that the student is dragging a point\n                        thisGraphController.dragging = true;\n                      }\n                    }\n                  }\n                },\n                drop: function (e) {\n                  // the student has stopped dragging the point and dropped the point\n\n                  //check if the student can change the graph and that they were previously dragging a point\n                  if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                    // get the active series\n                    var activeSeries = thisGraphController.activeSeries;\n\n                    if (activeSeries != null) {\n                      // set the dragging flag off\n                      thisGraphController.dragging = false;\n\n                      // remember this drop time\n                      thisGraphController.lastDropTime = new Date().getTime();\n\n                      // get the current target\n                      var target = e.target;\n\n                      if (target != null) {\n\n                        /*\n                         * get the x and y positions where the point was dropped and round\n                         * them to the nearest tenth\n                         */\n                        var x = thisGraphController.performRounding(target.x);\n                        var y = thisGraphController.performRounding(target.y);\n\n                        // get the index of the point\n                        var index = target.index;\n\n                        // get the series data\n                        var data = activeSeries.data;\n\n                        if (data != null) {\n                          // update the point\n                          if (thisGraphController.xAxis.type == null ||\n                            thisGraphController.xAxis.type === '' ||\n                            thisGraphController.xAxis.type === 'limits') {\n\n                            data[index] = [x, y];\n                          } else if (thisGraphController.xAxis.type == 'categories') {\n                            data[index] = y;\n                          }\n\n                          /*\n                           * add the next component state created in studentDataChanged() to the\n                           * undo stack\n                           */\n                          thisGraphController.addNextComponentStateToUndoStack = true;\n                          thisGraphController.studentDataChanged();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      series: allSeries,\n      title: {\n        text: title\n      },\n      xAxis: xAxis,\n      yAxis: yAxis,\n      loading: false,\n      func: function (chart) {\n        timeout(function () {\n          thisGraphController.showXPlotLineIfOn('Drag Me');\n          thisGraphController.showYPlotLineIfOn('Drag Me');\n\n          if (thisGraphController.isMouseXPlotLineOn() ||\n              thisGraphController.isMouseYPlotLineOn() ||\n              thisGraphController.isSaveMouseOverPoints()) {\n            thisGraphController.setupMouseMoveListener();\n          }\n          chart.reflow();\n        }, 1000);\n      }\n    };\n\n    if (this.componentContent.useCustomLegend) {\n      /*\n       * Use a timeout so the graph has a chance to render before we set the\n       * custom legend.\n       */\n      this.$timeout(() => {\n        this.setCustomLegend();\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  /**\n   * Overwrite the existing legend with the custom authored legend.\n   */\n  setCustomLegend() {\n    if (!this.hasCustomLegendBeenSet) {\n      if ($('.highcharts-legend').length > 0) {\n        // move the legend to the very left by setting the x position to 0\n\n        let userAgent = navigator.userAgent;\n        if (userAgent.indexOf('Firefox') != -1) {\n          let currentTransform = $('.highcharts-legend').attr('transform');\n\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the translate.\n           * Example\n           * \"translate(227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"translate(\"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the translate is captured in group 2.\n           */\n          let matrixRegEx = /(translate\\()(\\d*)(,\\s*\\d*\\))/;\n\n          // run the regex on the current transform\n          let results = matrixRegEx.exec(currentTransform);\n\n          // replace the second group with 0\n          let newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n\n          // update the transform\n          $('.highcharts-legend').attr('transform', newTransform);\n        } else {\n          let currentTransform = $('.highcharts-legend').css('transform');\n\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the matrix.\n           * Example\n           * \"matrix(1, 0, 0, 1, 227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"matrix(1, 0, 0, 1, \"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the matrix is captured in group 2.\n           */\n          let matrixRegEx = /(matrix\\(\\d*,\\s*\\d*,\\s*\\d*,\\s*\\d*,\\s*)(\\d*)(,\\s*\\d*\\))/;\n\n          // run the regex on the current transform\n          let results = matrixRegEx.exec(currentTransform);\n\n          // replace the second group with 0\n          let newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n\n          // update the transform\n          $('.highcharts-legend').css('transform', newTransform);\n        }\n\n        // replace the legend with the custom legend\n        $('.highcharts-legend').html(this.componentContent.customLegend);\n      }\n\n      this.hasCustomLegendBeenSet = true;\n    }\n  }\n\n  /**\n   * Add a point to a series. The point will be inserted into the series\n   * in the appropriate position that will keep the series data sorted.\n   * @param series the series\n   * @param x the x value\n   * @param y the y value\n   */\n  addPointToSeries0(series, x, y) {\n    if (series != null && x != null && y != null) {\n\n      // get the data points from the series\n      var data = series.data;\n\n      if (data != null) {\n        var pointAdded = false;\n\n        // loop through the data points\n        for (var d = 0; d < data.length; d++) {\n          var tempPoint = data[d];\n\n          if (tempPoint != null) {\n            // get the x value of the temp point\n            var tempDataXValue = tempPoint[0];\n\n            /*\n             * check if the x value of the point we want to add is\n             * less than the x value of the temp point\n             */\n            if (x < tempDataXValue) {\n              /*\n               * the x value is less so we will insert the point\n               * before this current temp point\n               */\n              data.splice(d, 0, [x, y]);\n              pointAdded = true;\n              break;\n            }\n          }\n        }\n\n        /*\n         * add the point to the end of the series if we haven't\n         * already added the point to the series\n         */\n        if (!pointAdded) {\n          data.push([x, y]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Add a point to a series. The point will be inserted at the end of\n   * the series.\n   * @param series the series\n   * @param x the x value\n   * @param y the y value\n   */\n  addPointToSeries(series, x, y) {\n    if (series != null && x != null && y != null) {\n\n      // get the data points from the series\n      var data = series.data;\n\n      if (data != null) {\n        if (this.componentContent.xAxis.type == 'categories') {\n          data[x] = y;\n        } else {\n          // the x axis type is limits\n          data.push([x, y]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Remove a point from a series. We will remove all points that\n   * have the given x value.\n   * @param series the series to remove the point from\n   * @param x the x value of the point to remove\n   */\n  removePointFromSeries(series, x) {\n    if (series != null && x != null) {\n      var data = series.data;\n\n      if (data != null) {\n\n        // loop through all the points\n        for (var d = 0; d < data.length; d++) {\n          var tempData = data[d];\n\n          if (tempData != null) {\n            // get the x value of the point\n            var tempDataXValue = tempData[0];\n\n            if (x == tempDataXValue) {\n              // the x value matches the one we want\n\n              // remove the point from the data\n              data.splice(d, 1);\n\n              /*\n               * move the counter back one since we have just\n               * removed an element from the data array\n               */\n              d--;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Check if we need to add the click to remove event to the series\n   * @param series an array of series\n   */\n  addClickToRemovePointEvent(series) {\n\n    if (!this.isDisabled) {\n      /*\n       * the student can click to add a point so we will also allow\n       * them to click to remove a point\n       */\n\n      if (series != null) {\n        var thisGraphController = this;\n\n        // loop through all the series\n        for (var s = 0; s < series.length; s++) {\n\n          var tempSeries = series[s];\n\n          if (this.canEdit(tempSeries)) {\n            /*\n             * create a point click event to remove a point when\n             * it is clicked\n             */\n            var point = {\n              events: {\n                click: function (e) {\n\n                  /*\n                   * make sure the point that was clicked is from the active series.\n                   * if it isn't from the active series we will not do anything.\n                   */\n\n                  // get the series that was clicked\n                  var series = this.series;\n\n                  if (series != null && series.userOptions != null) {\n\n                    // get the id of the series that was clicked\n                    var seriesId = series.userOptions.id;\n\n                    // get the active series\n                    var activeSeries = thisGraphController.activeSeries;\n\n                    if (activeSeries != null) {\n\n                      // get the active series id\n                      var activeSeriesId = activeSeries.id;\n\n                      // check if the series that was clicked is the active series\n                      if (seriesId == activeSeriesId) {\n\n                        // get the data from the active series\n                        var data = activeSeries.data;\n\n                        if (data != null) {\n\n                          // get the index of the point\n                          var index = this.index;\n\n                          // remove the element at the given index\n                          data.splice(index, 1);\n                          thisGraphController.studentDataChanged();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            };\n\n            // set this point event into the series\n            tempSeries.point = point;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether the student is allowed to edit a given series\n   * @param series the series to check\n   * @return whether the student can edit the series\n   */\n  canEdit(series) {\n    var result = false;\n\n    if (series != null && series.canEdit) {\n      result = true;\n    }\n\n    return result;\n  };\n\n  /**\n   * Set all the series\n   * @param series an array of series\n   */\n  setSeries(series) {\n    this.series = series;\n  };\n\n  /**\n   * Get all the series\n   * @returns an array of series\n   */\n  getSeries() {\n    return this.series;\n  };\n\n  /**\n   * Set the series at the given index\n   * @param series the series object\n   * @param index the index the series will be placed in\n   */\n  setSeriesByIndex(series, index) {\n\n    if (series != null && index != null) {\n      // set the series in the array of series\n      this.series[index] = series;\n    }\n  }\n\n  /**\n   * Get the series at the given index\n   * @param index the index to get the series at\n   * @returns the series at the given index\n   */\n  getSeriesByIndex(index) {\n    return this.series[index];\n  }\n\n  /**\n   * Set the trials\n   * @param trials the trials\n   */\n  setTrials(trials) {\n    this.trials = trials;\n  }\n\n  /**\n   * Get the trials\n   * @return the trials\n   */\n  getTrials() {\n    return this.trials;\n  }\n\n  /**\n   * Get the index of the trial\n   * @param trial the trial object\n   * @return the index of the trial within the trials array\n   */\n  getTrialIndex(trial) {\n\n    var index = -1;\n\n    if (trial != null) {\n\n      // loop through all the trials\n      for (var t = 0; t < this.trials.length; t++) {\n        var tempTrial = this.trials[t];\n\n        if (trial == tempTrial) {\n          // we have found the trial we are looking for\n          index = t;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Set the active trial\n   * @param index the index of the trial to make active\n   */\n  setActiveTrialByIndex(index) {\n\n    if (index != null) {\n\n      // get the trial\n      var trial = this.trials[index];\n\n      if (trial != null) {\n        // make the trial the active trial\n        this.activeTrial = trial;\n      }\n    }\n  }\n\n  /**\n   * Check whether the student is allowed to edit a given trial\n   * @param trial the trial object to check\n   * @return boolean whether the student can edit the trial\n   */\n  canEditTrial(trial) {\n    let result = false;\n    let series = trial.series;\n\n    for (let i = 0; i < series.length; i++) {\n      let currentSeries = series[i];\n      if (currentSeries.canEdit) {\n        // at least one series in this trial is editable\n        result = true;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Set whether to show the active trial select menu\n   * @return whether to show the active trial select menu\n   */\n  showSelectActiveTrials() {\n    let result = false;\n    let editableTrials = 0;\n    for (let i = 0; i < this.trials.length; i++) {\n      let trial = this.trials[i];\n      if (this.canEditTrial(trial) && trial.show) {\n        editableTrials++;\n        if (editableTrials > 1) {\n          // there are more than one editable trials, so show the menu\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Set the xAxis object\n   * @param xAxis the xAxis object that can be used to render the graph\n   */\n  setXAxis(xAxis) {\n    this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n  };\n\n  /**\n   * Get the xAxis object\n   * @return the xAxis object that can be used to render the graph\n   */\n  getXAxis() {\n    return this.xAxis;\n  };\n\n  /**\n   * Set the yAxis object\n   * @param yAxis the yAxis object that can be used to render the graph\n   */\n  setYAxis(yAxis) {\n    this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n  };\n\n  /**\n   * Get the yAxis object\n   * @return the yAxis object that can be used to render the graph\n   */\n  getYAxis() {\n    return this.yAxis;\n  };\n\n  /**\n   * Set the active series\n   * @param series the series\n   */\n  setActiveSeries(series) {\n    this.activeSeries = series;\n  };\n\n  /**\n   * Set the active series by the index\n   * @param index the index\n   */\n  setActiveSeriesByIndex(index) {\n\n    if (index == null) {\n      // the index is null so we will set the active series to null\n      this.setActiveSeries(null);\n    } else {\n      // get the series at the index\n      var series = this.getSeriesByIndex(index);\n\n      if (series == null) {\n        this.setActiveSeries(null);\n      } else {\n        this.setActiveSeries(series);\n      }\n    }\n  };\n\n  /**\n   * Reset the table data to its initial state from the component content\n   */\n  resetGraph() {\n\n    // reset the series and parameters of the graph\n    this.resetGraphHelper();\n\n    /*\n     * set the flag to add the next component state created in\n     * studentDataChanged() to the undo stack\n     */\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  };\n\n  /**\n   * Reset the series and parameters of the graph\n   */\n  resetGraphHelper() {\n\n    // get the original series from the component content\n    this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n    if (this.componentContent.xAxis != null) {\n      this.setXAxis(this.componentContent.xAxis);\n    }\n\n    if (this.componentContent.yAxis != null) {\n      this.setYAxis(this.componentContent.yAxis);\n    }\n\n    // set the active series to null so that the default series will become selected later\n    this.setActiveSeries(null);\n\n    // set the background image\n    this.backgroundImage = this.componentContent.backgroundImage;\n  }\n\n  /**\n   * Reset the active series\n   */\n  resetSeries() {\n\n    var confirmMessage = '';\n\n    // get the series name\n    var seriesName = this.activeSeries.name;\n\n    if (seriesName == null || seriesName == '') {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheSeries');\n    } else {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheNamedSeries', { seriesName: seriesName });\n    }\n\n    // ask the student if they are sure they want to reset the series\n    var answer = confirm(confirmMessage);\n\n    if (answer) {\n      // the student answer yes to reset the series\n\n      // reset the active series\n      this.resetSeriesHelper();\n    }\n  }\n\n  /**\n   * Reset the active series\n   */\n  resetSeriesHelper() {\n\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      /*\n       * There are connected components so we will get the work from them.\n       * This will actually reset all the series and not just the active\n       * one.\n       */\n      this.newTrial();\n      const isReset = true;\n      this.handleConnectedComponents(isReset);\n    } else {\n      // get the index of the active series\n      var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n      if (activeSeriesIndex != null) {\n\n        // get the original series from the component content\n        var originalSeries = this.componentContent.series[activeSeriesIndex];\n\n        if (originalSeries != null) {\n\n          // make a copy of the series\n          originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n\n          // set the series\n          this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n\n          /*\n           * set the active series index so that the the active series\n           * is the same as before.\n           */\n          this.setActiveSeriesByIndex(activeSeriesIndex);\n\n          if (this.componentContent.xAxis != null) {\n            // reset the x axis\n            this.setXAxis(this.componentContent.xAxis);\n          }\n\n          if (this.componentContent.yAxis != null) {\n            // reset the y axis\n            this.setYAxis(this.componentContent.yAxis);\n          }\n\n          // reset the background image\n          this.backgroundImage = this.componentContent.backgroundImage;\n\n          /*\n           * set the flag to add the next component state created in\n           * studentDataChanged() to the undo stack\n           */\n          this.addNextComponentStateToUndoStack = true;\n          this.studentDataChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.version == null || studentData.version == 1) {\n          // the student data is version 1 which has no trials\n          this.studentDataVersion = 1;\n\n          // populate the student data into the component\n          this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n        } else {\n          // the student data is the newer version that has trials\n\n          this.studentDataVersion = studentData.version;\n\n          if (studentData.trials != null && studentData.trials.length > 0) {\n\n            // make a copy of the trials\n            var trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n\n            // remember the trials\n            this.setTrials(trialsCopy);\n\n            // get the trial to show\n            var activeTrialIndex = studentData.activeTrialIndex;\n\n            if (activeTrialIndex == null) {\n              /*\n               * there is no active trial index so we will show the\n               * last trial\n               */\n\n              if (trialsCopy.length > 0) {\n                //make the last trial the active trial to show\n                this.setActiveTrialByIndex(studentData.trials.length - 1);\n              }\n            } else {\n              // there is an active trial index\n              this.setActiveTrialByIndex(activeTrialIndex);\n            }\n\n            if (this.activeTrial != null && this.activeTrial.series != null) {\n              // set the active trial series to be the series to display\n              this.series = this.activeTrial.series;\n            }\n          }\n        }\n\n        this.setTrialIdsToShow();\n\n        if (studentData.xAxis != null) {\n          this.setXAxis(studentData.xAxis);\n        }\n\n        if (studentData.yAxis != null) {\n          this.setYAxis(studentData.yAxis);\n        }\n\n        this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n        if (studentData.backgroundImage != null) {\n          // set the background from the student data\n          this.backgroundImage = studentData.backgroundImage;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        if (studentData.mouseOverPoints != null &&\n            studentData.mouseOverPoints.length > 0) {\n          this.mouseOverPoints = studentData.mouseOverPoints;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * The active series has changed\n   */\n  activeSeriesChanged() {\n\n    var useTimeoutSetupGraph = true;\n\n    // the student data has changed\n    this.studentDataChanged(useTimeoutSetupGraph);\n\n    // tell the parent node that this component wants to save\n    //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged(useTimeoutSetupGraph) {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.clearSaveText();\n\n    // re-draw the graph\n    this.setupGraph(useTimeoutSetupGraph);\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n\n      if (this.addNextComponentStateToUndoStack) {\n        if (this.previousComponentState != null) {\n          // push the previous component state onto our undo stack\n          this.undoStack.push(this.previousComponentState);\n        }\n\n        /*\n         * Remember this current component state for the next time\n         * studentDataChanged() is called. The next time\n         * studentDataChanged() is called, this will be the previous\n         * component state and we will add it to the undoStack. We do not\n         * want to put the current component state onto the undoStack\n         * because if the student clicks undo and this current component\n         * state is on the top of the stack, the graph won't change.\n         * Basically the undoStack contains the component states from the\n         * current visit except for the current component state.\n         */\n        this.previousComponentState = componentState;\n\n        this.addNextComponentStateToUndoStack = false;\n      }\n\n      // check if a digest is in progress\n      if(!this.$scope.$$phase) {\n        // digest is not in progress so we can force a redraw\n        // TODO GK (from HT) this line was causing a lot of js errors ( $digest already in progress ), so I commented it out\n        // and it still seems to work. Do we need this line?\n        // see here: http://stackoverflow.com/questions/12729122/angularjs-prevent-error-digest-already-in-progress-when-calling-scope-apply\n        //this.$scope.$apply();\n      }\n\n      /*\n       * fire the componentStudentDataChanged event after a short timeout\n       * so that the other component handleConnectedComponentStudentDataChanged()\n       * listeners can initialize before this and are then able to process\n       * this componentStudentDataChanged event\n       */\n      this.$timeout(() => {\n        this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n      }, 100);\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    studentData.version = this.studentDataVersion;\n\n    if (this.studentDataVersion == 1) {\n      // insert the series data\n      studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n    } else {\n      if (this.trials != null) {\n        // make a copy of the trials\n        studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n\n        // remember which trial is being shown\n        var activeTrialIndex = this.getTrialIndex(this.activeTrial);\n        studentData.activeTrialIndex = activeTrialIndex;\n      }\n    }\n\n    /*\n\n    // remove high-charts assigned id's from each series before saving\n    for (var s = 0; s < studentData.series.length; s++) {\n      var series = studentData.series[s];\n      //series.id = null;\n    }\n    */\n\n    // insert the x axis data\n    studentData.xAxis = this.UtilService.makeCopyOfJSONObject(this.getXAxis());\n    /*\n     * The student data plot bands are stored in the trials so we do not\n     * need to save the plot bands in the x axis.\n     */\n    delete studentData.xAxis.plotBands;\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n      /*\n       * There are authored plot bands so we will save those into the\n       * student data since they are not stored in the trials.\n       */\n      studentData.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n    }\n\n    // insert the y axis data\n    studentData.yAxis = this.getYAxis();\n\n    // get the active series index\n    var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n    if (activeSeriesIndex != null) {\n      // set the active series index\n      studentData.activeSeriesIndex = activeSeriesIndex;\n    }\n\n    // get the uploaded file name if any\n    var uploadedFileName = this.getUploadedFileName();\n\n    if (uploadedFileName != null) {\n      // set the uploaded file name\n      studentData.uploadedFileName = uploadedFileName;\n    }\n\n    if (this.backgroundImage != null) {\n      studentData.backgroundImage = this.backgroundImage;\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.mouseOverPoints.length != 0) {\n      studentData.mouseOverPoints = this.mouseOverPoints;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Graph';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      // this component has additional processing functions\n\n      // get the additional processing functions\n      let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n\n      // call all the additional processing functions\n      for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n        let additionalProcessingFunction = additionalProcessingFunctions[i];\n        let defer = this.$q.defer();\n        let promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      /*\n       * we don't need to perform any additional processing so we can resolve\n       * the promise immediately\n       */\n      deferred.resolve(componentState);\n    }\n  }\n\n  /**\n   * Check whether we need to show the prompt\n   * @return whether to show the prompt\n   */\n  showPrompt() {\n    var show = false;\n\n    if (this.isPromptVisible) {\n      show = true;\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to show the reset graph button\n   * @return whether to show the reset graph button\n   */\n  showResetGraphButton() {\n    var show = false;\n\n    if (this.isResetGraphButtonVisible) {\n      show = true;\n    }\n\n    return show;\n  };\n\n  /**\n   * Check whether we need to show the reset series button\n   * @return whether to show the reset series button\n   */\n  showResetSeriesButton() {\n    var show = false;\n\n    if (this.isResetSeriesButtonVisible) {\n      show = true;\n    }\n\n    return show;\n  }\n\n  /**\n   * Get the index of a series\n   * @param series the series\n   * @return the index of the series\n   */\n  getSeriesIndex(series) {\n    var index = null;\n\n    if (series != null) {\n\n      // get all of the series\n      var seriesArray = this.getSeries();\n\n      if (seriesArray != null) {\n\n        // loop through all the series\n        for (var s = 0; s < seriesArray.length; s++) {\n          var tempSeries = seriesArray[s];\n\n          // check if this is the series we are looking for\n          if (series == tempSeries) {\n            index = s;\n            break;\n          }\n        }\n      }\n    }\n\n    return index;\n  };\n\n  /**\n   * Get a series by the index\n   * @param index the index of the series in the series array\n   * @returns the series object or null if not found\n   */\n  getSeriesByIndex(index) {\n    var series = null;\n\n    if (index != null && index >= 0) {\n      // get all of the series\n      var seriesArray = this.getSeries();\n\n      if (seriesArray != null && seriesArray.length > 0) {\n        // get the series at the index\n        series = seriesArray[index];\n      }\n    }\n\n    return series;\n  }\n\n  /**\n   * Get a series by the id\n   * @param id the id of the series\n   * @return the series object with the given id\n   */\n  getSeriesById(id) {\n    var seriesArray = this.getSeries();\n\n    for (let series of seriesArray) {\n      if (series.id == id) {\n        return series;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the trials from classmates\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Whether to get the work only from the\n   * period the student is in or from all the periods. The possible values\n   * are \"period\" or \"class\".\n   * @return a promise that will return all the trials from the classmates\n   */\n  getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource) {\n\n    var deferred = this.$q.defer();\n\n    // make a request for the classmate student work\n    this.StudentDataService.getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource).then((componentStates) => {\n\n      var promises = [];\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n\n          // get the trials from the component state\n          promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n        }\n      }\n\n      // wait for all the promises of trials\n      this.$q.all(promises).then((promiseResults) => {\n\n        var mergedTrials = [];\n\n        // loop through all the promise results\n        for (var p = 0; p < promiseResults.length; p++) {\n\n          // get the trials from one of the promise results\n          var trials = promiseResults[p];\n\n          // loop through all the trials\n          for (var t = 0; t < trials.length; t++) {\n            var trial = trials[t];\n\n            // add the trial to our merged trials\n            mergedTrials.push(trial);\n          }\n        }\n\n        // return the merged trials\n        deferred.resolve(mergedTrials);\n      });\n    });\n\n    return deferred.promise;\n  }\n\n  /**\n   * Get the trials from a component state.\n   * Note: The code in this function doesn't actually require usage of a\n   * promise. It's just the code that calls this function that utilizes\n   * promise functionality. It's possible to refactor the code so that this\n   * function doesn't need to return a promise.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param componentState the component state\n   * @return a promise that will return the trials from the component state\n   */\n  getTrialsFromComponentState(nodeId, componentId, componentState) {\n    var deferred = this.$q.defer();\n\n    var mergedTrials = [];\n\n    // get the step number and title e.g. \"1.3: Explore the evidence\"\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.version == 1) {\n          /*\n           * we are using the old student data format\n           * that can contain multiple series\n           */\n\n          var series = studentData.series;\n\n          // create a new trial and put the series into it\n          var newTrial = {};\n          newTrial.id = this.UtilService.generateKey(10);\n          newTrial.name = nodePositionAndTitle;\n          newTrial.show = true;\n          newTrial.series = series;\n          mergedTrials.push(newTrial);\n        } else {\n          /*\n           * we are using the new student data format\n           * that can contain multiple trials\n           */\n\n          // get the trials\n          var trials = studentData.trials;\n\n          if (trials != null) {\n\n            /*\n             * loop through all the trials and add them\n             * to our array of merged trials\n             */\n            for (var t = 0; t < trials.length; t++) {\n              var trial = trials[t];\n              // make a copy of the trial\n              newTrial = this.UtilService.makeCopyOfJSONObject(trial);\n\n              // set the name of the trial to be the step number and title\n              newTrial.name = nodePositionAndTitle;\n              newTrial.show = true;\n\n              mergedTrials.push(newTrial);\n            }\n          }\n        }\n      }\n    }\n\n    deferred.resolve(mergedTrials);\n\n    return deferred.promise;\n  }\n\n  /**\n   * Handle importing external data (we only support csv for now)\n   * @param studentAsset CSV file student asset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n\n          this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n            var rowData = this.StudentDataService.CSVToArray(assetContent);\n            var params = {};\n            params.skipFirstRow = true;  // first row contains header, so ignore it\n            params.xColumn = 0;      // assume (for now) x-axis data is in first column\n            params.yColumn = 1;      // assume (for now) y-axis data is in second column\n\n            var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n            // get the index of the series that we will put the data into\n            var seriesIndex = this.series.length;  // we're always appending a new series\n\n            if (seriesIndex != null) {\n\n              // get the series\n              var series = this.series[seriesIndex];\n\n              if (series == null) {\n                // the series is null so we will create a series\n                series = {};\n                series.name = copiedAsset.fileName;\n                series.color = this.seriesColors[seriesIndex];\n                series.marker = {\n                  'symbol': this.seriesMarkers[seriesIndex]\n                };\n                series.regression = false;\n                series.regressionSettings = {};\n                series.canEdit = false;\n                this.series[seriesIndex] = series;\n              }\n\n              // set the data into the series\n              series.data = seriesData;\n            }\n\n            // the graph has changed\n            this.isDirty = true;\n\n            /*\n             * set the flag to add the next component state created in\n             * studentDataChanged() to the undo stack\n             */\n            this.addNextComponentStateToUndoStack = true;\n            this.studentDataChanged();\n          });\n        }\n      });\n    }\n  };\n\n  /**\n   * Convert the table data into series data\n   * @param componentState the component state to get table data from\n   * @param params (optional) the params to specify what columns\n   * and rows to use from the table data\n   */\n  convertRowDataToSeriesData(rows, params) {\n    var data = [];\n\n    /*\n     * the default is set to not skip the first row and for the\n     * x column to be the first column and the y column to be the\n     * second column\n     */\n    var skipFirstRow = false;\n    var xColumn = 0;\n    var yColumn = 1;\n\n    if (params != null) {\n\n      if (params.skipFirstRow != null) {\n        // determine whether to skip the first row\n        skipFirstRow = params.skipFirstRow;\n      }\n\n      if (params.xColumn != null) {\n        // get the x column\n        xColumn = params.xColumn;\n      }\n\n      if (params.yColumn != null) {\n        // get the y column\n        yColumn = params.yColumn;\n      }\n    }\n\n    // loop through all the rows\n    for (var r = 0; r < rows.length; r++) {\n\n      if (skipFirstRow && r === 0) {\n        // skip the first row\n        continue;\n      }\n\n      // get the row\n      var row = rows[r];\n\n      // get the x cell and y cell from the row\n      var xCell = row[xColumn];\n      var yCell = row[yColumn];\n\n      if (xCell != null && yCell != null) {\n\n        /*\n         * the point array where the 0 index will contain the\n         * x value and the 1 index will contain the y value\n         */\n        var point = [];\n\n        // get the x text and y text\n        var xText = null;\n        if (typeof(xCell) === 'object' && xCell.text) {\n          xText = xCell.text;\n        }\n\n        var yText = null;\n        if (typeof(yCell) === 'object' && yCell.text) {\n          yText = yCell.text;\n        }\n\n        if (xText != null &&\n          xText !== '' &&\n          yText != null &&\n          yText !== '') {\n\n          // try to convert the text values into numbers\n          var xNumber = Number(xText);\n          var yNumber = Number(yText);\n\n          if (!isNaN(xNumber)) {\n            /*\n             * we were able to convert the value into a\n             * number so we will add that\n             */\n            point.push(xNumber);\n          } else {\n            /*\n             * we were unable to convert the value into a\n             * number so we will add the text\n             */\n            point.push(xText);\n          }\n\n          if (!isNaN(yNumber)) {\n            /*\n             * we were able to convert the value into a\n             * number so we will add that\n             */\n            point.push(yNumber);\n          } else {\n            /*\n             * we were unable to convert the value into a\n             * number so we will add the text\n             */\n            point.push(yText);\n          }\n\n          // add the point to our data\n          data.push(point);\n        }\n      }\n    }\n\n    return data;\n  };\n\n  /**\n   * Set the series id for each series\n   * @param allSeries an array of series\n   */\n  setSeriesIds(allSeries) {\n    var usedSeriesIds = [];\n\n    if (allSeries != null) {\n\n      /*\n       * loop through all the series to get the existing ids that are\n       * being used\n       */\n      for (var x = 0; x < allSeries.length; x++) {\n        var series = allSeries[x];\n\n        // get the series id if it is set\n        var seriesId = series.id;\n\n        if (seriesId != null) {\n          // remember the series id\n          usedSeriesIds.push(seriesId);\n        }\n      }\n\n      // loop through all the series\n      for (var y = 0; y < allSeries.length; y++) {\n        var series = allSeries[y];\n\n        // get the series id if it is set\n        var seriesId = series.id;\n\n        if (seriesId == null) {\n          // the series doesn't have a series id so we will give it one\n          var nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n          series.id = nextSeriesId;\n          usedSeriesIds.push(nextSeriesId);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the next available series id\n   * @param usedSeriesIds an array of used series ids\n   * @returns the next available series id\n   */\n  getNextSeriesId(usedSeriesIds) {\n    var nextSeriesId = null;\n    var currentSeriesNumber = 0;\n    var foundNextSeriesId = false;\n\n    while (!foundNextSeriesId) {\n\n      // get a temp series id\n      var tempSeriesId = 'series-' + currentSeriesNumber;\n\n      // check if the temp series id is used\n      if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n        // temp series id has not been used\n\n        nextSeriesId = tempSeriesId;\n\n        foundNextSeriesId = true;\n      } else {\n        /*\n         * the temp series id has been used so we will increment the\n         * counter to try another series id the next iteration\n         */\n        currentSeriesNumber++;\n      }\n    }\n\n    return nextSeriesId;\n  };\n\n  /**\n   * Handle the delete key press\n   */\n  handleDeleteKeyPressed() {\n\n    // get the active series\n    var series = this.activeSeries;\n\n    // check if the student is allowed to edit the the active series\n    if (series != null && this.canEdit(series)) {\n\n      // get the chart\n      var chart = $('#' + this.chartId).highcharts();\n\n      // get the selected points\n      var selectedPoints = chart.getSelectedPoints();\n\n      var index = null;\n\n      if (selectedPoints != null) {\n\n        // an array to hold the indexes of the selected points\n        var indexes = [];\n\n        // get the series data\n        var data = series.data;\n\n        // loop through all the selected points\n        for (var x = 0; x < selectedPoints.length; x++) {\n\n          // get a selected point\n          var selectedPoint = selectedPoints[x];\n\n          // get the index of the selected point\n          index = selectedPoint.index;\n\n          // get the data point from the series data\n          var dataPoint = data[index];\n\n          if (dataPoint != null) {\n\n            /*\n             * make sure the x and y values match the selected point\n             * that we are going to delete\n             */\n            if (dataPoint[0] == selectedPoint.x ||\n              dataPoint[1] == selectedPoint.y) {\n\n              // the x and y values match\n\n              // add the index to our array\n              indexes.push(index);\n            }\n          }\n        }\n\n        /*\n         * order the array from largest to smallest. we are doing this\n         * so that we delete the points from the end first. if we delete\n         * points starting from lower indexes first, then the indexes\n         * will shift and we will end up deleting the wrong points.\n         */\n        indexes.sort().reverse();\n\n        // loop through all the indexes and remove them from the series data\n        for (var i = 0; i < indexes.length; i++) {\n\n          index = indexes[i];\n\n          if (data != null) {\n            data.splice(index, 1);\n          }\n        }\n\n        /*\n         * set the flag to add the next component state created in\n         * studentDataChanged() to the undo stack\n         */\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  };\n\n  /**\n   * Create a new series object\n   * @returns a new series object\n   */\n  createNewSeries() {\n    var newSeries = {};\n\n    newSeries.name = '';\n    newSeries.data = [];\n\n    var marker = {};\n    marker.symbol = 'circle';\n    newSeries.marker = marker;\n\n    newSeries.regression = false;\n    newSeries.regressionSettings = {};\n    newSeries.canEdit = true;\n\n    return newSeries;\n  }\n\n  /**\n   * Check if a series is the active series. There can only be on active series.\n   * @param series the series\n   * @returns whether the series is the active series\n   */\n  isActiveSeries(series) {\n\n    // get the series index\n    var seriesIndex = this.getSeriesIndex(series);\n\n    // check if the series is the active series\n    var result = this.isActiveSeriesIndex(seriesIndex);\n\n    return result;\n  }\n\n  /**\n   * Check if a series index is the active series index. There can only be\n   * one active series.\n   * @param seriesIndex the series index\n   * @returns whether the series is the active series\n   */\n  isActiveSeriesIndex(seriesIndex) {\n\n    var result = false;\n\n    if (this.series != null && this.series.indexOf(this.activeSeries) === seriesIndex) {\n      // the series is the active series\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Whether to show the select series input\n   * @returns whether to show the select series input\n   */\n  showSelectSeries() {\n    var show = false;\n\n    if (this.trialIdsToShow.length && this.hasEditableSeries() && this.isSelectSeriesVisible && this.series.length > 1) {\n      /*\n       * we are in a mode the shows the select series input and there is\n       * more than one series\n       */\n      show = true;\n    }\n\n    return show;\n  }\n\n  /**\n   * The New Trial button was clicked by the student\n   */\n  newTrialButtonClicked() {\n\n    // create a new trial\n    this.newTrial();\n\n    /*\n     * set the flag to add the next component state created in\n     * studentDataChanged() to the undo stack\n     */\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  /**\n   * Create a new trial\n   */\n  newTrial() {\n\n    // get the current number of trials\n    var trialCount = this.trials.length;\n\n    /*\n     * get the index of the active series so that we can make the series\n     * at the given index active in the new trial\n     */\n    var activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n\n    // make a copy of the original series (most likely blank with no points)\n    var series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n\n    // regex to find the trial number from the trial names\n    var trialNameRegex = /Trial (\\d*)/;\n    var trialNumbers = [];\n\n    // loop through all the trials\n    for (var t = 0; t < this.trials.length; t++) {\n      var tempTrial = this.trials[t];\n\n      if (tempTrial != null) {\n        // get a trial name\n        var tempTrialName = tempTrial.name;\n\n        // run the regex matcher on the trial name\n        var match = trialNameRegex.exec(tempTrialName);\n\n        if (match != null && match.length > 0) {\n          // we have found a trial name that looks like \"Trial X\"\n\n          /*\n           * get the trial number e.g. if the trial name is \"Trial 3\",\n           * the trial number is 3\n           */\n          var tempTrialNumber = match[1];\n\n          if (tempTrialNumber != null) {\n            /*\n             * get the number e.g. if the trial name is \"Trial 2\",\n             * the trial number is 2\n             */\n            trialNumbers.push(parseInt(tempTrialNumber));\n          }\n        }\n      }\n    }\n\n    // sort the trial numbers from smallest to largest\n    trialNumbers.sort();\n\n    var maxTrialNumber = 0;\n\n    if (trialNumbers.length > 0) {\n      // get the highest trial number\n      maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n    }\n\n    if (this.hideAllTrialsOnNewTrial) {\n      // we only want to show the latest trial\n\n      // loop through all the existing trials and hide them\n      for (var t = 0; t < this.trials.length; t++) {\n        var tempTrial = this.trials[t];\n\n        if (tempTrial != null) {\n          tempTrial.show = false;\n        }\n      }\n    }\n\n    // make a new trial with a trial number one larger than the existing max\n    var trial = {};\n    trial.name = this.$translate('graph.trial') + ' ' + (maxTrialNumber + 1);\n    trial.series = series;\n    trial.show = true;\n    trial.id = this.UtilService.generateKey(10);\n\n    // add the trial to the array of trials\n    this.trials.push(trial);\n\n    // set the new trial to be the active trial\n    this.activeTrial = trial;\n\n    // set the series to be displayed\n    this.series = series;\n\n    if (this.activeSeries == null) {\n      /*\n       * there was no previous active series so we will set the active\n       * series to the first editable series or if there are no editable\n       * series, set the active series to the first series\n       */\n      this.setDefaultActiveSeries();\n    } else {\n      /*\n       * set the active series to the same series at the index that was\n       * previously active\n       */\n      this.setActiveSeriesByIndex(activeSeriesIndex);\n    }\n\n    this.setTrialIdsToShow();\n  }\n\n  /**\n   * Delete a trial\n   * @param trialIndex the index (in the trials array) of the trial to delete\n   */\n  deleteTrial(trialIndex) {\n\n    if (trialIndex == null) {\n      trialIndex = this.trials.indexOf(this.activeTrial);\n    }\n\n    if (trialIndex != null && trialIndex != -1) {\n\n      // get the trial to remove\n      var trialToRemove = this.trials[trialIndex];\n\n      // get the trial id of the trial to remove\n      var trialToRemoveId = trialToRemove.id;\n\n      // remove the trial from the array of trials\n      this.trials.splice(trialIndex, 1);\n\n      // remove the trial id from the trial ids to show array\n      for (var t = 0; t < this.trialIdsToShow.length; t++) {\n        if (trialToRemoveId == this.trialIdsToShow[t]) {\n          // remove the trial id\n          this.trialIdsToShow.splice(t, 1);\n\n          /*\n           * move the counter back one because we have just removed\n           * an element from the array. a trial id should never show\n           * up more than once in the trialIdsToShow array but we\n           * will go through the whole array just to be safe.\n           */\n          t--;\n        }\n      }\n\n      if (this.trials.length == 0) {\n        // there are no more trials so we will create a new empty trial\n        this.newTrial();\n\n        // reset the axis limits\n        this.setXAxis(this.componentContent.xAxis);\n        this.setYAxis(this.componentContent.yAxis);\n      } else if (this.trials.length > 0) {\n        if (trialToRemove == this.activeTrial) {\n          // remove the references to the trial that we are deleting\n          this.activeTrial = null;\n          this.activeSeries = null;\n          this.series = null;\n\n          // make the highest shown trial the active trial\n          var highestTrialIndex = null;\n          var highestTrial = null;\n\n          // loop through the shown trials\n          for (var t = 0; t < this.trialIdsToShow.length; t++) {\n            var trialId = this.trialIdsToShow[t];\n\n            // get one of the shown trials\n            var trial = this.getTrialById(trialId);\n\n            if (trial != null) {\n\n              // get the trial index\n              var trialIndex = this.getTrialIndex(trial);\n\n              if (trialIndex != null) {\n\n                if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n                  /*\n                   * this is the highest trial we have seen so\n                   * far so we will remember it\n                   */\n                  highestTrialIndex = trialIndex;\n                  highestTrial = trial;\n                }\n              }\n            }\n          }\n\n          if (highestTrial != null) {\n            /*\n             * get the index of the active series so that we can set the\n             * same series to be active in the new active trial\n             */\n            var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n            // set the highest shown trial to be the active trial\n            this.activeTrial = highestTrial;\n\n            // set the series\n            this.setSeries(this.activeTrial.series);\n\n            if (seriesIndex != null) {\n              // set the active series\n              this.setActiveSeriesByIndex(seriesIndex);\n            }\n          }\n        }\n      }\n\n      this.setTrialIdsToShow();\n    }\n\n    /*\n     * set the flag to add the next component state created in\n     * studentDataChanged() to the undo stack\n     */\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n\n    // update the selected trial text\n    this.selectedTrialsText = this.getSelectedTrialsText();\n\n    // tell the parent node that this component wants to save\n    //this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  /**\n   * The student has selected a different trial to edit\n   */\n  activeTrialChanged() {\n\n    // get the active trial\n    var activeTrial = this.activeTrial;\n\n    if (activeTrial != null) {\n\n      // get the index of the active series\n      var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n      if (seriesIndex == null) {\n        // default the index to 0\n        seriesIndex = 0;\n      }\n\n      // get the series from the trial\n      var series = activeTrial.series;\n\n      // set the series to be displayed\n      this.series = series;\n\n      /*\n       * set the active series index to the same series index of the\n       * previously active series\n       */\n      this.setActiveSeriesByIndex(seriesIndex);\n\n      /*\n       * set the flag to add the next component state created in\n       * studentDataChanged() to the undo stack\n       */\n      this.addNextComponentStateToUndoStack = true;\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * The student has selected different trials to view\n   */\n  trialIdsToShowChanged() {\n    // get the trial indexes to show\n    let trialIdsToShow = this.trialIdsToShow;\n    let trials = this.trials;\n\n    // update the trials\n    for (let i = 0; i < trials.length; i++) {\n      let trial = trials[i];\n      let id = trial.id;\n\n      if (trialIdsToShow.indexOf(id) > -1) {\n        trial.show = true;\n      } else {\n        trial.show = false;\n\n        if (this.activeTrial != null && this.activeTrial.id == id) {\n          // the active trial is no longer shown\n          this.activeTrial = null;\n          this.activeSeries = null;\n          this.series = null;\n        }\n      }\n    }\n\n    // get the latest trial that was checked and make it the active trial\n    if (this.trialIdsToShow.length > 0) {\n\n      // get the latest trial that was checked\n      var lastShownTrialId = this.trialIdsToShow[this.trialIdsToShow.length - 1];\n      var lastShownTrial = this.getTrialById(lastShownTrialId);\n\n      if (lastShownTrial != null) {\n\n        /*\n         * get the index of the active series so that we can set the\n         * same series to active in the new active trial\n         */\n        var seriesIndex = this.getSeriesIndex(this.activeSeries);\n\n        // set the last shown trial to be the active trial\n        this.activeTrial = lastShownTrial;\n\n        // set the series\n        this.setSeries(this.activeTrial.series);\n\n        if (seriesIndex != null) {\n          // set the active series\n          this.setActiveSeriesByIndex(seriesIndex);\n        }\n      }\n    }\n\n    // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n    // TODO: figure out why this check is sometimes necessary and remove\n    for (let a = 0; a < trialIdsToShow.length; a++) {\n      let idToShow = trialIdsToShow[a];\n      if (!this.getTrialById(idToShow)) {\n        trialIdsToShow.splice(a, 1);\n      }\n    }\n\n    /*\n     * Make sure the trialIdsToShow has actually changed. Sometimes\n     * trialIdsToShowChanged() gets called even if trialIdsToShow\n     * does not change because the model for the trial checkbox\n     * select is graphController.trials. This means trialIdsToShowChanged()\n     * will be called when we replace the trials increateComponentState()\n     * but this does not necessarily mean the trialIdsToShow has changed.\n     * We do this check to minimize the number of times studentDataChanged()\n     * is called.\n     */\n    if (!this.UtilService.arraysContainSameValues(this.previousTrialIdsToShow, trialIdsToShow)) {\n      // update the trialIdsToShow\n      this.trialIdsToShow = trialIdsToShow;\n      this.studentDataChanged();\n    }\n\n    /*\n     * Remember the trial ids to show so we can use it to make sure the\n     * trialIdsToShow actually change the next time trialIdsToShowChanged()\n     * is called.\n     */\n    this.previousTrialIdsToShow = this.UtilService.makeCopyOfJSONObject(this.trialIdsToShow);\n\n    // update the selected trial text\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  };\n\n\n\n  /**\n   * Set which trials are selected in the trial select model\n   */\n  setTrialIdsToShow() {\n    let idsToShow = [];\n\n    let trials = this.trials;\n    for (let i = 0; i < trials.length; i++) {\n      let trial = trials[i];\n      if (trial.show) {\n        // trial is visible on graph, so add it to the ids to show model\n        let id = trial.id;\n        idsToShow.push(id);\n      }\n    }\n\n    this.trialIdsToShow = idsToShow;\n  };\n\n  /**\n   * Get the text to show in the trials select dropdown\n   */\n  getSelectedTrialsText() {\n    if (this.trialIdsToShow.length === 1) {\n      let id = this.trialIdsToShow[0];\n      let name = this.getTrialById(id).name;\n      return name;\n    } else if (this.trialIdsToShow.length > 1) {\n      return this.trialIdsToShow.length + ' ' + this.$translate('graph.trialsShown');\n    } else {\n      return this.$translate('graph.selectTrialsToShow');\n    }\n  };\n\n  /**\n   * Process the student data that we have received from a connected component.\n   * @param studentData The student data from a connected component.\n   * @param params The connected component params.\n   */\n  processConnectedComponentStudentData(studentData, params) {\n    if (params.fields == null) {\n      /*\n       * we do not need to look at specific fields so we will directly\n       * parse the the trial data from the student data.\n       */\n      this.parseLatestTrial(studentData, params);\n    } else {\n      // we need to process specific fields in the student data\n      let fields = params.fields;\n      for (let field of fields) {\n        let name = field.name;\n        let when = field.when;\n        let action = field.action;\n        let firstTime = false;\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            // TODO\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            // TODO\n          } else if (action == 'read') {\n            this.readConnectedComponentFieldFromStudentData(studentData, params, name);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the field from the new student data and perform any processing on our\n   * existing student data based upon the new student data.\n   * @param studentData The new student data from the connected component.\n   * @param params The connected component params.\n   * @param name The field name to read and process.\n   */\n  readConnectedComponentFieldFromStudentData(studentData, params, name) {\n    if (name == 'selectedCells') {\n      // only show the trials that are specified in the selectedCells array\n      let selectedCells = studentData[name];\n      let selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n      for (let trial of this.trials) {\n        if (selectedTrialIds.includes(trial.id)) {\n          trial.show = true;\n        } else {\n          trial.show = false;\n        }\n      }\n    } else if (name == 'trial') {\n      this.parseLatestTrial(studentData, params);\n    } else if (name == 'trialIdsToDelete') {\n      this.deleteTrialsByTrialId(studentData.trialIdsToDelete);\n    }\n  }\n\n  /**\n   * Delete the trials\n   * @param trialIdsToDelete An array of trial ids to delete\n   */\n  deleteTrialsByTrialId(trialIdsToDelete) {\n    if (trialIdsToDelete != null) {\n      for (let trialIdToDelete of trialIdsToDelete) {\n        this.deleteTrialId(trialIdToDelete);\n      }\n    }\n  }\n\n  /**\n   * Delete a trial\n   * @param trialId The trial id string to delete\n   */\n  deleteTrialId(trialId) {\n    for (let t = 0; t < this.trials.length; t++) {\n      let trial = this.trials[t];\n      if (trial.id == trialId) {\n        this.trials.splice(t, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Parse the latest trial and set it into the component\n   * @param studentData the student data object that has a trials field\n   * @param params (optional) parameters that specify what to use from the\n   * student data\n   */\n  parseLatestTrial(studentData, params) {\n\n    if (studentData != null) {\n\n      var latestStudentDataTrial = null;\n\n      if (studentData.trial != null) {\n        // the student data only has one trial\n        latestStudentDataTrial = studentData.trial;\n      }\n\n      if (studentData.trials != null && studentData.trials.length > 0) {\n        // the student data has an array of trials\n        latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n      }\n\n      if (latestStudentDataTrial != null) {\n\n        // get the latest student data trial id\n        var latestStudentDataTrialId = latestStudentDataTrial.id;\n\n        /*\n         * remove the first default trial that is automatically created\n         * when the student first visits the component otherwise there\n         * will be a blank trial.\n         */\n        if (this.trials.length > 0) {\n\n          // get the first trial\n          var firstTrial = this.trials[0];\n\n          if (firstTrial != null) {\n\n            /*\n             * check if the trial has any series. if the trial doesn't\n             * have any series it means it was automatically created by\n             * the component.\n             */\n            if (firstTrial.series == null ||\n                firstTrial.series.length == 0 ||\n                (firstTrial.series.length == 1 && !firstTrial.series[0].data.length)) {\n              if (firstTrial.id == null || firstTrial.id !== latestStudentDataTrialId) {\n                // delete the first trial\n                this.trials.shift();\n              }\n            }\n          }\n        }\n\n        // get the trial with the given trial id\n        var latestTrial = this.getTrialById(latestStudentDataTrialId);\n\n        if (latestTrial == null) {\n          /*\n           * we did not find a trial with the given id which means\n           * this is a new trial\n           */\n\n          if (this.hideAllTrialsOnNewTrial) {\n            // we only show the latest trial when a new trial starts\n\n            // loop through all the existing trials and hide them\n            for (var t = 0; t < this.trials.length; t++) {\n              var tempTrial = this.trials[t];\n\n              if (tempTrial != null) {\n                tempTrial.show = false;\n              }\n            }\n          }\n\n          // create the new trial\n          latestTrial = {};\n\n          latestTrial.id = latestStudentDataTrialId;\n\n          latestTrial.show = true;\n\n          this.setXAxis(this.componentContent.xAxis);\n          this.setYAxis(this.componentContent.yAxis);\n\n          // add the trial to the array of trials\n          this.trials.push(latestTrial);\n        }\n\n        if (latestStudentDataTrial.name != null) {\n\n          // set the trial name\n          latestTrial.name = latestStudentDataTrial.name;\n        }\n\n        if (latestStudentDataTrial.series != null) {\n\n          // set the trial series\n          latestTrial.series = [];\n\n          var tempSeries = latestStudentDataTrial.series;\n\n          if (tempSeries != null) {\n\n            // loop through all the series in the trial\n            for (var s = 0; s < tempSeries.length; s++) {\n\n              /*\n               * check if there are any params. if series numbers\n               * are specified in the params, we will only use\n               * those series numbers.\n               */\n              if (params == null ||\n                  params.seriesNumbers == null ||\n                  params.seriesNumbers.length == 0 ||\n                  (params.seriesNumbers != null && params.seriesNumbers.indexOf(s) != -1)) {\n\n                // get a single series\n                var singleSeries = tempSeries[s];\n\n                if (singleSeries != null) {\n\n                  // get the series name and data\n                  var seriesName = singleSeries.name;\n                  var seriesData = singleSeries.data;\n                  var seriesColor = singleSeries.color;\n                  var allowPointMouseOver = singleSeries.allowPointMouseOver;\n                  var marker = singleSeries.marker;\n                  var dashStyle = singleSeries.dashStyle;\n\n                  // make a series object\n                  var newSeries = {};\n                  newSeries.name = seriesName;\n                  newSeries.data = seriesData;\n                  newSeries.color = seriesColor;\n                  newSeries.canEdit = false;\n                  newSeries.allowPointSelect = false;\n\n                  if (marker != null) {\n                    newSeries.marker = marker;\n                  }\n\n                  if (dashStyle != null) {\n                    newSeries.dashStyle = dashStyle;\n                  }\n\n                  if (allowPointMouseOver != null) {\n                    newSeries.allowPointMouseOver = allowPointMouseOver;\n                  }\n\n                  // add the series to the trial\n                  latestTrial.series.push(newSeries);\n\n                  if (params.highlightLatestPoint) {\n                    this.$timeout(() => {\n                      //this.showTooltipOnX(studentData.trial.id, studentData.showTooltipOnX);\n                      this.highlightPointOnX(studentData.trial.id, studentData.xPointToHighlight);\n                    }, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (latestStudentDataTrial.xAxis != null &&\n            latestStudentDataTrial.xAxis.plotBands != null) {\n          if (latestTrial.xAxis == null) {\n            latestTrial.xAxis = {};\n          }\n          latestTrial.xAxis.plotBands = latestStudentDataTrial.xAxis.plotBands;\n        }\n      }\n\n      if (this.trials.length > 0) {\n        // make the last trial the active trial\n        this.activeTrial = this.trials[this.trials.length - 1];\n        this.activeTrial.show = true;\n      }\n\n      if (studentData.xPlotLine != null) {\n        this.showXPlotLine(studentData.xPlotLine);\n      }\n\n      this.setTrialIdsToShow();\n\n      // redraw the graph so that the active trial gets displayed\n      this.activeTrialChanged();\n    }\n  }\n\n  /**\n   * Get the trial by id\n   * @param id the trial id\n   * @returns the trial with the given id or null\n   */\n  getTrialById(id) {\n\n    var trial = null;\n\n    if (id != null) {\n\n      // loop through all the trials\n      for (var t = 0; t < this.trials.length; t++) {\n        var tempTrial = this.trials[t];\n\n        if (tempTrial != null && tempTrial.id == id) {\n          // we have found the trial with the id we want\n          trial = tempTrial;\n          break;\n        }\n      }\n    }\n\n    return trial;\n  }\n\n  /**\n   * Check if there is an editable series\n   * @return whether there is an editable series\n   */\n  hasEditableSeries() {\n\n    var result = false;\n\n    // get the array of series\n    var series = this.getSeries();\n\n    if (series != null) {\n\n      // loop through all the lines\n      for (var s = 0; s < series.length; s++) {\n        var tempSeries = series[s];\n\n        if (tempSeries != null) {\n\n          if (tempSeries.canEdit) {\n            // this line can be edited\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Update the x and y axis min and max values if necessary to make sure\n   * all points are visible in the graph view.\n   * @param series the an array of series\n   * @param xAxis the x axis object\n   * @param yAxis the y axis object\n   */\n  updateMinMaxAxisValues(series, xAxis, yAxis) {\n\n    // get the min and max x and y values\n    var minMaxValues = this.getMinMaxValues(series);\n\n    if (minMaxValues != null) {\n\n      if (xAxis != null && !xAxis.locked) {\n        if (minMaxValues.xMin < xAxis.min) {\n          /*\n           * there is a point that has a smaller x value than the\n           * specified x axis min. we will remove the min value from\n           * the xAxis object so that highcharts will automatically\n           * set the min x value automatically\n           */\n          xAxis.min = null;\n          xAxis.minPadding = 0.2;\n        }\n\n        if (minMaxValues.xMax >= xAxis.max) {\n          /*\n           * there is a point that has a larger x value than the\n           * specified x axis max. we will remove the max value from\n           * the xAxis object so that highcharts will automatically\n           * set the max x value automatically\n           */\n          xAxis.max = null;\n          xAxis.maxPadding = 0.2;\n        }\n      }\n\n      if (yAxis != null && !yAxis.locked) {\n        if (minMaxValues.yMin < yAxis.min) {\n          /*\n           * there is a point that has a smaller y value than the\n           * specified y axis min. we will remove the min value from\n           * the yAxis object so that highcharts will automatically\n           * set the min y value automatically\n           */\n          yAxis.min = null;\n          yAxis.minPadding = 0.2;\n        }\n\n        if (minMaxValues.yMax >= yAxis.max) {\n          /*\n           * there is a point that has a larger y value than the\n           * specified y axis max. we will remove the max value from\n           * the yAxis object so that highcharts will automatically\n           * set the max y value automatically\n           */\n          yAxis.max = null;\n          yAxis.maxPadding = 0.2;\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the min and max x and y values\n   * @param series an array of series\n   * @returns an object containing the min and max x and y values from the\n   * series data\n   */\n  getMinMaxValues(series) {\n\n    var result = {};\n    var xMin = 0;\n    var xMax = 0;\n    var yMin = 0;\n    var yMax = 0;\n\n    if (series != null) {\n\n      // loop through all the series\n      for (var s = 0; s < series.length; s++) {\n\n        // get a single series\n        var tempSeries = series[s];\n\n        if (tempSeries != null) {\n\n          // get the data from the single series\n          var data = tempSeries.data;\n\n          if (data != null) {\n\n            // loop through all the data points in the single series\n            for (var d = 0; d < data.length; d++) {\n              var tempData = data[d];\n\n              var tempX = null;\n              var tempY = null;\n\n              if (tempData != null) {\n                if (tempData.constructor.name == 'Object') {\n                  /*\n                   * the element is an object so we will get\n                   * the x and y fields\n                   */\n                  tempX = tempData.x;\n                  tempY = tempData.y;\n                } else if (tempData.constructor.name == 'Array') {\n                  /*\n                   * the element is an array so we will get\n                   * the first and second element in the array\n                   * which correspond to the x and y values\n                   */\n                  tempX = tempData[0];\n                  tempY = tempData[1];\n                } else if(tempData.constructor.name == 'Number') {\n                  // the element is a number\n                  tempY = tempData;\n                }\n              }\n\n              if (tempX > xMax) {\n                /*\n                 * we have found a data point with a greater x\n                 * value than what we have previously found\n                 */\n                xMax = tempX;\n              }\n\n              if (tempX < xMin) {\n                /*\n                 * we have found a data point with a smaller x\n                 * value than what we have previously found\n                 */\n                xMin = tempX\n              }\n\n              if (tempY > yMax) {\n                /*\n                 * we have found a data point with a greater y\n                 * value than what we have previously found\n                 */\n                yMax = tempY;\n              }\n\n              if (tempY < yMin) {\n                /*\n                 * we have found a data point with a smaller y\n                 * value than what we have previously found\n                 */\n                yMin = tempY;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    result.xMin = xMin;\n    result.xMax = xMax;\n    result.yMin = yMin;\n    result.yMax = yMax;\n\n    return result;\n  }\n\n  /**\n   * Clear all the series ids\n   * @param allSeries all of the series\n   */\n  clearSeriesIds(allSeries) {\n\n    if (allSeries != null) {\n\n      // loop through all the series\n      for (var s = 0; s < allSeries.length; s++) {\n        var tempSeries = allSeries[s];\n\n        if (tempSeries != null) {\n          // clear the id\n          tempSeries.id = null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Snip the drawing by converting it to an image\n   * @param $event the click event\n   */\n  snipDrawing($event) {\n\n    // get the highcharts div\n    var highchartsDiv = angular.element('#' + this.chartId).find('.highcharts-container');\n\n    if (highchartsDiv != null && highchartsDiv.length > 0) {\n      highchartsDiv = highchartsDiv[0];\n\n      // convert the model element to a canvas element\n      html2canvas(highchartsDiv).then((canvas) => {\n\n        // get the canvas as a base64 string\n        var img_b64 = canvas.toDataURL('image/png');\n\n        // get the image object\n        var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n        // create a notebook item with the image populated into it\n        this.NotebookService.addNote($event, imageObject);\n      });\n    }\n  }\n\n  /**\n   * Read a csv string and load the data into the active series\n   * @param csv a csv string\n   */\n  readCSV(csv) {\n\n    if (csv != null) {\n\n      // splite the string into lines\n      var lines = csv.split(/\\r\\n|\\n/);\n\n      // clear the data in the active series\n      this.activeSeries.data = [];\n\n      // loop through all the lines\n      for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n\n        // get a line\n        var line = lines[lineNumber];\n\n        if (line != null) {\n\n          // split the line to get the values\n          var values = line.split(',');\n\n          if (values != null) {\n\n            // get the x and y values\n            var x = parseFloat(values[0]);\n            var y = parseFloat(values[1]);\n\n            if (!isNaN(x) && !isNaN(y)) {\n              // make the data point\n              var dataPoint = [x, y];\n\n              // add the data point to the active series\n              this.activeSeries.data.push(dataPoint);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the uploaded file name\n   * @param fileName the file name\n   */\n  setUploadedFileName(fileName) {\n    this.uploadedFileName = fileName;\n  }\n\n  /**\n   * Get the uploaded file name\n   * @return the uploaded file name\n   */\n  getUploadedFileName() {\n    return this.uploadedFileName;\n  }\n\n  /**\n   * Convert all the data points in the series\n   * @param series convert the data points in the series\n   * @param xAxisType the new x axis type to convert to\n   */\n  convertSeriesDataPoints(series, xAxisType) {\n\n    if (series != null && series.data != null) {\n\n      // get the data from the series\n      var data = series.data;\n\n      // an array to hold the new data after it has been converted\n      var newData = [];\n\n      // loop through all the data points\n      for (var d = 0; d < data.length; d++) {\n        var oldDataPoint = data[d];\n\n        if (xAxisType == null || xAxisType === '' || xAxisType === 'limits') {\n          if (!Array.isArray(oldDataPoint)) {\n            /*\n             * the old data point is not an array which means it is\n             * a single value such as a number\n             */\n            // create an array to hold [x, y]\n            var newDataPoint = [(d + 1), oldDataPoint];\n\n            // add the new data point to our new data array\n            newData.push(newDataPoint);\n          } else {\n            // the old data point is an array so we can re-use it\n            newData.push(oldDataPoint);\n          }\n\n        } else if (xAxisType === 'categories') {\n          if (Array.isArray(oldDataPoint)) {\n            /*\n             * the old data point is an array which is most likely\n             * in the form of [x, y]\n             */\n\n            // get the y value\n            var newDataPoint = oldDataPoint[1];\n\n            if (newDataPoint != null) {\n              // add the y value as the data point\n              newData.push(newDataPoint);\n            }\n          } else {\n            /*\n             * the old data is not an array which means it is a\n             * single value such as a number so we can re-use it\n             */\n            newData.push(oldDataPoint);\n          }\n        }\n      }\n\n      // set the new data into the series\n      series.data = newData;\n    }\n  }\n\n  /**\n   * Round the number according to the authoring settings\n   * @param number a number\n   * @return the rounded number\n   */\n  performRounding(number) {\n\n    if (this.componentContent.roundValuesTo === 'integer') {\n      number = this.roundToNearestInteger(number);\n    } else if (this.componentContent.roundValuesTo === 'tenth') {\n      number = this.roundToNearestTenth(number);\n    } else if (this.componentContent.roundValuesTo === 'hundredth') {\n      number = this.roundToNearestHundredth(number);\n    }\n\n    return number;\n  }\n\n  /**\n   * Round a number to the nearest integer\n   * @param x a number\n   * @return the number rounded to the nearest integer\n   */\n  roundToNearestInteger(x) {\n\n    // make sure x is a number\n    x = parseFloat(x);\n\n    // round to the nearest integer\n    x = Math.round(x);\n\n    return x;\n  }\n\n  /**\n   * Round a number to the nearest tenth\n   * @param x a number\n   * @return the number rounded to the nearest tenth\n   */\n  roundToNearestTenth(x) {\n\n    // make sure x is a number\n    x = parseFloat(x);\n\n    // round the number to the nearest tenth\n    x = Math.round(x * 10) / 10;\n\n    return x;\n  }\n\n  /**\n   * Round a number to the nearest hundredth\n   * @param x a number\n   * @return the number rounded to the nearest hundredth\n   */\n  roundToNearestHundredth(x) {\n\n    // make sure x is a number\n    x = parseFloat(x);\n\n    // round the number to the nearest hundredth\n    x = Math.round(x * 100) / 100;\n\n    return x;\n  }\n\n  /**\n   * Set the active series to the first series that the student can edit\n   * or if there are no series the student can edit, set the active series\n   * to the first series\n   */\n  setDefaultActiveSeries() {\n    if (this.activeSeries == null && this.series.length > 0) {\n      /*\n       * the active series has not been set so we will set the active\n       * series to the first series that the student can edit\n       */\n\n      // loop through all the series\n      for (var s = 0; s < this.series.length; s++) {\n\n        var tempSeries = this.series[s];\n\n        if (tempSeries != null) {\n\n          if (tempSeries.canEdit) {\n            /*\n             * the student can edit this series so we will make it\n             * the active series\n             */\n            this.setActiveSeriesByIndex(s);\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.activeSeries == null && this.series.length > 0) {\n      /*\n       * we did not find any series that the student can edit so we will\n       * just set the active series to be the first series\n       */\n      this.setActiveSeriesByIndex(0);\n    }\n  }\n\n  /**\n   * Set the vertical plot line\n   * @param x the x location to display the vertical plot line\n   */\n  setVerticalPlotLine(x) {\n\n    // make the plot line\n    let plotLine = {\n      color: 'red',\n      width: 2,\n      value: x,\n      zIndex: 5\n    }\n\n    // set the plot line into the plot lines array\n    this.plotLines = [\n      plotLine\n    ];\n\n    /*\n     * Call $apply() so that the red plot line position gets updated. If we\n     * don't call this, the line position won't get updated unless the student\n     * moves their mouse around which forces angular to update.\n     */\n    this.$timeout(() => {\n      this.$scope.$apply();\n    });\n  }\n\n  /**\n   * Import any work we need from connected components\n   * @param {boolean} isReset (optional) Whether this function call was\n   * triggered by the student clicking the reset button.\n   */\n  handleConnectedComponents(isReset) {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var mergedTrials = [];\n\n      /*\n       * This will hold all the promises that will return the trials\n       * that we want. The trials will either be from this student\n       * or from classmates.\n       */\n      var promises = [];\n\n      /*\n       * this will end up containing the background from the last\n       * connected component\n       */\n      var connectedComponentBackgroundImage = null;\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showClassmateWork') {\n            // we are showing classmate work\n\n            if (this.ConfigService.isPreview()) {\n              /*\n               * we are in preview mode so we will just get the\n               * work for this student and show it\n               */\n\n              // get the latest component state from the component\n              var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n              // get the trials from the component state\n              promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n\n              // we are showing work so we will not allow the student to edit it\n              this.isDisabled = true;\n\n              if (componentState != null &&\n                  componentState.studentData != null &&\n                  componentState.studentData.backgroundImage != null) {\n                connectedComponentBackgroundImage = componentState.studentData.backgroundImage;\n              }\n            } else {\n              /*\n               * showClassmateWorkSource determines whether to get\n               * work from the period or the whole class (all periods)\n               */\n              var showClassmateWorkSource = connectedComponent.showClassmateWorkSource;\n\n              // get the trials from the classmates\n              promises.push(this.getTrialsFromClassmates(nodeId, componentId, showClassmateWorkSource));\n\n              // we are showing work so we will not allow the student to edit it\n              this.isDisabled = true;\n\n              // get the connected component content\n              let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n              if (component != null) {\n                // inject the asset paths so that the assets are absolute\n                component = this.ProjectService.injectAssetPaths(component);\n                connectedComponentBackgroundImage = component.backgroundImage;\n              }\n            }\n          } else if (type == 'showWork' || type == 'importWork' || type == null) {\n            // get the latest component state from the component\n            let componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              if (componentState.componentType == 'ConceptMap' ||\n                  componentState.componentType == 'Draw' ||\n                  componentState.componentType == 'Label') {\n                let connectedComponent =\n                  this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n                if (connectedComponent.importWorkAsBackground === true) {\n                  promises.push(this.setComponentStateAsBackgroundImage(componentState));\n                }\n              } else {\n                // get the trials from the component state\n                promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n\n                if (type == 'showWork') {\n                  // we are showing work so we will not allow the student to edit it\n                  this.isDisabled = true;\n                }\n\n                if (componentState != null &&\n                  componentState.studentData != null &&\n                  componentState.studentData.backgroundImage != null) {\n                  connectedComponentBackgroundImage = componentState.studentData.backgroundImage;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      /*\n       * wait for all the promises to resolve because we may need to\n       * request the classmate work from the server\n       */\n      this.$q.all(promises).then((promiseResults) => {\n        /*\n         * First we will accumulate all the trials into one new component state\n         * and then we will perform connected component processing.\n         */\n\n        // this will hold all the trials\n        let mergedTrials = [];\n\n        /*\n         * Loop through all the promise results. There will be a\n         * promise result for each component we are importing from.\n         * Each promiseResult is an array of trials or an image url.\n         */\n        for (let promiseResult of promiseResults) {\n          if (promiseResult instanceof Array) {\n            let trials = promiseResult;\n            // loop through all the trials from the component\n            for (let t = 0; t < trials.length; t++) {\n              let trial = trials[t];\n\n              // add the trial to our array of merged trials\n              mergedTrials.push(trial);\n            }\n          } else if (typeof(promiseResult) === \"string\") {\n            connectedComponentBackgroundImage = promiseResult;\n          }\n        }\n\n        // create a new student data with all the trials\n        let studentData = {};\n        studentData.trials = mergedTrials;\n        studentData.version = 2;\n\n        // create a new component state\n        let newComponentState = this.NodeService.createNewComponentState();\n        newComponentState.studentData = studentData;\n\n        if (this.componentContent.backgroundImage != null &&\n            this.componentContent.backgroundImage != '') {\n          // use the background image from this component\n          newComponentState.studentData.backgroundImage = this.componentContent.backgroundImage;\n        } else if (connectedComponentBackgroundImage != null) {\n          // use the background image from the connected component\n          newComponentState.studentData.backgroundImage = connectedComponentBackgroundImage;\n        }\n\n        newComponentState = this.handleConnectedComponentsHelper(newComponentState, isReset);\n\n        // populate the component state into this component\n        this.setStudentWork(newComponentState);\n        this.studentDataChanged();\n      });\n    }\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   * @return A promise that returns the url of the image that is generated from\n   * the component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    return this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      return image.url;\n    });\n  }\n\n  /**\n   * Perform additional connected component processing.\n   * @param newComponentState The new component state generated by accumulating\n   * the trials from all the connected component student data.\n   */\n  handleConnectedComponentsHelper(newComponentState, isReset) {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null || isReset) {\n      mergedComponentState = newComponentState;\n    } else {\n      /*\n       * This component has previous student data so this is not the first time\n       * this component is being loaded.\n       */\n      firstTime = false;\n    }\n    var connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      var componentStates = [];\n      for (var connectedComponent of connectedComponents) {\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n          var mergeFields = connectedComponent.mergeFields;\n          if (type == 'showWork') {\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'showClassmateWork') {\n            mergedComponentState = newComponentState;\n          } else if (type == 'importWork' || type == null) {\n            var connectedComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n            let fields = connectedComponent.fields;\n            if (connectedComponentState != null) {\n              // the connected component has student work\n              mergedComponentState = this.mergeComponentState(mergedComponentState, connectedComponentState, fields, firstTime);\n            } else {\n              // the connected component does not have student work\n              mergedComponentState = this.mergeNullComponentState(mergedComponentState, fields, firstTime);\n            }\n          }\n        }\n      }\n\n      if (mergedComponentState.studentData.version == null) {\n        mergedComponentState.studentData.version = this.studentDataVersion;\n      }\n      if (newComponentState.studentData.backgroundImage != null) {\n        mergedComponentState.studentData.backgroundImage = newComponentState.studentData.backgroundImage;\n      }\n\n      if (mergedComponentState != null) {\n        this.setStudentWork(mergedComponentState);\n        this.studentDataChanged();\n      }\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the component state from the connected component into the component\n   * state from this component.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at in the connectedComponentState. Each object can contain 3 fields which\n   * are \"name\", \"when\", \"action\".\n   * - \"name\" is the name of the field in the connectedComponentState.studentData object\n   *   For example, if connectedComponentState is from a Graph component, we may author the value to be \"trials\"\n   * - \"when\" possible values\n   *     \"firstTime\" means we merge the \"name\" field only the first time we visit the component\n   *     \"always\" means we merge the \"name\" field every time we visit the component\n   * - \"action\" possible values\n   *     \"read\" means we look at the value of the \"name\" field and perform processing on it to generate\n   *       some value that we will set into the baseComponentState\n   *     \"write\" means we copy the value of the \"name\" field from connectedComponentState.studentData to\n   *       baseComponentState.studentData\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeComponentState(baseComponentState, connectedComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (connectedComponentState.componentType == 'Graph' && firstTime) {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(connectedComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n        if (when == 'firstTime' && firstTime) {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action == 'read') {\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * We want to merge the component state from the connected component into this\n   * component but the connected component does not have any work. We will\n   * instead use default values.\n   * @param baseComponentState The component state from this component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at. (see comment for mergeComponentState() for more information).\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeNullComponentState(baseComponentState, mergeFields, firstTime) {\n    let newComponentState = null;\n    if (mergeFields == null) {\n      // TODO\n    } else {\n      // we will merge specific fields\n      for (let mergeField of mergeFields) {\n        let name = mergeField.name;\n        let when = mergeField.when;\n        let action = mergeField.action;\n\n        if (when == 'firstTime' && firstTime == true) {\n          if (action == 'write') {\n            // TODO\n          } else if (action == 'read') {\n            // TODO\n          }\n        } else if (when == 'always') {\n          if (action == 'write') {\n            // TODO\n          } else if (action == 'read') {\n            const connectedComponentState = null;\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Read the field from the connected component's component state.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param field The field to look at in the connected component's component\n   * state.\n   */\n  readConnectedComponentField(baseComponentState, connectedComponentState, field) {\n    if (field == 'selectedCells') {\n      if (connectedComponentState == null) {\n        // we will default to hide all the trials\n        for (let trial of baseComponentState.studentData.trials) {\n          trial.show = false;\n        }\n      } else {\n        /*\n         * loop through all the trials and show the ones that are in the\n         * selected cells array.\n         */\n        let studentData = connectedComponentState.studentData;\n        let selectedCells = studentData[field];\n        let selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (let trial of baseComponentState.studentData.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (field == 'trial') {\n      // TODO\n    }\n  }\n\n  /**\n   * The undo button was clicked\n   */\n  undoClicked() {\n\n    if (this.undoStack != null && this.undoStack.length > 0) {\n      // there are component states on the undo stack\n\n      // get the previous component state\n      var previousComponentState = this.undoStack.pop();\n\n      if (previousComponentState != null) {\n\n        // load the previous component state\n        this.setStudentWork(previousComponentState);\n\n        // remember this previous component state\n        this.previousComponentState = previousComponentState;\n\n        // re-render the graph\n        this.setupGraph();\n      }\n    } else {\n      // there are no previous component states\n\n      // check if there was a component state when this component loaded\n      if (this.initialComponentState == null) {\n\n        // there is no previous component state now\n        this.previousComponentState = null;\n\n        /*\n         * there was no initial component state so we can just\n         * reset the graph\n         */\n\n        // remove all the trials\n        this.trials = [];\n\n        // create a blank trial\n        this.newTrial();\n\n        // reset the series\n        this.resetSeriesHelper();\n\n        // re-render the graph\n        this.setupGraph();\n      }\n    }\n  }\n\n  /**\n   * A trial checkbox was clicked to hide or show a trial\n   */\n  trialCheckboxClicked() {\n\n    /*\n     * set the flag to add the next component state created in\n     * studentDataChanged() to the undo stack\n     */\n    this.addNextComponentStateToUndoStack = true;\n  }\n\n  /**\n   * Get the category name given the index of the category on the x axis\n   * @param index the index of the category\n   * @return the category name at the given index\n   */\n  getCategoryByIndex(index) {\n\n    let category = null;\n\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.categories != null &&\n        index < this.componentContent.xAxis.categories.length) {\n\n      category = this.componentContent.xAxis.categories[index];\n    }\n\n    return category;\n  }\n\n  /**\n   * Whether we are showing a plot line where the mouse is.\n   * @return True if we are showing a plot line on the x or y axis where the\n   * mouse is.\n   */\n  isMousePlotLineOn() {\n    if (this.isMouseXPlotLineOn() || this.isMouseYPlotLineOn()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @return Whether we are showing the vertical plot line on the graph.\n   */\n  isMouseXPlotLineOn() {\n    return this.componentContent.showMouseXPlotLine;\n  }\n\n  /**\n   * @return Whether we are showing the horizontal plot line on the graph.\n   */\n  isMouseYPlotLineOn() {\n    return this.componentContent.showMouseYPlotLine;\n  }\n\n  /**\n   * @return Whether we are saving the mouse points in the component state.\n   */\n  isSaveMouseOverPoints() {\n    return this.componentContent.saveMouseOverPoints;\n  }\n\n  /**\n   * Get the x value from the data point.\n   * @param dataPoint An object or an array that represents a data point.\n   * @return A number or null if there is no x value.\n   */\n  getXValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[0];\n    }\n    return null;\n  }\n\n  /**\n   * Get the y value from the data point.\n   * @param dataPoint An object or an array that represents a data point.\n   * @return A number or null if there is no y value.\n   */\n  getYValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[1];\n    }\n    return null;\n  }\n\n  /**\n   * @return The x value of the latest mouse over point.\n   */\n  getLatestMouseOverPointX() {\n    if (this.mouseOverPoints.length > 0) {\n      /*\n       * The latestMouseOverPoint is an array with the 0 element being x and the\n       * 1 element being y.\n       */\n      return this.getXValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  /**\n   * @return The y value of the latest mouse over point.\n   */\n  getLatestMouseOverPointY() {\n    if (this.mouseOverPoints.length > 0) {\n      /*\n       * The latestMouseOverPoint is an array with the 0 element being x and the\n       * 1 element being y.\n       */\n      return this.getYValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  /**\n   * Show the x plot line if it is enabled.\n   * @param text The text to show on the plot line.\n   */\n  showXPlotLineIfOn(text = null) {\n    if (this.isMouseXPlotLineOn()) {\n      // show the previous x plot line or default to 0\n      let x = this.getLatestMouseOverPointX();\n      if (x == null) {\n        x == 0;\n      }\n      this.showXPlotLine(x, text);\n    }\n  }\n\n  /**\n   * Show the y plot line if it is enabled.\n   * @param text The text to show on the plot line.\n   */\n  showYPlotLineIfOn(text = null) {\n    if (this.isMouseYPlotLineOn()) {\n      // show the previous y plot line or default to 0\n      let y = this.getLatestMouseOverPointY();\n      if (y == null) {\n        y == 0;\n      }\n      this.showYPlotLine(y, text);\n    }\n  }\n\n  /**\n   * Show the tooltip on the point with the given x value.\n   * @param seriesId The id of the series.\n   * @param x The x value we want to show the tooltip on.\n   */\n  showTooltipOnX(seriesId, x) {\n    let chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (let tempSeries of chart.series) {\n          if (tempSeries.userOptions.name == seriesId) {\n            series = tempSeries;\n          }\n        }\n      }\n      let points = series.points;\n      for (let point of points) {\n        if (point.x == x) {\n          chart.tooltip.refresh(point);\n        }\n      }\n    }\n  }\n\n  /**\n   * Highlight the point with the given x value.\n   * @param seriesId The id of the series.\n   * @param x The x value we want to highlight.\n   */\n  highlightPointOnX(seriesId, x) {\n    let chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (let tempSeries of chart.series) {\n          if (tempSeries.userOptions.name == seriesId) {\n            series = tempSeries;\n          }\n          // remove the hover state from the other points\n          for (let point of tempSeries.points) {\n            point.setState('');\n          }\n        }\n      }\n      let points = series.points;\n      for (let point of points) {\n        if (point.x == x) {\n          // make the point larger and also have a highlight around it\n          point.setState('hover');\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the tooltip on the newest point.\n   */\n  showTooltipOnLatestPoint() {\n    let chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let latestSeries = chart.series[chart.series.length - 1];\n      let points = latestSeries.points;\n      if (points.length > 0) {\n        let latestPoint = points[points.length - 1];\n        chart.tooltip.refresh(latestPoint);\n      }\n    }\n  }\n\n  /**\n   * Convert the selected cells array into an array of trial ids.\n   * @param selectedCells An array of objects representing selected cells.\n   * @return An array of trial id strings.\n   */\n  convertSelectedCellsToTrialIds(selectedCells) {\n    let selectedTrialIds = [];\n    if (selectedCells != null) {\n      for (let selectedCell of selectedCells) {\n        let material = selectedCell.material;\n        let bevTemp = selectedCell.bevTemp;\n        let airTemp = selectedCell.airTemp;\n        let selectedTrialId = material + '-' + bevTemp + 'Liquid';\n        selectedTrialIds.push(selectedTrialId);\n      }\n    }\n    return selectedTrialIds;\n  }\n}\n\n\nGraphController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphController;\n"]}