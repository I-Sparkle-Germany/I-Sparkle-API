{"version":3,"sources":["graphController.es6"],"names":[],"mappings":"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","file":"graphController.js","sourcesContent":["\n//import $ from 'jquery';\n//import Highcharts from 'highcharts';\n//import angularHighcharts from 'highcharts-ng';\n//import Highcharts from '../../lib/highcharts@4.2.1';\n//import draggablePoints from 'highcharts/draggable-points';\n\nclass GraphController {\n    constructor($rootScope,\n                $scope,\n                GraphService,\n                NodeService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.GraphService = GraphService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds all the series\n        this.series = [];\n\n        // which color the series will be in\n        this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n\n        // series marker options\n        this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // will hold the active series\n        this.activeSeries = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset graph button is shown or not\n        this.isResetGraphButtonVisible = false;\n\n        // whether the select series input is shown or not\n        this.isSelectSeriesVisible = false;\n\n        // the id of the chart element\n        this.chartId = 'chart1';\n        \n        // the width of the graph\n        this.width = 800;\n        \n        // the height of the graph\n        this.height = 500;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // set the chart id\n            this.chartId = 'chart' + this.componentId;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                //this.isResetGraphButtonVisible = true;\n                this.isResetSeriesButtonVisible = true;\n                this.isSelectSeriesVisible = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                //this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n                this.isResetSeriesButtonVisible = false;\n                this.isSelectSeriesVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView()\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.series = null;\n                    this.xAxis = null;\n                    this.yAxis = null;\n                    this.setupGraph();\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                //var showPreviousWorkPrompt = this.componentContent.showPreviousWorkPrompt;\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                /*\n                 if (!showPreviousWorkPrompt) {\n                 this.componentContent = '';\n                 }\n                 */\n\n                // hide the prompt, save, submit, and reset graph buttons when showing previous work\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetGraphButtonVisible = false;\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                if (componentState == null) {\n                    // the component state will be passed into the scope when we are in the grading tool\n                    componentState = this.$scope.componentState;\n                }\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // setup the graph\n                this.setupGraph();\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                // setup the graph\n                this.setupGraph();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the student data from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Table') {\n\n                    // convert the table data to series data\n                    if (componentState != null) {\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null && studentData.tableData != null) {\n\n                            // get the rows in the table\n                            var rows = studentData.tableData;\n\n                            var data = this.$scope.graphController.convertRowDataToSeriesData(rows, connectedComponentParams);\n\n                            // get the index of the series that we will put the data into\n                            var seriesIndex = connectedComponentParams.seriesIndex;\n\n                            if (seriesIndex != null) {\n\n                                // get the series\n                                var series = this.$scope.graphController.series[seriesIndex];\n\n                                if (series == null) {\n                                    // the series is null so we will create a series\n                                    series = {};\n                                    this.$scope.graphController.series[seriesIndex] = series;\n                                }\n\n                                // set the data into the series\n                                series.data = data;\n                            }\n\n                            // render the graph\n                            this.$scope.graphController.setupGraph();\n\n                            // the graph has changed\n                            this.$scope.graphController.isDirty = true;\n                        }\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.graphController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.graphController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.graphController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n\n                // re-draw the graph\n                this.setupGraph();\n            }\n        }));\n\n        /*\n         * Handle the delete key pressed event\n         */\n        this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n            this.handleDeleteKeyPressed();\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // destroy the delete key pressed listener\n            this.deleteKeyPressedListenerDestroyer();\n        }));\n    }\n\n    /**\n     * Setup the graph\n     */\n    setupGraph() {\n\n        // get the title\n        var title = this.componentContent.title;\n\n        // get the graph type\n        var graphType = this.componentContent.graphType;\n\n        // get the x and y axis attributes from the student data\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (this.xAxis == null && this.componentContent.xAxis != null) {\n            /*\n             * the student does not have x axis data so we will use the\n             * x axis from the component content\n             */\n            xAxis = this.componentContent.xAxis;\n            this.xAxis = xAxis;\n        }\n        \n        if (this.xAxis != null) {\n            // do not display decimals on the x axis\n            this.xAxis.allowDecimals = false;\n        }\n        \n        if (this.yAxis == null && this.componentContent.yAxis != null) {\n            /*\n             * the student does not have y axis data so we will use the\n             * y axis from the component content\n             */\n            yAxis = this.componentContent.yAxis;\n            this.yAxis = yAxis;\n        }\n        \n        if (this.yAxis != null) {\n            // do not display decimals on the y axis\n            this.yAxis.allowDecimals = false;\n        }\n        \n        if (this.componentContent.width != null) {\n            // set the width of the graph\n            this.width = this.componentContent.width;\n        }\n        \n        if (this.componentContent.height != null) {\n            // set the height of the graph\n            this.height = this.componentContent.height;\n        }\n\n        /*\n         * remember this graph controller so we can access it in the click\n         * event for the graph\n         */\n        var thisGraphController = this;\n\n        // get all the series from the student data\n        var series = this.getSeries();\n\n        if ((series == null || series.length === 0) && this.componentContent.series != null) {\n            /*\n             * use the series from the component content if the student does not\n             * have any series data\n             */\n            series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n            this.setSeries(series);\n        }\n\n        // add the event that will remove a point when clicked\n        //this.addClickToRemovePointEvent(series);\n\n        if (this.activeSeries == null && series.length > 0) {\n            // the active series has not been set so we will set the active series to the first series\n            this.setActiveSeriesByIndex(0);\n        }\n\n        // loop through all the series and\n        for (var s = 0; s < series.length; s++) {\n            var tempSeries = series[s];\n\n            // check if the series should have a regression line generated for it\n            if (tempSeries != null) {\n\n                if (tempSeries.regression) {\n                    if (tempSeries.regressionSettings == null) {\n                        // initialize the regression settings object if necessary\n                        tempSeries.regressionSettings = {};\n                    }\n\n                    // get the regression settings object\n                    var regressionSettings = tempSeries.regressionSettings;\n\n                    // add these regression settings\n                    regressionSettings.xMin = xAxis.min;\n                    regressionSettings.xMax = xAxis.max;\n                    regressionSettings.numberOfPoints = 100;\n                }\n\n                if (this.isDisabled) {\n                    // disable dragging\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                } else if (tempSeries.canEdit && this.isActiveSeriesIndex(s)) {\n                    // set the fields to allow points to be draggable\n                    tempSeries.draggableX = true;\n                    tempSeries.draggableY = true;\n                    tempSeries.allowPointSelect = true;\n                    tempSeries.cursor = 'move';\n                } else {\n                    // make the series uneditable\n                    tempSeries.draggableX = false;\n                    tempSeries.draggableY = false;\n                    tempSeries.allowPointSelect = false;\n                }\n            }\n        }\n\n        /*\n         * generate an array of regression series for the series that\n         * requrie a regression line\n         */\n        //var regressionSeries = this.GraphService.generateRegressionSeries(series);\n        var regressionSeries = [];\n        this.regressionSeries = regressionSeries;\n\n        /*\n         * create an array that will contain all the regular series and all\n         * the regression series\n         */\n        var allSeries = [];\n        allSeries = allSeries.concat(series);\n\n        //regressionSeries[0].id = 'series-2';\n        //regressionSeries[1].id = 'series-3';\n        //this.setSeriesIds(regressionSeries);\n        allSeries = allSeries.concat(regressionSeries);\n\n        //this.setSeriesIds(allSeries);\n\n        this.chartConfig = {\n            options: {\n                tooltip: {\n                    formatter:function(){\n                        /*\n                         * When the user mouseovers a point, display a tooltip that looks like\n                         *\n                         * x: 10\n                         * y: 15\n                         *\n                         */\n                        var x = thisGraphController.roundToNearestTenth(this.x);\n                        var y = thisGraphController.roundToNearestTenth(this.y);\n\n                        return 'x: ' + x + '<br/>y: ' + y;\n                    }\n                },\n                chart: {\n                    width: this.width,\n                    height: this.height,\n                    type: graphType,\n                    events: {\n                        click: function(e) {\n                            // get the current time\n                            var currentTime = new Date().getTime();\n\n                            // check if a drop event recently occurred\n                            if (thisGraphController.lastDropTime != null) {\n\n                                // check if the last drop event was not within the last 100 milliseconds\n                                if ((currentTime - thisGraphController.lastDropTime) < 100) {\n                                    /*\n                                     * the last drope event was within the last 100 milliseconds so we\n                                     * will not register this click. we need to do this because when\n                                     * students drag points, a click event is fired when they release\n                                     * the mouse button. we don't want that click event to create a new\n                                     * point so we need to ignore it.\n                                     */\n                                    return;\n                                }\n                            }\n\n                            //check if the student can change the graph\n                            if (!thisGraphController.isDisabled) {\n\n                                // get the active series\n                                var activeSeries = thisGraphController.activeSeries;\n\n                                // check if the student is allowed to edit the active series\n                                if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n\n                                    /*\n                                     * get the x and y positions that were clicked and round\n                                     * them to the nearest tenth\n                                     */\n                                    var x = thisGraphController.roundToNearestTenth(e.xAxis[0].value);\n                                    var y = thisGraphController.roundToNearestTenth(e.yAxis[0].value);\n\n                                    // add the point to the series\n                                    thisGraphController.addPointToSeries(activeSeries, x, y);\n\n                                    // notify the controller that the student data has changed\n                                    thisGraphController.studentDataChanged();\n                                }\n                            }\n                        }\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        stickyTracking: false,\n                        point: {\n                            events: {\n                                drag: function (e) {\n                                    // the student has started dragging a point\n\n                                    //check if the student can change the graph\n                                    if (!thisGraphController.isDisabled) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // check if the student is allowed to edit the active series\n                                            if (activeSeries != null && thisGraphController.canEdit(activeSeries)) {\n                                                // set a flag to note that the student is dragging a point\n                                                thisGraphController.dragging = true;\n                                            }\n                                        }\n                                    }\n                                },\n                                drop: function (e) {\n                                    // the student has stopped dragging the point and dropped the point\n\n                                    //check if the student can change the graph and that they were previously dragging a point\n                                    if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n                                            // set the dragging flag off\n                                            thisGraphController.dragging = false;\n\n                                            // remember this drop time\n                                            thisGraphController.lastDropTime = new Date().getTime();\n\n                                            // get the current target\n                                            var target = e.target;\n\n                                            if (target != null) {\n\n                                                /*\n                                                 * get the x and y positions where the point was dropped and round\n                                                 * them to the nearest tenth\n                                                 */\n                                                var x = thisGraphController.roundToNearestTenth(target.x);\n                                                var y = thisGraphController.roundToNearestTenth(target.y);\n\n                                                // get the index of the point\n                                                var index = target.index;\n\n                                                // get the series data\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n                                                    // update the point\n                                                    data[index] = [x, y];\n\n                                                    // tell the controller the student data has changed\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            series: allSeries,\n            title: {\n                text: title\n            },\n            xAxis: xAxis,\n            yAxis: yAxis,\n            loading: false\n        };\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted into the series\n     * in the appropriate position that will keep the series data sorted.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries0(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                var pointAdded = false;\n\n                // loop through the data points\n                for (var d = 0; d < data.length; d++) {\n                    var tempPoint = data[d];\n\n                    if (tempPoint != null) {\n                        // get the x value of the temp point\n                        var tempDataXValue = tempPoint[0];\n\n                        /*\n                         * check if the x value of the point we want to add is\n                         * less than the x value of the temp point\n                         */\n                        if (x < tempDataXValue) {\n                            /*\n                             * the x value is less so we will insert the point\n                             * before this current temp point\n                             */\n                            data.splice(d, 0, [x, y]);\n                            pointAdded = true;\n                            break;\n                        }\n                    }\n                }\n\n                /*\n                 * add the point to the end of the series if we haven't\n                 * already added the point to the series\n                 */\n                if (!pointAdded) {\n                    data.push([x, y]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a point to a series. The point will be inserted at the end of\n     * the series.\n     * @param series the series\n     * @param x the x value\n     * @param y the y value\n     */\n    addPointToSeries(series, x, y) {\n        if (series != null && x != null && y != null) {\n\n            // get the data points from the series\n            var data = series.data;\n\n            if (data != null) {\n                data.push([x, y]);\n            }\n        }\n    };\n\n    /**\n     * Remove a point from a series. We will remove all points that\n     * have the given x value.\n     * @param series the series to remove the point from\n     * @param x the x value of the point to remove\n     */\n    removePointFromSeries(series, x) {\n        if (series != null && x != null) {\n            var data = series.data;\n\n            if (data != null) {\n\n                // loop through all the points\n                for (var d = 0; d < data.length; d++) {\n                    var tempData = data[d];\n\n                    if (tempData != null) {\n                        // get the x value of the point\n                        var tempDataXValue = tempData[0];\n\n                        if (x == tempDataXValue) {\n                            // the x value matches the one we want\n\n                            // remove the point from the data\n                            data.splice(d, 1);\n\n                            /*\n                             * move the counter back one since we have just\n                             * removed an element from the data array\n                             */\n                            d--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if we need to add the click to remove event to the series\n     * @param series an array of series\n     */\n    addClickToRemovePointEvent(series) {\n\n        if (!this.isDisabled) {\n            /*\n             * the student can click to add a point so we will also allow\n             * them to click to remove a point\n             */\n\n            if (series != null) {\n                var thisGraphController = this;\n\n                // loop through all the series\n                for (var s = 0; s < series.length; s++) {\n\n                    var tempSeries = series[s];\n\n                    if (this.canEdit(tempSeries)) {\n                        /*\n                         * create a point click event to remove a point when\n                         * it is clicked\n                         */\n                        var point = {\n                            events: {\n                                click: function (e) {\n\n                                    /*\n                                     * make sure the point that was clicked is from the active series.\n                                     * if it isn't from the active series we will not do anything.\n                                     */\n\n                                    // get the series that was clicked\n                                    var series = this.series;\n\n                                    if (series != null && series.userOptions != null) {\n\n                                        // get the id of the series that was clicked\n                                        var seriesId = series.userOptions.id;\n\n                                        // get the active series\n                                        var activeSeries = thisGraphController.activeSeries;\n\n                                        if (activeSeries != null) {\n\n                                            // get the active series id\n                                            var activeSeriesId = activeSeries.id;\n\n                                            // check if the series that was clicked is the active series\n                                            if (seriesId == activeSeriesId) {\n\n                                                // get the data from the active series\n                                                var data = activeSeries.data;\n\n                                                if (data != null) {\n\n                                                    // get the index of the point\n                                                    var index = this.index;\n\n                                                    // remove the element at the given index\n                                                    data.splice(index, 1);\n\n                                                    /*\n                                                     * notify the controller that the student data has changed\n                                                     * so that the graph will be redrawn\n                                                     */\n                                                    thisGraphController.studentDataChanged();\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        // set this point event into the series\n                        tempSeries.point = point;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether the student is allowed to edit a given series\n     * @param series the series to check\n     * @return whether the series can edit the series\n     */\n    canEdit(series) {\n        var result = false;\n\n        if (series != null && series.canEdit) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Set all the series\n     * @param series an array of series\n     */\n    setSeries(series) {\n        this.series = series;\n    };\n\n    /**\n     * Get all the series\n     * @returns an array of series\n     */\n    getSeries() {\n        return this.series;\n    };\n    \n    /**\n     * Set the series at the given index\n     * @param series the series object\n     * @param index the index the series will be placed in\n     */\n    setSeriesByIndex(series, index) {\n        \n        if (series != null && index != null) {\n            // set the series in the array of series\n            this.series[index] = series;\n        }\n    }\n    \n    /**\n     * Get the series at the given index\n     * @param index the index to get the series at\n     * @returns the series at the given index\n     */\n    getSeriesByIndex(index) {\n        return this.series[index];\n    }\n\n    /**\n     * Set the xAxis object\n     * @param xAxis the xAxis object that can be used to render the graph\n     */\n    setXAxis(xAxis) {\n        this.xAxis = xAxis;\n    };\n\n    /**\n     * Get the xAxis object\n     * @return the xAxis object that can be used to render the graph\n     */\n    getXAxis() {\n        return this.xAxis;\n    };\n\n    /**\n     * Set the yAxis object\n     * @param yAxis the yAxis object that can be used to render the graph\n     */\n    setYAxis(yAxis) {\n        this.yAxis = yAxis;\n    };\n\n    /**\n     * Get the yAxis object\n     * @return the yAxis object that can be used to render the graph\n     */\n    getYAxis() {\n        return this.yAxis;\n    };\n\n    /**\n     * Set the active series\n     * @param series the series\n     */\n    setActiveSeries(series) {\n        this.activeSeries = series;\n    };\n\n    /**\n     * Set the active series by the index\n     * @param index the index\n     */\n    setActiveSeriesByIndex(index) {\n\n        if (index == null) {\n            // the index is null so we will set the active series to null\n            this.setActiveSeries(null);\n        } else {\n            // get the series at the index\n            var series = this.getSeriesByIndex(index);\n\n            if (series == null) {\n                this.setActiveSeries(null);\n            } else {\n                this.setActiveSeries(series);\n            }\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetGraph() {\n        // get the original series from the component content\n        this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n\n        if (this.componentContent.xAxis != null) {\n            this.setXAxis(this.componentContent.xAxis);\n        }\n\n        if (this.componentContent.yAxis != null) {\n            this.setYAxis(this.componentContent.yAxis);\n        }\n\n        // set the active series to null so that the default series will become selected later\n        this.setActiveSeries(null);\n\n        /*\n         * notify the controller that the student data has changed\n         * so that the graph will be redrawn\n         */\n        this.studentDataChanged();\n    };\n    \n    /**\n     * Reset the active series\n     */\n    resetSeries() {\n        \n        var confirmMessage = '';\n        \n        // get the series name\n        var seriesName = this.activeSeries.name;\n        \n        if (seriesName == null || seriesName == '') {\n            confirmMessage = 'Are you sure you want to reset the series?';\n        } else {\n            confirmMessage = 'Are you sure you want to reset the \"' + seriesName + '\" series?';\n        }\n        \n        // ask the student if they are sure they want to reset the series\n        var answer = confirm(confirmMessage);\n        \n        if (answer) {\n            // the student answer yes to reset the series\n            \n            // get the index of the active series\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n            \n            if (activeSeriesIndex != null) {\n                \n                // get the original series from the component content\n                var originalSeries = this.componentContent.series[activeSeriesIndex];\n                \n                if (originalSeries != null) {\n                    \n                    // make a copy of the series\n                    originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n                    \n                    // set the series\n                    this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n                    \n                    /*\n                     * set the active series index so that the the active series\n                     * is the same as before.\n                     */\n                    this.setActiveSeriesByIndex(activeSeriesIndex);\n                    \n                    /*\n                     * notify the controller that the student data has changed\n                     * so that the graph will be redrawn\n                     */\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // populate the student data into the component\n                this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n                this.setXAxis(studentData.xAxis);\n                this.setYAxis(studentData.yAxis);\n                this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * The active series has changed\n     */\n    activeSeriesChanged() {\n        // the student data has changed\n        this.studentDataChanged();\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // re-draw the graph\n        this.setupGraph();\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        // check if a digest is in progress\n        if(!this.$scope.$$phase) {\n            // digest is not in progress so we can force a redraw\n            this.$scope.$apply();\n        }\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the series data\n            studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n\n            // remove high-charts assigned id's from each series before saving\n            for (var s = 0; s < studentData.series.length; s++) {\n                var series = studentData.series[s];\n                //series.id = null;\n            }\n\n            // insert the x axis data\n            studentData.xAxis = this.getXAxis();\n\n            // insert the y axis data\n            studentData.yAxis = this.getYAxis();\n\n            // get the active series index\n            var activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n\n            if (activeSeriesIndex != null) {\n                // set the active series index\n                studentData.activeSeriesIndex = activeSeriesIndex;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.isSaveButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.isSubmitButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the reset graph button\n     * @return whether to show the reset graph button\n     */\n    showResetGraphButton() {\n        var show = false;\n\n        if (this.isResetGraphButtonVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n    \n    /**\n     * Check whether we need to show the reset series button\n     * @return whether to show the reset series button\n     */\n    showResetSeriesButton() {\n        var show = false;\n        \n        if (this.isResetSeriesButtonVisible) {\n            show = true;\n        }\n        \n        return show;\n    }\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     * @return a string containing the prompt\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            prompt = this.originalComponentContent.prompt;\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the index of a series\n     * @param series the series\n     * @return the index of the series\n     */\n    getSeriesIndex(series) {\n        var index = null;\n\n        if (series != null) {\n\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null) {\n\n                // loop through all the series\n                for (var s = 0; s < seriesArray.length; s++) {\n                    var tempSeries = seriesArray[s];\n\n                    // check if this is the series we are looking for\n                    if (series == tempSeries) {\n                        index = s;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get a series by the index\n     * @param index the index of the series in the series array\n     * @returns the series object or null if not found\n     */\n    getSeriesByIndex(index) {\n        var series = null;\n\n        if (index != null && index >= 0) {\n            // get all of the series\n            var seriesArray = this.getSeries();\n\n            if (seriesArray != null && seriesArray.length > 0) {\n                // get the series at the index\n                series = seriesArray[index];\n            }\n        }\n\n        return series;\n    }\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.GraphService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handle importing external data (we only support csv for now)\n     * @param studentAsset CSV file student asset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n\n                    this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n                        var rowData = this.StudentDataService.CSVToArray(assetContent);\n                        var params = {};\n                        params.skipFirstRow = true;  // first row contains header, so ignore it\n                        params.xColumn = 0;          // assume (for now) x-axis data is in first column\n                        params.yColumn = 1;          // assume (for now) y-axis data is in second column\n\n                        var seriesData = this.convertRowDataToSeriesData(rowData, params);\n\n                        // get the index of the series that we will put the data into\n                        var seriesIndex = this.series.length;  // we're always appending a new series\n\n                        if (seriesIndex != null) {\n\n                            // get the series\n                            var series = this.series[seriesIndex];\n\n                            if (series == null) {\n                                // the series is null so we will create a series\n                                series = {};\n                                series.name = copiedAsset.fileName;\n                                series.color = this.seriesColors[seriesIndex];\n                                series.marker = {\n                                    \"symbol\": this.seriesMarkers[seriesIndex]\n                                };\n                                series.regression = false;\n                                series.regressionSettings = {};\n                                series.canEdit = false;\n                                this.series[seriesIndex] = series;\n                            }\n\n                            // set the data into the series\n                            series.data = seriesData;\n                        }\n\n                        // render the graph\n                        this.setupGraph();\n\n                        // the graph has changed\n                        this.isDirty = true;\n                    });\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Convert the table data into series data\n     * @param componentState the component state to get table data from\n     * @param params (optional) the params to specify what columns\n     * and rows to use from the table data\n     */\n    convertRowDataToSeriesData(rows, params) {\n        var data = [];\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        // loop through all the rows\n        for (var r = 0; r < rows.length; r++) {\n\n            if (skipFirstRow && r === 0) {\n                // skip the first row\n                continue;\n            }\n\n            // get the row\n            var row = rows[r];\n\n            // get the x cell and y cell from the row\n            var xCell = row[xColumn];\n            var yCell = row[yColumn];\n\n            if (xCell != null && yCell != null) {\n\n                /*\n                 * the point array where the 0 index will contain the\n                 * x value and the 1 index will contain the y value\n                 */\n                var point = [];\n\n                // get the x text and y text\n                var xText = null;\n                if (typeof(xCell) === 'object' && xCell.text) {\n                    xText = xCell.text;\n                }\n\n                var yText = null;\n                if (typeof(yCell) === 'object' && yCell.text) {\n                    yText = yCell.text;\n                }\n\n                if (xText != null &&\n                    xText !== '' &&\n                    yText != null &&\n                    yText !== '') {\n\n                    // try to convert the text values into numbers\n                    var xNumber = Number(xText);\n                    var yNumber = Number(yText);\n\n                    if (!isNaN(xNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(xNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(xText);\n                    }\n\n                    if (!isNaN(yNumber)) {\n                        /*\n                         * we were able to convert the value into a\n                         * number so we will add that\n                         */\n                        point.push(yNumber);\n                    } else {\n                        /*\n                         * we were unable to convert the value into a\n                         * number so we will add the text\n                         */\n                        point.push(yText);\n                    }\n\n                    // add the point to our data\n                    data.push(point);\n                }\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Set the series id for each series\n     * @param allSeries an array of series\n     */\n    setSeriesIds(allSeries) {\n        var usedSeriesIds = [];\n\n        if (allSeries != null) {\n\n            // loop through all the series\n            for (var x = 0; x < allSeries.length; x++) {\n                var series = allSeries[x];\n\n                // get the series id if it is set\n                var seriesId = series.id;\n\n                if (seriesId == null) {\n                    // the series doesn't have a series id so we will give it one\n                    var nextSeriesId = getNextSeriesId(usedSeriesIds);\n                    series.id = nextSeriesId;\n                    usedSeriesIds.push(nextSeriesId);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the next available series id\n     * @param usedSeriesIds an array of used series ids\n     * @returns the next available series id\n     */\n    getNextSeriesId(usedSeriesIds) {\n        var nextSeriesId = null;\n        var currentSeriesNumber = 0;\n        var foundNextSeriesId = false;\n\n        while (!foundNextSeriesId) {\n\n            // get a temp series id\n            var tempSeriesId = 'series-' + currentSeriesNumber;\n\n            // check if the temp series id is used\n            if (usedSeriesIds.indexOf(tempSeriesId) == -1) {\n                // temp series id has not been used\n\n                nextSeriesId = tempSeriesId;\n\n                foundNextSeriesId = true;\n            } else {\n                /*\n                 * the temp series id has been used so we will increment the\n                 * counter to try another series id the next iteration\n                 */\n                currentSeriesNumber++;\n            }\n        }\n\n        return nextSeriesId;\n    };\n\n    /**\n     * Round a number to the nearest tenth\n     */\n    roundToNearestTenth(x) {\n\n        // make sure x is a number\n        x = parseFloat(x);\n\n        // round the number to the nearest tenth\n        x = Math.round(x * 10) / 10;\n\n        return x;\n    }\n\n    /**\n     * Handle the delete key press\n     */\n    handleDeleteKeyPressed() {\n\n        // get the active series\n        var series = this.activeSeries;\n\n        // check if the student is allowed to edit the the active series\n        if (series != null && this.canEdit(series)) {\n\n            // get the chart\n            var chart = $('#' + this.chartId).highcharts();\n\n            // get the selected points\n            var selectedPoints = chart.getSelectedPoints();\n\n            var index = null;\n\n            if (selectedPoints != null) {\n\n                // an array to hold the indexes of the selected points\n                var indexes = [];\n\n                // loop through all the selected points\n                for (var x = 0; x < selectedPoints.length; x++) {\n\n                    // get a selected point\n                    var selectedPoint = selectedPoints[x];\n\n                    // get the index of the selected point\n                    index = selectedPoint.index;\n\n                    // add the index to our array\n                    indexes.push(index);\n                }\n\n                // order the array from largest to smallest\n                indexes.sort().reverse();\n\n                // get the series data\n                var data = series.data;\n\n                // loop through all the indexes and remove them from the series data\n                for (var i = 0; i < indexes.length; i++) {\n\n                    index = indexes[i];\n\n                    if (data != null) {\n                        data.splice(index, 1);\n                    }\n                }\n\n                this.studentDataChanged();\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Add a series in the authoring view\n     */\n    authoringAddSeriesClicked() {\n\n        // create a new series\n        var newSeries = this.createNewSeries();\n\n        // add the new series\n        this.authoringComponentContent.series.push(newSeries);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a new series object\n     * @returns a new series object\n     */\n    createNewSeries() {\n        var newSeries = {};\n\n        newSeries.name = '';\n        newSeries.data = [];\n\n        var marker = {};\n        marker.symbol = 'circle';\n        newSeries.marker = marker;\n\n        newSeries.regression = false;\n        newSeries.regressionSettings = {};\n        newSeries.canEdit = true;\n\n        return newSeries;\n    }\n\n    /**\n     * Delete a series in the authoring view\n     * @param the index of the series in the series array\n     */\n    authoringDeleteSeriesClicked(index) {\n\n        // remove the series from the series array\n        this.authoringComponentContent.series.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a series is the active series. There can only be on active series.\n     * @param series the series\n     * @returns whether the series is the active series\n     */\n    isActiveSeries(series) {\n\n        // get the series index\n        var seriesIndex = this.getSeriesIndex(series);\n\n        // check if the series is the active series\n        var result = this.isActiveSeriesIndex(seriesIndex);\n\n        return result;\n    }\n\n    /**\n     * Check if a series index is the active series index. There can only be\n     * one active series.\n     * @param seriesIndex the series index\n     * @returns whether the series is the active series\n     */\n    isActiveSeriesIndex(seriesIndex) {\n\n        var result = false;\n\n        if (this.series.indexOf(this.activeSeries) === seriesIndex) {\n            // the series is the active series\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether to show the select series input\n     * @returns whether to show the select series input\n     */\n    showSelectSeries() {\n        var show = false;\n\n        if (this.isSelectSeriesVisible && this.series.length > 1) {\n            /*\n             * we are in a mode the shows the select series input and there is\n             * more than one series\n             */\n            show = true;\n        }\n\n        return show;\n    }\n}\n\n\nGraphController.$inject = [\n    '$rootScope',\n    '$scope',\n    'GraphService',\n    'NodeService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphController;\n"]}