{"version":3,"sources":["graphService.es6"],"names":[],"mappings":"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","file":"graphService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass GraphService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Graph component object\n     * @returns a new Graph component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Graph';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.title = 'Enter graph title here';\n        component.width = 800;\n        component.height = 500;\n        component.xAxis = {\n            title: {\n                text: 'Time (seconds)'\n            },\n            min: 0,\n            max: 10\n        };\n        component.yAxis = {\n            title: {\n                text: 'Position (meters)'\n            },\n            min: 0,\n            max: 10\n        };\n        component.series = [\n            {\n                name: 'Prediction',\n                data: [],\n                color: 'blue',\n                marker: {\n                    symbol: 'circle'\n                },\n                regression: false,\n                regressionSettings: {},\n                canEdit: true\n            }\n        ];\n\n        return component;\n    }\n\n    /**\n     * Copies an existing Graph component object\n     * @returns a copied Graph component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.title = componentToCopy.title;\n        component.xAxis = componentToCopy.xAxis;\n        component.yAxis = componentToCopy.yAxis;\n        component.series = componentToCopy.series;\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Graph') {\n                // the other component is an Graph component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Code extracted from https://github.com/streamlinesocial/highcharts-regression\n     * Loop through all the series that are passed in and find the ones that we\n     * need to generate a regression series for. Return the regression series\n     * that are generated in an array.\n     * @param series an array of series\n     * @return an array of regression series\n     */\n    generateRegressionSeries(series) {\n        var regressionSeries = [];\n        var i = 0 ;\n        for (i = 0 ; i < series.length ; i++){\n            var s = series[i];\n            if ( s.regression ) {\n                s.regressionSettings =  s.regressionSettings || {} ;\n                var regressionType = s.regressionSettings.type || \"linear\" ;\n                var regression;\n\n                var color = s.color;\n\n                if (s.regressionSettings.color != null) {\n                    color = s.regressionSettings.color;\n                }\n\n                var extraSerie = {\n                    data:[],\n                    color: color ,\n                    yAxis: s.yAxis ,\n                    lineWidth: 2,\n                    marker: {enabled: false} ,\n                    isRegressionLine: true,\n                    name: s.regressionSettings.label || \"Equation: %eq\"\n                };\n\n\n                extraSerie.type = \"spline\";\n\n                if (regressionType == \"linear\") {\n                    regression = this._linear(s.data, s.regressionSettings) ;\n                    extraSerie.type = \"line\";\n                }else if (regressionType == \"exponential\") {\n                    regression = this._exponential(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"polynomial\"){\n                    regression = this._polynomial(s.data, 2, s.regressionSettings) ;\n                }else if (regressionType == \"logarithmic\"){\n                    regression = this._logarithmic(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"loess\"){\n                    var loessSmooth = s.regressionSettings.loessSmooth || 25\n                    regression = this._loess(s.data, loessSmooth/100) ;\n                }else {\n                    console.error(\"Invalid regression type: \" , regressionType) ;\n                    break;\n                }\n\n                regression.rSquared =  this.coefficientOfDetermination(s.data, regression.points).toFixed(2);\n                regression.rValue = Math.sqrt(regression.rSquared,2).toFixed(2) ;\n                extraSerie.data = regression.points ;\n                extraSerie.name = extraSerie.name.replace(\"%r2\",regression.rSquared);\n                extraSerie.name = extraSerie.name.replace(\"%r\",regression.rValue);\n                extraSerie.name = extraSerie.name.replace(\"%eq\",regression.string);\n\n                extraSerie.regressionOutputs = regression ;\n\n                regressionSeries.push(extraSerie);\n            }\n        }\n\n        return regressionSeries;\n    };\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _exponential(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; // X\n                sum[1] += data[n][1]; // Y\n                sum[2] += data[n][0] * data[n][0] * data[n][1]; // XXY\n                sum[3] += data[n][1] * Math.log(data[n][1]); // Y Log Y\n                sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]); //YY Log Y\n                sum[5] += data[n][0] * data[n][1]; //XY\n            }\n        }\n\n        var denominator = (sum[1] * sum[2] - sum[5] * sum[5]);\n        var A = Math.pow(Math.E, (sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\n        var B = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, A * Math.pow(Math.E, B * x)];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A * Math.pow(Math.E, B * data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'e^(' + Math.round(B*100) / 100 + 'x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     * Human readable formulas:\n     *\n     *              N * Σ(XY) - Σ(X)\n     * intercept = ---------------------\n     *              N * Σ(X^2) - Σ(X)^2\n     *\n     * correlation = N * Σ(XY) - Σ(X) * Σ (Y) / √ (  N * Σ(X^2) - Σ(X) ) * ( N * Σ(Y^2) - Σ(Y)^2 ) ) )\n     *\n     */\n    _linear(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0], n = 0, results = [], N = data.length;\n\n        for (; n < data.length; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; //Σ(X)\n                sum[1] += data[n][1]; //Σ(Y)\n                sum[2] += data[n][0] * data[n][0]; //Σ(X^2)\n                sum[3] += data[n][0] * data[n][1]; //Σ(XY)\n                sum[4] += data[n][1] * data[n][1]; //Σ(Y^2)\n            }\n        }\n\n        var gradient = (n * sum[3] - sum[0] * sum[1]) / (n * sum[2] - sum[0] * sum[0]);\n        var intercept = (sum[1] / n) - (gradient * sum[0]) / n;\n        //var correlation = (n * sum[3] - sum[0] * sum[1]) / Math.sqrt((n * sum[2] - sum[0] * sum[0]) * (n * sum[4] - sum[1] * sum[1]));\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, x * gradient + intercept];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], data[i][0] * gradient + intercept];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(gradient*100) / 100 + 'x + ' + Math.round(intercept*100) / 100;\n        return {equation: [gradient, intercept], points: results, string: string};\n    }\n\n    /**\n     *  Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _logarithmic(data, regressionSettings) {\n        var sum = [0, 0, 0, 0], n = 0, results = [],mean = 0 ;\n\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += data[n][1] * Math.log(data[n][0]);\n                sum[2] += data[n][1];\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = (sum[2] - B * sum[0]) / n;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                if(x > 0) {\n                    var y = A + B * Math.log(x);\n\n                    if(!isNaN(y)) {\n                        var coordinate = [x, y];\n                        results.push(coordinate);\n                    }\n                }\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A + B * Math.log(data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + ' + ' + Math.round(B*100) / 100 + ' ln(x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _power(data) {\n        var sum = [0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\n                sum[2] += Math.log(data[n][1]);\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = Math.pow(Math.E, (sum[2] - B * sum[0]) / n);\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var coordinate = [data[i][0], A * Math.pow(data[i][0] , B)];\n            results.push(coordinate);\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'x^' + Math.round(B*100) / 100;\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _polynomial(data, order, regressionSettings) {\n        if(typeof order == 'undefined'){\n            order = 2;\n        }\n        var lhs = [], rhs = [], results = [], a = 0, b = 0, i = 0, k = order + 1;\n\n        for (; i < k; i++) {\n            for (var l = 0, len = data.length; l < len; l++) {\n                if (data[l]['x']) {\n                    data[l][0] = data[l]['x'];\n                    data[l][1] = data[l]['y'];\n                }\n                if (data[l][1]) {\n                    a += Math.pow(data[l][0], i) * data[l][1];\n                }\n            }\n            lhs.push(a), a = 0;\n            var c = [];\n            for (var j = 0; j < k; j++) {\n                for (var l = 0, len = data.length; l < len; l++) {\n                    if (data[l][1]) {\n                        b += Math.pow(data[l][0], i + j);\n                    }\n                }\n                c.push(b), b = 0;\n            }\n            rhs.push(c);\n        }\n        rhs.push(lhs);\n\n        var equation = this.gaussianElimination(rhs, k);\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(x, w);\n                }\n                results.push([x, answer]);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(data[i][0], w);\n                }\n                results.push([data[i][0], answer]);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ';\n\n        for(var i = equation.length-1; i >= 0; i--){\n            if(i > 1) string += Math.round(equation[i]*100) / 100 + 'x^' + i + ' + ';\n            else if (i == 1) string += Math.round(equation[i]*100) / 100 + 'x' + ' + ';\n            else string += Math.round(equation[i]*100) / 100;\n        }\n\n        return {equation: equation, points: results, string: string};\n    }\n\n    /**\n     * @author: Ignacio Vazquez\n     * Based on\n     * - http://commons.apache.org/proper/commons-math/download_math.cgi LoesInterpolator.java\n     * - https://gist.github.com/avibryant/1151823\n     */\n    _loess(data, bandwidth) {\n        var bandwidth = bandwidth || 0.25 ;\n\n        var xval = data.map(function(pair){return pair[0]});\n        var distinctX =  array_unique(xval) ;\n        if (  2 / distinctX.length  > bandwidth ) {\n            bandwidth = Math.min( 2 / distinctX.length, 1 );\n            console.warn(\"updated bandwith to \"+ bandwidth);\n        }\n\n        var yval = data.map(function(pair){return pair[1]});\n\n        function array_unique(values) {\n            var o = {}, i, l = values.length, r = [];\n            for(i=0; i<l;i+=1) o[values[i]] = values[i];\n            for(i in o) r.push(o[i]);\n            return r;\n        }\n\n        function tricube(x) {\n            var tmp = 1 - x * x * x;\n            return tmp * tmp * tmp;\n        }\n\n        var res = [];\n\n        var left = 0;\n        var right = Math.floor(bandwidth * xval.length) - 1;\n\n        for(var i in xval)\n        {\n            var x = xval[i];\n\n            if (i > 0) {\n                if (right < xval.length - 1 &&\n                    xval[right+1] - xval[i] < xval[i] - xval[left]) {\n                    left++;\n                    right++;\n                }\n            }\n            //console.debug(\"left: \"+left  + \" right: \" + right );\n            var edge;\n            if (xval[i] - xval[left] > xval[right] - xval[i])\n                edge = left;\n            else\n                edge = right;\n            var denom = Math.abs(1.0 / (xval[edge] - x));\n            var sumWeights = 0;\n            var sumX = 0, sumXSquared = 0, sumY = 0, sumXY = 0;\n\n            var k = left;\n            while(k <= right)\n            {\n                var xk = xval[k];\n                var yk = yval[k];\n                var dist;\n                if (k < i) {\n                    dist = (x - xk);\n                } else {\n                    dist = (xk - x);\n                }\n                var w = tricube(dist * denom);\n                var xkw = xk * w;\n                sumWeights += w;\n                sumX += xkw;\n                sumXSquared += xk * xkw;\n                sumY += yk * w;\n                sumXY += yk * xkw;\n                k++;\n            }\n\n            var meanX = sumX / sumWeights;\n            //console.debug(meanX);\n            var meanY = sumY / sumWeights;\n            var meanXY = sumXY / sumWeights;\n            var meanXSquared = sumXSquared / sumWeights;\n\n            var beta;\n            if (meanXSquared == meanX * meanX)\n                beta = 0;\n            else\n                beta = (meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);\n\n            var alpha = meanY - beta * meanX;\n            res[i] = beta * x + alpha;\n        }\n        console.debug(res);\n        return {\n            equation: \"\" ,\n            points: xval.map(function(x,i){return [x, res[i]]}),\n            string:\"\"\n        } ;\n    }\n\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    gaussianElimination(a, o) {\n        var i = 0, j = 0, k = 0, maxrow = 0, tmp = 0, n = a.length - 1, x = new Array(o);\n        for (i = 0; i < n; i++) {\n            maxrow = i;\n            for (j = i + 1; j < n; j++) {\n                if (Math.abs(a[i][j]) > Math.abs(a[i][maxrow]))\n                    maxrow = j;\n            }\n            for (k = i; k < n + 1; k++) {\n                tmp = a[k][i];\n                a[k][i] = a[k][maxrow];\n                a[k][maxrow] = tmp;\n            }\n            for (j = i + 1; j < n; j++) {\n                for (k = n; k >= i; k--) {\n                    a[k][j] -= a[k][i] * a[i][j] / a[i][i];\n                }\n            }\n        }\n        for (j = n - 1; j >= 0; j--) {\n            tmp = 0;\n            for (k = j + 1; k < n; k++)\n                tmp += a[k][j] * x[k];\n            x[j] = (a[n][j] - tmp) / a[j][j];\n        }\n        return (x);\n    }\n\n    /**\n     * @author Ignacio Vazquez\n     * See http://en.wikipedia.org/wiki/Coefficient_of_determination for theaorical details\n     */\n    coefficientOfDetermination (data, pred ) {\n\n        var i = 0;\n        var SSE = 0;\n        var SSYY = 0;\n        var mean = 0;\n\n        // Calc the mean\n        for (i = 0 ; i < data.length ; i++ ){\n            mean +=  data[i][1] / data.length ;\n        }\n\n        // Calc the coefficent of determination\n        for (i = 0 ; i < data.length ; i++ ){\n            SSYY +=  Math.pow( data[i][1] -  pred[i][1] , 2) ;\n            SSE +=  Math.pow( data[i][1] -  mean , 2) ;\n        }\n        return  1 - ( SSYY / SSE)  ;\n    }\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (this.hasSeriesData(studentData)) {\n                            // there is series data so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData) {\n                    if (this.hasSeriesData(studentData)) {\n                        // there is series data so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if student data contains any graph series with dataType\n     * @param studentData an object of student data from a component state\n     * @returns result boolean\n     */\n    hasSeriesData(studentData) {\n        let result = false;\n\n        let series = studentData.series;\n        if (series && series.length) {\n            // check for any data in any series\n            for (let i = 0, l = series.length; i < l; i++) {\n                let data = series[i].data;\n\n                if (data && data.length) {\n                    // there is series data so the component is completed\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nGraphService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphService;\n"]}