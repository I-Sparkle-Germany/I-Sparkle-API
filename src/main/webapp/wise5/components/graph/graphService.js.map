{"version":3,"sources":["graphService.es6"],"names":["GraphService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","title","width","height","enableTrials","canCreateNewTrials","canDeleteTrials","hideAllTrialsOnNewTrial","canStudentHideSeriesOnLegendClick","roundValuesTo","graphType","xAxis","text","min","max","units","locked","yAxis","series","name","data","color","marker","symbol","regression","regressionSettings","canEdit","componentToCopy","createComponent","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","regressionSeries","i","length","s","regressionType","extraSerie","lineWidth","enabled","isRegressionLine","label","_linear","_exponential","_polynomial","_logarithmic","loessSmooth","_loess","console","error","rSquared","coefficientOfDetermination","points","toFixed","rValue","Math","sqrt","replace","string","regressionOutputs","push","sum","n","results","len","log","denominator","A","pow","E","B","xMin","xMax","numberOfPoints","xSpan","x","coordinate","sort","a","b","round","equation","N","gradient","intercept","mean","y","isNaN","order","lhs","rhs","k","l","c","j","gaussianElimination","answer","w","bandwidth","xval","map","pair","distinctX","array_unique","warn","yval","values","o","r","tricube","tmp","res","left","right","floor","edge","denom","abs","sumWeights","sumX","sumXSquared","sumY","sumXY","xk","yk","dist","xkw","meanX","meanY","meanXY","meanXSquared","beta","alpha","debug","maxrow","Array","pred","SSE","SSYY","componentStates","componentEvents","nodeEvents","node","result","submitRequired","isSubmit","hasSeriesData","hasTrialData","trials","t","trial","singleSeries","hasStudentWork","version","anySeriesHasDataPoint","anyTrialHasDataPoint","hasDataPoint","trialHasDataPoint","seriesHasDataPoint","multipleSeries","componentContent","importWork","components","showClassmateWork","$inject"],"mappings":"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","file":"graphService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass GraphService extends NodeService {\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Get the component type label\n     * example\n     * \"Graph\"\n     */\n    getComponentTypeLabel() {\n        return this.$translate('graph.componentTypeLabel');\n    }\n\n    /**\n     * Create a Graph component object\n     * @returns a new Graph component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Graph';\n        component.prompt = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.title = '';\n        component.width = 800;\n        component.height = 500;\n        component.enableTrials = false;\n        component.canCreateNewTrials = false;\n        component.canDeleteTrials = false;\n        component.hideAllTrialsOnNewTrial = false;\n        component.canStudentHideSeriesOnLegendClick = false;\n        component.roundValuesTo = \"hundredth\";\n        component.graphType = 'line';\n        component.xAxis = {\n            title: {\n                text: this.$translate('graph.timeSeconds')\n            },\n            min: 0,\n            max: 10,\n            units: this.$translate('graph.secondsUnit'),\n            locked: true\n        };\n        component.yAxis = {\n            title: {\n                text: this.$translate('graph.positionMeters')\n            },\n            min: 0,\n            max: 10,\n            units: this.$translate('graph.metersUnit'),\n            locked: true\n        };\n        component.series = [\n            {\n                name: this.$translate('graph.prediction'),\n                data: [],\n                color: 'blue',\n                marker: {\n                    symbol: 'circle'\n                },\n                regression: false,\n                regressionSettings: {},\n                canEdit: true\n            }\n        ];\n\n        return component;\n    }\n\n    /**\n     * Copies an existing Graph component object\n     * @returns a copied Graph component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.title = componentToCopy.title;\n        component.xAxis = componentToCopy.xAxis;\n        component.yAxis = componentToCopy.yAxis;\n        component.series = componentToCopy.series;\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Graph') {\n                // the other component is an Graph component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Code extracted from https://github.com/streamlinesocial/highcharts-regression\n     * Loop through all the series that are passed in and find the ones that we\n     * need to generate a regression series for. Return the regression series\n     * that are generated in an array.\n     * @param series an array of series\n     * @return an array of regression series\n     */\n    generateRegressionSeries(series) {\n        var regressionSeries = [];\n        var i = 0 ;\n        for (i = 0 ; i < series.length ; i++){\n            var s = series[i];\n            if ( s.regression ) {\n                s.regressionSettings =  s.regressionSettings || {} ;\n                var regressionType = s.regressionSettings.type || \"linear\" ;\n                var regression;\n\n                var color = s.color;\n\n                if (s.regressionSettings.color != null) {\n                    color = s.regressionSettings.color;\n                }\n\n                var extraSerie = {\n                    data:[],\n                    color: color ,\n                    yAxis: s.yAxis ,\n                    lineWidth: 2,\n                    marker: {enabled: false} ,\n                    isRegressionLine: true,\n                    name: s.regressionSettings.label || \"Equation: %eq\"\n                };\n\n\n                extraSerie.type = \"spline\";\n\n                if (regressionType == \"linear\") {\n                    regression = this._linear(s.data, s.regressionSettings) ;\n                    extraSerie.type = \"line\";\n                }else if (regressionType == \"exponential\") {\n                    regression = this._exponential(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"polynomial\"){\n                    regression = this._polynomial(s.data, 2, s.regressionSettings) ;\n                }else if (regressionType == \"logarithmic\"){\n                    regression = this._logarithmic(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"loess\"){\n                    var loessSmooth = s.regressionSettings.loessSmooth || 25\n                    regression = this._loess(s.data, loessSmooth/100) ;\n                }else {\n                    console.error(\"Invalid regression type: \" , regressionType) ;\n                    break;\n                }\n\n                regression.rSquared =  this.coefficientOfDetermination(s.data, regression.points).toFixed(2);\n                regression.rValue = Math.sqrt(regression.rSquared,2).toFixed(2) ;\n                extraSerie.data = regression.points ;\n                extraSerie.name = extraSerie.name.replace(\"%r2\",regression.rSquared);\n                extraSerie.name = extraSerie.name.replace(\"%r\",regression.rValue);\n                extraSerie.name = extraSerie.name.replace(\"%eq\",regression.string);\n\n                extraSerie.regressionOutputs = regression ;\n\n                regressionSeries.push(extraSerie);\n            }\n        }\n\n        return regressionSeries;\n    };\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _exponential(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; // X\n                sum[1] += data[n][1]; // Y\n                sum[2] += data[n][0] * data[n][0] * data[n][1]; // XXY\n                sum[3] += data[n][1] * Math.log(data[n][1]); // Y Log Y\n                sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]); //YY Log Y\n                sum[5] += data[n][0] * data[n][1]; //XY\n            }\n        }\n\n        var denominator = (sum[1] * sum[2] - sum[5] * sum[5]);\n        var A = Math.pow(Math.E, (sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\n        var B = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, A * Math.pow(Math.E, B * x)];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A * Math.pow(Math.E, B * data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'e^(' + Math.round(B*100) / 100 + 'x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     * Human readable formulas:\n     *\n     *              N * Σ(XY) - Σ(X)\n     * intercept = ---------------------\n     *              N * Σ(X^2) - Σ(X)^2\n     *\n     * correlation = N * Σ(XY) - Σ(X) * Σ (Y) / √ (  N * Σ(X^2) - Σ(X) ) * ( N * Σ(Y^2) - Σ(Y)^2 ) ) )\n     *\n     */\n    _linear(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0], n = 0, results = [], N = data.length;\n\n        for (; n < data.length; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; //Σ(X)\n                sum[1] += data[n][1]; //Σ(Y)\n                sum[2] += data[n][0] * data[n][0]; //Σ(X^2)\n                sum[3] += data[n][0] * data[n][1]; //Σ(XY)\n                sum[4] += data[n][1] * data[n][1]; //Σ(Y^2)\n            }\n        }\n\n        var gradient = (n * sum[3] - sum[0] * sum[1]) / (n * sum[2] - sum[0] * sum[0]);\n        var intercept = (sum[1] / n) - (gradient * sum[0]) / n;\n        //var correlation = (n * sum[3] - sum[0] * sum[1]) / Math.sqrt((n * sum[2] - sum[0] * sum[0]) * (n * sum[4] - sum[1] * sum[1]));\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, x * gradient + intercept];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], data[i][0] * gradient + intercept];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(gradient*100) / 100 + 'x + ' + Math.round(intercept*100) / 100;\n        return {equation: [gradient, intercept], points: results, string: string};\n    }\n\n    /**\n     *  Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _logarithmic(data, regressionSettings) {\n        var sum = [0, 0, 0, 0], n = 0, results = [],mean = 0 ;\n\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += data[n][1] * Math.log(data[n][0]);\n                sum[2] += data[n][1];\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = (sum[2] - B * sum[0]) / n;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                if(x > 0) {\n                    var y = A + B * Math.log(x);\n\n                    if(!isNaN(y)) {\n                        var coordinate = [x, y];\n                        results.push(coordinate);\n                    }\n                }\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A + B * Math.log(data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + ' + ' + Math.round(B*100) / 100 + ' ln(x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _power(data) {\n        var sum = [0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\n                sum[2] += Math.log(data[n][1]);\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = Math.pow(Math.E, (sum[2] - B * sum[0]) / n);\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var coordinate = [data[i][0], A * Math.pow(data[i][0] , B)];\n            results.push(coordinate);\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'x^' + Math.round(B*100) / 100;\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _polynomial(data, order, regressionSettings) {\n        if(typeof order == 'undefined'){\n            order = 2;\n        }\n        var lhs = [], rhs = [], results = [], a = 0, b = 0, i = 0, k = order + 1;\n\n        for (; i < k; i++) {\n            for (var l = 0, len = data.length; l < len; l++) {\n                if (data[l]['x']) {\n                    data[l][0] = data[l]['x'];\n                    data[l][1] = data[l]['y'];\n                }\n                if (data[l][1]) {\n                    a += Math.pow(data[l][0], i) * data[l][1];\n                }\n            }\n            lhs.push(a), a = 0;\n            var c = [];\n            for (var j = 0; j < k; j++) {\n                for (var l = 0, len = data.length; l < len; l++) {\n                    if (data[l][1]) {\n                        b += Math.pow(data[l][0], i + j);\n                    }\n                }\n                c.push(b), b = 0;\n            }\n            rhs.push(c);\n        }\n        rhs.push(lhs);\n\n        var equation = this.gaussianElimination(rhs, k);\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(x, w);\n                }\n                results.push([x, answer]);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(data[i][0], w);\n                }\n                results.push([data[i][0], answer]);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ';\n\n        for(var i = equation.length-1; i >= 0; i--){\n            if(i > 1) string += Math.round(equation[i]*100) / 100 + 'x^' + i + ' + ';\n            else if (i == 1) string += Math.round(equation[i]*100) / 100 + 'x' + ' + ';\n            else string += Math.round(equation[i]*100) / 100;\n        }\n\n        return {equation: equation, points: results, string: string};\n    }\n\n    /**\n     * @author: Ignacio Vazquez\n     * Based on\n     * - http://commons.apache.org/proper/commons-math/download_math.cgi LoesInterpolator.java\n     * - https://gist.github.com/avibryant/1151823\n     */\n    _loess(data, bandwidth) {\n        var bandwidth = bandwidth || 0.25 ;\n\n        var xval = data.map(function(pair){return pair[0]});\n        var distinctX =  array_unique(xval) ;\n        if (  2 / distinctX.length  > bandwidth ) {\n            bandwidth = Math.min( 2 / distinctX.length, 1 );\n            console.warn(\"updated bandwith to \"+ bandwidth);\n        }\n\n        var yval = data.map(function(pair){return pair[1]});\n\n        function array_unique(values) {\n            var o = {}, i, l = values.length, r = [];\n            for(i=0; i<l;i+=1) o[values[i]] = values[i];\n            for(i in o) r.push(o[i]);\n            return r;\n        }\n\n        function tricube(x) {\n            var tmp = 1 - x * x * x;\n            return tmp * tmp * tmp;\n        }\n\n        var res = [];\n\n        var left = 0;\n        var right = Math.floor(bandwidth * xval.length) - 1;\n\n        for(var i in xval)\n        {\n            var x = xval[i];\n\n            if (i > 0) {\n                if (right < xval.length - 1 &&\n                    xval[right+1] - xval[i] < xval[i] - xval[left]) {\n                    left++;\n                    right++;\n                }\n            }\n            //console.debug(\"left: \"+left  + \" right: \" + right );\n            var edge;\n            if (xval[i] - xval[left] > xval[right] - xval[i])\n                edge = left;\n            else\n                edge = right;\n            var denom = Math.abs(1.0 / (xval[edge] - x));\n            var sumWeights = 0;\n            var sumX = 0, sumXSquared = 0, sumY = 0, sumXY = 0;\n\n            var k = left;\n            while(k <= right)\n            {\n                var xk = xval[k];\n                var yk = yval[k];\n                var dist;\n                if (k < i) {\n                    dist = (x - xk);\n                } else {\n                    dist = (xk - x);\n                }\n                var w = tricube(dist * denom);\n                var xkw = xk * w;\n                sumWeights += w;\n                sumX += xkw;\n                sumXSquared += xk * xkw;\n                sumY += yk * w;\n                sumXY += yk * xkw;\n                k++;\n            }\n\n            var meanX = sumX / sumWeights;\n            //console.debug(meanX);\n            var meanY = sumY / sumWeights;\n            var meanXY = sumXY / sumWeights;\n            var meanXSquared = sumXSquared / sumWeights;\n\n            var beta;\n            if (meanXSquared == meanX * meanX)\n                beta = 0;\n            else\n                beta = (meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);\n\n            var alpha = meanY - beta * meanX;\n            res[i] = beta * x + alpha;\n        }\n        console.debug(res);\n        return {\n            equation: \"\" ,\n            points: xval.map(function(x,i){return [x, res[i]]}),\n            string:\"\"\n        } ;\n    }\n\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    gaussianElimination(a, o) {\n        var i = 0, j = 0, k = 0, maxrow = 0, tmp = 0, n = a.length - 1, x = new Array(o);\n        for (i = 0; i < n; i++) {\n            maxrow = i;\n            for (j = i + 1; j < n; j++) {\n                if (Math.abs(a[i][j]) > Math.abs(a[i][maxrow]))\n                    maxrow = j;\n            }\n            for (k = i; k < n + 1; k++) {\n                tmp = a[k][i];\n                a[k][i] = a[k][maxrow];\n                a[k][maxrow] = tmp;\n            }\n            for (j = i + 1; j < n; j++) {\n                for (k = n; k >= i; k--) {\n                    a[k][j] -= a[k][i] * a[i][j] / a[i][i];\n                }\n            }\n        }\n        for (j = n - 1; j >= 0; j--) {\n            tmp = 0;\n            for (k = j + 1; k < n; k++)\n                tmp += a[k][j] * x[k];\n            x[j] = (a[n][j] - tmp) / a[j][j];\n        }\n        return (x);\n    }\n\n    /**\n     * @author Ignacio Vazquez\n     * See http://en.wikipedia.org/wiki/Coefficient_of_determination for theaorical details\n     */\n    coefficientOfDetermination (data, pred ) {\n\n        var i = 0;\n        var SSE = 0;\n        var SSYY = 0;\n        var mean = 0;\n\n        // Calc the mean\n        for (i = 0 ; i < data.length ; i++ ){\n            mean +=  data[i][1] / data.length ;\n        }\n\n        // Calc the coefficent of determination\n        for (i = 0 ; i < data.length ; i++ ){\n            SSYY +=  Math.pow( data[i][1] -  pred[i][1] , 2) ;\n            SSE +=  Math.pow( data[i][1] -  mean , 2) ;\n        }\n        return  1 - ( SSYY / SSE)  ;\n    }\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let componentState = componentStates[i];\n                    if (componentState.isSubmit && componentState.studentData) {\n\n                        let studentData = componentState.studentData;\n\n                        // component state is a submission\n                        if (this.hasSeriesData(studentData) || this.hasTrialData(studentData)) {\n                            // there is series data so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData) {\n                    if (this.hasSeriesData(studentData) || this.hasTrialData(studentData)) {\n                        // there is series data so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if student data contains any series data\n     * @param studentData student data from a component state\n     * @returns whether the student data has series data\n     */\n    hasSeriesData(studentData) {\n        let result = false;\n\n        let series = studentData.series;\n        if (series && series.length) {\n            // check for any data in any series\n            for (let i = 0, l = series.length; i < l; i++) {\n                let data = series[i].data;\n\n                if (data && data.length) {\n                    // there is series data so the component is completed\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the student data contains any trial data\n     * @param studentData student data from a component state\n     * @return whether the student data has trial data\n     */\n    hasTrialData(studentData) {\n        var result = false;\n\n        if (studentData != null) {\n            var trials = studentData.trials;\n\n            if (trials != null) {\n\n                // loop through all the trials\n                for (var t = 0; t < trials.length; t++) {\n\n                    var trial = trials[t];\n\n                    if (trial != null) {\n                        var series = trial.series;\n\n                        // loop through all the series\n                        for (var s = 0; s < series.length; s++) {\n\n                            // get a single series\n                            var singleSeries = series[s];\n\n                            if (singleSeries != null) {\n\n                                // get the data from the single series\n                                var data = singleSeries.data;\n\n                                if (data != null && data.length > 0) {\n                                    // the single series has data\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n\n    /**\n     * Check if the component state has student work. Sometimes a component\n     * state may be created if the student visits a component but doesn't\n     * actually perform any work. This is where we will check if the student\n     * actually performed any work.\n     * @param componentState the component state object\n     * @return whether the component state has any work\n     */\n    componentStateHasStudentWork(componentState) {\n        let hasStudentWork = false;\n\n        if (componentState != null) {\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                if (studentData.version == 1) {\n                    /*\n                     * this is the old graph student data format where the\n                     * student data can contain multiple series.\n                     */\n\n                     // check if any of the series has a data point\n                     if (this.anySeriesHasDataPoint(studentData.series)) {\n\n                         // at least one of the series has a data point\n                         hasStudentWork = true;\n                     }\n                } else {\n                    /*\n                     * this is the new graph student data format where the\n                     * student data can contain multiple trials and each trial\n                     * can contain multiple series.\n                     */\n\n                    // check if any of the trials has a data point\n                    if (this.anyTrialHasDataPoint(studentData.trials)) {\n\n                        /*\n                         * at least one of the trials has a series that has a\n                         * data point\n                         */\n                        hasStudentWork = true;\n                    }\n                }\n            }\n        }\n\n        return hasStudentWork;\n    }\n\n    /**\n     * Check if any of the trials contains a data point\n     * @param trials an array of trials\n     * @return whether any of the trials contains a data point\n     */\n    anyTrialHasDataPoint(trials) {\n        let hasDataPoint = false;\n\n        if (trials != null) {\n\n            // loop through all the trials\n            for (let t = 0; t < trials.length; t++) {\n                let trial = trials[t];\n\n                // check if the trial contains a data point\n                hasDataPoint = this.trialHasDataPoint(trial);\n\n                if (hasDataPoint) {\n                    // the trial has a data point so we are done looking\n                    break;\n                }\n            }\n        }\n\n        return hasDataPoint;\n    }\n\n    /**\n     * Check if a trial has a data point\n     * @param trial a trial object which can contain multiple series\n     * @return whether the trial contains a data point\n     */\n    trialHasDataPoint(trial) {\n        let hasDataPoint = false;\n\n        if (trial != null) {\n            let series = trial.series;\n\n            if (series != null) {\n\n                // loop through all the series\n                for (let s = 0; s < series.length; s++) {\n\n                    let singleSeries = series[s];\n\n                    if (singleSeries != null) {\n\n                        // check if the series contains a data point\n                        hasDataPoint = this.seriesHasDataPoint(singleSeries);\n\n                        if (hasDataPoint) {\n                            // the series has a data point so we are done looking\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return hasDataPoint;\n    }\n\n    /**\n     * Check if an array of series has any data point\n     * @param multipleSeries an array of series\n     * @return whether any of the series has a data point\n     */\n    anySeriesHasDataPoint(multipleSeries) {\n\n        let hasDataPoint = false;\n\n        if (multipleSeries != null) {\n\n            // loop through all the series\n            for (let s = 0; s < multipleSeries.length; s++) {\n                let singleSeries = multipleSeries[s];\n\n                if (singleSeries != null) {\n\n                    // check if the series has a data point\n                    hasDataPoint = this.seriesHasDataPoint(singleSeries);\n\n                    if (hasDataPoint) {\n                        // the series has a data point so we are done looking\n                        break;\n                    }\n                }\n            }\n        }\n\n        return hasDataPoint;\n    }\n\n    /**\n     * Check if a series has a data point\n     * @param singleSeries a series object\n     * @return whether the series object has any data points\n     */\n    seriesHasDataPoint(singleSeries) {\n        let hasDataPoint = false;\n\n        if (singleSeries != null) {\n\n            // get the data from the series\n            let data = singleSeries.data;\n\n            if (data.length > 0) {\n                // the series has a data point\n                hasDataPoint = true;\n            }\n        }\n\n        return hasDataPoint;\n    }\n\n    /**\n     * Determine whether the component has been authored to show classmate work\n     * @param componentContent the component content\n     * @return whether to show the classmate work in this component\n     */\n    showClassmateWork(componentContent) {\n\n        if (componentContent != null && componentContent.importWork != null && componentContent.importWork.components != null) {\n\n            let components = componentContent.importWork.components;\n\n            // loop through all the components that we are importing from\n            for (let c = 0; c < components.length; c++) {\n                let component = components[c];\n\n                if (component != null) {\n                    if (component.showClassmateWork) {\n                        // the component is importing work from classmates\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\nGraphService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default GraphService;\n"]}