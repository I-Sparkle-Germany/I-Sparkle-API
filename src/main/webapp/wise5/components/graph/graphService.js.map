{"version":3,"sources":["graphService.es6"],"names":[],"mappings":"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","file":"graphService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass GraphService extends NodeService {\n    constructor(StudentDataService) {\n        super();\n        this.StudentDataService = StudentDataService;\n    }\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        return result;\n    };\n\n    /**\n     * Get the student work as html\n     * @param nodeState the node state\n     */\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.studentData;\n\n            if (response != null) {\n                studentWorkAsHTML = '<p>' + response + '</p>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Graph') {\n                // the other component is an Graph component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Code extracted from https://github.com/streamlinesocial/highcharts-regression\n     * Loop through all the series that are passed in and find the ones that we\n     * need to generate a regression series for. Return the regression series\n     * that are generated in an array.\n     * @param series an array of series\n     * @return an array of regression series\n     */\n    generateRegressionSeries(series) {\n        var regressionSeries = [];\n        var i = 0 ;\n        for (i = 0 ; i < series.length ; i++){\n            var s = series[i];\n            if ( s.regression ) {\n                s.regressionSettings =  s.regressionSettings || {} ;\n                var regressionType = s.regressionSettings.type || \"linear\" ;\n                var regression;\n\n                var color = s.color;\n\n                if (s.regressionSettings.color != null) {\n                    color = s.regressionSettings.color;\n                }\n\n                var extraSerie = {\n                    data:[],\n                    color: color ,\n                    yAxis: s.yAxis ,\n                    lineWidth: 2,\n                    marker: {enabled: false} ,\n                    isRegressionLine: true,\n                    name: s.regressionSettings.label || \"Equation: %eq\"\n                };\n\n\n                extraSerie.type = \"spline\";\n\n                if (regressionType == \"linear\") {\n                    regression = this._linear(s.data, s.regressionSettings) ;\n                    extraSerie.type = \"line\";\n                }else if (regressionType == \"exponential\") {\n                    regression = this._exponential(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"polynomial\"){\n                    regression = this._polynomial(s.data, 2, s.regressionSettings) ;\n                }else if (regressionType == \"logarithmic\"){\n                    regression = this._logarithmic(s.data, s.regressionSettings) ;\n                }else if (regressionType == \"loess\"){\n                    var loessSmooth = s.regressionSettings.loessSmooth || 25\n                    regression = this._loess(s.data, loessSmooth/100) ;\n                }else {\n                    console.error(\"Invalid regression type: \" , regressionType) ;\n                    break;\n                }\n\n                regression.rSquared =  this.coefficientOfDetermination(s.data, regression.points).toFixed(2);\n                regression.rValue = Math.sqrt(regression.rSquared,2).toFixed(2) ;\n                extraSerie.data = regression.points ;\n                extraSerie.name = extraSerie.name.replace(\"%r2\",regression.rSquared);\n                extraSerie.name = extraSerie.name.replace(\"%r\",regression.rValue);\n                extraSerie.name = extraSerie.name.replace(\"%eq\",regression.string);\n\n                extraSerie.regressionOutputs = regression ;\n\n                regressionSeries.push(extraSerie);\n            }\n        }\n\n        return regressionSeries;\n    };\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _exponential(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; // X\n                sum[1] += data[n][1]; // Y\n                sum[2] += data[n][0] * data[n][0] * data[n][1]; // XXY\n                sum[3] += data[n][1] * Math.log(data[n][1]); // Y Log Y\n                sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]); //YY Log Y\n                sum[5] += data[n][0] * data[n][1]; //XY\n            }\n        }\n\n        var denominator = (sum[1] * sum[2] - sum[5] * sum[5]);\n        var A = Math.pow(Math.E, (sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\n        var B = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, A * Math.pow(Math.E, B * x)];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A * Math.pow(Math.E, B * data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'e^(' + Math.round(B*100) / 100 + 'x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     * Human readable formulas:\n     *\n     *              N * Σ(XY) - Σ(X)\n     * intercept = ---------------------\n     *              N * Σ(X^2) - Σ(X)^2\n     *\n     * correlation = N * Σ(XY) - Σ(X) * Σ (Y) / √ (  N * Σ(X^2) - Σ(X) ) * ( N * Σ(Y^2) - Σ(Y)^2 ) ) )\n     *\n     */\n    _linear(data, regressionSettings) {\n        var sum = [0, 0, 0, 0, 0], n = 0, results = [], N = data.length;\n\n        for (; n < data.length; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += data[n][0]; //Σ(X)\n                sum[1] += data[n][1]; //Σ(Y)\n                sum[2] += data[n][0] * data[n][0]; //Σ(X^2)\n                sum[3] += data[n][0] * data[n][1]; //Σ(XY)\n                sum[4] += data[n][1] * data[n][1]; //Σ(Y^2)\n            }\n        }\n\n        var gradient = (n * sum[3] - sum[0] * sum[1]) / (n * sum[2] - sum[0] * sum[0]);\n        var intercept = (sum[1] / n) - (gradient * sum[0]) / n;\n        //var correlation = (n * sum[3] - sum[0] * sum[1]) / Math.sqrt((n * sum[2] - sum[0] * sum[0]) * (n * sum[4] - sum[1] * sum[1]));\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                var coordinate = [x, x * gradient + intercept];\n                results.push(coordinate);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], data[i][0] * gradient + intercept];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(gradient*100) / 100 + 'x + ' + Math.round(intercept*100) / 100;\n        return {equation: [gradient, intercept], points: results, string: string};\n    }\n\n    /**\n     *  Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _logarithmic(data, regressionSettings) {\n        var sum = [0, 0, 0, 0], n = 0, results = [],mean = 0 ;\n\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += data[n][1] * Math.log(data[n][0]);\n                sum[2] += data[n][1];\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = (sum[2] - B * sum[0]) / n;\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n\n                if(x > 0) {\n                    var y = A + B * Math.log(x);\n\n                    if(!isNaN(y)) {\n                        var coordinate = [x, y];\n                        results.push(coordinate);\n                    }\n                }\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var coordinate = [data[i][0], A + B * Math.log(data[i][0])];\n                results.push(coordinate);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + ' + ' + Math.round(B*100) / 100 + ' ln(x)';\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _power(data) {\n        var sum = [0, 0, 0, 0], n = 0, results = [];\n\n        for (len = data.length; n < len; n++) {\n            if (data[n]['x']) {\n                data[n][0] = data[n]['x'];\n                data[n][1] = data[n]['y'];\n            }\n            if (data[n][1]) {\n                sum[0] += Math.log(data[n][0]);\n                sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\n                sum[2] += Math.log(data[n][1]);\n                sum[3] += Math.pow(Math.log(data[n][0]), 2);\n            }\n        }\n\n        var B = (n * sum[1] - sum[2] * sum[0]) / (n * sum[3] - sum[0] * sum[0]);\n        var A = Math.pow(Math.E, (sum[2] - B * sum[0]) / n);\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var coordinate = [data[i][0], A * Math.pow(data[i][0] , B)];\n            results.push(coordinate);\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ' + Math.round(A*100) / 100 + 'x^' + Math.round(B*100) / 100;\n\n        return {equation: [A, B], points: results, string: string};\n    }\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    _polynomial(data, order, regressionSettings) {\n        if(typeof order == 'undefined'){\n            order = 2;\n        }\n        var lhs = [], rhs = [], results = [], a = 0, b = 0, i = 0, k = order + 1;\n\n        for (; i < k; i++) {\n            for (var l = 0, len = data.length; l < len; l++) {\n                if (data[l]['x']) {\n                    data[l][0] = data[l]['x'];\n                    data[l][1] = data[l]['y'];\n                }\n                if (data[l][1]) {\n                    a += Math.pow(data[l][0], i) * data[l][1];\n                }\n            }\n            lhs.push(a), a = 0;\n            var c = [];\n            for (var j = 0; j < k; j++) {\n                for (var l = 0, len = data.length; l < len; l++) {\n                    if (data[l][1]) {\n                        b += Math.pow(data[l][0], i + j);\n                    }\n                }\n                c.push(b), b = 0;\n            }\n            rhs.push(c);\n        }\n        rhs.push(lhs);\n\n        var equation = this.gaussianElimination(rhs, k);\n\n        if(regressionSettings != null &&\n            regressionSettings.xMin != null &&\n            regressionSettings.xMax != null &&\n            regressionSettings.numberOfPoints != null) {\n\n            //regression settings have been provided\n\n            /*\n             * get the xMin and xMax so we know over what range to plot\n             * regression points for\n             */\n            var xMin = regressionSettings.xMin;\n            var xMax = regressionSettings.xMax;\n\n            //get the number of points that should be plotted on the regression line\n            var numberOfPoints = regressionSettings.numberOfPoints;\n\n            //get the distance between the xMin and xMax\n            var xSpan = xMax - xMin;\n\n            //calculate the points on the regression line\n            for (var i = 0; i < numberOfPoints; i++) {\n                var x = xMin + xSpan * (i / numberOfPoints);\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(x, w);\n                }\n                results.push([x, answer]);\n            }\n        } else {\n            /*\n             * regression settings have not been provided so we will use the default\n             * x values for the regression points\n             */\n            for (var i = 0, len = data.length; i < len; i++) {\n                var answer = 0;\n                for (var w = 0; w < equation.length; w++) {\n                    answer += equation[w] * Math.pow(data[i][0], w);\n                }\n                results.push([data[i][0], answer]);\n            }\n        }\n\n        results.sort(function(a,b){\n            if(a[0] > b[0]){ return 1}\n            if(a[0] < b[0]){ return -1}\n            return 0;\n        });\n\n        var string = 'y = ';\n\n        for(var i = equation.length-1; i >= 0; i--){\n            if(i > 1) string += Math.round(equation[i]*100) / 100 + 'x^' + i + ' + ';\n            else if (i == 1) string += Math.round(equation[i]*100) / 100 + 'x' + ' + ';\n            else string += Math.round(equation[i]*100) / 100;\n        }\n\n        return {equation: equation, points: results, string: string};\n    }\n\n    /**\n     * @author: Ignacio Vazquez\n     * Based on\n     * - http://commons.apache.org/proper/commons-math/download_math.cgi LoesInterpolator.java\n     * - https://gist.github.com/avibryant/1151823\n     */\n    _loess(data, bandwidth) {\n        var bandwidth = bandwidth || 0.25 ;\n\n        var xval = data.map(function(pair){return pair[0]});\n        var distinctX =  array_unique(xval) ;\n        if (  2 / distinctX.length  > bandwidth ) {\n            bandwidth = Math.min( 2 / distinctX.length, 1 );\n            console.warn(\"updated bandwith to \"+ bandwidth);\n        }\n\n        var yval = data.map(function(pair){return pair[1]});\n\n        function array_unique(values) {\n            var o = {}, i, l = values.length, r = [];\n            for(i=0; i<l;i+=1) o[values[i]] = values[i];\n            for(i in o) r.push(o[i]);\n            return r;\n        }\n\n        function tricube(x) {\n            var tmp = 1 - x * x * x;\n            return tmp * tmp * tmp;\n        }\n\n        var res = [];\n\n        var left = 0;\n        var right = Math.floor(bandwidth * xval.length) - 1;\n\n        for(var i in xval)\n        {\n            var x = xval[i];\n\n            if (i > 0) {\n                if (right < xval.length - 1 &&\n                    xval[right+1] - xval[i] < xval[i] - xval[left]) {\n                    left++;\n                    right++;\n                }\n            }\n            //console.debug(\"left: \"+left  + \" right: \" + right );\n            var edge;\n            if (xval[i] - xval[left] > xval[right] - xval[i])\n                edge = left;\n            else\n                edge = right;\n            var denom = Math.abs(1.0 / (xval[edge] - x));\n            var sumWeights = 0;\n            var sumX = 0, sumXSquared = 0, sumY = 0, sumXY = 0;\n\n            var k = left;\n            while(k <= right)\n            {\n                var xk = xval[k];\n                var yk = yval[k];\n                var dist;\n                if (k < i) {\n                    dist = (x - xk);\n                } else {\n                    dist = (xk - x);\n                }\n                var w = tricube(dist * denom);\n                var xkw = xk * w;\n                sumWeights += w;\n                sumX += xkw;\n                sumXSquared += xk * xkw;\n                sumY += yk * w;\n                sumXY += yk * xkw;\n                k++;\n            }\n\n            var meanX = sumX / sumWeights;\n            //console.debug(meanX);\n            var meanY = sumY / sumWeights;\n            var meanXY = sumXY / sumWeights;\n            var meanXSquared = sumXSquared / sumWeights;\n\n            var beta;\n            if (meanXSquared == meanX * meanX)\n                beta = 0;\n            else\n                beta = (meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);\n\n            var alpha = meanY - beta * meanX;\n            res[i] = beta * x + alpha;\n        }\n        console.debug(res);\n        return {\n            equation: \"\" ,\n            points: xval.map(function(x,i){return [x, res[i]]}),\n            string:\"\"\n        } ;\n    }\n\n\n    /**\n     * Code extracted from https://github.com/Tom-Alexander/regression-js/\n     */\n    gaussianElimination(a, o) {\n        var i = 0, j = 0, k = 0, maxrow = 0, tmp = 0, n = a.length - 1, x = new Array(o);\n        for (i = 0; i < n; i++) {\n            maxrow = i;\n            for (j = i + 1; j < n; j++) {\n                if (Math.abs(a[i][j]) > Math.abs(a[i][maxrow]))\n                    maxrow = j;\n            }\n            for (k = i; k < n + 1; k++) {\n                tmp = a[k][i];\n                a[k][i] = a[k][maxrow];\n                a[k][maxrow] = tmp;\n            }\n            for (j = i + 1; j < n; j++) {\n                for (k = n; k >= i; k--) {\n                    a[k][j] -= a[k][i] * a[i][j] / a[i][i];\n                }\n            }\n        }\n        for (j = n - 1; j >= 0; j--) {\n            tmp = 0;\n            for (k = j + 1; k < n; k++)\n                tmp += a[k][j] * x[k];\n            x[j] = (a[n][j] - tmp) / a[j][j];\n        }\n        return (x);\n    }\n\n    /**\n     * @author Ignacio Vazquez\n     * See http://en.wikipedia.org/wiki/Coefficient_of_determination for theaorical details\n     */\n    coefficientOfDetermination (data, pred ) {\n\n        var i = SSE = SSYY =  mean = 0;\n\n        // Calc the mean\n        for (i = 0 ; i < data.length ; i++ ){\n            mean +=  data[i][1] / data.length ;\n        }\n\n        // Calc the coefficent of determination\n        for (i = 0 ; i < data.length ; i++ ){\n            SSYY +=  Math.pow( data[i][1] -  pred[i][1] , 2) ;\n            SSE +=  Math.pow( data[i][1] -  mean , 2) ;\n        }\n        return  1 - ( SSYY / SSE)  ;\n    }\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var series = studentData.series;\n\n                    if (series != null) {\n                        // there is a series so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nGraphService.$inject = [\n    'StudentDataService'\n];\n\nexport default GraphService;"]}