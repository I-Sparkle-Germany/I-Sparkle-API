{"version":3,"sources":["htmlController.es6"],"names":[],"mappings":"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","file":"htmlController.js","sourcesContent":["class HTMLController {\n    constructor($scope,\n                $state,\n                $stateParams,\n                $sce,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$sce = $sce;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        this.mode = $scope.mode;\n\n        // perform setup of this component\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = $scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = $scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = $scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            } else if (this.mode === 'grading') {\n                /*\n                 * do not display the html in the grading tool. we may want to\n                 * change this in the future to allow the teacher to toggle\n                 * seeing the html on and off.\n                 */\n                this.componentContent.html = '';\n            } else if (this.mode === 'student') {\n                if (this.componentContent != null) {\n                    this.html = this.componentContent.html;\n                }\n\n                if ($scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    $scope.$parent.registerComponentController($scope, this.componentContent);\n                }\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                if (this.componentContent != null) {\n                    this.componentContent = component.html;\n                }\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                $scope.$parent.registerComponentController($scope, this.componentContent);\n            } else {\n                // this is a regular component\n                /*\n                if (this.componentContent != null) {\n                    this.html = this.componentContent.html;\n                }\n\n                if ($scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    $scope.$parent.registerComponentController($scope, this.componentContent);\n                }\n                */\n            }\n        }\n        \n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n            \n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n                \n                // obtain the image objects\n                var imageObjects = this.getImageObjects();\n                \n                if (imageObjects != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObjects = imageObjects;\n                    \n                    // fire an event that contains the image objects\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n    }\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n    \n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObjects() {\n        var imageObjects = [];\n        \n        // get the image elements in the scope\n        let componentId = this.componentId;\n        var imageElements = angular.element('#' + componentId + ' img');\n        \n        if (imageElements != null) {\n            \n            // loop through all the image elements\n            for (var i = 0; i < imageElements.length; i++) {\n                var imageElement = imageElements[i];\n                \n                if (imageElement != null) {\n\n                    // create an image object\n                    var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n                    imageObjects.push(imageObject);\n                }\n            }\n        }\n        \n        return imageObjects;\n    }\n}\n\nHTMLController.$inject = [\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$sce',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default HTMLController;\n"]}