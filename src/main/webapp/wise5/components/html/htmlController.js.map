{"version":3,"sources":["htmlController.es6"],"names":["HTMLController","$scope","$state","$stateParams","$sce","ConfigService","NodeService","ProjectService","StudentDataService","UtilService","nodeId","componentId","componentContent","authoringComponentContent","isShowPreviousWork","mode","currentNode","getCurrentNode","id","originalComponentContent","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","html","$parent","registerComponentController","$on","event","args","imageObjects","getImageObjects","$emit","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","toJson","imageElements","element","i","length","imageElement","imageObject","getImageObjectFromImageElement","push","$inject"],"mappings":"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","file":"htmlController.js","sourcesContent":["class HTMLController {\n    constructor($scope,\n                $state,\n                $stateParams,\n                $sce,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$sce = $sce;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        this.mode = $scope.mode;\n\n        // perform setup of this component\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = $scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = $scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            } else if (this.mode === 'grading') {\n                /*\n                 * do not display the html in the grading tool. we may want to\n                 * change this in the future to allow the teacher to toggle\n                 * seeing the html on and off.\n                 */\n                this.componentContent.html = '';\n            } else if (this.mode === 'student') {\n                if (this.componentContent != null) {\n                    this.html = this.componentContent.html;\n                }\n\n                if ($scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    $scope.$parent.registerComponentController($scope, this.componentContent);\n                }\n            }\n        }\n        \n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n            \n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n                \n                // obtain the image objects\n                var imageObjects = this.getImageObjects();\n                \n                if (imageObjects != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObjects = imageObjects;\n                    \n                    // fire an event that contains the image objects\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n    }\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObjects() {\n        var imageObjects = [];\n        \n        // get the image elements in the scope\n        let componentId = this.componentId;\n        var imageElements = angular.element('#' + componentId + ' img');\n        \n        if (imageElements != null) {\n            \n            // loop through all the image elements\n            for (var i = 0; i < imageElements.length; i++) {\n                var imageElement = imageElements[i];\n                \n                if (imageElement != null) {\n\n                    // create an image object\n                    var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n                    imageObjects.push(imageObject);\n                }\n            }\n        }\n        \n        return imageObjects;\n    }\n}\n\nHTMLController.$inject = [\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$sce',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default HTMLController;\n"]}