{"version":3,"sources":["htmlController.es6"],"names":[],"mappings":"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","file":"htmlController.js","sourcesContent":["class HTMLController {\n    constructor($scope,\n                $state,\n                $stateParams,\n                $sce,\n                ConfigService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$sce = $sce;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        this.mode = $scope.mode;\n\n        // perform setup of this component\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = $scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = $scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = $scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            } else if (this.mode === 'grading') {\n                /*\n                 * do not display the html in the grading tool. we may want to\n                 * change this in the future to allow the teacher to toggle\n                 * seeing the html on and off.\n                 */\n                this.componentContent.html = '';\n            } else if (this.mode === 'student') {\n                if (this.componentContent != null) {\n                    this.html = this.componentContent.html;\n                }\n\n                if ($scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    $scope.$parent.registerComponentController($scope, this.componentContent);\n                }\n            }\n        }\n        \n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n            \n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n                \n                // obtain the image objects\n                var imageObjects = this.getImageObjects();\n                \n                if (imageObjects != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObjects = imageObjects;\n                    \n                    // fire an event that contains the image objects\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n    }\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n    \n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObjects() {\n        var imageObjects = [];\n        \n        // get the image elements in the scope\n        let componentId = this.componentId;\n        var imageElements = angular.element('#' + componentId + ' img');\n        \n        if (imageElements != null) {\n            \n            // loop through all the image elements\n            for (var i = 0; i < imageElements.length; i++) {\n                var imageElement = imageElements[i];\n                \n                if (imageElement != null) {\n\n                    // create an image object\n                    var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n                    imageObjects.push(imageObject);\n                }\n            }\n        }\n        \n        return imageObjects;\n    }\n}\n\nHTMLController.$inject = [\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$sce',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default HTMLController;\n"]}