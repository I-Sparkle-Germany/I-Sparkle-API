{"version":3,"sources":["htmlService.es6"],"names":["HTMLService","StudentDataService","UtilService","component","id","generateKey","type","html","componentToCopy","componentStates","componentEvents","nodeEvents","result","e","length","event","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,W;;;AACF,yBAAYC,kBAAZ,EACYC,WADZ,EACyB;AAAA;;AAAA;;AAErB,cAAKD,kBAAL,GAA0BA,kBAA1B;AACA,cAAKC,WAAL,GAAmBA,WAAnB;AAHqB;AAIxB;;AAED;;;;;;;;0CAIkB;;AAEd,gBAAIC,YAAY,EAAhB;AACAA,sBAAUC,EAAV,GAAe,KAAKF,WAAL,CAAiBG,WAAjB,EAAf;AACAF,sBAAUG,IAAV,GAAiB,MAAjB;AACAH,sBAAUI,IAAV,GAAiB,iBAAjB;;AAEA,mBAAOJ,SAAP;AACH;;AAED;;;;;;;sCAIcK,e,EAAiB;;AAE3B,gBAAIL,YAAY,EAAhB;AACAA,sBAAUC,EAAV,GAAe,KAAKF,WAAL,CAAiBG,WAAjB,EAAf;AACAF,sBAAUG,IAAV,GAAiB,MAAjB;AACAH,sBAAUI,IAAV,GAAiBC,gBAAgBD,IAAjC;;AAEA,mBAAOJ,SAAP;AACH;;AAED;;;;;;;;;;;oCAQYA,S,EAAWM,e,EAAiBC,e,EAAiBC,U,EAAY;AACjE,gBAAIC,SAAS,KAAb;;AAEA,gBAAID,cAAc,IAAlB,EAAwB;;AAEpB;AACA,qBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,WAAWG,MAA/B,EAAuCD,GAAvC,EAA4C;;AAExC;AACA,wBAAIE,QAAQJ,WAAWE,CAAX,CAAZ;;AAEA,wBAAIE,SAAS,IAAT,IAAiBA,MAAMA,KAAN,KAAgB,aAArC,EAAoD;AAChDH,iCAAS,IAAT;AACA;AACH;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;;;yCAOiBT,S,EAAW;AACxB,mBAAO,KAAP;AACH;;;;;;AAGLH,YAAYgB,OAAZ,GAAsB,CAClB,oBADkB,EAElB,aAFkB,CAAtB;;kBAKehB,W","file":"htmlService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass HTMLService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create an HTML component object\n     * @returns a new HTML component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'HTML';\n        component.html = 'Enter html here';\n\n        return component;\n    }\n\n    /**\n     * Copies an existing HTML component object\n     * @returns a copied HTML component object\n     */\n    copyComponent(componentToCopy) {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'HTML';\n        component.html = componentToCopy.html;\n\n        return component;\n    }\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (nodeEvents != null) {\n\n            // loop through all the events\n            for (var e = 0; e < nodeEvents.length; e++) {\n\n                // get an event\n                var event = nodeEvents[e];\n\n                if (event != null && event.event === 'nodeEntered') {\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n    \n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the \n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return false;\n    }\n}\n\nHTMLService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default HTMLService;\n"]}