{"version":3,"sources":["labelAuthoringController.es6"],"names":["LabelAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","authoringComponentContentJSONString","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","enableCircles","authoringComponentContent","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","canvasWidth","canvasHeight","submitCounter","canvas","$","canvasId","empty","attr","css","append","backgroundImage","setupCanvas","canCreateLabels","isNewLabelButtonVisible","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","angular","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","newLabel","color","pointX","pointY","textX","textY","canEdit","canDelete","labels","push","index","label","selectedLabelText","textString","answer","confirm","splice","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","newConnectedComponent","updateOn","connectedComponents","show","$emit","setShowSubmitButtonValue","getLabelData","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","tags","tag","length","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","importWorkAsBackground","componentType","authoringGetConnectedComponentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","charactersPerLine","spaceInbetweenLines","fontSize","$inject"],"mappings":"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","file":"labelAuthoringController.js","sourcesContent":["'use strict';\n\nimport LabelController from \"./labelController\";\nimport Fabric from 'fabric';\nimport html2canvas from 'html2canvas';\n\nclass LabelAuthoringController extends LabelController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              $window,\n              AnnotationService,\n              ConfigService,\n              LabelService,\n              NodeService,\n              NotebookService,\n              OpenResponseService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      LabelService,\n      NodeService,\n      NotebookService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    if (this.componentContent.enableCircles == null) {\n      /*\n       * If this component was created before enableCircles was implemented,\n       * we will default it to true in the authoring so that the\n       * \"Enable Dots\" checkbox is checked.\n       */\n      this.authoringComponentContent.enableCircles = true;\n    }\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n      // the canvas width\n      this.canvasWidth = 800;\n\n      // the canvas height\n      this.canvasHeight = 600;\n\n      this.submitCounter = 0;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.enableCircles = this.componentContent.enableCircles;\n\n      if (this.canvas != null) {\n\n        // clear the parent to remove the canvas\n        $('#canvasParent_' + this.canvasId).empty();\n\n        // create a new canvas\n        var canvas = $('<canvas/>');\n        canvas.attr('id', this.canvasId);\n        canvas.css('border', '1px solid black');\n\n        // add the new canvas\n        $('#canvasParent_' + this.canvasId).append(canvas);\n\n        /*\n         * clear the background so that setupCanvas() can\n         * reapply the background\n         */\n        this.backgroundImage = null;\n\n        // setup the new canvas\n        this.setupCanvas();\n      }\n\n      if (this.componentContent.canCreateLabels != null) {\n        this.canCreateLabels = this.componentContent.canCreateLabels;\n      }\n\n      if (this.canCreateLabels) {\n        this.isNewLabelButtonVisible = true;\n      } else {\n        this.isNewLabelButtonVisible = false;\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the component content\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a label in the authoring view\n   */\n  authoringAddLabelClicked() {\n\n    // create the new label\n    var newLabel = {};\n    newLabel.text = this.$translate('label.enterTextHere');\n    newLabel.color = 'blue';\n    newLabel.pointX = 100;\n    newLabel.pointY = 100;\n    newLabel.textX = 200;\n    newLabel.textY = 200;\n    newLabel.canEdit = false;\n    newLabel.canDelete = false;\n\n    // add the label to the array of labels\n    this.authoringComponentContent.labels.push(newLabel);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a label in the authoring view\n   * @param index the index of the label in the labels array\n   */\n  authoringDeleteLabelClicked(index, label) {\n\n    // get the label text\n    var selectedLabelText = label.textString;\n\n    // ask the author if they are sure they want to delete this label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n    if (answer) {\n      // the author answered yes to delete the label\n\n      // delete the label from the array\n      this.authoringComponentContent.labels.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Save the starter labels from the component authoring preview\n   */\n  saveStarterLabels() {\n\n    // ask the author if they are sure they want to save the starter labels\n    var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to save the starter labels\n\n      // get the labels in the component authoring preview\n      var labels = this.getLabelData();\n\n      /*\n       * make a copy of the labels so we don't run into any referencing issues\n       * later\n       */\n      var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\n\n      // sort the labels alphabetically by their text\n      starterLabels.sort(this.labelTextComparator);\n\n      // set the labels\n      this.authoringComponentContent.labels = starterLabels;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A comparator used to sort labels alphabetically\n   * It should be used like labels.sort(this.labelTextComparator);\n   * @param labelA a label object\n   * @param labelB a label object\n   * @return -1 if labelA comes before labelB\n   * 1 if labelB comes after labelB\n   * 0 of the labels are equal\n   */\n  labelTextComparator(labelA, labelB) {\n\n    if (labelA.text < labelB.text) {\n      // the labelA text comes before the labelB text alphabetically\n      return -1;\n    } else if (labelA.text > labelB.text) {\n      // the labelA text comes after the labelB text alphabetically\n      return 1;\n    } else {\n      /*\n       * the labelA text is the same as the labelB text so we will\n       * try to break the tie by looking at the color\n       */\n\n      if (labelA.color < labelB.color) {\n        // the labelA color text comes before the labelB color text alphabetically\n        return -1;\n      } else if (labelA.color > labelB.color) {\n        // the labelA color text comes after the labelB color text alphabetically\n        return 1;\n      } else {\n        /*\n         * the labelA color text is the same as the labelB color text so\n         * we will try to break the tie by looking at the pointX\n         */\n\n        if (labelA.pointX < labelB.pointX) {\n          // the labelA pointX is smaller than the labelB pointX\n          return -1;\n        } else if (labelA.pointX > labelB.pointX) {\n          // the labelA pointX is larger than the labelB pointX\n          return 1;\n        } else {\n          /*\n           * the labelA pointX is the same as the labelB pointX so\n           * we will try to break the tie by looking at the pointY\n           */\n\n          if (labelA.pointY < labelB.pointY) {\n            // the labelA pointY is smaller than the labelB pointY\n            return -1;\n          } else if (labelA.pointY > labelB.pointY) {\n            // the labelA pointY is larger than the labelB pointY\n            return 1;\n          } else {\n            /*\n             * all the label values are the same between labelA\n             * and labelB\n             */\n            return 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete all the starter labels\n   */\n  deleteStarterLabels() {\n\n    /*\n     * ask the author if they are sure they want to delete all the starter\n     * labels\n     */\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      // clear the labels array\n      this.authoringComponentContent.labels = [];\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Open a webpage in a new tab that shows a lot of the javascript colors\n   */\n  openColorViewer() {\n\n    // open the webpage in a new tab\n    this.$window.open('http://www.javascripter.net/faq/colornam.htm');\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n      componentType == 'Draw' ||\n      componentType == 'Embedded' ||\n      componentType == 'Graph' ||\n      componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (connectedComponent.importWorkAsBackground) {\n      // the checkbox is checked\n      connectedComponent.charactersPerLine = 100;\n      connectedComponent.spaceInbetweenLines = 40;\n      connectedComponent.fontSize = 16;\n    } else {\n      // the checkbox is not checked\n      delete connectedComponent.charactersPerLine;\n      delete connectedComponent.spaceInbetweenLines;\n      delete connectedComponent.fontSize;\n      delete connectedComponent.importWorkAsBackground;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n}\n\nLabelAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'LabelService',\n  'NodeService',\n  'NotebookService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelAuthoringController;\n"]}