{"version":3,"sources":["labelAuthoringController.es6"],"names":["LabelAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","componentContent","enableCircles","authoringComponentContent","$watch","bind","newValue","oldValue","injectAssetPaths","canvasWidth","canvasHeight","submitCounter","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","canvas","$","canvasId","empty","attr","css","append","backgroundImage","setupCanvas","canCreateLabels","isNewLabelButtonVisible","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","newLabel","text","$translate","color","pointX","pointY","textX","textY","canEdit","canDelete","labels","push","index","label","selectedLabelText","textString","answer","confirm","splice","params","isPopup","$broadcast","getLabelData","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","authoringSetImportWorkAsBackgroundIfApplicable","componentType","authoringGetConnectedComponentType","importWorkAsBackground","charactersPerLine","spaceInbetweenLines","fontSize","$inject"],"mappings":"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","file":"labelAuthoringController.js","sourcesContent":["'use strict';\n\nimport LabelController from \"./labelController\";\nimport Fabric from 'fabric';\nimport html2canvas from 'html2canvas';\n\nclass LabelAuthoringController extends LabelController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              $timeout,\n              $window,\n              AnnotationService,\n              ConfigService,\n              LabelService,\n              NodeService,\n              NotebookService,\n              OpenResponseService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      LabelService,\n      NodeService,\n      NotebookService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    if (this.componentContent.enableCircles == null) {\n      /*\n       * If this component was created before enableCircles was implemented,\n       * we will default it to true in the authoring so that the\n       * \"Enable Dots\" checkbox is checked.\n       */\n      this.authoringComponentContent.enableCircles = true;\n    }\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n      // the canvas width\n      this.canvasWidth = 800;\n\n      // the canvas height\n      this.canvasHeight = 600;\n\n      this.submitCounter = 0;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.enableCircles = this.componentContent.enableCircles;\n\n      if (this.canvas != null) {\n\n        // clear the parent to remove the canvas\n        $('#canvasParent_' + this.canvasId).empty();\n\n        // create a new canvas\n        var canvas = $('<canvas/>');\n        canvas.attr('id', this.canvasId);\n        canvas.css('border', '1px solid black');\n\n        // add the new canvas\n        $('#canvasParent_' + this.canvasId).append(canvas);\n\n        /*\n         * clear the background so that setupCanvas() can\n         * reapply the background\n         */\n        this.backgroundImage = null;\n\n        // setup the new canvas\n        this.setupCanvas();\n      }\n\n      if (this.componentContent.canCreateLabels != null) {\n        this.canCreateLabels = this.componentContent.canCreateLabels;\n      }\n\n      if (this.canCreateLabels) {\n        this.isNewLabelButtonVisible = true;\n      } else {\n        this.isNewLabelButtonVisible = false;\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * Add a label in the authoring view\n   */\n  authoringAddLabelClicked() {\n\n    // create the new label\n    var newLabel = {};\n    newLabel.text = this.$translate('label.enterTextHere');\n    newLabel.color = 'blue';\n    newLabel.pointX = 100;\n    newLabel.pointY = 100;\n    newLabel.textX = 200;\n    newLabel.textY = 200;\n    newLabel.canEdit = false;\n    newLabel.canDelete = false;\n\n    // add the label to the array of labels\n    this.authoringComponentContent.labels.push(newLabel);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a label in the authoring view\n   * @param index the index of the label in the labels array\n   */\n  authoringDeleteLabelClicked(index, label) {\n\n    // get the label text\n    var selectedLabelText = label.textString;\n\n    // ask the author if they are sure they want to delete this label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n    if (answer) {\n      // the author answered yes to delete the label\n\n      // delete the label from the array\n      this.authoringComponentContent.labels.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Save the starter labels from the component authoring preview\n   */\n  saveStarterLabels() {\n\n    // ask the author if they are sure they want to save the starter labels\n    var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to save the starter labels\n\n      // get the labels in the component authoring preview\n      var labels = this.getLabelData();\n\n      /*\n       * make a copy of the labels so we don't run into any referencing issues\n       * later\n       */\n      var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\n\n      // sort the labels alphabetically by their text\n      starterLabels.sort(this.labelTextComparator);\n\n      // set the labels\n      this.authoringComponentContent.labels = starterLabels;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A comparator used to sort labels alphabetically\n   * It should be used like labels.sort(this.labelTextComparator);\n   * @param labelA a label object\n   * @param labelB a label object\n   * @return -1 if labelA comes before labelB\n   * 1 if labelB comes after labelB\n   * 0 of the labels are equal\n   */\n  labelTextComparator(labelA, labelB) {\n\n    if (labelA.text < labelB.text) {\n      // the labelA text comes before the labelB text alphabetically\n      return -1;\n    } else if (labelA.text > labelB.text) {\n      // the labelA text comes after the labelB text alphabetically\n      return 1;\n    } else {\n      /*\n       * the labelA text is the same as the labelB text so we will\n       * try to break the tie by looking at the color\n       */\n\n      if (labelA.color < labelB.color) {\n        // the labelA color text comes before the labelB color text alphabetically\n        return -1;\n      } else if (labelA.color > labelB.color) {\n        // the labelA color text comes after the labelB color text alphabetically\n        return 1;\n      } else {\n        /*\n         * the labelA color text is the same as the labelB color text so\n         * we will try to break the tie by looking at the pointX\n         */\n\n        if (labelA.pointX < labelB.pointX) {\n          // the labelA pointX is smaller than the labelB pointX\n          return -1;\n        } else if (labelA.pointX > labelB.pointX) {\n          // the labelA pointX is larger than the labelB pointX\n          return 1;\n        } else {\n          /*\n           * the labelA pointX is the same as the labelB pointX so\n           * we will try to break the tie by looking at the pointY\n           */\n\n          if (labelA.pointY < labelB.pointY) {\n            // the labelA pointY is smaller than the labelB pointY\n            return -1;\n          } else if (labelA.pointY > labelB.pointY) {\n            // the labelA pointY is larger than the labelB pointY\n            return 1;\n          } else {\n            /*\n             * all the label values are the same between labelA\n             * and labelB\n             */\n            return 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete all the starter labels\n   */\n  deleteStarterLabels() {\n\n    /*\n     * ask the author if they are sure they want to delete all the starter\n     * labels\n     */\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      // clear the labels array\n      this.authoringComponentContent.labels = [];\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Open a webpage in a new tab that shows a lot of the javascript colors\n   */\n  openColorViewer() {\n\n    // open the webpage in a new tab\n    this.$window.open('http://www.javascripter.net/faq/colornam.htm');\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n      componentType == 'Draw' ||\n      componentType == 'Embedded' ||\n      componentType == 'Graph' ||\n      componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (connectedComponent.importWorkAsBackground) {\n      // the checkbox is checked\n      connectedComponent.charactersPerLine = 100;\n      connectedComponent.spaceInbetweenLines = 40;\n      connectedComponent.fontSize = 16;\n    } else {\n      // the checkbox is not checked\n      delete connectedComponent.charactersPerLine;\n      delete connectedComponent.spaceInbetweenLines;\n      delete connectedComponent.fontSize;\n      delete connectedComponent.importWorkAsBackground;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n}\n\nLabelAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'LabelService',\n  'NodeService',\n  'NotebookService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelAuthoringController;\n"]}