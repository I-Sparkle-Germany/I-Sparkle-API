{"version":3,"sources":["labelController.es6"],"names":[],"mappings":"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","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $injector,\n        $scope,\n        $timeout,\n        LabelService,\n        NodeService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService\n    ) {\n\n        this.$injector = $injector;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the message to display when the student is in create label mode\n        this.newLabelMessage = 'Click on the image or ';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    this.canvasId = 'labelCanvas_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent').empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent').append(canvas);\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    this.backgroundImage = null;\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.labelController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.labelController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.labelController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', serverSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', serverSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', serverSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importWorkNodeId = this.componentContent.importWorkNodeId;\n            var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.labels != null) {\n                /*\n                 * the student has not done any work and there are starter labels\n                 * so we will populate the canvas with the starter labels\n                 */\n                this.addLabelsToCanvas(this.componentContent.labels);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.registerComponentController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.serverSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.serverSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        // get all the objects from the canvas\n        var objects = this.canvas.getObjects();\n\n        if (objects != null) {\n\n            // loop through all the objects\n            for (var x = 0; x < objects.length; x++) {\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the object type\n                    var type = object.get('type');\n\n                    if (type === 'circle') {\n                        /*\n                         * the object is a circle which contains all the data\n                         * for a label\n                         */\n\n                        // get the simple JSON object that represents the label\n                        var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                        if (labelJSONObject != null) {\n                            // add the object to our array of labels\n                            labels.push(labelJSONObject);\n                        }\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        //studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        this.canvasWidth = this.componentContent.width;\n        this.canvasHeight = this.componentContent.height;\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, 'A new label', 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: 5,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: 20,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: false,\n            selectable: true\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = 'Enter text here';\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index) {\n\n        // delete the label from the array\n        this.authoringComponentContent.labels.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n}\n\nLabelController.$inject = [\n    '$injector',\n    '$scope',\n    '$timeout',\n    'LabelService',\n    'NodeService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default LabelController;\n"]}