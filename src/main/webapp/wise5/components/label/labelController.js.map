{"version":3,"sources":["labelController.es6"],"names":["LabelController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","canDeleteLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","componentState","width","height","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$","empty","attr","css","append","setupCanvas","angular","labelController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","initializeCanvas","disabled","createKeydownListener","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","labels","addLabelsToCanvas","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","label","pointX","pointY","textX","textY","color","createLabel","addLabelToCanvas","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","objects","getObjects","object","labelJSONObject","getLabelJSONObjectFromCircle","push","circle","lineObject","line","textObject","get","xDiff","x2","x1","yDiff","y2","y1","backgroundColor","parseInt","createNewComponentState","getLabels","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentAsset","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","fabric","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","on","options","activeObject","getActiveObject","selectedLabel","editLabelMode","e","layerX","y","layerY","newLabel","selectLabel","type","left","top","set","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","removeLabelFromCanvas","textString","Circle","radius","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","IText","fontSize","cursorWidth","editable","selectedLabelText","$apply","setText","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","isNotebookEnabled","$event","addNewItem","exitListener","component","componentHasWork","importPreviousWork","discardActiveObject","html","removeAbsoluteAssetPaths","insertWISELinks","params","popup","$broadcast","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","$inject"],"mappings":";;;;;;;;;;IAAMA,e;AACF,6BACIC,OADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,EAJJ,EAKIC,UALJ,EAMIC,MANJ,EAOIC,QAPJ,EAQIC,OARJ,EASIC,iBATJ,EAUIC,aAVJ,EAWIC,YAXJ,EAYIC,WAZJ,EAaIC,eAbJ,EAcIC,mBAdJ,EAeIC,cAfJ,EAgBIC,mBAhBJ,EAiBIC,kBAjBJ,EAkBIC,WAlBJ,EAmBE;AAAA;;AAAA;;AAEE,aAAKjB,OAAL,GAAeA,OAAf;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,SAAL,GAAiB,KAAKJ,cAAL,CAAoBI,SAArC;;AAEA,aAAKC,UAAL,GAAkB,KAAKnB,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKoB,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAKC,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,WAAL,GAAmB,EAAnB;;AAEA;AACA,aAAKC,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAKC,OAAL,GAAe,KAAf;;AAEA;AACA,aAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAKC,WAAL,GAAmB;AACfC,kBAAM,EADS;AAEfC,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAKC,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAKC,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,sBAAL,GAA8B,KAA9B;;AAEA;AACA,aAAKC,aAAL,GAAqB,CAArB;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKC,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAKC,uBAAL,GAA+B,IAA/B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,wBAAL,GAAgC,IAAhC;;AAEA;AACA,aAAKC,cAAL,GAAsB,KAAKjC,eAAL,CAAqBkC,iBAArB,EAAtB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,eAAL,GAAuB,KAAvB;;AAEA;AACA,aAAKC,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,GAAnB;;AAEA;AACA,aAAKC,YAAL,GAAoB,GAApB;;AAEA;AACA,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAKC,YAAL,GAAoB,CAApB;;AAEA;AACA,aAAKC,QAAL,GAAgB,GAAhB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,iCAAL,GAAyC,CACrC;AACIC,mBAAO,QADX;AAEI9B,kBAAM;AAFV,SADqC,EAKrC;AACI8B,mBAAO,QADX;AAEI9B,kBAAM;AAFV,SALqC,CAAzC;;AAWA;AACA,YAAI+B,cAAc,KAAK5C,kBAAL,CAAwB6C,cAAxB,EAAlB;AACA,YAAID,eAAe,IAAnB,EAAyB;AACrB,iBAAKxC,MAAL,GAAcwC,YAAYE,EAA1B;AACH,SAFD,MAEO;AACH,iBAAK1C,MAAL,GAAc,KAAKf,MAAL,CAAYe,MAA1B;AACH;;AAED;AACA,aAAKE,gBAAL,GAAwB,KAAKjB,MAAL,CAAYiB,gBAApC;;AAEA;AACA,aAAKC,yBAAL,GAAiC,KAAKlB,MAAL,CAAYkB,yBAA7C;AACA,aAAKwC,mCAAL,GAA2C,KAAK1D,MAAL,CAAY0D,mCAAvD;;AAEA;;;;AAIA,aAAKC,wBAAL,GAAgC,KAAK3D,MAAL,CAAY2D,wBAA5C;;AAEA;AACA,aAAKC,IAAL,GAAY,KAAK5D,MAAL,CAAY4D,IAAxB;;AAEA,aAAKC,WAAL,GAAmB,KAAK7D,MAAL,CAAY6D,WAA/B;AACA,aAAKC,kBAAL,GAA0B,KAAK9D,MAAL,CAAY8D,kBAAtC;;AAEA,YAAI,KAAK7C,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAKD,WAAL,GAAmB,KAAKC,gBAAL,CAAsBwC,EAAzC;;AAEA;AACA,gBAAIM,iBAAiB,KAAK/D,MAAL,CAAY+D,cAAjC;;AAEA,gBAAI,KAAK9C,gBAAL,CAAsByB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAKA,eAAL,GAAuB,KAAKzB,gBAAL,CAAsByB,eAA7C;AACH;;AAED,gBAAI,KAAKzB,gBAAL,CAAsB0B,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAKA,eAAL,GAAuB,KAAK1B,gBAAL,CAAsB0B,eAA7C;AACH;;AAED,gBAAI,KAAK1B,gBAAL,CAAsB+C,KAAtB,IAA+B,IAAnC,EAAyC;AACrC,qBAAKlB,WAAL,GAAmB,KAAK7B,gBAAL,CAAsB+C,KAAzC;AACH;;AAED,gBAAI,KAAK/C,gBAAL,CAAsBgD,MAAtB,IAAgC,IAApC,EAA0C;AACtC,qBAAKlB,YAAL,GAAoB,KAAK9B,gBAAL,CAAsBgD,MAA1C;AACH;;AAED,gBAAI,KAAKL,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAK/B,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBiD,cAAjD;AACA,qBAAKnC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBkD,gBAAnD;;AAEA,oBAAI,KAAKzB,eAAT,EAA0B;AACtB,yBAAKL,uBAAL,GAA+B,IAA/B;AACH,iBAFD,MAEO;AACH,yBAAKA,uBAAL,GAA+B,KAA/B;AACH;;AAED;AACA,qBAAKD,iBAAL,GAAyB,KAAKjC,iBAAL,CAAuBiE,6BAAvB,CAAqD,KAAKrD,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK6C,WAAzF,CAAzB;AACH,aAbD,MAaO,IAAI,KAAKD,IAAL,KAAc,SAAd,IAA2B,KAAKA,IAAL,KAAc,iBAA7C,EAAgE;AACnE,qBAAK9B,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKE,wBAAL,GAAgC,KAAhC;AACA,qBAAKI,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;;AAEA,oBAAI2C,kBAAkB,IAAtB,EAA4B;AACxB;AACA,yBAAKZ,QAAL,GAAgB,iBAAiBY,eAAeN,EAAhD;AACA,wBAAI,KAAKG,IAAL,KAAc,iBAAlB,EAAqC;AACjC,6BAAKT,QAAL,GAAgB,iCAAiCY,eAAeN,EAAhE;AACH;AACJ;;AAED;AACA,qBAAKrB,iBAAL,GAAyB,KAAKjC,iBAAL,CAAuBiE,6BAAvB,CAAqD,KAAKrD,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK6C,WAAzF,CAAzB;AACH,aAlBM,MAkBA,IAAI,KAAKD,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAK/B,eAAL,GAAuB,KAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKE,wBAAL,GAAgC,KAAhC;AACA,qBAAKI,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;AACH,aARM,MAQA,IAAI,KAAKwC,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAK/B,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKM,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;AACH,aAPM,MAOA,IAAI,KAAKwC,IAAL,KAAc,WAAlB,EAA+B;AAClC,qBAAK9B,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBiD,cAAjD;AACA,qBAAKnC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBkD,gBAAnD;;AAEA;AACA,qBAAKE,kBAAL,GAA0B,sBAAsB,KAAKtD,MAA3B,GAAoC,GAApC,GAA0C,KAAKC,WAAzE;;AAEA;AACA,qBAAKsD,oBAAL,GAA4B,KAAKrD,gBAAL,CAAsBsD,MAAlD;;AAEA;AACA,oBAAIC,oBAAoB,KAAK1D,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;;;;AAIA,oBAAI2D,oBAAoB,KAAK7D,WAAL,CAAiB8D,uBAAjB,CAAyC,IAAzC,EAA+C,IAA/C,EAAqD,KAAK3D,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,QAApF,EAA8FwD,iBAA9F,CAAxB;;AAEA;;;;AAIA,qBAAKG,uBAAL,GAA+B;AAC3BC,6BAAS,CACL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADK,EAEL,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFK,EAGL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHK,EAIL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJK,EAKL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALK,EAML,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANK,EAOL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPK,EAQL,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARK,EASL,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATK,EAUL,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVK,CADkB;AAa3BX,4BAAQ,GAbmB;AAc3BY,wCAAoB,IAdO;AAe3BC,6BAAS;AACLC,2CAAmBN;AADd;AAfkB,iBAA/B;;AAoBA,qBAAKO,2BAAL;;AAEAhF,uBAAOiF,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAK/D,yBAAZ;AACH,iBAFa,CAEZgE,IAFY,CAEP,IAFO,CAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACvC,yBAAKnE,gBAAL,GAAwB,KAAKR,cAAL,CAAoB4E,gBAApB,CAAqCF,QAArC,CAAxB;;AAEA;AACA,yBAAKrC,WAAL,GAAmB,GAAnB;;AAEA;AACA,yBAAKC,YAAL,GAAoB,GAApB;;AAEA,yBAAKd,aAAL,GAAqB,CAArB;AACA,yBAAKH,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBiD,cAAjD;AACA,yBAAKnC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBkD,gBAAnD;;AAEA,wBAAI,KAAKtB,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACAyC,0BAAE,mBAAmB,KAAKnC,QAA1B,EAAoCoC,KAApC;;AAEA;AACA,4BAAI1C,SAASyC,EAAE,WAAF,CAAb;AACAzC,+BAAO2C,IAAP,CAAY,IAAZ,EAAkB,KAAKrC,QAAvB;AACAN,+BAAO4C,GAAP,CAAW,QAAX,EAAqB,iBAArB;;AAEA;AACAH,0BAAE,mBAAmB,KAAKnC,QAA1B,EAAoCuC,MAApC,CAA2C7C,MAA3C;;AAEA;;;;AAIA,6BAAKO,eAAL,GAAuB,IAAvB;;AAEA;AACA,6BAAKuC,WAAL;AACH;;AAED,wBAAI,KAAK1E,gBAAL,CAAsByB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,6BAAKA,eAAL,GAAuB,KAAKzB,gBAAL,CAAsByB,eAA7C;AACH;;AAED,wBAAI,KAAKA,eAAT,EAA0B;AACtB,6BAAKL,uBAAL,GAA+B,IAA/B;AACH,qBAFD,MAEO;AACH,6BAAKA,uBAAL,GAA+B,KAA/B;AACH;AACJ,iBA7Ca,CA6CZ6C,IA7CY,CA6CP,IA7CO,CAFd,EA+Cc,IA/Cd;AAgDH;;AAED,iBAAKjF,QAAL,CAAc2F,QAAQV,IAAR,CAAa,IAAb,EAAmB,YAAW;AACxC;;AAEA,qBAAKS,WAAL;AACH,aAJa,CAAd;AAKH;;AAED;;;AAGA,aAAK3F,MAAL,CAAYqB,OAAZ,GAAsB,YAAW;AAC7B,mBAAO,KAAKrB,MAAL,CAAY6F,eAAZ,CAA4BxE,OAAnC;AACH,SAFqB,CAEpB6D,IAFoB,CAEf,IAFe,CAAtB;;AAIA;;;;;;;;AAQA,aAAKlF,MAAL,CAAY8F,iBAAZ,GAAgC,UAASnE,QAAT,EAAmB;AAC/C,gBAAIoE,WAAW,KAAKjG,EAAL,CAAQkG,KAAR,EAAf;AACA,gBAAIC,WAAW,KAAf;AACA,gBAAIC,SAAS,QAAb;;AAEA,gBAAIvE,QAAJ,EAAc;AACV,oBAAI,KAAK3B,MAAL,CAAY6F,eAAZ,CAA4BvE,aAAhC,EAA+C;AAC3C2E,+BAAW,IAAX;AACAC,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAKlG,MAAL,CAAY6F,eAAZ,CAA4BxE,OAAhC,EAAyC;AACrC4E,+BAAW,IAAX;AACAC,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAID,QAAJ,EAAc;AACV;AACA,qBAAKjG,MAAL,CAAY6F,eAAZ,CAA4BM,oBAA5B,CAAiDD,MAAjD,EAAyDE,IAAzD,CAA8D,UAACrC,cAAD,EAAoB;AAC9EgC,6BAASM,OAAT,CAAiBtC,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKAgC,yBAASM,OAAT;AACH;;AAED,mBAAON,SAASO,OAAhB;AACH,SAhC+B,CAgC9BpB,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAKlF,MAAL,CAAYuG,GAAZ,CAAgB,mBAAhB,EAAqCX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB;;AAE1E;AACA,gBAAI1F,SAAS0F,KAAK1F,MAAlB;;AAEA;AACA,gBAAI,KAAKA,MAAL,KAAgBA,MAApB,EAA4B;;AAExB;AACA,oBAAI2F,oBAAoB,kBAAxB;AACA,qBAAKC,MAAL,CAAYD,iBAAZ;AACH;AACJ,SAZoC,CAArC;;AAcA;;;;AAIA,aAAK1G,MAAL,CAAYuG,GAAZ,CAAgB,0BAAhB,EAA4CX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,gBAAI1C,iBAAiB0C,KAAKG,WAA1B;;AAEA;AACA,gBAAI7C,kBAAkB,KAAKhD,MAAL,KAAgBgD,eAAehD,MAAjD,IACG,KAAKC,WAAL,KAAqB+C,eAAe/C,WAD3C,EACwD;;AAEpD;AACA,qBAAKK,OAAL,GAAe,KAAf;AACA,qBAAKrB,MAAL,CAAY6G,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAApC;;AAEA,oBAAIyF,aAAa/C,eAAe+C,UAAhC;AACA,oBAAInF,WAAWoC,eAAepC,QAA9B;AACA,oBAAIoF,iBAAiBhD,eAAegD,cAApC;AACA,oBAAIC,iBAAiB,KAAK5G,aAAL,CAAmB6G,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA;AACA,oBAAIpF,QAAJ,EAAc;AACV,yBAAKuF,cAAL,CAAoB,KAAKpG,UAAL,CAAgB,WAAhB,CAApB,EAAkDkG,cAAlD;;AAEA,yBAAKG,eAAL;;AAEA;AACA,yBAAK7F,aAAL,GAAqB,KAArB;AACA,yBAAKtB,MAAL,CAAY6G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAIyF,UAAJ,EAAgB;AACnB,yBAAKI,cAAL,CAAoB,KAAKpG,UAAL,CAAgB,YAAhB,CAApB,EAAmDkG,cAAnD;AACH,iBAFM,MAEA;AACH,yBAAKE,cAAL,CAAoB,KAAKpG,UAAL,CAAgB,OAAhB,CAApB,EAA8CkG,cAA9C;AACH;AACJ;AACJ,SAhC2C,CAA5C;;AAkCA;;;;;AAKA,aAAKhH,MAAL,CAAYuG,GAAZ,CAAgB,cAAhB,EAAgC,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAE7C;AACA,gBAAI1F,SAAS0F,KAAK1F,MAAlB;AACA,gBAAIC,cAAcyF,KAAKzF,WAAvB;;AAEA;AACA,gBAAI,MAAKD,MAAL,KAAgBA,MAAhB,IAA0B,MAAKC,WAAL,KAAqBA,WAAnD,EAAgE;;AAE5D;AACA,oBAAIoG,cAAc,MAAKC,cAAL,EAAlB;;AAEA,oBAAID,eAAe,IAAnB,EAAyB;AACrB,wBAAIX,OAAO,EAAX;AACAA,yBAAK1F,MAAL,GAAcA,MAAd;AACA0F,yBAAKzF,WAAL,GAAmBA,WAAnB;AACAyF,yBAAKW,WAAL,GAAmBA,WAAnB;;AAEA;AACA,0BAAKpH,MAAL,CAAY6G,KAAZ,CAAkB,sBAAlB,EAA0CJ,IAA1C;AACH;AACJ;AACJ,SAtBD;;AAwBA;;;;AAIA,aAAKzG,MAAL,CAAYuG,GAAZ,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAExD,gBAAIA,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAIa,aAAab,KAAKa,UAAtB;;AAEA,oBAAIA,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAIC,mBAAmBD,WAAWvG,MAAlC;AACA,wBAAIyG,wBAAwBF,WAAWtG,WAAvC;;AAEA;AACA,wBAAI,MAAKD,MAAL,KAAgBwG,gBAAhB,IACA,MAAKvG,WAAL,KAAqBwG,qBADzB,EACgD;;AAE5C;AACA,8BAAKpF,iBAAL,GAAyB,MAAKjC,iBAAL,CAAuBiE,6BAAvB,CAAqD,MAAKrD,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAK6C,WAAzF,CAAzB;AACH;AACJ;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAK7D,MAAL,CAAYuG,GAAZ,CAAgB,UAAhB,EAA4BX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;;AAIA;;;;AAIA,aAAKzG,MAAL,CAAYyH,iBAAZ,GAAgC,UAASC,OAAT,EAAkB;AAAA;;AAE9C;AACA,gBAAItE,kBAAkB,KAAKyC,eAAL,CAAqB8B,kBAArB,EAAtB;;AAEA,gBAAIC,YAAY,IAAhB;;AAEA,gBAAIxE,mBAAmB,IAAnB,IAA2BA,mBAAmB,EAAlD,EAAsD;AAClD;;;;AAIA,oBAAIyE,SAASC,QAAQ,KAAKjC,eAAL,CAAqB/E,UAArB,CAAgC,mDAAhC,CAAR,CAAb;;AAEA,oBAAI+G,MAAJ,EAAY;AACR;AACAD,gCAAY,IAAZ;AACH,iBAHD,MAGO;AACH;AACAA,gCAAY,KAAZ;;AAEA;;;;;;AAMAF,4BAAQpE,KAAR,GAAgB,IAAhB;AACH;AACJ;;AAED,gBAAIsE,SAAJ,EAAe;AACX;;AAEA;AACA,oBAAIG,QAAQL,QAAQK,KAApB;;AAEA,oBAAIA,SAAS,IAAT,IAAiBA,MAAMC,MAAN,GAAe,CAApC,EAAuC;;AAEnC;AACA,yBAAKnC,eAAL,CAAqBnF,mBAArB,CAAyCuH,WAAzC,CAAqDF,MAAM,CAAN,CAArD,EAA+D3B,IAA/D,CAAoE,UAAC8B,iBAAD,EAAuB;;AAEvF;AACA,+BAAKrC,eAAL,CAAqBnF,mBAArB,CAAyCyH,qBAAzC,CAA+DD,iBAA/D,EAAkF9B,IAAlF,CAAuF,UAACgC,eAAD,EAAqB;;AAExG,gCAAIA,mBAAmB,IAAvB,EAA6B;AACzB;AACA,oCAAIC,WAAWD,gBAAgBE,GAA/B;;AAEA,oCAAID,YAAY,IAAZ,IAAoBA,YAAY,EAApC,EAAwC;;AAEpC;AACA,2CAAKxC,eAAL,CAAqB0C,kBAArB,CAAwCF,QAAxC;AACA,2CAAKxC,eAAL,CAAqB2C,kBAArB;AACH;AACJ;AACJ,yBAbD;AAcH,qBAjBD;AAkBH;AACJ;AACJ,SA5DD;;AA8DA;;;;AAIA,aAAKxI,MAAL,CAAYuG,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAE9C,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIA,KAAK1F,MAAL,IAAe,MAAKA,MAApB,IAA8B0F,KAAKzF,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACpE;AACA,wBAAIyH,YAAYhC,KAAKgC,SAArB;;AAEA,wBAAIA,aAAa,IAAjB,EAAuB;AACnB,4BAAIC,WAAWD,UAAUC,QAAzB;;AAEA,4BAAIA,YAAY,IAAhB,EAAsB;AAClB;;;;;AAKA,gCAAIC,sBAAsB,MAAKvI,aAAL,CAAmBwI,6BAAnB,EAA1B;AACA,gCAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;;AAEA,gCAAII,eAAe,EAAnB;;AAEA,gCAAIrC,KAAKsC,MAAL,IAAe,QAAnB,EAA6B;AACzB;AACAD,+CAAe,sBAAsB,MAAK/H,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH,6BAHD,MAGO,IAAIyF,KAAKsC,MAAL,IAAe,QAAnB,EAA6B;AAChC;AACAD,+CAAe,sBAAsB,MAAK/H,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH,6BAHM,MAGA,IAAIyF,KAAKsC,MAAL,IAAe,YAAnB,EAAiC;AACpC;;AAEA;AACA,sCAAK7H,yBAAL,CAA+BkC,eAA/B,GAAiDsF,QAAjD;;AAEA;AACA,sCAAKM,6BAAL;AACH;;AAED,gCAAIF,gBAAgB,EAApB,EAAwB;AACpB,oCAAI,MAAKlI,WAAL,CAAiBqI,OAAjB,CAAyBP,QAAzB,CAAJ,EAAwC;AACpC;;;;AAIApD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACH,iCAVD,MAUO,IAAI,MAAK9H,WAAL,CAAiBuI,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC3C;;;;AAIApD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA,wCAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,iDAAaG,QAAb,GAAwB,MAAxB;AACAH,iDAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAvD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED;AACA,kBAAKvJ,SAAL,CAAe4J,IAAf;AACH,SAxED;AAyEH;;;;sCAEa;AACV;AACA,gBAAI5G,SAAS,KAAK6G,gBAAL,EAAb;AACA,iBAAK7G,MAAL,GAAcA,MAAd;;AAEA;AACA,gBAAIkB,iBAAiB,KAAK/D,MAAL,CAAY+D,cAAjC;;AAEA,gBAAI,KAAKpB,eAAL,IAAwB,CAAC,KAAKgH,QAAlC,EAA4C;AACxC;AACA,qBAAKC,qBAAL;AACH;;AAED;AACA,iBAAKhI,0BAAL,GAAkC,KAAKX,gBAAL,CAAsBW,0BAAxD;;AAEA,gBAAImC,kBAAkB,IAAtB,EAA4B;AACxB;;;;;AAKA;AACA,oBAAI8F,2BAA2B,KAAK5I,gBAAL,CAAsB4I,wBAArD;AACA,oBAAIC,gCAAgC,KAAK7I,gBAAL,CAAsB6I,6BAA1D;;AAEA,oBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;AACpE;;;;AAIAA,+CAA2B,KAAK5I,gBAAL,CAAsB8I,gBAAjD;AACH;;AAED,oBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;AAC9E;;;;AAIAA,oDAAgC,KAAK7I,gBAAL,CAAsB+I,qBAAtD;AACH;;AAED,oBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;AAC3E;AACA,yBAAKG,UAAL;AACH,iBAHD,MAGO,IAAI,KAAKhJ,gBAAL,CAAsBiJ,MAAtB,IAAgC,IAApC,EAA0C;AAC7C;;;;AAIA,yBAAKC,iBAAL,CAAuB,KAAKlJ,gBAAL,CAAsBiJ,MAA7C;AACH;AACJ,aApCD,MAoCO;AACH;AACA,qBAAKE,cAAL,CAAoBrG,cAApB;AACH;;AAED;AACA,gBAAIX,kBAAkB,KAAKuE,kBAAL,EAAtB;;AAEA,gBAAIvE,mBAAmB,IAAnB,IAA2B,KAAKnC,gBAAL,CAAsBmC,eAAtB,IAAyC,IAAxE,EAA8E;AAC1E;AACA,qBAAKmF,kBAAL,CAAwB,KAAKtH,gBAAL,CAAsBmC,eAA9C;AACH;;AAED;AACA,gBAAI,KAAKnC,gBAAL,CAAsBoJ,cAAtB,IAAwC,IAAxC,IAAgD,KAAKpI,aAAL,IAAsB,KAAKhB,gBAAL,CAAsBoJ,cAAhG,EAAgH;AAC5G;;;;AAIA,qBAAKrI,sBAAL,GAA8B,IAA9B;AACH;;AAED;AACA,iBAAKsI,iBAAL;;AAEA,gBAAI,KAAKtK,MAAL,CAAYuK,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC5C;AACA,qBAAKxK,MAAL,CAAYuK,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,KAAKzK,MAApE,EAA4E,KAAKiB,gBAAjF;AACH;AACJ;;AAED;;;;;;;uCAIe8C,c,EAAgB;;AAE3B,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB,oBAAI2G,cAAc3G,eAAe2G,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;;AAErB;AACA,wBAAIR,SAASQ,YAAYR,MAAzB;;AAEA;AACA,yBAAKC,iBAAL,CAAuBD,MAAvB;;AAEA;AACA,wBAAI9G,kBAAkBsH,YAAYtH,eAAlC;;AAEA,wBAAIA,mBAAmB,IAAvB,EAA6B;AACzB,6BAAKmF,kBAAL,CAAwBnF,eAAxB;AACH;;AAED,wBAAInB,gBAAgByI,YAAYzI,aAAhC;;AAEA,wBAAIA,iBAAiB,IAArB,EAA2B;AACvB;AACA,6BAAKA,aAAL,GAAqBA,aAArB;AACH;;AAED,yBAAK0I,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAIC,cAAc,KAAKjK,kBAAL,CAAwBkK,6CAAxB,CAAsE,KAAK9J,MAA3E,EAAmF,KAAKC,WAAxF,CAAlB;;AAEA,gBAAI4J,WAAJ,EAAiB;AACb,oBAAI7D,iBAAiB6D,YAAY7D,cAAjC;AACA,oBAAIC,iBAAiB,KAAK5G,aAAL,CAAmB6G,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,oBAAI6D,YAAYjJ,QAAhB,EAA0B;AACtB;AACA,yBAAKL,aAAL,GAAqB,KAArB;AACA,yBAAKtB,MAAL,CAAY6G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAK6F,cAAL,CAAoB,KAAKpG,UAAL,CAAgB,gBAAhB,CAApB,EAAuDkG,cAAvD;AACH,iBAND,MAMO;AACH;AACA,yBAAK1F,aAAL,GAAqB,IAArB;AACA,yBAAKtB,MAAL,CAAY6G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAK6F,cAAL,CAAoB,KAAKpG,UAAL,CAAgB,YAAhB,CAApB,EAAmDkG,cAAnD;AACH;AACJ;AACJ;;;;;AAED;;;;0CAIkBkD,M,EAAQ;AACtB,gBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,qBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIZ,OAAOlC,MAA3B,EAAmC8C,GAAnC,EAAwC;;AAEpC;AACA,wBAAIC,QAAQb,OAAOY,CAAP,CAAZ;;AAEA,wBAAIC,SAAS,IAAb,EAAmB;;AAEf;AACA,4BAAIC,SAASD,MAAMC,MAAnB;AACA,4BAAIC,SAASF,MAAME,MAAnB;AACA,4BAAIC,QAAQH,MAAMG,KAAlB;AACA,4BAAIC,QAAQJ,MAAMI,KAAlB;AACA,4BAAI3J,OAAOuJ,MAAMvJ,IAAjB;AACA,4BAAI4J,QAAQL,MAAMK,KAAlB;;AAEA;AACA,4BAAIL,QAAQ,KAAKM,WAAL,CAAiBL,MAAjB,EAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+C3J,IAA/C,EAAqD4J,KAArD,CAAZ;;AAEA;AACA,6BAAKE,gBAAL,CAAsB,KAAKzI,MAA3B,EAAmCkI,KAAnC;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAKpJ,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAK3B,MAAL,CAAY6G,KAAZ,CAAkB,wBAAlB,EAA4C,EAAC9F,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;;AAElB;AACA,gBAAI0F,oBAAoB,uBAAxB;AACA,iBAAKC,MAAL,CAAYD,iBAAZ;;AAEA;;AAEA;AACA;AACH;;;;;AAED;;;;;+BAKOA,iB,EAAmB;;AAEtB,gBAAI,KAAKpF,aAAT,EAAwB;AACpB;;AAEA,oBAAIiK,gBAAgB,IAApB;;AAEA,oBAAI,KAAKtK,gBAAL,CAAsBoJ,cAAtB,IAAwC,IAA5C,EAAkD;AAC9C;;AAEA;AACA,wBAAImB,sBAAsB,KAAKvK,gBAAL,CAAsBoJ,cAAtB,GAAuC,KAAKpI,aAAtE;;AAEA,wBAAIwJ,UAAU,EAAd;;AAEA,wBAAID,uBAAuB,CAA3B,EAA8B;AAC1B;AACAD,wCAAgB,KAAhB;AACH,qBAHD,MAGO,IAAIC,uBAAuB,CAA3B,EAA8B;AACjC;;;;AAIH,qBALM,MAKA,IAAIA,sBAAsB,CAA1B,EAA6B;AAChC;;;;AAIH;AACJ;;AAED,oBAAID,aAAJ,EAAmB;;AAEf;;;;;AAKA,yBAAK5J,QAAL,GAAgB,IAAhB;;AAEA;AACA,yBAAK+J,sBAAL;;AAEA;AACA,wBAAI,KAAKzK,gBAAL,CAAsBoJ,cAAtB,IAAwC,IAAxC,IAAgD,KAAKpI,aAAL,IAAsB,KAAKhB,gBAAL,CAAsBoJ,cAAhG,EAAgH;AAC5G;;;;AAIA,6BAAKrI,sBAAL,GAA8B,IAA9B;AACH;;AAED,wBAAI,KAAK4B,IAAL,KAAc,WAAlB,EAA+B;AAC3B;;;;;AAKA,6BAAKvC,OAAL,GAAe,KAAf;AACA,6BAAKC,aAAL,GAAqB,KAArB;AACA,6BAAK6E,oBAAL,CAA0B,QAA1B;AACH;;AAED,wBAAIO,qBAAqB,IAArB,IAA6BA,sBAAsB,uBAAvD,EAAgF;AAC5E;AACA,6BAAK1G,MAAL,CAAY6G,KAAZ,CAAkB,0BAAlB,EAA8C,EAAC9F,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACH,qBAHD,MAGO,IAAI0F,sBAAsB,kBAA1B,EAA8C;AACjD;AACH;AACJ,iBAtCD,MAsCO;AACH;;;;AAIA,yBAAK/E,QAAL,GAAgB,KAAhB;AACH;AACJ;AACJ;;AAED;;;;;;;gDAIwB;AACpB,iBAAKiB,eAAL,GAAuB,IAAvB;AACA,iBAAKN,qBAAL,GAA6B,IAA7B;AACH;;;;;AAED;;;;8CAIsB;AAClB,iBAAKM,eAAL,GAAuB,KAAvB;AACA,iBAAKN,qBAAL,GAA6B,KAA7B;AACH;;;;;AAED;;;iDAGyB;AACrB,iBAAKL,aAAL;AACH;;;0CAEiB;AACd;AACA,gBAAI,KAAK0J,iBAAL,EAAJ,EAA8B;AAC1B,qBAAKvK,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKrB,MAAL,CAAY6G,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAApC;;AAEA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKtB,MAAL,CAAY6G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC7F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAK6F,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAIlG,cAAc,KAAK4K,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAI1F,SAAS,QAAb;;AAEA;AACA,iBAAKC,oBAAL,CAA0BD,MAA1B,EAAkCE,IAAlC,CAAuC,UAACrC,cAAD,EAAoB;AACvD,uBAAK/D,MAAL,CAAY6G,KAAZ,CAAkB,6BAAlB,EAAiD,EAAC9F,QAAQ,OAAKA,MAAd,EAAsBC,aAAaA,WAAnC,EAAgD+C,gBAAgBA,cAAhE,EAAjD;AACH,aAFD;AAGH;;;;;AAED;;;;oCAIY;AACR,gBAAImG,SAAS,EAAb;;AAEA;;;;AAIA,gBAAI2B,UAAU,KAAKhJ,MAAL,CAAYiJ,UAAZ,CAAuB,QAAvB,CAAd;;AAEA,gBAAID,WAAW,IAAf,EAAqB;;AAEjB;AACA,qBAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIe,QAAQ7D,MAA5B,EAAoC8C,GAApC,EAAyC;;AAErC;;;;AAIA,wBAAIiB,SAASF,QAAQf,CAAR,CAAb;;AAEA,wBAAIiB,UAAU,IAAd,EAAoB;;AAEhB;AACA,4BAAIC,kBAAkB,KAAKC,4BAAL,CAAkCF,MAAlC,CAAtB;;AAEA,4BAAIC,mBAAmB,IAAvB,EAA6B;AACzB;AACA9B,mCAAOgC,IAAP,CAAYF,eAAZ;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO9B,MAAP;AACH;;;;;AAED;;;;;qDAK6BiC,M,EAAQ;AACjC,gBAAIH,kBAAkB,EAAtB;;AAEA,gBAAIG,UAAU,IAAd,EAAoB;;AAEhB;AACA,oBAAIC,aAAaD,OAAOE,IAAxB;;AAEA;AACA,oBAAIC,aAAaH,OAAO3K,IAAxB;;AAEA,oBAAI4K,cAAc,IAAd,IAAsBE,cAAc,IAAxC,EAA8C;;AAE1C;AACA,wBAAItB,SAASmB,OAAOI,GAAP,CAAW,MAAX,CAAb;AACA,wBAAItB,SAASkB,OAAOI,GAAP,CAAW,KAAX,CAAb;;AAEA;;;;AAIA,wBAAIC,QAAQJ,WAAWK,EAAX,GAAgBL,WAAWM,EAAvC;AACA,wBAAIC,QAAQP,WAAWQ,EAAX,GAAgBR,WAAWS,EAAvC;;AAEA;AACA,wBAAI3B,QAAQsB,KAAZ;AACA,wBAAIrB,QAAQwB,KAAZ;;AAEA;AACA,wBAAInL,OAAO8K,WAAW9K,IAAtB;AACA,wBAAI4J,QAAQkB,WAAWQ,eAAvB;;AAEA;AACAd,oCAAgBhB,MAAhB,GAAyB+B,SAAS/B,MAAT,CAAzB;AACAgB,oCAAgBf,MAAhB,GAAyB8B,SAAS9B,MAAT,CAAzB;AACAe,oCAAgBd,KAAhB,GAAwB6B,SAAS7B,KAAT,CAAxB;AACAc,oCAAgBb,KAAhB,GAAwB4B,SAAS5B,KAAT,CAAxB;AACAa,oCAAgBxK,IAAhB,GAAuBA,IAAvB;AACAwK,oCAAgBZ,KAAhB,GAAwBA,KAAxB;AACH;AACJ;;AAED,mBAAOY,eAAP;AACH;;;;;AAED;;;;;;6CAMqB9F,M,EAAQ;;AAEzB,gBAAIH,WAAW,KAAKjG,EAAL,CAAQkG,KAAR,EAAf;;AAEA;AACA,gBAAIjC,iBAAiB,KAAKzD,WAAL,CAAiB0M,uBAAjB,EAArB;;AAEA;AACA,gBAAItC,cAAc,EAAlB;AACAA,wBAAYR,MAAZ,GAAqB,KAAK+C,SAAL,EAArB;;AAEA,gBAAI7J,kBAAkB,KAAKuE,kBAAL,EAAtB;;AAEA,gBAAIvE,mBAAmB,IAAvB,EAA6B;AACzBsH,4BAAYtH,eAAZ,GAA8BA,eAA9B;AACH;;AAED;AACAsH,wBAAYzI,aAAZ,GAA4B,KAAKA,aAAjC;;AAEA;AACA8B,2BAAepC,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;AACAoC,2BAAe2G,WAAf,GAA6BA,WAA7B;;AAEA;;;;AAIA,iBAAK/I,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,iBAAKuL,wCAAL,CAA8CnH,QAA9C,EAAwDhC,cAAxD,EAAwEmC,MAAxE;;AAEA,mBAAOH,SAASO,OAAhB;AACH;;;;;AAED;;;;;;;;;;iEAUyCP,Q,EAAUhC,c,EAAgBmC,M,EAAQ;AACvE;;;;AAIAH,qBAASM,OAAT,CAAiBtC,cAAjB;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAI9C,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAIA,iBAAiBG,UAArB,EAAiC;AAC7B,yBAAKA,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAIH,iBAAiBkM,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAIC,kBAAkB,KAAKzM,kBAAL,CAAwB0M,wCAAxB,CAAiE,KAAKtM,MAAtE,EAA8E,KAAKC,WAAnF,CAAtB;;AAEA;AACA,wBAAIsM,cAAc,KAAKhN,WAAL,CAAiBiN,eAAjB,CAAiCH,eAAjC,CAAlB;;AAEA,wBAAIE,WAAJ,EAAiB;AACb;AACA,6BAAKlM,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAKiB,uBAAZ;AACH;;;;;AAED;;;;2CAImB;AACf,mBAAO,KAAKC,qBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAIkL,SAAS,KAAb;;AAEA,gBAAI,KAAKvM,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAKA,gBAAL,CAAsBkM,eAA1B,EAA2C;AACvCK,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;;yCAEgBC,U,EAAY;AACzB,gBAAI,KAAKtM,WAAL,CAAiBuM,OAAjB,CAAyBD,UAAzB,KAAwC,CAAC,CAA7C,EAAgD;AAC5C,qBAAKtM,WAAL,CAAiBwM,MAAjB,CAAwB,KAAKxM,WAAL,CAAiBuM,OAAjB,CAAyBD,UAAzB,CAAxB,EAA8D,CAA9D;AACA,qBAAKjF,kBAAL;AACH;AACJ;;;2CAEkBoF,Y,EAAc;AAAA;;AAC7B,gBAAIA,gBAAgB,IAApB,EAA0B;AACtB,qBAAKlN,mBAAL,CAAyByH,qBAAzB,CAA+CyF,YAA/C,EAA6DxH,IAA7D,CAAkE,UAACyH,WAAD,EAAiB;AAC/E,wBAAIA,eAAe,IAAnB,EAAyB;AACrB,4BAAIJ,aAAa;AACbK,4CAAgBD,YAAYpK,EADf;AAEbsK,qCAASF,YAAYE;AAFR,yBAAjB;;AAKA,+BAAK5M,WAAL,CAAiB+K,IAAjB,CAAsBuB,UAAtB;AACA,+BAAKjF,kBAAL;AACH;AACJ,iBAVD;AAWH;AACJ;;;;;AAED;;;oCAGY;AACR,gBAAIwF,SAAS,IAAb;;AAEA,gBAAI,KAAKrK,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAKA,wBAAL,CAA8BsK,sBAAlC,EAA0D;AACtD;AACAD,6BAAS,KAAK/M,gBAAL,CAAsB+M,MAA/B;AACH,iBAHD,MAGO;AACH;AACAA,6BAAS,KAAKrK,wBAAL,CAA8BqK,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAK/M,gBAAL,IAAyB,IAA7B,EAAmC;AACtC+M,yBAAS,KAAK/M,gBAAL,CAAsB+M,MAA/B;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAI/M,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAI4I,2BAA2B5I,iBAAiB4I,wBAAhD;AACA,oBAAIC,gCAAgC7I,iBAAiB6I,6BAArD;;AAEA,oBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;;AAEpE;;;;AAIA,wBAAI5I,iBAAiB8I,gBAAjB,IAAqC,IAArC,IAA6C9I,iBAAiB8I,gBAAjB,IAAqC,EAAtF,EAA0F;AACtFF,mDAA2B5I,iBAAiB8I,gBAA5C;AACH;AACJ;;AAED,oBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;;AAE9E;;;;AAIA,wBAAI7I,iBAAiB+I,qBAAjB,IAA0C,IAA1C,IAAkD/I,iBAAiB+I,qBAAjB,IAA0C,EAAhG,EAAoG;AAChGF,wDAAgC7I,iBAAiB+I,qBAAjD;AACH;AACJ;;AAED,oBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;;AAE3E;AACA,wBAAI/F,iBAAiB,KAAKpD,kBAAL,CAAwBkK,6CAAxB,CAAsE,KAAK9J,MAA3E,EAAmF,KAAKC,WAAxF,CAArB;;AAEA;;;;AAIA,wBAAG+C,kBAAkB,IAArB,EAA2B;AACvB;;AAEA;AACA,4BAAImK,2BAA2B,KAAKvN,kBAAL,CAAwBkK,6CAAxB,CAAsEhB,wBAAtE,EAAgGC,6BAAhG,CAA/B;;AAEA,4BAAIoE,4BAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,gCAAIC,0BAA0B,KAAK9N,YAAL,CAAkB+N,sBAAlB,CAAyCF,wBAAzC,CAA9B;;AAEA;AACA,iCAAK9D,cAAL,CAAoB+D,uBAApB;;AAEA;AACA,iCAAK3F,kBAAL;AACH;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAKvH,gBAAL,CAAsBwC,EAA7B;AACH;;;;;AAED;;;;2CAImB;;AAEf,gBAAIZ,SAAS,IAAb;;AAEA,gBAAI,KAAK5B,gBAAL,CAAsB+C,KAAtB,IAA+B,IAA/B,IAAuC,KAAK/C,gBAAL,CAAsB+C,KAAtB,IAA+B,EAA1E,EAA8E;AAC1E,qBAAKlB,WAAL,GAAmB,KAAK7B,gBAAL,CAAsB+C,KAAzC;AACH;;AAED,gBAAI,KAAK/C,gBAAL,CAAsBgD,MAAtB,IAAgC,IAAhC,IAAwC,KAAKhD,gBAAL,CAAsBgD,MAAtB,IAAgC,EAA5E,EAAgF;AAC5E,qBAAKlB,YAAL,GAAoB,KAAK9B,gBAAL,CAAsBgD,MAA1C;AACH;;AAED;AACA,gBAAI,KAAK7C,UAAT,EAAqB;AACjB;AACAyB,yBAAS,IAAIwL,OAAOC,YAAX,CAAwB,KAAKnL,QAA7B,CAAT;AACH,aAHD,MAGO;AACH;AACAN,yBAAS,IAAIwL,OAAOE,MAAX,CAAkB,KAAKpL,QAAvB,CAAT;AACH;;AAED;AACAN,mBAAO2L,SAAP,GAAmB,KAAnB;;AAEA;AACA3L,mBAAO4L,WAAP,GAAqB,SAArB;;AAEA;AACA5L,mBAAO6L,QAAP,CAAgB,KAAK5L,WAArB;AACAD,mBAAO8L,SAAP,CAAiB,KAAK5L,YAAtB;;AAEA;AACAuC,cAAE,mBAAmB,KAAKnC,QAA1B,EAAoCsC,GAApC,CAAwC,QAAxC,EAAkD,KAAK1C,YAAL,GAAoB,CAAtE;;AAEA;AACAF,mBAAO+L,EAAP,CAAU,YAAV,EAAwBhJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAAS2J,OAAT,EAAkB;;AAEzD;AACA,oBAAIC,eAAe,KAAKjM,MAAL,CAAYkM,eAAZ,EAAnB;;AAEA,oBAAID,gBAAgB,IAApB,EAA0B;AACtB;;;;;AAKA,yBAAKE,aAAL,GAAqB,IAArB;AACA,yBAAKC,aAAL,GAAqB,KAArB;AACH;;AAED;AACA,oBAAI,KAAKrM,eAAT,EAA0B;AACtB;;;;;AAKA;AACA,yBAAKA,eAAL,GAAuB,KAAvB;AACA,yBAAKN,qBAAL,GAA6B,KAA7B;;AAEA,wBAAIkE,QAAQqI,QAAQK,CAApB;;AAEA,wBAAI1I,SAAS,IAAb,EAAmB;AACf;AACA,4BAAIsE,IAAItE,MAAM2I,MAAd;AACA,4BAAIC,IAAI5I,MAAM6I,MAAd;;AAEA;;;;AAIA,4BAAInE,QAAQ,GAAZ;AACA,4BAAIC,QAAQ,GAAZ;;AAEA;AACA,4BAAImE,WAAW,KAAKjE,WAAL,CAAiBP,CAAjB,EAAoBsE,CAApB,EAAuBlE,KAAvB,EAA8BC,KAA9B,EAAqC,KAAKrK,UAAL,CAAgB,iBAAhB,CAArC,EAAyE,MAAzE,CAAf;;AAEA;AACA,6BAAKwK,gBAAL,CAAsB,KAAKzI,MAA3B,EAAmCyM,QAAnC;;AAEA;;;;AAIA,6BAAKC,WAAL,CAAiBD,QAAjB;;AAEA;AACA,6BAAK9G,kBAAL;AACH;AACJ;AACJ,aAxDuB,CAAxB;;AA0DA;AACA3F,mBAAO+L,EAAP,CAAU,eAAV,EAA2BhJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAAS2J,OAAT,EAAkB;AAC5D,oBAAI9F,SAAS8F,QAAQ9F,MAArB;;AAEA,oBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,wBAAIyG,OAAOzG,OAAOwD,GAAP,CAAW,MAAX,CAAX;;AAEA;AACA,wBAAIkD,OAAO1G,OAAOwD,GAAP,CAAW,MAAX,CAAX;AACA,wBAAImD,MAAM3G,OAAOwD,GAAP,CAAW,KAAX,CAAV;;AAEA;AACA,wBAAIkD,OAAO,CAAX,EAAc;AACV1G,+BAAO4G,GAAP,CAAW,MAAX,EAAmB,CAAnB;AACAF,+BAAO,CAAP;AACH,qBAHD,MAGO,IAAIA,OAAO,KAAK3M,WAAhB,EAA6B;AAChCiG,+BAAO4G,GAAP,CAAW,MAAX,EAAmB,KAAK7M,WAAxB;AACA2M,+BAAO,KAAK3M,WAAZ;AACH;;AAED;AACA,wBAAI4M,MAAM,CAAV,EAAa;AACT3G,+BAAO4G,GAAP,CAAW,KAAX,EAAkB,CAAlB;AACAD,8BAAM,CAAN;AACH,qBAHD,MAGO,IAAIA,MAAM,KAAK3M,YAAf,EAA6B;AAChCgG,+BAAO4G,GAAP,CAAW,KAAX,EAAkB,KAAK5M,YAAvB;AACA2M,8BAAM,KAAK3M,YAAX;AACH;;AAED,wBAAIyM,SAAS,QAAb,EAAuB;AACnB;;;;;;;AAOA;AACA,4BAAInD,OAAOtD,OAAOsD,IAAlB;;AAEA,4BAAIG,QAAQ,CAAZ;AACA,4BAAIG,QAAQ,CAAZ;;AAEA,4BAAIN,QAAQ,IAAZ,EAAkB;AACd;AACAG,oCAAQH,KAAKI,EAAL,GAAUJ,KAAKK,EAAvB;AACAC,oCAAQN,KAAKO,EAAL,GAAUP,KAAKQ,EAAvB;;AAEA;AACAR,iCAAKsD,GAAL,CAAS,EAACjD,IAAI+C,IAAL,EAAW5C,IAAI6C,GAAf,EAAoBjD,IAAIgD,OAAOjD,KAA/B,EAAsCI,IAAI8C,MAAM/C,KAAhD,EAAT;;AAEA;AACA9J,mCAAO+M,MAAP,CAAcvD,IAAd;AACAxJ,mCAAOgN,GAAP,CAAWxD,IAAX;;AAEA;AACAxJ,mCAAOiN,MAAP,CAAczD,IAAd,EAAoB,KAAKrJ,UAAzB;AACH;;AAED;AACA,4BAAIxB,OAAOuH,OAAOvH,IAAlB;;AAEA,4BAAIA,QAAQ,IAAZ,EAAkB;AACd;AACAA,iCAAKmO,GAAL,CAAS,EAACF,MAAMA,OAAOjD,KAAd,EAAqBkD,KAAKA,MAAM/C,KAAhC,EAAT;;AAEA;AACA9J,mCAAO+M,MAAP,CAAcpO,IAAd;AACAqB,mCAAOgN,GAAP,CAAWrO,IAAX;;AAEA;AACAqB,mCAAOiN,MAAP,CAActO,IAAd,EAAoB,KAAKyB,UAAzB;AACH;AACJ,qBA5CD,MA4CO,IAAIuM,SAAS,QAAb,EAAuB;AAC1B;;;;;;AAMA,4BAAInD,OAAOtD,OAAOsD,IAAlB;;AAEA,4BAAIA,QAAQ,IAAZ,EAAkB;AACd;AACAA,iCAAKsD,GAAL,CAAS,EAAClD,IAAIgD,IAAL,EAAW7C,IAAI8C,GAAf,EAAT;;AAEA;AACA7M,mCAAO+M,MAAP,CAAcvD,IAAd;AACAxJ,mCAAOgN,GAAP,CAAWxD,IAAX;;AAEA;AACAxJ,mCAAOiN,MAAP,CAAczD,IAAd,EAAoB,KAAKrJ,UAAzB;AACH;AACJ;;AAED;AACAH,2BAAOkN,SAAP;;AAEA;AACA,yBAAKvH,kBAAL;AACH;AACJ,aAtG0B,CAA3B;;AAwGA;AACA3F,mBAAO+L,EAAP,CAAU,cAAV,EAA0BhJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAAS2J,OAAT,EAAkB;AAC3D,oBAAI9F,SAAS8F,QAAQ9F,MAArB;;AAEA,oBAAIA,UAAU,IAAd,EAAoB;;AAEhB,wBAAIyG,OAAOzG,OAAOwD,GAAP,CAAW,MAAX,CAAX;;AAEA,wBAAIiD,SAAS,QAAb,EAAuB;AACnB;AACA,6BAAKhH,kBAAL;AACH;AACJ;AACJ,aAZyB,CAA1B;;AAcA,mBAAO3F,MAAP;AACH;;;;;AAED;;;;2CAImBmN,mB,EAAqB;;AAEpC,gBAAIA,uBAAuB,IAA3B,EAAiC;AAC7B,qBAAK5M,eAAL,GAAuB4M,mBAAvB;AACA,qBAAKnN,MAAL,CAAY0F,kBAAZ,CAA+ByH,mBAA/B,EAAoD,KAAKnN,MAAL,CAAYkN,SAAZ,CAAsB7K,IAAtB,CAA2B,KAAKrC,MAAhC,CAApD;AACH;AACJ;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAKO,eAAZ;AACH;;;;;AAED;;;gDAGwB;AACpB6M,mBAAOC,gBAAP,CAAwB,SAAxB,EAAmCtK,QAAQV,IAAR,CAAa,IAAb,EAAmB,KAAKiL,UAAxB,CAAnC,EAAwE,KAAxE;AACH;;;;;AAED;;;;mCAIWjB,C,EAAG;;AAEV;AACA,gBAAIkB,UAAUlB,EAAEkB,OAAhB;;AAEA;AACA,gBAAIA,YAAY,CAAZ,IAAiBA,YAAY,EAAjC,EAAqC;;AAEjC;AACA,oBAAItB,eAAe,KAAKjM,MAAL,CAAYkM,eAAZ,EAAnB;;AAEA,oBAAID,gBAAgB,IAApB,EAA0B;;AAEtB;AACA,wBAAIA,aAAavC,GAAb,CAAiB,MAAjB,MAA6B,QAAjC,EAA2C;;AAEvC;AACA,6BAAK8D,qBAAL,CAA2B,KAAKxN,MAAhC,EAAwCiM,YAAxC;;AAEA;AACA,6BAAKtG,kBAAL;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;;;;;;;;;;oCAaYwC,M,EAAQC,M,EAAQC,K,EAAOC,K,EAAOmF,U,EAAYlF,K,EAAO;AACzD,gBAAIL,QAAQ,EAAZ;;AAEA;AACA,gBAAI2B,KAAK1B,MAAT;AACA,gBAAI6B,KAAK5B,MAAT;;AAEA;AACA,gBAAIwB,KAAKzB,SAASE,KAAlB;AACA,gBAAI0B,KAAK3B,SAASE,KAAlB;;AAEA,gBAAIC,SAAS,IAAb,EAAmB;AACf;AACAA,wBAAQ,MAAR;AACH;;AAED;AACA,gBAAIe,SAAS,IAAIkC,OAAOkC,MAAX,CAAkB;AAC3BC,wBAAQ,CADmB;AAE3Bf,sBAAM/C,EAFqB;AAG3BgD,qBAAK7C,EAHsB;AAI3B4D,yBAAS,QAJkB;AAK3BC,yBAAS,QALkB;AAM3BC,6BAAa,KANc;AAO3BC,6BAAa,KAPc;AAQ3BC,4BAAY,IARe;AAS3BC,4BAAY;AATe,aAAlB,CAAb;;AAYA;AACA,gBAAIzE,OAAO,IAAIgC,OAAO0C,IAAX,CAAgB,CAACrE,EAAD,EAAKG,EAAL,EAASJ,EAAT,EAAaG,EAAb,CAAhB,EAAkC;AACzCoE,sBAAM,OADmC;AAEzCC,wBAAQ,OAFiC;AAGzCC,6BAAa,CAH4B;AAIzCJ,4BAAY;AAJ6B,aAAlC,CAAX;;AAOA;AACA,gBAAItP,OAAO,IAAI6M,OAAO8C,KAAX,CAAiBb,UAAjB,EAA6B;AACpCb,sBAAMhD,EAD8B;AAEpCiD,qBAAK9C,EAF+B;AAGpC6D,yBAAS,QAH2B;AAIpCC,yBAAS,QAJ2B;AAKpCU,0BAAU,EAL0B;AAMpCJ,sBAAM,OAN8B;AAOpClE,iCAAiB1B,KAPmB;AAQpCpH,uBAAO,GAR6B;AASpC2M,6BAAa,KATuB;AAUpCE,4BAAY,IAVwB;AAWpCD,6BAAa,KAXuB;AAYpCE,4BAAY,IAZwB;AAapCO,6BAAa,CAbuB;AAcpCC,0BAAU;AAd0B,aAA7B,CAAX;;AAiBA;AACAnF,mBAAOE,IAAP,GAAcA,IAAd;AACAF,mBAAO3K,IAAP,GAAcA,IAAd;;AAEA;AACAA,iBAAK6K,IAAL,GAAYA,IAAZ;;AAEA;AACAtB,kBAAMoB,MAAN,GAAeA,MAAf;AACApB,kBAAMsB,IAAN,GAAaA,IAAb;AACAtB,kBAAMvJ,IAAN,GAAaA,IAAb;;AAEA,mBAAOuJ,KAAP;AACH;;;;;AAED;;;;;;yCAMiBlI,M,EAAQkI,K,EAAO;AAAA;;AAE5B,gBAAIlI,UAAU,IAAV,IAAkBkI,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAIoB,SAASpB,MAAMoB,MAAnB;AACA,oBAAIE,OAAOtB,MAAMsB,IAAjB;AACA,oBAAI7K,OAAOuJ,MAAMvJ,IAAjB;;AAEA,oBAAI2K,UAAU,IAAV,IAAkBE,QAAQ,IAA1B,IAAkC7K,QAAQ,IAA9C,EAAoD;;AAEhD;AACAqB,2BAAOgN,GAAP,CAAW1D,MAAX,EAAmBE,IAAnB,EAAyB7K,IAAzB;;AAEA;AACAqB,2BAAOiN,MAAP,CAAczD,IAAd,EAAoB,KAAKrJ,UAAzB;AACAH,2BAAOiN,MAAP,CAActO,IAAd,EAAoB,KAAKyB,UAAzB;AACAJ,2BAAOiN,MAAP,CAAc3D,MAAd,EAAsB,KAAKjJ,YAA3B;;AAEA;AACAL,2BAAOkN,SAAP;;AAEA5D,2BAAOyC,EAAP,CAAU,UAAV,EAAsB,YAAM;AACxB;;;;AAIA,+BAAKW,WAAL,CAAiBxE,KAAjB;AACH,qBAND;;AAQAvJ,yBAAKoN,EAAL,CAAQ,UAAR,EAAoB,YAAM;AACtB;;;;AAIA,+BAAKW,WAAL,CAAiBxE,KAAjB;AACH,qBAND;AAOH;AACJ;AACJ;;;;;AAED;;;;;oCAKYA,K,EAAO;;AAEf;AACA,iBAAKiE,aAAL,GAAqBjE,KAArB;;AAEA;;;;AAIA,iBAAKwG,iBAAL,GAAyBxG,MAAMvJ,IAAN,CAAWA,IAApC;;AAEA;AACA,iBAAKyN,aAAL,GAAqB,IAArB;;AAEA;;;;;AAKA,iBAAKjP,MAAL,CAAYwR,MAAZ;AACH;;AAED;;;;;;;;iDAKyBlF,U,EAAY9K,I,EAAM;;AAEvC;AACA8K,uBAAWmF,OAAX,CAAmBjQ,IAAnB;;AAEA;AACA,iBAAKgH,kBAAL;;AAEA;AACA,iBAAK3F,MAAL,CAAYkN,SAAZ;AACH;;AAED;;;;;;;;8CAKsBlN,M,EAAQkI,K,EAAO;;AAEjC,gBAAIlI,UAAU,IAAV,IAAkBkI,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAIoB,SAASpB,KAAb;AACA,oBAAIsB,OAAOtB,MAAMsB,IAAjB;AACA,oBAAI7K,OAAOuJ,MAAMvJ,IAAjB;;AAEA,oBAAI2K,UAAU,IAAV,IAAkBE,QAAQ,IAA1B,IAAkC7K,QAAQ,IAA9C,EAAoD;;AAEhD;AACAqB,2BAAO+M,MAAP,CAAczD,MAAd;AACAtJ,2BAAO+M,MAAP,CAAcvD,IAAd;AACAxJ,2BAAO+M,MAAP,CAAcpO,IAAd;;AAEA;AACAqB,2BAAOkN,SAAP;AACH;AACJ;AACJ;;;;;AAED;;;wDAGgC;;AAE5B;AACA,iBAAK/K,2BAAL;;AAEA;;;;AAIA,iBAAKhF,MAAL,CAAYuK,OAAZ,CAAoBmH,uBAApB,CAA4CC,wBAA5C;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAIzQ,4BAA4B0E,QAAQgM,QAAR,CAAiB,KAAKlO,mCAAtB,CAAhC;;AAEA;AACA,qBAAKjD,cAAL,CAAoBoR,gBAApB,CAAqC,KAAK9Q,MAA1C,EAAkD,KAAKC,WAAvD,EAAoEE,yBAApE;;AAEA;AACA,qBAAKA,yBAAL,GAAiCA,yBAAjC;;AAEA;AACA,qBAAKD,gBAAL,GAAwB,KAAKR,cAAL,CAAoB4E,gBAApB,CAAqCnE,yBAArC,CAAxB;;AAEA;;;;AAIA,qBAAKlB,MAAL,CAAYuK,OAAZ,CAAoBmH,uBAApB,CAA4CC,wBAA5C;AACH,aArBD,CAqBE,OAAMzC,CAAN,EAAS;AACP,qBAAKlP,MAAL,CAAYuK,OAAZ,CAAoBmH,uBAApB,CAA4CI,8BAA5C;AACH;AACJ;;;;;AAED;;;sDAG8B;AAC1B,iBAAKpO,mCAAL,GAA2CkC,QAAQmM,MAAR,CAAe,KAAK7Q,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;2DAGmC;;AAE/B,gBAAI,CAAC,KAAKA,yBAAL,CAA+B8Q,gBAApC,EAAsD;AAClD;;;;;AAKA,qBAAK9Q,yBAAL,CAA+B+Q,sBAA/B,GAAwD,IAAxD;AACA,qBAAK/Q,yBAAL,CAA+BgR,2BAA/B,GAA6D,IAA7D;AACA,qBAAKhR,yBAAL,CAA+B+M,sBAA/B,GAAwD,IAAxD;;AAEA;AACA,qBAAKjF,6BAAL;AACH;AACJ;;AAED;;;;;;iEAGyC;;AAErC,gBAAI,KAAK9H,yBAAL,CAA+B+Q,sBAA/B,IAAyD,IAAzD,IACA,KAAK/Q,yBAAL,CAA+B+Q,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAK/Q,yBAAL,CAA+BgR,2BAA/B,GAA6D,EAA7D;AACH;;AAED;AACA,iBAAKlJ,6BAAL;AACH;;AAED;;;;;;sEAG8C;;AAE1C;AACA,gBAAIiJ,yBAAyB,KAAK/Q,yBAAL,CAA+B+Q,sBAA5D;;AAEA;AACA,gBAAIhE,yBAAyB,KAAK/M,yBAAL,CAA+B+M,sBAA5D;;AAEA;AACA,gBAAIkE,iCAAiC,KAAKlR,gBAAL,CAAsBiR,2BAA3D;;AAEA;AACA,gBAAIE,iCAAiC,KAAKlR,yBAAL,CAA+BgR,2BAApE;;AAEA;AACA,gBAAIG,+BAA+B,KAAK5R,cAAL,CAAoB6R,kCAApB,CAAuDL,sBAAvD,EAA+EG,8BAA/E,CAAnC;;AAEA,gBAAIC,gCAAgC,IAAhC,IAAwCA,gCAAgC,EAA5E,EAAgF;AAC5E;;AAEA;AACA,qBAAKrJ,6BAAL;AACH,aALD,MAKO,IAAIqJ,gCAAgC,IAApC,EAA0C;;AAE7C;AACA,oBAAIE,uBAAuB,KAAKtR,gBAAL,CAAsBuO,IAAjD;;AAEA;AACA,oBAAIgD,mBAAmBH,6BAA6B7C,IAApD;;AAEA;AACA,oBAAIgD,oBAAoBD,oBAAxB,EAA8C;AAC1C;;;;;AAKA;AACA,wBAAI1K,SAASC,QAAQ,KAAKhH,UAAL,CAAgB,qDAAhB,CAAR,CAAb;;AAEA,wBAAI+G,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,4BAAI4K,mBAAmB,KAAK7S,SAAL,CAAe2M,GAAf,CAAmBiG,mBAAmB,SAAtC,CAAvB;;AAEA,4BAAIC,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,gCAAIC,eAAeD,iBAAiBE,eAAjB,EAAnB;;AAEA;AACAD,yCAAajP,EAAb,GAAkB,KAAKvC,yBAAL,CAA+BuC,EAAjD;AACAiP,yCAAaV,gBAAb,GAAgC,IAAhC;AACAU,yCAAaT,sBAAb,GAAsCA,sBAAtC;AACAS,yCAAaR,2BAAb,GAA2CE,8BAA3C;AACAM,yCAAazE,sBAAb,GAAsCA,sBAAtC;;AAEA;;;;AAIA,iCAAKvK,mCAAL,GAA2CkP,KAAKC,SAAL,CAAeH,YAAf,CAA3C;;AAEA;AACA,iCAAKI,qCAAL;AACH;AACJ,qBA9BD,MA8BO;AACH;;;;AAIA,6BAAK5R,yBAAL,CAA+BgR,2BAA/B,GAA6DC,8BAA7D;AACH;AACJ,iBA9CD,MA8CO;AACH;;;;AAIA,yBAAKnJ,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAI+J,cAAc,KAAKtS,cAAL,CAAoBuS,UAApB,EAAlB;;AAEA,mBAAOD,WAAP;AACH;;AAED;;;;;;;;wDAKgChS,M,EAAQ;AACpC,gBAAIkS,uBAAuB,KAAKxS,cAAL,CAAoByS,+BAApB,CAAoDnS,MAApD,CAA3B;;AAEA,mBAAOkS,oBAAP;AACH;;AAED;;;;;;;;8CAKsBlS,M,EAAQ;AAC1B,gBAAIoS,aAAa,KAAK1S,cAAL,CAAoB2S,qBAApB,CAA0CrS,MAA1C,CAAjB;;AAEA,mBAAOoS,UAAP;AACH;;AAED;;;;;;;;0CAKkBpS,M,EAAQ;AACtB,gBAAIyM,SAAS,KAAK/M,cAAL,CAAoB4S,iBAApB,CAAsCtS,MAAtC,CAAb;;AAEA,mBAAOyM,MAAP;AACH;;AAED;;;;;;mDAG2B;;AAEvB;AACA,gBAAI8B,WAAW,EAAf;AACAA,qBAAS9N,IAAT,GAAgB,KAAKV,UAAL,CAAgB,qBAAhB,CAAhB;AACAwO,qBAASlE,KAAT,GAAiB,MAAjB;AACAkE,qBAAStE,MAAT,GAAkB,GAAlB;AACAsE,qBAASrE,MAAT,GAAkB,GAAlB;AACAqE,qBAASpE,KAAT,GAAiB,GAAjB;AACAoE,qBAASnE,KAAT,GAAiB,CAAC,EAAlB;;AAEA;AACA,iBAAKjK,yBAAL,CAA+BgJ,MAA/B,CAAsCgC,IAAtC,CAA2CoD,QAA3C;;AAEA;AACA,iBAAKtG,6BAAL;AACH;;AAED;;;;;;;oDAI4BsK,K,EAAOvI,K,EAAO;;AAEtC;AACA,gBAAIwG,oBAAoBxG,MAAMvJ,IAA9B;;AAEA;AACA,gBAAIqG,SAASC,QAAQ,KAAKhH,UAAL,CAAgB,0CAAhB,EAA4D,EAAEyQ,mBAAmBA,iBAArB,EAA5D,CAAR,CAAb;;AAEA,gBAAI1J,MAAJ,EAAY;AACR;;AAEA;AACA,qBAAK3G,yBAAL,CAA+BgJ,MAA/B,CAAsCyD,MAAtC,CAA6C2F,KAA7C,EAAoD,CAApD;;AAEA;AACA,qBAAKtK,6BAAL;AACH;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAIuK,UAAU,IAAd;;AAEA,gBAAI,KAAK1Q,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACA,oBAAI2Q,UAAU,KAAK3Q,MAAL,CAAY4Q,SAAZ,CAAsB,WAAtB,CAAd;;AAEA;AACAF,0BAAU,KAAK3S,WAAL,CAAiB8S,8BAAjB,CAAgDF,OAAhD,CAAV;AACH;;AAED,mBAAOD,OAAP;AACH;;AAED;;;;;;;;uCAKe9H,O,EAAShK,I,EAAM;AAC1B,iBAAKF,WAAL,CAAiBC,IAAjB,GAAwBiK,OAAxB;AACA,iBAAKlK,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACH;;;;;AAED;;;;8CAIsB;AAClB,gBAAI,KAAKlB,eAAL,CAAqBoT,iBAArB,MAA4C,KAAKpR,wBAArD,EAA+E;AAC3E,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;kCAIUqR,M,EAAQ;;AAEd;AACA,gBAAI/Q,SAAS+C,QAAQ8B,OAAR,CAAgB,MAAM,KAAKvE,QAA3B,CAAb;;AAEA,gBAAIN,UAAU,IAAV,IAAkBA,OAAOmF,MAAP,GAAgB,CAAtC,EAAyC;;AAErC;AACAnF,yBAASA,OAAO,CAAP,CAAT;;AAEA;AACA,oBAAI2Q,UAAU3Q,OAAO4Q,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,oBAAIrM,cAAc,KAAKxG,WAAL,CAAiB8S,8BAAjB,CAAgDF,OAAhD,CAAlB;;AAEA;AACA,qBAAKjT,eAAL,CAAqBsT,UAArB,CAAgCD,MAAhC,EAAwCxM,WAAxC;AACH;AACJ;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAK0M,YAAL,GAAoB,KAAK9T,MAAL,CAAYuG,GAAZ,CAAgB,MAAhB,EAAwBX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB,CAEpF,CAF2C,CAAxB,CAApB;AAGH;;;;;AAED;;;;;yCAKiBsN,S,EAAW;AACxB,gBAAIvG,SAAS,IAAb;;AAEA,gBAAIuG,aAAa,IAAjB,EAAuB;AACnBvG,yBAAS,KAAK/M,cAAL,CAAoBuT,gBAApB,CAAqCD,SAArC,CAAT;AACH;;AAED,mBAAOvG,MAAP;AACH;;AAED;;;;;;6DAGqC;;AAEjC,gBAAI,CAAC,KAAKtM,yBAAL,CAA+B+S,kBAApC,EAAwD;AACpD;;;;;AAKA,qBAAK/S,yBAAL,CAA+B2I,wBAA/B,GAA0D,IAA1D;AACA,qBAAK3I,yBAAL,CAA+B4I,6BAA/B,GAA+D,IAA/D;;AAEA;AACA,qBAAKd,6BAAL;AACH;AACJ;;AAED;;;;;;mEAG2C;;AAEvC,gBAAI,KAAK9H,yBAAL,CAA+B2I,wBAA/B,IAA2D,IAA3D,IACA,KAAK3I,yBAAL,CAA+B2I,wBAA/B,IAA2D,EAD/D,EACmE;;AAE/D;;;;AAIA,qBAAK3I,yBAAL,CAA+B4I,6BAA/B,GAA+D,EAA/D;AACH;;AAED;AACA,iBAAKd,6BAAL;AACH;;AAED;;;;;;wEAGgD;;AAE5C;AACA,iBAAKA,6BAAL;AACH;;AAED;;;;;;iDAGyB;;AAErB,gBAAI,KAAKgG,aAAL,IAAsB,IAA1B,EAAgC;AAC5B;;;;;AAKA;;;;AAIA,qBAAKA,aAAL,GAAqB,IAArB;;AAEA;AACA,qBAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,qBAAKpM,MAAL,CAAYqR,mBAAZ;AACH;AACJ;;AAED;;;;;;mDAG2B;;AAEvB,gBAAI,KAAKlF,aAAL,IAAsB,IAA1B,EAAgC;;AAE5B;AACA,oBAAIuC,oBAAoB,KAAKA,iBAA7B;;AAEA;AACA,qBAAKvC,aAAL,CAAmBxN,IAAnB,CAAwBiQ,OAAxB,CAAgCF,iBAAhC;;AAEA;AACA,qBAAKA,iBAAL,GAAyB,IAAzB;;AAEA;;;;AAIA,qBAAKvC,aAAL,GAAqB,IAArB;;AAEA;AACA,qBAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,qBAAKpM,MAAL,CAAYqR,mBAAZ;;AAEA;AACA,qBAAK1L,kBAAL;;AAEA;AACA,qBAAK3F,MAAL,CAAYkN,SAAZ;AACH;AACJ;;AAED;;;;;;mDAG2B;;AAEvB,gBAAI,KAAKf,aAAL,IAAsB,IAA1B,EAAgC;;AAE5B;AACA,oBAAIuC,oBAAoB,KAAKvC,aAAL,CAAmBxN,IAAnB,CAAwBA,IAAhD;;AAEA;AACA,oBAAIqG,SAASC,QAAQ,KAAKhH,UAAL,CAAgB,0CAAhB,EAA4D,EAAEyQ,mBAAmBA,iBAArB,EAA5D,CAAR,CAAb;;AAEA,oBAAI1J,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,wBAAIsE,SAAS,KAAK6C,aAAL,CAAmB7C,MAAhC;;AAEA,wBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,6BAAKkE,qBAAL,CAA2B,KAAKxN,MAAhC,EAAwCsJ,MAAxC;;AAEA;;;;AAIA,6BAAK6C,aAAL,GAAqB,IAArB;;AAEA;AACA,6BAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,6BAAKpM,MAAL,CAAYqR,mBAAZ;;AAEA;AACA,6BAAK1L,kBAAL;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;sDAG8B;;AAE1B;AACA,gBAAI2L,OAAO,KAAK7P,oBAAhB;;AAEA;;;;;;;AAOA6P,mBAAO,KAAK/T,aAAL,CAAmBgU,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,mBAAO,KAAKvT,WAAL,CAAiByT,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,iBAAKjT,yBAAL,CAA+BqD,MAA/B,GAAwC4P,IAAxC;;AAEA;AACA,iBAAKnL,6BAAL;AACH;;AAGD;;;;;;gDAGwB;;AAEpB;AACA,gBAAIsL,SAAS,EAAb;AACAA,mBAAOC,KAAP,GAAe,IAAf;AACAD,mBAAOvT,MAAP,GAAgB,KAAKA,MAArB;AACAuT,mBAAOtT,WAAP,GAAqB,KAAKA,WAA1B;AACAsT,mBAAOvL,MAAP,GAAgB,YAAhB;;AAEA;AACA,iBAAKhJ,UAAL,CAAgByU,UAAhB,CAA2B,kBAA3B,EAA+CF,MAA/C;AACH;;AAED;;;;;;gDAGwB;;AAEpB;;;;AAIA,gBAAIG,wBAAwB,EAA5B;AACAA,kCAAsB1T,MAAtB,GAA+B,KAAKA,MAApC;AACA0T,kCAAsBzT,WAAtB,GAAoC,IAApC;AACAyT,kCAAsBC,QAAtB,GAAiC,QAAjC;;AAEA;AACA,gBAAI,KAAKxT,yBAAL,CAA+ByT,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAKzT,yBAAL,CAA+ByT,mBAA/B,GAAqD,EAArD;AACH;;AAED;AACA,iBAAKzT,yBAAL,CAA+ByT,mBAA/B,CAAmDzI,IAAnD,CAAwDuI,qBAAxD;;AAEA;AACA,iBAAKzL,6BAAL;AACH;;AAED;;;;;;;iDAIyBsK,K,EAAO;;AAE5B,gBAAI,KAAKpS,yBAAL,CAA+ByT,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAKzT,yBAAL,CAA+ByT,mBAA/B,CAAmDhH,MAAnD,CAA0D2F,KAA1D,EAAiE,CAAjE;AACH;;AAED;AACA,iBAAKtK,6BAAL;AACH;;AAED;;;;;;;iDAIyB4L,I,EAAM;;AAE3B,gBAAIA,QAAQ,IAAR,IAAgBA,QAAQ,KAA5B,EAAmC;AAC/B;AACA,qBAAK1T,yBAAL,CAA+BgD,cAA/B,GAAgD,KAAhD;AACA,qBAAKhD,yBAAL,CAA+BiD,gBAA/B,GAAkD,KAAlD;AACH,aAJD,MAIO;AACH;AACA,qBAAKjD,yBAAL,CAA+BgD,cAA/B,GAAgD,IAAhD;AACA,qBAAKhD,yBAAL,CAA+BiD,gBAA/B,GAAkD,IAAlD;AACH;;AAED;;;;;AAKA,iBAAKnE,MAAL,CAAY6G,KAAZ,CAAkB,uCAAlB,EAA2D,EAAC9F,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAAqDmD,kBAAkByQ,IAAvE,EAA3D;AACH;;AAED;;;;;;uDAG+B;;AAE3B;;;;AAIA,iBAAKC,wBAAL,CAA8B,KAAK3T,yBAAL,CAA+BiD,gBAA7D;;AAEA;AACA,iBAAK6E,6BAAL;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAInB,SAASC,QAAQ,KAAKhH,UAAL,CAAgB,+CAAhB,CAAR,CAAb;;AAEA,gBAAI+G,MAAJ,EAAY;AACR;;AAEA;AACA,oBAAIqC,SAAS,KAAK+C,SAAL,EAAb;;AAEA;;;;AAIA,oBAAI6H,gBAAgB,KAAKlU,WAAL,CAAiBmU,oBAAjB,CAAsC7K,MAAtC,CAApB;;AAEA;AACA4K,8BAAcE,IAAd,CAAmB,KAAKC,mBAAxB;;AAEA;AACA,qBAAK/T,yBAAL,CAA+BgJ,MAA/B,GAAwC4K,aAAxC;;AAEA;AACA,qBAAK9L,6BAAL;AACH;AACJ;;AAED;;;;;;;;;;;;4CASoBkM,M,EAAQC,M,EAAQ;;AAEhC,gBAAID,OAAO1T,IAAP,GAAc2T,OAAO3T,IAAzB,EAA+B;AAC3B;AACA,uBAAO,CAAC,CAAR;AACH,aAHD,MAGO,IAAI0T,OAAO1T,IAAP,GAAc2T,OAAO3T,IAAzB,EAA+B;AAClC;AACA,uBAAO,CAAP;AACH,aAHM,MAGA;AACH;;;;;AAKA,oBAAI0T,OAAO9J,KAAP,GAAe+J,OAAO/J,KAA1B,EAAiC;AAC7B;AACA,2BAAO,CAAC,CAAR;AACH,iBAHD,MAGO,IAAI8J,OAAO9J,KAAP,GAAe+J,OAAO/J,KAA1B,EAAiC;AACpC;AACA,2BAAO,CAAP;AACH,iBAHM,MAGA;AACH;;;;;AAKA,wBAAI8J,OAAOlK,MAAP,GAAgBmK,OAAOnK,MAA3B,EAAmC;AAC/B;AACA,+BAAO,CAAC,CAAR;AACH,qBAHD,MAGO,IAAIkK,OAAOlK,MAAP,GAAgBmK,OAAOnK,MAA3B,EAAmC;AACtC;AACA,+BAAO,CAAP;AACH,qBAHM,MAGA;AACH;;;;;AAKA,4BAAIkK,OAAOjK,MAAP,GAAgBkK,OAAOlK,MAA3B,EAAmC;AAC/B;AACA,mCAAO,CAAC,CAAR;AACH,yBAHD,MAGO,IAAIiK,OAAOjK,MAAP,GAAgBkK,OAAOlK,MAA3B,EAAmC;AACtC;AACA,mCAAO,CAAP;AACH,yBAHM,MAGA;AACH;;;;AAIA,mCAAO,CAAP;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;;8CAGsB;;AAElB;;;;AAIA,gBAAIpD,SAASC,QAAQ,KAAKhH,UAAL,CAAgB,oDAAhB,CAAR,CAAb;;AAEA,gBAAI+G,MAAJ,EAAY;AACR;;AAEA;AACA,qBAAK3G,yBAAL,CAA+BgJ,MAA/B,GAAwC,EAAxC;;AAEA;AACA,qBAAKlB,6BAAL;AACH;AACJ;;AAED;;;;;;0CAGkB;;AAEd;AACA,iBAAK9I,OAAL,CAAakV,IAAb,CAAkB,8CAAlB;AACH;;;;;;AAGL1V,gBAAgB2V,OAAhB,GAA0B,CACtB,SADsB,EAEtB,WAFsB,EAGtB,WAHsB,EAItB,IAJsB,EAKtB,YALsB,EAMtB,QANsB,EAOtB,UAPsB,EAQtB,SARsB,EAStB,mBATsB,EAUtB,eAVsB,EAWtB,cAXsB,EAYtB,aAZsB,EAatB,iBAbsB,EActB,qBAdsB,EAetB,gBAfsB,EAgBtB,qBAhBsB,EAiBtB,oBAjBsB,EAkBtB,aAlBsB,CAA1B;;kBAqBe3V,e","file":"labelController.js","sourcesContent":["class LabelController {\r\n    constructor(\r\n        $filter,\r\n        $injector,\r\n        $mdDialog,\r\n        $q,\r\n        $rootScope,\r\n        $scope,\r\n        $timeout,\r\n        $window,\r\n        AnnotationService,\r\n        ConfigService,\r\n        LabelService,\r\n        NodeService,\r\n        NotebookService,\r\n        OpenResponseService,\r\n        ProjectService,\r\n        StudentAssetService,\r\n        StudentDataService,\r\n        UtilService\r\n    ) {\r\n\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.$timeout = $timeout;\r\n        this.$window = $window;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.LabelService = LabelService;\r\n        this.NodeService = NodeService;\r\n        this.NotebookService = NotebookService;\r\n        this.OpenResponseService = OpenResponseService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentAssetService = StudentAssetService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // holds student attachments like assets\r\n        this.attachments = [];\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // whether this component is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // whether students can attach files to their work\r\n        this.isStudentAttachmentEnabled = false;\r\n\r\n        // whether the prompt is shown or not\r\n        this.isPromptVisible = true;\r\n\r\n        // whether the save button is shown or not\r\n        this.isSaveButtonVisible = false;\r\n\r\n        // whether the submit button is shown or not\r\n        this.isSubmitButtonVisible = false;\r\n\r\n        // whether the submit button is disabled\r\n        this.isSubmitButtonDisabled = false;\r\n\r\n        // counter to keep track of the number of submits\r\n        this.submitCounter = 0;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // whether the new label button is shown or not\r\n        this.isNewLabelButtonVisible = true;\r\n\r\n        // whether the cancel button is shown or not\r\n        this.isCancelButtonVisible = false;\r\n\r\n        // whether the snip image button is shown or not\r\n        this.isSnipImageButtonVisible = true;\r\n\r\n        // the label for the notebook in thos project\r\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\r\n\r\n        // whether the student can create new labels\r\n        this.canCreateLabels = true;\r\n\r\n        // whether the student can delete labels\r\n        this.canDeleteLabels = true;\r\n\r\n        // whether the student is in the mode to create a new label\r\n        this.createLabelMode = false;\r\n\r\n        // a reference to the canvas\r\n        this.canvas = null;\r\n\r\n        // the canvas width\r\n        this.canvasWidth = 800;\r\n\r\n        // the canvas height\r\n        this.canvasHeight = 600;\r\n\r\n        // the z index of line elements\r\n        this.lineZIndex = 0;\r\n\r\n        // the z index of text elements\r\n        this.textZIndex = 1;\r\n\r\n        // the z index of circle elements\r\n        this.circleZIndex = 2;\r\n\r\n        // the canvas id\r\n        this.canvasId = 'c';\r\n\r\n        // the background image path\r\n        this.backgroundImage = null;\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            // get the component state from the scope\r\n            var componentState = this.$scope.componentState;\r\n\r\n            if (this.componentContent.canCreateLabels != null) {\r\n                this.canCreateLabels = this.componentContent.canCreateLabels;\r\n            }\r\n\r\n            if (this.componentContent.canDeleteLabels != null) {\r\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\r\n            }\r\n\r\n            if (this.componentContent.width != null) {\r\n                this.canvasWidth = this.componentContent.width;\r\n            }\r\n\r\n            if (this.componentContent.height != null) {\r\n                this.canvasHeight = this.componentContent.height;\r\n            }\r\n\r\n            if (this.mode === 'student') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                if (this.canCreateLabels) {\r\n                    this.isNewLabelButtonVisible = true;\r\n                } else {\r\n                    this.isNewLabelButtonVisible = false;\r\n                }\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isNewLabelButtonVisible = false;\r\n                this.isSnipImageButtonVisible = false;\r\n                this.canDeleteLabels = false;\r\n                this.isDisabled = true;\r\n\r\n                if (componentState != null) {\r\n                    // create a unique id for the application iframe using this component state\r\n                    this.canvasId = \"labelCanvas_\" + componentState.id;\r\n                    if (this.mode === 'gradingRevision') {\r\n                        this.canvasId = \"labelCanvas_gradingRevision_\" + componentState.id;\r\n                    }\r\n                }\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isNewLabelButtonVisible = false;\r\n                this.isSnipImageButtonVisible = false;\r\n                this.canDeleteLabels = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isNewLabelButtonVisible = false;\r\n                this.canDeleteLabels = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n\r\n                    // the canvas width\r\n                    this.canvasWidth = 800;\r\n\r\n                    // the canvas height\r\n                    this.canvasHeight = 600;\r\n\r\n                    this.submitCounter = 0;\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                    if (this.canvas != null) {\r\n\r\n                        // clear the parent to remove the canvas\r\n                        $('#canvasParent_' + this.canvasId).empty();\r\n\r\n                        // create a new canvas\r\n                        var canvas = $('<canvas/>');\r\n                        canvas.attr('id', this.canvasId);\r\n                        canvas.css('border', '1px solid black');\r\n\r\n                        // add the new canvas\r\n                        $('#canvasParent_' + this.canvasId).append(canvas);\r\n\r\n                        /*\r\n                         * clear the background so that setupCanvas() can\r\n                         * reapply the background\r\n                         */\r\n                        this.backgroundImage = null;\r\n\r\n                        // setup the new canvas\r\n                        this.setupCanvas();\r\n                    }\r\n\r\n                    if (this.componentContent.canCreateLabels != null) {\r\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\r\n                    }\r\n\r\n                    if (this.canCreateLabels) {\r\n                        this.isNewLabelButtonVisible = true;\r\n                    } else {\r\n                        this.isNewLabelButtonVisible = false;\r\n                    }\r\n                }.bind(this), true);\r\n            }\r\n\r\n            this.$timeout(angular.bind(this, function() {\r\n                // wait for angular to completely render the html before we initialize the canvas\r\n\r\n                this.setupCanvas();\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * Returns true iff there is student work that hasn't been saved yet\r\n         */\r\n        this.$scope.isDirty = function() {\r\n            return this.$scope.labelController.isDirty;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a promise of a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.labelController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.labelController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.labelController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n\r\n                // trigger the submit\r\n                var submitTriggeredBy = 'nodeSubmitButton';\r\n                this.submit(submitTriggeredBy);\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // set isDirty to false because the component state was just saved and notify node\r\n                this.isDirty = false;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                let isAutoSave = componentState.isAutoSave;\r\n                let isSubmit = componentState.isSubmit;\r\n                let serverSaveTime = componentState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                // set save message\r\n                if (isSubmit) {\r\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\r\n\r\n                    this.lockIfNecessary();\r\n\r\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                } else if (isAutoSave) {\r\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                } else {\r\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n        }));\r\n\r\n        /*\r\n         * Listen for the requestImage event which is fired when something needs\r\n         * an image representation of the student data from a specific\r\n         * component.\r\n         */\r\n        this.$scope.$on('requestImage', (event, args) => {\r\n\r\n            // get the node id and component id from the args\r\n            var nodeId = args.nodeId;\r\n            var componentId = args.componentId;\r\n\r\n            // check if the image is being requested from this component\r\n            if (this.nodeId === nodeId && this.componentId === componentId) {\r\n\r\n                // obtain the image blob\r\n                var imageObject = this.getImageObject();\r\n\r\n                if (imageObject != null) {\r\n                    var args = {};\r\n                    args.nodeId = nodeId;\r\n                    args.componentId = componentId;\r\n                    args.imageObject = imageObject;\r\n\r\n                    // fire an event that contains the image object\r\n                    this.$scope.$emit('requestImageCallback', args);\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\r\n\r\n        }));\r\n\r\n        /**\r\n         * The student has changed the file input\r\n         * @param element the file input element\r\n         */\r\n        this.$scope.fileUploadChanged = function(element) {\r\n\r\n            // get the current background image if any\r\n            var backgroundImage = this.labelController.getBackgroundImage();\r\n\r\n            var overwrite = true;\r\n\r\n            if (backgroundImage != null && backgroundImage != '') {\r\n                /*\r\n                 * there is an existing background image so we will ask the\r\n                 * student if they want to change it\r\n                 */\r\n                var answer = confirm(this.labelController.$translate('label.areYouSureYouWantToChangeTheBackgroundImage'));\r\n\r\n                if (answer) {\r\n                    // the student wants to change the background image\r\n                    overwrite = true;\r\n                } else {\r\n                    // the student does not want to change the background image\r\n                    overwrite = false;\r\n\r\n                    /*\r\n                     * clear the input file value otherwise it will show the\r\n                     * name of the file they recently selected but decided not\r\n                     * to use because they decided not to change the background\r\n                     * image\r\n                     */\r\n                    element.value = null;\r\n                }\r\n            }\r\n\r\n            if (overwrite) {\r\n                // we will change the current background\r\n\r\n                // get the files from the file input element\r\n                var files = element.files;\r\n\r\n                if (files != null && files.length > 0) {\r\n\r\n                    // upload the file to the studentuploads folder\r\n                    this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\r\n\r\n                        // make a referenced copy of the unreferenced asset\r\n                        this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\r\n\r\n                            if (referencedAsset != null) {\r\n                                // get the url of the referenced asset\r\n                                var imageURL = referencedAsset.url;\r\n\r\n                                if (imageURL != null && imageURL != '') {\r\n\r\n                                    // set the referenced asset as the background image\r\n                                    this.labelController.setBackgroundImage(imageURL);\r\n                                    this.labelController.studentDataChanged();\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'background') {\r\n                                // the target is the background image\r\n\r\n                                // set the background file name\r\n                                this.authoringComponentContent.backgroundImage = fileName;\r\n\r\n                                // the authoring component content has changed so we will save the project\r\n                                this.authoringViewComponentChanged();\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    setupCanvas() {\r\n        // initialize the canvas\r\n        var canvas = this.initializeCanvas();\r\n        this.canvas = canvas;\r\n\r\n        // get the component state from the scope\r\n        var componentState = this.$scope.componentState;\r\n\r\n        if (this.canDeleteLabels && !this.disabled) {\r\n            // create the key down listener to listen for the delete key\r\n            this.createKeydownListener();\r\n        }\r\n\r\n        // set whether studentAttachment is enabled\r\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\r\n\r\n        if (componentState == null) {\r\n            /*\r\n             * only import work if the student does not already have\r\n             * work for this component\r\n             */\r\n\r\n            // check if we need to import work\r\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\r\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\r\n            }\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\r\n            }\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n                // import the work from the other component\r\n                this.importWork();\r\n            } else if (this.componentContent.labels != null) {\r\n                /*\r\n                 * the student has not done any work and there are starter labels\r\n                 * so we will populate the canvas with the starter labels\r\n                 */\r\n                this.addLabelsToCanvas(this.componentContent.labels);\r\n            }\r\n        } else {\r\n            // populate the student work into this component\r\n            this.setStudentWork(componentState);\r\n        }\r\n\r\n        // get the background image that may have been set by the student data\r\n        var backgroundImage = this.getBackgroundImage();\r\n\r\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\r\n            // get the background image from the component content if any\r\n            this.setBackgroundImage(this.componentContent.backgroundImage);\r\n        }\r\n\r\n        // check if the student has used up all of their submits\r\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n            /*\r\n             * the student has used up all of their chances to submit so we\r\n             * will disable the submit button\r\n             */\r\n            this.isSubmitButtonDisabled = true;\r\n        }\r\n\r\n        // check if we need to lock this component\r\n        this.calculateDisabled();\r\n\r\n        if (this.$scope.$parent.nodeController != null) {\r\n            // register this component with the parent node\r\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                // get the labels from the student data\r\n                var labels = studentData.labels;\r\n\r\n                // add the labels to the canvas\r\n                this.addLabelsToCanvas(labels);\r\n\r\n                // get the background image from the student data\r\n                var backgroundImage = studentData.backgroundImage;\r\n\r\n                if (backgroundImage != null) {\r\n                    this.setBackgroundImage(backgroundImage);\r\n                }\r\n\r\n                var submitCounter = studentData.submitCounter;\r\n\r\n                if (submitCounter != null) {\r\n                    // populate the submit counter\r\n                    this.submitCounter = submitCounter;\r\n                }\r\n\r\n                this.processLatestSubmit();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\r\n     */\r\n    processLatestSubmit() {\r\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n        if (latestState) {\r\n            let serverSaveTime = latestState.serverSaveTime;\r\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n            if (latestState.isSubmit) {\r\n                // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n            } else {\r\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add labels ot the canvas\r\n     * @param labels an array of objects that contain the values for a label\r\n     */\r\n    addLabelsToCanvas(labels) {\r\n        if (labels != null) {\r\n\r\n            // loop through all the labels\r\n            for (var x = 0; x < labels.length; x++) {\r\n\r\n                // get a label\r\n                var label = labels[x];\r\n\r\n                if (label != null) {\r\n\r\n                    // get the values of the label\r\n                    var pointX = label.pointX;\r\n                    var pointY = label.pointY;\r\n                    var textX = label.textX;\r\n                    var textY = label.textY;\r\n                    var text = label.text;\r\n                    var color = label.color;\r\n\r\n                    // create the label\r\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\r\n\r\n                    // add the label to the canvas\r\n                    this.addLabelToCanvas(this.canvas, label);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n\r\n        // trigger the submit\r\n        var submitTriggeredBy = 'componentSubmitButton';\r\n        this.submit(submitTriggeredBy);\r\n\r\n        //this.isSubmit = true;\r\n\r\n        // tell the parent node that this component wants to submit\r\n        //this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * A submit was triggered by the component submit button or node submit button\r\n     * @param submitTriggeredBy what triggered the submit\r\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\r\n     */\r\n    submit(submitTriggeredBy) {\r\n\r\n        if (this.isSubmitDirty) {\r\n            // the student has unsubmitted work\r\n\r\n            var performSubmit = true;\r\n\r\n            if (this.componentContent.maxSubmitCount != null) {\r\n                // there is a max submit count\r\n\r\n                // calculate the number of submits this student has left\r\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\r\n\r\n                var message = '';\r\n\r\n                if (numberOfSubmitsLeft <= 0) {\r\n                    // the student does not have any more chances to submit\r\n                    performSubmit = false;\r\n                } else if (numberOfSubmitsLeft == 1) {\r\n                    /*\r\n                     * the student has one more chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                } else if (numberOfSubmitsLeft > 1) {\r\n                    /*\r\n                     * the student has more than one chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                }\r\n            }\r\n\r\n            if (performSubmit) {\r\n\r\n                /*\r\n                 * set isSubmit to true so that when the component state is\r\n                 * created, it will know that is a submit component state\r\n                 * instead of just a save component state\r\n                 */\r\n                this.isSubmit = true;\r\n\r\n                // increment the submit counter\r\n                this.incrementSubmitCounter();\r\n\r\n                // check if the student has used up all of their submits\r\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                    /*\r\n                     * the student has used up all of their submits so we will\r\n                     * disable the submit button\r\n                     */\r\n                    this.isSubmitButtonDisabled = true;\r\n                }\r\n\r\n                if (this.mode === 'authoring') {\r\n                    /*\r\n                     * we are in authoring mode so we will set values appropriately\r\n                     * here because the 'componentSubmitTriggered' event won't\r\n                     * work in authoring mode\r\n                     */\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.createComponentState('submit');\r\n                }\r\n\r\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\r\n                    // tell the parent node that this component wants to submit\r\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\r\n                    // nothing extra needs to be performed\r\n                }\r\n            } else {\r\n                /*\r\n                 * the student has cancelled the submit so if a component state\r\n                 * is created, it will just be a regular save and not submit\r\n                 */\r\n                this.isSubmit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the student clicks on the new label button to enter\r\n     * create label mode\r\n     */\r\n    newLabelButtonClicked() {\r\n        this.createLabelMode = true;\r\n        this.isCancelButtonVisible = true;\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks on the cancel button to exit\r\n     * create label mode\r\n     */\r\n    cancelButtonClicked() {\r\n        this.createLabelMode = false;\r\n        this.isCancelButtonVisible = false;\r\n    };\r\n\r\n    /**\r\n     * Increment the submit counter\r\n     */\r\n    incrementSubmitCounter() {\r\n        this.submitCounter++;\r\n    }\r\n\r\n    lockIfNecessary() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flags so we will know we need to save or submit the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the label objects from the canvas\r\n     * @returns an array of simple JSON objects that represent the labels\r\n     */\r\n    getLabels() {\r\n        var labels = [];\r\n\r\n        /*\r\n         * get all the circle objects from the canvas which each correspond to\r\n         * a label point\r\n         */\r\n        var objects = this.canvas.getObjects('circle');\r\n\r\n        if (objects != null) {\r\n\r\n            // loop through all the circle objects\r\n            for (var x = 0; x < objects.length; x++) {\r\n\r\n                /*\r\n                 * the object is a circle which contains all the data\r\n                 * for a label\r\n                 */\r\n                var object = objects[x];\r\n\r\n                if (object != null) {\r\n\r\n                    // get the simple JSON object that represents the label\r\n                    var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\r\n\r\n                    if (labelJSONObject != null) {\r\n                        // add the object to our array of labels\r\n                        labels.push(labelJSONObject);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return labels;\r\n    };\r\n\r\n    /**\r\n     * Get the simple JSON object that represents the label\r\n     * @param circle a Fabric circle object\r\n     * @returns a simple JSON object that represents the label\r\n     */\r\n    getLabelJSONObjectFromCircle(circle) {\r\n        var labelJSONObject = {};\r\n\r\n        if (circle != null) {\r\n\r\n            // get the line associated with the circle\r\n            var lineObject = circle.line;\r\n\r\n            // get the text object associated with the circle\r\n            var textObject = circle.text;\r\n\r\n            if (lineObject != null && textObject != null) {\r\n\r\n                // get the position of the circle\r\n                var pointX = circle.get('left');\r\n                var pointY = circle.get('top');\r\n\r\n                /*\r\n                 * get the offset of the end of the line\r\n                 * (this is where the text object is also located)\r\n                 */\r\n                var xDiff = lineObject.x2 - lineObject.x1;\r\n                var yDiff = lineObject.y2 - lineObject.y1;\r\n\r\n                // get the position of the text object\r\n                var textX = xDiff;\r\n                var textY = yDiff;\r\n\r\n                // get the text and background color of the text\r\n                var text = textObject.text;\r\n                var color = textObject.backgroundColor;\r\n\r\n                // set all the values into the object\r\n                labelJSONObject.pointX = parseInt(pointX);\r\n                labelJSONObject.pointY = parseInt(pointY);\r\n                labelJSONObject.textX = parseInt(textX);\r\n                labelJSONObject.textY = parseInt(textY);\r\n                labelJSONObject.text = text;\r\n                labelJSONObject.color = color;\r\n            }\r\n        }\r\n\r\n        return labelJSONObject;\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        // set the labels into the student data\r\n        var studentData = {};\r\n        studentData.labels = this.getLabels();\r\n\r\n        var backgroundImage = this.getBackgroundImage();\r\n\r\n        if (backgroundImage != null) {\r\n            studentData.backgroundImage = backgroundImage;\r\n        }\r\n\r\n        // set the submit counter\r\n        studentData.submitCounter = this.submitCounter;\r\n\r\n        // the student submitted this work\r\n        componentState.isSubmit = this.isSubmit;\r\n\r\n        // set the student data into the component state\r\n        componentState.studentData = studentData;\r\n\r\n        /*\r\n         * reset the isSubmit value so that the next component state\r\n         * doesn't maintain the same value\r\n         */\r\n        this.isSubmit = false;\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the component after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the new label button\r\n     * @returns whether to show the new label button\r\n     */\r\n    showNewLabelButton() {\r\n        return this.isNewLabelButtonVisible;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the cancel button\r\n     * @returns whether to show the cancel button\r\n     */\r\n    showCancelButton() {\r\n        return this.isCancelButtonVisible;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    removeAttachment(attachment) {\r\n        if (this.attachments.indexOf(attachment) != -1) {\r\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\r\n            this.studentDataChanged();\r\n        }\r\n    };\r\n\r\n    attachStudentAsset(studentAsset) {\r\n        if (studentAsset != null) {\r\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\r\n                if (copiedAsset != null) {\r\n                    var attachment = {\r\n                        studentAssetId: copiedAsset.id,\r\n                        iconURL: copiedAsset.iconURL\r\n                    };\r\n\r\n                    this.attachments.push(attachment);\r\n                    this.studentDataChanged();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the import previous work node id and component id\r\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\r\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\r\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\r\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n\r\n                // get the latest component state for this component\r\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                /*\r\n                 * we will only import work into this component if the student\r\n                 * has not done any work for this component\r\n                 */\r\n                if(componentState == null) {\r\n                    // the student has not done any work for this component\r\n\r\n                    // get the latest component state from the component we are importing from\r\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\r\n\r\n                    if (importWorkComponentState != null) {\r\n                        /*\r\n                         * populate a new component state with the work from the\r\n                         * imported component state\r\n                         */\r\n                        var populatedComponentState = this.LabelService.populateComponentState(importWorkComponentState);\r\n\r\n                        // populate the component state into this component\r\n                        this.setStudentWork(populatedComponentState);\r\n\r\n                        // make the work dirty so that it gets saved\r\n                        this.studentDataChanged();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * Initialize the canvas\r\n     * @returns the canvas object\r\n     */\r\n    initializeCanvas() {\r\n\r\n        var canvas = null;\r\n\r\n        if (this.componentContent.width != null && this.componentContent.width != '') {\r\n            this.canvasWidth = this.componentContent.width;\r\n        }\r\n\r\n        if (this.componentContent.height != null && this.componentContent.height != '') {\r\n            this.canvasHeight = this.componentContent.height;\r\n        }\r\n\r\n        // get the canvas object from the html\r\n        if (this.isDisabled) {\r\n            // we will make the canvas uneditable\r\n            canvas = new fabric.StaticCanvas(this.canvasId);\r\n        } else {\r\n            // make the canvas editable\r\n            canvas = new fabric.Canvas(this.canvasId);\r\n        }\r\n\r\n        // disable selection of items\r\n        canvas.selection = false;\r\n\r\n        // change the cursor to a hand when it is hovering over an object\r\n        canvas.hoverCursor = 'pointer';\r\n\r\n        // set the width and height of the canvas\r\n        canvas.setWidth(this.canvasWidth);\r\n        canvas.setHeight(this.canvasHeight);\r\n\r\n        // set the height on the parent div so that a vertical scrollbar doesn't show up\r\n        $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\r\n\r\n        // listen for the mouse down event\r\n        canvas.on('mouse:down', angular.bind(this, function(options) {\r\n\r\n            // get the object that was clicked on if any\r\n            var activeObject = this.canvas.getActiveObject();\r\n\r\n            if (activeObject == null) {\r\n                /*\r\n                 * no objects in the canvas were clicked. the user clicked\r\n                 * on a blank area of the canvas so we will unselect any label\r\n                 * that was selected and turn off edit label mode\r\n                 */\r\n                this.selectedLabel = null;\r\n                this.editLabelMode = false;\r\n            }\r\n\r\n            // check if the student is in create label mode\r\n            if (this.createLabelMode) {\r\n                /*\r\n                 * the student is in create label mode so we will create a new label\r\n                 * where they have clicked\r\n                 */\r\n\r\n                // turn off create label mode and hide the cancel button\r\n                this.createLabelMode = false;\r\n                this.isCancelButtonVisible = false;\r\n\r\n                var event = options.e;\r\n\r\n                if (event != null) {\r\n                    // get the x and y position that the student clicked on\r\n                    var x = event.layerX;\r\n                    var y = event.layerY;\r\n\r\n                    /*\r\n                     * set the location of the text object to be down to the right\r\n                     * of the position the student clicked on\r\n                     */\r\n                    var textX = 100;\r\n                    var textY = 100;\r\n\r\n                    // create a new label\r\n                    var newLabel = this.createLabel(x, y, textX, textY, this.$translate('label.aNewLabel'), 'blue');\r\n\r\n                    // add the label to the canvas\r\n                    this.addLabelToCanvas(this.canvas, newLabel);\r\n\r\n                    /*\r\n                     * make the new label selected so that the student can edit\r\n                     * the text\r\n                     */\r\n                    this.selectLabel(newLabel);\r\n\r\n                    // notify others that the student data has changed\r\n                    this.studentDataChanged();\r\n                }\r\n            }\r\n        }));\r\n\r\n        // listen for the object moving event\r\n        canvas.on('object:moving', angular.bind(this, function(options) {\r\n            var target = options.target;\r\n\r\n            if (target != null) {\r\n\r\n                // get the type of the object that is moving\r\n                var type = target.get('type');\r\n\r\n                // get the position of the element\r\n                var left = target.get('left');\r\n                var top = target.get('top');\r\n\r\n                // limit the x position to the canvas\r\n                if (left < 0) {\r\n                    target.set('left', 0);\r\n                    left = 0;\r\n                } else if (left > this.canvasWidth) {\r\n                    target.set('left', this.canvasWidth);\r\n                    left = this.canvasWidth;\r\n                }\r\n\r\n                // limit the y position to the canvas\r\n                if (top < 0) {\r\n                    target.set('top', 0);\r\n                    top = 0;\r\n                } else if (top > this.canvasHeight) {\r\n                    target.set('top', this.canvasHeight);\r\n                    top = this.canvasHeight;\r\n                }\r\n\r\n                if (type === 'circle') {\r\n                    /*\r\n                     * the student is moving the point of the label so we need to update\r\n                     * the endpoint of the line and the position of the text element.\r\n                     * the endpoint of the line and the position of the text element should\r\n                     * maintain the relative position to the point.\r\n                     */\r\n\r\n                    // get the line associated with the circle\r\n                    var line = target.line;\r\n\r\n                    var xDiff = 0;\r\n                    var yDiff = 0;\r\n\r\n                    if (line != null) {\r\n                        // calculate the relative offset of the end of the line\r\n                        xDiff = line.x2 - line.x1;\r\n                        yDiff = line.y2 - line.y1;\r\n\r\n                        // set the new position of the two endpoints of the line\r\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\r\n\r\n                        // remove and add the line to refresh the element in the canvas\r\n                        canvas.remove(line);\r\n                        canvas.add(line);\r\n\r\n                        // set the z index so it will be below the circle and text elements\r\n                        canvas.moveTo(line, this.lineZIndex);\r\n                    }\r\n\r\n                    // get the text element\r\n                    var text = target.text;\r\n\r\n                    if (text != null) {\r\n                        // set the new position of the text element\r\n                        text.set({left: left + xDiff, top: top + yDiff});\r\n\r\n                        // remove and add the line to refresh the element in the canvas\r\n                        canvas.remove(text);\r\n                        canvas.add(text);\r\n\r\n                        // set the z index so it will be above line elements and below circle elements\r\n                        canvas.moveTo(text, this.textZIndex);\r\n                    }\r\n                } else if (type === 'i-text') {\r\n                    /*\r\n                     * the student is moving the text of the label so we need to update\r\n                     * the endpoint of the line. the endpoint of the line should be in\r\n                     * the same position as the text element.\r\n                     */\r\n\r\n                    var line = target.line;\r\n\r\n                    if (line != null) {\r\n                        // set the new position of the text element\r\n                        line.set({x2: left, y2: top});\r\n\r\n                        // remove and add the line to refresh the element in the canvas\r\n                        canvas.remove(line);\r\n                        canvas.add(line);\r\n\r\n                        // set the z index so it will be below the circle and text elements\r\n                        canvas.moveTo(line, this.lineZIndex);\r\n                    }\r\n                }\r\n\r\n                // refresh the canvas\r\n                canvas.renderAll();\r\n\r\n                // notify others that the student data has changed\r\n                this.studentDataChanged();\r\n            }\r\n        }));\r\n\r\n        // listen for the text changed event\r\n        canvas.on('text:changed', angular.bind(this, function(options) {\r\n            var target = options.target;\r\n\r\n            if (target != null) {\r\n\r\n                var type = target.get('type');\r\n\r\n                if (type === 'i-text') {\r\n                    // notify others that the student data has changed\r\n                    this.studentDataChanged();\r\n                }\r\n            }\r\n        }));\r\n\r\n        return canvas;\r\n    };\r\n\r\n    /**\r\n     * Set the background image\r\n     * @param backgroundImagePath the url path to an image\r\n     */\r\n    setBackgroundImage(backgroundImagePath) {\r\n\r\n        if (backgroundImagePath != null) {\r\n            this.backgroundImage = backgroundImagePath;\r\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the background image\r\n     * @returns the background image path\r\n     */\r\n    getBackgroundImage() {\r\n        return this.backgroundImage;\r\n    };\r\n\r\n    /**\r\n     * Create the keydown listener that we will use for deleting labels\r\n     */\r\n    createKeydownListener() {\r\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\r\n    };\r\n\r\n    /**\r\n     * The callback handler for the keydown event\r\n     * @param e the event\r\n     */\r\n    keyPressed(e) {\r\n\r\n        // get the key code of the key that was pressed\r\n        var keyCode = e.keyCode;\r\n\r\n        // 8 is backspace and 46 is delete\r\n        if (keyCode === 8 || keyCode === 46) {\r\n\r\n            // get the active object\r\n            var activeObject = this.canvas.getActiveObject();\r\n\r\n            if (activeObject != null) {\r\n\r\n                // make sure the active object is a circle which represents the label\r\n                if (activeObject.get('type') === 'circle') {\r\n\r\n                    // remove the label from the canvas\r\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\r\n\r\n                    // notify others that the student data has changed\r\n                    this.studentDataChanged();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a label object. The label object is represented by a circle\r\n     * element (the point), a line element, and a text element. The circle\r\n     * element will contain a reference to the line and text elements. The\r\n     * text element will contain a reference to the line element.\r\n     * @param pointX the x position of the point (circle)\r\n     * @param pointY the y position of the point (circle)\r\n     * @param textX the x position of the text relative to the point (circle)\r\n     * @param textY the y position of the text relative to the point (circle)\r\n     * @param textString the text of the label\r\n     * @param color the background color of the label\r\n     * @returns an object containing a circle, line, and text\r\n     */\r\n    createLabel(pointX, pointY, textX, textY, textString, color) {\r\n        var label = {};\r\n\r\n        // get the position of the point\r\n        var x1 = pointX;\r\n        var y1 = pointY;\r\n\r\n        // get the absolute position of the text\r\n        var x2 = pointX + textX;\r\n        var y2 = pointY + textY;\r\n\r\n        if (color == null) {\r\n            // the default background color for text elements will be blue\r\n            color = 'blue';\r\n        }\r\n\r\n        // create a circle element\r\n        var circle = new fabric.Circle({\r\n            radius: 5,\r\n            left: x1,\r\n            top: y1,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            hasControls: false,\r\n            borderColor: 'red',\r\n            hasBorders: true,\r\n            selectable: true\r\n        });\r\n\r\n        // create a line element\r\n        var line = new fabric.Line([x1, y1, x2, y2], {\r\n            fill: 'black',\r\n            stroke: 'black',\r\n            strokeWidth: 3,\r\n            selectable: false\r\n        });\r\n\r\n        // create an editable text element\r\n        var text = new fabric.IText(textString, {\r\n            left: x2,\r\n            top: y2,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            fontSize: 20,\r\n            fill: 'white',\r\n            backgroundColor: color,\r\n            width: 100,\r\n            hasControls: false,\r\n            hasBorders: true,\r\n            borderColor: 'red',\r\n            selectable: true,\r\n            cursorWidth: 0,\r\n            editable: false\r\n        });\r\n\r\n        // give the circle a reference to the line and text elements\r\n        circle.line = line;\r\n        circle.text = text;\r\n\r\n        // give the text element a reference to the line element\r\n        text.line = line;\r\n\r\n        // add the circle, line, and text elements to the label object\r\n        label.circle = circle;\r\n        label.line = line;\r\n        label.text = text;\r\n\r\n        return label;\r\n    };\r\n\r\n    /**\r\n     * Add a label to canvas\r\n     * @param canvas the canvas\r\n     * @param label an object that contains a Fabric circle, Fabric line,\r\n     * and Fabric itext elements\r\n     */\r\n    addLabelToCanvas(canvas, label) {\r\n\r\n        if (canvas != null && label != null) {\r\n\r\n            // get the circle, line and text elements\r\n            var circle = label.circle;\r\n            var line = label.line;\r\n            var text = label.text;\r\n\r\n            if (circle != null && line != null && text != null) {\r\n\r\n                // add the elements to the canvas\r\n                canvas.add(circle, line, text);\r\n\r\n                // set the z indexes for the elements\r\n                canvas.moveTo(line, this.lineZIndex);\r\n                canvas.moveTo(text, this.textZIndex);\r\n                canvas.moveTo(circle, this.circleZIndex);\r\n\r\n                // refresh the canvas\r\n                canvas.renderAll();\r\n\r\n                circle.on('selected', () => {\r\n                    /*\r\n                     * the circle was clicked so we will make the associated\r\n                     * label selected\r\n                     */\r\n                    this.selectLabel(label);\r\n                });\r\n\r\n                text.on('selected', () => {\r\n                    /*\r\n                     * the text was clicked so we will make the associated\r\n                     * label selected\r\n                     */\r\n                    this.selectLabel(label);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Make the label selected which means we will show the UI elements to\r\n     * allow the text to be edited and the label to deleted.\r\n     * @param label the label object\r\n     */\r\n    selectLabel(label) {\r\n\r\n        // create a reference to the selected label\r\n        this.selectedLabel = label;\r\n\r\n        /*\r\n         * remember the label text before the student changes it in case the\r\n         * student wants to cancel any changes they make\r\n         */\r\n        this.selectedLabelText = label.text.text;\r\n\r\n        // turn on edit label mode\r\n        this.editLabelMode = true;\r\n\r\n        /*\r\n         * force angular to refresh, otherwise angular will wait until the\r\n         * user generates another input (such as moving the mouse) before\r\n         * refreshing\r\n         */\r\n        this.$scope.$apply();\r\n    }\r\n\r\n    /**\r\n     * The student has changed the label text on the selected label\r\n     * @param textObject the label's canvas text object\r\n     * @param text the text string\r\n     */\r\n    selectedLabelTextChanged(textObject, text) {\r\n\r\n        // set the text into the object\r\n        textObject.setText(text);\r\n\r\n        // notify the controller that the student data has changed\r\n        this.studentDataChanged();\r\n\r\n        // refresh the canvas\r\n        this.canvas.renderAll();\r\n    }\r\n\r\n    /**\r\n     * Remove a label from the canvas\r\n     * @param canvas the canvas\r\n     * @param label the Fabric circle element that represents the label\r\n     */\r\n    removeLabelFromCanvas(canvas, label) {\r\n\r\n        if (canvas != null && label != null) {\r\n\r\n            // get the circle, line, and text elements\r\n            var circle = label;\r\n            var line = label.line;\r\n            var text = label.text;\r\n\r\n            if (circle != null && line != null && text != null) {\r\n\r\n                // remove the elements from the canvas\r\n                canvas.remove(circle);\r\n                canvas.remove(line);\r\n                canvas.remove(text);\r\n\r\n                // refresh the canvas\r\n                canvas.renderAll();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\r\n\r\n            // set the new authoring component content\r\n            this.authoringComponentContent = authoringComponentContent;\r\n\r\n            // set the component content\r\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the step node ids in the project\r\n     * @returns all the step node ids\r\n     */\r\n    getStepNodeIds() {\r\n        var stepNodeIds = this.ProjectService.getNodeIds();\r\n\r\n        return stepNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Add a label in the authoring view\r\n     */\r\n    authoringAddLabelClicked() {\r\n\r\n        // create the new label\r\n        var newLabel = {};\r\n        newLabel.text = this.$translate('label.enterTextHere');\r\n        newLabel.color = 'blue';\r\n        newLabel.pointX = 100;\r\n        newLabel.pointY = 100;\r\n        newLabel.textX = 100;\r\n        newLabel.textY = -25;\r\n\r\n        // add the label to the array of labels\r\n        this.authoringComponentContent.labels.push(newLabel);\r\n\r\n        // save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a label in the authoring view\r\n     * @param index the index of the label in the labels array\r\n     */\r\n    authoringDeleteLabelClicked(index, label) {\r\n\r\n        // get the label text\r\n        var selectedLabelText = label.text;\r\n\r\n        // ask the author if they are sure they want to delete this label\r\n        var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\r\n\r\n        if (answer) {\r\n            // the author answered yes to delete the label\r\n\r\n            // delete the label from the array\r\n            this.authoringComponentContent.labels.splice(index, 1);\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the image object representation of the student data\r\n     * @returns an image object\r\n     */\r\n    getImageObject() {\r\n        var pngFile = null;\r\n\r\n        if (this.canvas != null) {\r\n\r\n            // get the image as a base64 string\r\n            var img_b64 = this.canvas.toDataURL('image/png');\r\n\r\n            // get the image object\r\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\r\n        }\r\n\r\n        return pngFile;\r\n    }\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the snip image button\r\n     * @return whether to show the snip image button\r\n     */\r\n    showSnipImageButton() {\r\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Snip the labels by converting it to an image\r\n     * @param $event the click event\r\n     */\r\n    snipImage($event) {\r\n\r\n        // get the canvas element\r\n        var canvas = angular.element('#' + this.canvasId);\r\n\r\n        if (canvas != null && canvas.length > 0) {\r\n\r\n            // get the top canvas\r\n            canvas = canvas[0];\r\n\r\n            // get the canvas as a base64 string\r\n            var img_b64 = canvas.toDataURL('image/png');\r\n\r\n            // get the image object\r\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\r\n\r\n            // create a notebook item with the image populated into it\r\n            this.NotebookService.addNewItem($event, imageObject);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\r\n\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The student clicked the save button in the edit label mode\r\n     */\r\n    saveLabelButtonClicked() {\r\n\r\n        if (this.selectedLabel != null) {\r\n            /*\r\n             * we do not need to perform any saving of the text since it has\r\n             * already been handled by the ng-model for the label text\r\n             */\r\n\r\n            /*\r\n             * remove the reference to the selected label since it will no\r\n             * longer be selected\r\n             */\r\n            this.selectedLabel = null;\r\n\r\n            // turn off edit label mode\r\n            this.editLabelMode = false;\r\n\r\n            // make the canvas object no longer the active object\r\n            this.canvas.discardActiveObject();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The student clicked the cancel button in the edit label mode\r\n     */\r\n    cancelLabelButtonClicked() {\r\n\r\n        if (this.selectedLabel != null) {\r\n\r\n            // get the label text before the student recently made changes to it\r\n            var selectedLabelText = this.selectedLabelText;\r\n\r\n            // revert the label text to what it was before\r\n            this.selectedLabel.text.setText(selectedLabelText);\r\n\r\n            // clear the label text holder\r\n            this.selectedLabelText = null;\r\n\r\n            /*\r\n             * remove the reference to the selected label since it will no\r\n             * longer be selected\r\n             */\r\n            this.selectedLabel = null;\r\n\r\n            // turn off edit label mode\r\n            this.editLabelMode = false;\r\n\r\n            // make the canvas object no longer the active object\r\n            this.canvas.discardActiveObject();\r\n\r\n            // notify others that the student data has changed\r\n            this.studentDataChanged();\r\n\r\n            // refresh the canvas\r\n            this.canvas.renderAll();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The student clicked the delete button in the edit label mode\r\n     */\r\n    deleteLabelButtonClicked() {\r\n\r\n        if (this.selectedLabel != null) {\r\n\r\n            // get the text from the label we are going to delete\r\n            var selectedLabelText = this.selectedLabel.text.text;\r\n\r\n            // confirm with the student that they want to delete the label\r\n            var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\r\n\r\n            if (answer) {\r\n                // the student is sure they want to delete the label\r\n\r\n                /*\r\n                 * get the circle from the label since the circle has\r\n                 * references to the line and text for the label\r\n                 */\r\n                var circle = this.selectedLabel.circle;\r\n\r\n                if (circle != null) {\r\n\r\n                    // remove the label from the canvas\r\n                    this.removeLabelFromCanvas(this.canvas, circle);\r\n\r\n                    /*\r\n                     * remove the reference to the selected label since it will no\r\n                     * longer be selected\r\n                     */\r\n                    this.selectedLabel = null;\r\n\r\n                    // turn off edit label mode\r\n                    this.editLabelMode = false;\r\n\r\n                    // make the canvas object no longer the active object\r\n                    this.canvas.discardActiveObject();\r\n\r\n                    // notify others that the student data has changed\r\n                    this.studentDataChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n\r\n    /**\r\n     * Show the asset popup to allow the author to choose the background image\r\n     */\r\n    chooseBackgroundImage() {\r\n\r\n        // generate the parameters\r\n        var params = {};\r\n        params.popup = true;\r\n        params.nodeId = this.nodeId;\r\n        params.componentId = this.componentId;\r\n        params.target = 'background';\r\n\r\n        // display the asset chooser\r\n        this.$rootScope.$broadcast('openAssetChooser', params);\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Save the starter labels from the component authoring preview\r\n     */\r\n    saveStarterLabels() {\r\n\r\n        // ask the author if they are sure they want to save the starter labels\r\n        var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\r\n\r\n        if (answer) {\r\n            // the author answered yes to save the starter labels\r\n\r\n            // get the labels in the component authoring preview\r\n            var labels = this.getLabels();\r\n\r\n            /*\r\n             * make a copy of the labels so we don't run into any referencing issues\r\n             * later\r\n             */\r\n            var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\r\n\r\n            // sort the labels alphabetically by their text\r\n            starterLabels.sort(this.labelTextComparator);\r\n\r\n            // set the labels\r\n            this.authoringComponentContent.labels = starterLabels;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A comparator used to sort labels alphabetically\r\n     * It should be used like labels.sort(this.labelTextComparator);\r\n     * @param labelA a label object\r\n     * @param labelB a label object\r\n     * @return -1 if labelA comes before labelB\r\n     * 1 if labelB comes after labelB\r\n     * 0 of the labels are equal\r\n     */\r\n    labelTextComparator(labelA, labelB) {\r\n\r\n        if (labelA.text < labelB.text) {\r\n            // the labelA text comes before the labelB text alphabetically\r\n            return -1;\r\n        } else if (labelA.text > labelB.text) {\r\n            // the labelA text comes after the labelB text alphabetically\r\n            return 1;\r\n        } else {\r\n            /*\r\n             * the labelA text is the same as the labelB text so we will\r\n             * try to break the tie by looking at the color\r\n             */\r\n\r\n            if (labelA.color < labelB.color) {\r\n                // the labelA color text comes before the labelB color text alphabetically\r\n                return -1;\r\n            } else if (labelA.color > labelB.color) {\r\n                // the labelA color text comes after the labelB color text alphabetically\r\n                return 1;\r\n            } else {\r\n                /*\r\n                 * the labelA color text is the same as the labelB color text so\r\n                 * we will try to break the tie by looking at the pointX\r\n                 */\r\n\r\n                if (labelA.pointX < labelB.pointX) {\r\n                    // the labelA pointX is smaller than the labelB pointX\r\n                    return -1;\r\n                } else if (labelA.pointX > labelB.pointX) {\r\n                    // the labelA pointX is larger than the labelB pointX\r\n                    return 1;\r\n                } else {\r\n                    /*\r\n                     * the labelA pointX is the same as the labelB pointX so\r\n                     * we will try to break the tie by looking at the pointY\r\n                     */\r\n\r\n                    if (labelA.pointY < labelB.pointY) {\r\n                        // the labelA pointY is smaller than the labelB pointY\r\n                        return -1;\r\n                    } else if (labelA.pointY > labelB.pointY) {\r\n                        // the labelA pointY is larger than the labelB pointY\r\n                        return 1;\r\n                    } else {\r\n                        /*\r\n                         * all the label values are the same between labelA\r\n                         * and labelB\r\n                         */\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete all the starter labels\r\n     */\r\n    deleteStarterLabels() {\r\n\r\n        /*\r\n         * ask the author if they are sure they want to delete all the starter\r\n         * labels\r\n         */\r\n        var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\r\n\r\n        if (answer) {\r\n            // the author answered yes to delete\r\n\r\n            // clear the labels array\r\n            this.authoringComponentContent.labels = [];\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open a webpage in a new tab that shows a lot of the javascript colors\r\n     */\r\n    openColorViewer() {\r\n\r\n        // open the webpage in a new tab\r\n        this.$window.open('http://www.javascripter.net/faq/colornam.htm');\r\n    }\r\n}\r\n\r\nLabelController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    '$timeout',\r\n    '$window',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'LabelService',\r\n    'NodeService',\r\n    'NotebookService',\r\n    'OpenResponseService',\r\n    'ProjectService',\r\n    'StudentAssetService',\r\n    'StudentDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default LabelController;\r\n"]}