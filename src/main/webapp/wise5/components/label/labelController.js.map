{"version":3,"sources":["labelController.es6"],"names":["LabelController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","isNewLabelButtonVisible","isCancelButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","isResetButtonVisible","enableCircles","fabric","Text","prototype","set","_getNonTransformedDimensions","Point","width","height","scalarAdd","padding","_calculateCurrentDimensions","util","transformPoint","_getTransformedDimensions","getViewportTransform","studentDataVersion","labels","nodeId","componentId","componentState","componentContent","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","onlyHasShowWorkConnectedComponents","isDisabled","id","angular","bind","setupCanvas","isDirty","labelController","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","imageObject","getImageObject","$emit","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","$translate","value","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","$broadcast","submit","initializeCanvas","disabled","createKeydownListener","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","addLabelsToCanvas","componentStateIsSameAsStarter","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","studentData","version","setStudentDataVersion","processLatestStudentWork","x","label","pointX","pointY","textX","textY","text","color","canEdit","canDelete","createLabel","addLabelToCanvas","createLabelOnCanvas","objects","getObjects","object","labelJSONObject","getLabelJSONObjectFromText","push","circle","getLabelFromCircle","lineObject","line","textObject","get","isStudentDataVersion","xDiff","x2","x1","yDiff","y2","y1","left","top","textString","backgroundColor","parseInt","getLabelFromText","circleObject","createNewComponentState","getStudentDataVersion","getLabelData","componentType","createComponentStateAdditionalProcessing","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","document","getElementById","$","css","on","options","activeObject","getActiveObject","selectedLabel","editLabelMode","target","type","remove","add","moveTo","renderAll","newLabelLocation","getNewLabelLocation","newLabel","selectLabel","nextPointLocation","getNextPointLocation","newTextLocation","getNextTextLocation","unoccupiedPointLocation","getUnoccupiedPointLocation","occupiedPointLocations","occupiedPointLocation","getOccupiedPointLocations","y","isPointOccupied","backgroundImagePath","window","addEventListener","keyPressed","e","keyCode","saveLabelButtonClicked","$apply","makeSureXIsWithinXMinMaxLimits","makeSureYIsWithinYMinMaxLimits","radius","pointSize","parseFloat","fontSize","Circle","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","wrappedTextString","labelWidth","wordWrap","IText","borderDashArray","borderScaleFactor","borderOpacityWhenMoving","cursorWidth","editable","selectedLabelText","setActiveObject","giveFocusToLabelTextInput","offset","editLabelTextInputTop","focus","wrappedText","setText","splice","indexOf","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","$event","addNote","discardActiveObject","deleteLabel","removeLabelFromCanvas","componentStates","mergedComponentState","mergedLabels","mergedBackgroundImage","c","concat","connectedComponent","getConnectedComponentForComponentState","response","importWorkAsBackground","charactersPerLine","spaceInbetweenLines","createImageFromText","image","getConnectedComponentByComponentState","setComponentStateAsBackgroundImage","connectedComponents","generateImageFromComponentState","tempLabels","tempLabel","showWorkConnectedComponentCount","ComponentController","$inject"],"mappings":"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","file":"labelController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport Fabric from 'fabric';\nimport html2canvas from 'html2canvas';\n\nclass LabelController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      LabelService,\n      NodeService,\n      NotebookService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.LabelService = LabelService;\n    this.OpenResponseService = OpenResponseService;\n\n    // whether the new label button is shown or not\n    this.isNewLabelButtonVisible = true;\n\n    // whether the cancel button is shown or not\n    this.isCancelButtonVisible = false;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // whether the student can create new labels\n    this.canCreateLabels = true;\n\n    // whether the student is in the mode to create a new label\n    this.createLabelMode = false;\n\n    // a reference to the canvas\n    this.canvas = null;\n\n    // the canvas width\n    this.canvasWidth = 800;\n\n    // the canvas height\n    this.canvasHeight = 600;\n\n    // the z index of line elements\n    this.lineZIndex = 0;\n\n    // the z index of text elements\n    this.textZIndex = 1;\n\n    // the z index of circle elements\n    this.circleZIndex = 2;\n\n    // the canvas id\n    this.canvasId = 'c';\n\n    // the background image path\n    this.backgroundImage = null;\n\n    // whether to show the reset button\n    this.isResetButtonVisible = true;\n\n    this.enableCircles = true;\n\n    // modify Fabric so that Text elements can utilize padding\n    fabric.Text.prototype.set({\n      _getNonTransformedDimensions() { // Object dimensions\n        return new fabric.Point(this.width, this.height).scalarAdd(this.padding);\n      },\n      _calculateCurrentDimensions() { // Controls dimensions\n        return fabric.util.transformPoint(this._getTransformedDimensions(),\n            this.getViewportTransform(), true);\n      }\n    });\n\n    /*\n     * Student data version 1 is where the text x and y positioning is relative\n     * to the circle.\n     * Student data version 2 is where the text x and y positioning is absolute.\n     */\n    this.studentDataVersion = 2;\n\n    /*\n     * This will hold canvas label objects. A canvas label object contains a\n     * circle object, line object, and text object.\n     */\n    this.labels = [];\n\n\n    this.canvasId = 'canvas_' + this.nodeId + '_' + this.componentId;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (this.componentContent.canCreateLabels != null) {\n      this.canCreateLabels = this.componentContent.canCreateLabels;\n    }\n\n    if (this.componentContent.width != null) {\n      this.canvasWidth = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      this.canvasHeight = this.componentContent.height;\n    }\n\n    if (this.componentContent.enableCircles != null) {\n      this.enableCircles = this.componentContent.enableCircles;\n    }\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      if (this.onlyHasShowWorkConnectedComponents()) {\n        this.isDisabled = true;\n      }\n\n      if (this.canCreateLabels) {\n        this.isNewLabelButtonVisible = true;\n      } else {\n        this.isNewLabelButtonVisible = false;\n      }\n\n      if (this.isDisabled) {\n        this.isNewLabelButtonVisible = false;\n        this.canCreateLabels = false;\n        this.isResetButtonVisible = false;\n      }\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isDisabled = true;\n\n      if (componentState != null) {\n        // create a unique id for the application label element using this component state\n        this.canvasId = 'labelCanvas_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.canvasId = 'labelCanvas_gradingRevision_' + componentState.id;\n        }\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    this.$timeout(angular.bind(this, function() {\n      // wait for angular to completely render the html before we initialize the canvas\n\n      this.setupCanvas();\n    }));\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.labelController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.labelController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.labelController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.labelController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /*\n     * Listen for the requestImage event which is fired when something needs\n     * an image representation of the student data from a specific\n     * component.\n     */\n    this.$scope.$on('requestImage', (event, args) => {\n\n      // get the node id and component id from the args\n      var nodeId = args.nodeId;\n      var componentId = args.componentId;\n\n      // check if the image is being requested from this component\n      if (this.nodeId === nodeId && this.componentId === componentId) {\n\n        // obtain the image blob\n        var imageObject = this.getImageObject();\n\n        if (imageObject != null) {\n          var args = {};\n          args.nodeId = nodeId;\n          args.componentId = componentId;\n          args.imageObject = imageObject;\n\n          // fire an event that contains the image object\n          this.$scope.$emit('requestImageCallback', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    /**\n     * The student has changed the file input\n     * @param element the file input element\n     */\n    this.$scope.fileUploadChanged = function(element) {\n\n      // get the current background image if any\n      var backgroundImage = this.labelController.getBackgroundImage();\n\n      var overwrite = true;\n\n      if (backgroundImage != null && backgroundImage != '') {\n        /*\n         * there is an existing background image so we will ask the\n         * student if they want to change it\n         */\n        var answer = confirm(this.labelController.$translate('label.areYouSureYouWantToChangeTheBackgroundImage'));\n\n        if (answer) {\n          // the student wants to change the background image\n          overwrite = true;\n        } else {\n          // the student does not want to change the background image\n          overwrite = false;\n\n          /*\n           * clear the input file value otherwise it will show the\n           * name of the file they recently selected but decided not\n           * to use because they decided not to change the background\n           * image\n           */\n          element.value = null;\n        }\n      }\n\n      if (overwrite) {\n        // we will change the current background\n\n        // get the files from the file input element\n        var files = element.files;\n\n        if (files != null && files.length > 0) {\n\n          // upload the file to the studentuploads folder\n          this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\n\n            // make a referenced copy of the unreferenced asset\n            this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n\n              if (referencedAsset != null) {\n                // get the url of the referenced asset\n                var imageURL = referencedAsset.url;\n\n                if (imageURL != null && imageURL != '') {\n\n                  // set the referenced asset as the background image\n                  this.labelController.setBackgroundImage(imageURL);\n                  this.labelController.studentDataChanged();\n                }\n              }\n            });\n          });\n        }\n      }\n    };\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setupCanvas() {\n    // initialize the canvas\n    var canvas = this.initializeCanvas();\n    this.canvas = canvas;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (!this.disabled) {\n      // create the key down listener to listen for the delete key\n      this.createKeydownListener();\n    }\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      } else if (this.LabelService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n\n        if (this.componentContent.labels != null) {\n          // populate the canvas with the starter labels\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      } else if (this.LabelService.componentStateIsSameAsStarter(componentState, this.componentContent)) {\n        // the student labels are the same as the starter labels\n        this.setStudentWork(componentState);\n      } else if (componentState == null) {\n        if (this.componentContent.labels != null) {\n          /*\n           * the student has not done any work and there are starter labels\n           * so we will populate the canvas with the starter labels\n           */\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      }\n    } else if (this.mode === 'grading') {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    } else {\n      if (componentState == null && this.componentContent.labels != null) {\n        // populate the canvas with the starter labels\n        this.addLabelsToCanvas(this.componentContent.labels);\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n    }\n\n    // get the background image that may have been set by the student data\n    var backgroundImage = this.getBackgroundImage();\n\n    if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n      // get the background image from the component content if any\n      this.setBackgroundImage(this.componentContent.backgroundImage);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.version == null) {\n          this.setStudentDataVersion(1);\n        } else {\n          this.setStudentDataVersion(studentData.version);\n        }\n\n        // get the labels from the student data\n        var labels = studentData.labels;\n\n        // add the labels to the canvas\n        this.addLabelsToCanvas(labels);\n\n        // get the background image from the student data\n        var backgroundImage = studentData.backgroundImage;\n\n        if (backgroundImage != null) {\n          this.setBackgroundImage(backgroundImage);\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestStudentWork();\n      }\n    }\n  };\n\n  /**\n   * Add labels ot the canvas\n   * @param labels an array of objects that contain the values for a label\n   */\n  addLabelsToCanvas(labels) {\n    if (labels != null) {\n\n      // loop through all the labels\n      for (let x = 0; x < labels.length; x++) {\n\n        // get a label\n        var label = labels[x];\n\n        if (label != null) {\n\n          // get the values of the label\n          let pointX = label.pointX;\n          let pointY = label.pointY;\n          let textX = label.textX;\n          let textY = label.textY;\n          let text = label.text;\n          let color = label.color;\n          let canEdit = label.canEdit;\n          let canDelete = label.canDelete;\n\n          // create the label\n          var label = this.createLabel(pointX, pointY, textX, textY, text,\n              color, canEdit, canDelete);\n\n          // add the label to the canvas\n          this.addLabelToCanvas(this.canvas, label);\n        }\n      }\n    }\n  }\n\n  newLabelButtonClicked() {\n    this.createLabelOnCanvas();\n  }\n\n  /**\n   * Called when the student clicks on the cancel button to exit\n   * create label mode\n   */\n  cancelButtonClicked() {\n    this.createLabelMode = false;\n    this.isCancelButtonVisible = false;\n  };\n\n  /**\n   * Get the label data from the canvas.\n   * @returns An array of simple JSON objects that contain the label data.\n   */\n  getLabelData() {\n    var labels = [];\n\n    /*\n     * get all the circle objects from the canvas which each correspond to\n     * a label point\n     */\n    var objects = this.canvas.getObjects('i-text');\n\n    if (objects != null) {\n\n      // loop through all the circle objects\n      for (var x = 0; x < objects.length; x++) {\n\n        /*\n         * the object is a circle which contains all the data\n         * for a label\n         */\n        var object = objects[x];\n\n        if (object != null) {\n\n          // get the simple JSON object that represents the label\n          var labelJSONObject = this.getLabelJSONObjectFromText(object);\n\n          if (labelJSONObject != null) {\n            // add the object to our array of labels\n            labels.push(labelJSONObject);\n          }\n        }\n      }\n    }\n\n    return labels;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param circle a Fabric circle object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromCircle(circle) {\n    var labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    var label = this.getLabelFromCircle(circle);\n\n    // get the line associated with the circle\n    var lineObject = circle.line;\n\n    // get the text object associated with the circle\n    var textObject = circle.text;\n\n    // get the position of the circle\n    var pointX = circle.get('left');\n    var pointY = circle.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      var xDiff = lineObject.x2 - lineObject.x1;\n      var yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    var text = label.textString;\n    var color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = text;\n    labelJSONObject.color = color;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param text a Fabric text object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromText(text) {\n    let labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    let label = this.getLabelFromText(text);\n    let circleObject = label.circle;\n    let lineObject = label.line;\n    let textObject = label.text;\n\n    // get the position of the circle\n    let pointX = circleObject.get('left');\n    let pointY = circleObject.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      let xDiff = lineObject.x2 - lineObject.x1;\n      let yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    let textString = label.textString;\n    let color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = textString;\n    labelJSONObject.color = color;\n\n    let canEdit = label.canEdit;\n    if (canEdit == null) {\n      canEdit = false;\n    }\n    labelJSONObject.canEdit = canEdit;\n\n    let canDelete = label.canDelete;\n    if (canDelete == null) {\n      canDelete = false;\n    }\n    labelJSONObject.canDelete = canDelete;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n    studentData.version = this.getStudentDataVersion();\n    studentData.labels = this.getLabelData();\n\n    var backgroundImage = this.getBackgroundImage();\n    if (backgroundImage != null) {\n      studentData.backgroundImage = backgroundImage;\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Label';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Check whether we need to show the new label button\n   * @returns whether to show the new label button\n   */\n  showNewLabelButton() {\n    return this.isNewLabelButtonVisible;\n  };\n\n  /**\n   * Check whether we need to show the cancel button\n   * @returns whether to show the cancel button\n   */\n  showCancelButton() {\n    return this.isCancelButtonVisible;\n  };\n\n  /**\n   * Initialize the canvas\n   * @returns the canvas object\n   */\n  initializeCanvas() {\n\n    var canvas = null;\n\n    if (this.componentContent.width != null && this.componentContent.width != '') {\n      this.canvasWidth = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null && this.componentContent.height != '') {\n      this.canvasHeight = this.componentContent.height;\n    }\n\n    // get the canvas object from the html\n    if (this.isDisabled) {\n      // we will make the canvas uneditable\n      canvas = new fabric.StaticCanvas(this.canvasId);\n    } else {\n      // make the canvas editable\n      canvas = new fabric.Canvas(this.canvasId);\n    }\n\n    // disable selection of items\n    canvas.selection = false;\n\n    // change the cursor to a hand when it is hovering over an object\n    canvas.hoverCursor = 'pointer';\n\n    // set the width and height of the canvas\n    canvas.setWidth(this.canvasWidth);\n    canvas.setHeight(this.canvasHeight);\n    document.getElementById(this.canvasId).width = this.canvasWidth;\n    document.getElementById(this.canvasId).height = this.canvasHeight;\n\n    // set the height on the parent div so that a vertical scrollbar doesn't show up\n    $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n    // listen for the mouse down event\n    canvas.on('mouse:down', angular.bind(this, function(options) {\n\n      // get the object that was clicked on if any\n      var activeObject = this.canvas.getActiveObject();\n\n      if (activeObject == null) {\n        /*\n         * no objects in the canvas were clicked. the user clicked\n         * on a blank area of the canvas so we will unselect any label\n         * that was selected and turn off edit label mode\n         */\n        this.selectedLabel = null;\n        this.editLabelMode = false;\n      }\n    }));\n\n    // listen for the object moving event\n    canvas.on('object:moving', angular.bind(this, function(options) {\n      var target = options.target;\n\n      if (target != null) {\n\n        // get the type of the object that is moving\n        var type = target.get('type');\n\n        // get the position of the element\n        var left = target.get('left');\n        var top = target.get('top');\n\n        // limit the x position to the canvas\n        if (left < 0) {\n          target.set('left', 0);\n          left = 0;\n        } else if (left > this.canvasWidth) {\n          target.set('left', this.canvasWidth);\n          left = this.canvasWidth;\n        }\n\n        // limit the y position to the canvas\n        if (top < 0) {\n          target.set('top', 0);\n          top = 0;\n        } else if (top > this.canvasHeight) {\n          target.set('top', this.canvasHeight);\n          top = this.canvasHeight;\n        }\n\n        if (type === 'circle') {\n          /*\n           * the student is moving the point of the label so we need to update\n           * the endpoint of the line and the position of the text element.\n           * the endpoint of the line and the position of the text element should\n           * maintain the relative position to the point.\n           */\n\n          // get the line associated with the circle\n          var line = target.line;\n\n          var xDiff = 0;\n          var yDiff = 0;\n\n          if (line != null) {\n            // calculate the relative offset of the end of the line\n            xDiff = line.x2 - line.x1;\n            yDiff = line.y2 - line.y1;\n\n            if (this.isStudentDataVersion(1)) {\n              // set the new position of the two endpoints of the line\n              line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n            } else {\n              // set the new position of the circle endpoint of the line\n              line.set({x1: left, y1: top});\n            }\n\n            // remove and add the line to refresh the element in the canvas\n            canvas.remove(line);\n            canvas.add(line);\n\n            // set the z index so it will be below the circle and text elements\n            canvas.moveTo(line, this.lineZIndex);\n          }\n\n          // get the text element\n          var text = target.text;\n\n          if (text != null) {\n            if (this.isStudentDataVersion(1)) {\n              /*\n               * In the old student data version the text position is relative\n               * to the circle so we need to move the text along with the circle.\n               */\n\n              // set the new position of the text element\n              text.set({left: left + xDiff, top: top + yDiff});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(text);\n              canvas.add(text);\n\n              // set the z index so it will be above line elements and below circle elements\n              canvas.moveTo(text, this.textZIndex);\n            }\n          }\n        } else if (type === 'i-text') {\n          if (this.enableCircles) {\n            /*\n             * the student is moving the text of the label so we need to update\n             * the endpoint of the line. the endpoint of the line should be in\n             * the same position as the text element.\n             */\n            var line = target.line;\n            if (line != null) {\n              // set the new position of the text element\n              line.set({x2: left, y2: top});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(line);\n              canvas.add(line);\n\n              // set the z index so it will be below the circle and text elements\n              canvas.moveTo(line, this.lineZIndex);\n            }\n          } else {\n            /*\n             * Circles are not enabled so we are only showing the text. We will\n             * set the circle position to be the same as the text position.\n             */\n            let circle = target.circle;\n            let line = target.line;\n            circle.set({left: left, top: top});\n            line.set({x1: left, y1: top, x2: left, y2: top});\n          }\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n        this.studentDataChanged();\n      }\n    }));\n\n    // listen for the text changed event\n    canvas.on('text:changed', angular.bind(this, function(options) {\n      var target = options.target;\n      if (target != null) {\n        var type = target.get('type');\n        if (type === 'i-text') {\n          this.studentDataChanged();\n        }\n      }\n    }));\n\n    return canvas;\n  };\n\n  createLabelOnCanvas() {\n    this.createLabelMode = false;\n    this.isCancelButtonVisible = false;\n    const newLabelLocation = this.getNewLabelLocation();\n    const canEdit = true;\n    const canDelete = true;\n    const newLabel = this.createLabel(newLabelLocation.pointX, newLabelLocation.pointY,\n        newLabelLocation.textX, newLabelLocation.textY,\n        this.$translate('label.aNewLabel'), 'blue', canEdit, canDelete);\n    this.addLabelToCanvas(this.canvas, newLabel);\n    this.selectLabel(newLabel);\n    this.studentDataChanged();\n  }\n\n  getNewLabelLocation() {\n    const nextPointLocation = this.getNextPointLocation();\n    const pointX = nextPointLocation.pointX;\n    const pointY = nextPointLocation.pointY;\n    const newTextLocation = this.getNextTextLocation(pointX, pointY);\n    const textX = newTextLocation.textX;\n    const textY = newTextLocation.textY;\n    return {\n      pointX: pointX,\n      pointY: pointY,\n      textX: textX,\n      textY: textY\n    };\n  }\n\n  getNextPointLocation() {\n    let unoccupiedPointLocation = this.getUnoccupiedPointLocation();\n    if (unoccupiedPointLocation == null) {\n      return {pointX: 50, pointY: 50};\n    } else {\n      return unoccupiedPointLocation;\n    }\n  }\n\n  getNextTextLocation(pointX, pointY) {\n    let textX = null;\n    let textY = null;\n    if (this.enableCircles) {\n      // place the text to the bottom right of the circle\n      if (this.isStudentDataVersion(1)) {\n        // text is relatively positioned\n        textX = 100;\n        textY = 100;\n      } else {\n        // text is absolutely positioned\n        textX = pointX + 100;\n        textY = pointY + 100;\n      }\n    } else {\n      // circles are not enabled so we are only using the text\n      textX = pointX;\n      textY = pointY;\n    }\n    return {textX: textX, textY: textY};\n  }\n\n  getOccupiedPointLocations() {\n    let labels = this.getLabelData();\n    const occupiedPointLocations = [];\n    for (let label of labels) {\n      occupiedPointLocations.push({pointX: label.pointX, pointY: label.pointY});\n    }\n    return occupiedPointLocations;\n  }\n\n  isPointOccupied(occupiedPointLocations, pointX, pointY) {\n    for (let occupiedPointLocation of occupiedPointLocations) {\n      if (occupiedPointLocation.pointX == pointX && occupiedPointLocation.pointY == pointY) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getUnoccupiedPointLocation() {\n    const occupiedPointLocations = this.getOccupiedPointLocations();\n    for (let y = 50; y < this.canvasHeight; y += 150) {\n      for (let x = 50; x < this.canvasWidth; x += 150) {\n        if (!this.isPointOccupied(occupiedPointLocations, x, y)) {\n          return {pointX: x, pointY: y};\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set the background image\n   * @param backgroundImagePath the url path to an image\n   */\n  setBackgroundImage(backgroundImagePath) {\n    if (backgroundImagePath != null) {\n      this.backgroundImage = backgroundImagePath;\n      this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n    }\n  };\n\n  /**\n   * Get the background image\n   * @returns the background image path\n   */\n  getBackgroundImage() {\n    return this.backgroundImage;\n  };\n\n  /**\n   * Create the keydown listener that we will use for deleting labels\n   */\n  createKeydownListener() {\n    window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n  };\n\n  /**\n   * The callback handler for the keydown event\n   * @param e the event\n   */\n  keyPressed(e) {\n\n    // get the key code of the key that was pressed\n    var keyCode = e.keyCode;\n    if (keyCode === 13) {\n      // the enter key was pressed\n      if (this.selectedLabel != null) {\n        /*\n         * There is a selected label so we will treat the enter keypress as\n         * the intention of submitting any changes to the label text.\n         */\n        this.saveLabelButtonClicked();\n        this.$scope.$apply();\n      }\n    }\n  };\n\n  /**\n   * Get the label object given the canvas circle object.\n   * @param circle A canvas circle object.\n   * @return A label object.\n   */\n  getLabelFromCircle(circle) {\n    for (let label of this.labels) {\n      if (circle == label.circle) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the label object given the canvas text object.\n   * @param text A canvas text object.\n   * @return A label object.\n   */\n  getLabelFromText(text) {\n    for (let label of this.labels) {\n      if (text == label.text) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create a label object. The label object is represented by a circle\n   * element (the point), a line element, and a text element. The circle\n   * element will contain a reference to the line and text elements. The\n   * text element will contain a reference to the line element.\n   * @param pointX the x position of the point (circle)\n   * @param pointY the y position of the point (circle)\n   * @param textX the x position of the text relative to the point (circle)\n   * @param textY the y position of the text relative to the point (circle)\n   * @param textString the text of the label\n   * @param color the background color of the label\n   * @param canEdit whether the student can edit the label\n   * @param canDelete whether the student can delete the label\n   * @returns an object containing a circle, line, and text\n   */\n  createLabel(pointX, pointY, textX, textY, textString, color, canEdit, canDelete) {\n    let label = {};\n\n    // get the position of the point\n    let x1 = pointX;\n    let y1 = pointY;\n    let x2 = null;\n    let y2 = null;\n\n    if (this.isStudentDataVersion(1)) {\n      // get the absolute position of the text\n      x2 = pointX + textX;\n      y2 = pointY + textY;\n    } else {\n      x2 = textX;\n      y2 = textY;\n    }\n\n    /*\n     * Make sure all the positions are within the bounds of the canvas. If there\n     * are any positions that are outside the bounds, we will change the\n     * position to be within the bounds.\n     */\n    x1 = this.makeSureXIsWithinXMinMaxLimits(x1);\n    y1 = this.makeSureYIsWithinYMinMaxLimits(y1);\n    x2 = this.makeSureXIsWithinXMinMaxLimits(x2);\n    y2 = this.makeSureYIsWithinYMinMaxLimits(y2);\n\n    if (color == null) {\n      // the default background color for text elements will be blue\n      color = 'blue';\n    }\n\n    let radius = 5;\n    if (this.componentContent.pointSize != null &&\n        this.componentContent.pointSize != '') {\n      radius = parseFloat(this.componentContent.pointSize);\n    }\n\n    let fontSize = 20;\n    if (this.componentContent.fontSize != null &&\n        this.componentContent.fontSize != '') {\n      fontSize = parseFloat(this.componentContent.fontSize);\n    }\n\n    // create a circle element\n    var circle = new fabric.Circle({\n      radius: radius,\n      left: x1,\n      top: y1,\n      originX: 'center',\n      originY: 'center',\n      hasControls: false,\n      borderColor: 'red',\n      hasBorders: true,\n      selectable: true\n    });\n\n    // create a line element\n    var line = new fabric.Line([x1, y1, x2, y2], {\n      fill: 'black',\n      stroke: 'black',\n      strokeWidth: 3,\n      selectable: false\n    });\n\n    // wrap the text if necessary\n    let wrappedTextString = textString;\n    if (this.componentContent.labelWidth) {\n      wrappedTextString = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // create an editable text element\n    var text = new fabric.IText(wrappedTextString, {\n      left: x2,\n      top: y2,\n      originX: 'center',\n      originY: 'center',\n      fontSize: fontSize,\n      fill: 'white',\n      backgroundColor: color,\n      width: 100,\n      hasControls: false,\n      hasBorders: true,\n      borderColor: 'red',\n      borderDashArray: [8, 8],\n      borderScaleFactor: 3,\n      borderOpacityWhenMoving: 1,\n      selectable: true,\n      cursorWidth: 0,\n      editable: false,\n      padding: 16\n    });\n\n    // give the circle a reference to the line and text elements\n    circle.line = line;\n    circle.text = text;\n\n    // give the text element a reference to the line and circle elements\n    text.line = line;\n    text.circle = circle;\n\n    // add the circle, line, and text elements to the label object\n    label.circle = circle;\n    label.line = line;\n    label.text = text;\n    label.textString = textString;\n\n    if (canEdit == null) {\n      canEdit = true;\n    }\n    label.canEdit = canEdit;\n\n    if (canDelete == null) {\n      canDelete = true;\n    }\n    label.canDelete = canDelete;\n\n    return label;\n  };\n\n  /**\n   * Make sure the x coordinate is within the bounds of the canvas.\n   * @param x The x coordinate.\n   * @return The x coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    // make sure the x is not to the left of the left edge\n    if (x < 0) {\n      x = 0;\n    }\n    // make sure the x is not to the right of the right edge\n    if (x > this.canvasWidth) {\n      x = this.canvasWidth;\n    }\n    return x;\n  }\n\n  /**\n   * Make sure the y coordinate is within the bounds of the canvas.\n   * @param y The y coordinate.\n   * @return The y coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    // make sure the y is not above the top edge\n    if (y < 0) {\n      y = 0;\n    }\n    // make sure the y is not below the bottom edge\n    if (y > this.canvasHeight) {\n      y = this.canvasHeight;\n    }\n    return y;\n  }\n\n  /**\n   * Add a label to canvas\n   * @param canvas the canvas\n   * @param label an object that contains a Fabric circle, Fabric line,\n   * and Fabric itext elements\n   */\n  addLabelToCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n\n        if (this.enableCircles) {\n          // add the elements to the canvas\n          canvas.add(circle, line, text);\n\n          // set the z indexes for the elements\n          canvas.moveTo(line, this.lineZIndex);\n          canvas.moveTo(text, this.textZIndex);\n          canvas.moveTo(circle, this.circleZIndex);\n        } else {\n          // add the text element to the canvas\n          canvas.add(text);\n          canvas.moveTo(text, this.textZIndex);\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n\n        if (this.enableCircles) {\n          circle.on('mousedown', () => {\n            /*\n             * the circle was clicked so we will make the associated\n             * label selected\n             */\n            this.selectLabel(label);\n          });\n        }\n\n        text.on('mousedown', () => {\n          /*\n           * the text was clicked so we will make the associated\n           * label selected\n           */\n          this.selectLabel(label);\n        });\n\n        this.labels.push(label);\n      }\n    }\n  };\n\n  /**\n   * Make the label selected which means we will show the UI elements to\n   * allow the text to be edited and the label to deleted.\n   * @param label the label object\n   */\n  selectLabel(label) {\n    // create a reference to the selected label\n    this.selectedLabel = label;\n\n    if (label.canEdit) {\n      /*\n       * remember the label text before the student changes it in case the\n       * student wants to cancel any changes they make\n       */\n      this.selectedLabelText = label.text.text;\n\n      this.editLabelMode = true;\n      this.canvas.setActiveObject(label.text);\n      this.giveFocusToLabelTextInput();\n    } else {\n      // hide label text input\n      this.editLabelMode = false;\n    }\n  }\n\n  giveFocusToLabelTextInput() {\n    this.$timeout(() => {\n      /*\n       * Get the y position of the top of the edit label text input. If this\n       * value is negative, it means the element is above the currently\n       * viewable area and can not be seen. If the value is positive, it means\n       * the element is currently in the viewable area and can be seen.\n       */\n      const offset = $('#editLabelTextInput').offset();\n      if (offset != null) {\n        const editLabelTextInputTop = offset.top;\n\n        /*\n         * Check if the edit label text input is viewable. We want to make sure\n         * the input is in view. If the input is not in view and we give it\n         * focus, it will have the undesirable effect of scrolling the view up\n         * so that the input comes into view. We don't want it to scroll because\n         * it's jarring when the student is trying to select a label in the\n         * canvas.\n         */\n        if (editLabelTextInputTop > 100) {\n          // the input is in view so we will give it focus.\n          angular.element('#editLabelTextInput').focus();\n        }\n      }\n    });\n  }\n\n  /**\n   * The student has changed the label text on the selected label\n   * @param label The label that has changed.\n   * @param textObject The label's canvas text object.\n   * @param textString The text string.\n   */\n  selectedLabelTextChanged(label, textObject, textString) {\n\n    // save the text string into the label\n    label.textString = textString;\n\n    // wrap the text if necessary\n    let wrappedText = textString;\n    if (this.componentContent.labelWidth != null &&\n        this.componentContent.labelWidth != '') {\n      wrappedText = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // set the wrapped text into the text object\n    textObject.setText(wrappedText);\n    this.studentDataChanged();\n\n    // refresh the canvas\n    this.canvas.renderAll();\n  }\n\n  /**\n   * Remove a label from the canvas.\n   * @param canvas The canvas.\n   * @param label A label object that contains a circle object, line object, and\n   * text object.\n   */\n  removeLabelFromCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line, and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n        // remove the elements from the canvas\n        canvas.remove(circle);\n        canvas.remove(line);\n        canvas.remove(text);\n\n        this.labels.splice(this.labels.indexOf(label), 1);\n\n        // refresh the canvas\n        canvas.renderAll();\n      }\n    }\n  };\n\n  /**\n   * Get the image object representation of the student data\n   * @returns an image object\n   */\n  getImageObject() {\n    var pngFile = null;\n\n    if (this.canvas != null) {\n\n      // get the image as a base64 string\n      var img_b64 = this.canvas.toDataURL('image/png');\n\n      // get the image object\n      pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n    }\n\n    return pngFile;\n  }\n\n  /**\n   * Snip the labels by converting it to an image\n   * @param $event the click event\n   */\n  snipImage($event) {\n\n    // get the canvas element\n    var canvas = angular.element('#' + this.canvasId);\n\n    if (canvas != null && canvas.length > 0) {\n\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      var img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // create a notebook item with the image populated into it\n      this.NotebookService.addNote($event, imageObject);\n    }\n  }\n\n  /**\n   * The student clicked the save button in the edit label mode\n   */\n  saveLabelButtonClicked() {\n    if (this.selectedLabel != null) {\n      /*\n       * we do not need to perform any saving of the text since it has\n       * already been handled by the ng-model for the label text\n       */\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n    }\n  }\n\n  /**\n   * The student clicked the cancel button in the edit label mode\n   */\n  cancelLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the label text before the student recently made changes to it\n      var selectedLabelText = this.selectedLabelText;\n\n      // revert the label text to what it was before\n      this.selectedLabel.text.setText(selectedLabelText);\n\n      // clear the label text holder\n      this.selectedLabelText = null;\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n      this.studentDataChanged();\n\n      // refresh the canvas\n      this.canvas.renderAll();\n    }\n  }\n\n  /**\n   * The student clicked the delete button in the edit label mode\n   */\n  deleteLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the text from the label we are going to delete\n      var selectedLabelText = this.selectedLabel.textString;\n\n      // confirm with the student that they want to delete the label\n      var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n      if (answer) {\n        // the student is sure they want to delete the label\n        this.deleteLabel(this.selectedLabel);\n\n        /*\n         * remove the reference to the selected label since it will no\n         * longer be selected\n         */\n        this.selectedLabel = null;\n\n        // turn off edit label mode\n        this.editLabelMode = false;\n\n        // make the canvas object no longer the active object\n        this.canvas.discardActiveObject();\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a label from the canvas.\n   * @param label A label object.\n   */\n  deleteLabel(label) {\n    // remove the label from the canvas\n    this.removeLabelFromCanvas(this.canvas, label);\n  }\n\n  handleConnectedComponentsPostProcess() {\n    if (this.componentContent.backgroundImage != null &&\n        this.componentContent.backgroundImage != '') {\n      this.setBackgroundImage(this.componentContent.backgroundImage);\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n      let mergedLabels = [];\n      let mergedBackgroundImage = null;\n      let studentDataVersion = 2;\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          if (componentState.componentType == 'Label') {\n            let studentData = componentState.studentData;\n            if (studentData != null) {\n              if (studentData.version != null) {\n                studentDataVersion = studentData.version;\n              }\n              let labels = studentData.labels;\n              let backgroundImage = studentData.backgroundImage;\n              if (labels != null && labels != '') {\n                mergedLabels = mergedLabels.concat(labels);\n              }\n              if (backgroundImage != null && backgroundImage != '') {\n                mergedBackgroundImage = backgroundImage;\n              }\n            }\n          } else if (componentState.componentType == 'OpenResponse') {\n            let connectedComponent = this.getConnectedComponentForComponentState(componentState);\n            if (connectedComponent != null) {\n              let studentData = componentState.studentData;\n              let response = studentData.response;\n              if (connectedComponent.importWorkAsBackground) {\n                let charactersPerLine = connectedComponent.charactersPerLine;\n                let spaceInbetweenLines = connectedComponent.spaceInbetweenLines;\n                let fontSize = connectedComponent.fontSize;\n\n                // create an image from the concept map data\n                this.LabelService.createImageFromText(response, null, null,\n                    charactersPerLine, null, spaceInbetweenLines, fontSize).then((image) => {\n                  // set the image as the background\n                  this.setBackgroundImage(image);\n\n                  // make the work dirty so that it gets saved\n                  this.studentDataChanged();\n                });\n              }\n            }\n          } else if (componentState.componentType == 'ConceptMap' ||\n              componentState.componentType == 'Draw' ||\n              componentState.componentType == 'Embedded' ||\n              componentState.componentType == 'Graph' ||\n              componentState.componentType == 'Table') {\n            let connectedComponent =\n              this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n            if (connectedComponent.importWorkAsBackground === true) {\n              this.setComponentStateAsBackgroundImage(componentState);\n            }\n          }\n        }\n      }\n\n      if (mergedLabels != null) {\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.labels = mergedLabels;\n        mergedComponentState.studentData.backgroundImage = mergedBackgroundImage;\n      }\n      if (studentDataVersion != null) {\n        mergedComponentState.studentData.version = studentDataVersion;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Get the connected component associated with the component state.\n   * @param componentState A component state object that was obtained from a\n   * connected component.\n   * @return A connected component object.\n   */\n  getConnectedComponentForComponentState(componentState) {\n    for (let connectedComponent of this.componentContent.connectedComponents) {\n      if (componentState.nodeId == connectedComponent.nodeId &&\n          componentState.componentId == connectedComponent.componentId) {\n        return connectedComponent;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * The student clicked the reset button so we will delete all the labels and\n   * reset the background if applicable.\n   */\n  resetButtonClicked() {\n    // confirm with the student that they want to delete the label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToReset'));\n\n    if (answer) {\n      let tempLabels = [];\n      for (let label of this.labels) {\n        tempLabels.push(label);\n      }\n\n      for (let tempLabel of tempLabels) {\n        this.deleteLabel(tempLabel);\n      }\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n\n      if (this.componentContent.labels != null) {\n        /*\n         * the student has not done any work and there are starter labels\n         * so we will populate the canvas with the starter labels\n         */\n        this.addLabelsToCanvas(this.componentContent.labels);\n      }\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      }\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Set the student data version for this controller.\n   * @param studentDataVersion The student data version.\n   */\n  setStudentDataVersion(studentDataVersion) {\n    this.studentDataVersion = studentDataVersion;\n  }\n\n  /**\n   * Get the student data version.\n   * @return The student data version.\n   */\n  getStudentDataVersion() {\n    return this.studentDataVersion;\n  }\n\n  /**\n   * Check if the student data version we are using matches the argument.\n   * @param studentDataVersion The studentDataVersion to compare.\n   * @return Whether the passed in studentDataVersion matches the\n   * studentDataVersion this controller is set to.\n   */\n  isStudentDataVersion(studentDataVersion) {\n    return this.getStudentDataVersion() == studentDataVersion;\n  }\n\n  /**\n   * Check if this component only has show work connected components.\n   * @return If this component has connected components and all of them are\n   * 'showWork', then return true. Otherwise return false.\n   */\n  onlyHasShowWorkConnectedComponents() {\n    let connectedComponents = this.componentContent.connectedComponents;\n    let showWorkConnectedComponentCount = 0;\n    if (connectedComponents != null) {\n      for (let connectedComponent of connectedComponents) {\n        if (connectedComponent.type == 'showWork') {\n          showWorkConnectedComponentCount += 1;\n        }\n      }\n      if (connectedComponents.length > 0 &&\n          connectedComponents.length == showWorkConnectedComponentCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nLabelController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'LabelService',\n  'NodeService',\n  'NotebookService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelController;\n"]}