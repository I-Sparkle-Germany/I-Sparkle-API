{"version":3,"sources":["labelController.es6"],"names":[],"mappings":";;;;;;;;;;IAAM,e;AACF,6BACI,SADJ,EAEI,EAFJ,EAGI,MAHJ,EAII,QAJJ,EAKI,aALJ,EAMI,YANJ,EAOI,WAPJ,EAQI,eARJ,EASI,mBATJ,EAUI,cAVJ,EAWI,mBAXJ,EAYI,kBAZJ,EAaI,WAbJ,EAcE;AAAA;;AAAA;;AAEE,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,EAAL,GAAU,EAAV;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,QAAL,GAAgB,QAAhB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,YAAL,GAAoB,YAApB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,eAAL,GAAuB,eAAvB;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,kBAAL,GAA0B,kBAA1B;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,SAAL,GAAiB,KAAK,cAAL,CAAoB,SAArC;;AAEA;AACA,aAAK,MAAL,GAAc,IAAd;;AAEA;AACA,aAAK,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAK,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAK,WAAL,GAAmB,EAAnB;;AAEA;AACA,aAAK,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAK,OAAL,GAAe,KAAf;;AAEA;AACA,aAAK,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAK,WAAL,GAAmB;AACf,kBAAM,EADS;AAEf,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAK,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAK,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAK,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAK,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAK,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAK,uBAAL,GAA+B,IAA/B;;AAEA;AACA,aAAK,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAK,wBAAL,GAAgC,IAAhC;;AAEA;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAK,eAAL,GAAuB,KAAvB;;AAEA;AACA,aAAK,MAAL,GAAc,IAAd;;AAEA;AACA,aAAK,WAAL,GAAmB,GAAnB;;AAEA;AACA,aAAK,YAAL,GAAoB,GAApB;;AAEA;AACA,aAAK,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAK,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAK,YAAL,GAAoB,CAApB;;AAEA;AACA,aAAK,QAAL,GAAgB,GAAhB;;AAEA;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAK,eAAL,GAAuB,wBAAvB;;AAEA;AACA,YAAI,cAAc,KAAK,kBAAL,CAAwB,cAAxB,EAAlB;AACA,YAAI,eAAe,IAAnB,EAAyB;AACrB,iBAAK,MAAL,GAAc,YAAY,EAA1B;AACH,SAFD,MAEO;AACH,iBAAK,MAAL,GAAc,KAAK,MAAL,CAAY,MAA1B;AACH;;AAED;AACA,aAAK,gBAAL,GAAwB,KAAK,MAAL,CAAY,gBAApC;;AAEA;AACA,aAAK,yBAAL,GAAiC,KAAK,MAAL,CAAY,yBAA7C;;AAEA;;;;AAIA,aAAK,wBAAL,GAAgC,KAAK,MAAL,CAAY,wBAA5C;;AAEA;AACA,aAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAxB;;AAEA,aAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,WAA/B;AACA,aAAK,kBAAL,GAA0B,KAAK,MAAL,CAAY,kBAAtC;;AAEA,YAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAK,WAAL,GAAmB,KAAK,gBAAL,CAAsB,EAAzC;;AAEA;AACA,gBAAI,iBAAiB,KAAK,MAAL,CAAY,cAAjC;;AAEA,gBAAI,KAAK,gBAAL,CAAsB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAK,eAAL,GAAuB,KAAK,gBAAL,CAAsB,eAA7C;AACH;;AAED,gBAAI,KAAK,gBAAL,CAAsB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAK,eAAL,GAAuB,KAAK,gBAAL,CAAsB,eAA7C;AACH;;AAED,gBAAI,KAAK,gBAAL,CAAsB,KAAtB,IAA+B,IAAnC,EAAyC;AACrC,qBAAK,WAAL,GAAmB,KAAK,gBAAL,CAAsB,KAAzC;AACH;;AAED,gBAAI,KAAK,gBAAL,CAAsB,MAAtB,IAAgC,IAApC,EAA0C;AACtC,qBAAK,YAAL,GAAoB,KAAK,gBAAL,CAAsB,MAA1C;AACH;;AAED,gBAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAAK,gBAAL,CAAsB,cAAjD;AACA,qBAAK,qBAAL,GAA6B,KAAK,gBAAL,CAAsB,gBAAnD;;AAEA,oBAAI,KAAK,eAAT,EAA0B;AACtB,yBAAK,uBAAL,GAA+B,IAA/B;AACH,iBAFD,MAEO;AACH,yBAAK,uBAAL,GAA+B,KAA/B;AACH;;AAED;AACA;AACA,qBAAK,iBAAL,GAAyB,KAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,6BAAnC,CAAiE,KAAK,WAAtE,CAAzB;AACH,aAdD,MAcO,IAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAChC,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,uBAAL,GAA+B,KAA/B;AACA,qBAAK,wBAAL,GAAgC,KAAhC;AACA,qBAAK,eAAL,GAAuB,KAAvB;AACA,qBAAK,UAAL,GAAkB,IAAlB;;AAEA,oBAAI,kBAAkB,IAAtB,EAA4B;AACxB,yBAAK,QAAL,GAAgB,iBAAiB,eAAe,EAAhD;AACH;AACJ,aAZM,MAYA,IAAI,KAAK,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAK,eAAL,GAAuB,KAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,uBAAL,GAA+B,KAA/B;AACA,qBAAK,wBAAL,GAAgC,KAAhC;AACA,qBAAK,eAAL,GAAuB,KAAvB;AACA,qBAAK,UAAL,GAAkB,IAAlB;AACH,aARM,MAQA,IAAI,KAAK,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,uBAAL,GAA+B,KAA/B;AACA,qBAAK,eAAL,GAAuB,KAAvB;AACA,qBAAK,UAAL,GAAkB,IAAlB;AACH,aAPM,MAOA,IAAI,KAAK,IAAL,KAAc,WAAlB,EAA+B;;AAElC,qBAAK,2BAAL;;AAEA,uBAAO,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAK,yBAAZ;AACH,iBAFa,CAEZ,IAFY,CAEP,IAFO,CAAd,EAEc,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACvC,yBAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,gBAApB,CAAqC,QAArC,CAAxB;;AAEA,wBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACA,0BAAE,mBAAmB,KAAK,QAA1B,EAAoC,KAApC;;AAEA;AACA,4BAAI,SAAS,EAAE,WAAF,CAAb;AACA,+BAAO,IAAP,CAAY,IAAZ,EAAkB,KAAK,QAAvB;AACA,+BAAO,GAAP,CAAW,QAAX,EAAqB,iBAArB;;AAEA;AACA,0BAAE,eAAF,EAAmB,MAAnB,CAA0B,MAA1B;;AAEA;AACA,6BAAK,WAAL;AACH;;AAED,yBAAK,eAAL,GAAuB,IAAvB;;AAEA,wBAAI,KAAK,gBAAL,CAAsB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,6BAAK,eAAL,GAAuB,KAAK,gBAAL,CAAsB,eAA7C;AACH;;AAED,wBAAI,KAAK,eAAT,EAA0B;AACtB,6BAAK,uBAAL,GAA+B,IAA/B;AACH,qBAFD,MAEO;AACH,6BAAK,uBAAL,GAA+B,KAA/B;AACH;AACJ,iBA/Ba,CA+BZ,IA/BY,CA+BP,IA/BO,CAFd,EAiCc,IAjCd;AAkCH;;AAED,iBAAK,QAAL,CAAc,QAAQ,IAAR,CAAa,IAAb,EAAmB,YAAW;AACxC;;AAEA,qBAAK,WAAL;AACH,aAJa,CAAd;AAKH;;AAED;;;AAGA,aAAK,MAAL,CAAY,OAAZ,GAAsB,YAAW;AAC7B,mBAAO,KAAK,MAAL,CAAY,eAAZ,CAA4B,OAAnC;AACH,SAFqB,CAEpB,IAFoB,CAEf,IAFe,CAAtB;;AAIA;;;;;;;;AAQA,aAAK,MAAL,CAAY,iBAAZ,GAAgC,UAAS,QAAT,EAAmB;AAC/C,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAf;AACA,gBAAI,WAAW,KAAf;AACA,gBAAI,SAAS,QAAb;;AAEA,gBAAI,QAAJ,EAAc;AACV,oBAAI,KAAK,MAAL,CAAY,eAAZ,CAA4B,aAAhC,EAA+C;AAC3C,+BAAW,IAAX;AACA,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAK,MAAL,CAAY,eAAZ,CAA4B,OAAhC,EAAyC;AACrC,+BAAW,IAAX;AACA,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAI,QAAJ,EAAc;AACV;AACA,qBAAK,MAAL,CAAY,eAAZ,CAA4B,oBAA5B,CAAiD,MAAjD,EAAyD,IAAzD,CAA8D,UAAC,cAAD,EAAoB;AAC9E,6BAAS,OAAT,CAAiB,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKA,yBAAS,OAAT;AACH;;AAED,mBAAO,SAAS,OAAhB;AACH,SAhC+B,CAgC9B,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAK,MAAL,CAAY,GAAZ,CAAgB,mBAAhB,EAAqC,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;AAE1E;AACA,gBAAI,SAAS,KAAK,MAAlB;;AAEA;AACA,gBAAI,KAAK,MAAL,KAAgB,MAApB,EAA4B;AACxB,qBAAK,QAAL,GAAgB,IAAhB;AACH;AACJ,SAToC,CAArC;;AAWA;;;;AAIA,aAAK,MAAL,CAAY,GAAZ,CAAgB,0BAAhB,EAA4C,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;AAEjF,gBAAI,iBAAiB,KAAK,WAA1B;;AAEA;AACA,gBAAI,kBAAkB,KAAK,MAAL,KAAgB,eAAe,MAAjD,IACG,KAAK,WAAL,KAAqB,eAAe,WAD3C,EACwD;;AAEpD;AACA,qBAAK,OAAL,GAAe,KAAf;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAApC;;AAEA,oBAAI,aAAa,eAAe,UAAhC;AACA,oBAAI,WAAW,eAAe,QAA9B;AACA,oBAAI,iBAAiB,eAAe,cAApC;AACA,oBAAI,iBAAiB,KAAK,aAAL,CAAmB,wBAAnB,CAA4C,cAA5C,CAArB;;AAEA;AACA,oBAAI,QAAJ,EAAc;AACV,yBAAK,cAAL,CAAoB,WAApB,EAAiC,cAAjC;;AAEA,yBAAK,MAAL;;AAEA;AACA,yBAAK,aAAL,GAAqB,KAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAI,UAAJ,EAAgB;AACnB,yBAAK,cAAL,CAAoB,YAApB,EAAkC,cAAlC;AACH,iBAFM,MAEA;AACH,yBAAK,cAAL,CAAoB,OAApB,EAA6B,cAA7B;AACH;AACJ;AACJ,SAhC2C,CAA5C;;AAkCA;;;;;AAKA,aAAK,MAAL,CAAY,GAAZ,CAAgB,cAAhB,EAAgC,UAAC,KAAD,EAAQ,IAAR,EAAiB;;AAE7C;AACA,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,cAAc,KAAK,WAAvB;;AAEA;AACA,gBAAI,MAAK,MAAL,KAAgB,MAAhB,IAA0B,MAAK,WAAL,KAAqB,WAAnD,EAAgE;;AAE5D;AACA,oBAAI,cAAc,MAAK,cAAL,EAAlB;;AAEA,oBAAI,eAAe,IAAnB,EAAyB;AACrB,wBAAI,OAAO,EAAX;AACA,yBAAK,MAAL,GAAc,MAAd;AACA,yBAAK,WAAL,GAAmB,WAAnB;AACA,yBAAK,WAAL,GAAmB,WAAnB;;AAEA;AACA,0BAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,IAA1C;AACH;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAK,MAAL,CAAY,GAAZ,CAAgB,UAAhB,EAA4B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;AAGH;;;;sCAEa;AACV;AACA,gBAAI,SAAS,KAAK,gBAAL,EAAb;AACA,iBAAK,MAAL,GAAc,MAAd;;AAEA;AACA,gBAAI,iBAAiB,KAAK,MAAL,CAAY,cAAjC;;AAEA,gBAAI,KAAK,eAAL,IAAwB,CAAC,KAAK,QAAlC,EAA4C;AACxC;AACA,qBAAK,qBAAL;AACH;;AAED;AACA,iBAAK,0BAAL,GAAkC,KAAK,gBAAL,CAAsB,0BAAxD;;AAEA,gBAAI,kBAAkB,IAAtB,EAA4B;AACxB;;;;;AAKA;AACA,oBAAI,mBAAmB,KAAK,gBAAL,CAAsB,gBAA7C;AACA,oBAAI,wBAAwB,KAAK,gBAAL,CAAsB,qBAAlD;;AAEA,oBAAI,oBAAoB,IAApB,IAA4B,yBAAyB,IAAzD,EAA+D;AAC3D;AACA,yBAAK,UAAL;AACH,iBAHD,MAGO,IAAI,KAAK,gBAAL,CAAsB,MAAtB,IAAgC,IAApC,EAA0C;AAC7C;;;;AAIA,yBAAK,iBAAL,CAAuB,KAAK,gBAAL,CAAsB,MAA7C;AACH;AACJ,aApBD,MAoBO;AACH;AACA,qBAAK,cAAL,CAAoB,cAApB;AACH;;AAED;AACA,gBAAI,kBAAkB,KAAK,kBAAL,EAAtB;;AAEA,gBAAI,mBAAmB,IAAnB,IAA2B,KAAK,gBAAL,CAAsB,eAAtB,IAAyC,IAAxE,EAA8E;AAC1E;AACA,qBAAK,kBAAL,CAAwB,KAAK,gBAAL,CAAsB,eAA9C;AACH;;AAED;AACA,iBAAK,iBAAL;;AAEA,gBAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,2BAApB,IAAmD,IAAvD,EAA6D;AACzD;AACA,qBAAK,MAAL,CAAY,OAAZ,CAAoB,2BAApB,CAAgD,KAAK,MAArD,EAA6D,KAAK,gBAAlE;AACH;AACJ;;AAED;;;;;;;uCAIe,c,EAAgB;;AAE3B,gBAAI,kBAAkB,IAAtB,EAA4B;;AAExB,oBAAI,cAAc,eAAe,WAAjC;;AAEA,oBAAI,eAAe,IAAnB,EAAyB;;AAErB;AACA,wBAAI,SAAS,YAAY,MAAzB;;AAEA;AACA,yBAAK,iBAAL,CAAuB,MAAvB;;AAEA;AACA,wBAAI,kBAAkB,YAAY,eAAlC;;AAEA,wBAAI,mBAAmB,IAAvB,EAA6B;AACzB,6BAAK,kBAAL,CAAwB,eAAxB;AACH;;AAED,yBAAK,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAI,cAAc,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAA3E,EAAmF,KAAK,WAAxF,CAAlB;;AAEA,gBAAI,WAAJ,EAAiB;AACb,oBAAI,iBAAiB,YAAY,cAAjC;AACA,oBAAI,iBAAiB,KAAK,aAAL,CAAmB,wBAAnB,CAA4C,cAA5C,CAArB;AACA,oBAAI,YAAY,QAAhB,EAA0B;AACtB;AACA,yBAAK,aAAL,GAAqB,KAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAK,cAAL,CAAoB,gBAApB,EAAsC,cAAtC;AACH,iBAND,MAMO;AACH;AACA,yBAAK,aAAL,GAAqB,IAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAK,cAAL,CAAoB,YAApB,EAAkC,cAAlC;AACH;AACJ;AACJ;;;;;AAED;;;;0CAIkB,M,EAAQ;AACtB,gBAAI,UAAU,IAAd,EAAoB;;AAEhB;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;;AAEpC;AACA,wBAAI,QAAQ,OAAO,CAAP,CAAZ;;AAEA,wBAAI,SAAS,IAAb,EAAmB;;AAEf;AACA,4BAAI,SAAS,MAAM,MAAnB;AACA,4BAAI,SAAS,MAAM,MAAnB;AACA,4BAAI,QAAQ,MAAM,KAAlB;AACA,4BAAI,QAAQ,MAAM,KAAlB;AACA,4BAAI,OAAO,MAAM,IAAjB;AACA,4BAAI,QAAQ,MAAM,KAAlB;;AAEA;AACA,4BAAI,QAAQ,KAAK,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAjC,EAAwC,KAAxC,EAA+C,IAA/C,EAAqD,KAArD,CAAZ;;AAEA;AACA,6BAAK,gBAAL,CAAsB,KAAK,MAA3B,EAAmC,KAAnC;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,wBAAlB,EAA4C,EAAC,QAAQ,KAAK,MAAd,EAAsB,aAAa,KAAK,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;AAClB,iBAAK,QAAL,GAAgB,IAAhB;;AAEA;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,0BAAlB,EAA8C,EAAC,QAAQ,KAAK,MAAd,EAAsB,aAAa,KAAK,WAAxC,EAA9C;AACH;;;;;AAED;;;;gDAIwB;AACpB,iBAAK,eAAL,GAAuB,IAAvB;AACA,iBAAK,qBAAL,GAA6B,IAA7B;AACH;;;;;AAED;;;;8CAIsB;AAClB,iBAAK,eAAL,GAAuB,KAAvB;AACA,iBAAK,qBAAL,GAA6B,KAA7B;AACH;;;iCAEQ;AACL;AACA,gBAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC1B,qBAAK,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAK,OAAL,GAAe,IAAf;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAApC;;AAEA,iBAAK,aAAL,GAAqB,IAArB;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAK,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAI,cAAc,KAAK,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAI,SAAS,QAAb;;AAEA;AACA,iBAAK,oBAAL,CAA0B,MAA1B,EAAkC,IAAlC,CAAuC,UAAC,cAAD,EAAoB;;AAEvD,uBAAK,mBAAL;AACA,uBAAK,MAAL,CAAY,KAAZ,CAAkB,6BAAlB,EAAiD,EAAC,aAAa,WAAd,EAA2B,gBAAgB,cAA3C,EAAjD;AACH,aAJD;AAKH;;;;;AAED;;;;oCAIY;AACR,gBAAI,SAAS,EAAb;;AAEA;AACA,gBAAI,UAAU,KAAK,MAAL,CAAY,UAAZ,EAAd;;AAEA,gBAAI,WAAW,IAAf,EAAqB;;AAEjB;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACrC,wBAAI,SAAS,QAAQ,CAAR,CAAb;;AAEA,wBAAI,UAAU,IAAd,EAAoB;;AAEhB;AACA,4BAAI,OAAO,OAAO,GAAP,CAAW,MAAX,CAAX;;AAEA,4BAAI,SAAS,QAAb,EAAuB;AACnB;;;;;AAKA;AACA,gCAAI,kBAAkB,KAAK,4BAAL,CAAkC,MAAlC,CAAtB;;AAEA,gCAAI,mBAAmB,IAAvB,EAA6B;AACzB;AACA,uCAAO,IAAP,CAAY,eAAZ;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO,MAAP;AACH;;;;;AAED;;;;;qDAK6B,M,EAAQ;AACjC,gBAAI,kBAAkB,EAAtB;;AAEA,gBAAI,UAAU,IAAd,EAAoB;;AAEhB;AACA,oBAAI,aAAa,OAAO,IAAxB;;AAEA;AACA,oBAAI,aAAa,OAAO,IAAxB;;AAEA,oBAAI,cAAc,IAAd,IAAsB,cAAc,IAAxC,EAA8C;;AAE1C;AACA,wBAAI,SAAS,OAAO,GAAP,CAAW,MAAX,CAAb;AACA,wBAAI,SAAS,OAAO,GAAP,CAAW,KAAX,CAAb;;AAEA;;;;AAIA,wBAAI,QAAQ,WAAW,EAAX,GAAgB,WAAW,EAAvC;AACA,wBAAI,QAAQ,WAAW,EAAX,GAAgB,WAAW,EAAvC;;AAEA;AACA,wBAAI,QAAQ,KAAZ;AACA,wBAAI,QAAQ,KAAZ;;AAEA;AACA,wBAAI,OAAO,WAAW,IAAtB;AACA,wBAAI,QAAQ,WAAW,eAAvB;;AAEA;AACA,oCAAgB,MAAhB,GAAyB,SAAS,MAAT,CAAzB;AACA,oCAAgB,MAAhB,GAAyB,SAAS,MAAT,CAAzB;AACA,oCAAgB,KAAhB,GAAwB,SAAS,KAAT,CAAxB;AACA,oCAAgB,KAAhB,GAAwB,SAAS,KAAT,CAAxB;AACA,oCAAgB,IAAhB,GAAuB,IAAvB;AACA,oCAAgB,KAAhB,GAAwB,KAAxB;AACH;AACJ;;AAED,mBAAO,eAAP;AACH;;;;;AAED;;;;;;6CAMqB,M,EAAQ;;AAEzB;AACA,gBAAI,iBAAiB,KAAK,WAAL,CAAiB,uBAAjB,EAArB;;AAEA;AACA,gBAAI,cAAc,EAAlB;AACA,wBAAY,MAAZ,GAAqB,KAAK,SAAL,EAArB;;AAEA,gBAAI,kBAAkB,KAAK,kBAAL,EAAtB;;AAEA,gBAAI,mBAAmB,IAAvB,EAA6B;AACzB,4BAAY,eAAZ,GAA8B,eAA9B;AACH;;AAED;;AAEA,gBAAI,KAAK,QAAT,EAAmB;AACf;AACA,+BAAe,QAAf,GAA0B,KAAK,QAA/B;;AAEA;;;;AAIA,qBAAK,QAAL,GAAgB,KAAhB;AACH;;AAED;AACA,2BAAe,WAAf,GAA6B,WAA7B;;AAEA,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAf;;AAEA;;;;AAIA,iBAAK,wCAAL,CAA8C,QAA9C,EAAwD,cAAxD,EAAwE,MAAxE;;AAEA,mBAAO,SAAS,OAAhB;AACH;;;;;AAED;;;;;;;;;;iEAUyC,Q,EAAU,c,EAAgB,M,EAAQ;AACvE;;;;AAIA,qBAAS,OAAT,CAAiB,cAAjB;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAI,mBAAmB,KAAK,gBAA5B;;AAEA,gBAAI,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAI,iBAAiB,UAArB,EAAiC;AAC7B,yBAAK,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAI,iBAAiB,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAI,kBAAkB,KAAK,kBAAL,CAAwB,wCAAxB,CAAiE,KAAK,MAAtE,EAA8E,KAAK,WAAnF,CAAtB;;AAEA;AACA,wBAAI,cAAc,KAAK,WAAL,CAAiB,eAAjB,CAAiC,eAAjC,CAAlB;;AAEA,wBAAI,WAAJ,EAAiB;AACb;AACA,6BAAK,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;qCAIa;AACT,mBAAO,KAAK,eAAZ;AACH;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAK,mBAAZ;AACH;;;;;AAED;;;;2CAImB;AACf,mBAAO,KAAK,qBAAZ;AACH;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAK,uBAAZ;AACH;;;;;AAED;;;;2CAImB;AACf,mBAAO,KAAK,qBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAK,gBAAL,CAAsB,eAA1B,EAA2C;AACvC,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAO,MAAP;AACH;;;yCAEgB,U,EAAY;AACzB,gBAAI,KAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAzB,KAAwC,CAAC,CAA7C,EAAgD;AAC5C,qBAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAzB,CAAxB,EAA8D,CAA9D;AACA,qBAAK,kBAAL;AACH;AACJ;;;2CAEkB,Y,EAAc;AAAA;;AAC7B,gBAAI,gBAAgB,IAApB,EAA0B;AACtB,qBAAK,mBAAL,CAAyB,qBAAzB,CAA+C,YAA/C,EAA6D,IAA7D,CAAkE,UAAC,WAAD,EAAiB;AAC/E,wBAAI,eAAe,IAAnB,EAAyB;AACrB,4BAAI,aAAa;AACb,4CAAgB,YAAY,EADf;AAEb,qCAAS,YAAY;AAFR,yBAAjB;;AAKA,+BAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACA,+BAAK,kBAAL;AACH;AACJ,iBAVD;AAWH;AACJ;;;;;AAED;;;oCAGY;AACR,gBAAI,SAAS,IAAb;;AAEA,gBAAI,KAAK,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAK,wBAAL,CAA8B,sBAAlC,EAA0D;AACtD;AACA,6BAAS,KAAK,gBAAL,CAAsB,MAA/B;AACH,iBAHD,MAGO;AACH;AACA,6BAAS,KAAK,wBAAL,CAA8B,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AACtC,yBAAS,KAAK,gBAAL,CAAsB,MAA/B;AACH;;AAED,mBAAO,MAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAI,mBAAmB,KAAK,gBAA5B;;AAEA,gBAAI,oBAAoB,IAAxB,EAA8B;;AAE1B,oBAAI,mBAAmB,iBAAiB,gBAAxC;AACA,oBAAI,wBAAwB,iBAAiB,qBAA7C;;AAEA,oBAAI,oBAAoB,IAApB,IAA4B,yBAAyB,IAAzD,EAA+D;;AAE3D;AACA,wBAAI,iBAAiB,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAA3E,EAAmF,KAAK,WAAxF,CAArB;;AAEA;;;;AAIA,wBAAG,kBAAkB,IAArB,EAA2B;AACvB;;AAEA;AACA,4BAAI,2BAA2B,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,gBAAtE,EAAwF,qBAAxF,CAA/B;;AAEA,4BAAI,4BAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,gCAAI,0BAA0B,KAAK,mBAAL,CAAyB,sBAAzB,CAAgD,wBAAhD,CAA9B;;AAEA;AACA,iCAAK,cAAL,CAAoB,uBAApB;AACH;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAK,gBAAL,CAAsB,EAA7B;AACH;;;;;AAED;;;;2CAImB;;AAEf,gBAAI,SAAS,IAAb;;AAEA,iBAAK,WAAL,GAAmB,KAAK,gBAAL,CAAsB,KAAzC;AACA,iBAAK,YAAL,GAAoB,KAAK,gBAAL,CAAsB,MAA1C;;AAEA;AACA,gBAAI,KAAK,UAAT,EAAqB;AACjB;AACA,yBAAS,IAAI,OAAO,YAAX,CAAwB,KAAK,QAA7B,CAAT;AACH,aAHD,MAGO;AACH;AACA,yBAAS,IAAI,OAAO,MAAX,CAAkB,KAAK,QAAvB,CAAT;AACH;;AAED;AACA,mBAAO,SAAP,GAAmB,KAAnB;;AAEA;AACA,mBAAO,WAAP,GAAqB,SAArB;;AAEA;AACA,mBAAO,QAAP,CAAgB,KAAK,WAArB;AACA,mBAAO,SAAP,CAAiB,KAAK,YAAtB;;AAEA;AACA,cAAE,mBAAmB,KAAK,QAA1B,EAAoC,GAApC,CAAwC,QAAxC,EAAkD,KAAK,YAAL,GAAoB,CAAtE;;AAEA;AACA,mBAAO,EAAP,CAAU,YAAV,EAAwB,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,OAAT,EAAkB;;AAEzD;AACA,oBAAI,KAAK,eAAT,EAA0B;AACtB;;;;;AAKA,wBAAI,QAAQ,QAAQ,CAApB;;AAEA,wBAAI,SAAS,IAAb,EAAmB;AACf;AACA,4BAAI,IAAI,MAAM,MAAd;AACA,4BAAI,IAAI,MAAM,MAAd;;AAEA;;;;AAIA,4BAAI,QAAQ,GAAZ;AACA,4BAAI,QAAQ,GAAZ;;AAEA;AACA,4BAAI,WAAW,KAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,MAApD,CAAf;;AAEA;AACA,6BAAK,gBAAL,CAAsB,KAAK,MAA3B,EAAmC,QAAnC;;AAEA;AACA,6BAAK,kBAAL;AACH;;AAED;AACA,yBAAK,eAAL,GAAuB,KAAvB;AACA,yBAAK,qBAAL,GAA6B,KAA7B;AACH;AACJ,aArCuB,CAAxB;;AAuCA;AACA,mBAAO,EAAP,CAAU,eAAV,EAA2B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,OAAT,EAAkB;AAC5D,oBAAI,SAAS,QAAQ,MAArB;;AAEA,oBAAI,UAAU,IAAd,EAAoB;;AAEhB;AACA,wBAAI,OAAO,OAAO,GAAP,CAAW,MAAX,CAAX;;AAEA;AACA,wBAAI,OAAO,OAAO,GAAP,CAAW,MAAX,CAAX;AACA,wBAAI,MAAM,OAAO,GAAP,CAAW,KAAX,CAAV;;AAEA;AACA,wBAAI,OAAO,CAAX,EAAc;AACV,+BAAO,GAAP,CAAW,MAAX,EAAmB,CAAnB;AACA,+BAAO,CAAP;AACH,qBAHD,MAGO,IAAI,OAAO,KAAK,WAAhB,EAA6B;AAChC,+BAAO,GAAP,CAAW,MAAX,EAAmB,KAAK,WAAxB;AACA,+BAAO,KAAK,WAAZ;AACH;;AAED;AACA,wBAAI,MAAM,CAAV,EAAa;AACT,+BAAO,GAAP,CAAW,KAAX,EAAkB,CAAlB;AACA,8BAAM,CAAN;AACH,qBAHD,MAGO,IAAI,MAAM,KAAK,YAAf,EAA6B;AAChC,+BAAO,GAAP,CAAW,KAAX,EAAkB,KAAK,YAAvB;AACA,8BAAM,KAAK,YAAX;AACH;;AAED,wBAAI,SAAS,QAAb,EAAuB;AACnB;;;;;;;AAOA;AACA,4BAAI,OAAO,OAAO,IAAlB;;AAEA,4BAAI,QAAQ,CAAZ;AACA,4BAAI,QAAQ,CAAZ;;AAEA,4BAAI,QAAQ,IAAZ,EAAkB;AACd;AACA,oCAAQ,KAAK,EAAL,GAAU,KAAK,EAAvB;AACA,oCAAQ,KAAK,EAAL,GAAU,KAAK,EAAvB;;AAEA;AACA,iCAAK,GAAL,CAAS,EAAC,IAAI,IAAL,EAAW,IAAI,GAAf,EAAoB,IAAI,OAAO,KAA/B,EAAsC,IAAI,MAAM,KAAhD,EAAT;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd;AACA,mCAAO,GAAP,CAAW,IAAX;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd,EAAoB,KAAK,UAAzB;AACH;;AAED;AACA,4BAAI,OAAO,OAAO,IAAlB;;AAEA,4BAAI,QAAQ,IAAZ,EAAkB;AACd;AACA,iCAAK,GAAL,CAAS,EAAC,MAAM,OAAO,KAAd,EAAqB,KAAK,MAAM,KAAhC,EAAT;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd;AACA,mCAAO,GAAP,CAAW,IAAX;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd,EAAoB,KAAK,UAAzB;AACH;AACJ,qBA5CD,MA4CO,IAAI,SAAS,QAAb,EAAuB;AAC1B;;;;;;AAMA,4BAAI,OAAO,OAAO,IAAlB;;AAEA,4BAAI,QAAQ,IAAZ,EAAkB;AACd;AACA,iCAAK,GAAL,CAAS,EAAC,IAAI,IAAL,EAAW,IAAI,GAAf,EAAT;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd;AACA,mCAAO,GAAP,CAAW,IAAX;;AAEA;AACA,mCAAO,MAAP,CAAc,IAAd,EAAoB,KAAK,UAAzB;AACH;AACJ;;AAED;AACA,2BAAO,SAAP;;AAEA;AACA,yBAAK,kBAAL;AACH;AACJ,aAtG0B,CAA3B;;AAwGA;AACA,mBAAO,EAAP,CAAU,cAAV,EAA0B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,OAAT,EAAkB;AAC3D,oBAAI,SAAS,QAAQ,MAArB;;AAEA,oBAAI,UAAU,IAAd,EAAoB;;AAEhB,wBAAI,OAAO,OAAO,GAAP,CAAW,MAAX,CAAX;;AAEA,wBAAI,SAAS,QAAb,EAAuB;AACnB;AACA,6BAAK,kBAAL;AACH;AACJ;AACJ,aAZyB,CAA1B;;AAcA,mBAAO,MAAP;AACH;;;;;AAED;;;;2CAImB,mB,EAAqB;;AAEpC,gBAAI,uBAAuB,IAA3B,EAAiC;AAC7B,qBAAK,eAAL,GAAuB,mBAAvB;AACA,qBAAK,MAAL,CAAY,kBAAZ,CAA+B,mBAA/B,EAAoD,KAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB,CAA2B,KAAK,MAAhC,CAApD;AACH;AACJ;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAK,eAAZ;AACH;;;;;AAED;;;gDAGwB;AACpB,mBAAO,gBAAP,CAAwB,SAAxB,EAAmC,QAAQ,IAAR,CAAa,IAAb,EAAmB,KAAK,UAAxB,CAAnC,EAAwE,KAAxE;AACH;;;;;AAED;;;;mCAIW,C,EAAG;;AAEV;AACA,gBAAI,UAAU,EAAE,OAAhB;;AAEA;AACA,gBAAI,YAAY,CAAZ,IAAiB,YAAY,EAAjC,EAAqC;;AAEjC;AACA,oBAAI,eAAe,KAAK,MAAL,CAAY,eAAZ,EAAnB;;AAEA,oBAAI,gBAAgB,IAApB,EAA0B;;AAEtB;AACA,wBAAI,aAAa,GAAb,CAAiB,MAAjB,MAA6B,QAAjC,EAA2C;;AAEvC;AACA,6BAAK,qBAAL,CAA2B,KAAK,MAAhC,EAAwC,YAAxC;;AAEA;AACA,6BAAK,kBAAL;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;;;;;;;;;;oCAaY,M,EAAQ,M,EAAQ,K,EAAO,K,EAAO,U,EAAY,K,EAAO;AACzD,gBAAI,QAAQ,EAAZ;;AAEA;AACA,gBAAI,KAAK,MAAT;AACA,gBAAI,KAAK,MAAT;;AAEA;AACA,gBAAI,KAAK,SAAS,KAAlB;AACA,gBAAI,KAAK,SAAS,KAAlB;;AAEA,gBAAI,SAAS,IAAb,EAAmB;AACf;AACA,wBAAQ,MAAR;AACH;;AAED;AACA,gBAAI,SAAS,IAAI,OAAO,MAAX,CAAkB;AAC3B,wBAAQ,CADmB;AAE3B,sBAAM,EAFqB;AAG3B,qBAAK,EAHsB;AAI3B,yBAAS,QAJkB;AAK3B,yBAAS,QALkB;AAM3B,6BAAa,KANc;AAO3B,4BAAY,IAPe;AAQ3B,4BAAY;AARe,aAAlB,CAAb;;AAWA;AACA,gBAAI,OAAO,IAAI,OAAO,IAAX,CAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAhB,EAAkC;AACzC,sBAAM,OADmC;AAEzC,wBAAQ,OAFiC;AAGzC,6BAAa,CAH4B;AAIzC,4BAAY;AAJ6B,aAAlC,CAAX;;AAOA;AACA,gBAAI,OAAO,IAAI,OAAO,KAAX,CAAiB,UAAjB,EAA6B;AACpC,sBAAM,EAD8B;AAEpC,qBAAK,EAF+B;AAGpC,yBAAS,QAH2B;AAIpC,yBAAS,QAJ2B;AAKpC,0BAAU,EAL0B;AAMpC,sBAAM,OAN8B;AAOpC,iCAAiB,KAPmB;AAQpC,uBAAO,GAR6B;AASpC,6BAAa,KATuB;AAUpC,4BAAY,KAVwB;AAWpC,4BAAY;AAXwB,aAA7B,CAAX;;AAcA;AACA,mBAAO,IAAP,GAAc,IAAd;AACA,mBAAO,IAAP,GAAc,IAAd;;AAEA;AACA,iBAAK,IAAL,GAAY,IAAZ;;AAEA;AACA,kBAAM,MAAN,GAAe,MAAf;AACA,kBAAM,IAAN,GAAa,IAAb;AACA,kBAAM,IAAN,GAAa,IAAb;;AAEA,mBAAO,KAAP;AACH;;;;;AAED;;;;;;yCAMiB,M,EAAQ,K,EAAO;;AAE5B,gBAAI,UAAU,IAAV,IAAkB,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAI,SAAS,MAAM,MAAnB;AACA,oBAAI,OAAO,MAAM,IAAjB;AACA,oBAAI,OAAO,MAAM,IAAjB;;AAEA,oBAAI,UAAU,IAAV,IAAkB,QAAQ,IAA1B,IAAkC,QAAQ,IAA9C,EAAoD;;AAEhD;AACA,2BAAO,GAAP,CAAW,MAAX,EAAmB,IAAnB,EAAyB,IAAzB;;AAEA;AACA,2BAAO,MAAP,CAAc,IAAd,EAAoB,KAAK,UAAzB;AACA,2BAAO,MAAP,CAAc,IAAd,EAAoB,KAAK,UAAzB;AACA,2BAAO,MAAP,CAAc,MAAd,EAAsB,KAAK,YAA3B;;AAEA;AACA,2BAAO,SAAP;AACH;AACJ;AACJ;;;;;AAED;;;;;8CAKsB,M,EAAQ,K,EAAO;;AAEjC,gBAAI,UAAU,IAAV,IAAkB,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAI,SAAS,KAAb;AACA,oBAAI,OAAO,MAAM,IAAjB;AACA,oBAAI,OAAO,MAAM,IAAjB;;AAEA,oBAAI,UAAU,IAAV,IAAkB,QAAQ,IAA1B,IAAkC,QAAQ,IAA9C,EAAoD;;AAEhD;AACA,2BAAO,MAAP,CAAc,MAAd;AACA,2BAAO,MAAP,CAAc,IAAd;AACA,2BAAO,MAAP,CAAc,IAAd;;AAEA;AACA,2BAAO,SAAP;AACH;AACJ;AACJ;;;;;AAED;;;wDAGgC;;AAE5B;AACA,iBAAK,2BAAL;;AAEA;;;;AAIA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,wBAAnC;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAI,4BAA4B,QAAQ,QAAR,CAAiB,KAAK,mCAAtB,CAAhC;;AAEA;AACA,qBAAK,cAAL,CAAoB,gBAApB,CAAqC,KAAK,MAA1C,EAAkD,KAAK,WAAvD,EAAoE,yBAApE;;AAEA;AACA,qBAAK,yBAAL,GAAiC,yBAAjC;;AAEA;AACA,qBAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,gBAApB,CAAqC,yBAArC,CAAxB;;AAEA;;;;AAIA,qBAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,wBAAnC;AACH,aArBD,CAqBE,OAAM,CAAN,EAAS,CAEV;AACJ;;;;;AAED;;;sDAG8B;AAC1B,iBAAK,mCAAL,GAA2C,QAAQ,MAAR,CAAe,KAAK,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;iEAGyC;;AAErC,gBAAI,KAAK,yBAAL,CAA+B,sBAA/B,IAAyD,IAAzD,IACA,KAAK,yBAAL,CAA+B,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAK,yBAAL,CAA+B,2BAA/B,GAA6D,EAA7D;AACH;;AAED;AACA,iBAAK,6BAAL;AACH;;AAED;;;;;;;yCAIiB;AACb,gBAAI,cAAc,KAAK,cAAL,CAAoB,UAApB,EAAlB;;AAEA,mBAAO,WAAP;AACH;;AAED;;;;;;;;wDAKgC,M,EAAQ;AACpC,gBAAI,uBAAuB,KAAK,cAAL,CAAoB,+BAApB,CAAoD,MAApD,CAA3B;;AAEA,mBAAO,oBAAP;AACH;;AAED;;;;;;;;8CAKsB,M,EAAQ;AAC1B,gBAAI,aAAa,KAAK,cAAL,CAAoB,qBAApB,CAA0C,MAA1C,CAAjB;;AAEA,mBAAO,UAAP;AACH;;AAED;;;;;;;;0CAKkB,M,EAAQ;AACtB,gBAAI,SAAS,KAAK,cAAL,CAAoB,iBAApB,CAAsC,MAAtC,CAAb;;AAEA,mBAAO,MAAP;AACH;;AAED;;;;;;mDAG2B;;AAEvB;AACA,gBAAI,WAAW,EAAf;AACA,qBAAS,IAAT,GAAgB,iBAAhB;AACA,qBAAS,KAAT,GAAiB,MAAjB;AACA,qBAAS,MAAT,GAAkB,GAAlB;AACA,qBAAS,MAAT,GAAkB,GAAlB;AACA,qBAAS,KAAT,GAAiB,GAAjB;AACA,qBAAS,KAAT,GAAiB,CAAC,EAAlB;;AAEA;AACA,iBAAK,yBAAL,CAA+B,MAA/B,CAAsC,IAAtC,CAA2C,QAA3C;;AAEA;AACA,iBAAK,6BAAL;AACH;;AAED;;;;;;;oDAI4B,K,EAAO;;AAE/B;AACA,iBAAK,yBAAL,CAA+B,MAA/B,CAAsC,MAAtC,CAA6C,KAA7C,EAAoD,CAApD;;AAEA;AACA,iBAAK,6BAAL;AACH;;AAED;;;;;;;yCAIiB;AACb,gBAAI,UAAU,IAAd;;AAEA,gBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACA,oBAAI,UAAU,KAAK,MAAL,CAAY,SAAZ,CAAsB,WAAtB,CAAd;;AAEA;AACA,0BAAU,KAAK,WAAL,CAAiB,8BAAjB,CAAgD,OAAhD,CAAV;AACH;;AAED,mBAAO,OAAP;AACH;;AAED;;;;;;;;uCAKe,O,EAAS,I,EAAM;AAC1B,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,OAAxB;AACA,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB;AACH;;;;;AAED;;;;8CAIsB;AAClB,mBAAO,KAAK,wBAAZ;AACH;;AAED;;;;;;;kCAIU,M,EAAQ;;AAEd;AACA,gBAAI,SAAS,QAAQ,OAAR,CAAgB,MAAM,KAAK,WAAX,GAAyB,SAAzC,CAAb;;AAEA,gBAAI,UAAU,IAAV,IAAkB,OAAO,MAAP,GAAgB,CAAtC,EAAyC;;AAErC;AACA,yBAAS,OAAO,CAAP,CAAT;;AAEA;AACA,oBAAI,UAAU,OAAO,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,oBAAI,cAAc,KAAK,WAAL,CAAiB,8BAAjB,CAAgD,OAAhD,CAAlB;;AAEA;AACA,qBAAK,eAAL,CAAqB,UAArB,CAAgC,MAAhC,EAAwC,WAAxC;AACH;AACJ;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB,CAEpF,CAF2C,CAAxB,CAApB;AAGH;;;;;;AAGL,gBAAgB,OAAhB,GAA0B,CACtB,WADsB,EAEtB,IAFsB,EAGtB,QAHsB,EAItB,UAJsB,EAKtB,eALsB,EAMtB,cANsB,EAOtB,aAPsB,EAQtB,iBARsB,EAStB,qBATsB,EAUtB,gBAVsB,EAWtB,qBAXsB,EAYtB,oBAZsB,EAatB,aAbsB,CAA1B;;kBAgBe,e","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $injector,\n        $q,\n        $scope,\n        $timeout,\n        ConfigService,\n        LabelService,\n        NodeService,\n        NotebookService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService,\n        UtilService\n    ) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the snip image button is shown or not\n        this.isSnipImageButtonVisible = true;\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the message to display when the student is in create label mode\n        this.newLabelMessage = 'Click on the image or ';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    this.canvasId = 'labelCanvas_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent_' + this.canvasId).empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent').append(canvas);\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    this.backgroundImage = null;\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.labelController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.labelController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.labelController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importWorkNodeId = this.componentContent.importWorkNodeId;\n            var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.labels != null) {\n                /*\n                 * the student has not done any work and there are starter labels\n                 * so we will populate the canvas with the starter labels\n                 */\n                this.addLabelsToCanvas(this.componentContent.labels);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.registerComponentController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            this.processLatestSubmit();\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        // get all the objects from the canvas\n        var objects = this.canvas.getObjects();\n\n        if (objects != null) {\n\n            // loop through all the objects\n            for (var x = 0; x < objects.length; x++) {\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the object type\n                    var type = object.get('type');\n\n                    if (type === 'circle') {\n                        /*\n                         * the object is a circle which contains all the data\n                         * for a label\n                         */\n\n                        // get the simple JSON object that represents the label\n                        var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                        if (labelJSONObject != null) {\n                            // add the object to our array of labels\n                            labels.push(labelJSONObject);\n                        }\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        //studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        this.canvasWidth = this.componentContent.width;\n        this.canvasHeight = this.componentContent.height;\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // set the height on the parent div so that a vertical scrollbar doesn't show up\n        $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, 'A new label', 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: 5,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: 20,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: false,\n            selectable: true\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = 'Enter text here';\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index) {\n\n        // delete the label from the array\n        this.authoringComponentContent.labels.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check whether we need to show the snip image button\n     * @return whether to show the snip image button\n     */\n    showSnipImageButton() {\n        return this.isSnipImageButtonVisible;\n    }\n\n    /**\n     * Snip the labels by converting it to an image\n     * @param $event the click event\n     */\n    snipImage($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n}\n\nLabelController.$inject = [\n    '$injector',\n    '$q',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'LabelService',\n    'NodeService',\n    'NotebookService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelController;\n"]}