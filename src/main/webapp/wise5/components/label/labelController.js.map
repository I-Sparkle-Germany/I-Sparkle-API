{"version":3,"sources":["labelController.es6"],"names":["LabelController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","attachments","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","isResetButtonVisible","enableCircles","fabric","Text","prototype","set","_getNonTransformedDimensions","Point","width","height","scalarAdd","padding","_calculateCurrentDimensions","util","transformPoint","_getTransformedDimensions","getViewportTransform","studentDataVersion","labels","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","authoringComponentContentJSONString","originalComponentContent","nodeId","componentId","componentState","componentContent","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","onlyHasShowWorkConnectedComponents","isDisabled","getLatestComponentAnnotations","workgroupId","id","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","authoringComponentContent","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","submitCounter","$","empty","attr","css","append","setupCanvas","angular","isDirty","labelController","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$broadcast","initializeCanvas","disabled","createKeydownListener","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","addLabelsToCanvas","componentStateIsSameAsStarter","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","maxSubmitCount","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","studentData","version","setStudentDataVersion","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","label","pointX","pointY","textX","textY","color","canEdit","canDelete","createLabel","addLabelToCanvas","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","editLabelMode","selectedLabel","objects","getObjects","object","labelJSONObject","getLabelJSONObjectFromText","push","circle","getLabelFromCircle","lineObject","line","textObject","get","isStudentDataVersion","xDiff","x2","x1","yDiff","y2","y1","left","top","textString","backgroundColor","parseInt","getLabelFromText","circleObject","createNewComponentState","getStudentDataVersion","getLabelData","componentType","createComponentStateAdditionalProcessing","attachment","indexOf","splice","studentAsset","copiedAsset","studentAssetId","iconURL","importWorkComponentState","populatedComponentState","populateComponentState","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","getElementById","on","options","activeObject","getActiveObject","e","layerX","y","layerY","newLabel","selectLabel","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","saveLabelButtonClicked","$apply","makeSureXIsWithinXMinMaxLimits","makeSureYIsWithinYMinMaxLimits","radius","pointSize","parseFloat","fontSize","Circle","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","wrappedTextString","labelWidth","wordWrap","IText","cursorWidth","editable","selectedLabelText","editLabelTextInputTop","offset","focus","wrappedText","setText","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","result","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","isNotebookEnabled","$event","addNote","exitListener","component","componentHasWork","discardActiveObject","deleteLabel","removeLabelFromCanvas","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","tags","tag","componentStates","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedLabels","mergedBackgroundImage","concat","getConnectedComponentForComponentState","response","importWorkAsBackground","charactersPerLine","spaceInbetweenLines","createImageFromText","image","getConnectedComponentByComponentState","setComponentStateAsBackgroundImage","generateImageFromComponentState","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","authoringSetImportWorkAsBackgroundIfApplicable","connectedComponentType","getComponentByNodeIdAndComponentId","authoringGetConnectedComponentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","tempLabels","tempLabel","showWorkConnectedComponentCount","$inject"],"mappings":"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","file":"labelController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport Fabric from 'fabric';\nimport html2canvas from 'html2canvas';\n\nclass LabelController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      LabelService,\n      NodeService,\n      NotebookService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.LabelService = LabelService;\n    this.OpenResponseService = OpenResponseService;\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the new label button is shown or not\n    this.isNewLabelButtonVisible = true;\n\n    // whether the cancel button is shown or not\n    this.isCancelButtonVisible = false;\n\n    // whether the snip image button is shown or not\n    this.isSnipImageButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // whether the student can create new labels\n    this.canCreateLabels = true;\n\n    // whether the student is in the mode to create a new label\n    this.createLabelMode = false;\n\n    // a reference to the canvas\n    this.canvas = null;\n\n    // the canvas width\n    this.canvasWidth = 800;\n\n    // the canvas height\n    this.canvasHeight = 600;\n\n    // the z index of line elements\n    this.lineZIndex = 0;\n\n    // the z index of text elements\n    this.textZIndex = 1;\n\n    // the z index of circle elements\n    this.circleZIndex = 2;\n\n    // the canvas id\n    this.canvasId = 'c';\n\n    // the background image path\n    this.backgroundImage = null;\n\n    // whether to show the reset button\n    this.isResetButtonVisible = true;\n\n    this.enableCircles = true;\n\n    // modify Fabric so that Text elements can utilize padding\n    fabric.Text.prototype.set({\n      _getNonTransformedDimensions() { // Object dimensions\n        return new fabric.Point(this.width, this.height).scalarAdd(this.padding);\n      },\n      _calculateCurrentDimensions() { // Controls dimensions\n        return fabric.util.transformPoint(this._getTransformedDimensions(),\n            this.getViewportTransform(), true);\n      }\n    });\n\n    /*\n     * Student data version 1 is where the text x and y positioning is relative\n     * to the circle.\n     * Student data version 2 is where the text x and y positioning is absolute.\n     */\n    this.studentDataVersion = 2;\n\n    /*\n     * This will hold canvas label objects. A canvas label object contains a\n     * circle object, line object, and text object.\n     */\n    this.labels = [];\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      { type: 'ConceptMap' },\n      { type: 'Draw' },\n      { type: 'Embedded' },\n      { type: 'Graph' },\n      { type: 'Label' },\n      { type: 'OpenResponse' },\n      { type: 'Table' }\n    ];\n\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n\n    this.canvasId = 'canvas_' + this.nodeId + '_' + this.componentId;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (this.componentContent.canCreateLabels != null) {\n      this.canCreateLabels = this.componentContent.canCreateLabels;\n    }\n\n    if (this.componentContent.width != null) {\n      this.canvasWidth = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null) {\n      this.canvasHeight = this.componentContent.height;\n    }\n\n    if (this.componentContent.enableCircles != null) {\n      this.enableCircles = this.componentContent.enableCircles;\n    }\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      if (this.onlyHasShowWorkConnectedComponents()) {\n        this.isDisabled = true;\n      }\n\n      if (this.canCreateLabels) {\n        this.isNewLabelButtonVisible = true;\n      } else {\n        this.isNewLabelButtonVisible = false;\n      }\n\n      if (this.isDisabled) {\n        this.isNewLabelButtonVisible = false;\n        this.canCreateLabels = false;\n        this.isResetButtonVisible = false;\n      }\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isSnipImageButtonVisible = false;\n      this.isDisabled = true;\n\n      if (componentState != null) {\n        // create a unique id for the application label element using this component state\n        this.canvasId = 'labelCanvas_' + componentState.id;\n        if (this.mode === 'gradingRevision') {\n          this.canvasId = 'labelCanvas_gradingRevision_' + componentState.id;\n        }\n      }\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isSnipImageButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isNewLabelButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'authoring') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // generate the summernote rubric element id\n      this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n      // set the component rubric into the summernote rubric\n      this.summernoteRubricHTML = this.componentContent.rubric;\n\n      // the tooltip text for the insert WISE asset button\n      var insertAssetString = this.$translate('INSERT_ASSET');\n\n      /*\n       * create the custom button for inserting WISE assets into\n       * summernote\n       */\n      var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n      /*\n       * the options that specifies the tools to display in the\n       * summernote prompt\n       */\n      this.summernoteRubricOptions = {\n        toolbar: [\n          ['style', ['style']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['fontname', ['fontname']],\n          ['fontsize', ['fontsize']],\n          ['color', ['color']],\n          ['para', ['ul', 'ol', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'video']],\n          ['view', ['fullscreen', 'codeview', 'help']],\n          ['customButton', ['insertAssetButton']]\n        ],\n        height: 300,\n        disableDragAndDrop: true,\n        buttons: {\n          insertAssetButton: InsertAssetButton\n        }\n      };\n\n      if (this.componentContent.enableCircles == null) {\n        /*\n         * If this component was created before enableCircles was implemented,\n         * we will default it to true in the authoring so that the\n         * \"Enable Dots\" checkbox is checked.\n         */\n        this.authoringComponentContent.enableCircles = true;\n      }\n\n      this.updateAdvancedAuthoringView();\n\n      $scope.$watch(function() {\n        return this.authoringComponentContent;\n      }.bind(this), function(newValue, oldValue) {\n        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        this.submitCounter = 0;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.enableCircles = this.componentContent.enableCircles;\n\n        if (this.canvas != null) {\n\n          // clear the parent to remove the canvas\n          $('#canvasParent_' + this.canvasId).empty();\n\n          // create a new canvas\n          var canvas = $('<canvas/>');\n          canvas.attr('id', this.canvasId);\n          canvas.css('border', '1px solid black');\n\n          // add the new canvas\n          $('#canvasParent_' + this.canvasId).append(canvas);\n\n          /*\n           * clear the background so that setupCanvas() can\n           * reapply the background\n           */\n          this.backgroundImage = null;\n\n          // setup the new canvas\n          this.setupCanvas();\n        }\n\n        if (this.componentContent.canCreateLabels != null) {\n          this.canCreateLabels = this.componentContent.canCreateLabels;\n        }\n\n        if (this.canCreateLabels) {\n          this.isNewLabelButtonVisible = true;\n        } else {\n          this.isNewLabelButtonVisible = false;\n        }\n      }.bind(this), true);\n    }\n\n    this.$timeout(angular.bind(this, function() {\n      // wait for angular to completely render the html before we initialize the canvas\n\n      this.setupCanvas();\n    }));\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.labelController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.labelController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.labelController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.labelController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /*\n     * Listen for the requestImage event which is fired when something needs\n     * an image representation of the student data from a specific\n     * component.\n     */\n    this.$scope.$on('requestImage', (event, args) => {\n\n      // get the node id and component id from the args\n      var nodeId = args.nodeId;\n      var componentId = args.componentId;\n\n      // check if the image is being requested from this component\n      if (this.nodeId === nodeId && this.componentId === componentId) {\n\n        // obtain the image blob\n        var imageObject = this.getImageObject();\n\n        if (imageObject != null) {\n          var args = {};\n          args.nodeId = nodeId;\n          args.componentId = componentId;\n          args.imageObject = imageObject;\n\n          // fire an event that contains the image object\n          this.$scope.$emit('requestImageCallback', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    /**\n     * The student has changed the file input\n     * @param element the file input element\n     */\n    this.$scope.fileUploadChanged = function(element) {\n\n      // get the current background image if any\n      var backgroundImage = this.labelController.getBackgroundImage();\n\n      var overwrite = true;\n\n      if (backgroundImage != null && backgroundImage != '') {\n        /*\n         * there is an existing background image so we will ask the\n         * student if they want to change it\n         */\n        var answer = confirm(this.labelController.$translate('label.areYouSureYouWantToChangeTheBackgroundImage'));\n\n        if (answer) {\n          // the student wants to change the background image\n          overwrite = true;\n        } else {\n          // the student does not want to change the background image\n          overwrite = false;\n\n          /*\n           * clear the input file value otherwise it will show the\n           * name of the file they recently selected but decided not\n           * to use because they decided not to change the background\n           * image\n           */\n          element.value = null;\n        }\n      }\n\n      if (overwrite) {\n        // we will change the current background\n\n        // get the files from the file input element\n        var files = element.files;\n\n        if (files != null && files.length > 0) {\n\n          // upload the file to the studentuploads folder\n          this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\n\n            // make a referenced copy of the unreferenced asset\n            this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n\n              if (referencedAsset != null) {\n                // get the url of the referenced asset\n                var imageURL = referencedAsset.url;\n\n                if (imageURL != null && imageURL != '') {\n\n                  // set the referenced asset as the background image\n                  this.labelController.setBackgroundImage(imageURL);\n                  this.labelController.studentDataChanged();\n                }\n              }\n            });\n          });\n        }\n      }\n    }\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  setupCanvas() {\n    // initialize the canvas\n    var canvas = this.initializeCanvas();\n    this.canvas = canvas;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (!this.disabled) {\n      // create the key down listener to listen for the delete key\n      this.createKeydownListener();\n    }\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      } else if (this.LabelService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n\n        if (this.componentContent.labels != null) {\n          // populate the canvas with the starter labels\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      } else if (this.LabelService.componentStateIsSameAsStarter(componentState, this.componentContent)) {\n        // the student labels are the same as the starter labels\n        this.setStudentWork(componentState);\n      } else if (componentState == null) {\n        /*\n         * only import work if the student does not already have\n         * work for this component\n         */\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        } else if (this.componentContent.labels != null) {\n          /*\n           * the student has not done any work and there are starter labels\n           * so we will populate the canvas with the starter labels\n           */\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      }\n    } else if (this.mode === 'grading') {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    } else {\n      if (componentState == null && this.componentContent.labels != null) {\n        // populate the canvas with the starter labels\n        this.addLabelsToCanvas(this.componentContent.labels);\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n    }\n\n    // get the background image that may have been set by the student data\n    var backgroundImage = this.getBackgroundImage();\n\n    if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n      // get the background image from the component content if any\n      this.setBackgroundImage(this.componentContent.backgroundImage);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.version == null) {\n          this.setStudentDataVersion(1);\n        } else {\n          this.setStudentDataVersion(studentData.version);\n        }\n\n        // get the labels from the student data\n        var labels = studentData.labels;\n\n        // add the labels to the canvas\n        this.addLabelsToCanvas(labels);\n\n        // get the background image from the student data\n        var backgroundImage = studentData.backgroundImage;\n\n        if (backgroundImage != null) {\n          this.setBackgroundImage(backgroundImage);\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Add labels ot the canvas\n   * @param labels an array of objects that contain the values for a label\n   */\n  addLabelsToCanvas(labels) {\n    if (labels != null) {\n\n      // loop through all the labels\n      for (let x = 0; x < labels.length; x++) {\n\n        // get a label\n        var label = labels[x];\n\n        if (label != null) {\n\n          // get the values of the label\n          let pointX = label.pointX;\n          let pointY = label.pointY;\n          let textX = label.textX;\n          let textY = label.textY;\n          let text = label.text;\n          let color = label.color;\n          let canEdit = label.canEdit;\n          let canDelete = label.canDelete;\n\n          // create the label\n          var label = this.createLabel(pointX, pointY, textX, textY, text,\n              color, canEdit, canDelete);\n\n          // add the label to the canvas\n          this.addLabelToCanvas(this.canvas, label);\n        }\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Called when the student clicks on the new label button to enter\n   * create label mode\n   */\n  newLabelButtonClicked() {\n    this.createLabelMode = true;\n    this.isCancelButtonVisible = true;\n    this.editLabelMode = false;\n    this.selectedLabel = null;\n  };\n\n  /**\n   * Called when the student clicks on the cancel button to exit\n   * create label mode\n   */\n  cancelButtonClicked() {\n    this.createLabelMode = false;\n    this.isCancelButtonVisible = false;\n  };\n\n  /**\n   * Get the label data from the canvas.\n   * @returns An array of simple JSON objects that contain the label data.\n   */\n  getLabelData() {\n    var labels = [];\n\n    /*\n     * get all the circle objects from the canvas which each correspond to\n     * a label point\n     */\n    var objects = this.canvas.getObjects('i-text');\n\n    if (objects != null) {\n\n      // loop through all the circle objects\n      for (var x = 0; x < objects.length; x++) {\n\n        /*\n         * the object is a circle which contains all the data\n         * for a label\n         */\n        var object = objects[x];\n\n        if (object != null) {\n\n          // get the simple JSON object that represents the label\n          var labelJSONObject = this.getLabelJSONObjectFromText(object);\n\n          if (labelJSONObject != null) {\n            // add the object to our array of labels\n            labels.push(labelJSONObject);\n          }\n        }\n      }\n    }\n\n    return labels;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param circle a Fabric circle object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromCircle(circle) {\n    var labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    var label = this.getLabelFromCircle(circle);\n\n    // get the line associated with the circle\n    var lineObject = circle.line;\n\n    // get the text object associated with the circle\n    var textObject = circle.text;\n\n    // get the position of the circle\n    var pointX = circle.get('left');\n    var pointY = circle.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      var xDiff = lineObject.x2 - lineObject.x1;\n      var yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    var text = label.textString;\n    var color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = text;\n    labelJSONObject.color = color;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param text a Fabric text object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromText(text) {\n    let labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    let label = this.getLabelFromText(text);\n    let circleObject = label.circle;\n    let lineObject = label.line;\n    let textObject = label.text;\n\n    // get the position of the circle\n    let pointX = circleObject.get('left');\n    let pointY = circleObject.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      let xDiff = lineObject.x2 - lineObject.x1;\n      let yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    let textString = label.textString;\n    let color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = textString;\n    labelJSONObject.color = color;\n\n    let canEdit = label.canEdit;\n    if (canEdit == null) {\n      canEdit = false;\n    }\n    labelJSONObject.canEdit = canEdit;\n\n    let canDelete = label.canDelete;\n    if (canDelete == null) {\n      canDelete = false;\n    }\n    labelJSONObject.canDelete = canDelete;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n    studentData.version = this.getStudentDataVersion();\n    studentData.labels = this.getLabelData();\n\n    var backgroundImage = this.getBackgroundImage();\n    if (backgroundImage != null) {\n      studentData.backgroundImage = backgroundImage;\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Label';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check whether we need to show the new label button\n   * @returns whether to show the new label button\n   */\n  showNewLabelButton() {\n    return this.isNewLabelButtonVisible;\n  };\n\n  /**\n   * Check whether we need to show the cancel button\n   * @returns whether to show the cancel button\n   */\n  showCancelButton() {\n    return this.isCancelButtonVisible;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.LabelService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Initialize the canvas\n   * @returns the canvas object\n   */\n  initializeCanvas() {\n\n    var canvas = null;\n\n    if (this.componentContent.width != null && this.componentContent.width != '') {\n      this.canvasWidth = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null && this.componentContent.height != '') {\n      this.canvasHeight = this.componentContent.height;\n    }\n\n    // get the canvas object from the html\n    if (this.isDisabled) {\n      // we will make the canvas uneditable\n      canvas = new fabric.StaticCanvas(this.canvasId);\n    } else {\n      // make the canvas editable\n      canvas = new fabric.Canvas(this.canvasId);\n    }\n\n    // disable selection of items\n    canvas.selection = false;\n\n    // change the cursor to a hand when it is hovering over an object\n    canvas.hoverCursor = 'pointer';\n\n    // set the width and height of the canvas\n    canvas.setWidth(this.canvasWidth);\n    canvas.setHeight(this.canvasHeight);\n    document.getElementById(this.canvasId).width = this.canvasWidth;\n    document.getElementById(this.canvasId).height = this.canvasHeight;\n\n    // set the height on the parent div so that a vertical scrollbar doesn't show up\n    $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n    // listen for the mouse down event\n    canvas.on('mouse:down', angular.bind(this, function(options) {\n\n      // get the object that was clicked on if any\n      var activeObject = this.canvas.getActiveObject();\n\n      if (activeObject == null) {\n        /*\n         * no objects in the canvas were clicked. the user clicked\n         * on a blank area of the canvas so we will unselect any label\n         * that was selected and turn off edit label mode\n         */\n        this.selectedLabel = null;\n        this.editLabelMode = false;\n      }\n\n      // check if the student is in create label mode\n      if (this.createLabelMode) {\n        /*\n         * the student is in create label mode so we will create a new label\n         * where they have clicked\n         */\n\n        // turn off create label mode and hide the cancel button\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n\n        var event = options.e;\n\n        if (event != null) {\n          // get the x and y position that the student clicked on\n          var x = event.layerX;\n          var y = event.layerY;\n\n          /*\n           * set the location of the text object to be down to the right\n           * of the position the student clicked on\n           */\n          let textX = null;\n          let textY = null;\n          if (this.enableCircles) {\n            // place the text to the bottom right of the circle\n            if (this.isStudentDataVersion(1)) {\n              // text is relatively positioned\n              textX = 100;\n              textY = 100;\n            } else {\n              // text is absolutely positioned\n              textX = x + 100;\n              textY = y + 100;\n            }\n          } else {\n            // circles are not enabled so we are only using the text\n            textX = x;\n            textY = y;\n          }\n\n          let canEdit = true;\n          let canDelete = true;\n\n          // create a new label\n          var newLabel = this.createLabel(x, y, textX, textY,\n              this.$translate('label.aNewLabel'), 'blue', canEdit, canDelete);\n\n          // add the label to the canvas\n          this.addLabelToCanvas(this.canvas, newLabel);\n\n          /*\n           * make the new label selected so that the student can edit\n           * the text\n           */\n          this.selectLabel(newLabel);\n          this.studentDataChanged();\n        }\n      }\n    }));\n\n    // listen for the object moving event\n    canvas.on('object:moving', angular.bind(this, function(options) {\n      var target = options.target;\n\n      if (target != null) {\n\n        // get the type of the object that is moving\n        var type = target.get('type');\n\n        // get the position of the element\n        var left = target.get('left');\n        var top = target.get('top');\n\n        // limit the x position to the canvas\n        if (left < 0) {\n          target.set('left', 0);\n          left = 0;\n        } else if (left > this.canvasWidth) {\n          target.set('left', this.canvasWidth);\n          left = this.canvasWidth;\n        }\n\n        // limit the y position to the canvas\n        if (top < 0) {\n          target.set('top', 0);\n          top = 0;\n        } else if (top > this.canvasHeight) {\n          target.set('top', this.canvasHeight);\n          top = this.canvasHeight;\n        }\n\n        if (type === 'circle') {\n          /*\n           * the student is moving the point of the label so we need to update\n           * the endpoint of the line and the position of the text element.\n           * the endpoint of the line and the position of the text element should\n           * maintain the relative position to the point.\n           */\n\n          // get the line associated with the circle\n          var line = target.line;\n\n          var xDiff = 0;\n          var yDiff = 0;\n\n          if (line != null) {\n            // calculate the relative offset of the end of the line\n            xDiff = line.x2 - line.x1;\n            yDiff = line.y2 - line.y1;\n\n            if (this.isStudentDataVersion(1)) {\n              // set the new position of the two endpoints of the line\n              line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n            } else {\n              // set the new position of the circle endpoint of the line\n              line.set({x1: left, y1: top});\n            }\n\n            // remove and add the line to refresh the element in the canvas\n            canvas.remove(line);\n            canvas.add(line);\n\n            // set the z index so it will be below the circle and text elements\n            canvas.moveTo(line, this.lineZIndex);\n          }\n\n          // get the text element\n          var text = target.text;\n\n          if (text != null) {\n            if (this.isStudentDataVersion(1)) {\n              /*\n               * In the old student data version the text position is relative\n               * to the circle so we need to move the text along with the circle.\n               */\n\n              // set the new position of the text element\n              text.set({left: left + xDiff, top: top + yDiff});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(text);\n              canvas.add(text);\n\n              // set the z index so it will be above line elements and below circle elements\n              canvas.moveTo(text, this.textZIndex);\n            }\n          }\n        } else if (type === 'i-text') {\n          if (this.enableCircles) {\n            /*\n             * the student is moving the text of the label so we need to update\n             * the endpoint of the line. the endpoint of the line should be in\n             * the same position as the text element.\n             */\n            var line = target.line;\n            if (line != null) {\n              // set the new position of the text element\n              line.set({x2: left, y2: top});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(line);\n              canvas.add(line);\n\n              // set the z index so it will be below the circle and text elements\n              canvas.moveTo(line, this.lineZIndex);\n            }\n          } else {\n            /*\n             * Circles are not enabled so we are only showing the text. We will\n             * set the circle position to be the same as the text position.\n             */\n            let circle = target.circle;\n            let line = target.line;\n            circle.set({left: left, top: top});\n            line.set({x1: left, y1: top, x2: left, y2: top});\n          }\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n        this.studentDataChanged();\n      }\n    }));\n\n    // listen for the text changed event\n    canvas.on('text:changed', angular.bind(this, function(options) {\n      var target = options.target;\n      if (target != null) {\n        var type = target.get('type');\n        if (type === 'i-text') {\n          this.studentDataChanged();\n        }\n      }\n    }));\n\n    return canvas;\n  };\n\n  /**\n   * Set the background image\n   * @param backgroundImagePath the url path to an image\n   */\n  setBackgroundImage(backgroundImagePath) {\n    if (backgroundImagePath != null) {\n      this.backgroundImage = backgroundImagePath;\n      this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n    }\n  };\n\n  /**\n   * Get the background image\n   * @returns the background image path\n   */\n  getBackgroundImage() {\n    return this.backgroundImage;\n  };\n\n  /**\n   * Create the keydown listener that we will use for deleting labels\n   */\n  createKeydownListener() {\n    window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n  };\n\n  /**\n   * The callback handler for the keydown event\n   * @param e the event\n   */\n  keyPressed(e) {\n\n    // get the key code of the key that was pressed\n    var keyCode = e.keyCode;\n    if (keyCode === 13) {\n      // the enter key was pressed\n      if (this.selectedLabel != null) {\n        /*\n         * There is a selected label so we will treat the enter keypress as\n         * the intention of submitting any changes to the label text.\n         */\n        this.saveLabelButtonClicked();\n        this.$scope.$apply();\n      }\n    }\n  };\n\n  /**\n   * Get the label object given the canvas circle object.\n   * @param circle A canvas circle object.\n   * @return A label object.\n   */\n  getLabelFromCircle(circle) {\n    for (let label of this.labels) {\n      if (circle == label.circle) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the label object given the canvas text object.\n   * @param text A canvas text object.\n   * @return A label object.\n   */\n  getLabelFromText(text) {\n    for (let label of this.labels) {\n      if (text == label.text) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create a label object. The label object is represented by a circle\n   * element (the point), a line element, and a text element. The circle\n   * element will contain a reference to the line and text elements. The\n   * text element will contain a reference to the line element.\n   * @param pointX the x position of the point (circle)\n   * @param pointY the y position of the point (circle)\n   * @param textX the x position of the text relative to the point (circle)\n   * @param textY the y position of the text relative to the point (circle)\n   * @param textString the text of the label\n   * @param color the background color of the label\n   * @param canEdit whether the student can edit the label\n   * @param canDelete whether the student can delete the label\n   * @returns an object containing a circle, line, and text\n   */\n  createLabel(pointX, pointY, textX, textY, textString, color, canEdit, canDelete) {\n    let label = {};\n\n    // get the position of the point\n    let x1 = pointX;\n    let y1 = pointY;\n    let x2 = null;\n    let y2 = null;\n\n    if (this.isStudentDataVersion(1)) {\n      // get the absolute position of the text\n      x2 = pointX + textX;\n      y2 = pointY + textY;\n    } else {\n      x2 = textX;\n      y2 = textY;\n    }\n\n    /*\n     * Make sure all the positions are within the bounds of the canvas. If there\n     * are any positions that are outside the bounds, we will change the\n     * position to be within the bounds.\n     */\n    x1 = this.makeSureXIsWithinXMinMaxLimits(x1);\n    y1 = this.makeSureYIsWithinYMinMaxLimits(y1);\n    x2 = this.makeSureXIsWithinXMinMaxLimits(x2);\n    y2 = this.makeSureYIsWithinYMinMaxLimits(y2);\n\n    if (color == null) {\n      // the default background color for text elements will be blue\n      color = 'blue';\n    }\n\n    let radius = 5;\n    if (this.componentContent.pointSize != null &&\n        this.componentContent.pointSize != '') {\n      radius = parseFloat(this.componentContent.pointSize);\n    }\n\n    let fontSize = 20;\n    if (this.componentContent.fontSize != null &&\n        this.componentContent.fontSize != '') {\n      fontSize = parseFloat(this.componentContent.fontSize);\n    }\n\n    // create a circle element\n    var circle = new fabric.Circle({\n      radius: radius,\n      left: x1,\n      top: y1,\n      originX: 'center',\n      originY: 'center',\n      hasControls: false,\n      borderColor: 'red',\n      hasBorders: true,\n      selectable: true\n    });\n\n    // create a line element\n    var line = new fabric.Line([x1, y1, x2, y2], {\n      fill: 'black',\n      stroke: 'black',\n      strokeWidth: 3,\n      selectable: false\n    });\n\n    // wrap the text if necessary\n    let wrappedTextString = textString;\n    if (this.componentContent.labelWidth) {\n      wrappedTextString = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // create an editable text element\n    var text = new fabric.IText(wrappedTextString, {\n      left: x2,\n      top: y2,\n      originX: 'center',\n      originY: 'center',\n      fontSize: fontSize,\n      fill: 'white',\n      backgroundColor: color,\n      width: 100,\n      hasControls: false,\n      hasBorders: true,\n      borderColor: 'red',\n      selectable: true,\n      cursorWidth: 0,\n      editable: false,\n      padding: 16\n    });\n\n    // give the circle a reference to the line and text elements\n    circle.line = line;\n    circle.text = text;\n\n    // give the text element a reference to the line and circle elements\n    text.line = line;\n    text.circle = circle;\n\n    // add the circle, line, and text elements to the label object\n    label.circle = circle;\n    label.line = line;\n    label.text = text;\n    label.textString = textString;\n\n    if (canEdit == null) {\n      canEdit = true;\n    }\n    label.canEdit = canEdit;\n\n    if (canDelete == null) {\n      canDelete = true;\n    }\n    label.canDelete = canDelete;\n\n    return label;\n  };\n\n  /**\n   * Make sure the x coordinate is within the bounds of the canvas.\n   * @param x The x coordinate.\n   * @return The x coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    // make sure the x is not to the left of the left edge\n    if (x < 0) {\n      x = 0;\n    }\n    // make sure the x is not to the right of the right edge\n    if (x > this.canvasWidth) {\n      x = this.canvasWidth;\n    }\n    return x;\n  }\n\n  /**\n   * Make sure the y coordinate is within the bounds of the canvas.\n   * @param y The y coordinate.\n   * @return The y coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    // make sure the y is not above the top edge\n    if (y < 0) {\n      y = 0;\n    }\n    // make sure the y is not below the bottom edge\n    if (y > this.canvasHeight) {\n      y = this.canvasHeight;\n    }\n    return y;\n  }\n\n  /**\n   * Add a label to canvas\n   * @param canvas the canvas\n   * @param label an object that contains a Fabric circle, Fabric line,\n   * and Fabric itext elements\n   */\n  addLabelToCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n\n        if (this.enableCircles) {\n          // add the elements to the canvas\n          canvas.add(circle, line, text);\n\n          // set the z indexes for the elements\n          canvas.moveTo(line, this.lineZIndex);\n          canvas.moveTo(text, this.textZIndex);\n          canvas.moveTo(circle, this.circleZIndex);\n        } else {\n          // add the text element to the canvas\n          canvas.add(text);\n          canvas.moveTo(text, this.textZIndex);\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n\n        if (this.enableCircles) {\n          circle.on('mousedown', () => {\n            /*\n             * the circle was clicked so we will make the associated\n             * label selected\n             */\n            this.selectLabel(label);\n          });\n        }\n\n        text.on('mousedown', () => {\n          /*\n           * the text was clicked so we will make the associated\n           * label selected\n           */\n          this.selectLabel(label);\n        });\n\n        this.labels.push(label);\n      }\n    }\n  };\n\n  /**\n   * Make the label selected which means we will show the UI elements to\n   * allow the text to be edited and the label to deleted.\n   * @param label the label object\n   */\n  selectLabel(label) {\n    // create a reference to the selected label\n    this.selectedLabel = label;\n\n    if (label.canEdit) {\n      /*\n       * remember the label text before the student changes it in case the\n       * student wants to cancel any changes they make\n       */\n      this.selectedLabelText = label.text.text;\n\n      // show the label text input\n      this.editLabelMode = true;\n\n      /*\n       * Give focus to the label text input element so the student can immediately\n       * start typing.\n       */\n      this.$timeout(() => {\n        /*\n         * Get the y position of the top of the edit label text input. If this\n         * value is negative, it means the element is above the currently\n         * viewable area and can not be seen. If the value is positive, it means\n         * the element is currently in the viewable area and can be seen.\n         */\n        var editLabelTextInputTop = $('#editLabelTextInput').offset().top;\n\n        /*\n         * Check if the edit label text input is viewable. We want to make sure\n         * the input is in view. If the input is not in view and we give it\n         * focus, it will have the undesirable effect of scrolling the view up\n         * so that the input comes into view. We don't want it to scroll because\n         * it's jarring when the student is trying to select a label in the\n         * canvas.\n         */\n        if (editLabelTextInputTop > 100) {\n          // the input is in view so we will give it focus.\n          angular.element('#editLabelTextInput').focus();\n        }\n      });\n    } else {\n      // hide label text input\n      this.editLabelMode = false;\n    }\n\n    /*\n     * force angular to refresh, otherwise angular will wait until the\n     * user generates another input (such as moving the mouse) before\n     * refreshing\n     */\n    this.$scope.$apply();\n  }\n\n  /**\n   * The student has changed the label text on the selected label\n   * @param label The label that has changed.\n   * @param textObject The label's canvas text object.\n   * @param textString The text string.\n   */\n  selectedLabelTextChanged(label, textObject, textString) {\n\n    // save the text string into the label\n    label.textString = textString;\n\n    // wrap the text if necessary\n    let wrappedText = textString;\n    if (this.componentContent.labelWidth != null &&\n        this.componentContent.labelWidth != '') {\n      wrappedText = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // set the wrapped text into the text object\n    textObject.setText(wrappedText);\n    this.studentDataChanged();\n\n    // refresh the canvas\n    this.canvas.renderAll();\n  }\n\n  /**\n   * Remove a label from the canvas.\n   * @param canvas The canvas.\n   * @param label A label object that contains a circle object, line object, and\n   * text object.\n   */\n  removeLabelFromCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line, and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n        // remove the elements from the canvas\n        canvas.remove(circle);\n        canvas.remove(line);\n        canvas.remove(text);\n\n        this.labels.splice(this.labels.indexOf(label), 1);\n\n        // refresh the canvas\n        canvas.renderAll();\n      }\n    }\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the component content\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Add a label in the authoring view\n   */\n  authoringAddLabelClicked() {\n\n    // create the new label\n    var newLabel = {};\n    newLabel.text = this.$translate('label.enterTextHere');\n    newLabel.color = 'blue';\n    newLabel.pointX = 100;\n    newLabel.pointY = 100;\n    newLabel.textX = 200;\n    newLabel.textY = 200;\n    newLabel.canEdit = false;\n    newLabel.canDelete = false;\n\n    // add the label to the array of labels\n    this.authoringComponentContent.labels.push(newLabel);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a label in the authoring view\n   * @param index the index of the label in the labels array\n   */\n  authoringDeleteLabelClicked(index, label) {\n\n    // get the label text\n    var selectedLabelText = label.textString;\n\n    // ask the author if they are sure they want to delete this label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n    if (answer) {\n      // the author answered yes to delete the label\n\n      // delete the label from the array\n      this.authoringComponentContent.labels.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the image object representation of the student data\n   * @returns an image object\n   */\n  getImageObject() {\n    var pngFile = null;\n\n    if (this.canvas != null) {\n\n      // get the image as a base64 string\n      var img_b64 = this.canvas.toDataURL('image/png');\n\n      // get the image object\n      pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n    }\n\n    return pngFile;\n  }\n\n  /**\n   * Check whether we need to show the snip image button\n   * @return whether to show the snip image button\n   */\n  showSnipImageButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Snip the labels by converting it to an image\n   * @param $event the click event\n   */\n  snipImage($event) {\n\n    // get the canvas element\n    var canvas = angular.element('#' + this.canvasId);\n\n    if (canvas != null && canvas.length > 0) {\n\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      var img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // create a notebook item with the image populated into it\n      this.NotebookService.addNote($event, imageObject);\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The student clicked the save button in the edit label mode\n   */\n  saveLabelButtonClicked() {\n    if (this.selectedLabel != null) {\n      /*\n       * we do not need to perform any saving of the text since it has\n       * already been handled by the ng-model for the label text\n       */\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n    }\n  }\n\n  /**\n   * The student clicked the cancel button in the edit label mode\n   */\n  cancelLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the label text before the student recently made changes to it\n      var selectedLabelText = this.selectedLabelText;\n\n      // revert the label text to what it was before\n      this.selectedLabel.text.setText(selectedLabelText);\n\n      // clear the label text holder\n      this.selectedLabelText = null;\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n      this.studentDataChanged();\n\n      // refresh the canvas\n      this.canvas.renderAll();\n    }\n  }\n\n  /**\n   * The student clicked the delete button in the edit label mode\n   */\n  deleteLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the text from the label we are going to delete\n      var selectedLabelText = this.selectedLabel.textString;\n\n      // confirm with the student that they want to delete the label\n      var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n      if (answer) {\n        // the student is sure they want to delete the label\n        this.deleteLabel(this.selectedLabel);\n\n        /*\n         * remove the reference to the selected label since it will no\n         * longer be selected\n         */\n        this.selectedLabel = null;\n\n        // turn off edit label mode\n        this.editLabelMode = false;\n\n        // make the canvas object no longer the active object\n        this.canvas.discardActiveObject();\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a label from the canvas.\n   * @param label A label object.\n   */\n  deleteLabel(label) {\n    // remove the label from the canvas\n    this.removeLabelFromCanvas(this.canvas, label);\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Save the starter labels from the component authoring preview\n   */\n  saveStarterLabels() {\n\n    // ask the author if they are sure they want to save the starter labels\n    var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to save the starter labels\n\n      // get the labels in the component authoring preview\n      var labels = this.getLabelData();\n\n      /*\n       * make a copy of the labels so we don't run into any referencing issues\n       * later\n       */\n      var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\n\n      // sort the labels alphabetically by their text\n      starterLabels.sort(this.labelTextComparator);\n\n      // set the labels\n      this.authoringComponentContent.labels = starterLabels;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A comparator used to sort labels alphabetically\n   * It should be used like labels.sort(this.labelTextComparator);\n   * @param labelA a label object\n   * @param labelB a label object\n   * @return -1 if labelA comes before labelB\n   * 1 if labelB comes after labelB\n   * 0 of the labels are equal\n   */\n  labelTextComparator(labelA, labelB) {\n\n    if (labelA.text < labelB.text) {\n      // the labelA text comes before the labelB text alphabetically\n      return -1;\n    } else if (labelA.text > labelB.text) {\n      // the labelA text comes after the labelB text alphabetically\n      return 1;\n    } else {\n      /*\n       * the labelA text is the same as the labelB text so we will\n       * try to break the tie by looking at the color\n       */\n\n      if (labelA.color < labelB.color) {\n        // the labelA color text comes before the labelB color text alphabetically\n        return -1;\n      } else if (labelA.color > labelB.color) {\n        // the labelA color text comes after the labelB color text alphabetically\n        return 1;\n      } else {\n        /*\n         * the labelA color text is the same as the labelB color text so\n         * we will try to break the tie by looking at the pointX\n         */\n\n        if (labelA.pointX < labelB.pointX) {\n          // the labelA pointX is smaller than the labelB pointX\n          return -1;\n        } else if (labelA.pointX > labelB.pointX) {\n          // the labelA pointX is larger than the labelB pointX\n          return 1;\n        } else {\n          /*\n           * the labelA pointX is the same as the labelB pointX so\n           * we will try to break the tie by looking at the pointY\n           */\n\n          if (labelA.pointY < labelB.pointY) {\n            // the labelA pointY is smaller than the labelB pointY\n            return -1;\n          } else if (labelA.pointY > labelB.pointY) {\n            // the labelA pointY is larger than the labelB pointY\n            return 1;\n          } else {\n            /*\n             * all the label values are the same between labelA\n             * and labelB\n             */\n            return 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete all the starter labels\n   */\n  deleteStarterLabels() {\n\n    /*\n     * ask the author if they are sure they want to delete all the starter\n     * labels\n     */\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      // clear the labels array\n      this.authoringComponentContent.labels = [];\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Open a webpage in a new tab that shows a lot of the javascript colors\n   */\n  openColorViewer() {\n\n    // open the webpage in a new tab\n    this.$window.open('http://www.javascripter.net/faq/colornam.htm');\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      if (this.componentContent.backgroundImage != null &&\n          this.componentContent.backgroundImage != '') {\n        /*\n         * this component has a background so we will use it instead of\n         * the background from the imported student work\n         */\n        this.setBackgroundImage(this.componentContent.backgroundImage);\n      }\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n      let mergedLabels = [];\n      let mergedBackgroundImage = null;\n      let studentDataVersion = 2;\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          if (componentState.componentType == 'Label') {\n            let studentData = componentState.studentData;\n            if (studentData != null) {\n              if (studentData.version != null) {\n                studentDataVersion = studentData.version;\n              }\n              let labels = studentData.labels;\n              let backgroundImage = studentData.backgroundImage;\n              if (labels != null && labels != '') {\n                mergedLabels = mergedLabels.concat(labels);\n              }\n              if (backgroundImage != null && backgroundImage != '') {\n                mergedBackgroundImage = backgroundImage;\n              }\n            }\n          } else if (componentState.componentType == 'OpenResponse') {\n            let connectedComponent = this.getConnectedComponentForComponentState(componentState);\n            if (connectedComponent != null) {\n              let studentData = componentState.studentData;\n              let response = studentData.response;\n              if (connectedComponent.importWorkAsBackground) {\n                let charactersPerLine = connectedComponent.charactersPerLine;\n                let spaceInbetweenLines = connectedComponent.spaceInbetweenLines;\n                let fontSize = connectedComponent.fontSize;\n\n                // create an image from the concept map data\n                this.LabelService.createImageFromText(response, null, null,\n                    charactersPerLine, null, spaceInbetweenLines, fontSize).then((image) => {\n                  // set the image as the background\n                  this.setBackgroundImage(image);\n\n                  // make the work dirty so that it gets saved\n                  this.studentDataChanged();\n                });\n              }\n            }\n          } else if (componentState.componentType == 'ConceptMap' ||\n              componentState.componentType == 'Draw' ||\n              componentState.componentType == 'Embedded' ||\n              componentState.componentType == 'Graph' ||\n              componentState.componentType == 'Table') {\n            let connectedComponent =\n              this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n            if (connectedComponent.importWorkAsBackground === true) {\n              this.setComponentStateAsBackgroundImage(componentState);\n            }\n          }\n        }\n      }\n\n      if (mergedLabels != null) {\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.labels = mergedLabels;\n        mergedComponentState.studentData.backgroundImage = mergedBackgroundImage;\n      }\n      if (studentDataVersion != null) {\n        mergedComponentState.studentData.version = studentDataVersion;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Get the connected component associated with the component state.\n   * @param componentState A component state object that was obtained from a\n   * connected component.\n   * @return A connected component object.\n   */\n  getConnectedComponentForComponentState(componentState) {\n    for (let connectedComponent of this.componentContent.connectedComponents) {\n      if (componentState.nodeId == connectedComponent.nodeId &&\n          componentState.componentId == connectedComponent.componentId) {\n        return connectedComponent;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      delete connectedComponent.importWorkAsBackground;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * If the component type is a certain type, we will set the importWorkAsBackground\n   * field to true.\n   * @param connectedComponent The connected component object.\n   */\n  authoringSetImportWorkAsBackgroundIfApplicable(connectedComponent) {\n    let componentType = this.authoringGetConnectedComponentType(connectedComponent);\n    if (componentType == 'ConceptMap' ||\n        componentType == 'Draw' ||\n        componentType == 'Embedded' ||\n        componentType == 'Graph' ||\n        componentType == 'Table') {\n      connectedComponent.importWorkAsBackground = true;\n    } else {\n      delete connectedComponent.importWorkAsBackground;\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The student clicked the reset button so we will delete all the labels and\n   * reset the background if applicable.\n   */\n  resetButtonClicked() {\n    // confirm with the student that they want to delete the label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToReset'));\n\n    if (answer) {\n      let tempLabels = [];\n      for (let label of this.labels) {\n        tempLabels.push(label);\n      }\n\n      for (let tempLabel of tempLabels) {\n        this.deleteLabel(tempLabel);\n      }\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n\n      if (this.componentContent.labels != null) {\n        /*\n         * the student has not done any work and there are starter labels\n         * so we will populate the canvas with the starter labels\n         */\n        this.addLabelsToCanvas(this.componentContent.labels);\n      }\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      }\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (connectedComponent.importWorkAsBackground) {\n      // the checkbox is checked\n      connectedComponent.charactersPerLine = 100;\n      connectedComponent.spaceInbetweenLines = 40;\n      connectedComponent.fontSize = 16;\n    } else {\n      // the checkbox is not checked\n      delete connectedComponent.charactersPerLine;\n      delete connectedComponent.spaceInbetweenLines;\n      delete connectedComponent.fontSize;\n      delete connectedComponent.importWorkAsBackground;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the student data version for this controller.\n   * @param studentDataVersion The student data version.\n   */\n  setStudentDataVersion(studentDataVersion) {\n    this.studentDataVersion = studentDataVersion;\n  }\n\n  /**\n   * Get the student data version.\n   * @return The student data version.\n   */\n  getStudentDataVersion() {\n    return this.studentDataVersion;\n  }\n\n  /**\n   * Check if the student data version we are using matches the argument.\n   * @param studentDataVersion The studentDataVersion to compare.\n   * @return Whether the passed in studentDataVersion matches the\n   * studentDataVersion this controller is set to.\n   */\n  isStudentDataVersion(studentDataVersion) {\n    return this.getStudentDataVersion() == studentDataVersion;\n  }\n\n  /**\n   * Check if this component only has show work connected components.\n   * @return If this component has connected components and all of them are\n   * 'showWork', then return true. Otherwise return false.\n   */\n  onlyHasShowWorkConnectedComponents() {\n    let connectedComponents = this.componentContent.connectedComponents;\n    let showWorkConnectedComponentCount = 0;\n    if (connectedComponents != null) {\n      for (let connectedComponent of connectedComponents) {\n        if (connectedComponent.type == 'showWork') {\n          showWorkConnectedComponentCount += 1;\n        }\n      }\n      if (connectedComponents.length > 0 &&\n          connectedComponents.length == showWorkConnectedComponentCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nLabelController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'LabelService',\n  'NodeService',\n  'NotebookService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelController;\n"]}