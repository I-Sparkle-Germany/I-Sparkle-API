{"version":3,"sources":["labelController.es6"],"names":["LabelController","$injector","$q","$scope","$timeout","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","canCreateLabels","canDeleteLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","newLabelMessage","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","componentState","width","height","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$","empty","attr","css","append","setupCanvas","angular","labelController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","imageObject","getImageObject","initializeCanvas","disabled","createKeydownListener","importWorkNodeId","importWorkComponentId","importWork","labels","addLabelsToCanvas","setStudentWork","getBackgroundImage","setBackgroundImage","calculateDisabled","registerComponentController","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","length","label","pointX","pointY","textX","textY","color","createLabel","addLabelToCanvas","isLockAfterSubmit","getComponentId","objects","getObjects","object","type","get","labelJSONObject","getLabelJSONObjectFromCircle","push","circle","lineObject","line","textObject","xDiff","x2","x1","yDiff","y2","y1","backgroundColor","parseInt","createNewComponentState","getLabels","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","fabric","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","on","options","e","layerX","y","layerY","newLabel","target","left","top","set","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","activeObject","getActiveObject","removeLabelFromCanvas","textString","Circle","radius","originX","originY","hasControls","hasBorders","selectable","Line","fill","stroke","strokeWidth","IText","fontSize","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","toJson","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","message","isNotebookEnabled","$event","element","addNewItem","exitListener","$inject"],"mappings":"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","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $injector,\n        $q,\n        $scope,\n        $timeout,\n        ConfigService,\n        LabelService,\n        NodeService,\n        NotebookService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService,\n        UtilService\n    ) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the snip image button is shown or not\n        this.isSnipImageButtonVisible = true;\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the message to display when the student is in create label mode\n        this.newLabelMessage = 'Click on the image or ';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    this.canvasId = 'labelCanvas_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent_' + this.canvasId).empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent_' + this.canvasId).append(canvas);\n                        \n                        /*\n                         * clear the background so that setupCanvas() can \n                         * reapply the background\n                         */\n                        this.backgroundImage = null;\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.labelController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.labelController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.labelController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importWorkNodeId = this.componentContent.importWorkNodeId;\n            var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.labels != null) {\n                /*\n                 * the student has not done any work and there are starter labels\n                 * so we will populate the canvas with the starter labels\n                 */\n                this.addLabelsToCanvas(this.componentContent.labels);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.nodeController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            this.processLatestSubmit();\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        // get all the objects from the canvas\n        var objects = this.canvas.getObjects();\n\n        if (objects != null) {\n\n            // loop through all the objects\n            for (var x = 0; x < objects.length; x++) {\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the object type\n                    var type = object.get('type');\n\n                    if (type === 'circle') {\n                        /*\n                         * the object is a circle which contains all the data\n                         * for a label\n                         */\n\n                        // get the simple JSON object that represents the label\n                        var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                        if (labelJSONObject != null) {\n                            // add the object to our array of labels\n                            labels.push(labelJSONObject);\n                        }\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        //studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        this.canvasWidth = this.componentContent.width;\n        this.canvasHeight = this.componentContent.height;\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // set the height on the parent div so that a vertical scrollbar doesn't show up\n        $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, 'A new label', 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: 5,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: 20,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: false,\n            selectable: true\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = 'Enter text here';\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index) {\n\n        // delete the label from the array\n        this.authoringComponentContent.labels.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check whether we need to show the snip image button\n     * @return whether to show the snip image button\n     */\n    showSnipImageButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the labels by converting it to an image\n     * @param $event the click event\n     */\n    snipImage($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n}\n\nLabelController.$inject = [\n    '$injector',\n    '$q',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'LabelService',\n    'NodeService',\n    'NotebookService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelController;\n"]}