{"version":3,"sources":["labelController.es6"],"names":[],"mappings":"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","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $injector,\n        $scope,\n        $timeout,\n        LabelService,\n        NodeService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService\n    ) {\n\n        this.$injector = $injector;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the message to display when the student is in create label mode\n        this.newLabelMessage = 'Click on the image or ';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    this.canvasId = 'labelCanvas_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent').empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent').append(canvas);\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    this.backgroundImage = null;\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.labelController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.labelController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.labelController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importWorkNodeId = this.componentContent.importWorkNodeId;\n            var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.labels != null) {\n                /*\n                 * the student has not done any work and there are starter labels\n                 * so we will populate the canvas with the starter labels\n                 */\n                this.addLabelsToCanvas(this.componentContent.labels);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.registerComponentController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        // get all the objects from the canvas\n        var objects = this.canvas.getObjects();\n\n        if (objects != null) {\n\n            // loop through all the objects\n            for (var x = 0; x < objects.length; x++) {\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the object type\n                    var type = object.get('type');\n\n                    if (type === 'circle') {\n                        /*\n                         * the object is a circle which contains all the data\n                         * for a label\n                         */\n\n                        // get the simple JSON object that represents the label\n                        var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                        if (labelJSONObject != null) {\n                            // add the object to our array of labels\n                            labels.push(labelJSONObject);\n                        }\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        //studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        notebookItemId: notebookItem.id,\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // we're importing a StudentWorkNotebookItem\n            var studentWork = notebookItem.studentWork;\n\n            var componentType = studentWork.componentType;\n\n            if (componentType != null) {\n                var childService = this.$injector.get(componentType + 'Service');\n\n                if (childService != null) {\n                    var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                    if (studentWorkHTML != null) {\n                        this.studentResponse += studentWorkHTML;\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        this.canvasWidth = this.componentContent.width;\n        this.canvasHeight = this.componentContent.height;\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, 'A new label', 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: 5,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: 20,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: false,\n            selectable: true\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = 'Enter text here';\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index) {\n\n        // delete the label from the array\n        this.authoringComponentContent.labels.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n}\n\nLabelController.$inject = [\n    '$injector',\n    '$scope',\n    '$timeout',\n    'LabelService',\n    'NodeService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default LabelController;\n\n"]}