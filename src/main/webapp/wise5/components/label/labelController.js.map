{"version":3,"sources":["labelController.es6"],"names":["LabelController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","canEditLabels","canDeleteLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","isResetButtonVisible","enableCircles","fabric","Text","prototype","set","_getNonTransformedDimensions","Point","width","height","scalarAdd","padding","_calculateCurrentDimensions","util","transformPoint","_getTransformedDimensions","getViewportTransform","studentDataVersion","labels","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","componentState","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$","empty","attr","css","append","setupCanvas","angular","labelController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","initializeCanvas","disabled","createKeydownListener","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","addLabelsToCanvas","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","studentData","version","setStudentDataVersion","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","label","pointX","pointY","textX","textY","color","createLabel","addLabelToCanvas","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","objects","getObjects","object","labelJSONObject","getLabelJSONObjectFromText","push","circle","getLabelFromCircle","lineObject","line","textObject","get","isStudentDataVersion","xDiff","x2","x1","yDiff","y2","y1","left","top","textString","backgroundColor","parseInt","getLabelFromText","circleObject","createNewComponentState","getStudentDataVersion","getLabelData","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentAsset","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","on","options","activeObject","getActiveObject","selectedLabel","editLabelMode","e","layerX","y","layerY","newLabel","selectLabel","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","removeLabelFromCanvas","saveLabelButtonClicked","$apply","makeSureXIsWithinXMinMaxLimits","makeSureYIsWithinYMinMaxLimits","radius","pointSize","parseFloat","fontSize","Circle","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","wrappedTextString","labelWidth","wordWrap","IText","cursorWidth","editable","selectedLabelText","editLabelTextInputTop","offset","focus","wrappedText","setText","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","isNotebookEnabled","$event","addNewItem","exitListener","component","componentHasWork","importPreviousWork","discardActiveObject","deleteLabel","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","tags","tag","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedLabels","mergedBackgroundImage","concat","getConnectedComponentForComponentState","response","importWorkAsBackground","charactersPerLine","spaceInbetweenLines","createImageFromText","image","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","tempLabels","tempLabel","$inject"],"mappings":"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","file":"labelController.js","sourcesContent":["import html2canvas from 'html2canvas';\nimport Fabric from 'fabric';\n\nclass LabelController {\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      $window,\n      AnnotationService,\n      ConfigService,\n      LabelService,\n      NodeService,\n      NotebookService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$timeout = $timeout;\n    this.$window = $window;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.LabelService = LabelService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.OpenResponseService = OpenResponseService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether this component is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // whether the submit button is disabled\n    this.isSubmitButtonDisabled = false;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the new label button is shown or not\n    this.isNewLabelButtonVisible = true;\n\n    // whether the cancel button is shown or not\n    this.isCancelButtonVisible = false;\n\n    // whether the snip image button is shown or not\n    this.isSnipImageButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // whether the student can create new labels\n    this.canCreateLabels = true;\n\n    // whether the student can edit labels\n    this.canEditLabels = true;\n\n    // whether the student can delete labels\n    this.canDeleteLabels = true;\n\n    // whether the student is in the mode to create a new label\n    this.createLabelMode = false;\n\n    // a reference to the canvas\n    this.canvas = null;\n\n    // the canvas width\n    this.canvasWidth = 800;\n\n    // the canvas height\n    this.canvasHeight = 600;\n\n    // the z index of line elements\n    this.lineZIndex = 0;\n\n    // the z index of text elements\n    this.textZIndex = 1;\n\n    // the z index of circle elements\n    this.circleZIndex = 2;\n\n    // the canvas id\n    this.canvasId = 'c';\n\n    // the background image path\n    this.backgroundImage = null;\n\n    // whether to show the reset button\n    this.isResetButtonVisible = true;\n\n    this.enableCircles = true;\n\n    // modify Fabric so that Text elements can utilize padding\n    fabric.Text.prototype.set({\n      _getNonTransformedDimensions() { // Object dimensions\n        return new fabric.Point(this.width, this.height).scalarAdd(this.padding);\n      },\n      _calculateCurrentDimensions() { // Controls dimensions\n        return fabric.util.transformPoint(this._getTransformedDimensions(),\n            this.getViewportTransform(), true);\n      }\n    });\n\n    /*\n     * Student data version 1 is where the text x and y positioning is relative\n     * to the circle.\n     * Student data version 2 is where the text x and y positioning is absolute.\n     */\n    this.studentDataVersion = 2;\n\n    /*\n     * This will hold canvas label objects. A canvas label object contains a\n     * circle object, line object, and text object.\n     */\n    this.labels = [];\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Label'\n      },\n      {\n        type: 'OpenResponse'\n      }\n    ];\n\n    // get the current node and node id\n    var currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      this.nodeId = currentNode.id;\n    } else {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      this.canvasId = 'canvas_' + this.nodeId + '_' + this.componentId;\n\n      // get the component state from the scope\n      var componentState = this.$scope.componentState;\n\n      if (this.componentContent.canCreateLabels != null) {\n        this.canCreateLabels = this.componentContent.canCreateLabels;\n      }\n\n      if (this.componentContent.canEditLabels != null) {\n        this.canEditLabels = this.componentContent.canEditLabels;\n      }\n\n      if (this.componentContent.canDeleteLabels != null) {\n        this.canDeleteLabels = this.componentContent.canDeleteLabels;\n      }\n\n      if (this.componentContent.width != null) {\n        this.canvasWidth = this.componentContent.width;\n      }\n\n      if (this.componentContent.height != null) {\n        this.canvasHeight = this.componentContent.height;\n      }\n\n      if (this.componentContent.enableCircles != null) {\n        this.enableCircles = this.componentContent.enableCircles;\n      }\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        if (this.canCreateLabels) {\n          this.isNewLabelButtonVisible = true;\n        } else {\n          this.isNewLabelButtonVisible = false;\n        }\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isNewLabelButtonVisible = false;\n        this.isSnipImageButtonVisible = false;\n        this.canEditLabels = false;\n        this.canDeleteLabels = false;\n        this.isDisabled = true;\n\n        if (componentState != null) {\n          // create a unique id for the application label element using this component state\n          this.canvasId = 'labelCanvas_' + componentState.id;\n          if (this.mode === 'gradingRevision') {\n            this.canvasId = 'labelCanvas_gradingRevision_' + componentState.id;\n          }\n        }\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isNewLabelButtonVisible = false;\n        this.isSnipImageButtonVisible = false;\n        this.canEditLabels = false;\n        this.canDeleteLabels = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isNewLabelButtonVisible = false;\n        this.canEditLabels = false;\n        this.canDeleteLabels = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        if (this.componentContent.enableCircles == null) {\n          /*\n           * If this component was created before enableCircles was implemented,\n           * we will default it to true in the authoring so that the\n           * \"Enable Dots\" checkbox is checked.\n           */\n          this.authoringComponentContent.enableCircles = true;\n        }\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          // the canvas width\n          this.canvasWidth = 800;\n\n          // the canvas height\n          this.canvasHeight = 600;\n\n          this.submitCounter = 0;\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n          this.enableCircles = this.componentContent.enableCircles;\n\n          if (this.canvas != null) {\n\n            // clear the parent to remove the canvas\n            $('#canvasParent_' + this.canvasId).empty();\n\n            // create a new canvas\n            var canvas = $('<canvas/>');\n            canvas.attr('id', this.canvasId);\n            canvas.css('border', '1px solid black');\n\n            // add the new canvas\n            $('#canvasParent_' + this.canvasId).append(canvas);\n\n            /*\n             * clear the background so that setupCanvas() can\n             * reapply the background\n             */\n            this.backgroundImage = null;\n\n            // setup the new canvas\n            this.setupCanvas();\n          }\n\n          if (this.componentContent.canCreateLabels != null) {\n            this.canCreateLabels = this.componentContent.canCreateLabels;\n          }\n          if (this.componentContent.canEditLabels != null) {\n            this.canEditLabels = this.componentContent.canEditLabels;\n          }\n          if (this.componentContent.canDeleteLabels != null) {\n            this.canDeleteLabels = this.componentContent.canDeleteLabels;\n          }\n\n          if (this.canCreateLabels) {\n            this.isNewLabelButtonVisible = true;\n          } else {\n            this.isNewLabelButtonVisible = false;\n          }\n        }.bind(this), true);\n      }\n\n      this.$timeout(angular.bind(this, function() {\n        // wait for angular to completely render the html before we initialize the canvas\n\n        this.setupCanvas();\n      }));\n    }\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.labelController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.labelController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.labelController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.labelController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /*\n     * Listen for the requestImage event which is fired when something needs\n     * an image representation of the student data from a specific\n     * component.\n     */\n    this.$scope.$on('requestImage', (event, args) => {\n\n      // get the node id and component id from the args\n      var nodeId = args.nodeId;\n      var componentId = args.componentId;\n\n      // check if the image is being requested from this component\n      if (this.nodeId === nodeId && this.componentId === componentId) {\n\n        // obtain the image blob\n        var imageObject = this.getImageObject();\n\n        if (imageObject != null) {\n          var args = {};\n          args.nodeId = nodeId;\n          args.componentId = componentId;\n          args.imageObject = imageObject;\n\n          // fire an event that contains the image object\n          this.$scope.$emit('requestImageCallback', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    /**\n     * The student has changed the file input\n     * @param element the file input element\n     */\n    this.$scope.fileUploadChanged = function(element) {\n\n      // get the current background image if any\n      var backgroundImage = this.labelController.getBackgroundImage();\n\n      var overwrite = true;\n\n      if (backgroundImage != null && backgroundImage != '') {\n        /*\n         * there is an existing background image so we will ask the\n         * student if they want to change it\n         */\n        var answer = confirm(this.labelController.$translate('label.areYouSureYouWantToChangeTheBackgroundImage'));\n\n        if (answer) {\n          // the student wants to change the background image\n          overwrite = true;\n        } else {\n          // the student does not want to change the background image\n          overwrite = false;\n\n          /*\n           * clear the input file value otherwise it will show the\n           * name of the file they recently selected but decided not\n           * to use because they decided not to change the background\n           * image\n           */\n          element.value = null;\n        }\n      }\n\n      if (overwrite) {\n        // we will change the current background\n\n        // get the files from the file input element\n        var files = element.files;\n\n        if (files != null && files.length > 0) {\n\n          // upload the file to the studentuploads folder\n          this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\n\n            // make a referenced copy of the unreferenced asset\n            this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n\n              if (referencedAsset != null) {\n                // get the url of the referenced asset\n                var imageURL = referencedAsset.url;\n\n                if (imageURL != null && imageURL != '') {\n\n                  // set the referenced asset as the background image\n                  this.labelController.setBackgroundImage(imageURL);\n                  this.labelController.studentDataChanged();\n                }\n              }\n            });\n          });\n        }\n      }\n    }\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'background') {\n                // the target is the background image\n\n                // set the background file name\n                this.authoringComponentContent.backgroundImage = fileName;\n\n                // the authoring component content has changed so we will save the project\n                this.authoringViewComponentChanged();\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  setupCanvas() {\n    // initialize the canvas\n    var canvas = this.initializeCanvas();\n    this.canvas = canvas;\n\n    // get the component state from the scope\n    var componentState = this.$scope.componentState;\n\n    if (this.canDeleteLabels && !this.disabled) {\n      // create the key down listener to listen for the delete key\n      this.createKeydownListener();\n    }\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.LabelService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n\n        if (this.componentContent.labels != null) {\n          // populate the canvas with the starter labels\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      } else if (componentState == null) {\n        /*\n         * only import work if the student does not already have\n         * work for this component\n         */\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        } else if (this.componentContent.labels != null) {\n          /*\n           * the student has not done any work and there are starter labels\n           * so we will populate the canvas with the starter labels\n           */\n          this.addLabelsToCanvas(this.componentContent.labels);\n        }\n      }\n    } else if (this.mode === 'grading') {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    } else {\n      if (componentState == null && this.componentContent.labels != null) {\n        // populate the canvas with the starter labels\n        this.addLabelsToCanvas(this.componentContent.labels);\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n    }\n\n    // get the background image that may have been set by the student data\n    var backgroundImage = this.getBackgroundImage();\n\n    if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n      // get the background image from the component content if any\n      this.setBackgroundImage(this.componentContent.backgroundImage);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // check if we need to lock this component\n    this.calculateDisabled();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        if (studentData.version == null) {\n          this.setStudentDataVersion(1);\n        } else {\n          this.setStudentDataVersion(studentData.version);\n        }\n\n        // get the labels from the student data\n        var labels = studentData.labels;\n\n        // add the labels to the canvas\n        this.addLabelsToCanvas(labels);\n\n        // get the background image from the student data\n        var backgroundImage = studentData.backgroundImage;\n\n        if (backgroundImage != null) {\n          this.setBackgroundImage(backgroundImage);\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Add labels ot the canvas\n   * @param labels an array of objects that contain the values for a label\n   */\n  addLabelsToCanvas(labels) {\n    if (labels != null) {\n\n      // loop through all the labels\n      for (var x = 0; x < labels.length; x++) {\n\n        // get a label\n        var label = labels[x];\n\n        if (label != null) {\n\n          // get the values of the label\n          var pointX = label.pointX;\n          var pointY = label.pointY;\n          var textX = label.textX;\n          var textY = label.textY;\n          var text = label.text;\n          var color = label.color;\n\n          // create the label\n          var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n          // add the label to the canvas\n          this.addLabelToCanvas(this.canvas, label);\n        }\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n\n    //this.isSubmit = true;\n\n    // tell the parent node that this component wants to submit\n    //this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Called when the student clicks on the new label button to enter\n   * create label mode\n   */\n  newLabelButtonClicked() {\n    this.createLabelMode = true;\n    this.isCancelButtonVisible = true;\n  };\n\n  /**\n   * Called when the student clicks on the cancel button to exit\n   * create label mode\n   */\n  cancelButtonClicked() {\n    this.createLabelMode = false;\n    this.isCancelButtonVisible = false;\n  };\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Get the label data from the canvas.\n   * @returns An array of simple JSON objects that contain the label data.\n   */\n  getLabelData() {\n    var labels = [];\n\n    /*\n     * get all the circle objects from the canvas which each correspond to\n     * a label point\n     */\n    var objects = this.canvas.getObjects('i-text');\n\n    if (objects != null) {\n\n      // loop through all the circle objects\n      for (var x = 0; x < objects.length; x++) {\n\n        /*\n         * the object is a circle which contains all the data\n         * for a label\n         */\n        var object = objects[x];\n\n        if (object != null) {\n\n          // get the simple JSON object that represents the label\n          var labelJSONObject = this.getLabelJSONObjectFromText(object);\n\n          if (labelJSONObject != null) {\n            // add the object to our array of labels\n            labels.push(labelJSONObject);\n          }\n        }\n      }\n    }\n\n    return labels;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param circle a Fabric circle object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromCircle(circle) {\n    var labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    var label = this.getLabelFromCircle(circle);\n\n    // get the line associated with the circle\n    var lineObject = circle.line;\n\n    // get the text object associated with the circle\n    var textObject = circle.text;\n\n    // get the position of the circle\n    var pointX = circle.get('left');\n    var pointY = circle.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      var xDiff = lineObject.x2 - lineObject.x1;\n      var yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    var text = label.textString;\n    var color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = text;\n    labelJSONObject.color = color;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Get the simple JSON object that represents the label\n   * @param text a Fabric text object\n   * @returns a simple JSON object that represents the label\n   */\n  getLabelJSONObjectFromText(text) {\n    let labelJSONObject = {};\n\n    // get the label object that contains the circle, line, and text objects\n    let label = this.getLabelFromText(text);\n    let circleObject = label.circle;\n    let lineObject = label.line;\n    let textObject = label.text;\n\n    // get the position of the circle\n    let pointX = circleObject.get('left');\n    let pointY = circleObject.get('top');\n\n    // get the position of the text object\n    let textX = null;\n    let textY = null;\n    if (this.isStudentDataVersion(1)) {\n      /*\n       * get the offset of the end of the line (this is where the text object is\n       * also located)\n       */\n      let xDiff = lineObject.x2 - lineObject.x1;\n      let yDiff = lineObject.y2 - lineObject.y1;\n\n      // the text x and y position is relative to the circle\n      textX = xDiff;\n      textY = yDiff;\n    } else {\n      // the text x and y position is absolute\n      textX = textObject.left;\n      textY = textObject.top;\n    }\n\n    // get the text and background color of the text\n    let textString = label.textString;\n    let color = textObject.backgroundColor;\n\n    // set all the values into the object\n    labelJSONObject.pointX = parseInt(pointX);\n    labelJSONObject.pointY = parseInt(pointY);\n    labelJSONObject.textX = parseInt(textX);\n    labelJSONObject.textY = parseInt(textY);\n    labelJSONObject.text = textString;\n    labelJSONObject.color = color;\n\n    return labelJSONObject;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n    studentData.version = this.getStudentDataVersion();\n    studentData.labels = this.getLabelData();\n\n    var backgroundImage = this.getBackgroundImage();\n    if (backgroundImage != null) {\n      studentData.backgroundImage = backgroundImage;\n    }\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Label';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to show the new label button\n   * @returns whether to show the new label button\n   */\n  showNewLabelButton() {\n    return this.isNewLabelButtonVisible;\n  };\n\n  /**\n   * Check whether we need to show the cancel button\n   * @returns whether to show the cancel button\n   */\n  showCancelButton() {\n    return this.isCancelButtonVisible;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  };\n\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.LabelService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * Initialize the canvas\n   * @returns the canvas object\n   */\n  initializeCanvas() {\n\n    var canvas = null;\n\n    if (this.componentContent.width != null && this.componentContent.width != '') {\n      this.canvasWidth = this.componentContent.width;\n    }\n\n    if (this.componentContent.height != null && this.componentContent.height != '') {\n      this.canvasHeight = this.componentContent.height;\n    }\n\n    // get the canvas object from the html\n    if (this.isDisabled) {\n      // we will make the canvas uneditable\n      canvas = new fabric.StaticCanvas(this.canvasId);\n    } else {\n      // make the canvas editable\n      canvas = new fabric.Canvas(this.canvasId);\n    }\n\n    // disable selection of items\n    canvas.selection = false;\n\n    // change the cursor to a hand when it is hovering over an object\n    canvas.hoverCursor = 'pointer';\n\n    // set the width and height of the canvas\n    canvas.setWidth(this.canvasWidth);\n    canvas.setHeight(this.canvasHeight);\n\n    // set the height on the parent div so that a vertical scrollbar doesn't show up\n    $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n    // listen for the mouse down event\n    canvas.on('mouse:down', angular.bind(this, function(options) {\n\n      // get the object that was clicked on if any\n      var activeObject = this.canvas.getActiveObject();\n\n      if (activeObject == null) {\n        /*\n         * no objects in the canvas were clicked. the user clicked\n         * on a blank area of the canvas so we will unselect any label\n         * that was selected and turn off edit label mode\n         */\n        this.selectedLabel = null;\n        this.editLabelMode = false;\n      }\n\n      // check if the student is in create label mode\n      if (this.createLabelMode) {\n        /*\n         * the student is in create label mode so we will create a new label\n         * where they have clicked\n         */\n\n        // turn off create label mode and hide the cancel button\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n\n        var event = options.e;\n\n        if (event != null) {\n          // get the x and y position that the student clicked on\n          var x = event.layerX;\n          var y = event.layerY;\n\n          /*\n           * set the location of the text object to be down to the right\n           * of the position the student clicked on\n           */\n          let textX = null;\n          let textY = null;\n          if (this.enableCircles) {\n            // place the text to the bottom right of the circle\n            if (this.isStudentDataVersion(1)) {\n              // text is relatively positioned\n              textX = 100;\n              textY = 100;\n            } else {\n              // text is absolutely positioned\n              textX = x + 100;\n              textY = y + 100;\n            }\n          } else {\n            // circles are not enabled so we are only using the text\n            textX = x;\n            textY = y;\n          }\n\n          // create a new label\n          var newLabel = this.createLabel(x, y, textX, textY, this.$translate('label.aNewLabel'), 'blue');\n\n          // add the label to the canvas\n          this.addLabelToCanvas(this.canvas, newLabel);\n\n          /*\n           * make the new label selected so that the student can edit\n           * the text\n           */\n          this.selectLabel(newLabel);\n\n          // notify others that the student data has changed\n          this.studentDataChanged();\n        }\n      }\n    }));\n\n    // listen for the object moving event\n    canvas.on('object:moving', angular.bind(this, function(options) {\n      var target = options.target;\n\n      if (target != null) {\n\n        // get the type of the object that is moving\n        var type = target.get('type');\n\n        // get the position of the element\n        var left = target.get('left');\n        var top = target.get('top');\n\n        // limit the x position to the canvas\n        if (left < 0) {\n          target.set('left', 0);\n          left = 0;\n        } else if (left > this.canvasWidth) {\n          target.set('left', this.canvasWidth);\n          left = this.canvasWidth;\n        }\n\n        // limit the y position to the canvas\n        if (top < 0) {\n          target.set('top', 0);\n          top = 0;\n        } else if (top > this.canvasHeight) {\n          target.set('top', this.canvasHeight);\n          top = this.canvasHeight;\n        }\n\n        if (type === 'circle') {\n          /*\n           * the student is moving the point of the label so we need to update\n           * the endpoint of the line and the position of the text element.\n           * the endpoint of the line and the position of the text element should\n           * maintain the relative position to the point.\n           */\n\n          // get the line associated with the circle\n          var line = target.line;\n\n          var xDiff = 0;\n          var yDiff = 0;\n\n          if (line != null) {\n            // calculate the relative offset of the end of the line\n            xDiff = line.x2 - line.x1;\n            yDiff = line.y2 - line.y1;\n\n            if (this.isStudentDataVersion(1)) {\n              // set the new position of the two endpoints of the line\n              line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n            } else {\n              // set the new position of the circle endpoint of the line\n              line.set({x1: left, y1: top});\n            }\n\n            // remove and add the line to refresh the element in the canvas\n            canvas.remove(line);\n            canvas.add(line);\n\n            // set the z index so it will be below the circle and text elements\n            canvas.moveTo(line, this.lineZIndex);\n          }\n\n          // get the text element\n          var text = target.text;\n\n          if (text != null) {\n            if (this.isStudentDataVersion(1)) {\n              /*\n               * In the old student data version the text position is relative\n               * to the circle so we need to move the text along with the circle.\n               */\n\n              // set the new position of the text element\n              text.set({left: left + xDiff, top: top + yDiff});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(text);\n              canvas.add(text);\n\n              // set the z index so it will be above line elements and below circle elements\n              canvas.moveTo(text, this.textZIndex);\n            }\n          }\n        } else if (type === 'i-text') {\n          if (this.enableCircles) {\n            /*\n             * the student is moving the text of the label so we need to update\n             * the endpoint of the line. the endpoint of the line should be in\n             * the same position as the text element.\n             */\n            var line = target.line;\n            if (line != null) {\n              // set the new position of the text element\n              line.set({x2: left, y2: top});\n\n              // remove and add the line to refresh the element in the canvas\n              canvas.remove(line);\n              canvas.add(line);\n\n              // set the z index so it will be below the circle and text elements\n              canvas.moveTo(line, this.lineZIndex);\n            }\n          } else {\n            /*\n             * Circles are not enabled so we are only showing the text. We will\n             * set the circle position to be the same as the text position.\n             */\n            let circle = target.circle;\n            let line = target.line;\n            circle.set({left: left, top: top});\n            line.set({x1: left, y1: top, x2: left, y2: top});\n          }\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n\n        // notify others that the student data has changed\n        this.studentDataChanged();\n      }\n    }));\n\n    // listen for the text changed event\n    canvas.on('text:changed', angular.bind(this, function(options) {\n      var target = options.target;\n      if (target != null) {\n        var type = target.get('type');\n        if (type === 'i-text') {\n          // notify others that the student data has changed\n          this.studentDataChanged();\n        }\n      }\n    }));\n\n    return canvas;\n  };\n\n  /**\n   * Set the background image\n   * @param backgroundImagePath the url path to an image\n   */\n  setBackgroundImage(backgroundImagePath) {\n    if (backgroundImagePath != null) {\n      this.backgroundImage = backgroundImagePath;\n      this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n    }\n  };\n\n  /**\n   * Get the background image\n   * @returns the background image path\n   */\n  getBackgroundImage() {\n    return this.backgroundImage;\n  };\n\n  /**\n   * Create the keydown listener that we will use for deleting labels\n   */\n  createKeydownListener() {\n    window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n  };\n\n  /**\n   * The callback handler for the keydown event\n   * @param e the event\n   */\n  keyPressed(e) {\n\n    // get the key code of the key that was pressed\n    var keyCode = e.keyCode;\n\n    // 8 is backspace and 46 is delete\n    if (keyCode === 8 || keyCode === 46) {\n\n      // get the active object\n      var activeObject = this.canvas.getActiveObject();\n\n      if (activeObject != null) {\n\n        // make sure the active object is a circle which represents the label\n        if (activeObject.get('type') === 'circle') {\n          let label = this.getLabelFromCircle(activeObject);\n\n          // remove the label from the canvas\n          this.removeLabelFromCanvas(this.canvas, label);\n\n          // notify others that the student data has changed\n          this.studentDataChanged();\n        }\n      }\n    } else if (keyCode === 13) {\n      // the enter key was pressed\n      if (this.selectedLabel != null) {\n        /*\n         * There is a selected label so we will treat the enter keypress as\n         * the intention of submitting any changes to the label text.\n         */\n        this.saveLabelButtonClicked();\n        this.$scope.$apply();\n      }\n    }\n  };\n\n  /**\n   * Get the label object given the canvas circle object.\n   * @param circle A canvas circle object.\n   * @return A label object.\n   */\n  getLabelFromCircle(circle) {\n    for (let label of this.labels) {\n      if (circle == label.circle) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the label object given the canvas text object.\n   * @param text A canvas text object.\n   * @return A label object.\n   */\n  getLabelFromText(text) {\n    for (let label of this.labels) {\n      if (text == label.text) {\n        return label;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create a label object. The label object is represented by a circle\n   * element (the point), a line element, and a text element. The circle\n   * element will contain a reference to the line and text elements. The\n   * text element will contain a reference to the line element.\n   * @param pointX the x position of the point (circle)\n   * @param pointY the y position of the point (circle)\n   * @param textX the x position of the text relative to the point (circle)\n   * @param textY the y position of the text relative to the point (circle)\n   * @param textString the text of the label\n   * @param color the background color of the label\n   * @returns an object containing a circle, line, and text\n   */\n  createLabel(pointX, pointY, textX, textY, textString, color) {\n    let label = {};\n\n    // get the position of the point\n    let x1 = pointX;\n    let y1 = pointY;\n    let x2 = null;\n    let y2 = null;\n\n    if (this.isStudentDataVersion(1)) {\n      // get the absolute position of the text\n      x2 = pointX + textX;\n      y2 = pointY + textY;\n    } else {\n      x2 = textX;\n      y2 = textY;\n    }\n\n    /*\n     * Make sure all the positions are within the bounds of the canvas. If there\n     * are any positions that are outside the bounds, we will change the\n     * position to be within the bounds.\n     */\n    x1 = this.makeSureXIsWithinXMinMaxLimits(x1);\n    y1 = this.makeSureYIsWithinYMinMaxLimits(y1);\n    x2 = this.makeSureXIsWithinXMinMaxLimits(x2);\n    y2 = this.makeSureYIsWithinYMinMaxLimits(y2);\n\n    if (color == null) {\n      // the default background color for text elements will be blue\n      color = 'blue';\n    }\n\n    let radius = 5;\n    if (this.componentContent.pointSize != null &&\n        this.componentContent.pointSize != '') {\n      radius = parseFloat(this.componentContent.pointSize);\n    }\n\n    let fontSize = 20;\n    if (this.componentContent.fontSize != null &&\n        this.componentContent.fontSize != '') {\n      fontSize = parseFloat(this.componentContent.fontSize);\n    }\n\n    // create a circle element\n    var circle = new fabric.Circle({\n      radius: radius,\n      left: x1,\n      top: y1,\n      originX: 'center',\n      originY: 'center',\n      hasControls: false,\n      borderColor: 'red',\n      hasBorders: true,\n      selectable: true\n    });\n\n    // create a line element\n    var line = new fabric.Line([x1, y1, x2, y2], {\n      fill: 'black',\n      stroke: 'black',\n      strokeWidth: 3,\n      selectable: false\n    });\n\n    // wrap the text if necessary\n    let wrappedTextString = textString;\n    if (this.componentContent.labelWidth) {\n      wrappedTextString = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // create an editable text element\n    var text = new fabric.IText(wrappedTextString, {\n      left: x2,\n      top: y2,\n      originX: 'center',\n      originY: 'center',\n      fontSize: fontSize,\n      fill: 'white',\n      backgroundColor: color,\n      width: 100,\n      hasControls: false,\n      hasBorders: true,\n      borderColor: 'red',\n      selectable: true,\n      cursorWidth: 0,\n      editable: false,\n      padding: 16\n    });\n\n    // give the circle a reference to the line and text elements\n    circle.line = line;\n    circle.text = text;\n\n    // give the text element a reference to the line and circle elements\n    text.line = line;\n    text.circle = circle;\n\n    // add the circle, line, and text elements to the label object\n    label.circle = circle;\n    label.line = line;\n    label.text = text;\n    label.textString = textString;\n\n    return label;\n  };\n\n  /**\n   * Make sure the x coordinate is within the bounds of the canvas.\n   * @param x The x coordinate.\n   * @return The x coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    // make sure the x is not to the left of the left edge\n    if (x < 0) {\n      x = 0;\n    }\n    // make sure the x is not to the right of the right edge\n    if (x > this.canvasWidth) {\n      x = this.canvasWidth;\n    }\n    return x;\n  }\n\n  /**\n   * Make sure the y coordinate is within the bounds of the canvas.\n   * @param y The y coordinate.\n   * @return The y coordinate that may have been modified to be within the\n   * bounds.\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    // make sure the y is not above the top edge\n    if (y < 0) {\n      y = 0;\n    }\n    // make sure the y is not below the bottom edge\n    if (y > this.canvasHeight) {\n      y = this.canvasHeight;\n    }\n    return y;\n  }\n\n  /**\n   * Add a label to canvas\n   * @param canvas the canvas\n   * @param label an object that contains a Fabric circle, Fabric line,\n   * and Fabric itext elements\n   */\n  addLabelToCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n\n        if (this.enableCircles) {\n          // add the elements to the canvas\n          canvas.add(circle, line, text);\n\n          // set the z indexes for the elements\n          canvas.moveTo(line, this.lineZIndex);\n          canvas.moveTo(text, this.textZIndex);\n          canvas.moveTo(circle, this.circleZIndex);\n        } else {\n          // add the text element to the canvas\n          canvas.add(text);\n          canvas.moveTo(text, this.textZIndex);\n        }\n\n        // refresh the canvas\n        canvas.renderAll();\n\n        if (this.enableCircles) {\n          circle.on('selected', () => {\n            /*\n             * the circle was clicked so we will make the associated\n             * label selected\n             */\n            this.selectLabel(label);\n          });\n        }\n\n        text.on('selected', () => {\n          /*\n           * the text was clicked so we will make the associated\n           * label selected\n           */\n          this.selectLabel(label);\n        });\n\n        this.labels.push(label);\n      }\n    }\n  };\n\n  /**\n   * Make the label selected which means we will show the UI elements to\n   * allow the text to be edited and the label to deleted.\n   * @param label the label object\n   */\n  selectLabel(label) {\n    if (this.canEditLabels) {\n      // create a reference to the selected label\n      this.selectedLabel = label;\n\n      /*\n       * remember the label text before the student changes it in case the\n       * student wants to cancel any changes they make\n       */\n      this.selectedLabelText = label.text.text;\n\n      // turn on edit label mode\n      this.editLabelMode = true;\n\n      /*\n       * Give focus to the label text input element so the student can immediately\n       * start typing.\n       */\n      this.$timeout(() => {\n        /*\n         * Get the y position of the top of the edit label text input. If this\n         * value is negative, it means the element is above the currently\n         * viewable area and can not be seen. If the value is positive, it means\n         * the element is currently in the viewable area and can be seen.\n         */\n        var editLabelTextInputTop = $('#editLabelTextInput').offset().top;\n\n        /*\n         * Check if the edit label text input is viewable. We want to make sure\n         * the input is in view. If the input is not in view and we give it\n         * focus, it will have the undesirable effect of scrolling the view up\n         * so that the input comes into view. We don't want it to scroll because\n         * it's jarring when the student is trying to select a label in the\n         * canvas.\n         */\n        if (editLabelTextInputTop > 100) {\n          // the input is in view so we will give it focus.\n          angular.element('#editLabelTextInput').focus();\n        }\n      });\n\n      /*\n       * force angular to refresh, otherwise angular will wait until the\n       * user generates another input (such as moving the mouse) before\n       * refreshing\n       */\n      this.$scope.$apply();\n    }\n  }\n\n  /**\n   * The student has changed the label text on the selected label\n   * @param label The label that has changed.\n   * @param textObject The label's canvas text object.\n   * @param textString The text string.\n   */\n  selectedLabelTextChanged(label, textObject, textString) {\n\n    // save the text string into the label\n    label.textString = textString;\n\n    // wrap the text if necessary\n    let wrappedText = textString;\n    if (this.componentContent.labelWidth != null &&\n        this.componentContent.labelWidth != '') {\n      wrappedText = this.UtilService.wordWrap(textString, this.componentContent.labelWidth);\n    }\n\n    // set the wrapped text into the text object\n    textObject.setText(wrappedText);\n\n    // notify the controller that the student data has changed\n    this.studentDataChanged();\n\n    // refresh the canvas\n    this.canvas.renderAll();\n  }\n\n  /**\n   * Remove a label from the canvas.\n   * @param canvas The canvas.\n   * @param label A label object that contains a circle object, line object, and\n   * text object.\n   */\n  removeLabelFromCanvas(canvas, label) {\n\n    if (canvas != null && label != null) {\n\n      // get the circle, line, and text elements\n      var circle = label.circle;\n      var line = label.line;\n      var text = label.text;\n\n      if (circle != null && line != null && text != null) {\n        // remove the elements from the canvas\n        canvas.remove(circle);\n        canvas.remove(line);\n        canvas.remove(text);\n\n        this.labels.splice(this.labels.indexOf(label), 1);\n\n        // refresh the canvas\n        canvas.renderAll();\n      }\n    }\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the component content\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Add a label in the authoring view\n   */\n  authoringAddLabelClicked() {\n\n    // create the new label\n    var newLabel = {};\n    newLabel.text = this.$translate('label.enterTextHere');\n    newLabel.color = 'blue';\n    newLabel.pointX = 100;\n    newLabel.pointY = 100;\n    newLabel.textX = 200;\n    newLabel.textY = 200;\n\n    // add the label to the array of labels\n    this.authoringComponentContent.labels.push(newLabel);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a label in the authoring view\n   * @param index the index of the label in the labels array\n   */\n  authoringDeleteLabelClicked(index, label) {\n\n    // get the label text\n    var selectedLabelText = label.textString;\n\n    // ask the author if they are sure they want to delete this label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n    if (answer) {\n      // the author answered yes to delete the label\n\n      // delete the label from the array\n      this.authoringComponentContent.labels.splice(index, 1);\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the image object representation of the student data\n   * @returns an image object\n   */\n  getImageObject() {\n    var pngFile = null;\n\n    if (this.canvas != null) {\n\n      // get the image as a base64 string\n      var img_b64 = this.canvas.toDataURL('image/png');\n\n      // get the image object\n      pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n    }\n\n    return pngFile;\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Check whether we need to show the snip image button\n   * @return whether to show the snip image button\n   */\n  showSnipImageButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Snip the labels by converting it to an image\n   * @param $event the click event\n   */\n  snipImage($event) {\n\n    // get the canvas element\n    var canvas = angular.element('#' + this.canvasId);\n\n    if (canvas != null && canvas.length > 0) {\n\n      // get the top canvas\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      var img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // create a notebook item with the image populated into it\n      this.NotebookService.addNewItem($event, imageObject);\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The student clicked the save button in the edit label mode\n   */\n  saveLabelButtonClicked() {\n    if (this.selectedLabel != null) {\n      /*\n       * we do not need to perform any saving of the text since it has\n       * already been handled by the ng-model for the label text\n       */\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n    }\n  }\n\n  /**\n   * The student clicked the cancel button in the edit label mode\n   */\n  cancelLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the label text before the student recently made changes to it\n      var selectedLabelText = this.selectedLabelText;\n\n      // revert the label text to what it was before\n      this.selectedLabel.text.setText(selectedLabelText);\n\n      // clear the label text holder\n      this.selectedLabelText = null;\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n\n      // notify others that the student data has changed\n      this.studentDataChanged();\n\n      // refresh the canvas\n      this.canvas.renderAll();\n    }\n  }\n\n  /**\n   * The student clicked the delete button in the edit label mode\n   */\n  deleteLabelButtonClicked() {\n\n    if (this.selectedLabel != null) {\n\n      // get the text from the label we are going to delete\n      var selectedLabelText = this.selectedLabel.textString;\n\n      // confirm with the student that they want to delete the label\n      var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n      if (answer) {\n        // the student is sure they want to delete the label\n        this.deleteLabel(this.selectedLabel);\n\n        /*\n         * remove the reference to the selected label since it will no\n         * longer be selected\n         */\n        this.selectedLabel = null;\n\n        // turn off edit label mode\n        this.editLabelMode = false;\n\n        // make the canvas object no longer the active object\n        this.canvas.discardActiveObject();\n\n        // notify others that the student data has changed\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a label from the canvas.\n   * @param label A label object.\n   */\n  deleteLabel(label) {\n    // remove the label from the canvas\n    this.removeLabelFromCanvas(this.canvas, label);\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n\n  /**\n   * Show the asset popup to allow the author to choose the background image\n   */\n  chooseBackgroundImage() {\n\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'background';\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Save the starter labels from the component authoring preview\n   */\n  saveStarterLabels() {\n\n    // ask the author if they are sure they want to save the starter labels\n    var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to save the starter labels\n\n      // get the labels in the component authoring preview\n      var labels = this.getLabelData();\n\n      /*\n       * make a copy of the labels so we don't run into any referencing issues\n       * later\n       */\n      var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\n\n      // sort the labels alphabetically by their text\n      starterLabels.sort(this.labelTextComparator);\n\n      // set the labels\n      this.authoringComponentContent.labels = starterLabels;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * A comparator used to sort labels alphabetically\n   * It should be used like labels.sort(this.labelTextComparator);\n   * @param labelA a label object\n   * @param labelB a label object\n   * @return -1 if labelA comes before labelB\n   * 1 if labelB comes after labelB\n   * 0 of the labels are equal\n   */\n  labelTextComparator(labelA, labelB) {\n\n    if (labelA.text < labelB.text) {\n      // the labelA text comes before the labelB text alphabetically\n      return -1;\n    } else if (labelA.text > labelB.text) {\n      // the labelA text comes after the labelB text alphabetically\n      return 1;\n    } else {\n      /*\n       * the labelA text is the same as the labelB text so we will\n       * try to break the tie by looking at the color\n       */\n\n      if (labelA.color < labelB.color) {\n        // the labelA color text comes before the labelB color text alphabetically\n        return -1;\n      } else if (labelA.color > labelB.color) {\n        // the labelA color text comes after the labelB color text alphabetically\n        return 1;\n      } else {\n        /*\n         * the labelA color text is the same as the labelB color text so\n         * we will try to break the tie by looking at the pointX\n         */\n\n        if (labelA.pointX < labelB.pointX) {\n          // the labelA pointX is smaller than the labelB pointX\n          return -1;\n        } else if (labelA.pointX > labelB.pointX) {\n          // the labelA pointX is larger than the labelB pointX\n          return 1;\n        } else {\n          /*\n           * the labelA pointX is the same as the labelB pointX so\n           * we will try to break the tie by looking at the pointY\n           */\n\n          if (labelA.pointY < labelB.pointY) {\n            // the labelA pointY is smaller than the labelB pointY\n            return -1;\n          } else if (labelA.pointY > labelB.pointY) {\n            // the labelA pointY is larger than the labelB pointY\n            return 1;\n          } else {\n            /*\n             * all the label values are the same between labelA\n             * and labelB\n             */\n            return 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete all the starter labels\n   */\n  deleteStarterLabels() {\n\n    /*\n     * ask the author if they are sure they want to delete all the starter\n     * labels\n     */\n    var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      // clear the labels array\n      this.authoringComponentContent.labels = [];\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Open a webpage in a new tab that shows a lot of the javascript colors\n   */\n  openColorViewer() {\n\n    // open the webpage in a new tab\n    this.$window.open('http://www.javascripter.net/faq/colornam.htm');\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      if (this.componentContent.backgroundImage != null &&\n          this.componentContent.backgroundImage != '') {\n        /*\n         * this component has a background so we will use it instead of\n         * the background from the imported student work\n         */\n        this.setBackgroundImage(this.componentContent.backgroundImage);\n      }\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n      let mergedLabels = [];\n      let mergedBackgroundImage = null;\n      let studentDataVersion = 2;\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          if (componentState.componentType == 'Label') {\n            let studentData = componentState.studentData;\n            if (studentData != null) {\n              if (studentData.version != null) {\n                studentDataVersion = studentData.version;\n              }\n              let labels = studentData.labels;\n              let backgroundImage = studentData.backgroundImage;\n              if (labels != null && labels != '') {\n                mergedLabels = mergedLabels.concat(labels);\n              }\n              if (backgroundImage != null && backgroundImage != '') {\n                mergedBackgroundImage = backgroundImage;\n              }\n            }\n          } else if (componentState.componentType == 'OpenResponse') {\n            let connectedComponent = this.getConnectedComponentForComponentState(componentState);\n            if (connectedComponent != null) {\n              let studentData = componentState.studentData;\n              let response = studentData.response;\n              if (connectedComponent.importWorkAsBackground) {\n                let charactersPerLine = connectedComponent.charactersPerLine;\n                let spaceInbetweenLines = connectedComponent.spaceInbetweenLines;\n                let fontSize = connectedComponent.fontSize;\n\n                // create an image from the concept map data\n                this.LabelService.createImageFromText(response, null, null,\n                    charactersPerLine, null, spaceInbetweenLines, fontSize).then((image) => {\n                  // set the image as the background\n                  this.setBackgroundImage(image);\n\n                  // make the work dirty so that it gets saved\n                  this.studentDataChanged();\n                });\n              }\n            }\n          }\n        }\n      }\n\n      if (mergedLabels != null) {\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.labels = mergedLabels;\n        mergedComponentState.studentData.backgroundImage = mergedBackgroundImage;\n      }\n      if (studentDataVersion != null) {\n        mergedComponentState.studentData.version = studentDataVersion;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Get the connected component associated with the component state.\n   * @param componentState A component state object that was obtained from a\n   * connected component.\n   * @return A connected component object.\n   */\n  getConnectedComponentForComponentState(componentState) {\n    for (let connectedComponent of this.componentContent.connectedComponents) {\n      if (componentState.nodeId == connectedComponent.nodeId &&\n          componentState.componentId == connectedComponent.componentId) {\n        return connectedComponent;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The student clicked the reset button so we will delete all the labels and\n   * reset the background if applicable.\n   */\n  resetButtonClicked() {\n    // confirm with the student that they want to delete the label\n    var answer = confirm(this.$translate('label.areYouSureYouWantToReset'));\n\n    if (answer) {\n      let tempLabels = [];\n      for (let label of this.labels) {\n        tempLabels.push(label);\n      }\n\n      for (let tempLabel of tempLabels) {\n        this.deleteLabel(tempLabel);\n      }\n\n      /*\n       * remove the reference to the selected label since it will no\n       * longer be selected\n       */\n      this.selectedLabel = null;\n\n      // turn off edit label mode\n      this.editLabelMode = false;\n\n      // make the canvas object no longer the active object\n      this.canvas.discardActiveObject();\n\n      if (this.componentContent.labels != null) {\n        /*\n         * the student has not done any work and there are starter labels\n         * so we will populate the canvas with the starter labels\n         */\n        this.addLabelsToCanvas(this.componentContent.labels);\n      }\n\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      }\n\n      // notify others that the student data has changed\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * The \"Import Work As Background\" checkbox was clicked.\n   * @param connectedComponent The connected component associated with the\n   * checkbox.\n   */\n  authoringImportWorkAsBackgroundClicked(connectedComponent) {\n    if (connectedComponent.importWorkAsBackground) {\n      // the checkbox is checked\n      connectedComponent.charactersPerLine = 100;\n      connectedComponent.spaceInbetweenLines = 40;\n      connectedComponent.fontSize = 16;\n    } else {\n      // the checkbox is not checked\n      delete connectedComponent.charactersPerLine;\n      delete connectedComponent.spaceInbetweenLines;\n      delete connectedComponent.fontSize;\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the student data version for this controller.\n   * @param studentDataVersion The student data version.\n   */\n  setStudentDataVersion(studentDataVersion) {\n    this.studentDataVersion = studentDataVersion;\n  }\n\n  /**\n   * Get the student data version.\n   * @return The student data version.\n   */\n  getStudentDataVersion() {\n    return this.studentDataVersion;\n  }\n\n  /**\n   * Check if the student data version we are using matches the argument.\n   * @param studentDataVersion The studentDataVersion to compare.\n   * @return Whether the passed in studentDataVersion matches the\n   * studentDataVersion this controller is set to.\n   */\n  isStudentDataVersion(studentDataVersion) {\n    return this.getStudentDataVersion() == studentDataVersion;\n  }\n}\n\nLabelController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  '$window',\n  'AnnotationService',\n  'ConfigService',\n  'LabelService',\n  'NodeService',\n  'NotebookService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelController;\n"]}