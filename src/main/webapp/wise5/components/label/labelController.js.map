{"version":3,"sources":["labelController.es6"],"names":["LabelController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","$timeout","$window","AnnotationService","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","canDeleteLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","componentState","width","height","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$","empty","attr","css","append","setupCanvas","angular","labelController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","imageObject","getImageObject","annotation","annotationNodeId","annotationComponentId","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","authoringViewComponentChanged","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","initializeCanvas","disabled","createKeydownListener","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","labels","addLabelsToCanvas","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","label","pointX","pointY","textX","textY","color","createLabel","addLabelToCanvas","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","objects","getObjects","object","labelJSONObject","getLabelJSONObjectFromCircle","push","circle","lineObject","line","textObject","get","xDiff","x2","x1","yDiff","y2","y1","backgroundColor","parseInt","createNewComponentState","getLabels","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentAsset","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","fabric","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","on","options","activeObject","getActiveObject","selectedLabel","editLabelMode","e","layerX","y","layerY","newLabel","selectLabel","left","top","set","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","removeLabelFromCanvas","textString","radius","pointSize","parseFloat","fontSize","Circle","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","IText","cursorWidth","editable","selectedLabelText","$apply","setText","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","isNotebookEnabled","$event","addNewItem","exitListener","component","componentHasWork","importPreviousWork","discardActiveObject","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","$broadcast","newConnectedComponent","updateOn","connectedComponents","show","setShowSubmitButtonValue","starterLabels","makeCopyOfJSONObject","sort","labelTextComparator","labelA","labelB","open","tags","tag","c","connectedComponent","mergedComponentState","createMergedComponentState","mergedLabels","mergedBackgroundImage","concat","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","$inject"],"mappings":";;;;;;;;;;IAAMA,e;AACF,6BACIC,OADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,EAJJ,EAKIC,UALJ,EAMIC,MANJ,EAOIC,QAPJ,EAQIC,OARJ,EASIC,iBATJ,EAUIC,aAVJ,EAWIC,YAXJ,EAYIC,WAZJ,EAaIC,eAbJ,EAcIC,mBAdJ,EAeIC,cAfJ,EAgBIC,mBAhBJ,EAiBIC,kBAjBJ,EAkBIC,WAlBJ,EAmBE;AAAA;;AAAA;;AAEE,aAAKjB,OAAL,GAAeA,OAAf;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,SAAL,GAAiB,KAAKJ,cAAL,CAAoBI,SAArC;;AAEA,aAAKC,UAAL,GAAkB,KAAKnB,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKoB,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAKC,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,WAAL,GAAmB,EAAnB;;AAEA;AACA,aAAKC,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAKC,OAAL,GAAe,KAAf;;AAEA;AACA,aAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAKC,WAAL,GAAmB;AACfC,kBAAM,EADS;AAEfC,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAKC,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAKC,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,sBAAL,GAA8B,KAA9B;;AAEA;AACA,aAAKC,aAAL,GAAqB,CAArB;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKC,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAKC,uBAAL,GAA+B,IAA/B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,wBAAL,GAAgC,IAAhC;;AAEA;AACA,aAAKC,cAAL,GAAsB,KAAKjC,eAAL,CAAqBkC,iBAArB,EAAtB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,eAAL,GAAuB,KAAvB;;AAEA;AACA,aAAKC,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,GAAnB;;AAEA;AACA,aAAKC,YAAL,GAAoB,GAApB;;AAEA;AACA,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAKC,YAAL,GAAoB,CAApB;;AAEA;AACA,aAAKC,QAAL,GAAgB,GAAhB;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,iCAAL,GAAyC,CACrC;AACIC,mBAAO,QADX;AAEI9B,kBAAM;AAFV,SADqC,EAKrC;AACI8B,mBAAO,QADX;AAEI9B,kBAAM;AAFV,SALqC,CAAzC;;AAWA;AACA,aAAK+B,8BAAL,GAAsC,CAClC;AACIC,kBAAM;AADV,SADkC,CAAtC;;AAMA;AACA,YAAIC,cAAc,KAAK9C,kBAAL,CAAwB+C,cAAxB,EAAlB;AACA,YAAID,eAAe,IAAnB,EAAyB;AACrB,iBAAK1C,MAAL,GAAc0C,YAAYE,EAA1B;AACH,SAFD,MAEO;AACH,iBAAK5C,MAAL,GAAc,KAAKf,MAAL,CAAYe,MAA1B;AACH;;AAED;AACA,aAAKE,gBAAL,GAAwB,KAAKjB,MAAL,CAAYiB,gBAApC;;AAEA;AACA,aAAKC,yBAAL,GAAiC,KAAKlB,MAAL,CAAYkB,yBAA7C;AACA,aAAK0C,mCAAL,GAA2C,KAAK5D,MAAL,CAAY4D,mCAAvD;;AAEA;;;;AAIA,aAAKC,wBAAL,GAAgC,KAAK7D,MAAL,CAAY6D,wBAA5C;;AAEA;AACA,aAAKC,IAAL,GAAY,KAAK9D,MAAL,CAAY8D,IAAxB;;AAEA,aAAKC,WAAL,GAAmB,KAAK/D,MAAL,CAAY+D,WAA/B;AACA,aAAKC,kBAAL,GAA0B,KAAKhE,MAAL,CAAYgE,kBAAtC;;AAEA,YAAI,KAAK/C,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAKD,WAAL,GAAmB,KAAKC,gBAAL,CAAsB0C,EAAzC;;AAEA,iBAAKR,QAAL,GAAgB,YAAY,KAAKpC,MAAjB,GAA0B,GAA1B,GAAgC,KAAKC,WAArD;;AAEA;AACA,gBAAIiD,iBAAiB,KAAKjE,MAAL,CAAYiE,cAAjC;;AAEA,gBAAI,KAAKhD,gBAAL,CAAsByB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAKA,eAAL,GAAuB,KAAKzB,gBAAL,CAAsByB,eAA7C;AACH;;AAED,gBAAI,KAAKzB,gBAAL,CAAsB0B,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,qBAAKA,eAAL,GAAuB,KAAK1B,gBAAL,CAAsB0B,eAA7C;AACH;;AAED,gBAAI,KAAK1B,gBAAL,CAAsBiD,KAAtB,IAA+B,IAAnC,EAAyC;AACrC,qBAAKpB,WAAL,GAAmB,KAAK7B,gBAAL,CAAsBiD,KAAzC;AACH;;AAED,gBAAI,KAAKjD,gBAAL,CAAsBkD,MAAtB,IAAgC,IAApC,EAA0C;AACtC,qBAAKpB,YAAL,GAAoB,KAAK9B,gBAAL,CAAsBkD,MAA1C;AACH;;AAED,gBAAI,KAAKL,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAKjC,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBmD,cAAjD;AACA,qBAAKrC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBoD,gBAAnD;;AAEA,oBAAI,KAAK3B,eAAT,EAA0B;AACtB,yBAAKL,uBAAL,GAA+B,IAA/B;AACH,iBAFD,MAEO;AACH,yBAAKA,uBAAL,GAA+B,KAA/B;AACH;;AAED;AACA,qBAAKD,iBAAL,GAAyB,KAAKjC,iBAAL,CAAuBmE,6BAAvB,CAAqD,KAAKvD,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK+C,WAAzF,CAAzB;AACH,aAbD,MAaO,IAAI,KAAKD,IAAL,KAAc,SAAd,IAA2B,KAAKA,IAAL,KAAc,iBAA7C,EAAgE;AACnE,qBAAKhC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKE,wBAAL,GAAgC,KAAhC;AACA,qBAAKI,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;;AAEA,oBAAI6C,kBAAkB,IAAtB,EAA4B;AACxB;AACA,yBAAKd,QAAL,GAAgB,iBAAiBc,eAAeN,EAAhD;AACA,wBAAI,KAAKG,IAAL,KAAc,iBAAlB,EAAqC;AACjC,6BAAKX,QAAL,GAAgB,iCAAiCc,eAAeN,EAAhE;AACH;AACJ;;AAED;AACA,qBAAKvB,iBAAL,GAAyB,KAAKjC,iBAAL,CAAuBmE,6BAAvB,CAAqD,KAAKvD,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK+C,WAAzF,CAAzB;AACH,aAlBM,MAkBA,IAAI,KAAKD,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAKjC,eAAL,GAAuB,KAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKE,wBAAL,GAAgC,KAAhC;AACA,qBAAKI,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;AACH,aARM,MAQA,IAAI,KAAK0C,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAKjC,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKM,uBAAL,GAA+B,KAA/B;AACA,qBAAKM,eAAL,GAAuB,KAAvB;AACA,qBAAKvB,UAAL,GAAkB,IAAlB;AACH,aAPM,MAOA,IAAI,KAAK0C,IAAL,KAAc,WAAlB,EAA+B;AAClC,qBAAKhC,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBmD,cAAjD;AACA,qBAAKrC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBoD,gBAAnD;;AAEA;AACA,qBAAKE,kBAAL,GAA0B,sBAAsB,KAAKxD,MAA3B,GAAoC,GAApC,GAA0C,KAAKC,WAAzE;;AAEA;AACA,qBAAKwD,oBAAL,GAA4B,KAAKvD,gBAAL,CAAsBwD,MAAlD;;AAEA;AACA,oBAAIC,oBAAoB,KAAK5D,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;;;;AAIA,oBAAI6D,oBAAoB,KAAK/D,WAAL,CAAiBgE,uBAAjB,CAAyC,IAAzC,EAA+C,IAA/C,EAAqD,KAAK7D,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,QAApF,EAA8F0D,iBAA9F,CAAxB;;AAEA;;;;AAIA,qBAAKG,uBAAL,GAA+B;AAC3BC,6BAAS,CACL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADK,EAEL,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFK,EAGL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHK,EAIL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJK,EAKL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALK,EAML,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANK,EAOL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPK,EAQL,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARK,EASL,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATK,EAUL,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVK,CADkB;AAa3BX,4BAAQ,GAbmB;AAc3BY,wCAAoB,IAdO;AAe3BC,6BAAS;AACLC,2CAAmBN;AADd;AAfkB,iBAA/B;;AAoBA,qBAAKO,2BAAL;;AAEAlF,uBAAOmF,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAKjE,yBAAZ;AACH,iBAFa,CAEZkE,IAFY,CAEP,IAFO,CAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACvC,yBAAKrE,gBAAL,GAAwB,KAAKR,cAAL,CAAoB8E,gBAApB,CAAqCF,QAArC,CAAxB;;AAEA;AACA,yBAAKvC,WAAL,GAAmB,GAAnB;;AAEA;AACA,yBAAKC,YAAL,GAAoB,GAApB;;AAEA,yBAAKd,aAAL,GAAqB,CAArB;AACA,yBAAKH,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBmD,cAAjD;AACA,yBAAKrC,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBoD,gBAAnD;;AAEA,wBAAI,KAAKxB,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACA2C,0BAAE,mBAAmB,KAAKrC,QAA1B,EAAoCsC,KAApC;;AAEA;AACA,4BAAI5C,SAAS2C,EAAE,WAAF,CAAb;AACA3C,+BAAO6C,IAAP,CAAY,IAAZ,EAAkB,KAAKvC,QAAvB;AACAN,+BAAO8C,GAAP,CAAW,QAAX,EAAqB,iBAArB;;AAEA;AACAH,0BAAE,mBAAmB,KAAKrC,QAA1B,EAAoCyC,MAApC,CAA2C/C,MAA3C;;AAEA;;;;AAIA,6BAAKO,eAAL,GAAuB,IAAvB;;AAEA;AACA,6BAAKyC,WAAL;AACH;;AAED,wBAAI,KAAK5E,gBAAL,CAAsByB,eAAtB,IAAyC,IAA7C,EAAmD;AAC/C,6BAAKA,eAAL,GAAuB,KAAKzB,gBAAL,CAAsByB,eAA7C;AACH;;AAED,wBAAI,KAAKA,eAAT,EAA0B;AACtB,6BAAKL,uBAAL,GAA+B,IAA/B;AACH,qBAFD,MAEO;AACH,6BAAKA,uBAAL,GAA+B,KAA/B;AACH;AACJ,iBA7Ca,CA6CZ+C,IA7CY,CA6CP,IA7CO,CAFd,EA+Cc,IA/Cd;AAgDH;;AAED,iBAAKnF,QAAL,CAAc6F,QAAQV,IAAR,CAAa,IAAb,EAAmB,YAAW;AACxC;;AAEA,qBAAKS,WAAL;AACH,aAJa,CAAd;AAKH;;AAED;;;AAGA,aAAK7F,MAAL,CAAYqB,OAAZ,GAAsB,YAAW;AAC7B,mBAAO,KAAKrB,MAAL,CAAY+F,eAAZ,CAA4B1E,OAAnC;AACH,SAFqB,CAEpB+D,IAFoB,CAEf,IAFe,CAAtB;;AAIA;;;;;;;;AAQA,aAAKpF,MAAL,CAAYgG,iBAAZ,GAAgC,UAASrE,QAAT,EAAmB;AAC/C,gBAAIsE,WAAW,KAAKnG,EAAL,CAAQoG,KAAR,EAAf;AACA,gBAAIC,WAAW,KAAf;AACA,gBAAIC,SAAS,QAAb;;AAEA,gBAAIzE,QAAJ,EAAc;AACV,oBAAI,KAAK3B,MAAL,CAAY+F,eAAZ,CAA4BzE,aAAhC,EAA+C;AAC3C6E,+BAAW,IAAX;AACAC,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAKpG,MAAL,CAAY+F,eAAZ,CAA4B1E,OAAhC,EAAyC;AACrC8E,+BAAW,IAAX;AACAC,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAID,QAAJ,EAAc;AACV;AACA,qBAAKnG,MAAL,CAAY+F,eAAZ,CAA4BM,oBAA5B,CAAiDD,MAAjD,EAAyDE,IAAzD,CAA8D,UAACrC,cAAD,EAAoB;AAC9EgC,6BAASM,OAAT,CAAiBtC,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKAgC,yBAASM,OAAT;AACH;;AAED,mBAAON,SAASO,OAAhB;AACH,SAhC+B,CAgC9BpB,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAKpF,MAAL,CAAYyG,GAAZ,CAAgB,mBAAhB,EAAqCX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB;;AAE1E;AACA,gBAAI5F,SAAS4F,KAAK5F,MAAlB;;AAEA;AACA,gBAAI,KAAKA,MAAL,KAAgBA,MAApB,EAA4B;;AAExB;AACA,oBAAI6F,oBAAoB,kBAAxB;AACA,qBAAKC,MAAL,CAAYD,iBAAZ;AACH;AACJ,SAZoC,CAArC;;AAcA;;;;AAIA,aAAK5G,MAAL,CAAYyG,GAAZ,CAAgB,0BAAhB,EAA4CX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,gBAAI1C,iBAAiB0C,KAAKG,WAA1B;;AAEA;AACA,gBAAI7C,kBAAkB,KAAKlD,MAAL,KAAgBkD,eAAelD,MAAjD,IACG,KAAKC,WAAL,KAAqBiD,eAAejD,WAD3C,EACwD;;AAEpD;AACA,qBAAKK,OAAL,GAAe,KAAf;AACA,qBAAKrB,MAAL,CAAY+G,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAApC;;AAEA,oBAAI2F,aAAa/C,eAAe+C,UAAhC;AACA,oBAAIrF,WAAWsC,eAAetC,QAA9B;AACA,oBAAIsF,iBAAiBhD,eAAegD,cAApC;AACA,oBAAIC,iBAAiB,KAAK9G,aAAL,CAAmB+G,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA;AACA,oBAAItF,QAAJ,EAAc;AACV,yBAAKyF,cAAL,CAAoB,KAAKtG,UAAL,CAAgB,WAAhB,CAApB,EAAkDoG,cAAlD;;AAEA,yBAAKG,eAAL;;AAEA;AACA,yBAAK/F,aAAL,GAAqB,KAArB;AACA,yBAAKtB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAI2F,UAAJ,EAAgB;AACnB,yBAAKI,cAAL,CAAoB,KAAKtG,UAAL,CAAgB,YAAhB,CAApB,EAAmDoG,cAAnD;AACH,iBAFM,MAEA;AACH,yBAAKE,cAAL,CAAoB,KAAKtG,UAAL,CAAgB,OAAhB,CAApB,EAA8CoG,cAA9C;AACH;AACJ;AACJ,SAhC2C,CAA5C;;AAkCA;;;;;AAKA,aAAKlH,MAAL,CAAYyG,GAAZ,CAAgB,cAAhB,EAAgC,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAE7C;AACA,gBAAI5F,SAAS4F,KAAK5F,MAAlB;AACA,gBAAIC,cAAc2F,KAAK3F,WAAvB;;AAEA;AACA,gBAAI,MAAKD,MAAL,KAAgBA,MAAhB,IAA0B,MAAKC,WAAL,KAAqBA,WAAnD,EAAgE;;AAE5D;AACA,oBAAIsG,cAAc,MAAKC,cAAL,EAAlB;;AAEA,oBAAID,eAAe,IAAnB,EAAyB;AACrB,wBAAIX,OAAO,EAAX;AACAA,yBAAK5F,MAAL,GAAcA,MAAd;AACA4F,yBAAK3F,WAAL,GAAmBA,WAAnB;AACA2F,yBAAKW,WAAL,GAAmBA,WAAnB;;AAEA;AACA,0BAAKtH,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0CJ,IAA1C;AACH;AACJ;AACJ,SAtBD;;AAwBA;;;;AAIA,aAAK3G,MAAL,CAAYyG,GAAZ,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAExD,gBAAIA,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAIa,aAAab,KAAKa,UAAtB;;AAEA,oBAAIA,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAIC,mBAAmBD,WAAWzG,MAAlC;AACA,wBAAI2G,wBAAwBF,WAAWxG,WAAvC;;AAEA;AACA,wBAAI,MAAKD,MAAL,KAAgB0G,gBAAhB,IACA,MAAKzG,WAAL,KAAqB0G,qBADzB,EACgD;;AAE5C;AACA,8BAAKtF,iBAAL,GAAyB,MAAKjC,iBAAL,CAAuBmE,6BAAvB,CAAqD,MAAKvD,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAK+C,WAAzF,CAAzB;AACH;AACJ;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAK/D,MAAL,CAAYyG,GAAZ,CAAgB,UAAhB,EAA4BX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;;AAIA;;;;AAIA,aAAK3G,MAAL,CAAY2H,iBAAZ,GAAgC,UAASC,OAAT,EAAkB;AAAA;;AAE9C;AACA,gBAAIxE,kBAAkB,KAAK2C,eAAL,CAAqB8B,kBAArB,EAAtB;;AAEA,gBAAIC,YAAY,IAAhB;;AAEA,gBAAI1E,mBAAmB,IAAnB,IAA2BA,mBAAmB,EAAlD,EAAsD;AAClD;;;;AAIA,oBAAI2E,SAASC,QAAQ,KAAKjC,eAAL,CAAqBjF,UAArB,CAAgC,mDAAhC,CAAR,CAAb;;AAEA,oBAAIiH,MAAJ,EAAY;AACR;AACAD,gCAAY,IAAZ;AACH,iBAHD,MAGO;AACH;AACAA,gCAAY,KAAZ;;AAEA;;;;;;AAMAF,4BAAQtE,KAAR,GAAgB,IAAhB;AACH;AACJ;;AAED,gBAAIwE,SAAJ,EAAe;AACX;;AAEA;AACA,oBAAIG,QAAQL,QAAQK,KAApB;;AAEA,oBAAIA,SAAS,IAAT,IAAiBA,MAAMC,MAAN,GAAe,CAApC,EAAuC;;AAEnC;AACA,yBAAKnC,eAAL,CAAqBrF,mBAArB,CAAyCyH,WAAzC,CAAqDF,MAAM,CAAN,CAArD,EAA+D3B,IAA/D,CAAoE,UAAC8B,iBAAD,EAAuB;;AAEvF;AACA,+BAAKrC,eAAL,CAAqBrF,mBAArB,CAAyC2H,qBAAzC,CAA+DD,iBAA/D,EAAkF9B,IAAlF,CAAuF,UAACgC,eAAD,EAAqB;;AAExG,gCAAIA,mBAAmB,IAAvB,EAA6B;AACzB;AACA,oCAAIC,WAAWD,gBAAgBE,GAA/B;;AAEA,oCAAID,YAAY,IAAZ,IAAoBA,YAAY,EAApC,EAAwC;;AAEpC;AACA,2CAAKxC,eAAL,CAAqB0C,kBAArB,CAAwCF,QAAxC;AACA,2CAAKxC,eAAL,CAAqB2C,kBAArB;AACH;AACJ;AACJ,yBAbD;AAcH,qBAjBD;AAkBH;AACJ;AACJ,SA5DD;;AA8DA;;;;AAIA,aAAK1I,MAAL,CAAYyG,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAE9C,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIA,KAAK5F,MAAL,IAAe,MAAKA,MAApB,IAA8B4F,KAAK3F,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACpE;AACA,wBAAI2H,YAAYhC,KAAKgC,SAArB;;AAEA,wBAAIA,aAAa,IAAjB,EAAuB;AACnB,4BAAIC,WAAWD,UAAUC,QAAzB;;AAEA,4BAAIA,YAAY,IAAhB,EAAsB;AAClB;;;;;AAKA,gCAAIC,sBAAsB,MAAKzI,aAAL,CAAmB0I,6BAAnB,EAA1B;AACA,gCAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;;AAEA,gCAAII,eAAe,EAAnB;;AAEA,gCAAIrC,KAAKsC,MAAL,IAAe,QAAnB,EAA6B;AACzB;AACAD,+CAAe,sBAAsB,MAAKjI,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH,6BAHD,MAGO,IAAI2F,KAAKsC,MAAL,IAAe,QAAnB,EAA6B;AAChC;AACAD,+CAAe,sBAAsB,MAAKjI,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH,6BAHM,MAGA,IAAI2F,KAAKsC,MAAL,IAAe,YAAnB,EAAiC;AACpC;;AAEA;AACA,sCAAK/H,yBAAL,CAA+BkC,eAA/B,GAAiDwF,QAAjD;;AAEA;AACA,sCAAKM,6BAAL;AACH;;AAED,gCAAIF,gBAAgB,EAApB,EAAwB;AACpB,oCAAI,MAAKpI,WAAL,CAAiBuI,OAAjB,CAAyBP,QAAzB,CAAJ,EAAwC;AACpC;;;;AAIApD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACH,iCAVD,MAUO,IAAI,MAAKhI,WAAL,CAAiByI,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC3C;;;;AAIApD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACA5D,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA,wCAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,iDAAaG,QAAb,GAAwB,MAAxB;AACAH,iDAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAvD,sCAAE,MAAMwD,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED;AACA,kBAAKzJ,SAAL,CAAe8J,IAAf;AACH,SAxED;;AA0EA;;;;AAIA,aAAK3J,MAAL,CAAYyG,GAAZ,CAAgB,gCAAhB,EAAkD,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC/D,gBAAIA,QAAQ,IAAZ,EAAkB;AACd,oBAAI3F,cAAc2F,KAAK3F,WAAvB;AACA,oBAAI,MAAKA,WAAL,KAAqBA,WAAzB,EAAsC;AAClC,0BAAKkB,qBAAL,GAA6B,CAAC,MAAKA,qBAAnC;AACH;AACJ;AACJ,SAPD;AAQH;;;;sCAEa;AACV;AACA,gBAAIW,SAAS,KAAK+G,gBAAL,EAAb;AACA,iBAAK/G,MAAL,GAAcA,MAAd;;AAEA;AACA,gBAAIoB,iBAAiB,KAAKjE,MAAL,CAAYiE,cAAjC;;AAEA,gBAAI,KAAKtB,eAAL,IAAwB,CAAC,KAAKkH,QAAlC,EAA4C;AACxC;AACA,qBAAKC,qBAAL;AACH;;AAED;AACA,iBAAKlI,0BAAL,GAAkC,KAAKX,gBAAL,CAAsBW,0BAAxD;;AAEA,gBAAI,KAAKkC,IAAL,IAAa,SAAjB,EAA4B;AACxB,oBAAI,KAAKlD,WAAL,CAAiBmJ,6BAAjB,CAA+C,KAAK9I,gBAApD,CAAJ,EAA2E;AACvE;AACA,yBAAK+I,yBAAL;AACH,iBAHD,MAGQ,IAAI,KAAK3J,YAAL,CAAkB4J,4BAAlB,CAA+ChG,cAA/C,EAA+D,KAAKhD,gBAApE,CAAJ,EAA2F;AAC/F;;;;AAIA,yBAAKiJ,cAAL,CAAoBjG,cAApB;AACH,iBANO,MAMD,IAAI,KAAKrD,WAAL,CAAiBuJ,qBAAjB,CAAuC,KAAKlJ,gBAA5C,CAAJ,EAAmE;AACtE;AACA,yBAAK+I,yBAAL;AACH,iBAHM,MAGA,IAAI/F,kBAAkB,IAAtB,EAA4B;AAC/B;;;;;AAKA;AACA,wBAAImG,2BAA2B,KAAKnJ,gBAAL,CAAsBmJ,wBAArD;AACA,wBAAIC,gCAAgC,KAAKpJ,gBAAL,CAAsBoJ,6BAA1D;;AAEA,wBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;AACpE;;;;AAIAA,mDAA2B,KAAKnJ,gBAAL,CAAsBqJ,gBAAjD;AACH;;AAED,wBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;AAC9E;;;;AAIAA,wDAAgC,KAAKpJ,gBAAL,CAAsBsJ,qBAAtD;AACH;;AAED,wBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;AAC3E;AACA,6BAAKG,UAAL;AACH,qBAHD,MAGO,IAAI,KAAKvJ,gBAAL,CAAsBwJ,MAAtB,IAAgC,IAApC,EAA0C;AAC7C;;;;AAIA,6BAAKC,iBAAL,CAAuB,KAAKzJ,gBAAL,CAAsBwJ,MAA7C;AACH;AACJ;AACJ,aAlDD,MAkDO,IAAI,KAAK3G,IAAL,KAAc,SAAlB,EAA6B;AAChC;AACA,qBAAKoG,cAAL,CAAoBjG,cAApB;AACH,aAHM,MAGA;AACH,oBAAIA,kBAAkB,IAAlB,IAA0B,KAAKhD,gBAAL,CAAsBwJ,MAAtB,IAAgC,IAA9D,EAAoE;AAChE;AACA,yBAAKC,iBAAL,CAAuB,KAAKzJ,gBAAL,CAAsBwJ,MAA7C;AACH,iBAHD,MAGO;AACH;AACA,yBAAKP,cAAL,CAAoBjG,cAApB;AACH;AACJ;;AAED;AACA,gBAAIb,kBAAkB,KAAKyE,kBAAL,EAAtB;;AAEA,gBAAIzE,mBAAmB,IAAnB,IAA2B,KAAKnC,gBAAL,CAAsBmC,eAAtB,IAAyC,IAAxE,EAA8E;AAC1E;AACA,qBAAKqF,kBAAL,CAAwB,KAAKxH,gBAAL,CAAsBmC,eAA9C;AACH;;AAED;AACA,gBAAI,KAAKnC,gBAAL,CAAsB0J,cAAtB,IAAwC,IAAxC,IAAgD,KAAK1I,aAAL,IAAsB,KAAKhB,gBAAL,CAAsB0J,cAAhG,EAAgH;AAC5G;;;;AAIA,qBAAK3I,sBAAL,GAA8B,IAA9B;AACH;;AAED;AACA,iBAAK4I,iBAAL;;AAEA,gBAAI,KAAK5K,MAAL,CAAY6K,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC5C;AACA,qBAAK9K,MAAL,CAAY6K,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,KAAK/K,MAApE,EAA4E,KAAKiB,gBAAjF;AACH;AACJ;;AAED;;;;;;;uCAIegD,c,EAAgB;;AAE3B,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB,oBAAI+G,cAAc/G,eAAe+G,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;;AAErB;AACA,wBAAIP,SAASO,YAAYP,MAAzB;;AAEA;AACA,yBAAKC,iBAAL,CAAuBD,MAAvB;;AAEA;AACA,wBAAIrH,kBAAkB4H,YAAY5H,eAAlC;;AAEA,wBAAIA,mBAAmB,IAAvB,EAA6B;AACzB,6BAAKqF,kBAAL,CAAwBrF,eAAxB;AACH;;AAED,wBAAInB,gBAAgB+I,YAAY/I,aAAhC;;AAEA,wBAAIA,iBAAiB,IAArB,EAA2B;AACvB;AACA,6BAAKA,aAAL,GAAqBA,aAArB;AACH;;AAED,yBAAKgJ,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAIC,cAAc,KAAKvK,kBAAL,CAAwBwK,6CAAxB,CAAsE,KAAKpK,MAA3E,EAAmF,KAAKC,WAAxF,CAAlB;;AAEA,gBAAIkK,WAAJ,EAAiB;AACb,oBAAIjE,iBAAiBiE,YAAYjE,cAAjC;AACA,oBAAIC,iBAAiB,KAAK9G,aAAL,CAAmB+G,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,oBAAIiE,YAAYvJ,QAAhB,EAA0B;AACtB;AACA,yBAAKL,aAAL,GAAqB,KAArB;AACA,yBAAKtB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAK+F,cAAL,CAAoB,KAAKtG,UAAL,CAAgB,gBAAhB,CAApB,EAAuDoG,cAAvD;AACH,iBAND,MAMO;AACH;AACA,yBAAK5F,aAAL,GAAqB,IAArB;AACA,yBAAKtB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAK+F,cAAL,CAAoB,KAAKtG,UAAL,CAAgB,YAAhB,CAApB,EAAmDoG,cAAnD;AACH;AACJ;AACJ;;;;;AAED;;;;0CAIkBuD,M,EAAQ;AACtB,gBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,qBAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIX,OAAOvC,MAA3B,EAAmCkD,GAAnC,EAAwC;;AAEpC;AACA,wBAAIC,QAAQZ,OAAOW,CAAP,CAAZ;;AAEA,wBAAIC,SAAS,IAAb,EAAmB;;AAEf;AACA,4BAAIC,SAASD,MAAMC,MAAnB;AACA,4BAAIC,SAASF,MAAME,MAAnB;AACA,4BAAIC,QAAQH,MAAMG,KAAlB;AACA,4BAAIC,QAAQJ,MAAMI,KAAlB;AACA,4BAAIjK,OAAO6J,MAAM7J,IAAjB;AACA,4BAAIkK,QAAQL,MAAMK,KAAlB;;AAEA;AACA,4BAAIL,QAAQ,KAAKM,WAAL,CAAiBL,MAAjB,EAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CjK,IAA/C,EAAqDkK,KAArD,CAAZ;;AAEA;AACA,6BAAKE,gBAAL,CAAsB,KAAK/I,MAA3B,EAAmCwI,KAAnC;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAK1J,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAK3B,MAAL,CAAY+G,KAAZ,CAAkB,wBAAlB,EAA4C,EAAChG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;;AAElB;AACA,gBAAI4F,oBAAoB,uBAAxB;AACA,iBAAKC,MAAL,CAAYD,iBAAZ;;AAEA;;AAEA;AACA;AACH;;;;;AAED;;;;;+BAKOA,iB,EAAmB;;AAEtB,gBAAI,KAAKtF,aAAT,EAAwB;AACpB;;AAEA,oBAAIuK,gBAAgB,IAApB;;AAEA,oBAAI,KAAK5K,gBAAL,CAAsB0J,cAAtB,IAAwC,IAA5C,EAAkD;AAC9C;;AAEA;AACA,wBAAImB,sBAAsB,KAAK7K,gBAAL,CAAsB0J,cAAtB,GAAuC,KAAK1I,aAAtE;;AAEA,wBAAI8J,UAAU,EAAd;;AAEA,wBAAID,uBAAuB,CAA3B,EAA8B;AAC1B;AACAD,wCAAgB,KAAhB;AACH,qBAHD,MAGO,IAAIC,uBAAuB,CAA3B,EAA8B;AACjC;;;;AAIH,qBALM,MAKA,IAAIA,sBAAsB,CAA1B,EAA6B;AAChC;;;;AAIH;AACJ;;AAED,oBAAID,aAAJ,EAAmB;;AAEf;;;;;AAKA,yBAAKlK,QAAL,GAAgB,IAAhB;;AAEA;AACA,yBAAKqK,sBAAL;;AAEA;AACA,wBAAI,KAAK/K,gBAAL,CAAsB0J,cAAtB,IAAwC,IAAxC,IAAgD,KAAK1I,aAAL,IAAsB,KAAKhB,gBAAL,CAAsB0J,cAAhG,EAAgH;AAC5G;;;;AAIA,6BAAK3I,sBAAL,GAA8B,IAA9B;AACH;;AAED,wBAAI,KAAK8B,IAAL,KAAc,WAAlB,EAA+B;AAC3B;;;;;AAKA,6BAAKzC,OAAL,GAAe,KAAf;AACA,6BAAKC,aAAL,GAAqB,KAArB;AACA,6BAAK+E,oBAAL,CAA0B,QAA1B;AACH;;AAED,wBAAIO,qBAAqB,IAArB,IAA6BA,sBAAsB,uBAAvD,EAAgF;AAC5E;AACA,6BAAK5G,MAAL,CAAY+G,KAAZ,CAAkB,0BAAlB,EAA8C,EAAChG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACH,qBAHD,MAGO,IAAI4F,sBAAsB,kBAA1B,EAA8C;AACjD;AACH;AACJ,iBAtCD,MAsCO;AACH;;;;AAIA,yBAAKjF,QAAL,GAAgB,KAAhB;AACH;AACJ;AACJ;;AAED;;;;;;;gDAIwB;AACpB,iBAAKiB,eAAL,GAAuB,IAAvB;AACA,iBAAKN,qBAAL,GAA6B,IAA7B;AACH;;;;;AAED;;;;8CAIsB;AAClB,iBAAKM,eAAL,GAAuB,KAAvB;AACA,iBAAKN,qBAAL,GAA6B,KAA7B;AACH;;;;;AAED;;;iDAGyB;AACrB,iBAAKL,aAAL;AACH;;;0CAEiB;AACd;AACA,gBAAI,KAAKgK,iBAAL,EAAJ,EAA8B;AAC1B,qBAAK7K,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKrB,MAAL,CAAY+G,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAApC;;AAEA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKtB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC/F,aAAa,KAAKA,WAAnB,EAAgCK,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAK+F,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAIpG,cAAc,KAAKkL,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAI9F,SAAS,QAAb;;AAEA;AACA,iBAAKC,oBAAL,CAA0BD,MAA1B,EAAkCE,IAAlC,CAAuC,UAACrC,cAAD,EAAoB;AACvD,uBAAKjE,MAAL,CAAY+G,KAAZ,CAAkB,6BAAlB,EAAiD,EAAChG,QAAQ,OAAKA,MAAd,EAAsBC,aAAaA,WAAnC,EAAgDiD,gBAAgBA,cAAhE,EAAjD;AACH,aAFD;AAGH;;;;;AAED;;;;oCAIY;AACR,gBAAIwG,SAAS,EAAb;;AAEA;;;;AAIA,gBAAI0B,UAAU,KAAKtJ,MAAL,CAAYuJ,UAAZ,CAAuB,QAAvB,CAAd;;AAEA,gBAAID,WAAW,IAAf,EAAqB;;AAEjB;AACA,qBAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIe,QAAQjE,MAA5B,EAAoCkD,GAApC,EAAyC;;AAErC;;;;AAIA,wBAAIiB,SAASF,QAAQf,CAAR,CAAb;;AAEA,wBAAIiB,UAAU,IAAd,EAAoB;;AAEhB;AACA,4BAAIC,kBAAkB,KAAKC,4BAAL,CAAkCF,MAAlC,CAAtB;;AAEA,4BAAIC,mBAAmB,IAAvB,EAA6B;AACzB;AACA7B,mCAAO+B,IAAP,CAAYF,eAAZ;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO7B,MAAP;AACH;;;;;AAED;;;;;qDAK6BgC,M,EAAQ;AACjC,gBAAIH,kBAAkB,EAAtB;;AAEA,gBAAIG,UAAU,IAAd,EAAoB;;AAEhB;AACA,oBAAIC,aAAaD,OAAOE,IAAxB;;AAEA;AACA,oBAAIC,aAAaH,OAAOjL,IAAxB;;AAEA,oBAAIkL,cAAc,IAAd,IAAsBE,cAAc,IAAxC,EAA8C;;AAE1C;AACA,wBAAItB,SAASmB,OAAOI,GAAP,CAAW,MAAX,CAAb;AACA,wBAAItB,SAASkB,OAAOI,GAAP,CAAW,KAAX,CAAb;;AAEA;;;;AAIA,wBAAIC,QAAQJ,WAAWK,EAAX,GAAgBL,WAAWM,EAAvC;AACA,wBAAIC,QAAQP,WAAWQ,EAAX,GAAgBR,WAAWS,EAAvC;;AAEA;AACA,wBAAI3B,QAAQsB,KAAZ;AACA,wBAAIrB,QAAQwB,KAAZ;;AAEA;AACA,wBAAIzL,OAAOoL,WAAWpL,IAAtB;AACA,wBAAIkK,QAAQkB,WAAWQ,eAAvB;;AAEA;AACAd,oCAAgBhB,MAAhB,GAAyB+B,SAAS/B,MAAT,CAAzB;AACAgB,oCAAgBf,MAAhB,GAAyB8B,SAAS9B,MAAT,CAAzB;AACAe,oCAAgBd,KAAhB,GAAwB6B,SAAS7B,KAAT,CAAxB;AACAc,oCAAgBb,KAAhB,GAAwB4B,SAAS5B,KAAT,CAAxB;AACAa,oCAAgB9K,IAAhB,GAAuBA,IAAvB;AACA8K,oCAAgBZ,KAAhB,GAAwBA,KAAxB;AACH;AACJ;;AAED,mBAAOY,eAAP;AACH;;;;;AAED;;;;;;6CAMqBlG,M,EAAQ;;AAEzB,gBAAIH,WAAW,KAAKnG,EAAL,CAAQoG,KAAR,EAAf;;AAEA;AACA,gBAAIjC,iBAAiB,KAAK3D,WAAL,CAAiBgN,uBAAjB,EAArB;;AAEA;AACA,gBAAItC,cAAc,EAAlB;AACAA,wBAAYP,MAAZ,GAAqB,KAAK8C,SAAL,EAArB;;AAEA,gBAAInK,kBAAkB,KAAKyE,kBAAL,EAAtB;;AAEA,gBAAIzE,mBAAmB,IAAvB,EAA6B;AACzB4H,4BAAY5H,eAAZ,GAA8BA,eAA9B;AACH;;AAED;AACA4H,wBAAY/I,aAAZ,GAA4B,KAAKA,aAAjC;;AAEA;AACAgC,2BAAetC,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;AACAsC,2BAAe+G,WAAf,GAA6BA,WAA7B;;AAEA;AACA/G,2BAAeuJ,aAAf,GAA+B,OAA/B;;AAEA;AACAvJ,2BAAelD,MAAf,GAAwB,KAAKA,MAA7B;;AAEA;AACAkD,2BAAejD,WAAf,GAA6B,KAAKA,WAAlC;;AAEA;;;;AAIA,iBAAKW,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,iBAAK8L,wCAAL,CAA8CxH,QAA9C,EAAwDhC,cAAxD,EAAwEmC,MAAxE;;AAEA,mBAAOH,SAASO,OAAhB;AACH;;;;;AAED;;;;;;;;;;iEAUyCP,Q,EAAUhC,c,EAAgBmC,M,EAAQ;AACvE;;;;AAIAH,qBAASM,OAAT,CAAiBtC,cAAjB;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAIhD,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAIA,iBAAiBG,UAArB,EAAiC;AAC7B,yBAAKA,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAIH,iBAAiByM,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAIC,kBAAkB,KAAKhN,kBAAL,CAAwBiN,wCAAxB,CAAiE,KAAK7M,MAAtE,EAA8E,KAAKC,WAAnF,CAAtB;;AAEA;AACA,wBAAI6M,cAAc,KAAKvN,WAAL,CAAiBwN,eAAjB,CAAiCH,eAAjC,CAAlB;;AAEA,wBAAIE,WAAJ,EAAiB;AACb;AACA,6BAAKzM,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAKiB,uBAAZ;AACH;;;;;AAED;;;;2CAImB;AACf,mBAAO,KAAKC,qBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAIyL,SAAS,KAAb;;AAEA,gBAAI,KAAK9M,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAKA,gBAAL,CAAsByM,eAA1B,EAA2C;AACvCK,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;;yCAEgBC,U,EAAY;AACzB,gBAAI,KAAK7M,WAAL,CAAiB8M,OAAjB,CAAyBD,UAAzB,KAAwC,CAAC,CAA7C,EAAgD;AAC5C,qBAAK7M,WAAL,CAAiB+M,MAAjB,CAAwB,KAAK/M,WAAL,CAAiB8M,OAAjB,CAAyBD,UAAzB,CAAxB,EAA8D,CAA9D;AACA,qBAAKtF,kBAAL;AACH;AACJ;;;2CAEkByF,Y,EAAc;AAAA;;AAC7B,gBAAIA,gBAAgB,IAApB,EAA0B;AACtB,qBAAKzN,mBAAL,CAAyB2H,qBAAzB,CAA+C8F,YAA/C,EAA6D7H,IAA7D,CAAkE,UAAC8H,WAAD,EAAiB;AAC/E,wBAAIA,eAAe,IAAnB,EAAyB;AACrB,4BAAIJ,aAAa;AACbK,4CAAgBD,YAAYzK,EADf;AAEb2K,qCAASF,YAAYE;AAFR,yBAAjB;;AAKA,+BAAKnN,WAAL,CAAiBqL,IAAjB,CAAsBwB,UAAtB;AACA,+BAAKtF,kBAAL;AACH;AACJ,iBAVD;AAWH;AACJ;;;;;AAED;;;oCAGY;AACR,gBAAI6F,SAAS,IAAb;;AAEA,gBAAI,KAAK1K,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAKA,wBAAL,CAA8B2K,sBAAlC,EAA0D;AACtD;AACAD,6BAAS,KAAKtN,gBAAL,CAAsBsN,MAA/B;AACH,iBAHD,MAGO;AACH;AACAA,6BAAS,KAAK1K,wBAAL,CAA8B0K,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAKtN,gBAAL,IAAyB,IAA7B,EAAmC;AACtCsN,yBAAS,KAAKtN,gBAAL,CAAsBsN,MAA/B;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAItN,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAImJ,2BAA2BnJ,iBAAiBmJ,wBAAhD;AACA,oBAAIC,gCAAgCpJ,iBAAiBoJ,6BAArD;;AAEA,oBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;;AAEpE;;;;AAIA,wBAAInJ,iBAAiBqJ,gBAAjB,IAAqC,IAArC,IAA6CrJ,iBAAiBqJ,gBAAjB,IAAqC,EAAtF,EAA0F;AACtFF,mDAA2BnJ,iBAAiBqJ,gBAA5C;AACH;AACJ;;AAED,oBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;;AAE9E;;;;AAIA,wBAAIpJ,iBAAiBsJ,qBAAjB,IAA0C,IAA1C,IAAkDtJ,iBAAiBsJ,qBAAjB,IAA0C,EAAhG,EAAoG;AAChGF,wDAAgCpJ,iBAAiBsJ,qBAAjD;AACH;AACJ;;AAED,oBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;;AAE3E;AACA,wBAAIpG,iBAAiB,KAAKtD,kBAAL,CAAwBwK,6CAAxB,CAAsE,KAAKpK,MAA3E,EAAmF,KAAKC,WAAxF,CAArB;;AAEA;;;;AAIA,wBAAGiD,kBAAkB,IAArB,EAA2B;AACvB;;AAEA;AACA,4BAAIwK,2BAA2B,KAAK9N,kBAAL,CAAwBwK,6CAAxB,CAAsEf,wBAAtE,EAAgGC,6BAAhG,CAA/B;;AAEA,4BAAIoE,4BAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,gCAAIC,0BAA0B,KAAKrO,YAAL,CAAkBsO,sBAAlB,CAAyCF,wBAAzC,CAA9B;;AAEA;AACA,iCAAKvE,cAAL,CAAoBwE,uBAApB;;AAEA;AACA,iCAAKhG,kBAAL;AACH;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAKzH,gBAAL,CAAsB0C,EAA7B;AACH;;;;;AAED;;;;2CAImB;;AAEf,gBAAId,SAAS,IAAb;;AAEA,gBAAI,KAAK5B,gBAAL,CAAsBiD,KAAtB,IAA+B,IAA/B,IAAuC,KAAKjD,gBAAL,CAAsBiD,KAAtB,IAA+B,EAA1E,EAA8E;AAC1E,qBAAKpB,WAAL,GAAmB,KAAK7B,gBAAL,CAAsBiD,KAAzC;AACH;;AAED,gBAAI,KAAKjD,gBAAL,CAAsBkD,MAAtB,IAAgC,IAAhC,IAAwC,KAAKlD,gBAAL,CAAsBkD,MAAtB,IAAgC,EAA5E,EAAgF;AAC5E,qBAAKpB,YAAL,GAAoB,KAAK9B,gBAAL,CAAsBkD,MAA1C;AACH;;AAED;AACA,gBAAI,KAAK/C,UAAT,EAAqB;AACjB;AACAyB,yBAAS,IAAI+L,OAAOC,YAAX,CAAwB,KAAK1L,QAA7B,CAAT;AACH,aAHD,MAGO;AACH;AACAN,yBAAS,IAAI+L,OAAOE,MAAX,CAAkB,KAAK3L,QAAvB,CAAT;AACH;;AAED;AACAN,mBAAOkM,SAAP,GAAmB,KAAnB;;AAEA;AACAlM,mBAAOmM,WAAP,GAAqB,SAArB;;AAEA;AACAnM,mBAAOoM,QAAP,CAAgB,KAAKnM,WAArB;AACAD,mBAAOqM,SAAP,CAAiB,KAAKnM,YAAtB;;AAEA;AACAyC,cAAE,mBAAmB,KAAKrC,QAA1B,EAAoCwC,GAApC,CAAwC,QAAxC,EAAkD,KAAK5C,YAAL,GAAoB,CAAtE;;AAEA;AACAF,mBAAOsM,EAAP,CAAU,YAAV,EAAwBrJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASgK,OAAT,EAAkB;;AAEzD;AACA,oBAAIC,eAAe,KAAKxM,MAAL,CAAYyM,eAAZ,EAAnB;;AAEA,oBAAID,gBAAgB,IAApB,EAA0B;AACtB;;;;;AAKA,yBAAKE,aAAL,GAAqB,IAArB;AACA,yBAAKC,aAAL,GAAqB,KAArB;AACH;;AAED;AACA,oBAAI,KAAK5M,eAAT,EAA0B;AACtB;;;;;AAKA;AACA,yBAAKA,eAAL,GAAuB,KAAvB;AACA,yBAAKN,qBAAL,GAA6B,KAA7B;;AAEA,wBAAIoE,QAAQ0I,QAAQK,CAApB;;AAEA,wBAAI/I,SAAS,IAAb,EAAmB;AACf;AACA,4BAAI0E,IAAI1E,MAAMgJ,MAAd;AACA,4BAAIC,IAAIjJ,MAAMkJ,MAAd;;AAEA;;;;AAIA,4BAAIpE,QAAQ,GAAZ;AACA,4BAAIC,QAAQ,GAAZ;;AAEA;AACA,4BAAIoE,WAAW,KAAKlE,WAAL,CAAiBP,CAAjB,EAAoBuE,CAApB,EAAuBnE,KAAvB,EAA8BC,KAA9B,EAAqC,KAAK3K,UAAL,CAAgB,iBAAhB,CAArC,EAAyE,MAAzE,CAAf;;AAEA;AACA,6BAAK8K,gBAAL,CAAsB,KAAK/I,MAA3B,EAAmCgN,QAAnC;;AAEA;;;;AAIA,6BAAKC,WAAL,CAAiBD,QAAjB;;AAEA;AACA,6BAAKnH,kBAAL;AACH;AACJ;AACJ,aAxDuB,CAAxB;;AA0DA;AACA7F,mBAAOsM,EAAP,CAAU,eAAV,EAA2BrJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASgK,OAAT,EAAkB;AAC5D,oBAAInG,SAASmG,QAAQnG,MAArB;;AAEA,oBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,wBAAIzF,OAAOyF,OAAO4D,GAAP,CAAW,MAAX,CAAX;;AAEA;AACA,wBAAIkD,OAAO9G,OAAO4D,GAAP,CAAW,MAAX,CAAX;AACA,wBAAImD,MAAM/G,OAAO4D,GAAP,CAAW,KAAX,CAAV;;AAEA;AACA,wBAAIkD,OAAO,CAAX,EAAc;AACV9G,+BAAOgH,GAAP,CAAW,MAAX,EAAmB,CAAnB;AACAF,+BAAO,CAAP;AACH,qBAHD,MAGO,IAAIA,OAAO,KAAKjN,WAAhB,EAA6B;AAChCmG,+BAAOgH,GAAP,CAAW,MAAX,EAAmB,KAAKnN,WAAxB;AACAiN,+BAAO,KAAKjN,WAAZ;AACH;;AAED;AACA,wBAAIkN,MAAM,CAAV,EAAa;AACT/G,+BAAOgH,GAAP,CAAW,KAAX,EAAkB,CAAlB;AACAD,8BAAM,CAAN;AACH,qBAHD,MAGO,IAAIA,MAAM,KAAKjN,YAAf,EAA6B;AAChCkG,+BAAOgH,GAAP,CAAW,KAAX,EAAkB,KAAKlN,YAAvB;AACAiN,8BAAM,KAAKjN,YAAX;AACH;;AAED,wBAAIS,SAAS,QAAb,EAAuB;AACnB;;;;;;;AAOA;AACA,4BAAImJ,OAAO1D,OAAO0D,IAAlB;;AAEA,4BAAIG,QAAQ,CAAZ;AACA,4BAAIG,QAAQ,CAAZ;;AAEA,4BAAIN,QAAQ,IAAZ,EAAkB;AACd;AACAG,oCAAQH,KAAKI,EAAL,GAAUJ,KAAKK,EAAvB;AACAC,oCAAQN,KAAKO,EAAL,GAAUP,KAAKQ,EAAvB;;AAEA;AACAR,iCAAKsD,GAAL,CAAS,EAACjD,IAAI+C,IAAL,EAAW5C,IAAI6C,GAAf,EAAoBjD,IAAIgD,OAAOjD,KAA/B,EAAsCI,IAAI8C,MAAM/C,KAAhD,EAAT;;AAEA;AACApK,mCAAOqN,MAAP,CAAcvD,IAAd;AACA9J,mCAAOsN,GAAP,CAAWxD,IAAX;;AAEA;AACA9J,mCAAOuN,MAAP,CAAczD,IAAd,EAAoB,KAAK3J,UAAzB;AACH;;AAED;AACA,4BAAIxB,OAAOyH,OAAOzH,IAAlB;;AAEA,4BAAIA,QAAQ,IAAZ,EAAkB;AACd;AACAA,iCAAKyO,GAAL,CAAS,EAACF,MAAMA,OAAOjD,KAAd,EAAqBkD,KAAKA,MAAM/C,KAAhC,EAAT;;AAEA;AACApK,mCAAOqN,MAAP,CAAc1O,IAAd;AACAqB,mCAAOsN,GAAP,CAAW3O,IAAX;;AAEA;AACAqB,mCAAOuN,MAAP,CAAc5O,IAAd,EAAoB,KAAKyB,UAAzB;AACH;AACJ,qBA5CD,MA4CO,IAAIO,SAAS,QAAb,EAAuB;AAC1B;;;;;;AAMA,4BAAImJ,OAAO1D,OAAO0D,IAAlB;;AAEA,4BAAIA,QAAQ,IAAZ,EAAkB;AACd;AACAA,iCAAKsD,GAAL,CAAS,EAAClD,IAAIgD,IAAL,EAAW7C,IAAI8C,GAAf,EAAT;;AAEA;AACAnN,mCAAOqN,MAAP,CAAcvD,IAAd;AACA9J,mCAAOsN,GAAP,CAAWxD,IAAX;;AAEA;AACA9J,mCAAOuN,MAAP,CAAczD,IAAd,EAAoB,KAAK3J,UAAzB;AACH;AACJ;;AAED;AACAH,2BAAOwN,SAAP;;AAEA;AACA,yBAAK3H,kBAAL;AACH;AACJ,aAtG0B,CAA3B;;AAwGA;AACA7F,mBAAOsM,EAAP,CAAU,cAAV,EAA0BrJ,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASgK,OAAT,EAAkB;AAC3D,oBAAInG,SAASmG,QAAQnG,MAArB;;AAEA,oBAAIA,UAAU,IAAd,EAAoB;;AAEhB,wBAAIzF,OAAOyF,OAAO4D,GAAP,CAAW,MAAX,CAAX;;AAEA,wBAAIrJ,SAAS,QAAb,EAAuB;AACnB;AACA,6BAAKkF,kBAAL;AACH;AACJ;AACJ,aAZyB,CAA1B;;AAcA,mBAAO7F,MAAP;AACH;;;;;AAED;;;;2CAImByN,mB,EAAqB;;AAEpC,gBAAIA,uBAAuB,IAA3B,EAAiC;AAC7B,qBAAKlN,eAAL,GAAuBkN,mBAAvB;AACA,qBAAKzN,MAAL,CAAY4F,kBAAZ,CAA+B6H,mBAA/B,EAAoD,KAAKzN,MAAL,CAAYwN,SAAZ,CAAsBjL,IAAtB,CAA2B,KAAKvC,MAAhC,CAApD;AACH;AACJ;;;;;AAED;;;;6CAIqB;AACjB,mBAAO,KAAKO,eAAZ;AACH;;;;;AAED;;;gDAGwB;AACpBmN,mBAAOC,gBAAP,CAAwB,SAAxB,EAAmC1K,QAAQV,IAAR,CAAa,IAAb,EAAmB,KAAKqL,UAAxB,CAAnC,EAAwE,KAAxE;AACH;;;;;AAED;;;;mCAIWhB,C,EAAG;;AAEV;AACA,gBAAIiB,UAAUjB,EAAEiB,OAAhB;;AAEA;AACA,gBAAIA,YAAY,CAAZ,IAAiBA,YAAY,EAAjC,EAAqC;;AAEjC;AACA,oBAAIrB,eAAe,KAAKxM,MAAL,CAAYyM,eAAZ,EAAnB;;AAEA,oBAAID,gBAAgB,IAApB,EAA0B;;AAEtB;AACA,wBAAIA,aAAaxC,GAAb,CAAiB,MAAjB,MAA6B,QAAjC,EAA2C;;AAEvC;AACA,6BAAK8D,qBAAL,CAA2B,KAAK9N,MAAhC,EAAwCwM,YAAxC;;AAEA;AACA,6BAAK3G,kBAAL;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;;;;;;;;;;oCAaY4C,M,EAAQC,M,EAAQC,K,EAAOC,K,EAAOmF,U,EAAYlF,K,EAAO;AACzD,gBAAIL,QAAQ,EAAZ;;AAEA;AACA,gBAAI2B,KAAK1B,MAAT;AACA,gBAAI6B,KAAK5B,MAAT;;AAEA;AACA,gBAAIwB,KAAKzB,SAASE,KAAlB;AACA,gBAAI0B,KAAK3B,SAASE,KAAlB;;AAEA,gBAAIC,SAAS,IAAb,EAAmB;AACf;AACAA,wBAAQ,MAAR;AACH;;AAED,gBAAImF,SAAS,CAAb;AACA,gBAAI,KAAK5P,gBAAL,CAAsB6P,SAAtB,IAAmC,IAAnC,IACI,KAAK7P,gBAAL,CAAsB6P,SAAtB,IAAmC,EAD3C,EAC+C;AAC3CD,yBAASE,WAAW,KAAK9P,gBAAL,CAAsB6P,SAAjC,CAAT;AACH;;AAED,gBAAIE,WAAW,EAAf;AACA,gBAAI,KAAK/P,gBAAL,CAAsB+P,QAAtB,IAAkC,IAAlC,IACI,KAAK/P,gBAAL,CAAsB+P,QAAtB,IAAkC,EAD1C,EAC8C;AAC1CA,2BAAWD,WAAW,KAAK9P,gBAAL,CAAsB+P,QAAjC,CAAX;AACH;;AAED;AACA,gBAAIvE,SAAS,IAAImC,OAAOqC,MAAX,CAAkB;AAC3BJ,wBAAQA,MADmB;AAE3Bd,sBAAM/C,EAFqB;AAG3BgD,qBAAK7C,EAHsB;AAI3B+D,yBAAS,QAJkB;AAK3BC,yBAAS,QALkB;AAM3BC,6BAAa,KANc;AAO3BC,6BAAa,KAPc;AAQ3BC,4BAAY,IARe;AAS3BC,4BAAY;AATe,aAAlB,CAAb;;AAYA;AACA,gBAAI5E,OAAO,IAAIiC,OAAO4C,IAAX,CAAgB,CAACxE,EAAD,EAAKG,EAAL,EAASJ,EAAT,EAAaG,EAAb,CAAhB,EAAkC;AACzCuE,sBAAM,OADmC;AAEzCC,wBAAQ,OAFiC;AAGzCC,6BAAa,CAH4B;AAIzCJ,4BAAY;AAJ6B,aAAlC,CAAX;;AAOA;AACA,gBAAI/P,OAAO,IAAIoN,OAAOgD,KAAX,CAAiBhB,UAAjB,EAA6B;AACpCb,sBAAMhD,EAD8B;AAEpCiD,qBAAK9C,EAF+B;AAGpCgE,yBAAS,QAH2B;AAIpCC,yBAAS,QAJ2B;AAKpCH,0BAAUA,QAL0B;AAMpCS,sBAAM,OAN8B;AAOpCrE,iCAAiB1B,KAPmB;AAQpCxH,uBAAO,GAR6B;AASpCkN,6BAAa,KATuB;AAUpCE,4BAAY,IAVwB;AAWpCD,6BAAa,KAXuB;AAYpCE,4BAAY,IAZwB;AAapCM,6BAAa,CAbuB;AAcpCC,0BAAU;AAd0B,aAA7B,CAAX;;AAiBA;AACArF,mBAAOE,IAAP,GAAcA,IAAd;AACAF,mBAAOjL,IAAP,GAAcA,IAAd;;AAEA;AACAA,iBAAKmL,IAAL,GAAYA,IAAZ;;AAEA;AACAtB,kBAAMoB,MAAN,GAAeA,MAAf;AACApB,kBAAMsB,IAAN,GAAaA,IAAb;AACAtB,kBAAM7J,IAAN,GAAaA,IAAb;;AAEA,mBAAO6J,KAAP;AACH;;;;;AAED;;;;;;yCAMiBxI,M,EAAQwI,K,EAAO;AAAA;;AAE5B,gBAAIxI,UAAU,IAAV,IAAkBwI,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAIoB,SAASpB,MAAMoB,MAAnB;AACA,oBAAIE,OAAOtB,MAAMsB,IAAjB;AACA,oBAAInL,OAAO6J,MAAM7J,IAAjB;;AAEA,oBAAIiL,UAAU,IAAV,IAAkBE,QAAQ,IAA1B,IAAkCnL,QAAQ,IAA9C,EAAoD;;AAEhD;AACAqB,2BAAOsN,GAAP,CAAW1D,MAAX,EAAmBE,IAAnB,EAAyBnL,IAAzB;;AAEA;AACAqB,2BAAOuN,MAAP,CAAczD,IAAd,EAAoB,KAAK3J,UAAzB;AACAH,2BAAOuN,MAAP,CAAc5O,IAAd,EAAoB,KAAKyB,UAAzB;AACAJ,2BAAOuN,MAAP,CAAc3D,MAAd,EAAsB,KAAKvJ,YAA3B;;AAEA;AACAL,2BAAOwN,SAAP;;AAEA5D,2BAAO0C,EAAP,CAAU,UAAV,EAAsB,YAAM;AACxB;;;;AAIA,+BAAKW,WAAL,CAAiBzE,KAAjB;AACH,qBAND;;AAQA7J,yBAAK2N,EAAL,CAAQ,UAAR,EAAoB,YAAM;AACtB;;;;AAIA,+BAAKW,WAAL,CAAiBzE,KAAjB;AACH,qBAND;AAOH;AACJ;AACJ;;;;;AAED;;;;;oCAKYA,K,EAAO;;AAEf;AACA,iBAAKkE,aAAL,GAAqBlE,KAArB;;AAEA;;;;AAIA,iBAAK0G,iBAAL,GAAyB1G,MAAM7J,IAAN,CAAWA,IAApC;;AAEA;AACA,iBAAKgO,aAAL,GAAqB,IAArB;;AAEA;;;;;AAKA,iBAAKxP,MAAL,CAAYgS,MAAZ;AACH;;AAED;;;;;;;;iDAKyBpF,U,EAAYpL,I,EAAM;;AAEvC;AACAoL,uBAAWqF,OAAX,CAAmBzQ,IAAnB;;AAEA;AACA,iBAAKkH,kBAAL;;AAEA;AACA,iBAAK7F,MAAL,CAAYwN,SAAZ;AACH;;AAED;;;;;;;;8CAKsBxN,M,EAAQwI,K,EAAO;;AAEjC,gBAAIxI,UAAU,IAAV,IAAkBwI,SAAS,IAA/B,EAAqC;;AAEjC;AACA,oBAAIoB,SAASpB,KAAb;AACA,oBAAIsB,OAAOtB,MAAMsB,IAAjB;AACA,oBAAInL,OAAO6J,MAAM7J,IAAjB;;AAEA,oBAAIiL,UAAU,IAAV,IAAkBE,QAAQ,IAA1B,IAAkCnL,QAAQ,IAA9C,EAAoD;;AAEhD;AACAqB,2BAAOqN,MAAP,CAAczD,MAAd;AACA5J,2BAAOqN,MAAP,CAAcvD,IAAd;AACA9J,2BAAOqN,MAAP,CAAc1O,IAAd;;AAEA;AACAqB,2BAAOwN,SAAP;AACH;AACJ;AACJ;;;;;AAED;;;wDAGgC;;AAE5B;AACA,iBAAKnL,2BAAL;;AAEA;;;;AAIA,iBAAKlF,MAAL,CAAY6K,OAAZ,CAAoBqH,uBAApB,CAA4CC,wBAA5C;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAIjR,4BAA4B4E,QAAQsM,QAAR,CAAiB,KAAKxO,mCAAtB,CAAhC;;AAEA;AACA,qBAAKnD,cAAL,CAAoB4R,gBAApB,CAAqC,KAAKtR,MAA1C,EAAkD,KAAKC,WAAvD,EAAoEE,yBAApE;;AAEA;AACA,qBAAKA,yBAAL,GAAiCA,yBAAjC;;AAEA;AACA,qBAAKD,gBAAL,GAAwB,KAAKR,cAAL,CAAoB8E,gBAApB,CAAqCrE,yBAArC,CAAxB;;AAEA;;;;AAIA,qBAAKlB,MAAL,CAAY6K,OAAZ,CAAoBqH,uBAApB,CAA4CC,wBAA5C;AACH,aArBD,CAqBE,OAAM1C,CAAN,EAAS;AACP,qBAAKzP,MAAL,CAAY6K,OAAZ,CAAoBqH,uBAApB,CAA4CI,8BAA5C;AACH;AACJ;;;;;AAED;;;sDAG8B;AAC1B,iBAAK1O,mCAAL,GAA2CkC,QAAQyM,MAAR,CAAe,KAAKrR,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;2DAGmC;;AAE/B,gBAAI,CAAC,KAAKA,yBAAL,CAA+BsR,gBAApC,EAAsD;AAClD;;;;;AAKA,qBAAKtR,yBAAL,CAA+BuR,sBAA/B,GAAwD,IAAxD;AACA,qBAAKvR,yBAAL,CAA+BwR,2BAA/B,GAA6D,IAA7D;AACA,qBAAKxR,yBAAL,CAA+BsN,sBAA/B,GAAwD,IAAxD;;AAEA;AACA,qBAAKtF,6BAAL;AACH;AACJ;;AAED;;;;;;iEAGyC;;AAErC,gBAAI,KAAKhI,yBAAL,CAA+BuR,sBAA/B,IAAyD,IAAzD,IACA,KAAKvR,yBAAL,CAA+BuR,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAKvR,yBAAL,CAA+BwR,2BAA/B,GAA6D,EAA7D;AACH;;AAED;AACA,iBAAKxJ,6BAAL;AACH;;AAED;;;;;;sEAG8C;;AAE1C;AACA,gBAAIuJ,yBAAyB,KAAKvR,yBAAL,CAA+BuR,sBAA5D;;AAEA;AACA,gBAAIjE,yBAAyB,KAAKtN,yBAAL,CAA+BsN,sBAA5D;;AAEA;AACA,gBAAImE,iCAAiC,KAAK1R,gBAAL,CAAsByR,2BAA3D;;AAEA;AACA,gBAAIE,iCAAiC,KAAK1R,yBAAL,CAA+BwR,2BAApE;;AAEA;AACA,gBAAIG,+BAA+B,KAAKpS,cAAL,CAAoBqS,kCAApB,CAAuDL,sBAAvD,EAA+EG,8BAA/E,CAAnC;;AAEA,gBAAIC,gCAAgC,IAAhC,IAAwCA,gCAAgC,EAA5E,EAAgF;AAC5E;;AAEA;AACA,qBAAK3J,6BAAL;AACH,aALD,MAKO,IAAI2J,gCAAgC,IAApC,EAA0C;;AAE7C;AACA,oBAAIE,uBAAuB,KAAK9R,gBAAL,CAAsBuC,IAAjD;;AAEA;AACA,oBAAIwP,mBAAmBH,6BAA6BrP,IAApD;;AAEA;AACA,oBAAIwP,oBAAoBD,oBAAxB,EAA8C;AAC1C;;;;;AAKA;AACA,wBAAIhL,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,qDAAhB,CAAR,CAAb;;AAEA,wBAAIiH,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,4BAAIkL,mBAAmB,KAAKrT,SAAL,CAAeiN,GAAf,CAAmBmG,mBAAmB,SAAtC,CAAvB;;AAEA,4BAAIC,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,gCAAIC,eAAeD,iBAAiBE,eAAjB,EAAnB;;AAEA;AACAD,yCAAavP,EAAb,GAAkB,KAAKzC,yBAAL,CAA+ByC,EAAjD;AACAuP,yCAAaV,gBAAb,GAAgC,IAAhC;AACAU,yCAAaT,sBAAb,GAAsCA,sBAAtC;AACAS,yCAAaR,2BAAb,GAA2CE,8BAA3C;AACAM,yCAAa1E,sBAAb,GAAsCA,sBAAtC;;AAEA;;;;AAIA,iCAAK5K,mCAAL,GAA2CwP,KAAKC,SAAL,CAAeH,YAAf,CAA3C;;AAEA;AACA,iCAAKI,qCAAL;AACH;AACJ,qBA9BD,MA8BO;AACH;;;;AAIA,6BAAKpS,yBAAL,CAA+BwR,2BAA/B,GAA6DC,8BAA7D;AACH;AACJ,iBA9CD,MA8CO;AACH;;;;AAIA,yBAAKzJ,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAIqK,cAAc,KAAK9S,cAAL,CAAoB+S,UAApB,EAAlB;;AAEA,mBAAOD,WAAP;AACH;;AAED;;;;;;;;wDAKgCxS,M,EAAQ;AACpC,gBAAI0S,uBAAuB,KAAKhT,cAAL,CAAoBiT,+BAApB,CAAoD3S,MAApD,CAA3B;;AAEA,mBAAO0S,oBAAP;AACH;;AAED;;;;;;;;8CAKsB1S,M,EAAQ;AAC1B,gBAAI4S,aAAa,KAAKlT,cAAL,CAAoBmT,qBAApB,CAA0C7S,MAA1C,CAAjB;;AAEA,mBAAO4S,UAAP;AACH;;AAED;;;;;;;;0CAKkB5S,M,EAAQ;AACtB,gBAAIgN,SAAS,KAAKtN,cAAL,CAAoBoT,iBAApB,CAAsC9S,MAAtC,CAAb;;AAEA,mBAAOgN,MAAP;AACH;;AAED;;;;;;mDAG2B;;AAEvB;AACA,gBAAI8B,WAAW,EAAf;AACAA,qBAASrO,IAAT,GAAgB,KAAKV,UAAL,CAAgB,qBAAhB,CAAhB;AACA+O,qBAASnE,KAAT,GAAiB,MAAjB;AACAmE,qBAASvE,MAAT,GAAkB,GAAlB;AACAuE,qBAAStE,MAAT,GAAkB,GAAlB;AACAsE,qBAASrE,KAAT,GAAiB,GAAjB;AACAqE,qBAASpE,KAAT,GAAiB,CAAC,EAAlB;;AAEA;AACA,iBAAKvK,yBAAL,CAA+BuJ,MAA/B,CAAsC+B,IAAtC,CAA2CqD,QAA3C;;AAEA;AACA,iBAAK3G,6BAAL;AACH;;AAED;;;;;;;oDAI4B4K,K,EAAOzI,K,EAAO;;AAEtC;AACA,gBAAI0G,oBAAoB1G,MAAM7J,IAA9B;;AAEA;AACA,gBAAIuG,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,0CAAhB,EAA4D,EAAEiR,mBAAmBA,iBAArB,EAA5D,CAAR,CAAb;;AAEA,gBAAIhK,MAAJ,EAAY;AACR;;AAEA;AACA,qBAAK7G,yBAAL,CAA+BuJ,MAA/B,CAAsCyD,MAAtC,CAA6C4F,KAA7C,EAAoD,CAApD;;AAEA;AACA,qBAAK5K,6BAAL;AACH;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAI6K,UAAU,IAAd;;AAEA,gBAAI,KAAKlR,MAAL,IAAe,IAAnB,EAAyB;;AAErB;AACA,oBAAImR,UAAU,KAAKnR,MAAL,CAAYoR,SAAZ,CAAsB,WAAtB,CAAd;;AAEA;AACAF,0BAAU,KAAKnT,WAAL,CAAiBsT,8BAAjB,CAAgDF,OAAhD,CAAV;AACH;;AAED,mBAAOD,OAAP;AACH;;AAED;;;;;;;;uCAKehI,O,EAAStK,I,EAAM;AAC1B,iBAAKF,WAAL,CAAiBC,IAAjB,GAAwBuK,OAAxB;AACA,iBAAKxK,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACH;;;;;AAED;;;;8CAIsB;AAClB,gBAAI,KAAKlB,eAAL,CAAqB4T,iBAArB,MAA4C,KAAK5R,wBAArD,EAA+E;AAC3E,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;kCAIU6R,M,EAAQ;;AAEd;AACA,gBAAIvR,SAASiD,QAAQ8B,OAAR,CAAgB,MAAM,KAAKzE,QAA3B,CAAb;;AAEA,gBAAIN,UAAU,IAAV,IAAkBA,OAAOqF,MAAP,GAAgB,CAAtC,EAAyC;;AAErC;AACArF,yBAASA,OAAO,CAAP,CAAT;;AAEA;AACA,oBAAImR,UAAUnR,OAAOoR,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,oBAAI3M,cAAc,KAAK1G,WAAL,CAAiBsT,8BAAjB,CAAgDF,OAAhD,CAAlB;;AAEA;AACA,qBAAKzT,eAAL,CAAqB8T,UAArB,CAAgCD,MAAhC,EAAwC9M,WAAxC;AACH;AACJ;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAKgN,YAAL,GAAoB,KAAKtU,MAAL,CAAYyG,GAAZ,CAAgB,MAAhB,EAAwBX,QAAQV,IAAR,CAAa,IAAb,EAAmB,UAASsB,KAAT,EAAgBC,IAAhB,EAAsB,CAEpF,CAF2C,CAAxB,CAApB;AAGH;;;;;AAED;;;;;yCAKiB4N,S,EAAW;AACxB,gBAAIxG,SAAS,IAAb;;AAEA,gBAAIwG,aAAa,IAAjB,EAAuB;AACnBxG,yBAAS,KAAKtN,cAAL,CAAoB+T,gBAApB,CAAqCD,SAArC,CAAT;AACH;;AAED,mBAAOxG,MAAP;AACH;;AAED;;;;;;6DAGqC;;AAEjC,gBAAI,CAAC,KAAK7M,yBAAL,CAA+BuT,kBAApC,EAAwD;AACpD;;;;;AAKA,qBAAKvT,yBAAL,CAA+BkJ,wBAA/B,GAA0D,IAA1D;AACA,qBAAKlJ,yBAAL,CAA+BmJ,6BAA/B,GAA+D,IAA/D;;AAEA;AACA,qBAAKnB,6BAAL;AACH;AACJ;;AAED;;;;;;mEAG2C;;AAEvC,gBAAI,KAAKhI,yBAAL,CAA+BkJ,wBAA/B,IAA2D,IAA3D,IACA,KAAKlJ,yBAAL,CAA+BkJ,wBAA/B,IAA2D,EAD/D,EACmE;;AAE/D;;;;AAIA,qBAAKlJ,yBAAL,CAA+BmJ,6BAA/B,GAA+D,EAA/D;AACH;;AAED;AACA,iBAAKnB,6BAAL;AACH;;AAED;;;;;;wEAGgD;;AAE5C;AACA,iBAAKA,6BAAL;AACH;;AAED;;;;;;iDAGyB;;AAErB,gBAAI,KAAKqG,aAAL,IAAsB,IAA1B,EAAgC;AAC5B;;;;;AAKA;;;;AAIA,qBAAKA,aAAL,GAAqB,IAArB;;AAEA;AACA,qBAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,qBAAK3M,MAAL,CAAY6R,mBAAZ;AACH;AACJ;;AAED;;;;;;mDAG2B;;AAEvB,gBAAI,KAAKnF,aAAL,IAAsB,IAA1B,EAAgC;;AAE5B;AACA,oBAAIwC,oBAAoB,KAAKA,iBAA7B;;AAEA;AACA,qBAAKxC,aAAL,CAAmB/N,IAAnB,CAAwByQ,OAAxB,CAAgCF,iBAAhC;;AAEA;AACA,qBAAKA,iBAAL,GAAyB,IAAzB;;AAEA;;;;AAIA,qBAAKxC,aAAL,GAAqB,IAArB;;AAEA;AACA,qBAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,qBAAK3M,MAAL,CAAY6R,mBAAZ;;AAEA;AACA,qBAAKhM,kBAAL;;AAEA;AACA,qBAAK7F,MAAL,CAAYwN,SAAZ;AACH;AACJ;;AAED;;;;;;mDAG2B;;AAEvB,gBAAI,KAAKd,aAAL,IAAsB,IAA1B,EAAgC;;AAE5B;AACA,oBAAIwC,oBAAoB,KAAKxC,aAAL,CAAmB/N,IAAnB,CAAwBA,IAAhD;;AAEA;AACA,oBAAIuG,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,0CAAhB,EAA4D,EAAEiR,mBAAmBA,iBAArB,EAA5D,CAAR,CAAb;;AAEA,oBAAIhK,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,wBAAI0E,SAAS,KAAK8C,aAAL,CAAmB9C,MAAhC;;AAEA,wBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,6BAAKkE,qBAAL,CAA2B,KAAK9N,MAAhC,EAAwC4J,MAAxC;;AAEA;;;;AAIA,6BAAK8C,aAAL,GAAqB,IAArB;;AAEA;AACA,6BAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,6BAAK3M,MAAL,CAAY6R,mBAAZ;;AAEA;AACA,6BAAKhM,kBAAL;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;sDAG8B;;AAE1B;AACA,gBAAIiM,OAAO,KAAKnQ,oBAAhB;;AAEA;;;;;;;AAOAmQ,mBAAO,KAAKvU,aAAL,CAAmBwU,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,mBAAO,KAAK/T,WAAL,CAAiBiU,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,iBAAKzT,yBAAL,CAA+BuD,MAA/B,GAAwCkQ,IAAxC;;AAEA;AACA,iBAAKzL,6BAAL;AACH;;AAGD;;;;;;gDAGwB;;AAEpB;AACA,gBAAI4L,SAAS,EAAb;AACAA,mBAAOC,OAAP,GAAiB,IAAjB;AACAD,mBAAO/T,MAAP,GAAgB,KAAKA,MAArB;AACA+T,mBAAO9T,WAAP,GAAqB,KAAKA,WAA1B;AACA8T,mBAAO7L,MAAP,GAAgB,YAAhB;;AAEA;AACA,iBAAKlJ,UAAL,CAAgBiV,UAAhB,CAA2B,kBAA3B,EAA+CF,MAA/C;AACH;;AAED;;;;;;gDAGwB;;AAEpB;;;;AAIA,gBAAIG,wBAAwB,EAA5B;AACAA,kCAAsBlU,MAAtB,GAA+B,KAAKA,MAApC;AACAkU,kCAAsBjU,WAAtB,GAAoC,IAApC;AACAiU,kCAAsBC,QAAtB,GAAiC,QAAjC;;AAEA;AACA,gBAAI,KAAKhU,yBAAL,CAA+BiU,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAKjU,yBAAL,CAA+BiU,mBAA/B,GAAqD,EAArD;AACH;;AAED;AACA,iBAAKjU,yBAAL,CAA+BiU,mBAA/B,CAAmD3I,IAAnD,CAAwDyI,qBAAxD;;AAEA;AACA,iBAAK/L,6BAAL;AACH;;AAED;;;;;;;iDAIyB4K,K,EAAO;;AAE5B,gBAAI,KAAK5S,yBAAL,CAA+BiU,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAKjU,yBAAL,CAA+BiU,mBAA/B,CAAmDjH,MAAnD,CAA0D4F,KAA1D,EAAiE,CAAjE;AACH;;AAED;AACA,iBAAK5K,6BAAL;AACH;;AAED;;;;;;;iDAIyBkM,I,EAAM;;AAE3B,gBAAIA,QAAQ,IAAR,IAAgBA,QAAQ,KAA5B,EAAmC;AAC/B;AACA,qBAAKlU,yBAAL,CAA+BkD,cAA/B,GAAgD,KAAhD;AACA,qBAAKlD,yBAAL,CAA+BmD,gBAA/B,GAAkD,KAAlD;AACH,aAJD,MAIO;AACH;AACA,qBAAKnD,yBAAL,CAA+BkD,cAA/B,GAAgD,IAAhD;AACA,qBAAKlD,yBAAL,CAA+BmD,gBAA/B,GAAkD,IAAlD;AACH;;AAED;;;;;AAKA,iBAAKrE,MAAL,CAAY+G,KAAZ,CAAkB,uCAAlB,EAA2D,EAAChG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAAqDqD,kBAAkB+Q,IAAvE,EAA3D;AACH;;AAED;;;;;;uDAG+B;;AAE3B;;;;AAIA,iBAAKC,wBAAL,CAA8B,KAAKnU,yBAAL,CAA+BmD,gBAA7D;;AAEA;AACA,iBAAK6E,6BAAL;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAInB,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,+CAAhB,CAAR,CAAb;;AAEA,gBAAIiH,MAAJ,EAAY;AACR;;AAEA;AACA,oBAAI0C,SAAS,KAAK8C,SAAL,EAAb;;AAEA;;;;AAIA,oBAAI+H,gBAAgB,KAAK1U,WAAL,CAAiB2U,oBAAjB,CAAsC9K,MAAtC,CAApB;;AAEA;AACA6K,8BAAcE,IAAd,CAAmB,KAAKC,mBAAxB;;AAEA;AACA,qBAAKvU,yBAAL,CAA+BuJ,MAA/B,GAAwC6K,aAAxC;;AAEA;AACA,qBAAKpM,6BAAL;AACH;AACJ;;AAED;;;;;;;;;;;;4CASoBwM,M,EAAQC,M,EAAQ;;AAEhC,gBAAID,OAAOlU,IAAP,GAAcmU,OAAOnU,IAAzB,EAA+B;AAC3B;AACA,uBAAO,CAAC,CAAR;AACH,aAHD,MAGO,IAAIkU,OAAOlU,IAAP,GAAcmU,OAAOnU,IAAzB,EAA+B;AAClC;AACA,uBAAO,CAAP;AACH,aAHM,MAGA;AACH;;;;;AAKA,oBAAIkU,OAAOhK,KAAP,GAAeiK,OAAOjK,KAA1B,EAAiC;AAC7B;AACA,2BAAO,CAAC,CAAR;AACH,iBAHD,MAGO,IAAIgK,OAAOhK,KAAP,GAAeiK,OAAOjK,KAA1B,EAAiC;AACpC;AACA,2BAAO,CAAP;AACH,iBAHM,MAGA;AACH;;;;;AAKA,wBAAIgK,OAAOpK,MAAP,GAAgBqK,OAAOrK,MAA3B,EAAmC;AAC/B;AACA,+BAAO,CAAC,CAAR;AACH,qBAHD,MAGO,IAAIoK,OAAOpK,MAAP,GAAgBqK,OAAOrK,MAA3B,EAAmC;AACtC;AACA,+BAAO,CAAP;AACH,qBAHM,MAGA;AACH;;;;;AAKA,4BAAIoK,OAAOnK,MAAP,GAAgBoK,OAAOpK,MAA3B,EAAmC;AAC/B;AACA,mCAAO,CAAC,CAAR;AACH,yBAHD,MAGO,IAAImK,OAAOnK,MAAP,GAAgBoK,OAAOpK,MAA3B,EAAmC;AACtC;AACA,mCAAO,CAAP;AACH,yBAHM,MAGA;AACH;;;;AAIA,mCAAO,CAAP;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;;8CAGsB;;AAElB;;;;AAIA,gBAAIxD,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,oDAAhB,CAAR,CAAb;;AAEA,gBAAIiH,MAAJ,EAAY;AACR;;AAEA;AACA,qBAAK7G,yBAAL,CAA+BuJ,MAA/B,GAAwC,EAAxC;;AAEA;AACA,qBAAKvB,6BAAL;AACH;AACJ;;AAED;;;;;;0CAGkB;;AAEd;AACA,iBAAKhJ,OAAL,CAAa0V,IAAb,CAAkB,8CAAlB;AACH;;AAED;;;;;;iCAGS;;AAEL,gBAAI,KAAK1U,yBAAL,CAA+B2U,IAA/B,IAAuC,IAA3C,EAAiD;AAC7C;AACA,qBAAK3U,yBAAL,CAA+B2U,IAA/B,GAAsC,EAAtC;AACH;;AAED;AACA,iBAAK3U,yBAAL,CAA+B2U,IAA/B,CAAoCrJ,IAApC,CAAyC,EAAzC;;AAEA;AACA,iBAAKtD,6BAAL;AACH;;AAED;;;;;;;kCAIU4K,K,EAAO;;AAEb,gBAAIA,QAAQ,CAAZ,EAAe;AACX;;AAEA;AACA,oBAAIgC,MAAM,KAAK5U,yBAAL,CAA+B2U,IAA/B,CAAoC/B,KAApC,CAAV;;AAEA;AACA,qBAAK5S,yBAAL,CAA+B2U,IAA/B,CAAoC3H,MAApC,CAA2C4F,KAA3C,EAAkD,CAAlD;;AAEA;AACA,qBAAK5S,yBAAL,CAA+B2U,IAA/B,CAAoC3H,MAApC,CAA2C4F,QAAQ,CAAnD,EAAsD,CAAtD,EAAyDgC,GAAzD;AACH;;AAED;AACA,iBAAK5M,6BAAL;AACH;;AAED;;;;;;;oCAIY4K,K,EAAO;;AAEf,gBAAIA,QAAQ,KAAK5S,yBAAL,CAA+B2U,IAA/B,CAAoC3N,MAApC,GAA6C,CAAzD,EAA4D;AACxD;;AAEA;AACA,oBAAI4N,MAAM,KAAK5U,yBAAL,CAA+B2U,IAA/B,CAAoC/B,KAApC,CAAV;;AAEA;AACA,qBAAK5S,yBAAL,CAA+B2U,IAA/B,CAAoC3H,MAApC,CAA2C4F,KAA3C,EAAkD,CAAlD;;AAEA;AACA,qBAAK5S,yBAAL,CAA+B2U,IAA/B,CAAoC3H,MAApC,CAA2C4F,QAAQ,CAAnD,EAAsD,CAAtD,EAAyDgC,GAAzD;AACH;;AAED;AACA,iBAAK5M,6BAAL;AACH;;AAED;;;;;;;kCAIU4K,K,EAAO;;AAEb;AACA,gBAAI/L,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,kCAAhB,CAAR,CAAb;;AAEA,gBAAIiH,MAAJ,EAAY;AACR;;AAEA;AACA,qBAAK7G,yBAAL,CAA+B2U,IAA/B,CAAoC3H,MAApC,CAA2C4F,KAA3C,EAAkD,CAAlD;AACH;;AAED;AACA,iBAAK5K,6BAAL;AACH;;AAED;;;;;;oDAG4B;;AAExB;AACA,gBAAIiM,sBAAsB,KAAKlU,gBAAL,CAAsBkU,mBAAhD;;AAEA,gBAAIA,uBAAuB,IAA3B,EAAiC;;AAE7B,oBAAIxH,kBAAkB,EAAtB;;AAEA;AACA,qBAAK,IAAIoI,IAAI,CAAb,EAAgBA,IAAIZ,oBAAoBjN,MAAxC,EAAgD6N,GAAhD,EAAqD;AACjD,wBAAIC,qBAAqBb,oBAAoBY,CAApB,CAAzB;;AAEA,wBAAIC,sBAAsB,IAA1B,EAAgC;AAC5B,4BAAIjV,SAASiV,mBAAmBjV,MAAhC;AACA,4BAAIC,cAAcgV,mBAAmBhV,WAArC;AACA,4BAAIwC,OAAOwS,mBAAmBxS,IAA9B;;AAEA,4BAAIA,QAAQ,UAAZ,EAAwB;AACpB;;AAEA;AACA,gCAAIS,iBAAiB,KAAKtD,kBAAL,CAAwBwK,6CAAxB,CAAsEpK,MAAtE,EAA8EC,WAA9E,CAArB;;AAEA,gCAAIiD,kBAAkB,IAAtB,EAA4B;AACxB0J,gDAAgBnB,IAAhB,CAAqB,KAAK5L,WAAL,CAAiB2U,oBAAjB,CAAsCtR,cAAtC,CAArB;AACH;;AAED;AACA,iCAAK7C,UAAL,GAAkB,IAAlB;AACH,yBAZD,MAYO,IAAIoC,QAAQ,YAAR,IAAwBA,QAAQ,IAApC,EAA0C;AAC7C;;AAEA;AACA,gCAAIS,iBAAiB,KAAKtD,kBAAL,CAAwBwK,6CAAxB,CAAsEpK,MAAtE,EAA8EC,WAA9E,CAArB;;AAEA,gCAAIiD,kBAAkB,IAAtB,EAA4B;AACxB0J,gDAAgBnB,IAAhB,CAAqB,KAAK5L,WAAL,CAAiB2U,oBAAjB,CAAsCtR,cAAtC,CAArB;AACH;AACJ;AACJ;AACJ;;AAED;AACA,oBAAIgS,uBAAuB,KAAKC,0BAAL,CAAgCvI,eAAhC,CAA3B;;AAEA;AACA,qBAAKzD,cAAL,CAAoB+L,oBAApB;;AAEA,oBAAI,KAAKhV,gBAAL,CAAsBmC,eAAtB,IAAyC,IAAzC,IACI,KAAKnC,gBAAL,CAAsBmC,eAAtB,IAAyC,EADjD,EACqD;AACjD;;;;AAIA,yBAAKqF,kBAAL,CAAwB,KAAKxH,gBAAL,CAAsBmC,eAA9C;AACH;;AAED;AACA,qBAAKsF,kBAAL;AACH;AACJ;;AAED;;;;;;;;mDAK2BiF,e,EAAiB;;AAExC,gBAAIsI,uBAAuB,KAAK3V,WAAL,CAAiBgN,uBAAjB,EAA3B;;AAEA,gBAAIK,mBAAmB,IAAvB,EAA6B;AACzB,oBAAIwI,eAAe,EAAnB;AACA,oBAAIC,wBAAwB,IAA5B;AACA,qBAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIpI,gBAAgBzF,MAApC,EAA4C6N,GAA5C,EAAiD;AAC7C,wBAAI9R,iBAAiB0J,gBAAgBoI,CAAhB,CAArB;AACA,wBAAI9R,kBAAkB,IAAtB,EAA4B;AACxB,4BAAI+G,cAAc/G,eAAe+G,WAAjC;AACA,4BAAIA,eAAe,IAAnB,EAAyB;AACrB,gCAAIP,SAASO,YAAYP,MAAzB;AACA,gCAAIrH,kBAAkB4H,YAAY5H,eAAlC;AACA,gCAAIqH,UAAU,IAAV,IAAkBA,UAAU,EAAhC,EAAoC;AAChC0L,+CAAeA,aAAaE,MAAb,CAAoB5L,MAApB,CAAf;AACH;AACD,gCAAIrH,mBAAmB,IAAnB,IAA2BA,mBAAmB,EAAlD,EAAsD;AAClDgT,wDAAwBhT,eAAxB;AACH;AACJ;AACJ;AACJ;;AAED,oBAAI+S,gBAAgB,IAApB,EAA0B;AACtBF,yCAAqBjL,WAArB,GAAmC,EAAnC;AACAiL,yCAAqBjL,WAArB,CAAiCP,MAAjC,GAA0C0L,YAA1C;AACAF,yCAAqBjL,WAArB,CAAiC5H,eAAjC,GAAmDgT,qBAAnD;AACH;AACJ;;AAED,mBAAOH,oBAAP;AACH;;AAED;;;;;;yDAGiC;;AAE7B;;;;AAIA,gBAAIhB,wBAAwB,EAA5B;AACAA,kCAAsBlU,MAAtB,GAA+B,KAAKA,MAApC;AACAkU,kCAAsBjU,WAAtB,GAAoC,IAApC;AACAiU,kCAAsBzR,IAAtB,GAA6B,IAA7B;AACA,iBAAK8S,gEAAL,CAAsErB,qBAAtE;;AAEA;AACA,gBAAI,KAAK/T,yBAAL,CAA+BiU,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAKjU,yBAAL,CAA+BiU,mBAA/B,GAAqD,EAArD;AACH;;AAED;AACA,iBAAKjU,yBAAL,CAA+BiU,mBAA/B,CAAmD3I,IAAnD,CAAwDyI,qBAAxD;;AAEA;AACA,iBAAK/L,6BAAL;AACH;;AAED;;;;;;;;yFAKiE8M,kB,EAAoB;AACjF,gBAAIA,sBAAsB,IAA1B,EAAgC;AAC5B,oBAAIrC,aAAa,KAAKC,qBAAL,CAA2BoC,mBAAmBjV,MAA9C,CAAjB;AACA,oBAAI4S,cAAc,IAAlB,EAAwB;AACpB,wBAAI4C,4BAA4B,CAAhC;AACA,wBAAIC,mBAAmB,IAAvB;AAFoB;AAAA;AAAA;;AAAA;AAGpB,6CAAsB7C,UAAtB,8HAAkC;AAAA,gCAAzBY,SAAyB;;AAC9B,gCAAIA,aAAa,IAAjB,EAAuB;AACnB,oCAAI,KAAKkC,+BAAL,CAAqClC,UAAU/Q,IAA/C,KACI+Q,UAAU5Q,EAAV,IAAgB,KAAK3C,WAD7B,EAC0C;AACtC;AACAuV,iEAA6B,CAA7B;AACAC,uDAAmBjC,SAAnB;AACH;AACJ;AACJ;AAZmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcpB,wBAAIgC,6BAA6B,CAAjC,EAAoC;AAChC;;;;AAIAP,2CAAmBhV,WAAnB,GAAiCwV,iBAAiB7S,EAAlD;AACAqS,2CAAmBxS,IAAnB,GAA0B,YAA1B;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;0DAIkCsQ,K,EAAO;;AAErC;AACA,gBAAI/L,SAASC,QAAQ,KAAKlH,UAAL,CAAgB,iDAAhB,CAAR,CAAb;;AAEA,gBAAIiH,MAAJ,EAAY;AACR;;AAEA,oBAAI,KAAK7G,yBAAL,CAA+BiU,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,yBAAKjU,yBAAL,CAA+BiU,mBAA/B,CAAmDjH,MAAnD,CAA0D4F,KAA1D,EAAiE,CAAjE;AACH;;AAED;AACA,qBAAK5K,6BAAL;AACH;AACJ;;AAED;;;;;;;;2DAKmC8M,kB,EAAoB;;AAEnD,gBAAIU,yBAAyB,IAA7B;;AAEA,gBAAIV,sBAAsB,IAA1B,EAAgC;;AAE5B;AACA,oBAAIjV,SAASiV,mBAAmBjV,MAAhC;AACA,oBAAIC,cAAcgV,mBAAmBhV,WAArC;;AAEA;AACA,oBAAIuT,YAAY,KAAK9T,cAAL,CAAoBqS,kCAApB,CAAuD/R,MAAvD,EAA+DC,WAA/D,CAAhB;;AAEA,oBAAIuT,aAAa,IAAjB,EAAuB;AACnB;AACAmC,6CAAyBnC,UAAU/Q,IAAnC;AACH;AACJ;;AAED,mBAAOkT,sBAAP;AACH;;AAED;;;;;;;iEAIyCV,kB,EAAoB;AACzD,gBAAIA,sBAAsB,IAA1B,EAAgC;AAC5BA,mCAAmBhV,WAAnB,GAAiC,IAAjC;AACAgV,mCAAmBxS,IAAnB,GAA0B,IAA1B;AACA,qBAAK8S,gEAAL,CAAsEN,kBAAtE;;AAEA;AACA,qBAAK9M,6BAAL;AACH;AACJ;;AAED;;;;;;;sEAI8C8M,kB,EAAoB;;AAE9D,gBAAIA,sBAAsB,IAA1B,EAAgC;;AAE5B;AACAA,mCAAmBxS,IAAnB,GAA0B,YAA1B;;AAEA;AACA,qBAAK0F,6BAAL;AACH;AACJ;;AAED;;;;;;;+DAIuC8M,kB,EAAoB;;AAEvD,gBAAIA,sBAAsB,IAA1B,EAAgC;;AAE5B,oBAAIA,mBAAmBxS,IAAnB,IAA2B,YAA/B,EAA6C;AACzC;;;AAGH,iBAJD,MAIO,IAAIwS,mBAAmBxS,IAAnB,IAA2B,UAA/B,EAA2C,CAIjD;AAHG;;;;;AAKJ;AACA,qBAAK0F,6BAAL;AACH;AACJ;;AAED;;;;;;;;wDAKgCsE,a,EAAe;;AAE3C,gBAAIA,iBAAiB,IAArB,EAA2B;;AAEvB,oBAAIjK,iCAAiC,KAAKA,8BAA1C;;AAEA;AACA,qBAAK,IAAIoT,IAAI,CAAb,EAAgBA,IAAIpT,+BAA+B2E,MAAnD,EAA2DyO,GAA3D,EAAgE;AAC5D,wBAAIC,gCAAgCrT,+BAA+BoT,CAA/B,CAApC;;AAEA,wBAAIC,iCAAiC,IAArC,EAA2C;AACvC,4BAAIpJ,iBAAiBoJ,8BAA8BpT,IAAnD,EAAyD;AACrD;AACA,mCAAO,IAAP;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO,KAAP;AACH;;AAED;;;;;;gDAGwB;AACpB;AACA,iBAAKrB,iBAAL,GAAyB,CAAC,KAAKA,iBAA/B;;AAEA,gBAAI,KAAK0U,iBAAL,IAA0B,CAAC,KAAK1U,iBAApC,EAAuD;AACnD;;;;AAIA,qBAAKmR,qCAAL;;AAEA;AACA,qBAAKvT,UAAL,CAAgBiV,UAAhB,CAA2B,mBAA3B,EAAgD,EAAEhU,aAAa,KAAKA,WAApB,EAAhD;;AAEA,qBAAK6V,iBAAL,GAAyB,KAAzB;AACH;AACJ;;AAED;;;;;;+CAGuB;AACnB,iBAAKA,iBAAL,GAAyB,IAAzB;AACH;;;;;;AAGLnX,gBAAgBoX,OAAhB,GAA0B,CACtB,SADsB,EAEtB,WAFsB,EAGtB,WAHsB,EAItB,IAJsB,EAKtB,YALsB,EAMtB,QANsB,EAOtB,UAPsB,EAQtB,SARsB,EAStB,mBATsB,EAUtB,eAVsB,EAWtB,cAXsB,EAYtB,aAZsB,EAatB,iBAbsB,EActB,qBAdsB,EAetB,gBAfsB,EAgBtB,qBAhBsB,EAiBtB,oBAjBsB,EAkBtB,aAlBsB,CAA1B;;kBAqBepX,e","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $filter,\n        $injector,\n        $mdDialog,\n        $q,\n        $rootScope,\n        $scope,\n        $timeout,\n        $window,\n        AnnotationService,\n        ConfigService,\n        LabelService,\n        NodeService,\n        NotebookService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService,\n        UtilService\n    ) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$window = $window;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the snip image button is shown or not\n        this.isSnipImageButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'Label'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            this.canvasId = 'canvas_' + this.nodeId + '_' + this.componentId;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    // create a unique id for the application label element using this component state\n                    this.canvasId = \"labelCanvas_\" + componentState.id;\n                    if (this.mode === 'gradingRevision') {\n                        this.canvasId = \"labelCanvas_gradingRevision_\" + componentState.id;\n                    }\n                }\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    // the canvas width\n                    this.canvasWidth = 800;\n\n                    // the canvas height\n                    this.canvasHeight = 600;\n\n                    this.submitCounter = 0;\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent_' + this.canvasId).empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent_' + this.canvasId).append(canvas);\n\n                        /*\n                         * clear the background so that setupCanvas() can\n                         * reapply the background\n                         */\n                        this.backgroundImage = null;\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.labelController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.labelController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.labelController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        /**\n         * The student has changed the file input\n         * @param element the file input element\n         */\n        this.$scope.fileUploadChanged = function(element) {\n\n            // get the current background image if any\n            var backgroundImage = this.labelController.getBackgroundImage();\n\n            var overwrite = true;\n\n            if (backgroundImage != null && backgroundImage != '') {\n                /*\n                 * there is an existing background image so we will ask the\n                 * student if they want to change it\n                 */\n                var answer = confirm(this.labelController.$translate('label.areYouSureYouWantToChangeTheBackgroundImage'));\n\n                if (answer) {\n                    // the student wants to change the background image\n                    overwrite = true;\n                } else {\n                    // the student does not want to change the background image\n                    overwrite = false;\n\n                    /*\n                     * clear the input file value otherwise it will show the\n                     * name of the file they recently selected but decided not\n                     * to use because they decided not to change the background\n                     * image\n                     */\n                    element.value = null;\n                }\n            }\n\n            if (overwrite) {\n                // we will change the current background\n\n                // get the files from the file input element\n                var files = element.files;\n\n                if (files != null && files.length > 0) {\n\n                    // upload the file to the studentuploads folder\n                    this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\n\n                        // make a referenced copy of the unreferenced asset\n                        this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n\n                            if (referencedAsset != null) {\n                                // get the url of the referenced asset\n                                var imageURL = referencedAsset.url;\n\n                                if (imageURL != null && imageURL != '') {\n\n                                    // set the referenced asset as the background image\n                                    this.labelController.setBackgroundImage(imageURL);\n                                    this.labelController.studentDataChanged();\n                                }\n                            }\n                        });\n                    });\n                }\n            }\n        }\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'background') {\n                                // the target is the background image\n\n                                // set the background file name\n                                this.authoringComponentContent.backgroundImage = fileName;\n\n                                // the authoring component content has changed so we will save the project\n                                this.authoringViewComponentChanged();\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n        /*\n         * The advanced button for a component was clicked. If the button was\n         * for this component, we will show the advanced authoring.\n         */\n        this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n            if (args != null) {\n                let componentId = args.componentId;\n                if (this.componentId === componentId) {\n                    this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n                }\n            }\n        });\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (this.mode == 'student') {\n            if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                // we will show work from another component\n                this.handleConnectedComponents();\n            }  else if (this.LabelService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                /*\n                 * the student has work so we will populate the work into this\n                 * component\n                 */\n                this.setStudentWork(componentState);\n            } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                // we will import work from another component\n                this.handleConnectedComponents();\n            } else if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.labels != null) {\n                    /*\n                     * the student has not done any work and there are starter labels\n                     * so we will populate the canvas with the starter labels\n                     */\n                    this.addLabelsToCanvas(this.componentContent.labels);\n                }\n            }\n        } else if (this.mode === 'grading') {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        } else {\n            if (componentState == null && this.componentContent.labels != null) {\n                // populate the canvas with the starter labels\n                this.addLabelsToCanvas(this.componentContent.labels);\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n            /*\n             * the student has used up all of their chances to submit so we\n             * will disable the submit button\n             */\n            this.isSubmitButtonDisabled = true;\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.nodeController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n\n        //this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        //this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n                    // the student does not have any more chances to submit\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n                    /*\n                     * the student has one more chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                } else if (numberOfSubmitsLeft > 1) {\n                    /*\n                     * the student has more than one chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        /*\n         * get all the circle objects from the canvas which each correspond to\n         * a label point\n         */\n        var objects = this.canvas.getObjects('circle');\n\n        if (objects != null) {\n\n            // loop through all the circle objects\n            for (var x = 0; x < objects.length; x++) {\n\n                /*\n                 * the object is a circle which contains all the data\n                 * for a label\n                 */\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the simple JSON object that represents the label\n                    var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                    if (labelJSONObject != null) {\n                        // add the object to our array of labels\n                        labels.push(labelJSONObject);\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        // set the component type\n        componentState.componentType = 'Label';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.LabelService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        if (this.componentContent.width != null && this.componentContent.width != '') {\n            this.canvasWidth = this.componentContent.width;\n        }\n\n        if (this.componentContent.height != null && this.componentContent.height != '') {\n            this.canvasHeight = this.componentContent.height;\n        }\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // set the height on the parent div so that a vertical scrollbar doesn't show up\n        $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n\n            // get the object that was clicked on if any\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject == null) {\n                /*\n                 * no objects in the canvas were clicked. the user clicked\n                 * on a blank area of the canvas so we will unselect any label\n                 * that was selected and turn off edit label mode\n                 */\n                this.selectedLabel = null;\n                this.editLabelMode = false;\n            }\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n\n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, this.$translate('label.aNewLabel'), 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n\n                    /*\n                     * make the new label selected so that the student can edit\n                     * the text\n                     */\n                    this.selectLabel(newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        let radius = 5;\n        if (this.componentContent.pointSize != null &&\n                this.componentContent.pointSize != '') {\n            radius = parseFloat(this.componentContent.pointSize);\n        }\n\n        let fontSize = 20;\n        if (this.componentContent.fontSize != null &&\n                this.componentContent.fontSize != '') {\n            fontSize = parseFloat(this.componentContent.fontSize);\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: radius,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            borderColor: 'red',\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: true,\n            borderColor: 'red',\n            selectable: true,\n            cursorWidth: 0,\n            editable: false\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                circle.on('selected', () => {\n                    /*\n                     * the circle was clicked so we will make the associated\n                     * label selected\n                     */\n                    this.selectLabel(label);\n                });\n\n                text.on('selected', () => {\n                    /*\n                     * the text was clicked so we will make the associated\n                     * label selected\n                     */\n                    this.selectLabel(label);\n                });\n            }\n        }\n    };\n\n    /**\n     * Make the label selected which means we will show the UI elements to\n     * allow the text to be edited and the label to deleted.\n     * @param label the label object\n     */\n    selectLabel(label) {\n\n        // create a reference to the selected label\n        this.selectedLabel = label;\n\n        /*\n         * remember the label text before the student changes it in case the\n         * student wants to cancel any changes they make\n         */\n        this.selectedLabelText = label.text.text;\n\n        // turn on edit label mode\n        this.editLabelMode = true;\n\n        /*\n         * force angular to refresh, otherwise angular will wait until the\n         * user generates another input (such as moving the mouse) before\n         * refreshing\n         */\n        this.$scope.$apply();\n    }\n\n    /**\n     * The student has changed the label text on the selected label\n     * @param textObject the label's canvas text object\n     * @param text the text string\n     */\n    selectedLabelTextChanged(textObject, text) {\n\n        // set the text into the object\n        textObject.setText(text);\n\n        // notify the controller that the student data has changed\n        this.studentDataChanged();\n\n        // refresh the canvas\n        this.canvas.renderAll();\n    }\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = this.$translate('label.enterTextHere');\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index, label) {\n\n        // get the label text\n        var selectedLabelText = label.text;\n\n        // ask the author if they are sure they want to delete this label\n        var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n        if (answer) {\n            // the author answered yes to delete the label\n\n            // delete the label from the array\n            this.authoringComponentContent.labels.splice(index, 1);\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check whether we need to show the snip image button\n     * @return whether to show the snip image button\n     */\n    showSnipImageButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the labels by converting it to an image\n     * @param $event the click event\n     */\n    snipImage($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#' + this.canvasId);\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The student clicked the save button in the edit label mode\n     */\n    saveLabelButtonClicked() {\n\n        if (this.selectedLabel != null) {\n            /*\n             * we do not need to perform any saving of the text since it has\n             * already been handled by the ng-model for the label text\n             */\n\n            /*\n             * remove the reference to the selected label since it will no\n             * longer be selected\n             */\n            this.selectedLabel = null;\n\n            // turn off edit label mode\n            this.editLabelMode = false;\n\n            // make the canvas object no longer the active object\n            this.canvas.discardActiveObject();\n        }\n    }\n\n    /**\n     * The student clicked the cancel button in the edit label mode\n     */\n    cancelLabelButtonClicked() {\n\n        if (this.selectedLabel != null) {\n\n            // get the label text before the student recently made changes to it\n            var selectedLabelText = this.selectedLabelText;\n\n            // revert the label text to what it was before\n            this.selectedLabel.text.setText(selectedLabelText);\n\n            // clear the label text holder\n            this.selectedLabelText = null;\n\n            /*\n             * remove the reference to the selected label since it will no\n             * longer be selected\n             */\n            this.selectedLabel = null;\n\n            // turn off edit label mode\n            this.editLabelMode = false;\n\n            // make the canvas object no longer the active object\n            this.canvas.discardActiveObject();\n\n            // notify others that the student data has changed\n            this.studentDataChanged();\n\n            // refresh the canvas\n            this.canvas.renderAll();\n        }\n    }\n\n    /**\n     * The student clicked the delete button in the edit label mode\n     */\n    deleteLabelButtonClicked() {\n\n        if (this.selectedLabel != null) {\n\n            // get the text from the label we are going to delete\n            var selectedLabelText = this.selectedLabel.text.text;\n\n            // confirm with the student that they want to delete the label\n            var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteThisLabel', { selectedLabelText: selectedLabelText }));\n\n            if (answer) {\n                // the student is sure they want to delete the label\n\n                /*\n                 * get the circle from the label since the circle has\n                 * references to the line and text for the label\n                 */\n                var circle = this.selectedLabel.circle;\n\n                if (circle != null) {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, circle);\n\n                    /*\n                     * remove the reference to the selected label since it will no\n                     * longer be selected\n                     */\n                    this.selectedLabel = null;\n\n                    // turn off edit label mode\n                    this.editLabelMode = false;\n\n                    // make the canvas object no longer the active object\n                    this.canvas.discardActiveObject();\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n\n    /**\n     * Show the asset popup to allow the author to choose the background image\n     */\n    chooseBackgroundImage() {\n\n        // generate the parameters\n        var params = {};\n        params.isPopup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'background';\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Save the starter labels from the component authoring preview\n     */\n    saveStarterLabels() {\n\n        // ask the author if they are sure they want to save the starter labels\n        var answer = confirm(this.$translate('label.areYouSureYouWantToSaveTheStarterLabels'));\n\n        if (answer) {\n            // the author answered yes to save the starter labels\n\n            // get the labels in the component authoring preview\n            var labels = this.getLabels();\n\n            /*\n             * make a copy of the labels so we don't run into any referencing issues\n             * later\n             */\n            var starterLabels = this.UtilService.makeCopyOfJSONObject(labels);\n\n            // sort the labels alphabetically by their text\n            starterLabels.sort(this.labelTextComparator);\n\n            // set the labels\n            this.authoringComponentContent.labels = starterLabels;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * A comparator used to sort labels alphabetically\n     * It should be used like labels.sort(this.labelTextComparator);\n     * @param labelA a label object\n     * @param labelB a label object\n     * @return -1 if labelA comes before labelB\n     * 1 if labelB comes after labelB\n     * 0 of the labels are equal\n     */\n    labelTextComparator(labelA, labelB) {\n\n        if (labelA.text < labelB.text) {\n            // the labelA text comes before the labelB text alphabetically\n            return -1;\n        } else if (labelA.text > labelB.text) {\n            // the labelA text comes after the labelB text alphabetically\n            return 1;\n        } else {\n            /*\n             * the labelA text is the same as the labelB text so we will\n             * try to break the tie by looking at the color\n             */\n\n            if (labelA.color < labelB.color) {\n                // the labelA color text comes before the labelB color text alphabetically\n                return -1;\n            } else if (labelA.color > labelB.color) {\n                // the labelA color text comes after the labelB color text alphabetically\n                return 1;\n            } else {\n                /*\n                 * the labelA color text is the same as the labelB color text so\n                 * we will try to break the tie by looking at the pointX\n                 */\n\n                if (labelA.pointX < labelB.pointX) {\n                    // the labelA pointX is smaller than the labelB pointX\n                    return -1;\n                } else if (labelA.pointX > labelB.pointX) {\n                    // the labelA pointX is larger than the labelB pointX\n                    return 1;\n                } else {\n                    /*\n                     * the labelA pointX is the same as the labelB pointX so\n                     * we will try to break the tie by looking at the pointY\n                     */\n\n                    if (labelA.pointY < labelB.pointY) {\n                        // the labelA pointY is smaller than the labelB pointY\n                        return -1;\n                    } else if (labelA.pointY > labelB.pointY) {\n                        // the labelA pointY is larger than the labelB pointY\n                        return 1;\n                    } else {\n                        /*\n                         * all the label values are the same between labelA\n                         * and labelB\n                         */\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete all the starter labels\n     */\n    deleteStarterLabels() {\n\n        /*\n         * ask the author if they are sure they want to delete all the starter\n         * labels\n         */\n        var answer = confirm(this.$translate('label.areYouSureYouWantToDeleteAllTheStarterLabels'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            // clear the labels array\n            this.authoringComponentContent.labels = [];\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Open a webpage in a new tab that shows a lot of the javascript colors\n     */\n    openColorViewer() {\n\n        // open the webpage in a new tab\n        this.$window.open('http://www.javascripter.net/faq/colornam.htm');\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            if (this.componentContent.backgroundImage != null &&\n                    this.componentContent.backgroundImage != '') {\n                /*\n                 * this component has a background so we will use it instead of\n                 * the background from the imported student work\n                 */\n                this.setBackgroundImage(this.componentContent.backgroundImage);\n            }\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        let mergedComponentState = this.NodeService.createNewComponentState();\n\n        if (componentStates != null) {\n            let mergedLabels = [];\n            let mergedBackgroundImage = null;\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n                    if (studentData != null) {\n                        let labels = studentData.labels;\n                        let backgroundImage = studentData.backgroundImage;\n                        if (labels != null && labels != '') {\n                            mergedLabels = mergedLabels.concat(labels);\n                        }\n                        if (backgroundImage != null && backgroundImage != '') {\n                            mergedBackgroundImage = backgroundImage;\n                        }\n                    }\n                }\n            }\n\n            if (mergedLabels != null) {\n                mergedComponentState.studentData = {};\n                mergedComponentState.studentData.labels = mergedLabels;\n                mergedComponentState.studentData.backgroundImage = mergedBackgroundImage;\n            }\n        }\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = null;\n        this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Automatically set the component id for the connected component if there\n     * is only one viable option.\n     * @param connectedComponent the connected component object we are authoring\n     */\n    authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n        if (connectedComponent != null) {\n            let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n            if (components != null) {\n                let numberOfAllowedComponents = 0;\n                let allowedComponent = null;\n                for (let component of components) {\n                    if (component != null) {\n                        if (this.isConnectedComponentTypeAllowed(component.type) &&\n                                component.id != this.componentId) {\n                            // we have found a viable component we can connect to\n                            numberOfAllowedComponents += 1;\n                            allowedComponent = component;\n                        }\n                    }\n                }\n\n                if (numberOfAllowedComponents == 1) {\n                    /*\n                     * there is only one viable component to connect to so we\n                     * will use it\n                     */\n                    connectedComponent.componentId = allowedComponent.id;\n                    connectedComponent.type = 'importWork';\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n            connectedComponent.componentId = null;\n            connectedComponent.type = null;\n            this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * The show JSON button was clicked to show or hide the JSON authoring\n     */\n    showJSONButtonClicked() {\n        // toggle the JSON authoring textarea\n        this.showJSONAuthoring = !this.showJSONAuthoring;\n\n        if (this.jsonStringChanged && !this.showJSONAuthoring) {\n            /*\n             * the author has changed the JSON and has just closed the JSON\n             * authoring view so we will save the component\n             */\n            this.advancedAuthoringViewComponentChanged();\n\n            // scroll to the top of the component\n            this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n            this.jsonStringChanged = false;\n        }\n    }\n\n    /**\n     * The author has changed the JSON manually in the advanced view\n     */\n    authoringJSONChanged() {\n        this.jsonStringChanged = true;\n    }\n}\n\nLabelController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$timeout',\n    '$window',\n    'AnnotationService',\n    'ConfigService',\n    'LabelService',\n    'NodeService',\n    'NotebookService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelController;\n"]}