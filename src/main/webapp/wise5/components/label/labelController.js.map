{"version":3,"sources":["labelController.es6"],"names":["LabelController","$injector","$q","$scope","$timeout","ConfigService","LabelService","NodeService","NotebookService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isNewLabelButtonVisible","isCancelButtonVisible","isSnipImageButtonVisible","notebookConfig","getNotebookConfig","canCreateLabels","canDeleteLabels","createLabelMode","canvas","canvasWidth","canvasHeight","lineZIndex","textZIndex","circleZIndex","canvasId","backgroundImage","newLabelMessage","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","componentState","width","height","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","$","empty","attr","css","append","setupCanvas","angular","labelController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","imageObject","getImageObject","fileUploadChanged","element","getBackgroundImage","overwrite","answer","confirm","value","files","length","uploadAsset","unreferencedAsset","copyAssetForReference","referencedAsset","imageURL","url","setBackgroundImage","studentDataChanged","initializeCanvas","disabled","createKeydownListener","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","labels","addLabelsToCanvas","setStudentWork","calculateDisabled","registerComponentController","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","x","label","pointX","pointY","textX","textY","color","createLabel","addLabelToCanvas","isLockAfterSubmit","getComponentId","objects","getObjects","object","type","get","labelJSONObject","getLabelJSONObjectFromCircle","push","circle","lineObject","line","textObject","xDiff","x2","x1","yDiff","y2","y1","backgroundColor","parseInt","createNewComponentState","getLabels","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","attachment","indexOf","splice","studentAsset","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","fabric","StaticCanvas","Canvas","selection","hoverCursor","setWidth","setHeight","on","options","activeObject","getActiveObject","selectedLabel","editLabelMode","e","layerX","y","layerY","newLabel","selectLabel","target","left","top","set","remove","add","moveTo","renderAll","backgroundImagePath","window","addEventListener","keyPressed","keyCode","removeLabelFromCanvas","textString","Circle","radius","originX","originY","hasControls","borderColor","hasBorders","selectable","Line","fill","stroke","strokeWidth","IText","fontSize","cursorWidth","editable","selectedLabelText","$apply","setText","nodeAuthoringController","authoringViewNodeChanged","fromJson","replaceComponent","showSaveErrorAdvancedAuthoring","toJson","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","index","pngFile","img_b64","toDataURL","getImageObjectFromBase64String","message","isNotebookEnabled","$event","addNewItem","exitListener","component","componentHasWork","importPreviousWork","discardActiveObject","$inject"],"mappings":"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","file":"labelController.js","sourcesContent":["class LabelController {\n    constructor(\n        $injector,\n        $q,\n        $scope,\n        $timeout,\n        ConfigService,\n        LabelService,\n        NodeService,\n        NotebookService,\n        OpenResponseService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService,\n        UtilService\n    ) {\n\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.ConfigService = ConfigService;\n        this.LabelService = LabelService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the new label button is shown or not\n        this.isNewLabelButtonVisible = true;\n\n        // whether the cancel button is shown or not\n        this.isCancelButtonVisible = false;\n\n        // whether the snip image button is shown or not\n        this.isSnipImageButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // whether the student can create new labels\n        this.canCreateLabels = true;\n\n        // whether the student can delete labels\n        this.canDeleteLabels = true;\n\n        // whether the student is in the mode to create a new label\n        this.createLabelMode = false;\n\n        // a reference to the canvas\n        this.canvas = null;\n\n        // the canvas width\n        this.canvasWidth = 800;\n\n        // the canvas height\n        this.canvasHeight = 600;\n\n        // the z index of line elements\n        this.lineZIndex = 0;\n\n        // the z index of text elements\n        this.textZIndex = 1;\n\n        // the z index of circle elements\n        this.circleZIndex = 2;\n\n        // the canvas id\n        this.canvasId = 'c';\n\n        // the background image path\n        this.backgroundImage = null;\n\n        // the message to display when the student is in create label mode\n        this.newLabelMessage = 'Click on the image or ';\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (this.componentContent.canCreateLabels != null) {\n                this.canCreateLabels = this.componentContent.canCreateLabels;\n            }\n\n            if (this.componentContent.canDeleteLabels != null) {\n                this.canDeleteLabels = this.componentContent.canDeleteLabels;\n            }\n\n            if (this.componentContent.width != null) {\n                this.canvasWidth = this.componentContent.width;\n            }\n\n            if (this.componentContent.height != null) {\n                this.canvasHeight = this.componentContent.height;\n            }\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                if (this.canCreateLabels) {\n                    this.isNewLabelButtonVisible = true;\n                } else {\n                    this.isNewLabelButtonVisible = false;\n                }\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n\n                if (componentState != null) {\n                    this.canvasId = 'labelCanvas_' + componentState.id;\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.isSnipImageButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isNewLabelButtonVisible = false;\n                this.canDeleteLabels = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    if (this.canvas != null) {\n\n                        // clear the parent to remove the canvas\n                        $('#canvasParent_' + this.canvasId).empty();\n\n                        // create a new canvas\n                        var canvas = $('<canvas/>');\n                        canvas.attr('id', this.canvasId);\n                        canvas.css('border', '1px solid black');\n\n                        // add the new canvas\n                        $('#canvasParent_' + this.canvasId).append(canvas);\n\n                        /*\n                         * clear the background so that setupCanvas() can\n                         * reapply the background\n                         */\n                        this.backgroundImage = null;\n\n                        // setup the new canvas\n                        this.setupCanvas();\n                    }\n\n                    if (this.componentContent.canCreateLabels != null) {\n                        this.canCreateLabels = this.componentContent.canCreateLabels;\n                    }\n\n                    if (this.canCreateLabels) {\n                        this.isNewLabelButtonVisible = true;\n                    } else {\n                        this.isNewLabelButtonVisible = false;\n                    }\n                }.bind(this), true);\n            }\n\n            this.$timeout(angular.bind(this, function() {\n                // wait for angular to completely render the html before we initialize the canvas\n\n                this.setupCanvas();\n            }));\n        }\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.labelController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.labelController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.labelController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.labelController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /*\n         * Listen for the requestImage event which is fired when something needs\n         * an image representation of the student data from a specific\n         * component.\n         */\n        this.$scope.$on('requestImage', (event, args) => {\n\n            // get the node id and component id from the args\n            var nodeId = args.nodeId;\n            var componentId = args.componentId;\n\n            // check if the image is being requested from this component\n            if (this.nodeId === nodeId && this.componentId === componentId) {\n\n                // obtain the image blob\n                var imageObject = this.getImageObject();\n\n                if (imageObject != null) {\n                    var args = {};\n                    args.nodeId = nodeId;\n                    args.componentId = componentId;\n                    args.imageObject = imageObject;\n\n                    // fire an event that contains the image object\n                    this.$scope.$emit('requestImageCallback', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n        \n        /**\n         * The student has changed the file input\n         * @param element the file input element\n         */\n        this.$scope.fileUploadChanged = function(element) {\n            \n            // get the current background image if any\n            var backgroundImage = this.labelController.getBackgroundImage();\n            \n            var overwrite = true;\n            \n            if (backgroundImage != null && backgroundImage != '') {\n                /*\n                 * there is an existing background image so we will ask the\n                 * student if they want to change it\n                 */\n                var answer = confirm(\"Are you sure you want to change the background image?\");\n                \n                if (answer) {\n                    // the student wants to change the background image\n                    overwrite = true;\n                } else {\n                    // the student does not want to change the background image\n                    overwrite = false;\n                    \n                    /* \n                     * clear the input file value otherwise it will show the\n                     * name of the file they recently selected but decided not\n                     * to use because they decided not to change the background\n                     * image\n                     */\n                    element.value = null;\n                }\n            }\n            \n            if (overwrite) {\n                // we will change the current background\n                \n                // get the files from the file input element\n                var files = element.files;\n                \n                if (files != null && files.length > 0) {\n                    \n                    // upload the file to the studentuploads folder\n                    this.labelController.StudentAssetService.uploadAsset(files[0]).then((unreferencedAsset) => {\n                        \n                        // make a referenced copy of the unreferenced asset\n                        this.labelController.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n                            \n                            if (referencedAsset != null) {\n                                // get the url of the referenced asset\n                                var imageURL = referencedAsset.url;\n                                \n                                if (imageURL != null && imageURL != '') {\n                                    \n                                    // set the referenced asset as the background image\n                                    this.labelController.setBackgroundImage(imageURL);\n                                    this.labelController.studentDataChanged();\n                                }\n                            }\n                        });\n                    });\n                }\n            }\n        }\n    }\n\n    setupCanvas() {\n        // initialize the canvas\n        var canvas = this.initializeCanvas();\n        this.canvas = canvas;\n\n        // get the component state from the scope\n        var componentState = this.$scope.componentState;\n\n        if (this.canDeleteLabels && !this.disabled) {\n            // create the key down listener to listen for the delete key\n            this.createKeydownListener();\n        }\n\n        // set whether studentAttachment is enabled\n        this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n        if (componentState == null) {\n            /*\n             * only import work if the student does not already have\n             * work for this component\n             */\n\n            // check if we need to import work\n            var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n            \n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                // import the work from the other component\n                this.importWork();\n            } else if (this.componentContent.labels != null) {\n                /*\n                 * the student has not done any work and there are starter labels\n                 * so we will populate the canvas with the starter labels\n                 */\n                this.addLabelsToCanvas(this.componentContent.labels);\n            }\n        } else {\n            // populate the student work into this component\n            this.setStudentWork(componentState);\n        }\n\n        // get the background image that may have been set by the student data\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage == null && this.componentContent.backgroundImage != null) {\n            // get the background image from the component content if any\n            this.setBackgroundImage(this.componentContent.backgroundImage);\n        }\n\n        // check if we need to lock this component\n        this.calculateDisabled();\n\n        if (this.$scope.$parent.nodeController != null) {\n            // register this component with the parent node\n            this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the labels from the student data\n                var labels = studentData.labels;\n\n                // add the labels to the canvas\n                this.addLabelsToCanvas(labels);\n\n                // get the background image from the student data\n                var backgroundImage = studentData.backgroundImage;\n\n                if (backgroundImage != null) {\n                    this.setBackgroundImage(backgroundImage);\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Add labels ot the canvas\n     * @param labels an array of objects that contain the values for a label\n     */\n    addLabelsToCanvas(labels) {\n        if (labels != null) {\n\n            // loop through all the labels\n            for (var x = 0; x < labels.length; x++) {\n\n                // get a label\n                var label = labels[x];\n\n                if (label != null) {\n\n                    // get the values of the label\n                    var pointX = label.pointX;\n                    var pointY = label.pointY;\n                    var textX = label.textX;\n                    var textY = label.textY;\n                    var text = label.text;\n                    var color = label.color;\n\n                    // create the label\n                    var label = this.createLabel(pointX, pointY, textX, textY, text, color);\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks on the new label button to enter\n     * create label mode\n     */\n    newLabelButtonClicked() {\n        this.createLabelMode = true;\n        this.isCancelButtonVisible = true;\n    };\n\n    /**\n     * Called when the student clicks on the cancel button to exit\n     * create label mode\n     */\n    cancelButtonClicked() {\n        this.createLabelMode = false;\n        this.isCancelButtonVisible = false;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            this.processLatestSubmit();\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the label objects from the canvas\n     * @returns an array of simple JSON objects that represent the labels\n     */\n    getLabels() {\n        var labels = [];\n\n        // get all the objects from the canvas\n        var objects = this.canvas.getObjects();\n\n        if (objects != null) {\n\n            // loop through all the objects\n            for (var x = 0; x < objects.length; x++) {\n                var object = objects[x];\n\n                if (object != null) {\n\n                    // get the object type\n                    var type = object.get('type');\n\n                    if (type === 'circle') {\n                        /*\n                         * the object is a circle which contains all the data\n                         * for a label\n                         */\n\n                        // get the simple JSON object that represents the label\n                        var labelJSONObject = this.getLabelJSONObjectFromCircle(object);\n\n                        if (labelJSONObject != null) {\n                            // add the object to our array of labels\n                            labels.push(labelJSONObject);\n                        }\n                    }\n                }\n            }\n        }\n\n        return labels;\n    };\n\n    /**\n     * Get the simple JSON object that represents the label\n     * @param circle a Fabric circle object\n     * @returns a simple JSON object that represents the label\n     */\n    getLabelJSONObjectFromCircle(circle) {\n        var labelJSONObject = {};\n\n        if (circle != null) {\n\n            // get the line associated with the circle\n            var lineObject = circle.line;\n\n            // get the text object associated with the circle\n            var textObject = circle.text;\n\n            if (lineObject != null && textObject != null) {\n\n                // get the position of the circle\n                var pointX = circle.get('left');\n                var pointY = circle.get('top');\n\n                /*\n                 * get the offset of the end of the line\n                 * (this is where the text object is also located)\n                 */\n                var xDiff = lineObject.x2 - lineObject.x1;\n                var yDiff = lineObject.y2 - lineObject.y1;\n\n                // get the position of the text object\n                var textX = xDiff;\n                var textY = yDiff;\n\n                // get the text and background color of the text\n                var text = textObject.text;\n                var color = textObject.backgroundColor;\n\n                // set all the values into the object\n                labelJSONObject.pointX = parseInt(pointX);\n                labelJSONObject.pointY = parseInt(pointY);\n                labelJSONObject.textX = parseInt(textX);\n                labelJSONObject.textY = parseInt(textY);\n                labelJSONObject.text = text;\n                labelJSONObject.color = color;\n            }\n        }\n\n        return labelJSONObject;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the labels into the student data\n        var studentData = {};\n        studentData.labels = this.getLabels();\n\n        var backgroundImage = this.getBackgroundImage();\n\n        if (backgroundImage != null) {\n            studentData.backgroundImage = backgroundImage;\n        }\n\n        //studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the new label button\n     * @returns whether to show the new label button\n     */\n    showNewLabelButton() {\n        return this.isNewLabelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the cancel button\n     * @returns whether to show the cancel button\n     */\n    showCancelButton() {\n        return this.isCancelButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                \n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                \n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n            \n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.LabelService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Initialize the canvas\n     * @returns the canvas object\n     */\n    initializeCanvas() {\n\n        var canvas = null;\n\n        this.canvasWidth = this.componentContent.width;\n        this.canvasHeight = this.componentContent.height;\n\n        // get the canvas object from the html\n        if (this.isDisabled) {\n            // we will make the canvas uneditable\n            canvas = new fabric.StaticCanvas(this.canvasId);\n        } else {\n            // make the canvas editable\n            canvas = new fabric.Canvas(this.canvasId);\n        }\n\n        // disable selection of items\n        canvas.selection = false;\n\n        // change the cursor to a hand when it is hovering over an object\n        canvas.hoverCursor = 'pointer';\n\n        // set the width and height of the canvas\n        canvas.setWidth(this.canvasWidth);\n        canvas.setHeight(this.canvasHeight);\n\n        // set the height on the parent div so that a vertical scrollbar doesn't show up\n        $('#canvasParent_' + this.canvasId).css('height', this.canvasHeight + 2);\n\n        // listen for the mouse down event\n        canvas.on('mouse:down', angular.bind(this, function(options) {\n            \n            // get the object that was clicked on if any\n            var activeObject = this.canvas.getActiveObject();\n            \n            if (activeObject == null) {\n                /*\n                 * no objects in the canvas were clicked. the user clicked\n                 * on a blank area of the canvas so we will unselect any label\n                 * that was selected and turn off edit label mode\n                 */\n                this.selectedLabel = null;\n                this.editLabelMode = false;\n            }\n\n            // check if the student is in create label mode\n            if (this.createLabelMode) {\n                /*\n                 * the student is in create label mode so we will create a new label\n                 * where they have clicked\n                 */\n\n                // turn off create label mode and hide the cancel button\n                this.createLabelMode = false;\n                this.isCancelButtonVisible = false;\n                 \n                var event = options.e;\n\n                if (event != null) {\n                    // get the x and y position that the student clicked on\n                    var x = event.layerX;\n                    var y = event.layerY;\n\n                    /*\n                     * set the location of the text object to be down to the right\n                     * of the position the student clicked on\n                     */\n                    var textX = 100;\n                    var textY = 100;\n\n                    // create a new label\n                    var newLabel = this.createLabel(x, y, textX, textY, 'A new label', 'blue');\n\n                    // add the label to the canvas\n                    this.addLabelToCanvas(this.canvas, newLabel);\n                    \n                    /* \n                     * make the new label selected so that the student can edit\n                     * the text\n                     */\n                    this.selectLabel(newLabel);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        // listen for the object moving event\n        canvas.on('object:moving', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                // get the type of the object that is moving\n                var type = target.get('type');\n\n                // get the position of the element\n                var left = target.get('left');\n                var top = target.get('top');\n\n                // limit the x position to the canvas\n                if (left < 0) {\n                    target.set('left', 0);\n                    left = 0;\n                } else if (left > this.canvasWidth) {\n                    target.set('left', this.canvasWidth);\n                    left = this.canvasWidth;\n                }\n\n                // limit the y position to the canvas\n                if (top < 0) {\n                    target.set('top', 0);\n                    top = 0;\n                } else if (top > this.canvasHeight) {\n                    target.set('top', this.canvasHeight);\n                    top = this.canvasHeight;\n                }\n\n                if (type === 'circle') {\n                    /*\n                     * the student is moving the point of the label so we need to update\n                     * the endpoint of the line and the position of the text element.\n                     * the endpoint of the line and the position of the text element should\n                     * maintain the relative position to the point.\n                     */\n\n                    // get the line associated with the circle\n                    var line = target.line;\n\n                    var xDiff = 0;\n                    var yDiff = 0;\n\n                    if (line != null) {\n                        // calculate the relative offset of the end of the line\n                        xDiff = line.x2 - line.x1;\n                        yDiff = line.y2 - line.y1;\n\n                        // set the new position of the two endpoints of the line\n                        line.set({x1: left, y1: top, x2: left + xDiff, y2: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n\n                    // get the text element\n                    var text = target.text;\n\n                    if (text != null) {\n                        // set the new position of the text element\n                        text.set({left: left + xDiff, top: top + yDiff});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(text);\n                        canvas.add(text);\n\n                        // set the z index so it will be above line elements and below circle elements\n                        canvas.moveTo(text, this.textZIndex);\n                    }\n                } else if (type === 'i-text') {\n                    /*\n                     * the student is moving the text of the label so we need to update\n                     * the endpoint of the line. the endpoint of the line should be in\n                     * the same position as the text element.\n                     */\n\n                    var line = target.line;\n\n                    if (line != null) {\n                        // set the new position of the text element\n                        line.set({x2: left, y2: top});\n\n                        // remove and add the line to refresh the element in the canvas\n                        canvas.remove(line);\n                        canvas.add(line);\n\n                        // set the z index so it will be below the circle and text elements\n                        canvas.moveTo(line, this.lineZIndex);\n                    }\n                }\n\n                // refresh the canvas\n                canvas.renderAll();\n\n                // notify others that the student data has changed\n                this.studentDataChanged();\n            }\n        }));\n\n        // listen for the text changed event\n        canvas.on('text:changed', angular.bind(this, function(options) {\n            var target = options.target;\n\n            if (target != null) {\n\n                var type = target.get('type');\n\n                if (type === 'i-text') {\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }));\n\n        return canvas;\n    };\n\n    /**\n     * Set the background image\n     * @param backgroundImagePath the url path to an image\n     */\n    setBackgroundImage(backgroundImagePath) {\n\n        if (backgroundImagePath != null) {\n            this.backgroundImage = backgroundImagePath;\n            this.canvas.setBackgroundImage(backgroundImagePath, this.canvas.renderAll.bind(this.canvas));\n        }\n    };\n\n    /**\n     * Get the background image\n     * @returns the background image path\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    };\n\n    /**\n     * Create the keydown listener that we will use for deleting labels\n     */\n    createKeydownListener() {\n        window.addEventListener('keydown', angular.bind(this, this.keyPressed), false);\n    };\n\n    /**\n     * The callback handler for the keydown event\n     * @param e the event\n     */\n    keyPressed(e) {\n\n        // get the key code of the key that was pressed\n        var keyCode = e.keyCode;\n\n        // 8 is backspace and 46 is delete\n        if (keyCode === 8 || keyCode === 46) {\n\n            // get the active object\n            var activeObject = this.canvas.getActiveObject();\n\n            if (activeObject != null) {\n\n                // make sure the active object is a circle which represents the label\n                if (activeObject.get('type') === 'circle') {\n\n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, activeObject);\n\n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a label object. The label object is represented by a circle\n     * element (the point), a line element, and a text element. The circle\n     * element will contain a reference to the line and text elements. The\n     * text element will contain a reference to the line element.\n     * @param pointX the x position of the point (circle)\n     * @param pointY the y position of the point (circle)\n     * @param textX the x position of the text relative to the point (circle)\n     * @param textY the y position of the text relative to the point (circle)\n     * @param textString the text of the label\n     * @param color the background color of the label\n     * @returns an object containing a circle, line, and text\n     */\n    createLabel(pointX, pointY, textX, textY, textString, color) {\n        var label = {};\n\n        // get the position of the point\n        var x1 = pointX;\n        var y1 = pointY;\n\n        // get the absolute position of the text\n        var x2 = pointX + textX;\n        var y2 = pointY + textY;\n\n        if (color == null) {\n            // the default background color for text elements will be blue\n            color = 'blue';\n        }\n\n        // create a circle element\n        var circle = new fabric.Circle({\n            radius: 5,\n            left: x1,\n            top: y1,\n            originX: 'center',\n            originY: 'center',\n            hasControls: false,\n            borderColor: 'red',\n            hasBorders: true,\n            selectable: true\n        });\n\n        // create a line element\n        var line = new fabric.Line([x1, y1, x2, y2], {\n            fill: 'black',\n            stroke: 'black',\n            strokeWidth: 3,\n            selectable: false\n        });\n\n        // create an editable text element\n        var text = new fabric.IText(textString, {\n            left: x2,\n            top: y2,\n            originX: 'center',\n            originY: 'center',\n            fontSize: 20,\n            fill: 'white',\n            backgroundColor: color,\n            width: 100,\n            hasControls: false,\n            hasBorders: true,\n            borderColor: 'red',\n            selectable: true,\n            cursorWidth: 0,\n            editable: false\n        });\n\n        // give the circle a reference to the line and text elements\n        circle.line = line;\n        circle.text = text;\n\n        // give the text element a reference to the line element\n        text.line = line;\n\n        // add the circle, line, and text elements to the label object\n        label.circle = circle;\n        label.line = line;\n        label.text = text;\n\n        return label;\n    };\n\n    /**\n     * Add a label to canvas\n     * @param canvas the canvas\n     * @param label an object that contains a Fabric circle, Fabric line,\n     * and Fabric itext elements\n     */\n    addLabelToCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line and text elements\n            var circle = label.circle;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // add the elements to the canvas\n                canvas.add(circle, line, text);\n\n                // set the z indexes for the elements\n                canvas.moveTo(line, this.lineZIndex);\n                canvas.moveTo(text, this.textZIndex);\n                canvas.moveTo(circle, this.circleZIndex);\n\n                // refresh the canvas\n                canvas.renderAll();\n                \n                circle.on('selected', () => {\n                    /*\n                     * the circle was clicked so we will make the associated\n                     * label selected\n                     */\n                    this.selectLabel(label);\n                });\n                \n                text.on('selected', () => {\n                    /*\n                     * the text was clicked so we will make the associated\n                     * label selected\n                     */\n                    this.selectLabel(label);\n                });\n            }\n        }\n    };\n    \n    /**\n     * Make the label selected which means we will show the UI elements to \n     * allow the text to be edited and the label to deleted.\n     * @param label the label object\n     */\n    selectLabel(label) {\n        \n        // create a reference to the selected label\n        this.selectedLabel = label;\n        \n        /*\n         * remember the label text before the student changes it in case the\n         * student wants to cancel any changes they make\n         */\n        this.selectedLabelText = label.text.text;\n        \n        // turn on edit label mode\n        this.editLabelMode = true;\n        \n        /*\n         * force angular to refresh, otherwise angular will wait until the\n         * user generates another input (such as moving the mouse) before \n         * refreshing\n         */\n        this.$scope.$apply();\n    }\n    \n    /**\n     * The student has changed the label text on the selected label\n     * @param textObject the label's canvas text object\n     * @param text the text string\n     */\n    selectedLabelTextChanged(textObject, text) {\n        \n        // set the text into the object\n        textObject.setText(text);\n        \n        // notify the controller that the student data has changed\n        this.studentDataChanged();\n        \n        // refresh the canvas\n        this.canvas.renderAll();\n    }\n\n    /**\n     * Remove a label from the canvas\n     * @param canvas the canvas\n     * @param label the Fabric circle element that represents the label\n     */\n    removeLabelFromCanvas(canvas, label) {\n\n        if (canvas != null && label != null) {\n\n            // get the circle, line, and text elements\n            var circle = label;\n            var line = label.line;\n            var text = label.text;\n\n            if (circle != null && line != null && text != null) {\n\n                // remove the elements from the canvas\n                canvas.remove(circle);\n                canvas.remove(line);\n                canvas.remove(text);\n\n                // refresh the canvas\n                canvas.renderAll();\n            }\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a label in the authoring view\n     */\n    authoringAddLabelClicked() {\n\n        // create the new label\n        var newLabel = {};\n        newLabel.text = 'Enter text here';\n        newLabel.color = 'blue';\n        newLabel.pointX = 100;\n        newLabel.pointY = 100;\n        newLabel.textX = 100;\n        newLabel.textY = -25;\n\n        // add the label to the array of labels\n        this.authoringComponentContent.labels.push(newLabel);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a label in the authoring view\n     * @param index the index of the label in the labels array\n     */\n    authoringDeleteLabelClicked(index) {\n\n        // delete the label from the array\n        this.authoringComponentContent.labels.splice(index, 1);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the image object representation of the student data\n     * @returns an image object\n     */\n    getImageObject() {\n        var pngFile = null;\n\n        if (this.canvas != null) {\n\n            // get the image as a base64 string\n            var img_b64 = this.canvas.toDataURL('image/png');\n\n            // get the image object\n            pngFile = this.UtilService.getImageObjectFromBase64String(img_b64);\n        }\n\n        return pngFile;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check whether we need to show the snip image button\n     * @return whether to show the snip image button\n     */\n    showSnipImageButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipImageButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Snip the labels by converting it to an image\n     * @param $event the click event\n     */\n    snipImage($event) {\n\n        // get the canvas element\n        var canvas = angular.element('#' + this.componentId + ' canvas');\n\n        if (canvas != null && canvas.length > 0) {\n\n            // get the top canvas\n            canvas = canvas[0];\n\n            // get the canvas as a base64 string\n            var img_b64 = canvas.toDataURL('image/png');\n\n            // get the image object\n            var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n            // create a notebook item with the image populated into it\n            this.NotebookService.addNewItem($event, imageObject);\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n    \n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work \n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The student clicked the save button in the edit label mode\n     */\n    saveLabelButtonClicked() {\n        \n        if (this.selectedLabel != null) {\n            /*\n             * we do not need to perform any saving of the text since it has\n             * already been handled by the ng-model for the label text\n             */\n            \n            /*\n             * remove the reference to the selected label since it will no\n             * longer be selected\n             */\n            this.selectedLabel = null;\n            \n            // turn off edit label mode\n            this.editLabelMode = false;\n            \n            // make the canvas object no longer the active object\n            this.canvas.discardActiveObject();\n        }\n    }\n    \n    /**\n     * The student clicked the cancel button in the edit label mode\n     */\n    cancelLabelButtonClicked() {\n        \n        if (this.selectedLabel != null) {\n            \n            // get the label text before the student recently made changes to it\n            var selectedLabelText = this.selectedLabelText;\n            \n            // revert the label text to what it was before\n            this.selectedLabel.text.setText(selectedLabelText);\n            \n            // clear the label text holder\n            this.selectedLabelText = null;\n            \n            /*\n             * remove the reference to the selected label since it will no\n             * longer be selected\n             */\n            this.selectedLabel = null;\n            \n            // turn off edit label mode\n            this.editLabelMode = false;\n            \n            // make the canvas object no longer the active object\n            this.canvas.discardActiveObject();\n            \n            // notify others that the student data has changed\n            this.studentDataChanged();\n            \n            // refresh the canvas\n            this.canvas.renderAll();\n        }\n    }\n    \n    /**\n     * The student clicked the delete button in the edit label mode\n     */\n    deleteLabelButtonClicked() {\n        \n        if (this.selectedLabel != null) {\n            \n            // get the text from the label we are going to delete\n            var selectedLabelText = this.selectedLabel.text.text;\n            \n            // confirm with the student that they want to delete the label\n            var answer = confirm('Are you sure you want to delete this label?\\n\\n' + selectedLabelText);\n            \n            if (answer) {\n                // the student is sure they want to delete the label\n                \n                /*\n                 * get the circle from the label since the circle has\n                 * references to the line and text for the label\n                 */\n                var circle = this.selectedLabel.circle;\n                \n                if (circle != null) {\n                    \n                    // remove the label from the canvas\n                    this.removeLabelFromCanvas(this.canvas, circle);\n                    \n                    /*\n                     * remove the reference to the selected label since it will no\n                     * longer be selected\n                     */\n                    this.selectedLabel = null;\n                    \n                    // turn off edit label mode\n                    this.editLabelMode = false;\n                    \n                    // make the canvas object no longer the active object\n                    this.canvas.discardActiveObject();\n                    \n                    // notify others that the student data has changed\n                    this.studentDataChanged();\n                }\n            }\n        }\n    }\n}\n\nLabelController.$inject = [\n    '$injector',\n    '$q',\n    '$scope',\n    '$timeout',\n    'ConfigService',\n    'LabelService',\n    'NodeService',\n    'NotebookService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelController;\n"]}