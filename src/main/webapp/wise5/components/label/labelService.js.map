{"version":3,"sources":["labelService.es6"],"names":[],"mappings":"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","file":"labelService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass LabelService extends NodeService {\n\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Label component object\n     * @returns a new Label component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Label';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.backgroundImage = '';\n        component.canCreateLabels = true;\n        component.canDeleteLabels = true;\n        component.width = 800;\n        component.height = 600;\n        component.labels = [];\n        return component;\n    }\n\n    /**\n     * Copies an existing Label component object\n     * @returns a copied Label component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.backgroundImage = componentToCopy.backgroundImage;\n        component.canCreateLabels = componentToCopy.canCreateLabels;\n        component.canDeleteLabels = componentToCopy.canDeleteLabels;\n        component.width = componentToCopy.width;\n        component.height = componentToCopy.height;\n        component.labels = [];\n        // go through the original labels and create new id's\n        if (componentToCopy.labels != null && componentToCopy.labels.length > 0) {\n            for (var l = 0; l < componentToCopy.labels.length; l++) {\n                var label = componentToCopy.labels[l];\n                label.id = this.UtilService.generateKey();  // generate a new id for this label.\n                component.labels.push(label);\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'OpenResponse') {\n                // the other component is an OpenResponse component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            } else if (otherComponentType === 'Planning') {\n                componentState.studentData = JSON.stringify(componentStateFromOtherComponent.studentNodes);\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        var result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.labels && state.studentData.labels.length) {\n                            // there are labels so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.labels && studentData.labels.length) {\n                        // there are labels so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nLabelService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelService;\n"]}