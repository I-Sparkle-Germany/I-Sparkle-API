{"version":3,"sources":["labelService.es6"],"names":[],"mappings":"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","file":"labelService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass LabelService extends NodeService {\n\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Label component object\n     * @returns a new Label component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Label';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.backgroundImage = '';\n        component.canCreateLabels = true;\n        component.canDeleteLabels = true;\n        component.width = 800;\n        component.height = 600;\n        component.labels = [];\n        return component;\n    }\n\n    /**\n     * Copies an existing Label component object\n     * @returns a copied Label component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.backgroundImage = componentToCopy.backgroundImage;\n        component.canCreateLabels = componentToCopy.canCreateLabels;\n        component.canDeleteLabels = componentToCopy.canDeleteLabels;\n        component.width = componentToCopy.width;\n        component.height = componentToCopy.height;\n        component.labels = [];\n        // go through the original labels and create new id's\n        if (componentToCopy.labels != null && componentToCopy.labels.length > 0) {\n            for (var l = 0; l < componentToCopy.labels.length; l++) {\n                var label = componentToCopy.labels[l];\n                label.id = this.UtilService.generateKey();  // generate a new id for this label.\n                component.labels.push(label);\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'OpenResponse') {\n                // the other component is an OpenResponse component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        var result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.labels && state.studentData.labels.length) {\n                            // there are labels so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.labels && studentData.labels.length) {\n                        // there are labels so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nLabelService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelService;\n"]}