{"version":3,"sources":["labelService.es6"],"names":["LabelService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","backgroundImage","canCreateLabels","canDeleteLabels","width","height","pointSize","fontSize","labels","componentToCopy","createComponent","length","l","label","push","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","submitRequired","i","state","isSubmit","componentContent","starterLabels","labelArraysAreTheSame","labels1","labels2","label1","label2","labelsAreTheSame","text","pointX","pointY","textX","textY","color","$inject"],"mappings":"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","file":"labelService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass LabelService extends NodeService {\n\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Label\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('label.componentTypeLabel');\n  }\n\n  /**\n   * Create a Label component object\n   * @returns a new Label component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'Label';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.backgroundImage = '';\n    component.canCreateLabels = true;\n    component.canDeleteLabels = true;\n    component.width = 800;\n    component.height = 600;\n    component.pointSize = 5;\n    component.fontSize = 20;\n    component.labels = [];\n    return component;\n  }\n\n  /**\n   * Copies an existing Label component object\n   * @returns a copied Label component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.backgroundImage = componentToCopy.backgroundImage;\n    component.canCreateLabels = componentToCopy.canCreateLabels;\n    component.canDeleteLabels = componentToCopy.canDeleteLabels;\n    component.width = componentToCopy.width;\n    component.height = componentToCopy.height;\n    component.labels = [];\n    // go through the original labels and create new id's\n    if (componentToCopy.labels != null && componentToCopy.labels.length > 0) {\n      for (var l = 0; l < componentToCopy.labels.length; l++) {\n        var label = componentToCopy.labels[l];\n        label.id = this.UtilService.generateKey();  // generate a new id for this label.\n        component.labels.push(label);\n      }\n    }\n    return component;\n  }\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'Label') {\n        // the other component is an Label component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    var result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.labels && state.studentData.labels.length) {\n              // there are labels so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.labels && studentData.labels.length) {\n            // there are labels so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        // get the labels from the student data\n        let labels = studentData.labels;\n\n        if (componentContent == null) {\n          // the component content was not provided\n          if (labels != null && labels.length > 0) {\n            // the student has work\n            return true;\n          }\n        } else {\n          // the component content was provided\n          let starterLabels = componentContent.labels;\n          if (starterLabels == null || starterLabels.length == 0) {\n            // there are no starter labels\n            if (labels != null && labels.length > 0) {\n              // the student has work\n              return true;\n            }\n          } else {\n            /*\n             * there are starter labels so we will compare it\n             * with the student labels\n             */\n            if (!this.labelArraysAreTheSame(labels, starterLabels)) {\n              /*\n               * the student has a response that is different than\n               * the starter sentence\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the two arrays of labels contain the same values\n   * @param labels1 an array of label objects\n   * @param labels2 an array of label objects\n   * @return whether the labels contain the same values\n   */\n  labelArraysAreTheSame(labels1, labels2) {\n\n    if (labels1 == null && labels2 == null) {\n      return true;\n    } else if ((labels1 == null && labels2 != null) ||\n           (labels1 != null && labels2 == null)) {\n      return false;\n    } else {\n      if (labels1.length != labels2.length) {\n        return false;\n      } else {\n        for (let l = 0; l < labels1.length; l++) {\n          let label1 = labels1[l];\n          let label2 = labels2[l];\n          if (!this.labelsAreTheSame(label1, label2)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if two labels contain the same values\n   * @param label1 a label object\n   * @param label2 a label object\n   * @return whether the labels contain the same values\n   */\n  labelsAreTheSame(label1, label2) {\n\n    if (label1 == null && label2 == null) {\n      return true;\n    } else if ((label1 == null && label2 != null) ||\n           (label1 != null && label2 == null)) {\n      return false;\n    } else {\n      if ((label1.text != label2.text) ||\n        (label1.pointX != label2.pointX) ||\n        (label1.pointY != label2.pointY) ||\n        (label1.textX != label2.textX) ||\n        (label1.textY != label2.textY) ||\n        (label1.color != label2.color)) {\n        // at least one of the fields are different\n        return false\n      }\n    }\n\n    return true;\n  }\n}\n\nLabelService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelService;\n"]}