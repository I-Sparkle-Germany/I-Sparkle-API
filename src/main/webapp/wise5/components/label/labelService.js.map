{"version":3,"sources":["labelService.es6"],"names":[],"mappings":"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","file":"labelService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass LabelService extends NodeService {\n    constructor(StudentDataService) {\n        super();\n        this.StudentDataService = StudentDataService;\n    }\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'isCompleted') {\n            result = this.isCompleted(component, componentStates, componentEvents, nodeEvents);\n        } else if (functionName === 'wordCountCompare') {\n            result = this.wordCountCompare(functionParams);\n        }\n\n        return result;\n    };\n\n    wordCountCompare(params) {\n        var result = false;\n\n        if (params != null) {\n            var operator = params.operator;\n            var count = params.count;\n            var nodeVisits = params.nodeVisits;\n\n            var latestNodeState = this.getLatestNodeState(nodeVisits);\n\n            var wordCount = 0;\n\n            if (latestNodeState != null) {\n                var response = latestNodeState.studentData;\n\n                if (response != null) {\n                    wordCount = this.getWordCount(response);\n\n                    if (operator === '<') {\n                        if (wordCount < count) {\n                            result = true;\n                        }\n                    } else if (operator === '>=') {\n                        if (wordCount >= count) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getWordCount(response) {\n        var wordCount = 0;\n\n        if (response != null) {\n            var regex = /\\s+/gi;\n            wordCount = response.trim().replace(regex, ' ').split(' ').length;\n        }\n\n        return wordCount;\n    };\n\n    getStudentWorkAsHTML(componentState) {\n        var studentWorkAsHTML = null;\n\n        if (componentState != null && componentState.studentData != null) {\n            var response = componentState.studentData.response;\n\n            if (response != null) {\n                studentWorkAsHTML = '<p>' + response + '</p>';\n            }\n\n            var attachments = componentState.studentData.attachments;\n\n            // TODO: make into directive and use in component displays as well\n            if (attachments && attachments.length) {\n                studentWorkAsHTML += '<div class=\"component-content__actions\" layout=\"row\" layout-wrap=\"true\">';\n                for (var a = 0; a < attachments.length; a++) {\n                    var attachment = attachments[a];\n                    studentWorkAsHTML += '<div class=\"component__attachment\">' +\n                        '<img src=\"' + attachment.iconURL + '\" alt=\"' + attachment.iconURL + '\" class=\"component__attachment__content\" />' +\n                        '</div>';\n                }\n                studentWorkAsHTML += '</div>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'OpenResponse') {\n                // the other component is an OpenResponse component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            } else if (otherComponentType === 'Planning') {\n                componentState.studentData = JSON.stringify(componentStateFromOtherComponent.studentNodes);\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null && componentStates.length) {\n\n            // get the last component state\n            var l = componentStates.length - 1;\n            var componentState = componentStates[l];\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response) {\n                    // there is a response so the component is completed\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nLabelService.$inject = [\n    'StudentDataService'\n];\n\nexport default LabelService;"]}