{"version":3,"sources":["labelService.es6"],"names":["LabelService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","backgroundImage","canCreateLabels","canDeleteLabels","width","height","labels","componentToCopy","createComponent","length","l","label","push","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","submitRequired","i","state","isSubmit","$inject"],"mappings":"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","file":"labelService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass LabelService extends NodeService {\n\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Create a Label component object\n     * @returns a new Label component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Label';\n        component.prompt = this.$translate('ENTER_PROMPT_HERE');\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.backgroundImage = '';\n        component.canCreateLabels = true;\n        component.canDeleteLabels = true;\n        component.width = 800;\n        component.height = 600;\n        component.labels = [];\n        return component;\n    }\n\n    /**\n     * Copies an existing Label component object\n     * @returns a copied Label component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.backgroundImage = componentToCopy.backgroundImage;\n        component.canCreateLabels = componentToCopy.canCreateLabels;\n        component.canDeleteLabels = componentToCopy.canDeleteLabels;\n        component.width = componentToCopy.width;\n        component.height = componentToCopy.height;\n        component.labels = [];\n        // go through the original labels and create new id's\n        if (componentToCopy.labels != null && componentToCopy.labels.length > 0) {\n            for (var l = 0; l < componentToCopy.labels.length; l++) {\n                var label = componentToCopy.labels[l];\n                label.id = this.UtilService.generateKey();  // generate a new id for this label.\n                component.labels.push(label);\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Label') {\n                // the other component is an Label component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        var result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            if (submitRequired) {\n                // completion requires a submission, so check for isSubmit in any component states\n                for (let i = 0, l = componentStates.length; i < l; i++) {\n                    let state = componentStates[i];\n                    if (state.isSubmit && state.studentData) {\n                        // component state is a submission\n                        if (state.studentData.labels && state.studentData.labels.length) {\n                            // there are labels so the component is completed\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // get the last component state\n                let l = componentStates.length - 1;\n                let componentState = componentStates[l];\n\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    if (studentData.labels && studentData.labels.length) {\n                        // there are labels so the component is completed\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n}\n\nLabelService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default LabelService;\n"]}