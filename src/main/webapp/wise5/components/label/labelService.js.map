{"version":3,"sources":["labelService.es6"],"names":["LabelService","$filter","$q","StudentAssetService","StudentDataService","UtilService","$translate","component","type","backgroundImage","canCreateLabels","canEditLabels","canDeleteLabels","enableCircles","width","height","pointSize","fontSize","labelWidth","labels","componentStates","componentEvents","nodeEvents","node","result","canEdit","hasNodeEnteredEvent","length","submitRequired","showSubmitButton","showSaveButton","i","l","state","isSubmit","studentData","componentState","hasShowWorkConnectedComponent","componentContent","starterLabels","labelArraysAreTheSame","labels1","labels2","label1","label2","labelsAreTheSame","text","pointX","pointY","textX","textY","color","maxCharactersPerLine","xPositionOfText","spaceInbetweenLines","textWrapped","wordWrap","deferred","defer","svgElement","document","createElement","draw","SVG","tspans","textLines","split","textLine","svgTextElementString","svgString","innerHTML","replace","myCanvas","ctx","getContext","svg","Blob","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","event","target","drawImage","base64Image","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","then","unreferencedAsset","copyAssetForReference","referencedAsset","referencedAssetUrl","deleteAsset","resolve","src","promise","canvas","angular","element","nodeId","componentId","img_b64","asset","$inject"],"mappings":"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","file":"labelService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass LabelService extends ComponentService {\n\n  constructor($filter,\n      $q,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$q = $q;\n    this.StudentAssetService = StudentAssetService;\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('label.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Label';\n    component.backgroundImage = '';\n    component.canCreateLabels = true;\n    component.canEditLabels = true;\n    component.canDeleteLabels = true;\n    component.enableCircles = true;\n    component.width = 800;\n    component.height = 600;\n    component.pointSize = 5;\n    component.fontSize = 20;\n    component.labelWidth = 20;\n    component.labels = [];\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    var result = false;\n    if (!this.canEdit(component) && this.UtilService.hasNodeEnteredEvent(nodeEvents)) {\n      /*\n       * the student can't perform any work on this component and has visited\n       * this step so we will mark it as completed\n       */\n      return true;\n    }\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.labels && state.studentData.labels.length) {\n              // there are labels so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.labels && studentData.labels.length) {\n            // there are labels so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Determine if the student can perform any work on this component.\n   * @param component The component content.\n   * @return Whether the student can perform any work on this component.\n   */\n  canEdit(component) {\n    if (this.UtilService.hasShowWorkConnectedComponent(component)) {\n      return false;\n    }\n    return true;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        // get the labels from the student data\n        let labels = studentData.labels;\n\n        if (componentContent == null) {\n          // the component content was not provided\n          if (labels != null && labels.length > 0) {\n            // the student has work\n            return true;\n          }\n        } else {\n          // the component content was provided\n          let starterLabels = componentContent.labels;\n          if (starterLabels == null || starterLabels.length == 0) {\n            // there are no starter labels\n            if (labels != null && labels.length > 0) {\n              // the student has work\n              return true;\n            }\n          } else {\n            /*\n             * there are starter labels so we will compare it\n             * with the student labels\n             */\n            if (!this.labelArraysAreTheSame(labels, starterLabels)) {\n              /*\n               * the student has a response that is different than\n               * the starter sentence\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the component state has the exact same labels as the starter\n   * labels.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has the exact same labels as the\n   * starter labels\n   */\n  componentStateIsSameAsStarter(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n\n      // get the labels from the student data\n      let labels = studentData.labels;\n      let starterLabels = componentContent.labels;\n      if (starterLabels == null || starterLabels.length == 0) {\n        // there are no starter labels\n        if (labels.length == 0) {\n          // the student work doesn't have any labels either\n          return true;\n        } else if (labels != null && labels.length > 0) {\n          // the student has labels\n          return false;\n        }\n      } else {\n        // there are starter labels so we will compare it with the student labels\n        if (this.labelArraysAreTheSame(labels, starterLabels)) {\n          // the student labels are the same as the starter labels\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the two arrays of labels contain the same values\n   * @param labels1 an array of label objects\n   * @param labels2 an array of label objects\n   * @return whether the labels contain the same values\n   */\n  labelArraysAreTheSame(labels1, labels2) {\n    if (labels1 == null && labels2 == null) {\n      return true;\n    } else if ((labels1 == null && labels2 != null) ||\n           (labels1 != null && labels2 == null)) {\n      return false;\n    } else {\n      if (labels1.length != labels2.length) {\n        return false;\n      } else {\n        for (let l = 0; l < labels1.length; l++) {\n          let label1 = labels1[l];\n          let label2 = labels2[l];\n          if (!this.labelsAreTheSame(label1, label2)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if two labels contain the same values\n   * @param label1 a label object\n   * @param label2 a label object\n   * @return whether the labels contain the same values\n   */\n  labelsAreTheSame(label1, label2) {\n    if (label1 == null && label2 == null) {\n      return true;\n    } else if ((label1 == null && label2 != null) ||\n        (label1 != null && label2 == null)) {\n      return false;\n    } else {\n      if ((label1.text != label2.text) ||\n        (label1.pointX != label2.pointX) ||\n        (label1.pointY != label2.pointY) ||\n        (label1.textX != label2.textX) ||\n        (label1.textY != label2.textY) ||\n        (label1.color != label2.color)) {\n        // at least one of the fields are different\n        return false\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Create an image from the text string.\n   * @param text A text string.\n   * @param width The width of the image we will create.\n   * @param height The height of the image we will create.\n   * @param maxCharactersPerLine The max number of characters per line.\n   * @param xPositionOfText The x position of the text in the image.\n   * @param spaceInbetweenLines The amount of space inbetween each line.\n   * @param fontSize The font size.\n   */\n  createImageFromText(text, width, height, maxCharactersPerLine,\n      xPositionOfText, spaceInbetweenLines, fontSize) {\n\n    if (width == null || width == '') {\n      width = 800;\n    }\n\n    if (height == null || height == '') {\n      height = 600;\n    }\n\n    if (maxCharactersPerLine == null || maxCharactersPerLine == '') {\n      maxCharactersPerLine = 100;\n    }\n\n    if (xPositionOfText == null || xPositionOfText == '') {\n      xPositionOfText = 10;\n    }\n\n    if (spaceInbetweenLines == null || spaceInbetweenLines == '') {\n      spaceInbetweenLines = 40;\n    }\n\n    if (fontSize == null || fontSize == '') {\n      fontSize = 16;\n    }\n\n    /*\n     * Line wrap the text so that each line does not exceed the max number of\n     * characters.\n     */\n    let textWrapped = this.UtilService.wordWrap(text, maxCharactersPerLine);\n\n    // create a promise that will return an image of the concept map\n    var deferred = this.$q.defer();\n\n    // create a div to draw the SVG in\n    var svgElement = document.createElement('div');\n\n    var draw = SVG(svgElement);\n    draw.width(width);\n    draw.height(height);\n\n    /*\n     * We will create a tspan for each line.\n     * Example\n     * <tspan x=\"10\" dy=\"40\">The quick brown fox jumps over the lazy dog. One fish, two fish, red fish, blue fish. Green eggs</tspan>\n     * <tspan x=\"10\" dy=\"40\">and ham.</tspan>\n     */\n    let tspans = '';\n    let textLines = textWrapped.split('\\n');\n    for (let textLine of textLines) {\n      tspans += '<tspan x=\"' + xPositionOfText + '\" dy=\"' + spaceInbetweenLines + '\">' + textLine + '</tspan>';\n    }\n\n    /*\n     * Wrap the tspans in a text element.\n     * Example\n     * <text id=\"SvgjsText1008\" font-family=\"Helvetica, Arial, sans-serif\" font-size=\"16\">\n     *   <tspan x=\"10\" dy=\"40\">The quick brown fox jumps over the lazy dog. One fish, two fish, red fish, blue fish. Green eggs</tspan>\n     *   <tspan x=\"10\" dy=\"40\">and ham.</tspan>\n     * </text>\n     */\n    let svgTextElementString = '<text id=\"SvgjsText1008\" font-family=\"Helvetica, Arial, sans-serif\" font-size=\"' + fontSize + '\">' + tspans + '</text>';\n\n    /*\n     * Insert the text element into the svg.\n     * Example\n     * <svg id=\"SvgjsSvg1010\" width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:svgjs=\"http://svgjs.com/svgjs\">\n     *   <defs id=\"SvgjsDefs1011\"></defs>\n     *   <text id=\"SvgjsText1008\" font-family=\"Helvetica, Arial, sans-serif\" font-size=\"16\">\n     *     <tspan x=\"10\" dy=\"40\">The quick brown fox jumps over the lazy dog. One fish, two fish, red fish, blue fish. Green eggs</tspan>\n     *     <tspan x=\"10\" dy=\"40\">and ham.</tspan>\n     *   </text>\n     * </svg>\n     */\n    var svgString = svgElement.innerHTML;\n    svgString = svgString.replace('</svg>', svgTextElementString + '</svg>');\n\n    // create a canvas to draw the image on\n    var myCanvas = document.createElement('canvas');\n    var ctx = myCanvas.getContext('2d');\n\n    // create an svg blob\n    var svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n    var domURL = self.URL || self.webkitURL || self;\n    var url = domURL.createObjectURL(svg);\n    var image = new Image;\n\n    /*\n     * set the UtilService in a local variable so we can access it\n     * in the onload callback function\n     */\n    var thisUtilService = this.UtilService;\n\n    // the function that is called after the image is fully loaded\n    image.onload = (event) => {\n\n      // get the image that was loaded\n      var image = event.target;\n\n      // set the dimensions of the canvas\n      myCanvas.width = image.width;\n      myCanvas.height = image.height;\n      ctx.drawImage(image, 0, 0);\n\n      // get the canvas as a Base64 string\n      var base64Image = myCanvas.toDataURL('image/png');\n\n      // get the image object\n      var imageObject = thisUtilService.getImageObjectFromBase64String(base64Image);\n\n      // create a student asset image\n      this.StudentAssetService.uploadAsset(imageObject).then((unreferencedAsset) => {\n\n        /*\n         * make a copy of the unreferenced asset so that we\n         * get a referenced asset\n         */\n        this.StudentAssetService.copyAssetForReference(unreferencedAsset).then((referencedAsset) => {\n          if (referencedAsset != null) {\n            /*\n             * get the asset url\n             * for example\n             * /wise/studentuploads/11261/297478/referenced/picture_1494016652542.png\n             * if we are in preview mode this url will be a base64 string instead\n             */\n            var referencedAssetUrl = referencedAsset.url;\n\n            // remove the unreferenced asset\n            this.StudentAssetService.deleteAsset(unreferencedAsset);\n\n            // resolve the promise with the image url\n            deferred.resolve(referencedAssetUrl);\n          }\n        });\n      });\n    };\n\n    // set the src of the image so that the image gets loaded\n    image.src = url;\n\n    return deferred.promise;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    let deferred = this.$q.defer();\n    let canvas = angular.element('#canvas_' + componentState.nodeId + '_' + componentState.componentId);\n    if (canvas != null && canvas.length > 0) {\n      canvas = canvas[0];\n\n      // get the canvas as a base64 string\n      let img_b64 = canvas.toDataURL('image/png');\n\n      // get the image object\n      let imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n      // add the image to the student assets\n      this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n        deferred.resolve(asset);\n      });\n    }\n    return deferred.promise;\n  }\n}\n\nLabelService.$inject = [\n  '$filter',\n  '$q',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default LabelService;\n"]}