{"version":3,"sources":["matchController.es6"],"names":[],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n    constructor($rootScope,\n                $scope,\n                MatchService,\n                NodeService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.MatchService = MatchService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // the choices\n        this.choices = [];\n\n        // the buckets\n        this.buckets = [];\n\n        // the number of times the student has submitted\n        this.numberOfSubmits = 0;\n\n        // whether the student has correctly placed the choices\n        this.isCorrect = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.component;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                /*\n                 * initialize the choices and buckets with the values from the\n                 * component content\n                 */\n                this.initializeChoices();\n                this.initializeBuckets();\n\n                // get the component state for the show previous work\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                /*\n                 * initialize the choices and buckets with the values from the\n                 * component content\n                 */\n                this.initializeChoices();\n                this.initializeBuckets();\n\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        this.$scope.options = {\n            accept: function(sourceNode, destNodes, destIndex) {\n                var result = false;\n\n                // get the value of the source node\n                var data = sourceNode.$modelValue;\n\n                // get the type of the nodes in the destination\n                var destType = destNodes.$element.attr('data-type');\n\n                if (data != null) {\n\n                    // check if the types match\n                    if (data.type === destType) {\n                        // the types match so we will accept it\n                        result = true\n                    }\n                }\n\n                return result;\n            }.bind(this),\n            dropped: function(event) {\n                var sourceNode = event.source.nodeScope;\n                var destNodes = event.dest.nodesScope;\n\n                // tell the controller that the student data has changed\n                this.$scope.matchController.studentDataChanged();\n            }.bind(this)\n        };\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.matchController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.matchController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.matchController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n\n                    // check if the student answered correctly\n                    this.checkAnswer();\n                    this.numberOfSubmits++;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // do nothing\n        }));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData\n\n            if (studentData != null) {\n\n                // get the buckets and number of submits\n                var componentStateBuckets = studentData.buckets;\n                var componentStateNumberOfSubmits = studentData.numberOfSubmits;\n\n                // set the buckets\n                if (componentStateBuckets != null) {\n                    this.buckets = componentStateBuckets;\n                }\n\n                // set the number of submits\n                if (componentStateNumberOfSubmits != null) {\n                    this.numberOfSubmits = componentStateNumberOfSubmits;\n                }\n            }\n        }\n    };\n\n    /**\n     * Initialize the available choices from the component content\n     */\n    initializeChoices() {\n\n        this.choices = [];\n\n        if(this.componentContent != null && this.componentContent.choices != null) {\n            this.choices = this.componentContent.choices;\n        }\n    };\n\n    /**\n     * Get the choices\n     */\n    getChoices() {\n        return this.choices;\n    };\n\n    /**\n     * Initialize the available buckets from the component content\n     */\n    initializeBuckets() {\n\n        this.buckets = [];\n\n        if(this.componentContent != null && this.componentContent.buckets != null) {\n\n            // get the buckets from the component content\n            var buckets = this.componentContent.buckets;\n\n            /*\n             * create a bucket that will contain the choices when\n             * the student first starts working\n             */\n            var originBucket = {};\n            originBucket.id = 0;\n            originBucket.value = 'Choices';\n            originBucket.type = 'bucket';\n            originBucket.items = [];\n\n            var choices = this.getChoices();\n\n            // add all the choices to the origin bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                originBucket.items.push(choice);\n            }\n\n            // add the origin bucket to our array of buckets\n            this.buckets.push(originBucket);\n\n            // add all the other buckets to our array of buckets\n            for (var b = 0; b < buckets.length; b++) {\n                var bucket = buckets[b];\n\n                bucket.items = [];\n\n                this.buckets.push(bucket);\n            }\n        }\n    };\n\n    /**\n     * Get the buckets\n     */\n    getBuckets() {\n        return this.buckets;\n    };\n\n    /**\n     * Create a copy of the buckets for cases when we want to make\n     * sure we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     * @return a copy of the buckets\n     */\n    getCopyOfBuckets() {\n        var buckets = this.getBuckets();\n\n        // get a JSON string representation of the buckets\n        var bucketsJSONString = angular.toJson(buckets);\n\n        // turn the JSON string back into a JSON array\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n        return copyOfBuckets;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // check if the student answered correctly\n        this.checkAnswer();\n        this.numberOfSubmits++;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Check if the student has answered correctly\n     */\n    checkAnswer() {\n        var isCorrect = true;\n\n        // get the buckets\n        var buckets = this.getBuckets();\n\n        if (buckets != null) {\n\n            // loop through all the buckets\n            for(var b = 0; b < buckets.length; b++) {\n\n                // get a bucket\n                var bucket = buckets[b];\n\n                if (bucket != null) {\n                    var bucketId = bucket.id;\n                    var items = bucket.items;\n\n                    if (items != null) {\n\n                        // loop through all the items in the bucket\n                        for (var i = 0; i < items.length; i++) {\n                            var item = items[i];\n                            var position = i + 1;\n\n                            if (item != null) {\n                                var choiceId = item.id;\n\n                                // get the feedback object for the bucket and choice\n                                var feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                                if (feedbackObject != null) {\n                                    var feedback = feedbackObject.feedback;\n\n                                    var feedbackPosition = feedbackObject.position;\n                                    var feedbackIsCorrect = feedbackObject.isCorrect;\n\n                                    if (feedbackPosition == null) {\n                                        /*\n                                         * position does not matter and the choice may be\n                                         * in the correct or incorrect bucket\n                                         */\n\n                                        // set the feedback into the item\n                                        item.feedback = feedback;\n\n                                        // set whether the choice is in the correct bucket\n                                        item.isCorrect = feedbackIsCorrect;\n\n                                        /*\n                                         * there is no feedback position in the feeback object so\n                                         * position doesn't matter\n                                         */\n                                        item.isIncorrectPosition = false;\n\n                                        // update whether the student has answered the step correctly\n                                        isCorrect = isCorrect && feedbackIsCorrect;\n                                    } else {\n                                        /*\n                                         * position does matter and the choice is in a correct\n                                         * bucket. we know this because a feedback object will\n                                         * only have a non-null position value if the choice is\n                                         * in the correct bucket. if the feedback object is for\n                                         * a choice that is in an incorrect bucket, the position\n                                         * value will be null.\n                                         */\n\n                                        if (position === feedbackPosition) {\n                                            // the item is in the correct position\n\n                                            // set the feedback into the item\n                                            item.feedback = feedback;\n\n                                            // set whether the choice is in the correct bucket\n                                            item.isCorrect = feedbackIsCorrect;\n\n                                            // the choice is in the correct position\n                                            item.isIncorrectPosition = false;\n\n                                            // update whether the student has answered the step correctly\n                                            isCorrect = isCorrect && feedbackIsCorrect;\n                                        } else {\n                                            // item is in the correct bucket but wrong position\n\n                                            /*\n                                             * get the feedback for when the choice is in the correct\n                                             * bucket but wrong position\n                                             */\n                                            var incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n                                            item.feedback = incorrectPositionFeedback;\n\n                                            /*\n                                             * the choice is in the incorrect position so it isn't correct\n                                             */\n                                            item.isCorrect = false;\n\n                                            // the choice is in the incorrect position\n                                            item.isIncorrectPosition = true;\n\n                                            // the student has answered incorrectly\n                                            isCorrect = false;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * set the isCorrect value into the controller\n         * so we can read it later\n         */\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the feedback object for the combination of bucket and choice\n     * @param bucketId the bucket id\n     * @param choiceId the choice id\n     * @return the feedback object for the combination of bucket and choice\n     */\n    getFeedbackObject(bucketId, choiceId) {\n        var feedbackObject = null;\n\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the array of feedback objects\n            var feedbackArray = componentContent.feedback;\n\n            if (feedbackArray != null) {\n\n                // loop througha ll the feedback objects\n                for (var f = 0; f < feedbackArray.length; f++) {\n                    var tempFeedback = feedbackArray[f];\n\n                    if (tempFeedback != null) {\n\n                        var tempBucketId = tempFeedback.bucketId;\n                        var tempChoiceId = tempFeedback.choiceId;\n\n                        // check if the bucket id and choice id matches\n                        if (bucketId === tempBucketId && choiceId === tempChoiceId) {\n                            // we have found the feedback object we want\n                            feedbackObject = tempFeedback;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return feedbackObject;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the buckets into the student data\n            studentData.buckets = this.getCopyOfBuckets();\n\n            // set the number of submits into the student data\n            studentData.numberOfSubmits = this.numberOfSubmits;\n\n            if (this.isCorrect != null) {\n                // set whether the student was correct\n                studentData.isCorrect = this.isCorrect;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            //set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nMatchController.$inject = [\n    '$rootScope',\n    '$scope',\n    'MatchService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default MatchController;\n"]}