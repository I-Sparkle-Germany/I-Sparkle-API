{"version":3,"sources":["matchController.es6"],"names":["MatchController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","dragulaService","ConfigService","MatchService","NodeService","ProjectService","StudentDataService","UtilService","$mdMedia","idToOrder","autoScroll","require","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isShowPreviousWork","isSubmit","choices","buckets","isCorrect","bucketWidth","choiceColumns","horizontal","choiceStyle","saveMessage","text","time","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","submitCounter","sourceBucketId","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","isSubmitButtonDisabled","initializeChoices","initializeBuckets","hasCorrectChoices","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","dragId","dropEvent","$on","e","el","container","source","matchController","studentDataChanged","options","moves","handle","sibling","drake","find","on","className","replace","scroll","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","saveFailed","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","md","mdScreen","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","targetObject","authoringViewComponentChanged","hide","studentData","componentStateBuckets","choicesBucket","getBucketById","items","bucketIds","map","b","choiceIds","c","i","l","length","componentStateBucketId","indexOf","currentBucket","currentChoices","x","len","currentChoice","currentChoiceId","currentChoiceLocation","bucket","updatedChoice","getChoiceById","push","splice","checkAnswer","processLatestSubmit","onload","componentStates","getComponentStatesByNodeIdAndComponentId","numStates","latestSubmitState","latestBucketIds","latestChoiceIds","excludeIds","latestSubmitStateBuckets","latestBucket","latestBucketId","submitBucket","latestBucketChoiceIds","submitChoiceIds","latestBucketChoiceId","choiceHasCorrectPosition","latestState","Math","round","n","originBucket","choicesLabel","type","getChoices","choice","getBuckets","bucketsJSONString","toJson","copyOfBuckets","fromJson","isLockAfterSubmit","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","ids","bucketId","item","position","choiceId","choiceIdHasCorrectBucket","choiceHasCorrectBucket","feedbackObject","getFeedbackObject","feedback","feedbackPosition","feedbackIsCorrect","ordered","isIncorrectPosition","incorrectPositionFeedback","getFeedback","f","bucketFeedback","tempBucketId","choiceFeedback","tempChoiceId","getComponentId","createNewComponentState","clearFeedback","getCopyOfBuckets","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","updateIdsFromImportedWork","studentBuckets","studentBucket","tempStudentBucketText","getBucketByText","studentChoices","studentChoice","tempStudentChoiceText","getChoiceByText","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","addChoiceToFeedback","newBucket","addBucketToFeedback","index","bucketFeedbackChoices","tempChoice","deletedChoice","removeChoiceFromFeedback","deletedBucket","removeBucketFromFeedback","tempBucket","feedbackText","createFeedbackObject","exitListener","$broadcast","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","bucketItems","bucketItem","newConnectedComponent","updateOn","connectedComponents","tempFeedback","tempChoices","show","componentHasFeedback","setShowSubmitButtonValue","params","popup","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["\r\nclass MatchController {\r\n    constructor($filter,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                AnnotationService,\r\n                dragulaService,\r\n                ConfigService,\r\n                MatchService,\r\n                NodeService,\r\n                ProjectService,\r\n                StudentDataService,\r\n                UtilService,\r\n                $mdMedia) {\r\n\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.dragulaService = dragulaService;\r\n        this.ConfigService = ConfigService;\r\n        this.MatchService = MatchService;\r\n        this.NodeService = NodeService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n        this.$mdMedia = $mdMedia;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n        this.autoScroll = require('dom-autoscroller');\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // whether this part is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // the choices\r\n        this.choices = [];\r\n\r\n        // the buckets\r\n        this.buckets = [];\r\n\r\n        // whether the student has correctly placed the choices\r\n        this.isCorrect = null;\r\n\r\n        // the flex (%) width for displaying the buckets\r\n        this.bucketWidth = 100;\r\n\r\n        // the number of columns for displaying the choices\r\n        this.choiceColumns = 1;\r\n\r\n        // whether to orient the choices and buckets side-by-side\r\n        this.horizontal = false;\r\n\r\n        // css style for the choice items\r\n        this.choiceStyle = '';\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // counter to keep track of the number of submits\r\n        this.submitCounter = 0;\r\n\r\n        // the id for the source bucket\r\n        this.sourceBucketId = \"0\";\r\n\r\n        // whether this component has been authored with a correct answer\r\n        this.hasCorrectAnswer = false;\r\n\r\n        // whether the latest component state was a submit\r\n        this.isLatestComponentStateSubmit = false;\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n            this.horizontal = this.componentContent.horizontal;\r\n\r\n            if (this.mode === 'student') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n\r\n                if (this.mode === 'grading') {\r\n                    // get the latest annotations\r\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                }\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                    this.isCorrect = null;\r\n                    this.submitCounter = 0;\r\n                    this.isDisabled = false;\r\n                    this.isSubmitButtonDisabled = false;\r\n\r\n                    /*\r\n                     * initialize the choices and buckets with the values from the\r\n                     * component content\r\n                     */\r\n                    this.initializeChoices();\r\n                    this.initializeBuckets();\r\n                }.bind(this), true);\r\n            }\r\n\r\n            // check if there is a correct answer\r\n            this.hasCorrectAnswer = this.hasCorrectChoices();\r\n\r\n            /*\r\n             * initialize the choices and buckets with the values from the\r\n             * component content\r\n             */\r\n            this.initializeChoices();\r\n            this.initializeBuckets();\r\n\r\n            // get the component state from the scope\r\n            var componentState = this.$scope.componentState;\r\n\r\n            if (componentState == null) {\r\n                /*\r\n                 * only import work if the student does not already have\r\n                 * work for this component\r\n                 */\r\n\r\n                // check if we need to import work\r\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\r\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\r\n\r\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n                    /*\r\n                     * check if the node id is in the field that we used to store\r\n                     * the import previous work node id in\r\n                     */\r\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\r\n                }\r\n\r\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n                    /*\r\n                     * check if the component id is in the field that we used to store\r\n                     * the import previous work component id in\r\n                     */\r\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\r\n                }\r\n\r\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n                    // import the work from the other component\r\n                    this.importWork();\r\n                }\r\n            } else {\r\n                // populate the student work into this component\r\n                this.setStudentWork(componentState);\r\n            }\r\n\r\n            if (componentState != null && componentState.isSubmit) {\r\n                /*\r\n                 * the latest component state is a submit. this is used to\r\n                 * determine if we should show the feedback.\r\n                 */\r\n                this.isLatestComponentStateSubmit = true;\r\n            }\r\n\r\n            // check if the student has used up all of their submits\r\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                /*\r\n                 * the student has used up all of their chances to submit so we\r\n                 * will disable the submit button\r\n                 */\r\n                this.isDisabled = true;\r\n                this.isSubmitButtonDisabled = true;\r\n            }\r\n\r\n            // check if we need to lock this component\r\n            this.calculateDisabled();\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n        }\r\n\r\n        let dragId = 'match_' + this.componentId;\r\n        // handle choice drop events\r\n        let dropEvent = dragId + '.drop-model';\r\n        this.$scope.$on(dropEvent, (e, el, container, source) => {\r\n            // choice item has been dropped in new location, so run studentDataChanged function\r\n            this.$scope.matchController.studentDataChanged();\r\n        });\r\n\r\n        // drag and drop options\r\n        this.dragulaService.options(this.$scope, dragId, {\r\n            moves: (el, source, handle, sibling) => {\r\n                return !this.$scope.matchController.isDisabled;\r\n            }\r\n        });\r\n\r\n        // provide visual indicator when choice is dragged over a new bucket\r\n        let drake = dragulaService.find(this.$scope, dragId).drake;\r\n        drake.on('over', (el, container, source) => {\r\n            if (source !== container) {\r\n                container.className += ' match-bucket__contents--over';\r\n            }\r\n        }).on('out', (el, container, source) => {\r\n            if (source !== container) {\r\n                container.className = container.className.replace('match-bucket__contents--over', '');;\r\n            }\r\n        });\r\n\r\n        // support scroll while dragging\r\n        let scroll = this.autoScroll(\r\n            [document.querySelector('#content')], {\r\n            margin: 30,\r\n            pixels: 50,\r\n            scrollWhenOutside: true,\r\n            autoScroll: function() {\r\n                // Only scroll when the pointer is down, and there is a child being dragged\r\n                return this.down && drake.dragging;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a promise of a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.matchController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.matchController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.matchController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n\r\n                // trigger the submit\r\n                var submitTriggeredBy = 'nodeSubmitButton';\r\n                this.submit(submitTriggeredBy);\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // set isDirty to false because the component state was just saved\r\n                this.isDirty = false;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                // set saveFailed to false because the save was successful\r\n                this.saveFailed = false;\r\n\r\n                let isAutoSave = componentState.isAutoSave;\r\n                let isSubmit = componentState.isSubmit;\r\n                let serverSaveTime = componentState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                // set save message\r\n                if (isSubmit) {\r\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\r\n\r\n                    this.lockIfNecessary();\r\n\r\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                } else if (isAutoSave) {\r\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                } else {\r\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\r\n            // do nothing\r\n        }));\r\n\r\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\r\n            $scope.mdScreen = md;\r\n        });\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            if (args.target == 'prompt' || args.target == 'rubric') {\r\n\r\n                                var summernoteId = '';\r\n\r\n                                if (args.target == 'prompt') {\r\n                                    // the target is the summernote prompt element\r\n                                    summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                                } else if (args.target == 'rubric') {\r\n                                    // the target is the summernote rubric element\r\n                                    summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                                }\r\n\r\n                                if (summernoteId != '') {\r\n                                    if (this.UtilService.isImage(fileName)) {\r\n                                        /*\r\n                                         * move the cursor back to its position when the asset chooser\r\n                                         * popup was clicked\r\n                                         */\r\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                        $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                        // add the image html\r\n                                        $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                    } else if (this.UtilService.isVideo(fileName)) {\r\n                                        /*\r\n                                         * move the cursor back to its position when the asset chooser\r\n                                         * popup was clicked\r\n                                         */\r\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                        $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                        // insert the video element\r\n                                        var videoElement = document.createElement('video');\r\n                                        videoElement.controls = 'true';\r\n                                        videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                        $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                    }\r\n                                }\r\n                            } else if (args.target == 'choice') {\r\n                                // the target is a choice\r\n\r\n                                /*\r\n                                 * get the target object which should be a\r\n                                 * choice object\r\n                                 */\r\n                                var targetObject = args.targetObject;\r\n\r\n                                if (targetObject != null) {\r\n\r\n                                    // create the img html\r\n                                    var text = \"<img src='\" + fileName + \"'/>\";\r\n\r\n                                    // set the html into the choice text\r\n                                    targetObject.value = text;\r\n\r\n                                    // save the component\r\n                                    this.authoringViewComponentChanged();\r\n                                }\r\n                            } else if (args.target == 'bucket') {\r\n                                // the target is a bucket\r\n\r\n                                /*\r\n                                 * get the target object which should be a\r\n                                 * choice object\r\n                                 */\r\n                                var targetObject = args.targetObject;\r\n\r\n                                if (targetObject != null) {\r\n\r\n                                    // create the img html\r\n                                    var text = \"<img src='\" + fileName + \"'/>\";\r\n\r\n                                    // set the html into the choice text\r\n                                    targetObject.value = text;\r\n\r\n                                    // save the component\r\n                                    this.authoringViewComponentChanged();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n        if (componentState != null) {\r\n\r\n            // get the student data from the component state\r\n            let studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                // get the buckets and number of submits\r\n                let componentStateBuckets = studentData.buckets;\r\n\r\n                // set the buckets\r\n                if (componentStateBuckets != null) {\r\n\r\n                    // clear the choices bucket\r\n                    let choicesBucket = this.getBucketById(this.sourceBucketId);\r\n                    choicesBucket.items = [];\r\n\r\n                    let bucketIds = this.buckets.map(b => { return b.id; });\r\n                    let choiceIds = this.choices.map(c => { return c.id; });\r\n\r\n                    for (let i = 0, l = componentStateBuckets.length; i < l; i++) {\r\n                        let componentStateBucketId = componentStateBuckets[i].id;\r\n                        // componentState bucket is a valid bucket, so process choices\r\n                        if (bucketIds.indexOf(componentStateBucketId) > -1) {\r\n                            let currentBucket = componentStateBuckets[i];\r\n                            let currentChoices = currentBucket.items;\r\n\r\n                            for (let x = 0, len = currentChoices.length; x < len; x++) {\r\n                                let currentChoice = currentChoices[x];\r\n                                let currentChoiceId = currentChoice.id;\r\n                                let currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\r\n                                if (currentChoiceLocation > -1) {\r\n                                    // choice is valid and used by student in a valid bucket, so add it to that bucket\r\n                                    let bucket = this.getBucketById(componentStateBucketId);\r\n                                    // content for choice with this id may have change, so get updated content\r\n                                    let updatedChoice = this.getChoiceById(currentChoiceId);\r\n                                    bucket.items.push(updatedChoice);\r\n                                    choiceIds.splice(currentChoiceLocation, 1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // add unused choices to the source bucket\r\n                    for (let i = 0, l = choiceIds.length; i < l; i++) {\r\n                        choicesBucket.items.push(this.getChoiceById(choiceIds[i]));\r\n                    }\r\n                }\r\n\r\n                var submitCounter = studentData.submitCounter;\r\n\r\n                if (submitCounter != null) {\r\n                    // populate the submit counter\r\n                    this.submitCounter = submitCounter;\r\n                }\r\n\r\n                if (this.submitCounter > 0) {\r\n                    // the student has submitted at least once in the past\r\n\r\n                    if (componentState.isSubmit) {\r\n                        /*\r\n                         * the component state was a submit so we will check the\r\n                         * answer\r\n                         */\r\n                        this.checkAnswer()\r\n                    } else {\r\n                        /*\r\n                         * The component state was not a submit but the student\r\n                         * submitted some time in the past. We want to show the\r\n                         * feedback for choices that have not moved since the\r\n                         * student submitted.\r\n                         */\r\n                        this.processLatestSubmit(true);\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * there was no submit in the past but we will still need to\r\n                     * check if submit is dirty.\r\n                     */\r\n                    this.processLatestSubmit(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the latest submitted componentState and display feedback for choices\r\n     * that haven't changed since. This will also determine if submit is dirty.\r\n     * @param onload boolean whether this function is being executed on the\r\n     * initial component load or not\r\n     */\r\n    processLatestSubmit(onload) {\r\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n        let numStates = componentStates.length\r\n        let latestSubmitState = null;\r\n\r\n        for (let l = numStates-1; l > -1; l--) {\r\n            let componentState = componentStates[l];\r\n            if (componentState.isSubmit) {\r\n                latestSubmitState = componentState;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (latestSubmitState && latestSubmitState.studentData) {\r\n            let latestBucketIds = this.buckets.map(b => { return b.id; });\r\n            let latestChoiceIds = this.choices.map(c => { return c.id; });\r\n            let excludeIds = [];\r\n            let latestSubmitStateBuckets = latestSubmitState.studentData.buckets;\r\n\r\n            // loop through all the buckets in the latest student data\r\n            for (let b = 0; b < this.buckets.length; b++) {\r\n\r\n                // get a bucket from the latest student data\r\n                let latestBucket = this.buckets[b];\r\n\r\n                if (latestBucket != null) {\r\n                    let latestBucketId = latestBucket.id;\r\n\r\n                    // get the same bucket in the previously submitted student data\r\n                    let submitBucket = this.getBucketById(latestBucketId, latestSubmitStateBuckets);\r\n\r\n                    if (submitBucket != null) {\r\n                        // get the choice ids in the bucket in the latest student data\r\n                        let latestBucketChoiceIds = latestBucket.items.map(c => { return c.id; });\r\n\r\n                        // get the choice ids in the bucket in the previously submitted student data\r\n                        let submitChoiceIds = submitBucket.items.map(c => { return c.id; });\r\n\r\n                        // loop through all the choice ids in the bucket in the latest student data\r\n                        for (let c = 0; c < latestBucketChoiceIds.length; c++) {\r\n                            let latestBucketChoiceId = latestBucketChoiceIds[c];\r\n\r\n                            if (submitChoiceIds.indexOf(latestBucketChoiceId) == -1) {\r\n                                /*\r\n                                 * the choice in the latest state is not in the same\r\n                                 * bucket as it was in the last submit so we will\r\n                                 * not show the feedback for this choice by adding\r\n                                 * it to the excluded choice ids\r\n                                 */\r\n                                excludeIds.push(latestBucketChoiceId);\r\n                            } else {\r\n                                /*\r\n                                 * the choice is in the same bucket as it was in\r\n                                 * the last submit\r\n                                 */\r\n\r\n                                 if (this.choiceHasCorrectPosition(latestBucketChoiceId)) {\r\n                                     /*\r\n                                      * the choice has a correct position so we will check if\r\n                                      * the position is the same in the submit vs the latest\r\n                                      */\r\n                                     if (c != submitChoiceIds.indexOf(latestBucketChoiceId)) {\r\n                                         // the position has changed so we will not show the feedback\r\n                                         excludeIds.push(latestBucketChoiceId);\r\n                                     }\r\n                                 }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (excludeIds.length) {\r\n                // state has changed since last submit, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n            } else {\r\n                // state has not changed since last submit, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n            }\r\n            this.checkAnswer(excludeIds);\r\n        } else {\r\n            this.isSubmitDirty = true;\r\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n        }\r\n\r\n        if (onload && numStates) {\r\n            let latestState = componentStates[numStates-1];\r\n\r\n            if (latestState) {\r\n                let serverSaveTime = latestState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n                if (latestState.isSubmit) {\r\n                    // set whether the latest component state is correct\r\n                    this.isCorrect = latestState.isCorrect;\r\n                    // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                    // set save message\r\n                    this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n                } else {\r\n                    /*\r\n                     * the latest component state was not a submit so we will\r\n                     * not show whether it was correct or incorrect\r\n                     */\r\n                    this.isCorrect = null;\r\n                    // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                    this.isSubmitDirty = true;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                    // set save message\r\n                    this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initialize the available choices from the component content\r\n     */\r\n    initializeChoices() {\r\n\r\n        this.choices = [];\r\n\r\n        if(this.componentContent != null && this.componentContent.choices != null) {\r\n            this.choices = this.componentContent.choices;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the choices\r\n     */\r\n    getChoices() {\r\n        return this.choices;\r\n    };\r\n\r\n    /**\r\n     * Initialize the available buckets from the component content\r\n     */\r\n    initializeBuckets() {\r\n\r\n        this.buckets = [];\r\n\r\n        if (this.componentContent != null && this.componentContent.buckets != null) {\r\n\r\n            // get the buckets from the component content\r\n            let buckets = this.componentContent.buckets;\r\n\r\n            if (this.horizontal) {\r\n                this.bucketWidth = 100;\r\n                this.choiceColumns = 1;\r\n            } else {\r\n                if (this.componentContent.bucketWidth) {\r\n                    this.bucketWidth = this.componentContent.bucketWidth;\r\n                    this.choiceColumns = Math.round(100/this.componentContent.bucketWidth);\r\n                } else {\r\n                    let n = buckets.length;\r\n                    if (n % 3 === 0 || n > 4) {\r\n                        this.bucketWidth = Math.round(100/3);\r\n                        this.choiceColumns = 3;\r\n                    } else if (n % 2 === 0) {\r\n                        this.bucketWidth = 100/2;\r\n                        this.choiceColumns = 2;\r\n                    }\r\n                }\r\n\r\n                this.choiceStyle = {\r\n                    '-moz-column-count': this.choiceColumns,\r\n                    '-webkit-column-count': this.choiceColumns,\r\n                    'column-count':this.choiceColumns\r\n                };\r\n            }\r\n\r\n            /*\r\n             * create a bucket that will contain the choices when\r\n             * the student first starts working\r\n             */\r\n            let originBucket = {};\r\n            originBucket.id = this.sourceBucketId;\r\n            originBucket.value = this.componentContent.choicesLabel ? this.componentContent.choicesLabel : this.$translate('match.choices');\r\n            originBucket.type = 'bucket';\r\n            originBucket.items = [];\r\n\r\n            let choices = this.getChoices();\r\n\r\n            // add all the choices to the origin bucket\r\n            for (let c = 0; c < choices.length; c++) {\r\n                let choice = choices[c];\r\n\r\n                originBucket.items.push(choice);\r\n            }\r\n\r\n            // add the origin bucket to our array of buckets\r\n            this.buckets.push(originBucket);\r\n\r\n            // add all the other buckets to our array of buckets\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                let bucket = buckets[b];\r\n\r\n                bucket.items = [];\r\n\r\n                this.buckets.push(bucket);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the buckets\r\n     */\r\n    getBuckets() {\r\n        return this.buckets;\r\n    };\r\n\r\n    /**\r\n     * Create a copy of the buckets for cases when we want to make\r\n     * sure we don't accidentally change a bucket and have it also\r\n     * change previous versions of the buckets.\r\n     * @return a copy of the buckets\r\n     */\r\n    getCopyOfBuckets() {\r\n        var buckets = this.getBuckets();\r\n\r\n        // get a JSON string representation of the buckets\r\n        var bucketsJSONString = angular.toJson(buckets);\r\n\r\n        // turn the JSON string back into a JSON array\r\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\r\n\r\n        return copyOfBuckets;\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        if (this.mode === 'authoring') {\r\n            /*\r\n             * we are in authoring mode so we will set isDirty to false here\r\n             * because the 'componentSaveTriggered' event won't work in\r\n             * authoring mode\r\n             */\r\n            this.isDirty = false;\r\n        }\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n    * Called when either the component or node is submitted\r\n    */\r\n    lockIfNecessary() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n\r\n        // check if the student answered correctly\r\n        //this.processLatestSubmit();\r\n    }\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        // trigger the submit\r\n        var submitTriggeredBy = 'componentSubmitButton';\r\n        this.submit(submitTriggeredBy);\r\n    };\r\n\r\n    /**\r\n     * A submit was triggered by the component submit button or node submit button\r\n     * @param submitTriggeredBy what triggered the submit\r\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\r\n     */\r\n    submit(submitTriggeredBy) {\r\n\r\n        if (this.isSubmitDirty) {\r\n            // the student has unsubmitted work\r\n\r\n            var performSubmit = true;\r\n\r\n            if (this.componentContent.maxSubmitCount != null) {\r\n                // there is a max submit count\r\n\r\n                // calculate the number of submits this student has left\r\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\r\n\r\n                var message = '';\r\n\r\n                if (numberOfSubmitsLeft <= 0) {\r\n                    // the student does not have any more chances to submit\r\n                    performSubmit = false;\r\n                } else if (numberOfSubmitsLeft == 1) {\r\n                    /*\r\n                     * the student has one more chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                } else if (numberOfSubmitsLeft > 1) {\r\n                    /*\r\n                     * the student has more than one chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                }\r\n            }\r\n\r\n            if (performSubmit) {\r\n\r\n                /*\r\n                 * set isSubmit to true so that when the component state is\r\n                 * created, it will know it is a submit component state\r\n                 * instead of just a save component state\r\n                 */\r\n                this.isSubmit = true;\r\n\r\n                // clear the isCorrect value because it will be evaluated again later\r\n                this.isCorrect = null;\r\n\r\n                // increment the submit counter\r\n                this.incrementSubmitCounter();\r\n\r\n                // check if the student has used up all of their submits\r\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                    /*\r\n                     * the student has used up all of their submits so we will\r\n                     * disable the submit button\r\n                     */\r\n                    this.isDisabled = true;\r\n                    this.isSubmitButtonDisabled = true;\r\n                }\r\n\r\n                if (this.mode === 'authoring') {\r\n                    /*\r\n                     * we are in authoring mode so we will set values appropriately\r\n                     * here because the 'componentSubmitTriggered' event won't\r\n                     * work in authoring mode\r\n                     */\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.createComponentState('submit');\r\n                }\r\n\r\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\r\n                    // tell the parent node that this component wants to submit\r\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\r\n                    // nothing extra needs to be performed\r\n                }\r\n            } else {\r\n                /*\r\n                 * the student has cancelled the submit so if a component state\r\n                 * is created, it will just be a regular save and not submit\r\n                 */\r\n                this.isSubmit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment the submit counter\r\n     */\r\n    incrementSubmitCounter() {\r\n        this.submitCounter++;\r\n    }\r\n\r\n    /**\r\n     * Check if the student has answered correctly\r\n     * @param ids array of choice ids to exclude\r\n     */\r\n    checkAnswer(ids) {\r\n        let isCorrect = true;\r\n\r\n        // get the buckets\r\n        let buckets = this.getBuckets();\r\n        let excludeIds = ids ? ids : [];\r\n\r\n        if (buckets != null) {\r\n\r\n            // loop through all the buckets\r\n            for(let b = 0, l = buckets.length; b < l; b++) {\r\n\r\n                // get a bucket\r\n                let bucket = buckets[b];\r\n\r\n                if (bucket != null) {\r\n                    let bucketId = bucket.id;\r\n                    let items = bucket.items;\r\n\r\n                    if (items != null) {\r\n\r\n                        // loop through all the items in the bucket\r\n                        for (let i = 0, len = items.length; i < len; i++) {\r\n                            let item = items[i];\r\n                            let position = i + 1;\r\n\r\n                            if (item != null) {\r\n                                let choiceId = item.id;\r\n\r\n                                // check if the choice has a correct bucket it should be in\r\n                                let choiceIdHasCorrectBucket = this.choiceHasCorrectBucket(choiceId);\r\n\r\n                                // get the feedback object for the bucket and choice\r\n                                let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\r\n\r\n                                if (feedbackObject != null) {\r\n                                    let feedback = feedbackObject.feedback;\r\n\r\n                                    let feedbackPosition = feedbackObject.position;\r\n                                    let feedbackIsCorrect = feedbackObject.isCorrect;\r\n\r\n                                    if (this.hasCorrectAnswer) {\r\n\r\n                                        if (!choiceIdHasCorrectBucket) {\r\n                                            /*\r\n                                             * the component has a correct answer but there\r\n                                             * is no correct bucket for the current choice\r\n                                             */\r\n\r\n                                            if (bucketId == this.sourceBucketId) {\r\n                                                /*\r\n                                                 * the choice is in the source bucket and\r\n                                                 * the choice does not have a correct bucket\r\n                                                 * so we will mark the choice as correct\r\n                                                 */\r\n                                                feedbackIsCorrect = true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (feedback == null || feedback == '') {\r\n                                        // there is no authored feedback\r\n\r\n                                        if (this.hasCorrectAnswer) {\r\n                                            /*\r\n                                             * there is a correct answer for the component\r\n                                             * so we will show default feedback\r\n                                             */\r\n                                            if (feedbackIsCorrect) {\r\n                                                feedback = this.$translate('CORRECT');\r\n                                            } else {\r\n                                                feedback = this.$translate('INCORRECT');\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!this.componentContent.ordered || feedbackPosition == null) {\r\n                                        /*\r\n                                         * position does not matter and the choice may be\r\n                                         * in the correct or incorrect bucket\r\n                                         */\r\n\r\n                                        // set the feedback into the item\r\n                                        item.feedback = feedback;\r\n\r\n                                        // set whether the choice is in the correct bucket\r\n                                        item.isCorrect = feedbackIsCorrect;\r\n\r\n                                        /*\r\n                                         * there is no feedback position in the feeback object so\r\n                                         * position doesn't matter\r\n                                         */\r\n                                        item.isIncorrectPosition = false;\r\n\r\n                                        // update whether the student has answered the step correctly\r\n                                        isCorrect = isCorrect && feedbackIsCorrect;\r\n                                    } else {\r\n                                        /*\r\n                                         * position does matter and the choice is in a correct\r\n                                         * bucket. we know this because a feedback object will\r\n                                         * only have a non-null position value if the choice is\r\n                                         * in the correct bucket. if the feedback object is for\r\n                                         * a choice that is in an incorrect bucket, the position\r\n                                         * value will be null.\r\n                                         */\r\n\r\n                                        if (position === feedbackPosition) {\r\n                                            // the item is in the correct position\r\n\r\n                                            // set the feedback into the item\r\n                                            item.feedback = feedback;\r\n\r\n                                            // set whether the choice is in the correct bucket\r\n                                            item.isCorrect = feedbackIsCorrect;\r\n\r\n                                            // the choice is in the correct position\r\n                                            item.isIncorrectPosition = false;\r\n\r\n                                            // update whether the student has answered the step correctly\r\n                                            isCorrect = isCorrect && feedbackIsCorrect;\r\n                                        } else {\r\n                                            // item is in the correct bucket but wrong position\r\n\r\n                                            /*\r\n                                             * get the feedback for when the choice is in the correct\r\n                                             * bucket but wrong position\r\n                                             */\r\n                                            let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\r\n\r\n                                            // set the default feedback if none is authored\r\n                                            if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\r\n                                                incorrectPositionFeedback = this.$translate('match.correctBucketButWrongPosition');\r\n                                            }\r\n\r\n                                            item.feedback = incorrectPositionFeedback;\r\n\r\n                                            /*\r\n                                             * the choice is in the incorrect position so it isn't correct\r\n                                             */\r\n                                            item.isCorrect = false;\r\n\r\n                                            // the choice is in the incorrect position\r\n                                            item.isIncorrectPosition = true;\r\n\r\n                                            // the student has answered incorrectly\r\n                                            isCorrect = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (!this.hasCorrectAnswer) {\r\n                                    /*\r\n                                     * the component does not have a correct answer\r\n                                     * so we will clear the isCorrect and isIncorrectPosition\r\n                                     * fields\r\n                                     */\r\n                                    item.isCorrect = null;\r\n                                    item.isIncorrectPosition = null;\r\n                                }\r\n\r\n                                if (excludeIds.indexOf(choiceId) > -1) {\r\n                                    // don't show feedback for choices that should be excluded\r\n                                    item.feedback = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.hasCorrectAnswer) {\r\n            /*\r\n             * set the isCorrect value into the controller\r\n             * so we can read it later\r\n             */\r\n            this.isCorrect = isCorrect;\r\n        } else {\r\n            this.isCorrect = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the array of feedback\r\n     * @return the array of feedback objects\r\n     */\r\n    getFeedback() {\r\n        var feedback = null;\r\n\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the feedback from the component content\r\n            feedback = componentContent.feedback;\r\n        }\r\n\r\n        return feedback;\r\n    }\r\n\r\n    /**\r\n     * Get the feedback object for the combination of bucket and choice\r\n     * @param bucketId the bucket id\r\n     * @param choiceId the choice id\r\n     * @return the feedback object for the combination of bucket and choice\r\n     */\r\n    getFeedbackObject(bucketId, choiceId) {\r\n        var feedbackObject = null;\r\n\r\n        // get the feedback\r\n        var feedback = this.getFeedback();\r\n\r\n        if (feedback != null) {\r\n\r\n            /*\r\n             * loop through the feedback. each element in the feedback represents\r\n             * a bucket\r\n             */\r\n            for (var f = 0; f < feedback.length; f++) {\r\n\r\n                // get a bucket feedback object\r\n                var bucketFeedback = feedback[f];\r\n\r\n                if (bucketFeedback != null) {\r\n\r\n                    // get the bucket id\r\n                    var tempBucketId = bucketFeedback.bucketId;\r\n\r\n                    if (bucketId === tempBucketId) {\r\n                        // we have found the bucket we are looking for\r\n\r\n                        var choices = bucketFeedback.choices;\r\n\r\n                        if (choices != null) {\r\n\r\n                            // loop through all the choice feedback\r\n                            for (var c = 0; c < choices.length; c++) {\r\n                                var choiceFeedback = choices[c];\r\n\r\n                                if (choiceFeedback != null) {\r\n                                    var tempChoiceId = choiceFeedback.choiceId;\r\n\r\n                                    if (choiceId === tempChoiceId) {\r\n                                        // we have found the choice we are looking for\r\n                                        feedbackObject = choiceFeedback;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (feedbackObject != null) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return feedbackObject;\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flag so we will know we need to save the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        this.isCorrect = null;\r\n        this.isLatestComponentStateSubmit = false;\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        // create a new component state\r\n        let componentState = this.NodeService.createNewComponentState();\r\n\r\n        if (componentState != null) {\r\n\r\n            let studentData = {};\r\n\r\n\r\n            if (action === 'submit') {\r\n\r\n                /*\r\n                 * check if the choices are in the correct buckets and also\r\n                 * display feedback\r\n                 */\r\n                this.checkAnswer();\r\n\r\n                if (this.hasCorrectAnswer && this.isCorrect != null) {\r\n                    /*\r\n                     * there are correct choices so we will set whether the\r\n                     * student was correct\r\n                     */\r\n                    studentData.isCorrect = this.isCorrect;\r\n                }\r\n\r\n                /*\r\n                 * the latest component state is a submit. this is used to\r\n                 * determine if we should show the feedback.\r\n                 */\r\n                this.isLatestComponentStateSubmit = true;\r\n            } else {\r\n\r\n                // clear the feedback in the choices\r\n                this.clearFeedback();\r\n                this.processLatestSubmit();\r\n\r\n                /*\r\n                 * the latest component state is not a submit. this is used to\r\n                 * determine if we should show the feedback.\r\n                 */\r\n                this.isLatestComponentStateSubmit = false;\r\n            }\r\n\r\n            // set the buckets into the student data\r\n            studentData.buckets = this.getCopyOfBuckets();\r\n\r\n            // the student submitted this work\r\n            componentState.isSubmit = this.isSubmit;\r\n\r\n            // set the submit counter\r\n            studentData.submitCounter = this.submitCounter;\r\n\r\n            /*\r\n             * reset the isSubmit value so that the next component state\r\n             * doesn't maintain the same value\r\n             */\r\n            this.isSubmit = false;\r\n\r\n            //set the student data into the component state\r\n            componentState.studentData = studentData;\r\n        }\r\n\r\n        let deferred = this.$q.defer();\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        var nodeId = this.nodeId;\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the step after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the import previous work node id and component id\r\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\r\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\r\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\r\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n\r\n                // get the latest component state for this component\r\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                /*\r\n                 * we will only import work into this component if the student\r\n                 * has not done any work for this component\r\n                 */\r\n                if(componentState == null) {\r\n                    // the student has not done any work for this component\r\n\r\n                    // get the latest component state from the component we are importing from\r\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\r\n\r\n                    if (importWorkComponentState != null) {\r\n                        /*\r\n                         * populate a new component state with the work from the\r\n                         * imported component state\r\n                         */\r\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\r\n\r\n                        /*\r\n                         * update the choice ids so that it uses the choice ids\r\n                         * from this component. we need to do this because the choice\r\n                         * ids are likely to be different. we update the choice ids\r\n                         * by matching the choice text.\r\n                         */\r\n                        this.updateIdsFromImportedWork(populatedComponentState);\r\n\r\n                        // populate the component state into this component\r\n                        this.setStudentWork(populatedComponentState);\r\n\r\n                        // make the work dirty so that it gets saved\r\n                        this.studentDataChanged();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the choice ids and bucket ids to use the ids from this component.\r\n     * We will use the choice text and bucket text to perform matching.\r\n     * @param componentState the component state\r\n     */\r\n    updateIdsFromImportedWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            // get the student data\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                // get the buckets from the student data\r\n                var studentBuckets = studentData.buckets;\r\n\r\n                if (studentBuckets != null) {\r\n\r\n                    // loop through all the student buckets\r\n                    for (var b = 0; b < studentBuckets.length; b++) {\r\n\r\n                        // get a student bucket\r\n                        var studentBucket = studentBuckets[b];\r\n\r\n                        if (studentBucket != null) {\r\n\r\n                            // get the text of the student bucket\r\n                            var tempStudentBucketText = studentBucket.value;\r\n\r\n                            // get the bucket from this component that has the matching text\r\n                            var bucket = this.getBucketByText(tempStudentBucketText);\r\n\r\n                            if (bucket != null) {\r\n                                // change the id of the student bucket\r\n                                studentBucket.id = bucket.id;\r\n                            }\r\n\r\n                            // get the choices the student put into this bucket\r\n                            var studentChoices = studentBucket.items;\r\n\r\n                            if (studentChoices != null) {\r\n\r\n                                // loop through the choices in the bucket\r\n                                for (var c = 0; c < studentChoices.length; c++) {\r\n\r\n                                    // get a student choice\r\n                                    var studentChoice = studentChoices[c];\r\n\r\n                                    if (studentChoice != null) {\r\n\r\n                                        // get the text of the student choice\r\n                                        var tempStudentChoiceText = studentChoice.value;\r\n\r\n                                        // get the choice from this component that has the matching text\r\n                                        var choice = this.getChoiceByText(tempStudentChoiceText);\r\n\r\n                                        if (choice != null) {\r\n                                            // change the id of the student choice\r\n                                            studentChoice.id = choice.id;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\r\n\r\n            // set the new authoring component content\r\n            this.authoringComponentContent = authoringComponentContent;\r\n\r\n            // set the component content\r\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the step node ids in the project\r\n     * @returns all the step node ids\r\n     */\r\n    getStepNodeIds() {\r\n        var stepNodeIds = this.ProjectService.getNodeIds();\r\n\r\n        return stepNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Add a choice\r\n     */\r\n    authoringAddChoice() {\r\n\r\n        // create a new choice\r\n        var newChoice = {};\r\n        newChoice.id = this.UtilService.generateKey(10);\r\n        newChoice.value = '';\r\n        newChoice.type = 'choice';\r\n\r\n        // add the choice to the array of choices\r\n        this.authoringComponentContent.choices.push(newChoice);\r\n\r\n        // add the choice to the feedback\r\n        this.addChoiceToFeedback(newChoice.id);\r\n\r\n        // save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a bucket\r\n     */\r\n    authoringAddBucket() {\r\n\r\n        // create a new bucket\r\n        var newBucket = {};\r\n        newBucket.id = this.UtilService.generateKey(10);\r\n        newBucket.value = '';\r\n        newBucket.type = 'bucket';\r\n\r\n        // add the bucket to the array of buckets\r\n        this.authoringComponentContent.buckets.push(newBucket);\r\n\r\n        // add the bucket to the feedback\r\n        this.addBucketToFeedback(newBucket.id);\r\n\r\n        // save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Move a choice up\r\n     * @param index the index of the choice\r\n     */\r\n    authoringMoveChoiceUp(index) {\r\n\r\n        if (index != 0) {\r\n            // the choice is not at the top so we can move it up\r\n\r\n            // remember the choice\r\n            var choice = this.authoringComponentContent.choices[index];\r\n\r\n            if (choice != null) {\r\n\r\n                // remove the choice\r\n                this.authoringComponentContent.choices.splice(index, 1);\r\n\r\n                // insert the choice one index back\r\n                this.authoringComponentContent.choices.splice(index - 1, 0, choice);\r\n            }\r\n\r\n            /*\r\n             * get the feedback so we can update the order of the choices within\r\n             * the bucket feedback\r\n             */\r\n            var feedback = this.authoringComponentContent.feedback;\r\n\r\n            if (feedback != null) {\r\n\r\n                // loop through all the bucket feedback objects\r\n                for (var f = 0; f < feedback.length; f++) {\r\n                    var bucketFeedback = feedback[f];\r\n\r\n                    if (bucketFeedback != null) {\r\n\r\n                        // get all the choices\r\n                        var bucketFeedbackChoices = bucketFeedback.choices;\r\n\r\n                        if (bucketFeedbackChoices != null) {\r\n\r\n                            // remmeber the choice\r\n                            var tempChoice = bucketFeedbackChoices[index];\r\n\r\n                            if (tempChoice != null) {\r\n                                // remove the choice\r\n                                bucketFeedbackChoices.splice(index, 1);\r\n\r\n                                // insert the choice one index back\r\n                                bucketFeedbackChoices.splice(index - 1, 0, tempChoice);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a choice down\r\n     * @param index the index of the choice\r\n     */\r\n    authoringMoveChoiceDown(index) {\r\n\r\n        if (index < this.authoringComponentContent.choices.length - 1) {\r\n            // the choice is not at the bottom so we can move it down\r\n\r\n            // remember the choice\r\n            var choice = this.authoringComponentContent.choices[index];\r\n\r\n            if (choice != null) {\r\n\r\n                // remove the choice\r\n                this.authoringComponentContent.choices.splice(index, 1);\r\n\r\n                // insert the choice one index forward\r\n                this.authoringComponentContent.choices.splice(index + 1, 0, choice);\r\n            }\r\n\r\n            /*\r\n             * get the feedback so we can update the order of the choices within\r\n             * the bucket feedback\r\n             */\r\n            var feedback = this.authoringComponentContent.feedback;\r\n\r\n            if (feedback != null) {\r\n\r\n                // loop through all the bucket feedback objects\r\n                for (var f = 0; f < feedback.length; f++) {\r\n                    var bucketFeedback = feedback[f];\r\n\r\n                    if (bucketFeedback != null) {\r\n\r\n                        // get all the choices\r\n                        var bucketFeedbackChoices = bucketFeedback.choices;\r\n\r\n                        if (bucketFeedbackChoices != null) {\r\n\r\n                            // remmeber the choice\r\n                            var tempChoice = bucketFeedbackChoices[index];\r\n\r\n                            if (tempChoice != null) {\r\n                                // remove the choice\r\n                                bucketFeedbackChoices.splice(index, 1);\r\n\r\n                                // insert the choice one index forward\r\n                                bucketFeedbackChoices.splice(index + 1, 0, tempChoice);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a choice\r\n     * @param index the index of the choice in the choice array\r\n     */\r\n    authoringDeleteChoice(index) {\r\n\r\n        // confirm with the user that they want to delete the choice\r\n        var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisChoice'));\r\n\r\n        if (answer) {\r\n\r\n            // remove the choice from the array\r\n            var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\r\n\r\n            if (deletedChoice != null && deletedChoice.length > 0) {\r\n\r\n                // splice returns an array so we need to get the element out of it\r\n                deletedChoice = deletedChoice[0];\r\n\r\n                // get the choice id\r\n                var choiceId = deletedChoice.id;\r\n\r\n                // remove the choice from the feedback\r\n                this.removeChoiceFromFeedback(choiceId);\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a bucket up\r\n     * @param index the index of the bucket\r\n     */\r\n    authoringMoveBucketUp(index) {\r\n\r\n        if (index > 0) {\r\n            // the bucket is not at the top so we can move it up\r\n\r\n            // remember the bucket\r\n            var bucket = this.authoringComponentContent.buckets[index];\r\n\r\n            if (bucket != null) {\r\n\r\n                // remove the bucket\r\n                this.authoringComponentContent.buckets.splice(index, 1);\r\n\r\n                // insert the bucket one index back\r\n                this.authoringComponentContent.buckets.splice(index - 1, 0, bucket);\r\n            }\r\n\r\n            /*\r\n             * Remember the bucket feedback. The first element of the feedback\r\n             * contains the origin bucket. The first authored bucket is located\r\n             * at index 1. This means we need the index of the bucket feedback\r\n             * that we want is located at index + 1.\r\n             */\r\n            var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\r\n\r\n            if (bucketFeedback != null) {\r\n\r\n                // remove the bucket feedback\r\n                this.authoringComponentContent.feedback.splice(index + 1, 1);\r\n\r\n                // insert the bucket one index back\r\n                this.authoringComponentContent.feedback.splice(index, 0, bucketFeedback);\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a bucket down\r\n     * @param index the index of the bucket\r\n     */\r\n    authoringMoveBucketDown(index) {\r\n\r\n        if (index < this.authoringComponentContent.buckets.length - 1) {\r\n            // the bucket is not at the bottom so we can move it down\r\n\r\n            // remember the bucket\r\n            var bucket = this.authoringComponentContent.buckets[index];\r\n\r\n            if (bucket != null) {\r\n\r\n                // remove the bucket\r\n                this.authoringComponentContent.buckets.splice(index, 1);\r\n\r\n                // insert the bucket one index forward\r\n                this.authoringComponentContent.buckets.splice(index + 1, 0, bucket);\r\n            }\r\n\r\n            /*\r\n             * Remember the bucket feedback. The first element of the feedback\r\n             * contains the origin bucket. The first authored bucket is located\r\n             * at index 1. This means we need the index of the bucket feedback\r\n             * that we want is located at index + 1.\r\n             */\r\n            var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\r\n\r\n            if (bucketFeedback != null) {\r\n\r\n                // remove the bucket feedback\r\n                this.authoringComponentContent.feedback.splice(index + 1, 1);\r\n\r\n                // insert the bucket one index forward\r\n                this.authoringComponentContent.feedback.splice(index + 2, 0, bucketFeedback);\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a bucket\r\n     * @param index the index of the bucket in the bucket array\r\n     */\r\n    authoringDeleteBucket(index) {\r\n\r\n        // confirm with the user tha tthey want to delete the bucket\r\n        var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisBucket'));\r\n\r\n        if (answer) {\r\n\r\n            // remove the bucket from the array\r\n            var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\r\n\r\n            if (deletedBucket != null && deletedBucket.length > 0) {\r\n\r\n                // splice returns an array so we need to get the element out of it\r\n                deletedBucket = deletedBucket[0];\r\n\r\n                // get the bucket id\r\n                var bucketId = deletedBucket.id;\r\n\r\n                // remove the bucket from the feedback\r\n                this.removeBucketFromFeedback(bucketId);\r\n            }\r\n\r\n            // save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the choice by id from the authoring component content\r\n     * @param id the choice id\r\n     * @returns the choice object from the authoring component content\r\n     */\r\n    getChoiceById(id) {\r\n\r\n        var choice = null;\r\n\r\n        // get the choices\r\n        var choices = this.componentContent.choices;\r\n\r\n        // loop through all the choices\r\n        for (var c = 0; c < choices.length; c++) {\r\n            // get a choice\r\n            var tempChoice = choices[c];\r\n\r\n            if (tempChoice != null) {\r\n                if (id === tempChoice.id) {\r\n                    // we have found the choice we want\r\n                    choice = tempChoice;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return choice;\r\n    }\r\n\r\n    /**\r\n     * Get the choice by text\r\n     * @param text look for a choice with this text\r\n     * @returns the choice with the given text\r\n     */\r\n    getChoiceByText(text) {\r\n\r\n        var choice = null;\r\n\r\n        if (text != null) {\r\n\r\n            // get the choices from the component content\r\n            var choices = this.componentContent.choices;\r\n\r\n            if (choices != null) {\r\n\r\n                // loop through all the choices\r\n                for (var c = 0; c < choices.length; c++) {\r\n                    var tempChoice = choices[c];\r\n\r\n                    if (tempChoice != null) {\r\n                        if (text == tempChoice.value) {\r\n                            // we have found the choice we want\r\n                            choice = tempChoice;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return choice;\r\n    }\r\n\r\n    /**\r\n     * Get the bucket by id from the authoring component content\r\n     * @param id the bucket id\r\n     * @param buckets (optional) the buckets to get the bucket from\r\n     * @returns the bucket object from the authoring component content\r\n     */\r\n    getBucketById(id, buckets) {\r\n\r\n        var bucket = null;\r\n\r\n        if (buckets == null) {\r\n            if (this.buckets != null) {\r\n                // get the buckets from the component\r\n                buckets = this.buckets;\r\n            } else {\r\n                // get the buckets from the authoring component content\r\n                buckets = this.authoringComponentContent.buckets;\r\n            }\r\n        }\r\n\r\n        // loop through the buckets\r\n        for (var b = 0; b < buckets.length; b++) {\r\n            var tempBucket = buckets[b];\r\n\r\n            if (tempBucket != null) {\r\n                if (id == tempBucket.id) {\r\n                    // we have found the bucket we want\r\n                    bucket = tempBucket;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bucket;\r\n    }\r\n\r\n    /**\r\n     * Get the bucket by text\r\n     * @param text look for a bucket with this text\r\n     * @returns the bucket with the given text\r\n     */\r\n    getBucketByText(text) {\r\n\r\n        var bucket = null;\r\n\r\n        if (text != null) {\r\n\r\n            // get the buckets from the component content\r\n            var buckets = this.componentContent.buckets;\r\n\r\n            if (buckets != null) {\r\n\r\n                // loop throgh all the buckets\r\n                for (var b = 0; b < buckets.length; b++) {\r\n                    var tempBucket = buckets[b];\r\n\r\n                    if (tempBucket != null) {\r\n                        if (text == tempBucket.value) {\r\n                            // we have found the bucket we want\r\n                            bucket = tempBucket;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bucket;\r\n    }\r\n\r\n    /**\r\n     * Get the choice value by id from the authoring component content\r\n     * @param id the choice id\r\n     * @returns the choice value from the authoring component content\r\n     */\r\n    getChoiceValueById(id) {\r\n\r\n        var value = null;\r\n\r\n        // get the choice\r\n        var choice = this.getChoiceById(id);\r\n\r\n        if (choice != null) {\r\n            // get the value\r\n            value = choice.value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Get the bucket value by id from the authoring component content\r\n     * @param id the bucket id\r\n     * @returns the bucket value from the authoring component content\r\n     */\r\n    getBucketValueById(id) {\r\n\r\n        var value = null;\r\n\r\n        // get the bucket\r\n        var bucket = this.getBucketById(id);\r\n\r\n        if (bucket != null) {\r\n            // get the value\r\n            value = bucket.value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Add a choice to the feedback\r\n     * @param choiceId the choice id\r\n     */\r\n    addChoiceToFeedback(choiceId) {\r\n\r\n        // get the feedback array\r\n        var feedback = this.authoringComponentContent.feedback;\r\n\r\n        if (feedback != null) {\r\n\r\n            /*\r\n             * loop through all the elements in the feedback. each element\r\n             * represents a bucket.\r\n             */\r\n            for (var f = 0; f < feedback.length; f++) {\r\n                // get a bucket\r\n                var bucketFeedback = feedback[f];\r\n\r\n                if (bucketFeedback != null) {\r\n\r\n                    // get the choices in the bucket\r\n                    var choices = bucketFeedback.choices;\r\n\r\n                    var feedbackText = '';\r\n                    var isCorrect = false;\r\n\r\n                    // create a feedback object\r\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\r\n\r\n                    // add the feedback object\r\n                    choices.push(feedbackObject);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a bucket to the feedback\r\n     * @param bucketId the bucket id\r\n     */\r\n    addBucketToFeedback(bucketId) {\r\n\r\n        // get the feedback array. each element in the array represents a bucket.\r\n        var feedback = this.authoringComponentContent.feedback;\r\n\r\n        if (feedback != null) {\r\n\r\n            // create a new bucket feedback object\r\n            var bucket = {};\r\n            bucket.bucketId = bucketId;\r\n            bucket.choices = [];\r\n\r\n            // get all the choices\r\n            var choices = this.authoringComponentContent.choices;\r\n\r\n            // loop through all the choices and add a choice feedback object to the bucket\r\n            for (var c = 0; c < choices.length; c++) {\r\n                var choice = choices[c];\r\n\r\n                if (choice != null) {\r\n\r\n                    var choiceId = choice.id;\r\n                    var feedbackText = '';\r\n                    var isCorrect = false;\r\n\r\n                    // create a feedback object\r\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\r\n\r\n                    // add the feedback object\r\n                    bucket.choices.push(feedbackObject);\r\n                }\r\n            }\r\n\r\n            // add the feedback bucket\r\n            feedback.push(bucket);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a feedback object\r\n     * @param choiceId the choice id\r\n     * @param feedback the feedback\r\n     * @param isCorrect whether the choice is correct\r\n     * @param position (optional) the position\r\n     * @param incorrectPositionFeedback (optional) the feedback for when the\r\n     * choice is in the correct but wrong position\r\n     * @returns the feedback object\r\n     */\r\n    createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\r\n\r\n        var feedbackObject = {};\r\n        feedbackObject.choiceId = choiceId;\r\n        feedbackObject.feedback = feedback;\r\n        feedbackObject.isCorrect = isCorrect;\r\n        feedbackObject.position = position;\r\n        feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\r\n\r\n        return feedbackObject;\r\n    }\r\n\r\n    /**\r\n     * Remove a choice from the feedback\r\n     * @param choiceId the choice id to remove\r\n     */\r\n    removeChoiceFromFeedback(choiceId) {\r\n\r\n        // get the feedback array. each element in the array represents a bucket.\r\n        var feedback = this.authoringComponentContent.feedback;\r\n\r\n        if (feedback != null) {\r\n\r\n            /*\r\n             * loop through each bucket feedback and remove the choice from each\r\n             * bucket feedback object\r\n             */\r\n            for (var f = 0; f < feedback.length; f++) {\r\n                var bucketFeedback = feedback[f];\r\n\r\n                if (bucketFeedback != null) {\r\n\r\n                    var choices = bucketFeedback.choices;\r\n\r\n                    // loop through all the choices\r\n                    for (var c = 0; c < choices.length; c++) {\r\n                        var choice = choices[c];\r\n\r\n                        if (choice != null) {\r\n                            if (choiceId === choice.choiceId) {\r\n                                // we have found the choice we want to remove\r\n\r\n                                // remove the choice feedback object\r\n                                choices.splice(c, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a bucket from the feedback\r\n     * @param bucketId the bucket id to remove\r\n     */\r\n    removeBucketFromFeedback(bucketId) {\r\n\r\n        // get the feedback array. each element in the array represents a bucket.\r\n        var feedback = this.authoringComponentContent.feedback;\r\n\r\n        if (feedback != null) {\r\n\r\n            // loop through all the bucket feedback objects\r\n            for (var f = 0; f < feedback.length; f++) {\r\n                var bucketFeedback = feedback[f];\r\n\r\n                if (bucketFeedback != null) {\r\n\r\n                    if (bucketId === bucketFeedback.bucketId) {\r\n                        // we have found the bucket feedback object we want to remove\r\n\r\n                        // remove the bucket feedback object\r\n                        feedback.splice(f, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\r\n\r\n            // do nothing\r\n            this.$rootScope.$broadcast('doneExiting');\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Check if the component has been authored with a correct choice\r\n     * @return whether the component has been authored with a correct choice\r\n     */\r\n    hasCorrectChoices() {\r\n        var result = false;\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the buckets\r\n            var buckets = componentContent.feedback;\r\n\r\n            if (buckets != null) {\r\n\r\n                // loop through all the buckets\r\n                for (var b = 0; b < buckets.length; b++) {\r\n                    var bucket = buckets[b];\r\n\r\n                    if (bucket != null) {\r\n\r\n                        // get the choices\r\n                        var choices = bucket.choices;\r\n\r\n                        if (choices != null) {\r\n\r\n                            // loop through all the choices\r\n                            for (var c = 0; c < choices.length; c++) {\r\n                                var choice = choices[c];\r\n\r\n                                if (choice != null) {\r\n                                    if (choice.isCorrect) {\r\n                                        // there is a correct choice\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Remove a choice from a bucket\r\n     * @param choiceId the choice id we want to remove\r\n     * @param bucketId remove the choice from this bucket\r\n     */\r\n    removeChoiceFromBucket(choiceId, bucketId) {\r\n\r\n        if (choiceId != null && bucketId != null) {\r\n\r\n            // get the bucket\r\n            var bucket = this.getBucketById(bucketId);\r\n\r\n            if (bucket != null) {\r\n\r\n                // get the choices in the bucket\r\n                var bucketItems = bucket.items;\r\n\r\n                if (bucketItems != null) {\r\n\r\n                    // loop through all the choices in the bucket\r\n                    for (var i = 0; i < bucketItems.length; i++) {\r\n                        var bucketItem = bucketItems[i];\r\n\r\n                        if (bucketItem != null && bucketItem.id === choiceId) {\r\n                            // we have found the choice we want to remove\r\n                            bucketItems.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the feedback and isCorrect fields in all the choices\r\n     */\r\n    clearFeedback() {\r\n\r\n        // get all the choices\r\n        var choices = this.getChoices();\r\n\r\n        if (choices != null) {\r\n\r\n            // loop through all the choices\r\n            for (var c = 0; c < choices.length; c++) {\r\n                var choice = choices[c];\r\n\r\n                if (choice != null) {\r\n                    // set the feedback fields to null\r\n                    choice.isCorrect = null;\r\n                    choice.isIncorrectPosition = null;\r\n                    choice.feedback = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a choice has a correct bucket\r\n     * @param choiceId the choice id\r\n     * @return whether the choice has a correct bucket\r\n     */\r\n    choiceHasCorrectBucket(choiceId) {\r\n\r\n        var buckets = this.getFeedback();\r\n\r\n        if (buckets != null) {\r\n\r\n            // loop through all the buckets\r\n            for (var b = 0; b < buckets.length; b++) {\r\n                var bucket = buckets[b];\r\n\r\n                if (bucket != null) {\r\n                    var choices = bucket.choices;\r\n\r\n                    if (choices != null) {\r\n\r\n                        // loop through all the choices in the bucket\r\n                        for (var c = 0; c < choices.length; c++) {\r\n                            var choice = choices[c];\r\n\r\n                            if (choice != null && choice.choiceId === choiceId) {\r\n                                // we have found the choice we are looking for\r\n\r\n                                if (choice.isCorrect) {\r\n                                    /*\r\n                                     * the item is correct when placed in this bucket\r\n                                     * which means this choice does have a correct\r\n                                     * bucket\r\n                                     */\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check if the choice has a correct position\r\n     * @param choiceId the choice id\r\n     * @return whether the choice has a correct position in any bucket\r\n     */\r\n    choiceHasCorrectPosition(choiceId) {\r\n        var buckets = this.getFeedback();\r\n\r\n        if (buckets != null) {\r\n\r\n            // loop through all the buckets\r\n            for (var b = 0; b < buckets.length; b++) {\r\n                var bucket = buckets[b];\r\n\r\n                if (bucket != null) {\r\n                    var choices = bucket.choices;\r\n\r\n                    if (choices != null) {\r\n\r\n                        // loop through all the choices in the bucket\r\n                        for (var c = 0; c < choices.length; c++) {\r\n                            var choice = choices[c];\r\n\r\n                            if (choice != null && choice.choiceId === choiceId) {\r\n                                // we have found the choice we are looking for\r\n\r\n                                if (choice.position != null) {\r\n                                    /*\r\n                                     * the item has a position when placed in this bucket\r\n                                     * which means this choice does have a correct\r\n                                     * position\r\n                                     */\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Check if this component has been authored to have feedback or a correct\r\n     * choice\r\n     * @return whether this component has feedback or a correct choice\r\n     */\r\n    componentHasFeedback() {\r\n\r\n        // get the feedback\r\n        var feedback = this.authoringComponentContent.feedback;\r\n\r\n        if (feedback != null) {\r\n\r\n            // loop through all the feedback buckets\r\n            for (var f = 0; f < feedback.length; f++) {\r\n\r\n                var tempFeedback = feedback[f];\r\n\r\n                if (tempFeedback != null) {\r\n                    var tempChoices = tempFeedback.choices;\r\n\r\n                    if (tempChoices != null) {\r\n\r\n                        // loop through the feedback choices\r\n                        for (var c = 0; c < tempChoices.length; c++) {\r\n                            var tempChoice = tempChoices[c];\r\n\r\n                            if (tempChoice != null) {\r\n\r\n                                if (tempChoice.feedback != null && tempChoice.feedback != '') {\r\n                                    // this choice has feedback\r\n                                    return true;\r\n                                }\r\n\r\n                                if (tempChoice.isCorrect) {\r\n                                    // this choice is correct\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * The author has changed the feedback so we will enable the submit button\r\n     */\r\n    authoringViewFeedbackChanged() {\r\n\r\n        var show = true;\r\n\r\n        if (this.componentHasFeedback()) {\r\n            // this component has feedback so we will show the submit button\r\n            show = true;\r\n        } else {\r\n            /*\r\n             * this component does not have feedback so we will not show the\r\n             * submit button\r\n             */\r\n            show = false;\r\n        }\r\n\r\n        // show or hide the submit button\r\n        this.setShowSubmitButtonValue(show);\r\n\r\n        // save the component\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Show the asset popup to allow the author to choose an image for the\r\n     * choice\r\n     * @param choice the choice object to set the image into\r\n     */\r\n    chooseChoiceAsset(choice) {\r\n        // generate the parameters\r\n        var params = {};\r\n        params.popup = true;\r\n        params.nodeId = this.nodeId;\r\n        params.componentId = this.componentId;\r\n        params.target = 'choice';\r\n        params.targetObject = choice;\r\n\r\n        // display the asset chooser\r\n        this.$rootScope.$broadcast('openAssetChooser', params);\r\n    }\r\n\r\n    /**\r\n     * Show the asset popup to allow the author to choose an image for the\r\n     * bucket\r\n     * @param bucket the bucket object to set the image into\r\n     */\r\n    chooseBucketAsset(bucket) {\r\n        // generate the parameters\r\n        var params = {};\r\n        params.popup = true;\r\n        params.nodeId = this.nodeId;\r\n        params.componentId = this.componentId;\r\n        params.target = 'bucket';\r\n        params.targetObject = bucket;\r\n\r\n        // display the asset chooser\r\n        this.$rootScope.$broadcast('openAssetChooser', params);\r\n    }\r\n}\r\n\r\nMatchController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    'AnnotationService',\r\n    'dragulaService',\r\n    'ConfigService',\r\n    'MatchService',\r\n    'NodeService',\r\n    'ProjectService',\r\n    'StudentDataService',\r\n    'UtilService',\r\n    '$mdMedia'\r\n];\r\n\r\nexport default MatchController;\r\n"]}