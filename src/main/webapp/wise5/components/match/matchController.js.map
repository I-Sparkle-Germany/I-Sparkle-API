{"version":3,"sources":["matchController.es6"],"names":["MatchController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","dragulaService","ConfigService","MatchService","NodeService","ProjectService","StudentDataService","UtilService","$mdMedia","idToOrder","autoScroll","require","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isShowPreviousWork","isSubmit","choices","buckets","isCorrect","bucketWidth","choiceColumns","horizontal","choiceStyle","bucketStyle","saveMessage","text","time","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","submitCounter","sourceBucketId","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","isSubmitButtonDisabled","initializeChoices","initializeBuckets","hasCorrectChoices","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","dragId","dropEvent","$on","e","el","container","source","matchController","studentDataChanged","options","moves","handle","sibling","drake","find","on","className","replace","scroll","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","saveFailed","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","md","mdScreen","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","targetObject","authoringViewComponentChanged","hide","studentData","componentStateBuckets","choicesBucket","getBucketById","items","bucketIds","map","b","choiceIds","c","i","l","length","componentStateBucketId","indexOf","currentBucket","currentChoices","x","len","currentChoice","currentChoiceId","currentChoiceLocation","bucket","updatedChoice","getChoiceById","push","splice","checkAnswer","processLatestSubmit","onload","componentStates","getComponentStatesByNodeIdAndComponentId","numStates","latestSubmitState","latestBucketIds","latestChoiceIds","excludeIds","latestSubmitStateBuckets","latestBucket","latestBucketId","submitBucket","latestBucketChoiceIds","submitChoiceIds","latestBucketChoiceId","choiceHasCorrectPosition","latestState","Math","round","n","originBucket","choicesLabel","getChoices","choice","getBuckets","bucketsJSONString","toJson","copyOfBuckets","fromJson","isLockAfterSubmit","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","ids","bucketId","item","position","choiceId","choiceIdHasCorrectBucket","choiceHasCorrectBucket","feedbackObject","getFeedbackObject","feedback","feedbackPosition","feedbackIsCorrect","ordered","isIncorrectPosition","incorrectPositionFeedback","getFeedback","f","bucketFeedback","tempBucketId","choiceFeedback","tempChoiceId","getComponentId","createNewComponentState","clearFeedback","getCopyOfBuckets","componentType","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","updateIdsFromImportedWork","studentBuckets","studentBucket","tempStudentBucketText","getBucketByText","studentChoices","studentChoice","tempStudentChoiceText","getChoiceByText","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","addChoiceToFeedback","newBucket","addBucketToFeedback","index","bucketFeedbackChoices","tempChoice","deletedChoice","removeChoiceFromFeedback","deletedBucket","removeBucketFromFeedback","tempBucket","feedbackText","createFeedbackObject","exitListener","$broadcast","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","bucketItems","bucketItem","newConnectedComponent","updateOn","connectedComponents","tempFeedback","tempChoices","show","componentHasFeedback","setShowSubmitButtonValue","params","isPopup","tags","tag","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedBuckets","mergeBucket","bucketFound","tempItems","mergeItems","oldItems","newItems","oldItemIds","getIds","newItem","arrayOfObjects","o","obj","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      dragulaService,\n      ConfigService,\n      MatchService,\n      NodeService,\n      ProjectService,\n      StudentDataService,\n      UtilService,\n      $mdMedia) {\n\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.dragulaService = dragulaService;\n    this.ConfigService = ConfigService;\n    this.MatchService = MatchService;\n    this.NodeService = NodeService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$mdMedia = $mdMedia;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.autoScroll = require('dom-autoscroller');\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether this part is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // the choices\n    this.choices = [];\n\n    // the buckets\n    this.buckets = [];\n\n    // whether the student has correctly placed the choices\n    this.isCorrect = null;\n\n    // the flex (%) width for displaying the buckets\n    this.bucketWidth = 100;\n\n    // the number of columns for displaying the choices\n    this.choiceColumns = 1;\n\n    // whether to orient the choices and buckets side-by-side\n    this.horizontal = false;\n\n    // css style for the choice items\n    this.choiceStyle = '';\n\n    // css style for the buckets\n    this.bucketStyle = '';\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // the id for the source bucket\n    this.sourceBucketId = '0';\n\n    // whether this component has been authored with a correct answer\n    this.hasCorrectAnswer = false;\n\n    // whether the latest component state was a submit\n    this.isLatestComponentStateSubmit = false;\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Match'\n      }\n    ];\n\n    // get the current node and node id\n    var currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      this.nodeId = currentNode.id;\n    } else {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n      this.horizontal = this.componentContent.horizontal;\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n          this.isCorrect = null;\n          this.submitCounter = 0;\n          this.isDisabled = false;\n          this.isSubmitButtonDisabled = false;\n\n          /*\n           * initialize the choices and buckets with the values from the\n           * component content\n           */\n          this.initializeChoices();\n          this.initializeBuckets();\n        }.bind(this), true);\n      }\n\n      // check if there is a correct answer\n      this.hasCorrectAnswer = this.hasCorrectChoices();\n\n      /*\n       * initialize the choices and buckets with the values from the\n       * component content\n       */\n      this.initializeChoices();\n      this.initializeBuckets();\n\n      // get the component state from the scope\n      var componentState = this.$scope.componentState;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.MatchService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        } else if (componentState == null) {\n          // check if we need to import work\n\n          // check if we need to import work\n          var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n          var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n          if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n            /*\n             * check if the node id is in the field that we used to store\n             * the import previous work node id in\n             */\n            importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n          }\n\n          if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n            /*\n             * check if the component id is in the field that we used to store\n             * the import previous work component id in\n             */\n            importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n          }\n\n          if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n          }\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      if (componentState != null && componentState.isSubmit) {\n        /*\n         * the latest component state is a submit. this is used to\n         * determine if we should show the feedback.\n         */\n        this.isLatestComponentStateSubmit = true;\n      }\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isDisabled = true;\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    let dragId = 'match_' + this.componentId;\n    // handle choice drop events\n    let dropEvent = dragId + '.drop-model';\n    this.$scope.$on(dropEvent, (e, el, container, source) => {\n      // choice item has been dropped in new location, so run studentDataChanged function\n      this.$scope.matchController.studentDataChanged();\n    });\n\n    // drag and drop options\n    this.dragulaService.options(this.$scope, dragId, {\n      moves: (el, source, handle, sibling) => {\n        return !this.$scope.matchController.isDisabled;\n      }\n    });\n\n    // provide visual indicator when choice is dragged over a new bucket\n    let drake = dragulaService.find(this.$scope, dragId).drake;\n    drake.on('over', (el, container, source) => {\n      if (source !== container) {\n        container.className += ' match-bucket__contents--over';\n      }\n    }).on('out', (el, container, source) => {\n      if (source !== container) {\n        container.className = container.className.replace('match-bucket__contents--over', '');;\n      }\n    });\n\n    // support scroll while dragging\n    let scroll = this.autoScroll(\n      [document.querySelector('#content')], {\n      margin: 30,\n      pixels: 50,\n      scrollWhenOutside: true,\n      autoScroll: function() {\n        // Only scroll when the pointer is down, and there is a child being dragged\n        return this.down && drake.dragging;\n      }\n    });\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.matchController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.matchController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.matchController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        // set saveFailed to false because the save was successful\n        this.saveFailed = false;\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n      // do nothing\n    }));\n\n    this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n      $scope.mdScreen = md;\n    });\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              if (args.target == 'prompt' || args.target == 'rubric') {\n\n                var summernoteId = '';\n\n                if (args.target == 'prompt') {\n                  // the target is the summernote prompt element\n                  summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                } else if (args.target == 'rubric') {\n                  // the target is the summernote rubric element\n                  summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                }\n\n                if (summernoteId != '') {\n                  if (this.UtilService.isImage(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // add the image html\n                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                  } else if (this.UtilService.isVideo(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // insert the video element\n                    var videoElement = document.createElement('video');\n                    videoElement.controls = 'true';\n                    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                  }\n                }\n              } else if (args.target == 'choice') {\n                // the target is a choice\n\n                /*\n                 * get the target object which should be a\n                 * choice object\n                 */\n                var targetObject = args.targetObject;\n\n                if (targetObject != null) {\n\n                  // create the img html\n                  var text = '<img src=\"' + fileName + '\"/>';\n\n                  // set the html into the choice text\n                  targetObject.value = text;\n\n                  // save the component\n                  this.authoringViewComponentChanged();\n                }\n              } else if (args.target == 'bucket') {\n                // the target is a bucket\n\n                /*\n                 * get the target object which should be a\n                 * choice object\n                 */\n                var targetObject = args.targetObject;\n\n                if (targetObject != null) {\n\n                  // create the img html\n                  var text = '<img src=\"' + fileName + '\"/>';\n\n                  // set the html into the choice text\n                  targetObject.value = text;\n\n                  // save the component\n                  this.authoringViewComponentChanged();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n    if (componentState != null) {\n\n      // get the student data from the component state\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the buckets and number of submits\n        let componentStateBuckets = studentData.buckets;\n\n        // set the buckets\n        if (componentStateBuckets != null) {\n\n          // clear the choices bucket\n          let choicesBucket = this.getBucketById(this.sourceBucketId);\n          choicesBucket.items = [];\n\n          let bucketIds = this.buckets.map(b => { return b.id; });\n          let choiceIds = this.choices.map(c => { return c.id; });\n\n          for (let i = 0, l = componentStateBuckets.length; i < l; i++) {\n            let componentStateBucketId = componentStateBuckets[i].id;\n            // componentState bucket is a valid bucket, so process choices\n            if (bucketIds.indexOf(componentStateBucketId) > -1) {\n              let currentBucket = componentStateBuckets[i];\n              let currentChoices = currentBucket.items;\n\n              for (let x = 0, len = currentChoices.length; x < len; x++) {\n                let currentChoice = currentChoices[x];\n                let currentChoiceId = currentChoice.id;\n                let currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n                if (currentChoiceLocation > -1) {\n                  // choice is valid and used by student in a valid bucket, so add it to that bucket\n                  let bucket = this.getBucketById(componentStateBucketId);\n                  // content for choice with this id may have change, so get updated content\n                  let updatedChoice = this.getChoiceById(currentChoiceId);\n                  bucket.items.push(updatedChoice);\n                  choiceIds.splice(currentChoiceLocation, 1);\n                }\n              }\n            }\n          }\n\n          // add unused choices to the source bucket\n          for (let i = 0, l = choiceIds.length; i < l; i++) {\n            choicesBucket.items.push(this.getChoiceById(choiceIds[i]));\n          }\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        if (this.submitCounter > 0) {\n          // the student has submitted at least once in the past\n\n          if (componentState.isSubmit) {\n            /*\n             * the component state was a submit so we will check the\n             * answer\n             */\n            this.checkAnswer()\n          } else {\n            /*\n             * The component state was not a submit but the student\n             * submitted some time in the past. We want to show the\n             * feedback for choices that have not moved since the\n             * student submitted.\n             */\n            this.processLatestSubmit(true);\n          }\n        } else {\n          /*\n           * there was no submit in the past but we will still need to\n           * check if submit is dirty.\n           */\n          this.processLatestSubmit(true);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the latest submitted componentState and display feedback for choices\n   * that haven't changed since. This will also determine if submit is dirty.\n   * @param onload boolean whether this function is being executed on the\n   * initial component load or not\n   */\n  processLatestSubmit(onload) {\n    let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    let numStates = componentStates.length\n    let latestSubmitState = null;\n\n    for (let l = numStates-1; l > -1; l--) {\n      let componentState = componentStates[l];\n      if (componentState.isSubmit) {\n        latestSubmitState = componentState;\n        break;\n      }\n    }\n\n    if (latestSubmitState && latestSubmitState.studentData) {\n      let latestBucketIds = this.buckets.map(b => { return b.id; });\n      let latestChoiceIds = this.choices.map(c => { return c.id; });\n      let excludeIds = [];\n      let latestSubmitStateBuckets = latestSubmitState.studentData.buckets;\n\n      // loop through all the buckets in the latest student data\n      for (let b = 0; b < this.buckets.length; b++) {\n\n        // get a bucket from the latest student data\n        let latestBucket = this.buckets[b];\n\n        if (latestBucket != null) {\n          let latestBucketId = latestBucket.id;\n\n          // get the same bucket in the previously submitted student data\n          let submitBucket = this.getBucketById(latestBucketId, latestSubmitStateBuckets);\n\n          if (submitBucket != null) {\n            // get the choice ids in the bucket in the latest student data\n            let latestBucketChoiceIds = latestBucket.items.map(c => { return c.id; });\n\n            // get the choice ids in the bucket in the previously submitted student data\n            let submitChoiceIds = submitBucket.items.map(c => { return c.id; });\n\n            // loop through all the choice ids in the bucket in the latest student data\n            for (let c = 0; c < latestBucketChoiceIds.length; c++) {\n              let latestBucketChoiceId = latestBucketChoiceIds[c];\n\n              if (submitChoiceIds.indexOf(latestBucketChoiceId) == -1) {\n                /*\n                 * the choice in the latest state is not in the same\n                 * bucket as it was in the last submit so we will\n                 * not show the feedback for this choice by adding\n                 * it to the excluded choice ids\n                 */\n                excludeIds.push(latestBucketChoiceId);\n              } else {\n                /*\n                 * the choice is in the same bucket as it was in\n                 * the last submit\n                 */\n\n                 if (this.choiceHasCorrectPosition(latestBucketChoiceId)) {\n                   /*\n                    * the choice has a correct position so we will check if\n                    * the position is the same in the submit vs the latest\n                    */\n                   if (c != submitChoiceIds.indexOf(latestBucketChoiceId)) {\n                     // the position has changed so we will not show the feedback\n                     excludeIds.push(latestBucketChoiceId);\n                   }\n                 }\n              }\n            }\n          }\n        }\n      }\n\n      if (excludeIds.length) {\n        // state has changed since last submit, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n      } else {\n        // state has not changed since last submit, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n      }\n      this.checkAnswer(excludeIds);\n    } else {\n      this.isSubmitDirty = true;\n      this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    }\n\n    if (onload && numStates) {\n      let latestState = componentStates[numStates-1];\n\n      if (latestState) {\n        let serverSaveTime = latestState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n        if (latestState.isSubmit) {\n          // set whether the latest component state is correct\n          this.isCorrect = latestState.isCorrect;\n          // latest state is a submission, so set isSubmitDirty to false and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n          // set save message\n          this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n        } else {\n          /*\n           * the latest component state was not a submit so we will\n           * not show whether it was correct or incorrect\n           */\n          this.isCorrect = null;\n          // latest state is not a submission, so set isSubmitDirty to true and notify node\n          this.isSubmitDirty = true;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n          // set save message\n          this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n        }\n      }\n    }\n  };\n\n  /**\n   * Initialize the available choices from the component content\n   */\n  initializeChoices() {\n\n    this.choices = [];\n\n    if(this.componentContent != null && this.componentContent.choices != null) {\n      this.choices = this.componentContent.choices;\n    }\n  };\n\n  /**\n   * Get the choices\n   */\n  getChoices() {\n    return this.choices;\n  };\n\n  /**\n   * Initialize the available buckets from the component content\n   */\n  initializeBuckets() {\n\n    this.buckets = [];\n\n    if (this.componentContent != null && this.componentContent.buckets != null) {\n\n      // get the buckets from the component content\n      let buckets = this.componentContent.buckets;\n\n      if (this.horizontal) {\n        this.bucketWidth = 100;\n        this.choiceColumns = 1;\n      } else {\n        if (typeof this.componentContent.bucketWidth === 'number') {\n          this.bucketWidth = this.componentContent.bucketWidth;\n          this.choiceColumns = Math.round(100/this.componentContent.bucketWidth);\n        } else {\n          let n = buckets.length;\n          if (n % 3 === 0 || n > 4) {\n            this.bucketWidth = Math.round(100/3);\n            this.choiceColumns = 3;\n          } else if (n % 2 === 0) {\n            this.bucketWidth = 100/2;\n            this.choiceColumns = 2;\n          }\n        }\n\n        if (typeof this.componentContent.choiceColumns === 'number') {\n          this.choiceColumns = this.componentContent.choiceColumns;\n        }\n\n        this.choiceStyle = {\n          '-moz-column-count': this.choiceColumns,\n          '-webkit-column-count': this.choiceColumns,\n          'column-count':this.choiceColumns\n        };\n\n        if (this.bucketWidth === 100) {\n          this.bucketStyle = this.choiceStyle;\n        }\n      }\n\n      /*\n       * create a bucket that will contain the choices when\n       * the student first starts working\n       */\n      let originBucket = {};\n      originBucket.id = this.sourceBucketId;\n      originBucket.value = this.componentContent.choicesLabel ? this.componentContent.choicesLabel : this.$translate('match.choices');\n      originBucket.type = 'bucket';\n      originBucket.items = [];\n\n      let choices = this.getChoices();\n\n      // add all the choices to the origin bucket\n      for (let c = 0; c < choices.length; c++) {\n        let choice = choices[c];\n\n        originBucket.items.push(choice);\n      }\n\n      // add the origin bucket to our array of buckets\n      this.buckets.push(originBucket);\n\n      // add all the other buckets to our array of buckets\n      for (let b = 0; b < buckets.length; b++) {\n        let bucket = buckets[b];\n\n        bucket.items = [];\n\n        this.buckets.push(bucket);\n      }\n    }\n  };\n\n  /**\n   * Get the buckets\n   */\n  getBuckets() {\n    return this.buckets;\n  };\n\n  /**\n   * Create a copy of the buckets for cases when we want to make\n   * sure we don't accidentally change a bucket and have it also\n   * change previous versions of the buckets.\n   * @return a copy of the buckets\n   */\n  getCopyOfBuckets() {\n    var buckets = this.getBuckets();\n\n    // get a JSON string representation of the buckets\n    var bucketsJSONString = angular.toJson(buckets);\n\n    // turn the JSON string back into a JSON array\n    var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n    return copyOfBuckets;\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    if (this.mode === 'authoring') {\n      /*\n       * we are in authoring mode so we will set isDirty to false here\n       * because the 'componentSaveTriggered' event won't work in\n       * authoring mode\n       */\n      this.isDirty = false;\n    }\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n  * Called when either the component or node is submitted\n  */\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n\n    // check if the student answered correctly\n    //this.processLatestSubmit();\n  }\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know it is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // clear the isCorrect value because it will be evaluated again later\n        this.isCorrect = null;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  /**\n   * Check if the student has answered correctly\n   * @param ids array of choice ids to exclude\n   */\n  checkAnswer(ids) {\n    let isCorrect = true;\n\n    // get the buckets\n    let buckets = this.getBuckets();\n    let excludeIds = ids ? ids : [];\n\n    if (buckets != null) {\n\n      // loop through all the buckets\n      for(let b = 0, l = buckets.length; b < l; b++) {\n\n        // get a bucket\n        let bucket = buckets[b];\n\n        if (bucket != null) {\n          let bucketId = bucket.id;\n          let items = bucket.items;\n\n          if (items != null) {\n\n            // loop through all the items in the bucket\n            for (let i = 0, len = items.length; i < len; i++) {\n              let item = items[i];\n              let position = i + 1;\n\n              if (item != null) {\n                let choiceId = item.id;\n\n                // check if the choice has a correct bucket it should be in\n                let choiceIdHasCorrectBucket = this.choiceHasCorrectBucket(choiceId);\n\n                // get the feedback object for the bucket and choice\n                let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                if (feedbackObject != null) {\n                  let feedback = feedbackObject.feedback;\n\n                  let feedbackPosition = feedbackObject.position;\n                  let feedbackIsCorrect = feedbackObject.isCorrect;\n\n                  if (this.hasCorrectAnswer) {\n\n                    if (!choiceIdHasCorrectBucket) {\n                      /*\n                       * the component has a correct answer but there\n                       * is no correct bucket for the current choice\n                       */\n\n                      if (bucketId == this.sourceBucketId) {\n                        /*\n                         * the choice is in the source bucket and\n                         * the choice does not have a correct bucket\n                         * so we will mark the choice as correct\n                         */\n                        feedbackIsCorrect = true;\n                      }\n                    }\n                  }\n\n                  if (feedback == null || feedback == '') {\n                    // there is no authored feedback\n\n                    if (this.hasCorrectAnswer) {\n                      /*\n                       * there is a correct answer for the component\n                       * so we will show default feedback\n                       */\n                      if (feedbackIsCorrect) {\n                        feedback = this.$translate('CORRECT');\n                      } else {\n                        feedback = this.$translate('INCORRECT');\n                      }\n                    }\n                  }\n\n                  if (!this.componentContent.ordered || feedbackPosition == null) {\n                    /*\n                     * position does not matter and the choice may be\n                     * in the correct or incorrect bucket\n                     */\n\n                    // set the feedback into the item\n                    item.feedback = feedback;\n\n                    // set whether the choice is in the correct bucket\n                    item.isCorrect = feedbackIsCorrect;\n\n                    /*\n                     * there is no feedback position in the feeback object so\n                     * position doesn't matter\n                     */\n                    item.isIncorrectPosition = false;\n\n                    // update whether the student has answered the step correctly\n                    isCorrect = isCorrect && feedbackIsCorrect;\n                  } else {\n                    /*\n                     * position does matter and the choice is in a correct\n                     * bucket. we know this because a feedback object will\n                     * only have a non-null position value if the choice is\n                     * in the correct bucket. if the feedback object is for\n                     * a choice that is in an incorrect bucket, the position\n                     * value will be null.\n                     */\n\n                    if (position === feedbackPosition) {\n                      // the item is in the correct position\n\n                      // set the feedback into the item\n                      item.feedback = feedback;\n\n                      // set whether the choice is in the correct bucket\n                      item.isCorrect = feedbackIsCorrect;\n\n                      // the choice is in the correct position\n                      item.isIncorrectPosition = false;\n\n                      // update whether the student has answered the step correctly\n                      isCorrect = isCorrect && feedbackIsCorrect;\n                    } else {\n                      // item is in the correct bucket but wrong position\n\n                      /*\n                       * get the feedback for when the choice is in the correct\n                       * bucket but wrong position\n                       */\n                      let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n\n                      // set the default feedback if none is authored\n                      if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                        incorrectPositionFeedback = this.$translate('match.correctBucketButWrongPosition');\n                      }\n\n                      item.feedback = incorrectPositionFeedback;\n\n                      /*\n                       * the choice is in the incorrect position so it isn't correct\n                       */\n                      item.isCorrect = false;\n\n                      // the choice is in the incorrect position\n                      item.isIncorrectPosition = true;\n\n                      // the student has answered incorrectly\n                      isCorrect = false;\n                    }\n                  }\n                }\n\n                if (!this.hasCorrectAnswer) {\n                  /*\n                   * the component does not have a correct answer\n                   * so we will clear the isCorrect and isIncorrectPosition\n                   * fields\n                   */\n                  item.isCorrect = null;\n                  item.isIncorrectPosition = null;\n                }\n\n                if (excludeIds.indexOf(choiceId) > -1) {\n                  // don't show feedback for choices that should be excluded\n                  item.feedback = null;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (this.hasCorrectAnswer) {\n      /*\n       * set the isCorrect value into the controller\n       * so we can read it later\n       */\n      this.isCorrect = isCorrect;\n    } else {\n      this.isCorrect = null;\n    }\n  };\n\n  /**\n   * Get the array of feedback\n   * @return the array of feedback objects\n   */\n  getFeedback() {\n    var feedback = null;\n\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the feedback from the component content\n      feedback = componentContent.feedback;\n    }\n\n    return feedback;\n  }\n\n  /**\n   * Get the feedback object for the combination of bucket and choice\n   * @param bucketId the bucket id\n   * @param choiceId the choice id\n   * @return the feedback object for the combination of bucket and choice\n   */\n  getFeedbackObject(bucketId, choiceId) {\n    var feedbackObject = null;\n\n    // get the feedback\n    var feedback = this.getFeedback();\n\n    if (feedback != null) {\n\n      /*\n       * loop through the feedback. each element in the feedback represents\n       * a bucket\n       */\n      for (var f = 0; f < feedback.length; f++) {\n\n        // get a bucket feedback object\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          // get the bucket id\n          var tempBucketId = bucketFeedback.bucketId;\n\n          if (bucketId === tempBucketId) {\n            // we have found the bucket we are looking for\n\n            var choices = bucketFeedback.choices;\n\n            if (choices != null) {\n\n              // loop through all the choice feedback\n              for (var c = 0; c < choices.length; c++) {\n                var choiceFeedback = choices[c];\n\n                if (choiceFeedback != null) {\n                  var tempChoiceId = choiceFeedback.choiceId;\n\n                  if (choiceId === tempChoiceId) {\n                    // we have found the choice we are looking for\n                    feedbackObject = choiceFeedback;\n                    break;\n                  }\n                }\n              }\n\n              if (feedbackObject != null) {\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return feedbackObject;\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    this.isCorrect = null;\n    this.isLatestComponentStateSubmit = false;\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    let componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n\n      let studentData = {};\n\n\n      if (action === 'submit') {\n\n        /*\n         * check if the choices are in the correct buckets and also\n         * display feedback\n         */\n        this.checkAnswer();\n\n        if (this.hasCorrectAnswer && this.isCorrect != null) {\n          /*\n           * there are correct choices so we will set whether the\n           * student was correct\n           */\n          studentData.isCorrect = this.isCorrect;\n        }\n\n        /*\n         * the latest component state is a submit. this is used to\n         * determine if we should show the feedback.\n         */\n        this.isLatestComponentStateSubmit = true;\n      } else {\n\n        // clear the feedback in the choices\n        this.clearFeedback();\n        this.processLatestSubmit();\n\n        /*\n         * the latest component state is not a submit. this is used to\n         * determine if we should show the feedback.\n         */\n        this.isLatestComponentStateSubmit = false;\n      }\n\n      // set the buckets into the student data\n      studentData.buckets = this.getCopyOfBuckets();\n\n      // the student submitted this work\n      componentState.isSubmit = this.isSubmit;\n\n      // set the submit counter\n      studentData.submitCounter = this.submitCounter;\n\n      /*\n       * reset the isSubmit value so that the next component state\n       * doesn't maintain the same value\n       */\n      this.isSubmit = false;\n\n      //set the student data into the component state\n      componentState.studentData = studentData;\n\n      // set the component type\n      componentState.componentType = 'Match';\n\n      // set the node id\n      componentState.nodeId = this.nodeId;\n\n      // set the component id\n      componentState.componentId = this.componentId;\n    }\n\n    let deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n            /*\n             * update the choice ids so that it uses the choice ids\n             * from this component. we need to do this because the choice\n             * ids are likely to be different. we update the choice ids\n             * by matching the choice text.\n             */\n            this.updateIdsFromImportedWork(populatedComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Update the choice ids and bucket ids to use the ids from this component.\n   * We will use the choice text and bucket text to perform matching.\n   * @param componentState the component state\n   */\n  updateIdsFromImportedWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the buckets from the student data\n        var studentBuckets = studentData.buckets;\n\n        if (studentBuckets != null) {\n\n          // loop through all the student buckets\n          for (var b = 0; b < studentBuckets.length; b++) {\n\n            // get a student bucket\n            var studentBucket = studentBuckets[b];\n\n            if (studentBucket != null) {\n\n              // get the text of the student bucket\n              var tempStudentBucketText = studentBucket.value;\n\n              // get the bucket from this component that has the matching text\n              var bucket = this.getBucketByText(tempStudentBucketText);\n\n              if (bucket != null) {\n                // change the id of the student bucket\n                studentBucket.id = bucket.id;\n              }\n\n              // get the choices the student put into this bucket\n              var studentChoices = studentBucket.items;\n\n              if (studentChoices != null) {\n\n                // loop through the choices in the bucket\n                for (var c = 0; c < studentChoices.length; c++) {\n\n                  // get a student choice\n                  var studentChoice = studentChoices[c];\n\n                  if (studentChoice != null) {\n\n                    // get the text of the student choice\n                    var tempStudentChoiceText = studentChoice.value;\n\n                    // get the choice from this component that has the matching text\n                    var choice = this.getChoiceByText(tempStudentChoiceText);\n\n                    if (choice != null) {\n                      // change the id of the student choice\n                      studentChoice.id = choice.id;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the component content\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Add a choice\n   */\n  authoringAddChoice() {\n\n    // create a new choice\n    var newChoice = {};\n    newChoice.id = this.UtilService.generateKey(10);\n    newChoice.value = '';\n    newChoice.type = 'choice';\n\n    // add the choice to the array of choices\n    this.authoringComponentContent.choices.push(newChoice);\n\n    // add the choice to the feedback\n    this.addChoiceToFeedback(newChoice.id);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a bucket\n   */\n  authoringAddBucket() {\n\n    // create a new bucket\n    var newBucket = {};\n    newBucket.id = this.UtilService.generateKey(10);\n    newBucket.value = '';\n    newBucket.type = 'bucket';\n\n    // add the bucket to the array of buckets\n    this.authoringComponentContent.buckets.push(newBucket);\n\n    // add the bucket to the feedback\n    this.addBucketToFeedback(newBucket.id);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a choice up\n   * @param index the index of the choice\n   */\n  authoringMoveChoiceUp(index) {\n\n    if (index != 0) {\n      // the choice is not at the top so we can move it up\n\n      // remember the choice\n      var choice = this.authoringComponentContent.choices[index];\n\n      if (choice != null) {\n\n        // remove the choice\n        this.authoringComponentContent.choices.splice(index, 1);\n\n        // insert the choice one index back\n        this.authoringComponentContent.choices.splice(index - 1, 0, choice);\n      }\n\n      /*\n       * get the feedback so we can update the order of the choices within\n       * the bucket feedback\n       */\n      var feedback = this.authoringComponentContent.feedback;\n\n      if (feedback != null) {\n\n        // loop through all the bucket feedback objects\n        for (var f = 0; f < feedback.length; f++) {\n          var bucketFeedback = feedback[f];\n\n          if (bucketFeedback != null) {\n\n            // get all the choices\n            var bucketFeedbackChoices = bucketFeedback.choices;\n\n            if (bucketFeedbackChoices != null) {\n\n              // remmeber the choice\n              var tempChoice = bucketFeedbackChoices[index];\n\n              if (tempChoice != null) {\n                // remove the choice\n                bucketFeedbackChoices.splice(index, 1);\n\n                // insert the choice one index back\n                bucketFeedbackChoices.splice(index - 1, 0, tempChoice);\n              }\n            }\n          }\n        }\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a choice down\n   * @param index the index of the choice\n   */\n  authoringMoveChoiceDown(index) {\n\n    if (index < this.authoringComponentContent.choices.length - 1) {\n      // the choice is not at the bottom so we can move it down\n\n      // remember the choice\n      var choice = this.authoringComponentContent.choices[index];\n\n      if (choice != null) {\n\n        // remove the choice\n        this.authoringComponentContent.choices.splice(index, 1);\n\n        // insert the choice one index forward\n        this.authoringComponentContent.choices.splice(index + 1, 0, choice);\n      }\n\n      /*\n       * get the feedback so we can update the order of the choices within\n       * the bucket feedback\n       */\n      var feedback = this.authoringComponentContent.feedback;\n\n      if (feedback != null) {\n\n        // loop through all the bucket feedback objects\n        for (var f = 0; f < feedback.length; f++) {\n          var bucketFeedback = feedback[f];\n\n          if (bucketFeedback != null) {\n\n            // get all the choices\n            var bucketFeedbackChoices = bucketFeedback.choices;\n\n            if (bucketFeedbackChoices != null) {\n\n              // remmeber the choice\n              var tempChoice = bucketFeedbackChoices[index];\n\n              if (tempChoice != null) {\n                // remove the choice\n                bucketFeedbackChoices.splice(index, 1);\n\n                // insert the choice one index forward\n                bucketFeedbackChoices.splice(index + 1, 0, tempChoice);\n              }\n            }\n          }\n        }\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a choice\n   * @param index the index of the choice in the choice array\n   */\n  authoringDeleteChoice(index) {\n\n    // confirm with the user that they want to delete the choice\n    var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisChoice'));\n\n    if (answer) {\n\n      // remove the choice from the array\n      var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n      if (deletedChoice != null && deletedChoice.length > 0) {\n\n        // splice returns an array so we need to get the element out of it\n        deletedChoice = deletedChoice[0];\n\n        // get the choice id\n        var choiceId = deletedChoice.id;\n\n        // remove the choice from the feedback\n        this.removeChoiceFromFeedback(choiceId);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a bucket up\n   * @param index the index of the bucket\n   */\n  authoringMoveBucketUp(index) {\n\n    if (index > 0) {\n      // the bucket is not at the top so we can move it up\n\n      // remember the bucket\n      var bucket = this.authoringComponentContent.buckets[index];\n\n      if (bucket != null) {\n\n        // remove the bucket\n        this.authoringComponentContent.buckets.splice(index, 1);\n\n        // insert the bucket one index back\n        this.authoringComponentContent.buckets.splice(index - 1, 0, bucket);\n      }\n\n      /*\n       * Remember the bucket feedback. The first element of the feedback\n       * contains the origin bucket. The first authored bucket is located\n       * at index 1. This means we need the index of the bucket feedback\n       * that we want is located at index + 1.\n       */\n      var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\n\n      if (bucketFeedback != null) {\n\n        // remove the bucket feedback\n        this.authoringComponentContent.feedback.splice(index + 1, 1);\n\n        // insert the bucket one index back\n        this.authoringComponentContent.feedback.splice(index, 0, bucketFeedback);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a bucket down\n   * @param index the index of the bucket\n   */\n  authoringMoveBucketDown(index) {\n\n    if (index < this.authoringComponentContent.buckets.length - 1) {\n      // the bucket is not at the bottom so we can move it down\n\n      // remember the bucket\n      var bucket = this.authoringComponentContent.buckets[index];\n\n      if (bucket != null) {\n\n        // remove the bucket\n        this.authoringComponentContent.buckets.splice(index, 1);\n\n        // insert the bucket one index forward\n        this.authoringComponentContent.buckets.splice(index + 1, 0, bucket);\n      }\n\n      /*\n       * Remember the bucket feedback. The first element of the feedback\n       * contains the origin bucket. The first authored bucket is located\n       * at index 1. This means we need the index of the bucket feedback\n       * that we want is located at index + 1.\n       */\n      var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\n\n      if (bucketFeedback != null) {\n\n        // remove the bucket feedback\n        this.authoringComponentContent.feedback.splice(index + 1, 1);\n\n        // insert the bucket one index forward\n        this.authoringComponentContent.feedback.splice(index + 2, 0, bucketFeedback);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a bucket\n   * @param index the index of the bucket in the bucket array\n   */\n  authoringDeleteBucket(index) {\n\n    // confirm with the user tha tthey want to delete the bucket\n    var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisBucket'));\n\n    if (answer) {\n\n      // remove the bucket from the array\n      var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n      if (deletedBucket != null && deletedBucket.length > 0) {\n\n        // splice returns an array so we need to get the element out of it\n        deletedBucket = deletedBucket[0];\n\n        // get the bucket id\n        var bucketId = deletedBucket.id;\n\n        // remove the bucket from the feedback\n        this.removeBucketFromFeedback(bucketId);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the choice by id from the authoring component content\n   * @param id the choice id\n   * @returns the choice object from the authoring component content\n   */\n  getChoiceById(id) {\n\n    var choice = null;\n\n    // get the choices\n    var choices = this.componentContent.choices;\n\n    // loop through all the choices\n    for (var c = 0; c < choices.length; c++) {\n      // get a choice\n      var tempChoice = choices[c];\n\n      if (tempChoice != null) {\n        if (id === tempChoice.id) {\n          // we have found the choice we want\n          choice = tempChoice;\n          break;\n        }\n      }\n    }\n\n    return choice;\n  }\n\n  /**\n   * Get the choice by text\n   * @param text look for a choice with this text\n   * @returns the choice with the given text\n   */\n  getChoiceByText(text) {\n\n    var choice = null;\n\n    if (text != null) {\n\n      // get the choices from the component content\n      var choices = this.componentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n          var tempChoice = choices[c];\n\n          if (tempChoice != null) {\n            if (text == tempChoice.value) {\n              // we have found the choice we want\n              choice = tempChoice;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return choice;\n  }\n\n  /**\n   * Get the bucket by id from the authoring component content\n   * @param id the bucket id\n   * @param buckets (optional) the buckets to get the bucket from\n   * @returns the bucket object from the authoring component content\n   */\n  getBucketById(id, buckets) {\n\n    var bucket = null;\n\n    if (buckets == null) {\n      if (this.buckets != null) {\n        // get the buckets from the component\n        buckets = this.buckets;\n      } else {\n        // get the buckets from the authoring component content\n        buckets = this.authoringComponentContent.buckets;\n      }\n    }\n\n    // loop through the buckets\n    for (var b = 0; b < buckets.length; b++) {\n      var tempBucket = buckets[b];\n\n      if (tempBucket != null) {\n        if (id == tempBucket.id) {\n          // we have found the bucket we want\n          bucket = tempBucket;\n          break;\n        }\n      }\n    }\n\n    return bucket;\n  }\n\n  /**\n   * Get the bucket by text\n   * @param text look for a bucket with this text\n   * @returns the bucket with the given text\n   */\n  getBucketByText(text) {\n\n    var bucket = null;\n\n    if (text != null) {\n\n      // get the buckets from the component content\n      var buckets = this.componentContent.buckets;\n\n      if (buckets != null) {\n\n        // loop throgh all the buckets\n        for (var b = 0; b < buckets.length; b++) {\n          var tempBucket = buckets[b];\n\n          if (tempBucket != null) {\n            if (text == tempBucket.value) {\n              // we have found the bucket we want\n              bucket = tempBucket;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return bucket;\n  }\n\n  /**\n   * Get the choice value by id from the authoring component content\n   * @param id the choice id\n   * @returns the choice value from the authoring component content\n   */\n  getChoiceValueById(id) {\n\n    var value = null;\n\n    // get the choice\n    var choice = this.getChoiceById(id);\n\n    if (choice != null) {\n      // get the value\n      value = choice.value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Get the bucket value by id from the authoring component content\n   * @param id the bucket id\n   * @returns the bucket value from the authoring component content\n   */\n  getBucketValueById(id) {\n\n    var value = null;\n\n    // get the bucket\n    var bucket = this.getBucketById(id);\n\n    if (bucket != null) {\n      // get the value\n      value = bucket.value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Add a choice to the feedback\n   * @param choiceId the choice id\n   */\n  addChoiceToFeedback(choiceId) {\n\n    // get the feedback array\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      /*\n       * loop through all the elements in the feedback. each element\n       * represents a bucket.\n       */\n      for (var f = 0; f < feedback.length; f++) {\n        // get a bucket\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          // get the choices in the bucket\n          var choices = bucketFeedback.choices;\n\n          var feedbackText = '';\n          var isCorrect = false;\n\n          // create a feedback object\n          var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n          // add the feedback object\n          choices.push(feedbackObject);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a bucket to the feedback\n   * @param bucketId the bucket id\n   */\n  addBucketToFeedback(bucketId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // create a new bucket feedback object\n      var bucket = {};\n      bucket.bucketId = bucketId;\n      bucket.choices = [];\n\n      // get all the choices\n      var choices = this.authoringComponentContent.choices;\n\n      // loop through all the choices and add a choice feedback object to the bucket\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n\n          var choiceId = choice.id;\n          var feedbackText = '';\n          var isCorrect = false;\n\n          // create a feedback object\n          var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n          // add the feedback object\n          bucket.choices.push(feedbackObject);\n        }\n      }\n\n      // add the feedback bucket\n      feedback.push(bucket);\n    }\n  }\n\n  /**\n   * Create a feedback object\n   * @param choiceId the choice id\n   * @param feedback the feedback\n   * @param isCorrect whether the choice is correct\n   * @param position (optional) the position\n   * @param incorrectPositionFeedback (optional) the feedback for when the\n   * choice is in the correct but wrong position\n   * @returns the feedback object\n   */\n  createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n    var feedbackObject = {};\n    feedbackObject.choiceId = choiceId;\n    feedbackObject.feedback = feedback;\n    feedbackObject.isCorrect = isCorrect;\n    feedbackObject.position = position;\n    feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n    return feedbackObject;\n  }\n\n  /**\n   * Remove a choice from the feedback\n   * @param choiceId the choice id to remove\n   */\n  removeChoiceFromFeedback(choiceId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      /*\n       * loop through each bucket feedback and remove the choice from each\n       * bucket feedback object\n       */\n      for (var f = 0; f < feedback.length; f++) {\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          var choices = bucketFeedback.choices;\n\n          // loop through all the choices\n          for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n              if (choiceId === choice.choiceId) {\n                // we have found the choice we want to remove\n\n                // remove the choice feedback object\n                choices.splice(c, 1);\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a bucket from the feedback\n   * @param bucketId the bucket id to remove\n   */\n  removeBucketFromFeedback(bucketId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // loop through all the bucket feedback objects\n      for (var f = 0; f < feedback.length; f++) {\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          if (bucketId === bucketFeedback.bucketId) {\n            // we have found the bucket feedback object we want to remove\n\n            // remove the bucket feedback object\n            feedback.splice(f, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n      // do nothing\n      this.$rootScope.$broadcast('doneExiting');\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if the component has been authored with a correct choice\n   * @return whether the component has been authored with a correct choice\n   */\n  hasCorrectChoices() {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the buckets\n      var buckets = componentContent.feedback;\n\n      if (buckets != null) {\n\n        // loop through all the buckets\n        for (var b = 0; b < buckets.length; b++) {\n          var bucket = buckets[b];\n\n          if (bucket != null) {\n\n            // get the choices\n            var choices = bucket.choices;\n\n            if (choices != null) {\n\n              // loop through all the choices\n              for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                  if (choice.isCorrect) {\n                    // there is a correct choice\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Remove a choice from a bucket\n   * @param choiceId the choice id we want to remove\n   * @param bucketId remove the choice from this bucket\n   */\n  removeChoiceFromBucket(choiceId, bucketId) {\n\n    if (choiceId != null && bucketId != null) {\n\n      // get the bucket\n      var bucket = this.getBucketById(bucketId);\n\n      if (bucket != null) {\n\n        // get the choices in the bucket\n        var bucketItems = bucket.items;\n\n        if (bucketItems != null) {\n\n          // loop through all the choices in the bucket\n          for (var i = 0; i < bucketItems.length; i++) {\n            var bucketItem = bucketItems[i];\n\n            if (bucketItem != null && bucketItem.id === choiceId) {\n              // we have found the choice we want to remove\n              bucketItems.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clear the feedback and isCorrect fields in all the choices\n   */\n  clearFeedback() {\n\n    // get all the choices\n    var choices = this.getChoices();\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          // set the feedback fields to null\n          choice.isCorrect = null;\n          choice.isIncorrectPosition = null;\n          choice.feedback = null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a choice has a correct bucket\n   * @param choiceId the choice id\n   * @return whether the choice has a correct bucket\n   */\n  choiceHasCorrectBucket(choiceId) {\n\n    var buckets = this.getFeedback();\n\n    if (buckets != null) {\n\n      // loop through all the buckets\n      for (var b = 0; b < buckets.length; b++) {\n        var bucket = buckets[b];\n\n        if (bucket != null) {\n          var choices = bucket.choices;\n\n          if (choices != null) {\n\n            // loop through all the choices in the bucket\n            for (var c = 0; c < choices.length; c++) {\n              var choice = choices[c];\n\n              if (choice != null && choice.choiceId === choiceId) {\n                // we have found the choice we are looking for\n\n                if (choice.isCorrect) {\n                  /*\n                   * the item is correct when placed in this bucket\n                   * which means this choice does have a correct\n                   * bucket\n                   */\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the choice has a correct position\n   * @param choiceId the choice id\n   * @return whether the choice has a correct position in any bucket\n   */\n  choiceHasCorrectPosition(choiceId) {\n    var buckets = this.getFeedback();\n\n    if (buckets != null) {\n\n      // loop through all the buckets\n      for (var b = 0; b < buckets.length; b++) {\n        var bucket = buckets[b];\n\n        if (bucket != null) {\n          var choices = bucket.choices;\n\n          if (choices != null) {\n\n            // loop through all the choices in the bucket\n            for (var c = 0; c < choices.length; c++) {\n              var choice = choices[c];\n\n              if (choice != null && choice.choiceId === choiceId) {\n                // we have found the choice we are looking for\n\n                if (choice.position != null) {\n                  /*\n                   * the item has a position when placed in this bucket\n                   * which means this choice does have a correct\n                   * position\n                   */\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if this component has been authored to have feedback or a correct\n   * choice\n   * @return whether this component has feedback or a correct choice\n   */\n  componentHasFeedback() {\n\n    // get the feedback\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // loop through all the feedback buckets\n      for (var f = 0; f < feedback.length; f++) {\n\n        var tempFeedback = feedback[f];\n\n        if (tempFeedback != null) {\n          var tempChoices = tempFeedback.choices;\n\n          if (tempChoices != null) {\n\n            // loop through the feedback choices\n            for (var c = 0; c < tempChoices.length; c++) {\n              var tempChoice = tempChoices[c];\n\n              if (tempChoice != null) {\n\n                if (tempChoice.feedback != null && tempChoice.feedback != '') {\n                  // this choice has feedback\n                  return true;\n                }\n\n                if (tempChoice.isCorrect) {\n                  // this choice is correct\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The author has changed the feedback so we will enable the submit button\n   */\n  authoringViewFeedbackChanged() {\n\n    var show = true;\n\n    if (this.componentHasFeedback()) {\n      // this component has feedback so we will show the submit button\n      show = true;\n    } else {\n      /*\n       * this component does not have feedback so we will not show the\n       * submit button\n       */\n      show = false;\n    }\n\n    // show or hide the submit button\n    this.setShowSubmitButtonValue(show);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Is Correct\" checkbox for a choice feedback has been clicked.\n   * @param feedback The choice feedback.\n   */\n  authoringViewIsCorrectClicked(feedback) {\n    if (!feedback.isCorrect) {\n      // the choice has been set to not correct so we will remove the position\n      delete feedback.position;\n      delete feedback.incorrectPositionFeedback;\n    }\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * choice\n   * @param choice the choice object to set the image into\n   */\n  chooseChoiceAsset(choice) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'choice';\n    params.targetObject = choice;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * bucket\n   * @param bucket the bucket object to set the image into\n   */\n  chooseBucketAsset(bucket) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'bucket';\n    params.targetObject = bucket;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n      let mergedBuckets = [];\n      // loop through all the component states and merge the buckets\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            let buckets = studentData.buckets;\n            for (let b = 0; b < buckets.length; b++) {\n              let bucket = buckets[b];\n              this.mergeBucket(mergedBuckets, bucket);\n            }\n          }\n        }\n      }\n\n      if (mergedBuckets != null && mergedBuckets != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.buckets = mergedBuckets;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a bucket into the array of buckets\n   * @param buckets an array of buckets to merge into\n   * @param bucket the bucket to merge into the array of buckets\n   * @return an array of buckets with the merged bucket\n   */\n  mergeBucket(buckets, bucket) {\n\n    if (buckets != null && bucket != null) {\n      let bucketFound = false;\n      for (let b = 0; b < buckets.length; b++) {\n        let tempBucket = buckets[b];\n        if (tempBucket != null) {\n          if (tempBucket.id == bucket.id) {\n            /*\n             * the bucket is already in the array of buckets so we\n             * will just merge the items\n             */\n            bucketFound = true;\n            let tempItems = tempBucket.items;\n            this.mergeItems(tempItems, bucket.items);\n          }\n        }\n      }\n      if (!bucketFound) {\n        /*\n         * the bucket was not in the array of buckets so we will add the\n         * bucket\n         */\n        buckets.push(bucket);\n      }\n    }\n\n    return buckets;\n  }\n\n  /**\n   * Merge the items. Only merge the items with an id that is not already in\n   * the array of items\n   * @param oldItems an array of objects with ids\n   * @param newItems an array of objects with ids\n   * @return an array of objects that have been merged\n   */\n  mergeItems(oldItems, newItems) {\n\n    let oldItemIds = this.getIds(oldItems);\n\n    /*\n     * loop through all the new items and add them to the old items if the\n     * item does not already exist in the old items array\n     */\n    for (let i = 0; i < newItems.length; i++) {\n      let newItem = newItems[i];\n      if (newItem != null) {\n        if (oldItemIds.indexOf(newItem.id) == -1) {\n          // the new item is not in the old items array so we will add it\n          oldItems.push(newItem);\n        }\n      }\n    }\n\n    return oldItems;\n  }\n\n  /**\n   * Get the ids from the array of objects\n   * @param arrayOfObjects an array of objects that have ids\n   * @param an array of id strings\n   */\n  getIds(arrayOfObjects) {\n    let ids = [];\n    if (arrayOfObjects != null) {\n      for (let o = 0; o < arrayOfObjects.length; o++) {\n        let obj = arrayOfObjects[o];\n        if (obj != null) {\n          ids.push(obj.id);\n        }\n      }\n    }\n\n    return ids;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nMatchController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'dragulaService',\n  'ConfigService',\n  'MatchService',\n  'NodeService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService',\n  '$mdMedia'\n];\n\nexport default MatchController;\n"]}