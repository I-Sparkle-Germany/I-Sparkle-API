{"version":3,"sources":["matchController.es6"],"names":["MatchController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","dragulaService","ConfigService","MatchService","NodeService","ProjectService","StudentDataService","UtilService","$mdMedia","idToOrder","autoScroll","require","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isShowPreviousWork","isSubmit","choices","buckets","numberOfSubmits","isCorrect","bucketWidth","choiceColumns","horizontal","choiceStyle","saveMessage","text","time","showAdvancedAuthoring","latestAnnotations","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","initializeChoices","initializeBuckets","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","calculateDisabled","$parent","nodeController","registerComponentController","dragId","dropEvent","$on","e","el","container","source","matchController","studentDataChanged","options","moves","handle","sibling","drake","find","on","className","replace","scroll","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","angular","event","args","incrementNumberOfSubmits","saveFailed","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","md","mdScreen","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","createElement","controls","innerHTML","hide","studentData","componentStateBuckets","componentStateNumberOfSubmits","bucketIds","map","b","choiceIds","c","i","l","length","componentStateBucketId","indexOf","currentBucket","currentChoices","items","x","len","currentChoice","currentChoiceId","currentChoiceLocation","bucket","getBucketById","updatedChoice","getChoiceById","push","splice","choicesBucket","checkAnswer","processLatestSubmit","onload","componentStates","getComponentStatesByNodeIdAndComponentId","numStates","latestSubmitState","latestBucketIds","latestChoiceIds","excludeIds","latestSubmitStateBuckets","submitBucket","submitBucketId","latestBucket","submitChoiceIds","latestBucketChoiceIds","submitChoiceId","latestBucketChoiceId","latestState","Math","round","n","originBucket","value","choicesLabel","type","getChoices","choice","getBuckets","bucketsJSONString","toJson","copyOfBuckets","fromJson","isLockAfterSubmit","ids","bucketId","item","position","choiceId","feedbackObject","getFeedbackObject","feedback","feedbackPosition","feedbackIsCorrect","ordered","isIncorrectPosition","incorrectPositionFeedback","f","bucketFeedback","tempBucketId","choiceFeedback","tempChoiceId","getComponentId","createNewComponentState","getCopyOfBuckets","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","updateIdsFromImportedWork","studentBuckets","studentBucket","tempStudentBucketText","getBucketByText","studentChoices","studentChoice","tempStudentChoiceText","getChoiceByText","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","addChoiceToFeedback","newBucket","addBucketToFeedback","index","deletedChoice","removeChoiceFromFeedback","deletedBucket","removeBucketFromFeedback","tempChoice","tempBucket","feedbackText","createFeedbackObject","message","exitListener","$broadcast","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                dragulaService,\n                ConfigService,\n                MatchService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService,\n                $mdMedia) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.dragulaService = dragulaService;\n        this.ConfigService = ConfigService;\n        this.MatchService = MatchService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$mdMedia = $mdMedia;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.autoScroll = require('dom-autoscroller');\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // the choices\n        this.choices = [];\n\n        // the buckets\n        this.buckets = [];\n\n        // the number of times the student has submitted\n        this.numberOfSubmits = 0;\n\n        // whether the student has correctly placed the choices\n        this.isCorrect = null;\n\n        // the flex (%) width for displaying the buckets\n        this.bucketWidth = 100;\n\n        // the number of columns for displaying the choices\n        this.choiceColumns = 1;\n\n        // whether to orient the choices and buckets side-by-side\n        this.horizontal = false;\n\n        // css style for the choice items\n        this.choiceStyle = '';\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n            this.horizontal = this.componentContent.horizontal;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * initialize the choices and buckets with the values from the\n                     * component content\n                     */\n                    this.initializeChoices();\n                    this.initializeBuckets();\n                }.bind(this), true);\n            }\n\n            /*\n             * initialize the choices and buckets with the values from the\n             * component content\n             */\n            this.initializeChoices();\n            this.initializeBuckets();\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        let dragId = 'match_' + this.componentId;\n        // handle choice drop events\n        let dropEvent = dragId + '.drop-model';\n        this.$scope.$on(dropEvent, (e, el, container, source) => {\n            // choice item has been dropped in new location, so run studentDataChanged function\n            this.$scope.matchController.studentDataChanged();\n        });\n\n        // drag and drop options\n        this.dragulaService.options(this.$scope, dragId, {\n            moves: (el, source, handle, sibling) => {\n                return !this.$scope.matchController.isDisabled;\n            }\n        });\n\n        // provide visual indicator when choice is dragged over a new bucket\n        let drake = dragulaService.find(this.$scope, dragId).drake;\n        drake.on('over', (el, container, source) => {\n            if (source !== container) {\n                container.className += ' match-bucket__contents--over';\n            }\n        }).on('out', (el, container, source) => {\n            if (source !== container) {\n                container.className = container.className.replace('match-bucket__contents--over', '');;\n            }\n        });\n\n        // support scroll while dragging\n        let scroll = this.autoScroll(\n            [document.querySelector('#content')], {\n            margin: 30,\n            pixels: 50,\n            scrollWhenOutside: true,\n            autoScroll: function() {\n                // Only scroll when the pointer is down, and there is a child being dragged\n                return this.down && drake.dragging;\n            }\n        });\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.matchController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.matchController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.matchController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n                this.incrementNumberOfSubmits();\n\n                // set saveFailed to true; will be set to false on save success response from server\n                this.saveFailed = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.submit();\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // do nothing\n        }));\n\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n            $scope.mdScreen = md;\n        });\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the buckets and number of submits\n                let componentStateBuckets = studentData.buckets;\n                let componentStateNumberOfSubmits = studentData.numberOfSubmits;\n\n                // set the buckets\n                if (componentStateBuckets != null) {\n                    let bucketIds = this.buckets.map(b => { return b.id; });\n                    let choiceIds = this.choices.map(c => { return c.id; });\n\n                    for (let i = 0, l = componentStateBuckets.length; i < l; i++) {\n                        let componentStateBucketId = componentStateBuckets[i].id;\n                        if (componentStateBucketId !== 0) {\n                            // componentState bucket is a valid bucket, so process choices\n                            if (bucketIds.indexOf(componentStateBucketId) > -1) {\n                                let currentBucket = componentStateBuckets[i];\n                                let currentChoices = currentBucket.items;\n\n                                for (let x = 0, len = currentChoices.length; x < len; x++) {\n                                    let currentChoice = currentChoices[x];\n                                    let currentChoiceId = currentChoice.id;\n                                    let currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n                                    if (currentChoiceLocation > -1) {\n                                        // choice is valid and used by student in a valid bucket, so add it to that bucket\n                                        let bucket = this.getBucketById(componentStateBucketId);\n                                        // content for choice with this id may have change, so get updated content\n                                        let updatedChoice = this.getChoiceById(currentChoiceId);\n                                        bucket.items.push(updatedChoice);\n                                        choiceIds.splice(currentChoiceLocation, 1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // add unused choices to default choices bucket\n                    let choicesBucket = this.getBucketById(0);\n                    choicesBucket.items = [];\n                    for (let i = 0, l = choiceIds.length; i < l; i++) {\n                        choicesBucket.items.push(this.getChoiceById(choiceIds[i]));\n                    }\n                }\n\n                // set the number of submits\n                if (componentStateNumberOfSubmits) {\n                    this.numberOfSubmits = componentStateNumberOfSubmits;\n                }\n\n                if (this.numberOfSubmits > 0) {\n                    componentState.isSubmit ? this.checkAnswer() : this.processLatestSubmit(true);\n                } else {\n                    this.processLatestSubmit(true);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the latest submitted componentState and check answer for choices that haven't changed since\n     * @param onload boolean whether this function is being executed on the initial component load or not\n     */\n    processLatestSubmit(onload) {\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        let numStates = componentStates.length\n        let latestSubmitState = null;\n\n        for (let l = numStates-1; l > -1; l--) {\n            let componentState = componentStates[l];\n            if (componentState.isSubmit) {\n                latestSubmitState = componentState;\n                break;\n            }\n        }\n\n        if (latestSubmitState && latestSubmitState.studentData) {\n            let latestBucketIds = this.buckets.map(b => { return b.id; });\n            let latestChoiceIds = this.choices.map(c => { return c.id; });\n            let excludeIds = [];\n            let latestSubmitStateBuckets = latestSubmitState.studentData.buckets;\n\n            for (let b = 0, l = latestSubmitStateBuckets.length; b < l; b++) {\n                let submitBucket = latestSubmitStateBuckets[b];\n                let submitBucketId = submitBucket.id;\n\n                if (latestBucketIds.indexOf(submitBucketId) > -1) {\n                    let latestBucket = this.getBucketById(submitBucketId);\n                    if (latestBucket) {\n                        let submitChoiceIds = submitBucket.items.map(c => { return c.id; });\n                        let latestBucketChoiceIds = latestBucket.items.map(c => { return c.id; });\n                        for (let c = 0, len = submitChoiceIds.length; c < len; c++) {\n                            let submitChoiceId = submitChoiceIds[c];\n                            let latestBucketChoiceId = latestBucketChoiceIds[c];\n                            if (submitChoiceId !== latestBucketChoiceId) {\n                                excludeIds.push(submitChoiceId);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (excludeIds.length) {\n                // state has changed since last submit, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n            } else {\n                // state has not changed since last submit, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n            }\n            this.checkAnswer(excludeIds);\n        } else {\n            this.isSubmitDirty = true;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        }\n\n        if (onload && numStates) {\n            let latestState = componentStates[numStates-1];\n\n            if (latestState) {\n                let serverSaveTime = latestState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n                if (latestState.isSubmit) {\n                    // latest state is a submission, so set isSubmitDirty to false and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                    // set save message\n                    this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n                } else {\n                    // latest state is not a submission, so set isSubmitDirty to true and notify node\n                    this.isSubmitDirty = true;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                    // set save message\n                    this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n                }\n            }\n        }\n    };\n\n    /**\n     * Initialize the available choices from the component content\n     */\n    initializeChoices() {\n\n        this.choices = [];\n\n        if(this.componentContent != null && this.componentContent.choices != null) {\n            this.choices = this.componentContent.choices;\n        }\n    };\n\n    /**\n     * Get the choices\n     */\n    getChoices() {\n        return this.choices;\n    };\n\n    /**\n     * Initialize the available buckets from the component content\n     */\n    initializeBuckets() {\n\n        this.buckets = [];\n\n        if (this.componentContent != null && this.componentContent.buckets != null) {\n\n            // get the buckets from the component content\n            let buckets = this.componentContent.buckets;\n\n            if (this.horizontal) {\n                this.bucketWidth = 100;\n                this.choiceColumns = 1;\n            } else {\n                if (this.componentContent.bucketWidth) {\n                    this.bucketWidth = this.componentContent.bucketWidth;\n                    this.choiceColumns = Math.round(100/this.componentContent.bucketWidth);\n                } else {\n                    let n = buckets.length;\n                    if (n % 3 === 0 || n > 4) {\n                        this.bucketWidth = Math.round(100/3);\n                        this.choiceColumns = 3;\n                    } else if (n % 2 === 0) {\n                        this.bucketWidth = 100/2;\n                        this.choiceColumns = 2;\n                    }\n                }\n\n                this.choiceStyle = {\n                    '-moz-column-count': this.choiceColumns,\n                    '-webkit-column-count': this.choiceColumns,\n                    'column-count':this.choiceColumns\n                };\n            }\n\n            /*\n             * create a bucket that will contain the choices when\n             * the student first starts working\n             */\n            let originBucket = {};\n            originBucket.id = 0;\n            originBucket.value = this.componentContent.choicesLabel ? this.componentContent.choicesLabel : this.$translate('match.choices');\n            originBucket.type = 'bucket';\n            originBucket.items = [];\n\n            let choices = this.getChoices();\n\n            // add all the choices to the origin bucket\n            for (let c = 0; c < choices.length; c++) {\n                let choice = choices[c];\n\n                originBucket.items.push(choice);\n            }\n\n            // add the origin bucket to our array of buckets\n            this.buckets.push(originBucket);\n\n            // add all the other buckets to our array of buckets\n            for (let b = 0; b < buckets.length; b++) {\n                let bucket = buckets[b];\n\n                bucket.items = [];\n\n                this.buckets.push(bucket);\n            }\n        }\n    };\n\n    /**\n     * Get the buckets\n     */\n    getBuckets() {\n        return this.buckets;\n    };\n\n    /**\n     * Create a copy of the buckets for cases when we want to make\n     * sure we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     * @return a copy of the buckets\n     */\n    getCopyOfBuckets() {\n        var buckets = this.getBuckets();\n\n        // get a JSON string representation of the buckets\n        var bucketsJSONString = angular.toJson(buckets);\n\n        // turn the JSON string back into a JSON array\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n        return copyOfBuckets;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // TODO: add confirmation dialog if lock after submit is enabled on this component\n        this.isSubmit = true;\n        this.incrementNumberOfSubmits();\n\n        // set saveFailed to true; will be set to false on save success response from server\n        this.saveFailed = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n    * Called when either the component or node is submitted\n    */\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // check if the student answered correctly\n        this.processLatestSubmit();\n    }\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfSubmits() {\n        if (!this.saveFailed) {\n            if (this.numberOfSubmits == null) {\n                this.numberOfSubmits = 0;\n            }\n\n            this.numberOfSubmits++;\n        }\n    };\n\n    /**\n     * Check if the student has answered correctly\n     * @param ids array of choice ids to exclude\n     */\n    checkAnswer(ids) {\n        let isCorrect = true;\n\n        // get the buckets\n        let buckets = this.getBuckets();\n        let excludeIds = ids ? ids : [];\n\n        if (buckets != null) {\n\n            // loop through all the buckets\n            for(let b = 0, l = buckets.length; b < l; b++) {\n\n                // get a bucket\n                let bucket = buckets[b];\n\n                if (bucket != null) {\n                    let bucketId = bucket.id;\n                    let items = bucket.items;\n\n                    if (items != null) {\n\n                        // loop through all the items in the bucket\n                        for (let i = 0, len = items.length; i < len; i++) {\n                            let item = items[i];\n                            let position = i + 1;\n\n                            if (item != null) {\n                                let choiceId = item.id;\n\n                                // get the feedback object for the bucket and choice\n                                let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                                if (feedbackObject != null) {\n                                    let feedback = feedbackObject.feedback;\n\n                                    let feedbackPosition = feedbackObject.position;\n                                    let feedbackIsCorrect = feedbackObject.isCorrect;\n\n                                    // set the default feedback if none is authored\n                                    if (feedback) {\n                                        if (feedbackIsCorrect) {\n                                            feedback = this.$translate('CORRECT');\n                                        } else {\n                                            feedback = this.$translate('INCORRECT');\n                                        }\n                                    }\n\n                                    if (!this.componentContent.ordered || feedbackPosition == null) {\n                                        /*\n                                         * position does not matter and the choice may be\n                                         * in the correct or incorrect bucket\n                                         */\n\n                                        // set the feedback into the item\n                                        item.feedback = feedback;\n\n                                        // set whether the choice is in the correct bucket\n                                        item.isCorrect = feedbackIsCorrect;\n\n                                        /*\n                                         * there is no feedback position in the feeback object so\n                                         * position doesn't matter\n                                         */\n                                        item.isIncorrectPosition = false;\n\n                                        // update whether the student has answered the step correctly\n                                        isCorrect = isCorrect && feedbackIsCorrect;\n                                    } else {\n                                        /*\n                                         * position does matter and the choice is in a correct\n                                         * bucket. we know this because a feedback object will\n                                         * only have a non-null position value if the choice is\n                                         * in the correct bucket. if the feedback object is for\n                                         * a choice that is in an incorrect bucket, the position\n                                         * value will be null.\n                                         */\n\n                                        if (position === feedbackPosition) {\n                                            // the item is in the correct position\n\n                                            // set the feedback into the item\n                                            item.feedback = feedback;\n\n                                            // set whether the choice is in the correct bucket\n                                            item.isCorrect = feedbackIsCorrect;\n\n                                            // the choice is in the correct position\n                                            item.isIncorrectPosition = false;\n\n                                            // update whether the student has answered the step correctly\n                                            isCorrect = isCorrect && feedbackIsCorrect;\n                                        } else {\n                                            // item is in the correct bucket but wrong position\n\n                                            /*\n                                             * get the feedback for when the choice is in the correct\n                                             * bucket but wrong position\n                                             */\n                                            let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n\n                                            // set the default feedback if none is authored\n                                            if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                                                incorrectPositionFeedback = this.$translate('match.correctBucketButWrongPosition');\n                                            }\n\n                                            item.feedback = incorrectPositionFeedback;\n\n                                            /*\n                                             * the choice is in the incorrect position so it isn't correct\n                                             */\n                                            item.isCorrect = false;\n\n                                            // the choice is in the incorrect position\n                                            item.isIncorrectPosition = true;\n\n                                            // the student has answered incorrectly\n                                            isCorrect = false;\n                                        }\n                                    }\n                                }\n\n                                if (excludeIds.indexOf(choiceId) > -1) {\n                                    // don't show feedback for choices that should be excluded\n                                    item.feedback = null;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * set the isCorrect value into the controller\n         * so we can read it later\n         */\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the feedback object for the combination of bucket and choice\n     * @param bucketId the bucket id\n     * @param choiceId the choice id\n     * @return the feedback object for the combination of bucket and choice\n     */\n    getFeedbackObject(bucketId, choiceId) {\n        var feedbackObject = null;\n\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the feedback\n            var feedback = componentContent.feedback;\n\n            if (feedback != null) {\n\n                /*\n                 * loop through the feedback. each element in the feedback represents\n                 * a bucket\n                 */\n                for (var f = 0; f < feedback.length; f++) {\n\n                    // get a bucket feedback object\n                    var bucketFeedback = feedback[f];\n\n                    if (bucketFeedback != null) {\n\n                        // get the bucket id\n                        var tempBucketId = bucketFeedback.bucketId;\n\n                        if (bucketId === tempBucketId) {\n                            // we have found the bucket we are looking for\n\n                            var choices = bucketFeedback.choices;\n\n                            if (choices != null) {\n\n                                // loop through all the choice feedback\n                                for (var c = 0; c < choices.length; c++) {\n                                    var choiceFeedback = choices[c];\n\n                                    if (choiceFeedback != null) {\n                                        var tempChoiceId = choiceFeedback.choiceId;\n\n                                        if (choiceId === tempChoiceId) {\n                                            // we have found the choice we are looking for\n                                            feedbackObject = choiceFeedback;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                if (feedbackObject != null) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return feedbackObject;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            this.processLatestSubmit();\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        let componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            let studentData = {};\n\n            // set the buckets into the student data\n            studentData.buckets = this.getCopyOfBuckets();\n\n            // set the number of submits into the student data\n            studentData.numberOfSubmits = this.numberOfSubmits;\n\n            if (this.isCorrect != null) {\n                // set whether the student was correct\n                studentData.isCorrect = this.isCorrect;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            //set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        let deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * update the choice ids so that it uses the choice ids\n                         * from this component. we need to do this because the choice\n                         * ids are likely to be different. we update the choice ids\n                         * by matching the choice text.\n                         */\n                        this.updateIdsFromImportedWork(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Update the choice ids and bucket ids to use the ids from this component.\n     * We will use the choice text and bucket text to perform matching.\n     * @param componentState the component state\n     */\n    updateIdsFromImportedWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the buckets from the student data\n                var studentBuckets = studentData.buckets;\n\n                if (studentBuckets != null) {\n\n                    // loop through all the student buckets\n                    for (var b = 0; b < studentBuckets.length; b++) {\n\n                        // get a student bucket\n                        var studentBucket = studentBuckets[b];\n\n                        if (studentBucket != null) {\n\n                            // get the text of the student bucket\n                            var tempStudentBucketText = studentBucket.value;\n\n                            // get the bucket from this component that has the matching text\n                            var bucket = this.getBucketByText(tempStudentBucketText);\n\n                            if (bucket != null) {\n                                // change the id of the student bucket\n                                studentBucket.id = bucket.id;\n                            }\n\n                            // get the choices the student put into this bucket\n                            var studentChoices = studentBucket.items;\n\n                            if (studentChoices != null) {\n\n                                // loop through the choices in the bucket\n                                for (var c = 0; c < studentChoices.length; c++) {\n\n                                    // get a student choice\n                                    var studentChoice = studentChoices[c];\n\n                                    if (studentChoice != null) {\n\n                                        // get the text of the student choice\n                                        var tempStudentChoiceText = studentChoice.value;\n\n                                        // get the choice from this component that has the matching text\n                                        var choice = this.getChoiceByText(tempStudentChoiceText);\n\n                                        if (choice != null) {\n                                            // change the id of the student choice\n                                            studentChoice.id = choice.id;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a choice\n     */\n    authoringAddChoice() {\n\n        // create a new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.value = '';\n        newChoice.type = 'choice';\n\n        // add the choice to the array of choices\n        this.authoringComponentContent.choices.push(newChoice);\n\n        // add the choice to the feedback\n        this.addChoiceToFeedback(newChoice.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a bucket\n     */\n    authoringAddBucket() {\n\n        // create a new bucket\n        var newBucket = {};\n        newBucket.id = this.UtilService.generateKey(10);\n        newBucket.value = '';\n        newBucket.type = 'bucket';\n\n        // add the bucket to the array of buckets\n        this.authoringComponentContent.buckets.push(newBucket);\n\n        // add the bucket to the feedback\n        this.addBucketToFeedback(newBucket.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice\n     * @param index the index of the choice in the choice array\n     */\n    authoringDeleteChoice(index) {\n\n        // confirm with the user that they want to delete the choice\n        var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisChoice'));\n\n        if (answer) {\n\n            // remove the choice from the array\n            var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n            if (deletedChoice != null && deletedChoice.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedChoice = deletedChoice[0];\n\n                // get the choice id\n                var choiceId = deletedChoice.id;\n\n                // remove the choice from the feedback\n                this.removeChoiceFromFeedback(choiceId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete a bucket\n     * @param index the index of the bucket in the bucket array\n     */\n    authoringDeleteBucket(index) {\n\n        // confirm with the user tha tthey want to delete the bucket\n        var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisBucket'));\n\n        if (answer) {\n\n            // remove the bucket from the array\n            var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n            if (deletedBucket != null && deletedBucket.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedBucket = deletedBucket[0];\n\n                // get the bucket id\n                var bucketId = deletedBucket.id;\n\n                // remove the bucket from the feedback\n                this.removeBucketFromFeedback(bucketId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the choice by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice object from the authoring component content\n     */\n    getChoiceById(id) {\n\n        var choice = null;\n\n        // get the choices\n        var choices = this.componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            // get a choice\n            var tempChoice = choices[c];\n\n            if (tempChoice != null) {\n                if (id === tempChoice.id) {\n                    // we have found the choice we want\n                    choice = tempChoice;\n                    break;\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the choice by text\n     * @param text look for a choice with this text\n     * @returns the choice with the given text\n     */\n    getChoiceByText(text) {\n\n        var choice = null;\n\n        if (text != null) {\n\n            // get the choices from the component content\n            var choices = this.componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        if (text == tempChoice.value) {\n                            // we have found the choice we want\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the bucket by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket object from the authoring component content\n     */\n    getBucketById(id) {\n\n        var bucket = null;\n\n        // get the buckets\n        var buckets = this.buckets ? this.buckets : this.authoringComponentContent.buckets;\n\n        // loop through the buckets\n        for (var b = 0; b < buckets.length; b++) {\n            var tempBucket = buckets[b];\n\n            if (tempBucket != null) {\n                if (id === tempBucket.id) {\n                    // we have found the bucket we want\n                    bucket = tempBucket;\n                    break;\n                }\n            }\n        }\n\n        return bucket;\n    }\n\n    /**\n     * Get the bucket by text\n     * @param text look for a bucket with this text\n     * @returns the bucket with the given text\n     */\n    getBucketByText(text) {\n\n        var bucket = null;\n\n        if (text != null) {\n\n            // get the buckets from the component content\n            var buckets = this.componentContent.buckets;\n\n            if (buckets != null) {\n\n                // loop throgh all the buckets\n                for (var b = 0; b < buckets.length; b++) {\n                    var tempBucket = buckets[b];\n\n                    if (tempBucket != null) {\n                        if (text == tempBucket.value) {\n                            // we have found the bucket we want\n                            bucket = tempBucket;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return bucket;\n    }\n\n    /**\n     * Get the choice value by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice value from the authoring component content\n     */\n    getChoiceValueById(id) {\n\n        var value = null;\n\n        // get the choice\n        var choice = this.getChoiceById(id);\n\n        if (choice != null) {\n            // get the value\n            value = choice.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the bucket value by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket value from the authoring component content\n     */\n    getBucketValueById(id) {\n\n        var value = null;\n\n        // get the bucket\n        var bucket = this.getBucketById(id);\n\n        if (bucket != null) {\n            // get the value\n            value = bucket.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Add a choice to the feedback\n     * @param choiceId the choice id\n     */\n    addChoiceToFeedback(choiceId) {\n\n        // get the feedback array\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through all the elements in the feedback. each element\n             * represents a bucket.\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                // get a bucket\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    // get the choices in the bucket\n                    var choices = bucketFeedback.choices;\n\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    choices.push(feedbackObject);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a bucket to the feedback\n     * @param bucketId the bucket id\n     */\n    addBucketToFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // create a new bucket feedback object\n            var bucket = {};\n            bucket.bucketId = bucketId;\n            bucket.choices = [];\n\n            // get all the choices\n            var choices = this.authoringComponentContent.choices;\n\n            // loop through all the choices and add a choice feedback object to the bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    var choiceId = choice.id;\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    bucket.choices.push(feedbackObject);\n                }\n            }\n\n            // add the feedback bucket\n            feedback.push(bucket);\n        }\n    }\n\n    /**\n     * Create a feedback object\n     * @param choiceId the choice id\n     * @param feedback the feedback\n     * @param isCorrect whether the choice is correct\n     * @param position (optional) the position\n     * @param incorrectPositionFeedback (optional) the feedback for when the\n     * choice is in the correct but wrong position\n     * @returns the feedback object\n     */\n    createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n        var feedbackObject = {};\n        feedbackObject.choiceId = choiceId;\n        feedbackObject.feedback = feedback;\n        feedbackObject.isCorrect = isCorrect;\n        feedbackObject.position = position;\n        feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n        return feedbackObject;\n    }\n\n    /**\n     * Remove a choice from the feedback\n     * @param choiceId the choice id to remove\n     */\n    removeChoiceFromFeedback(choiceId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through each bucket feedback and remove the choice from each\n             * bucket feedback object\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    var choices = bucketFeedback.choices;\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n                            if (choiceId === choice.choiceId) {\n                                // we have found the choice we want to remove\n\n                                // remove the choice feedback object\n                                choices.splice(c, 1);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a bucket from the feedback\n     * @param bucketId the bucket id to remove\n     */\n    removeBucketFromFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // loop through all the bucket feedback objects\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    if (bucketId === bucketFeedback.bucketId) {\n                        // we have found the bucket feedback object we want to remove\n\n                        // remove the bucket feedback object\n                        feedback.splice(f, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\nMatchController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'dragulaService',\n    'ConfigService',\n    'MatchService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default MatchController;\n"]}