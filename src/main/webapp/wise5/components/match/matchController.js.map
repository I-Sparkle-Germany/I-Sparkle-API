{"version":3,"sources":["matchController.es6"],"names":["MatchController","$filter","$mdDialog","$mdMedia","$q","$rootScope","$scope","AnnotationService","ConfigService","dragulaService","MatchService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","autoScroll","require","choices","buckets","isCorrect","bucketWidth","numChoiceColumns","isHorizontal","componentContent","horizontal","choiceStyle","bucketStyle","latestAnnotations","sourceBucketId","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","submitCounter","isSubmitButtonDisabled","initializeChoices","initializeBuckets","hasCorrectChoices","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","isSubmit","studentHasUsedAllSubmits","disableComponentIfNecessary","$parent","nodeController","registerComponentController","registerDragListeners","getComponentState","deferred","defer","hasDirtyWork","action","matchController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","$","summernote","isImage","isVideo","videoElement","document","createElement","controls","innerHTML","choiceObject","targetObject","authoringViewComponentChanged","bucketObject","hide","showAdvancedAuthoring","$broadcast","maxSubmitCount","dragId","registerStudentDataChangedOnDrop","disableDraggingIfNeeded","drake","find","showVisualIndicatorWhileDragging","supportScrollWhileDragging","dropEvent","e","el","container","source","studentDataChanged","options","moves","handle","sibling","on","className","replace","querySelector","margin","pixels","scrollWhenOutside","down","dragging","submit","studentData","componentStateBuckets","sourceBucket","getBucketById","items","bucketIds","getBucketIds","choiceIds","getChoiceIds","componentStateBucket","componentStateBucketId","id","indexOf","currentChoice","currentChoiceId","currentChoiceLocation","bucket","updatedChoice","getChoiceById","push","splice","choiceId","checkAnswer","processPreviousStudentWork","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","setIsSubmitDirty","showSubmitMessage","latestSubmitComponentState","getLatestSubmitComponentState","showFeedbackOnUnchangedChoices","showSaveMessage","choicesThatChangedSinceLastSubmit","getChoicesThatChangedSinceLastSubmit","length","time","setSaveMessage","$emit","map","b","c","latestSubmitComponentStateBuckets","currentComponentStateBucket","currentComponentStateBucketChoiceIds","choice","bucketFromSubmitComponentState","latestSubmitComponentStateChoiceIds","choiceIndexInBucket","currentBucketChoiceId","isAuthorHasSpecifiedACorrectPosition","setBucketWidth","setNumChoiceColumns","setChoiceStyle","setBucketStyle","choicesLabel","getChoices","n","Math","round","choiceColumns","bucketsJSONString","angular","toJson","getBuckets","fromJson","submitTriggeredBy","performSubmit","hasStudentUsedAllSubmits","incrementSubmitCounter","getNumSubmitsLeft","choiceIdsExcludedFromFeedback","bucketId","i","item","position","feedbackObject","getFeedbackObject","feedback","correctPosition","feedbackIsCorrect","isAuthorHasSpecifiedACorrectBucket","doesPositionNotMatter","isIncorrectPosition","incorrectPositionFeedback","getAllFeedback","bucketFeedback","choiceFeedback","feedbackPosition","ordered","createNewComponentState","clearFeedback","processDirtyStudentWork","getCopyOfBuckets","componentType","createComponentStateAdditionalProcessing","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","newChoice","generateKey","addChoiceToFeedback","newBucket","addBucketToFeedback","index","f","bucketFeedbackChoices","tempChoice","answer","confirm","deletedChoice","removeChoiceFromFeedback","deletedBucket","removeBucketFromFeedback","feedbackText","createFeedbackObject","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","tempFeedback","tempChoices","show","componentHasFeedback","setShowSubmitButtonValue","params","isPopup","tags","tag","componentStates","mergedBuckets","mergeBucket","mergedComponentState","bucketFound","tempBucket","mergeChoices","choices1","choices2","choices1Ids","getIds","choice2","objects","ids","object","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass MatchController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $mdMedia,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      dragulaService,\n      MatchService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.dragulaService = dragulaService;\n    this.MatchService = MatchService;\n    this.$mdMedia = $mdMedia;\n    this.autoScroll = require('dom-autoscroller');\n\n    this.choices = [];\n    this.buckets = [];\n    this.isCorrect = null;\n    this.bucketWidth = 100; // the flex (%) width for displaying the buckets\n    this.numChoiceColumns = 1;\n    this.isHorizontal = this.componentContent.horizontal; // whether to orient the choices and buckets side-by-side\n    this.choiceStyle = '';\n    this.bucketStyle = '';\n    this.latestAnnotations = null;\n    this.sourceBucketId = '0';\n    this.hasCorrectAnswer = false;\n    this.isLatestComponentStateSubmit = false;\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Match'\n      }\n    ];\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n      if (this.mode === 'grading') {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'authoring') {\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n      this.summernoteRubricHTML = this.componentContent.rubric;\n      const insertAssetString = this.$translate('INSERT_ASSET');\n      const InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n      this.summernoteRubricOptions = {\n        toolbar: [\n          ['style', ['style']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['fontname', ['fontname']],\n          ['fontsize', ['fontsize']],\n          ['color', ['color']],\n          ['para', ['ul', 'ol', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'video']],\n          ['view', ['fullscreen', 'codeview', 'help']],\n          ['customButton', ['insertAssetButton']]\n        ],\n        height: 300,\n        disableDragAndDrop: true,\n        buttons: {\n          insertAssetButton: InsertAssetButton\n        }\n      };\n\n      this.updateAdvancedAuthoringView();\n\n      $scope.$watch(function() {\n        return this.authoringComponentContent;\n      }.bind(this), function(newValue, oldValue) {\n        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        this.isCorrect = null;\n        this.submitCounter = 0;\n        this.isDisabled = false;\n        this.isSubmitButtonDisabled = false;\n        this.initializeChoices();\n        this.initializeBuckets();\n      }.bind(this), true);\n    }\n\n    this.hasCorrectAnswer = this.hasCorrectChoices();\n    this.initializeChoices();\n    this.initializeBuckets();\n    const componentState = this.$scope.componentState;\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }  else if (this.MatchService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }\n    } else if (componentState != null) {\n      this.setStudentWork(componentState);\n    }\n\n    if (componentState != null && componentState.isSubmit) {\n      this.isLatestComponentStateSubmit = componentState.isSubmit === true;\n    }\n\n    if (this.studentHasUsedAllSubmits()) {\n      this.isDisabled = true;\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    this.registerDragListeners();\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param {boolean} isSubmit whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return {promise} a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = (isSubmit) => {\n      const deferred = this.$q.defer();\n      let hasDirtyWork = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.matchController.isSubmitDirty) {\n          hasDirtyWork = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.matchController.isDirty) {\n          hasDirtyWork = true;\n          action = 'save';\n        }\n      }\n\n      if (hasDirtyWork) {\n        this.$scope.matchController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n        const assetItem = args.assetItem;\n        const fileName = assetItem.fileName;\n        const assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n        const fullAssetPath = assetsDirectoryPath + '/' + fileName;\n        if (args.target == 'prompt' || args.target == 'rubric') {\n          let summernoteId = '';\n          if (args.target == 'prompt') {\n            summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n          } else if (args.target == 'rubric') {\n            summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n          }\n          if (summernoteId != '') {\n            /*\n             * move the cursor back to its position when the asset chooser\n             * popup was clicked\n             */\n            $('#' + summernoteId).summernote('editor.restoreRange');\n            $('#' + summernoteId).summernote('editor.focus');\n\n            if (this.UtilService.isImage(fileName)) {\n              $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n            } else if (this.UtilService.isVideo(fileName)) {\n              const videoElement = document.createElement('video');\n              videoElement.controls = 'true';\n              videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n              $('#' + summernoteId).summernote('insertNode', videoElement);\n            }\n          }\n        } else if (args.target == 'choice') {\n          const choiceObject = args.targetObject;\n          choiceObject.value = '<img src=\"' + fileName + '\"/>';\n          this.authoringViewComponentChanged();\n        } else if (args.target == 'bucket') {\n          const bucketObject = args.targetObject;\n          bucketObject.value = '<img src=\"' + fileName + '\"/>';\n          this.authoringViewComponentChanged();\n        }\n      }\n      this.$mdDialog.hide();\n    });\n\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (this.componentId === args.componentId) {\n        this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  studentHasUsedAllSubmits() {\n    return this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount;\n  }\n\n  registerDragListeners() {\n    const dragId = 'match_' + this.componentId;\n    this.registerStudentDataChangedOnDrop(dragId);\n    this.disableDraggingIfNeeded(dragId);\n    const drake = this.dragulaService.find(this.$scope, dragId).drake;\n    this.showVisualIndicatorWhileDragging(drake);\n    this.supportScrollWhileDragging(drake);\n  }\n\n  registerStudentDataChangedOnDrop(dragId) {\n    const dropEvent = dragId + '.drop-model';\n    this.$scope.$on(dropEvent, (e, el, container, source) => {\n      this.$scope.matchController.studentDataChanged();\n    });\n  }\n\n  disableDraggingIfNeeded(dragId) {\n    this.dragulaService.options(this.$scope, dragId, {\n      moves: (el, source, handle, sibling) => {\n        return !this.$scope.matchController.isDisabled;\n      }\n    });\n  }\n\n  showVisualIndicatorWhileDragging(drake) {\n    drake.on('over', (el, container, source) => {\n      if (source !== container) {\n        container.className += ' match-bucket__contents--over';\n      }\n    }).on('out', (el, container, source) => {\n      if (source !== container) {\n        container.className = container.className.replace('match-bucket__contents--over', '');;\n      }\n    });\n  }\n\n  supportScrollWhileDragging(drake) {\n    this.autoScroll(\n      [document.querySelector('#content')], {\n        margin: 30,\n        pixels: 50,\n        scrollWhenOutside: true,\n        autoScroll: function() {\n          // Only scroll when the pointer is down, and there is a child being dragged\n          return this.down && drake.dragging;\n        }\n      });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    const componentStateBuckets = studentData.buckets;\n    const sourceBucket = this.getBucketById(this.sourceBucketId);\n    sourceBucket.items = []; // clear the source bucket\n    const bucketIds = this.getBucketIds();\n    const choiceIds = this.getChoiceIds();\n\n    for (let componentStateBucket of componentStateBuckets) {\n      let componentStateBucketId = componentStateBucket.id;\n      if (bucketIds.indexOf(componentStateBucketId) > -1) {\n        for (let currentChoice of componentStateBucket.items) {\n          const currentChoiceId = currentChoice.id;\n          const currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n          if (currentChoiceLocation > -1) {\n            // choice is valid and used by student in a valid bucket, so add it to that bucket\n            const bucket = this.getBucketById(componentStateBucketId);\n            // content for choice with this id may have change, so get updated content\n            const updatedChoice = this.getChoiceById(currentChoiceId);\n            bucket.items.push(updatedChoice);\n            choiceIds.splice(currentChoiceLocation, 1);\n          }\n        }\n      }\n    }\n\n    // add unused choices to the source bucket\n    for (let choiceId of choiceIds) {\n      sourceBucket.items.push(this.getChoiceById(choiceId));\n    }\n\n    const submitCounter = studentData.submitCounter;\n    if (submitCounter != null) {\n      this.submitCounter = submitCounter;\n    }\n\n    if (this.submitCounter > 0) {\n      if (componentState.isSubmit) {\n        this.checkAnswer()\n      } else {\n        /*\n         * This component state was not a submit, but the student\n         * submitted some time in the past. We want to show the\n         * feedback for choices that have not moved since the\n         * student submitted.\n         */\n        this.processPreviousStudentWork();\n      }\n    } else {\n      /*\n       * there was no submit in the past but we will still need to\n       * check if submit is dirty.\n       */\n      this.processPreviousStudentWork();\n    }\n  };\n\n  /**\n   * Get the latest submitted componentState and display feedback for choices\n   * that haven't changed since. This will also determine if submit is dirty.\n   */\n  processPreviousStudentWork() {\n    const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    if (latestComponentState == null) {\n      return;\n    }\n\n    const serverSaveTime = latestComponentState.serverSaveTime;\n    const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n    if (latestComponentState.isSubmit === true) {\n      this.isCorrect = latestComponentState.isCorrect;\n      this.setIsSubmitDirty(false);\n      this.showSubmitMessage(clientSaveTime);\n      this.checkAnswer();\n    } else {\n      const latestSubmitComponentState =\n          this.StudentDataService.getLatestSubmitComponentState(this.nodeId, this.componentId);\n      if (latestSubmitComponentState != null) {\n        this.showFeedbackOnUnchangedChoices(latestSubmitComponentState);\n      } else {\n        this.isCorrect = null;\n        this.setIsSubmitDirty(false);\n        this.showSaveMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * There is unsaved student work that is not yet saved in a component state\n   */\n  processDirtyStudentWork() {\n    const latestSubmitComponentState =\n        this.StudentDataService.getLatestSubmitComponentState(this.nodeId, this.componentId);\n    if (latestSubmitComponentState != null) {\n      this.showFeedbackOnUnchangedChoices(latestSubmitComponentState);\n    } else {\n      const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (latestComponentState != null) {\n        this.isCorrect = null;\n        this.setIsSubmitDirty(true);\n        this.showSaveMessage(latestComponentState.clientSaveTime);\n      }\n    }\n  };\n\n  showFeedbackOnUnchangedChoices(latestSubmitComponentState) {\n    const choicesThatChangedSinceLastSubmit = this.getChoicesThatChangedSinceLastSubmit(latestSubmitComponentState);\n    if (choicesThatChangedSinceLastSubmit.length > 0) {\n      this.setIsSubmitDirty(true);\n    } else {\n      this.setIsSubmitDirty(false);\n    }\n    this.checkAnswer(choicesThatChangedSinceLastSubmit);\n  }\n\n  showSaveMessage(time) {\n    this.setSaveMessage(this.$translate('LAST_SAVED'), time);\n  }\n\n  showSubmitMessage(time) {\n    this.setSaveMessage(this.$translate('LAST_SUBMITTED'), time);\n  }\n\n  setIsSubmitDirty(isSubmitDirty) {\n    this.isSubmitDirty = isSubmitDirty;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isSubmitDirty});\n  }\n\n  isLatestComponentStateASubmit() {\n\n  }\n\n  getBucketIds() {\n    return this.buckets.map(b => { return b.id; });\n  }\n\n  getChoiceIds() {\n    return this.choices.map(c => { return c.id; });\n  }\n\n  getChoicesThatChangedSinceLastSubmit(latestSubmitComponentState) {\n    const latestSubmitComponentStateBuckets = latestSubmitComponentState.studentData.buckets;\n    const choicesThatChangedSinceLastSubmit = [];\n    for (let currentComponentStateBucket of this.buckets) {\n      const currentComponentStateBucketChoiceIds = currentComponentStateBucket.items.map(choice => { return choice.id; });\n      let bucketFromSubmitComponentState = this.getBucketById(currentComponentStateBucket.id, latestSubmitComponentStateBuckets);\n      if (bucketFromSubmitComponentState != null) {\n        const latestSubmitComponentStateChoiceIds =\n            bucketFromSubmitComponentState.items.map(choice => { return choice.id; });\n\n        for (let choiceIndexInBucket = 0; choiceIndexInBucket < currentComponentStateBucketChoiceIds.length; choiceIndexInBucket++) {\n          const currentBucketChoiceId = currentComponentStateBucketChoiceIds[choiceIndexInBucket];\n          if (latestSubmitComponentStateChoiceIds.indexOf(currentBucketChoiceId) == -1) {\n            choicesThatChangedSinceLastSubmit.push(currentBucketChoiceId);\n          } else if (this.isAuthorHasSpecifiedACorrectPosition(currentBucketChoiceId) &&\n              choiceIndexInBucket != latestSubmitComponentStateChoiceIds.indexOf(currentBucketChoiceId)) {\n            choicesThatChangedSinceLastSubmit.push(currentBucketChoiceId);\n          }\n        }\n      }\n    }\n    return choicesThatChangedSinceLastSubmit;\n  }\n\n  getChoices() {\n    return this.choices;\n  }\n\n  initializeChoices() {\n    this.choices = this.componentContent.choices;\n  }\n\n  initializeBuckets() {\n    this.buckets = [];\n    this.setBucketWidth();\n    this.setNumChoiceColumns();\n    this.setChoiceStyle();\n    this.setBucketStyle();\n    const sourceBucket = {\n      id: this.sourceBucketId,\n      value: this.componentContent.choicesLabel ? this.componentContent.choicesLabel : this.$translate('match.choices'),\n      type: 'bucket',\n      items: []\n    };\n    for (let choice of this.getChoices()) {\n      sourceBucket.items.push(choice);\n    }\n    this.buckets.push(sourceBucket);\n    for (let bucket of this.componentContent.buckets) {\n      bucket.items = [];\n      this.buckets.push(bucket);\n    }\n  }\n\n  setBucketWidth() {\n    if (this.isHorizontal) {\n      this.bucketWidth = 100;\n    } else {\n      if (typeof this.componentContent.bucketWidth === 'number') {\n        this.bucketWidth = this.componentContent.bucketWidth;\n      } else {\n        let n = this.componentContent.buckets.length;\n        if (n % 3 === 0 || n > 4) {\n          this.bucketWidth = Math.round(100/3);\n        } else if (n % 2 === 0) {\n          this.bucketWidth = 100/2;\n        }\n      }\n    }\n  }\n\n  setNumChoiceColumns() {\n    if (this.isHorizontal) {\n      this.numChoiceColumns = 1;\n    } else {\n      if (typeof this.componentContent.bucketWidth === 'number') {\n        this.numChoiceColumns = Math.round(100/this.componentContent.bucketWidth);\n      } else {\n        let n = this.componentContent.buckets.length;\n        if (n % 3 === 0 || n > 4) {\n          this.numChoiceColumns = 3;\n        } else if (n % 2 === 0) {\n          this.numChoiceColumns = 2;\n        }\n      }\n      if (typeof this.componentContent.choiceColumns === 'number') {\n        this.numChoiceColumns = this.componentContent.choiceColumns;\n      }\n    }\n  }\n\n  setChoiceStyle() {\n    this.choiceStyle = {\n      '-moz-column-count': this.numChoiceColumns,\n      '-webkit-column-count': this.numChoiceColumns,\n      'column-count':this.numChoiceColumns\n    };\n  }\n\n  setBucketStyle() {\n    if (this.bucketWidth === 100) {\n      this.bucketStyle = this.choiceStyle;\n    }\n  }\n\n  getBuckets() {\n    return this.buckets;\n  };\n\n  /**\n   * Create a copy of the array of buckets with brand new objects.\n   * @return {array}\n   */\n  getCopyOfBuckets() {\n    const bucketsJSONString = angular.toJson(this.getBuckets());\n    return angular.fromJson(bucketsJSONString);\n  }\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param {string} submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n    if (this.isSubmitDirty) {\n      let performSubmit = true;\n      if (this.componentContent.maxSubmitCount != null && this.hasStudentUsedAllSubmits()) {\n        performSubmit = false;\n      }\n      if (performSubmit) {\n        this.isSubmit = true;\n        this.isCorrect = null;\n        this.incrementSubmitCounter();\n        if (this.componentContent.maxSubmitCount != null && this.hasStudentUsedAllSubmits()) {\n          this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy === 'componentSubmitButton') {\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        }\n      } else {\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  getNumSubmitsLeft() {\n    return this.componentContent.maxSubmitCount - this.submitCounter;\n  }\n\n  hasStudentUsedAllSubmits() {\n    return this.getNumSubmitsLeft() <= 0;\n  }\n\n  /**\n   * Check if the student has answered correctly and show feedback.\n   * @param {array} choice ids to not show feedback for\n   */\n  checkAnswer(choiceIdsExcludedFromFeedback = []) {\n    let isCorrect = true;\n    let buckets = this.getBuckets();\n    for (let bucket of buckets) {\n      let bucketId = bucket.id;\n      let items = bucket.items;\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        let position = i + 1;\n        let choiceId = item.id;\n        let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n        if (feedbackObject != null) {\n          let feedback = feedbackObject.feedback;\n          let correctPosition = feedbackObject.position;\n          let feedbackIsCorrect = feedbackObject.isCorrect;\n          if (this.hasCorrectAnswer) {\n            if (!this.isAuthorHasSpecifiedACorrectBucket(choiceId)) {\n              if (bucketId == this.sourceBucketId) {\n                // set this choice as correct because this choice belongs in the source bucket\n                feedbackIsCorrect = true;\n              }\n            }\n          }\n\n          if (feedback == '') {\n            if (this.hasCorrectAnswer) {\n              if (feedbackIsCorrect) {\n                feedback = this.$translate('CORRECT');\n              } else {\n                feedback = this.$translate('INCORRECT');\n              }\n            }\n          }\n\n          if (this.doesPositionNotMatter(correctPosition)) {\n            item.feedback = feedback;\n            item.isCorrect = feedbackIsCorrect;\n            item.isIncorrectPosition = false;\n            isCorrect = isCorrect && feedbackIsCorrect;\n          } else {\n            /*\n             * position does matter and the choice is in a correct\n             * bucket. we know this because a feedback object will\n             * only have a non-null position value if the choice is\n             * in the correct bucket. if the feedback object is for\n             * a choice that is in an incorrect bucket, the position\n             * value will be null.\n             */\n            if (position === correctPosition) {\n              item.feedback = feedback;\n              item.isCorrect = feedbackIsCorrect;\n              item.isIncorrectPosition = false;\n              isCorrect = isCorrect && feedbackIsCorrect;\n            } else {\n              // item is in the correct bucket but wrong position\n              let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n              if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                incorrectPositionFeedback = this.$translate('match.correctBucketButWrongPosition');\n              }\n              item.feedback = incorrectPositionFeedback;\n              item.isCorrect = false;\n              item.isIncorrectPosition = true;\n              isCorrect = false;\n            }\n          }\n        }\n\n        if (!this.hasCorrectAnswer) {\n          item.isCorrect = null;\n          item.isIncorrectPosition = null;\n        }\n\n        if (choiceIdsExcludedFromFeedback.indexOf(choiceId) > -1) {\n          item.feedback = null;\n        }\n      }\n    }\n\n    if (this.hasCorrectAnswer) {\n      this.isCorrect = isCorrect;\n    } else {\n      this.isCorrect = null;\n    }\n  }\n\n  /**\n   * Get the array of feedback\n   * @return {array} the array of feedback objects\n   */\n  getAllFeedback() {\n    return this.componentContent.feedback;\n  }\n\n  /**\n   * Get the feedback object for the combination of bucket and choice\n   * @param {string} bucketId the bucket id\n   * @param {string} choiceId the choice id\n   * @return {object} the feedback object for the combination of bucket and choice\n   */\n  getFeedbackObject(bucketId, choiceId) {\n    for (let bucketFeedback of this.getAllFeedback()) {\n      if (bucketFeedback.bucketId === bucketId) {\n        for (let choiceFeedback of bucketFeedback.choices) {\n          if (choiceFeedback.choiceId === choiceId) {\n            return choiceFeedback;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  doesPositionNotMatter(feedbackPosition) {\n    return !this.componentContent.ordered || feedbackPosition == null;\n  }\n\n  studentDataChanged() {\n    this.isCorrect = null;\n    this.isLatestComponentStateSubmit = false;\n    super.studentDataChanged();\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    let componentState = this.NodeService.createNewComponentState();\n    let studentData = {};\n    if (action === 'submit') {\n      this.checkAnswer();\n      if (this.hasCorrectAnswer && this.isCorrect != null) {\n        studentData.isCorrect = this.isCorrect;\n      }\n      this.isLatestComponentStateSubmit = true;\n    } else {\n      this.clearFeedback();\n      this.processDirtyStudentWork();\n      this.isLatestComponentStateSubmit = false;\n    }\n\n    /*\n     * Create a copy of the buckets so we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     */\n    studentData.buckets = this.getCopyOfBuckets();\n    componentState.isSubmit = this.isSubmit;\n    studentData.submitCounter = this.submitCounter;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    componentState.studentData = studentData;\n    componentState.componentType = 'Match';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    let deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      // set the new authoring component content\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the component content\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a choice\n   */\n  authoringAddChoice() {\n\n    // create a new choice\n    var newChoice = {};\n    newChoice.id = this.UtilService.generateKey(10);\n    newChoice.value = '';\n    newChoice.type = 'choice';\n\n    // add the choice to the array of choices\n    this.authoringComponentContent.choices.push(newChoice);\n\n    // add the choice to the feedback\n    this.addChoiceToFeedback(newChoice.id);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a bucket\n   */\n  authoringAddBucket() {\n\n    // create a new bucket\n    var newBucket = {};\n    newBucket.id = this.UtilService.generateKey(10);\n    newBucket.value = '';\n    newBucket.type = 'bucket';\n\n    // add the bucket to the array of buckets\n    this.authoringComponentContent.buckets.push(newBucket);\n\n    // add the bucket to the feedback\n    this.addBucketToFeedback(newBucket.id);\n\n    // save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a choice up\n   * @param index the index of the choice\n   */\n  authoringMoveChoiceUp(index) {\n\n    if (index != 0) {\n      // the choice is not at the top so we can move it up\n\n      // remember the choice\n      var choice = this.authoringComponentContent.choices[index];\n\n      if (choice != null) {\n\n        // remove the choice\n        this.authoringComponentContent.choices.splice(index, 1);\n\n        // insert the choice one index back\n        this.authoringComponentContent.choices.splice(index - 1, 0, choice);\n      }\n\n      /*\n       * get the feedback so we can update the order of the choices within\n       * the bucket feedback\n       */\n      var feedback = this.authoringComponentContent.feedback;\n\n      if (feedback != null) {\n\n        // loop through all the bucket feedback objects\n        for (var f = 0; f < feedback.length; f++) {\n          var bucketFeedback = feedback[f];\n\n          if (bucketFeedback != null) {\n\n            // get all the choices\n            var bucketFeedbackChoices = bucketFeedback.choices;\n\n            if (bucketFeedbackChoices != null) {\n\n              // remmeber the choice\n              var tempChoice = bucketFeedbackChoices[index];\n\n              if (tempChoice != null) {\n                // remove the choice\n                bucketFeedbackChoices.splice(index, 1);\n\n                // insert the choice one index back\n                bucketFeedbackChoices.splice(index - 1, 0, tempChoice);\n              }\n            }\n          }\n        }\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a choice down\n   * @param index the index of the choice\n   */\n  authoringMoveChoiceDown(index) {\n\n    if (index < this.authoringComponentContent.choices.length - 1) {\n      // the choice is not at the bottom so we can move it down\n\n      // remember the choice\n      var choice = this.authoringComponentContent.choices[index];\n\n      if (choice != null) {\n\n        // remove the choice\n        this.authoringComponentContent.choices.splice(index, 1);\n\n        // insert the choice one index forward\n        this.authoringComponentContent.choices.splice(index + 1, 0, choice);\n      }\n\n      /*\n       * get the feedback so we can update the order of the choices within\n       * the bucket feedback\n       */\n      var feedback = this.authoringComponentContent.feedback;\n\n      if (feedback != null) {\n\n        // loop through all the bucket feedback objects\n        for (var f = 0; f < feedback.length; f++) {\n          var bucketFeedback = feedback[f];\n\n          if (bucketFeedback != null) {\n\n            // get all the choices\n            var bucketFeedbackChoices = bucketFeedback.choices;\n\n            if (bucketFeedbackChoices != null) {\n\n              // remmeber the choice\n              var tempChoice = bucketFeedbackChoices[index];\n\n              if (tempChoice != null) {\n                // remove the choice\n                bucketFeedbackChoices.splice(index, 1);\n\n                // insert the choice one index forward\n                bucketFeedbackChoices.splice(index + 1, 0, tempChoice);\n              }\n            }\n          }\n        }\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a choice\n   * @param index the index of the choice in the choice array\n   */\n  authoringDeleteChoice(index) {\n\n    // confirm with the user that they want to delete the choice\n    var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisChoice'));\n\n    if (answer) {\n\n      // remove the choice from the array\n      var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n      if (deletedChoice != null && deletedChoice.length > 0) {\n\n        // splice returns an array so we need to get the element out of it\n        deletedChoice = deletedChoice[0];\n\n        // get the choice id\n        var choiceId = deletedChoice.id;\n\n        // remove the choice from the feedback\n        this.removeChoiceFromFeedback(choiceId);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a bucket up\n   * @param index the index of the bucket\n   */\n  authoringMoveBucketUp(index) {\n\n    if (index > 0) {\n      // the bucket is not at the top so we can move it up\n\n      // remember the bucket\n      var bucket = this.authoringComponentContent.buckets[index];\n\n      if (bucket != null) {\n\n        // remove the bucket\n        this.authoringComponentContent.buckets.splice(index, 1);\n\n        // insert the bucket one index back\n        this.authoringComponentContent.buckets.splice(index - 1, 0, bucket);\n      }\n\n      /*\n       * Remember the bucket feedback. The first element of the feedback\n       * contains the origin bucket. The first authored bucket is located\n       * at index 1. This means we need the index of the bucket feedback\n       * that we want is located at index + 1.\n       */\n      var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\n\n      if (bucketFeedback != null) {\n\n        // remove the bucket feedback\n        this.authoringComponentContent.feedback.splice(index + 1, 1);\n\n        // insert the bucket one index back\n        this.authoringComponentContent.feedback.splice(index, 0, bucketFeedback);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a bucket down\n   * @param index the index of the bucket\n   */\n  authoringMoveBucketDown(index) {\n\n    if (index < this.authoringComponentContent.buckets.length - 1) {\n      // the bucket is not at the bottom so we can move it down\n\n      // remember the bucket\n      var bucket = this.authoringComponentContent.buckets[index];\n\n      if (bucket != null) {\n\n        // remove the bucket\n        this.authoringComponentContent.buckets.splice(index, 1);\n\n        // insert the bucket one index forward\n        this.authoringComponentContent.buckets.splice(index + 1, 0, bucket);\n      }\n\n      /*\n       * Remember the bucket feedback. The first element of the feedback\n       * contains the origin bucket. The first authored bucket is located\n       * at index 1. This means we need the index of the bucket feedback\n       * that we want is located at index + 1.\n       */\n      var bucketFeedback = this.authoringComponentContent.feedback[index + 1];\n\n      if (bucketFeedback != null) {\n\n        // remove the bucket feedback\n        this.authoringComponentContent.feedback.splice(index + 1, 1);\n\n        // insert the bucket one index forward\n        this.authoringComponentContent.feedback.splice(index + 2, 0, bucketFeedback);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Delete a bucket\n   * @param index the index of the bucket in the bucket array\n   */\n  authoringDeleteBucket(index) {\n\n    // confirm with the user tha tthey want to delete the bucket\n    var answer = confirm(this.$translate('match.areYouSureYouWantToDeleteThisBucket'));\n\n    if (answer) {\n\n      // remove the bucket from the array\n      var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n      if (deletedBucket != null && deletedBucket.length > 0) {\n\n        // splice returns an array so we need to get the element out of it\n        deletedBucket = deletedBucket[0];\n\n        // get the bucket id\n        var bucketId = deletedBucket.id;\n\n        // remove the bucket from the feedback\n        this.removeBucketFromFeedback(bucketId);\n      }\n\n      // save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the choice by id from the authoring component content\n   * @param {string} id the choice id\n   * @returns {object} the choice object from the authoring component content\n   */\n  getChoiceById(id) {\n    for (let choice of this.componentContent.choices) {\n      if (choice.id === id) {\n        return choice;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the choice with the given text.\n   * @param {string} text look for a choice with this text\n   * @returns {object} the choice with the given text\n   */\n  getChoiceByText(text) {\n    for (let choice of this.componentContent.choices) {\n      if (choice.value === text) {\n        return choice;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the bucket by id from the authoring component content.\n   * @param {string} id the bucket id\n   * @param {array} buckets (optional) the buckets to get the bucket from\n   * @returns {object} the bucket object from the authoring component content\n   */\n  getBucketById(id, buckets = this.buckets) {\n    for (let bucket of buckets) {\n      if (bucket.id == id) {\n        return bucket;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the choice value by id from the authoring component content\n   * @param {string} choiceId the choice id\n   * @returns {string} the choice value from the authoring component content\n   */\n  getChoiceValueById(choiceId) {\n    const choice = this.getChoiceById(choiceId);\n    if (choice != null) {\n      return choice.value;\n    }\n    return null;\n  }\n\n  /**\n   * Get the bucket value by id from the authoring component content\n   * @param {string} bucketId the bucket id\n   * @returns {string} the bucket value from the authoring component content\n   */\n  getBucketValueById(bucketId) {\n    const bucket = this.getBucketById(bucketId);\n    if (bucket != null) {\n      return bucket.value;\n    }\n    return null;\n  }\n\n  /**\n   * Add a choice to the feedback\n   * @param choiceId the choice id\n   */\n  addChoiceToFeedback(choiceId) {\n\n    // get the feedback array\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      /*\n       * loop through all the elements in the feedback. each element\n       * represents a bucket.\n       */\n      for (var f = 0; f < feedback.length; f++) {\n        // get a bucket\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          // get the choices in the bucket\n          var choices = bucketFeedback.choices;\n\n          var feedbackText = '';\n          var isCorrect = false;\n\n          // create a feedback object\n          var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n          // add the feedback object\n          choices.push(feedbackObject);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a bucket to the feedback\n   * @param bucketId the bucket id\n   */\n  addBucketToFeedback(bucketId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // create a new bucket feedback object\n      var bucket = {};\n      bucket.bucketId = bucketId;\n      bucket.choices = [];\n\n      // get all the choices\n      var choices = this.authoringComponentContent.choices;\n\n      // loop through all the choices and add a choice feedback object to the bucket\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n\n          var choiceId = choice.id;\n          var feedbackText = '';\n          var isCorrect = false;\n\n          // create a feedback object\n          var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n          // add the feedback object\n          bucket.choices.push(feedbackObject);\n        }\n      }\n\n      // add the feedback bucket\n      feedback.push(bucket);\n    }\n  }\n\n  /**\n   * Create a feedback object\n   * @param choiceId the choice id\n   * @param feedback the feedback\n   * @param isCorrect whether the choice is correct\n   * @param position (optional) the position\n   * @param incorrectPositionFeedback (optional) the feedback for when the\n   * choice is in the correct but wrong position\n   * @returns the feedback object\n   */\n  createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n    var feedbackObject = {};\n    feedbackObject.choiceId = choiceId;\n    feedbackObject.feedback = feedback;\n    feedbackObject.isCorrect = isCorrect;\n    feedbackObject.position = position;\n    feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n    return feedbackObject;\n  }\n\n  /**\n   * Remove a choice from the feedback\n   * @param choiceId the choice id to remove\n   */\n  removeChoiceFromFeedback(choiceId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      /*\n       * loop through each bucket feedback and remove the choice from each\n       * bucket feedback object\n       */\n      for (var f = 0; f < feedback.length; f++) {\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          var choices = bucketFeedback.choices;\n\n          // loop through all the choices\n          for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n              if (choiceId === choice.choiceId) {\n                // we have found the choice we want to remove\n\n                // remove the choice feedback object\n                choices.splice(c, 1);\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a bucket from the feedback\n   * @param bucketId the bucket id to remove\n   */\n  removeBucketFromFeedback(bucketId) {\n\n    // get the feedback array. each element in the array represents a bucket.\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // loop through all the bucket feedback objects\n      for (var f = 0; f < feedback.length; f++) {\n        var bucketFeedback = feedback[f];\n\n        if (bucketFeedback != null) {\n\n          if (bucketId === bucketFeedback.bucketId) {\n            // we have found the bucket feedback object we want to remove\n\n            // remove the bucket feedback object\n            feedback.splice(f, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if the component has been authored with a correct choice\n   * @return {boolean} whether the component has been authored with a correct choice\n   */\n  hasCorrectChoices() {\n    for (let bucket of this.componentContent.feedback) {\n      for (let choice of bucket.choices) {\n        if (choice.isCorrect) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  clearFeedback() {\n    for (let choice of this.getChoices()) {\n      choice.isCorrect = null;\n      choice.isIncorrectPosition = null;\n      choice.feedback = null;\n    }\n  }\n\n  /**\n   * Check if a choice has a correct bucket\n   * @param {string} choiceId the choice id\n   * @return {boolean} whether the choice has a correct bucket\n   */\n  isAuthorHasSpecifiedACorrectBucket(choiceId) {\n    for (let bucket of this.getAllFeedback()) {\n      for (let choice of bucket.choices) {\n        if (choice.choiceId === choiceId) {\n          if (choice.isCorrect) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if the choice has been authored to have a correct position\n   * @param {string} choiceId the choice id\n   * @return {boolean} whether the choice has a correct position in any bucket\n   */\n  isAuthorHasSpecifiedACorrectPosition(choiceId) {\n    for (let bucket of this.getAllFeedback()) {\n      for (let choice of bucket.choices) {\n        if (choice.choiceId === choiceId) {\n          if (choice.position != null) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  choiceIsInCorrectPosition(choiceId) {\n    // dummy. not called.\n    // TODO: implement me.\n    return false;\n  }\n\n  /**\n   * Add a connected component\n   */\n  addConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.updateOn = 'change';\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  deleteConnectedComponent(index) {\n\n    if (this.authoringComponentContent.connectedComponents != null) {\n      this.authoringComponentContent.connectedComponents.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if this component has been authored to have feedback or a correct\n   * choice\n   * @return whether this component has feedback or a correct choice\n   */\n  componentHasFeedback() {\n\n    // get the feedback\n    var feedback = this.authoringComponentContent.feedback;\n\n    if (feedback != null) {\n\n      // loop through all the feedback buckets\n      for (var f = 0; f < feedback.length; f++) {\n\n        var tempFeedback = feedback[f];\n\n        if (tempFeedback != null) {\n          var tempChoices = tempFeedback.choices;\n\n          if (tempChoices != null) {\n\n            // loop through the feedback choices\n            for (var c = 0; c < tempChoices.length; c++) {\n              var tempChoice = tempChoices[c];\n\n              if (tempChoice != null) {\n\n                if (tempChoice.feedback != null && tempChoice.feedback != '') {\n                  // this choice has feedback\n                  return true;\n                }\n\n                if (tempChoice.isCorrect) {\n                  // this choice is correct\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The author has changed the feedback so we will enable the submit button\n   */\n  authoringViewFeedbackChanged() {\n\n    var show = true;\n\n    if (this.componentHasFeedback()) {\n      // this component has feedback so we will show the submit button\n      show = true;\n    } else {\n      /*\n       * this component does not have feedback so we will not show the\n       * submit button\n       */\n      show = false;\n    }\n\n    // show or hide the submit button\n    this.setShowSubmitButtonValue(show);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Is Correct\" checkbox for a choice feedback has been clicked.\n   * @param feedback The choice feedback.\n   */\n  authoringViewIsCorrectClicked(feedback) {\n    if (!feedback.isCorrect) {\n      // the choice has been set to not correct so we will remove the position\n      delete feedback.position;\n      delete feedback.incorrectPositionFeedback;\n    }\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * choice\n   * @param choice the choice object to set the image into\n   */\n  chooseChoiceAsset(choice) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'choice';\n    params.targetObject = choice;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * bucket\n   * @param bucket the bucket object to set the image into\n   */\n  chooseBucketAsset(bucket) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'bucket';\n    params.targetObject = bucket;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param {array} componentStates an array of component states\n   * @return {object} a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n    const mergedBuckets = [];\n    for (let componentState of componentStates) {\n      for (let bucket of componentState.studentData.buckets) {\n        this.mergeBucket(mergedBuckets, bucket);\n      }\n    }\n    const mergedComponentState = this.NodeService.createNewComponentState();\n    mergedComponentState.studentData = {\n      buckets: mergedBuckets\n    };\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a bucket into the array of buckets\n   * @param {array} buckets an array of buckets to merge into\n   * @param {object} bucket the bucket to merge into the array of buckets\n   * @return {array} an array of buckets with the merged bucket\n   */\n  mergeBucket(buckets, bucket) {\n    let bucketFound = false;\n    for (let tempBucket of buckets) {\n      if (tempBucket.id == bucket.id) {\n        /*\n         * the bucket is already in the array of buckets so we\n         * will just merge the items\n         */\n        bucketFound = true;\n        this.mergeChoices(tempBucket.items, bucket.items);\n      }\n    }\n    if (!bucketFound) {\n      /*\n       * the bucket was not in the array of buckets so we will add the\n       * bucket\n       */\n      buckets.push(bucket);\n    }\n    return buckets;\n  }\n\n  /**\n   * Merge the items. Only merge the items with an id that is not already in\n   * the array of items.\n   * @param {array} choices1 an array of choice objects\n   * @param {array} choices2 an array of choice objects\n   * @return {array} an array of objects that have been merged\n   */\n  mergeChoices(choices1, choices2) {\n    const choices1Ids = this.getIds(choices1);\n    for (let choice2 of choices2) {\n      if (choices1Ids.indexOf(choice2.id) == -1) {\n        choices1.push(choice2);\n      }\n    }\n    return choices1;\n  }\n\n  /**\n   * Get the ids from the array of objects\n   * @param {array} objects an array of objects that have ids\n   * @param {array} an array of id strings\n   */\n  getIds(objects) {\n    const ids = [];\n    for (let object of objects) {\n      ids.push(object.id);\n    }\n    return ids;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nMatchController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$mdMedia',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'dragulaService',\n  'MatchService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MatchController;\n"]}