{"version":3,"sources":["matchController.es6"],"names":[],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n    constructor($rootScope,\n                $scope,\n                MatchService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService,\n                $mdMedia) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.MatchService = MatchService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$mdMedia = $mdMedia;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // the choices\n        this.choices = [];\n\n        // the buckets\n        this.buckets = [];\n\n        // the number of times the student has submitted\n        this.numberOfSubmits = 0;\n\n        // whether the student has correctly placed the choices\n        this.isCorrect = null;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * initialize the choices and buckets with the values from the\n                     * component content\n                     */\n                    this.initializeChoices();\n                    this.initializeBuckets();\n                }.bind(this), true);\n            }\n\n            /*\n             * initialize the choices and buckets with the values from the\n             * component content\n             */\n            this.initializeChoices();\n            this.initializeBuckets();\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        this.$scope.options = {\n            accept: (sourceNode, destNodes, destIndex) => {\n                var result = false;\n\n                // get the value of the source node\n                var data = sourceNode.$modelValue;\n\n                // get the type of the nodes in the destination\n                var destType = destNodes.$element.attr('data-type');\n\n                if (data != null) {\n\n                    // check if the types match\n                    if (data.type === destType) {\n                        // the types match so we will accept it\n                        result = true\n                    }\n                }\n\n                return result;\n            },\n            dropped: event => {\n                if (event.source.nodesScope.$id !== event.dest.nodesScope.$id || event.source.index !== event.dest.index) {\n                    // TODO: not sure why this check is necessary, as angular-ui-tree is not supposed to fire the dropped event unless position has changed\n                    // tell the controller that the student data has changed\n                    this.$scope.matchController.studentDataChanged();\n                }\n            }\n        };\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.matchController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.matchController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.matchController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n                this.incrementNumberOfSubmits();\n\n                // set saveFailed to true; will be set to false on save success response from server\n                this.saveFailed = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let clientSaveTime = componentState.clientSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // do nothing\n        }));\n\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n            $scope.mdScreen = md;\n        });\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the buckets and number of submits\n                let componentStateBuckets = studentData.buckets;\n                let componentStateNumberOfSubmits = studentData.numberOfSubmits;\n\n                // set the buckets\n                if (componentStateBuckets != null) {\n                    let bucketIds = this.buckets.map(b => { return b.id; });\n                    let choiceIds = this.choices.map(c => { return c.id; });\n\n                    for (let i = 0, l = componentStateBuckets.length; i < l; i++) {\n                        let componentStateBucketId = componentStateBuckets[i].id;\n                        if (componentStateBucketId !== 0) {\n                            // componentState bucket is a valid bucket, so process choices\n                            if (bucketIds.indexOf(componentStateBucketId) > -1) {\n                                let currentBucket = componentStateBuckets[i];\n                                let currentChoices = currentBucket.items;\n\n                                for (let x = 0, len = currentChoices.length; x < len; x++) {\n                                    let currentChoice = currentChoices[x];\n                                    let currentChoiceId = currentChoice.id;\n                                    let currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n                                    if (currentChoiceLocation > -1) {\n                                        // choice is valid and used by student in a valid bucket, so add it to that bucket\n                                        let bucket = this.getBucketById(componentStateBucketId);\n                                        // content for choice with this id may have change, so get updated content\n                                        let updatedChoice = this.getChoiceById(currentChoiceId);\n                                        bucket.items.push(updatedChoice);\n                                        choiceIds.splice(currentChoiceLocation, 1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // add unused choices to default choices bucket\n                    let choicesBucket = this.getBucketById(0);\n                    choicesBucket.items = [];\n                    for (let i = 0, l = choiceIds.length; i < l; i++) {\n                        choicesBucket.items.push(this.getChoiceById(choiceIds[i]));\n                    }\n                }\n\n                // set the number of submits\n                if (componentStateNumberOfSubmits) {\n                    this.numberOfSubmits = componentStateNumberOfSubmits;\n                }\n\n                if (this.numberOfSubmits > 0) {\n                    componentState.isSubmit ? this.checkAnswer() : this.processLatestSubmit(true);\n                } else {\n                    this.processLatestSubmit(true);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the latest submitted componentState and check answer for choices that haven't changed since\n     * @param onload boolean whether this function is being executed on the initial component load or not\n     */\n    processLatestSubmit(onload) {\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        let numStates = componentStates.length\n        let latestSubmitState = null;\n\n        for (let l = numStates-1; l > -1; l--) {\n            let componentState = componentStates[l];\n            if (componentState.isSubmit) {\n                latestSubmitState = componentState;\n                break;\n            }\n        }\n\n        if (latestSubmitState && latestSubmitState.studentData) {\n            let latestBucketIds = this.buckets.map(b => { return b.id; });\n            let latestChoiceIds = this.choices.map(c => { return c.id; });\n            let excludeIds = [];\n            let latestSubmitStateBuckets = latestSubmitState.studentData.buckets;\n\n            for (let b = 0, l = latestSubmitStateBuckets.length; b < l; b++) {\n                let submitBucket = latestSubmitStateBuckets[b];\n                let submitBucketId = submitBucket.id;\n\n                if (latestBucketIds.indexOf(submitBucketId) > -1) {\n                    let latestBucket = this.getBucketById(submitBucketId);\n                    if (latestBucket) {\n                        let submitChoiceIds = submitBucket.items.map(c => { return c.id; });\n                        let latestBucketChoiceIds = latestBucket.items.map(c => { return c.id; });\n                        for (let c = 0, len = submitChoiceIds.length; c < len; c++) {\n                            let submitChoiceId = submitChoiceIds[c];\n                            let latestBucketChoiceId = latestBucketChoiceIds[c];\n                            if (submitChoiceId !== latestBucketChoiceId) {\n                                excludeIds.push(submitChoiceId);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (excludeIds.length) {\n                // state has changed since last submit, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n            } else {\n                // state has not changed since last submit, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n            }\n            this.checkAnswer(excludeIds);\n        } else {\n            this.isSubmitDirty = true;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        }\n\n        if (onload && numStates) {\n            let latestState = componentStates[numStates-1];\n\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Initialize the available choices from the component content\n     */\n    initializeChoices() {\n\n        this.choices = [];\n\n        if(this.componentContent != null && this.componentContent.choices != null) {\n            this.choices = this.componentContent.choices;\n        }\n    };\n\n    /**\n     * Get the choices\n     */\n    getChoices() {\n        return this.choices;\n    };\n\n    /**\n     * Initialize the available buckets from the component content\n     */\n    initializeBuckets() {\n\n        this.buckets = [];\n\n        if(this.componentContent != null && this.componentContent.buckets != null) {\n\n            // get the buckets from the component content\n            var buckets = this.componentContent.buckets;\n\n            /*\n             * create a bucket that will contain the choices when\n             * the student first starts working\n             */\n            var originBucket = {};\n            originBucket.id = 0;\n            originBucket.value = this.componentContent.choicesLabel ? this.componentContent.choicesLabel : 'Choices';\n            originBucket.type = 'bucket';\n            originBucket.items = [];\n\n            var choices = this.getChoices();\n\n            // add all the choices to the origin bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                originBucket.items.push(choice);\n            }\n\n            // add the origin bucket to our array of buckets\n            this.buckets.push(originBucket);\n\n            // add all the other buckets to our array of buckets\n            for (var b = 0; b < buckets.length; b++) {\n                var bucket = buckets[b];\n\n                bucket.items = [];\n\n                this.buckets.push(bucket);\n            }\n        }\n    };\n\n    /**\n     * Get the buckets\n     */\n    getBuckets() {\n        return this.buckets;\n    };\n\n    /**\n     * Create a copy of the buckets for cases when we want to make\n     * sure we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     * @return a copy of the buckets\n     */\n    getCopyOfBuckets() {\n        var buckets = this.getBuckets();\n\n        // get a JSON string representation of the buckets\n        var bucketsJSONString = angular.toJson(buckets);\n\n        // turn the JSON string back into a JSON array\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n        return copyOfBuckets;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // TODO: add confirmation dialog if lock after submit is enabled on this component\n        this.isSubmit = true;\n        this.incrementNumberOfSubmits();\n\n        // set saveFailed to true; will be set to false on save success response from server\n        this.saveFailed = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n    * Called when either the component or node is submitted\n    */\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // check if the student answered correctly\n        this.processLatestSubmit();\n    }\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfSubmits() {\n        if (!this.saveFailed) {\n            if (this.numberOfSubmits == null) {\n                this.numberOfSubmits = 0;\n            }\n\n            this.numberOfSubmits++;\n        }\n    };\n\n    /**\n     * Check if the student has answered correctly\n     * @param ids array of choice ids to exclude\n     */\n    checkAnswer(ids) {\n        let isCorrect = true;\n\n        // get the buckets\n        let buckets = this.getBuckets();\n        let excludeIds = ids ? ids : [];\n\n        if (buckets != null) {\n\n            // loop through all the buckets\n            for(let b = 0, l = buckets.length; b < l; b++) {\n\n                // get a bucket\n                let bucket = buckets[b];\n\n                if (bucket != null) {\n                    let bucketId = bucket.id;\n                    let items = bucket.items;\n\n                    if (items != null) {\n\n                        // loop through all the items in the bucket\n                        for (let i = 0, len = items.length; i < len; i++) {\n                            let item = items[i];\n                            let position = i + 1;\n\n                            if (item != null) {\n                                let choiceId = item.id;\n\n                                // get the feedback object for the bucket and choice\n                                let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                                if (feedbackObject != null) {\n                                    let feedback = feedbackObject.feedback;\n\n                                    let feedbackPosition = feedbackObject.position;\n                                    let feedbackIsCorrect = feedbackObject.isCorrect;\n\n                                    // set the default feedback if none is authored\n                                    if (feedback) {\n                                        if (feedbackIsCorrect) {\n                                            feedback = 'Correct';\n                                        } else {\n                                            feedback = 'Incorrect';\n                                        }\n                                    }\n\n                                    if (!this.componentContent.ordered || feedbackPosition == null) {\n                                        /*\n                                         * position does not matter and the choice may be\n                                         * in the correct or incorrect bucket\n                                         */\n\n                                        // set the feedback into the item\n                                        item.feedback = feedback;\n\n                                        // set whether the choice is in the correct bucket\n                                        item.isCorrect = feedbackIsCorrect;\n\n                                        /*\n                                         * there is no feedback position in the feeback object so\n                                         * position doesn't matter\n                                         */\n                                        item.isIncorrectPosition = false;\n\n                                        // update whether the student has answered the step correctly\n                                        isCorrect = isCorrect && feedbackIsCorrect;\n                                    } else {\n                                        /*\n                                         * position does matter and the choice is in a correct\n                                         * bucket. we know this because a feedback object will\n                                         * only have a non-null position value if the choice is\n                                         * in the correct bucket. if the feedback object is for\n                                         * a choice that is in an incorrect bucket, the position\n                                         * value will be null.\n                                         */\n\n                                        if (position === feedbackPosition) {\n                                            // the item is in the correct position\n\n                                            // set the feedback into the item\n                                            item.feedback = feedback;\n\n                                            // set whether the choice is in the correct bucket\n                                            item.isCorrect = feedbackIsCorrect;\n\n                                            // the choice is in the correct position\n                                            item.isIncorrectPosition = false;\n\n                                            // update whether the student has answered the step correctly\n                                            isCorrect = isCorrect && feedbackIsCorrect;\n                                        } else {\n                                            // item is in the correct bucket but wrong position\n\n                                            /*\n                                             * get the feedback for when the choice is in the correct\n                                             * bucket but wrong position\n                                             */\n                                            let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n\n                                            // set the default feedback if none is authored\n                                            if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                                                incorrectPositionFeedback = 'Correct bucket but wrong position';\n                                            }\n\n                                            item.feedback = incorrectPositionFeedback;\n\n                                            /*\n                                             * the choice is in the incorrect position so it isn't correct\n                                             */\n                                            item.isCorrect = false;\n\n                                            // the choice is in the incorrect position\n                                            item.isIncorrectPosition = true;\n\n                                            // the student has answered incorrectly\n                                            isCorrect = false;\n                                        }\n                                    }\n                                }\n\n                                if (excludeIds.indexOf(choiceId) > -1) {\n                                    // don't show feedback for choices that should be excluded\n                                    item.feedback = null;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * set the isCorrect value into the controller\n         * so we can read it later\n         */\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the feedback object for the combination of bucket and choice\n     * @param bucketId the bucket id\n     * @param choiceId the choice id\n     * @return the feedback object for the combination of bucket and choice\n     */\n    getFeedbackObject(bucketId, choiceId) {\n        var feedbackObject = null;\n\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the feedback\n            var feedback = componentContent.feedback;\n\n            if (feedback != null) {\n\n                /*\n                 * loop through the feedback. each element in the feedback represents\n                 * a bucket\n                 */\n                for (var f = 0; f < feedback.length; f++) {\n\n                    // get a bucket feedback object\n                    var bucketFeedback = feedback[f];\n\n                    if (bucketFeedback != null) {\n\n                        // get the bucket id\n                        var tempBucketId = bucketFeedback.bucketId;\n\n                        if (bucketId === tempBucketId) {\n                            // we have found the bucket we are looking for\n\n                            var choices = bucketFeedback.choices;\n\n                            if (choices != null) {\n\n                                // loop through all the choice feedback\n                                for (var c = 0; c < choices.length; c++) {\n                                    var choiceFeedback = choices[c];\n\n                                    if (choiceFeedback != null) {\n                                        var tempChoiceId = choiceFeedback.choiceId;\n\n                                        if (choiceId === tempChoiceId) {\n                                            // we have found the choice we are looking for\n                                            feedbackObject = choiceFeedback;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                if (feedbackObject != null) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return feedbackObject;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n        this.buckets = componentState.studentData.buckets;\n\n        this.processLatestSubmit();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the buckets into the student data\n            studentData.buckets = this.getCopyOfBuckets();\n\n            // set the number of submits into the student data\n            studentData.numberOfSubmits = this.numberOfSubmits;\n\n            if (this.isCorrect != null) {\n                // set whether the student was correct\n                studentData.isCorrect = this.isCorrect;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            //set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n            \n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the \n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n        \n        return stepNodeIds;\n    }\n    \n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        \n        return nodePositionAndTitle;\n    }\n    \n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n        \n        return components;\n    }\n    \n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n        \n        return result;\n    }\n\n    /**\n     * Add a choice\n     */\n    authoringAddChoice() {\n\n        // create a new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.value = '';\n        newChoice.type = 'choice';\n\n        // add the choice to the array of choices\n        this.authoringComponentContent.choices.push(newChoice);\n\n        // add the choice to the feedback\n        this.addChoiceToFeedback(newChoice.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a bucket\n     */\n    authoringAddBucket() {\n\n        // create a new bucket\n        var newBucket = {};\n        newBucket.id = this.UtilService.generateKey(10);\n        newBucket.value = '';\n        newBucket.type = 'bucket';\n\n        // add the bucket to the array of buckets\n        this.authoringComponentContent.buckets.push(newBucket);\n\n        // add the bucket to the feedback\n        this.addBucketToFeedback(newBucket.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice\n     * @param index the index of the choice in the choice array\n     */\n    authoringDeleteChoice(index) {\n\n        // confirm with the user that they want to delete the choice\n        var answer = confirm('Are you sure you want to delete this choice?');\n\n        if (answer) {\n\n            // remove the choice from the array\n            var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n            if (deletedChoice != null && deletedChoice.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedChoice = deletedChoice[0];\n\n                // get the choice id\n                var choiceId = deletedChoice.id;\n\n                // remove the choice from the feedback\n                this.removeChoiceFromFeedback(choiceId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete a bucket\n     * @param index the index of the bucket in the bucket array\n     */\n    authoringDeleteBucket(index) {\n\n        // confirm with the user tha tthey want to delete the bucket\n        var answer = confirm('Are you sure you want to delete this bucket?');\n\n        if (answer) {\n\n            // remove the bucket from the array\n            var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n            if (deletedBucket != null && deletedBucket.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedBucket = deletedBucket[0];\n\n                // get the bucket id\n                var bucketId = deletedBucket.id;\n\n                // remove the bucket from the feedback\n                this.removeBucketFromFeedback(bucketId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the choice by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice object from the authoring component content\n     */\n    getChoiceById(id) {\n\n        var choice = null;\n\n        // get the choices\n        var choices = this.componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            // get a choice\n            var tempChoice = choices[c];\n\n            if (tempChoice != null) {\n                if (id === tempChoice.id) {\n                    // we have found the choice we want\n                    choice = tempChoice;\n                    break;\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the bucket by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket object from the authoring component content\n     */\n    getBucketById(id) {\n\n        var bucket = null;\n\n        // get the buckets\n        var buckets = this.buckets ? this.buckets : this.authoringComponentContent.buckets;\n\n        // loop through the buckets\n        for (var b = 0; b < buckets.length; b++) {\n            var tempBucket = buckets[b];\n\n            if (tempBucket != null) {\n                if (id === tempBucket.id) {\n                    // we have found the bucket we want\n                    bucket = tempBucket;\n                    break;\n                }\n            }\n        }\n\n        return bucket;\n    }\n\n    /**\n     * Get the choice value by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice value from the authoring component content\n     */\n    getChoiceValueById(id) {\n\n        var value = null;\n\n        // get the choice\n        var choice = this.getChoiceById(id);\n\n        if (choice != null) {\n            // get the value\n            value = choice.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the bucket value by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket value from the authoring component content\n     */\n    getBucketValueById(id) {\n\n        var value = null;\n\n        // get the bucket\n        var bucket = this.getBucketById(id);\n\n        if (bucket != null) {\n            // get the value\n            value = bucket.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Add a choice to the feedback\n     * @param choiceId the choice id\n     */\n    addChoiceToFeedback(choiceId) {\n\n        // get the feedback array\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through all the elements in the feedback. each element\n             * represents a bucket.\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                // get a bucket\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    // get the choices in the bucket\n                    var choices = bucketFeedback.choices;\n\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    choices.push(feedbackObject);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a bucket to the feedback\n     * @param bucketId the bucket id\n     */\n    addBucketToFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // create a new bucket feedback object\n            var bucket = {};\n            bucket.bucketId = bucketId;\n            bucket.choices = [];\n\n            // get all the choices\n            var choices = this.authoringComponentContent.choices;\n\n            // loop through all the choices and add a choice feedback object to the bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    var choiceId = choice.id;\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    bucket.choices.push(feedbackObject);\n                }\n            }\n\n            // add the feedback bucket\n            feedback.push(bucket);\n        }\n    }\n\n    /**\n     * Create a feedback object\n     * @param choiceId the choice id\n     * @param feedback the feedback\n     * @param isCorrect whether the choice is correct\n     * @param position (optional) the position\n     * @param incorrectPositionFeedback (optional) the feedback for when the\n     * choice is in the correct but wrong position\n     * @returns the feedback object\n     */\n    createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n        var feedbackObject = {};\n        feedbackObject.choiceId = choiceId;\n        feedbackObject.feedback = feedback;\n        feedbackObject.isCorrect = isCorrect;\n        feedbackObject.position = position;\n        feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n        return feedbackObject;\n    }\n\n    /**\n     * Remove a choice from the feedback\n     * @param choiceId the choice id to remove\n     */\n    removeChoiceFromFeedback(choiceId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through each bucket feedback and remove the choice from each\n             * bucket feedback object\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    var choices = bucketFeedback.choices;\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n                            if (choiceId === choice.choiceId) {\n                                // we have found the choice we want to remove\n\n                                // remove the choice feedback object\n                                choices.splice(c, 1);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a bucket from the feedback\n     * @param bucketId the bucket id to remove\n     */\n    removeBucketFromFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // loop through all the bucket feedback objects\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    if (bucketId === bucketFeedback.bucketId) {\n                        // we have found the bucket feedback object we want to remove\n\n                        // remove the bucket feedback object\n                        feedback.splice(f, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nMatchController.$inject = [\n    '$rootScope',\n    '$scope',\n    'MatchService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default MatchController;\n"]}