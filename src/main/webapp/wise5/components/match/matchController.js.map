{"version":3,"sources":["matchController.es6"],"names":["MatchController","$q","$rootScope","$scope","dragulaService","ConfigService","MatchService","NodeService","ProjectService","StudentDataService","UtilService","$mdMedia","idToOrder","autoScroll","require","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","isShowPreviousWork","isSubmit","choices","buckets","numberOfSubmits","isCorrect","bucketWidth","choiceColumns","horizontal","choiceStyle","saveMessage","text","time","latestAnnotations","currentNode","getCurrentNode","id","originalComponentContent","mode","workgroupId","teacherWorkgroupId","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","initializeChoices","initializeBuckets","componentState","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","calculateDisabled","registerComponentController","dragId","dropEvent","$on","e","el","container","source","matchController","studentDataChanged","options","moves","handle","sibling","drake","find","on","className","replace","scroll","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","angular","event","args","incrementNumberOfSubmits","saveFailed","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","md","mdScreen","studentData","componentStateBuckets","componentStateNumberOfSubmits","bucketIds","map","b","choiceIds","c","i","l","length","componentStateBucketId","indexOf","currentBucket","currentChoices","items","x","len","currentChoice","currentChoiceId","currentChoiceLocation","bucket","getBucketById","updatedChoice","getChoiceById","push","splice","choicesBucket","checkAnswer","processLatestSubmit","onload","componentStates","getComponentStatesByNodeIdAndComponentId","numStates","latestSubmitState","latestBucketIds","latestChoiceIds","excludeIds","latestSubmitStateBuckets","submitBucket","submitBucketId","latestBucket","submitChoiceIds","latestBucketChoiceIds","submitChoiceId","latestBucketChoiceId","latestState","Math","round","n","originBucket","value","choicesLabel","type","getChoices","choice","getBuckets","bucketsJSONString","toJson","copyOfBuckets","fromJson","isLockAfterSubmit","ids","bucketId","item","position","choiceId","feedbackObject","getFeedbackObject","feedback","feedbackPosition","feedbackIsCorrect","ordered","isIncorrectPosition","incorrectPositionFeedback","f","bucketFeedback","tempBucketId","choiceFeedback","tempChoiceId","getComponentId","createNewComponentState","getCopyOfBuckets","createComponentStateAdditionalProcessing","lockAfterSubmit","isSubmitted","isWorkSubmitted","show","result","prompt","showPreviousWorkPrompt","getLatestComponentStateByNodeIdAndComponentId","importWorkComponentState","populatedComponentState","populateComponentState","authoringViewNodeChanged","authoringComponentContentJSONString","replaceComponent","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","addChoiceToFeedback","newBucket","addBucketToFeedback","index","answer","confirm","deletedChoice","removeChoiceFromFeedback","deletedBucket","removeBucketFromFeedback","tempChoice","tempBucket","feedbackText","createFeedbackObject","message","exitListener","$broadcast","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n    constructor($q,\n                $rootScope,\n                $scope,\n                dragulaService,\n                ConfigService,\n                MatchService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService,\n                $mdMedia) {\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.dragulaService = dragulaService;\n        this.ConfigService = ConfigService;\n        this.MatchService = MatchService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$mdMedia = $mdMedia;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.autoScroll = require('dom-autoscroller');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // the choices\n        this.choices = [];\n\n        // the buckets\n        this.buckets = [];\n\n        // the number of times the student has submitted\n        this.numberOfSubmits = 0;\n\n        // whether the student has correctly placed the choices\n        this.isCorrect = null;\n\n        // the flex (%) width for displaying the buckets\n        this.bucketWidth = 100;\n\n        // the number of columns for displaying the choices\n        this.choiceColumns = 1;\n\n        // whether to orient the choices and buckets side-by-side\n        this.horizontal = false;\n\n        // css style for the choice items\n        this.choiceStyle = '';\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n            this.horizontal = this.componentContent.horizontal;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * initialize the choices and buckets with the values from the\n                     * component content\n                     */\n                    this.initializeChoices();\n                    this.initializeBuckets();\n                }.bind(this), true);\n            }\n\n            /*\n             * initialize the choices and buckets with the values from the\n             * component content\n             */\n            this.initializeChoices();\n            this.initializeBuckets();\n\n            // get the component state from the scope\n            var componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        let dragId = 'match_' + this.componentId;\n        // handle choice drop events\n        let dropEvent = dragId + '.drop-model';\n        this.$scope.$on(dropEvent, (e, el, container, source) => {\n            // choice item has been dropped in new location, so run studentDataChanged function\n            this.$scope.matchController.studentDataChanged();\n        });\n\n        // drag and drop options\n        this.dragulaService.options(this.$scope, dragId, {\n            moves: (el, source, handle, sibling) => {\n                return !this.$scope.matchController.isDisabled;\n            }\n        });\n\n        // provide visual indicator when choice is dragged over a new bucket\n        let drake = dragulaService.find(this.$scope, dragId).drake;\n        drake.on('over', (el, container, source) => {\n            if (source !== container) {\n                container.className += ' match-bucket__contents--over';\n            }\n        }).on('out', (el, container, source) => {\n            if (source !== container) {\n                container.className = container.className.replace('match-bucket__contents--over', '');;\n            }\n        });\n\n        // support scroll while dragging\n        let scroll = this.autoScroll(\n            [document.querySelector('#content')], {\n            margin: 30,\n            pixels: 50,\n            scrollWhenOutside: true,\n            autoScroll: function() {\n                // Only scroll when the pointer is down, and there is a child being dragged\n                return this.down && drake.dragging;\n            }\n        });\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.matchController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.matchController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.matchController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n                this.incrementNumberOfSubmits();\n\n                // set saveFailed to true; will be set to false on save success response from server\n                this.saveFailed = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // do nothing\n        }));\n\n        this.$scope.$watch(function() { return $mdMedia('gt-sm'); }, function(md) {\n            $scope.mdScreen = md;\n        });\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n        if (componentState != null) {\n\n            // get the student data from the component state\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the buckets and number of submits\n                let componentStateBuckets = studentData.buckets;\n                let componentStateNumberOfSubmits = studentData.numberOfSubmits;\n\n                // set the buckets\n                if (componentStateBuckets != null) {\n                    let bucketIds = this.buckets.map(b => { return b.id; });\n                    let choiceIds = this.choices.map(c => { return c.id; });\n\n                    for (let i = 0, l = componentStateBuckets.length; i < l; i++) {\n                        let componentStateBucketId = componentStateBuckets[i].id;\n                        if (componentStateBucketId !== 0) {\n                            // componentState bucket is a valid bucket, so process choices\n                            if (bucketIds.indexOf(componentStateBucketId) > -1) {\n                                let currentBucket = componentStateBuckets[i];\n                                let currentChoices = currentBucket.items;\n\n                                for (let x = 0, len = currentChoices.length; x < len; x++) {\n                                    let currentChoice = currentChoices[x];\n                                    let currentChoiceId = currentChoice.id;\n                                    let currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n                                    if (currentChoiceLocation > -1) {\n                                        // choice is valid and used by student in a valid bucket, so add it to that bucket\n                                        let bucket = this.getBucketById(componentStateBucketId);\n                                        // content for choice with this id may have change, so get updated content\n                                        let updatedChoice = this.getChoiceById(currentChoiceId);\n                                        bucket.items.push(updatedChoice);\n                                        choiceIds.splice(currentChoiceLocation, 1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // add unused choices to default choices bucket\n                    let choicesBucket = this.getBucketById(0);\n                    choicesBucket.items = [];\n                    for (let i = 0, l = choiceIds.length; i < l; i++) {\n                        choicesBucket.items.push(this.getChoiceById(choiceIds[i]));\n                    }\n                }\n\n                // set the number of submits\n                if (componentStateNumberOfSubmits) {\n                    this.numberOfSubmits = componentStateNumberOfSubmits;\n                }\n\n                if (this.numberOfSubmits > 0) {\n                    componentState.isSubmit ? this.checkAnswer() : this.processLatestSubmit(true);\n                } else {\n                    this.processLatestSubmit(true);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the latest submitted componentState and check answer for choices that haven't changed since\n     * @param onload boolean whether this function is being executed on the initial component load or not\n     */\n    processLatestSubmit(onload) {\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n        let numStates = componentStates.length\n        let latestSubmitState = null;\n\n        for (let l = numStates-1; l > -1; l--) {\n            let componentState = componentStates[l];\n            if (componentState.isSubmit) {\n                latestSubmitState = componentState;\n                break;\n            }\n        }\n\n        if (latestSubmitState && latestSubmitState.studentData) {\n            let latestBucketIds = this.buckets.map(b => { return b.id; });\n            let latestChoiceIds = this.choices.map(c => { return c.id; });\n            let excludeIds = [];\n            let latestSubmitStateBuckets = latestSubmitState.studentData.buckets;\n\n            for (let b = 0, l = latestSubmitStateBuckets.length; b < l; b++) {\n                let submitBucket = latestSubmitStateBuckets[b];\n                let submitBucketId = submitBucket.id;\n\n                if (latestBucketIds.indexOf(submitBucketId) > -1) {\n                    let latestBucket = this.getBucketById(submitBucketId);\n                    if (latestBucket) {\n                        let submitChoiceIds = submitBucket.items.map(c => { return c.id; });\n                        let latestBucketChoiceIds = latestBucket.items.map(c => { return c.id; });\n                        for (let c = 0, len = submitChoiceIds.length; c < len; c++) {\n                            let submitChoiceId = submitChoiceIds[c];\n                            let latestBucketChoiceId = latestBucketChoiceIds[c];\n                            if (submitChoiceId !== latestBucketChoiceId) {\n                                excludeIds.push(submitChoiceId);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (excludeIds.length) {\n                // state has changed since last submit, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n            } else {\n                // state has not changed since last submit, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n            }\n            this.checkAnswer(excludeIds);\n        } else {\n            this.isSubmitDirty = true;\n            this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        }\n\n        if (onload && numStates) {\n            let latestState = componentStates[numStates-1];\n\n            if (latestState) {\n                let serverSaveTime = latestState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n                if (latestState.isSubmit) {\n                    // latest state is a submission, so set isSubmitDirty to false and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                    // set save message\n                    this.setSaveMessage('Last submitted', clientSaveTime);\n                } else {\n                    // latest state is not a submission, so set isSubmitDirty to true and notify node\n                    this.isSubmitDirty = true;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                    // set save message\n                    this.setSaveMessage('Last saved', clientSaveTime);\n                }\n            }\n        }\n    };\n\n    /**\n     * Initialize the available choices from the component content\n     */\n    initializeChoices() {\n\n        this.choices = [];\n\n        if(this.componentContent != null && this.componentContent.choices != null) {\n            this.choices = this.componentContent.choices;\n        }\n    };\n\n    /**\n     * Get the choices\n     */\n    getChoices() {\n        return this.choices;\n    };\n\n    /**\n     * Initialize the available buckets from the component content\n     */\n    initializeBuckets() {\n\n        this.buckets = [];\n\n        if (this.componentContent != null && this.componentContent.buckets != null) {\n\n            // get the buckets from the component content\n            let buckets = this.componentContent.buckets;\n\n            if (this.horizontal) {\n                this.bucketWidth = 100;\n                this.choiceColumns = 1;\n            } else {\n                if (this.componentContent.bucketWidth) {\n                    this.bucketWidth = this.componentContent.bucketWidth;\n                    this.choiceColumns = Math.round(100/this.componentContent.bucketWidth);\n                } else {\n                    let n = buckets.length;\n                    if (n % 3 === 0 || n > 4) {\n                        this.bucketWidth = Math.round(100/3);\n                        this.choiceColumns = 3;\n                    } else if (n % 2 === 0) {\n                        this.bucketWidth = 100/2;\n                        this.choiceColumns = 2;\n                    }\n                }\n\n                this.choiceStyle = {\n                    '-moz-column-count': this.choiceColumns,\n                    '-webkit-column-count': this.choiceColumns,\n                    'column-count':this.choiceColumns\n                };\n            }\n\n            /*\n             * create a bucket that will contain the choices when\n             * the student first starts working\n             */\n            let originBucket = {};\n            originBucket.id = 0;\n            originBucket.value = this.componentContent.choicesLabel ? this.componentContent.choicesLabel : 'Choices';\n            originBucket.type = 'bucket';\n            originBucket.items = [];\n\n            let choices = this.getChoices();\n\n            // add all the choices to the origin bucket\n            for (let c = 0; c < choices.length; c++) {\n                let choice = choices[c];\n\n                originBucket.items.push(choice);\n            }\n\n            // add the origin bucket to our array of buckets\n            this.buckets.push(originBucket);\n\n            // add all the other buckets to our array of buckets\n            for (let b = 0; b < buckets.length; b++) {\n                let bucket = buckets[b];\n\n                bucket.items = [];\n\n                this.buckets.push(bucket);\n            }\n        }\n    };\n\n    /**\n     * Get the buckets\n     */\n    getBuckets() {\n        return this.buckets;\n    };\n\n    /**\n     * Create a copy of the buckets for cases when we want to make\n     * sure we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     * @return a copy of the buckets\n     */\n    getCopyOfBuckets() {\n        var buckets = this.getBuckets();\n\n        // get a JSON string representation of the buckets\n        var bucketsJSONString = angular.toJson(buckets);\n\n        // turn the JSON string back into a JSON array\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n        return copyOfBuckets;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // TODO: add confirmation dialog if lock after submit is enabled on this component\n        this.isSubmit = true;\n        this.incrementNumberOfSubmits();\n\n        // set saveFailed to true; will be set to false on save success response from server\n        this.saveFailed = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n    * Called when either the component or node is submitted\n    */\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // check if the student answered correctly\n        this.processLatestSubmit();\n    }\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfSubmits() {\n        if (!this.saveFailed) {\n            if (this.numberOfSubmits == null) {\n                this.numberOfSubmits = 0;\n            }\n\n            this.numberOfSubmits++;\n        }\n    };\n\n    /**\n     * Check if the student has answered correctly\n     * @param ids array of choice ids to exclude\n     */\n    checkAnswer(ids) {\n        let isCorrect = true;\n\n        // get the buckets\n        let buckets = this.getBuckets();\n        let excludeIds = ids ? ids : [];\n\n        if (buckets != null) {\n\n            // loop through all the buckets\n            for(let b = 0, l = buckets.length; b < l; b++) {\n\n                // get a bucket\n                let bucket = buckets[b];\n\n                if (bucket != null) {\n                    let bucketId = bucket.id;\n                    let items = bucket.items;\n\n                    if (items != null) {\n\n                        // loop through all the items in the bucket\n                        for (let i = 0, len = items.length; i < len; i++) {\n                            let item = items[i];\n                            let position = i + 1;\n\n                            if (item != null) {\n                                let choiceId = item.id;\n\n                                // get the feedback object for the bucket and choice\n                                let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                                if (feedbackObject != null) {\n                                    let feedback = feedbackObject.feedback;\n\n                                    let feedbackPosition = feedbackObject.position;\n                                    let feedbackIsCorrect = feedbackObject.isCorrect;\n\n                                    // set the default feedback if none is authored\n                                    if (feedback) {\n                                        if (feedbackIsCorrect) {\n                                            feedback = 'Correct';\n                                        } else {\n                                            feedback = 'Incorrect';\n                                        }\n                                    }\n\n                                    if (!this.componentContent.ordered || feedbackPosition == null) {\n                                        /*\n                                         * position does not matter and the choice may be\n                                         * in the correct or incorrect bucket\n                                         */\n\n                                        // set the feedback into the item\n                                        item.feedback = feedback;\n\n                                        // set whether the choice is in the correct bucket\n                                        item.isCorrect = feedbackIsCorrect;\n\n                                        /*\n                                         * there is no feedback position in the feeback object so\n                                         * position doesn't matter\n                                         */\n                                        item.isIncorrectPosition = false;\n\n                                        // update whether the student has answered the step correctly\n                                        isCorrect = isCorrect && feedbackIsCorrect;\n                                    } else {\n                                        /*\n                                         * position does matter and the choice is in a correct\n                                         * bucket. we know this because a feedback object will\n                                         * only have a non-null position value if the choice is\n                                         * in the correct bucket. if the feedback object is for\n                                         * a choice that is in an incorrect bucket, the position\n                                         * value will be null.\n                                         */\n\n                                        if (position === feedbackPosition) {\n                                            // the item is in the correct position\n\n                                            // set the feedback into the item\n                                            item.feedback = feedback;\n\n                                            // set whether the choice is in the correct bucket\n                                            item.isCorrect = feedbackIsCorrect;\n\n                                            // the choice is in the correct position\n                                            item.isIncorrectPosition = false;\n\n                                            // update whether the student has answered the step correctly\n                                            isCorrect = isCorrect && feedbackIsCorrect;\n                                        } else {\n                                            // item is in the correct bucket but wrong position\n\n                                            /*\n                                             * get the feedback for when the choice is in the correct\n                                             * bucket but wrong position\n                                             */\n                                            let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n\n                                            // set the default feedback if none is authored\n                                            if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                                                incorrectPositionFeedback = 'Correct bucket but wrong position';\n                                            }\n\n                                            item.feedback = incorrectPositionFeedback;\n\n                                            /*\n                                             * the choice is in the incorrect position so it isn't correct\n                                             */\n                                            item.isCorrect = false;\n\n                                            // the choice is in the incorrect position\n                                            item.isIncorrectPosition = true;\n\n                                            // the student has answered incorrectly\n                                            isCorrect = false;\n                                        }\n                                    }\n                                }\n\n                                if (excludeIds.indexOf(choiceId) > -1) {\n                                    // don't show feedback for choices that should be excluded\n                                    item.feedback = null;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * set the isCorrect value into the controller\n         * so we can read it later\n         */\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the feedback object for the combination of bucket and choice\n     * @param bucketId the bucket id\n     * @param choiceId the choice id\n     * @return the feedback object for the combination of bucket and choice\n     */\n    getFeedbackObject(bucketId, choiceId) {\n        var feedbackObject = null;\n\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the feedback\n            var feedback = componentContent.feedback;\n\n            if (feedback != null) {\n\n                /*\n                 * loop through the feedback. each element in the feedback represents\n                 * a bucket\n                 */\n                for (var f = 0; f < feedback.length; f++) {\n\n                    // get a bucket feedback object\n                    var bucketFeedback = feedback[f];\n\n                    if (bucketFeedback != null) {\n\n                        // get the bucket id\n                        var tempBucketId = bucketFeedback.bucketId;\n\n                        if (bucketId === tempBucketId) {\n                            // we have found the bucket we are looking for\n\n                            var choices = bucketFeedback.choices;\n\n                            if (choices != null) {\n\n                                // loop through all the choice feedback\n                                for (var c = 0; c < choices.length; c++) {\n                                    var choiceFeedback = choices[c];\n\n                                    if (choiceFeedback != null) {\n                                        var tempChoiceId = choiceFeedback.choiceId;\n\n                                        if (choiceId === tempChoiceId) {\n                                            // we have found the choice we are looking for\n                                            feedbackObject = choiceFeedback;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                if (feedbackObject != null) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return feedbackObject;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n\n            this.processLatestSubmit();\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        let componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            let studentData = {};\n\n            // set the buckets into the student data\n            studentData.buckets = this.getCopyOfBuckets();\n\n            // set the number of submits into the student data\n            studentData.numberOfSubmits = this.numberOfSubmits;\n\n            if (this.isCorrect != null) {\n                // set whether the student was correct\n                studentData.isCorrect = this.isCorrect;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            //set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        let deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a choice\n     */\n    authoringAddChoice() {\n\n        // create a new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.value = '';\n        newChoice.type = 'choice';\n\n        // add the choice to the array of choices\n        this.authoringComponentContent.choices.push(newChoice);\n\n        // add the choice to the feedback\n        this.addChoiceToFeedback(newChoice.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a bucket\n     */\n    authoringAddBucket() {\n\n        // create a new bucket\n        var newBucket = {};\n        newBucket.id = this.UtilService.generateKey(10);\n        newBucket.value = '';\n        newBucket.type = 'bucket';\n\n        // add the bucket to the array of buckets\n        this.authoringComponentContent.buckets.push(newBucket);\n\n        // add the bucket to the feedback\n        this.addBucketToFeedback(newBucket.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice\n     * @param index the index of the choice in the choice array\n     */\n    authoringDeleteChoice(index) {\n\n        // confirm with the user that they want to delete the choice\n        var answer = confirm('Are you sure you want to delete this choice?');\n\n        if (answer) {\n\n            // remove the choice from the array\n            var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n            if (deletedChoice != null && deletedChoice.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedChoice = deletedChoice[0];\n\n                // get the choice id\n                var choiceId = deletedChoice.id;\n\n                // remove the choice from the feedback\n                this.removeChoiceFromFeedback(choiceId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete a bucket\n     * @param index the index of the bucket in the bucket array\n     */\n    authoringDeleteBucket(index) {\n\n        // confirm with the user tha tthey want to delete the bucket\n        var answer = confirm('Are you sure you want to delete this bucket?');\n\n        if (answer) {\n\n            // remove the bucket from the array\n            var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n            if (deletedBucket != null && deletedBucket.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedBucket = deletedBucket[0];\n\n                // get the bucket id\n                var bucketId = deletedBucket.id;\n\n                // remove the bucket from the feedback\n                this.removeBucketFromFeedback(bucketId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the choice by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice object from the authoring component content\n     */\n    getChoiceById(id) {\n\n        var choice = null;\n\n        // get the choices\n        var choices = this.componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            // get a choice\n            var tempChoice = choices[c];\n\n            if (tempChoice != null) {\n                if (id === tempChoice.id) {\n                    // we have found the choice we want\n                    choice = tempChoice;\n                    break;\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the bucket by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket object from the authoring component content\n     */\n    getBucketById(id) {\n\n        var bucket = null;\n\n        // get the buckets\n        var buckets = this.buckets ? this.buckets : this.authoringComponentContent.buckets;\n\n        // loop through the buckets\n        for (var b = 0; b < buckets.length; b++) {\n            var tempBucket = buckets[b];\n\n            if (tempBucket != null) {\n                if (id === tempBucket.id) {\n                    // we have found the bucket we want\n                    bucket = tempBucket;\n                    break;\n                }\n            }\n        }\n\n        return bucket;\n    }\n\n    /**\n     * Get the choice value by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice value from the authoring component content\n     */\n    getChoiceValueById(id) {\n\n        var value = null;\n\n        // get the choice\n        var choice = this.getChoiceById(id);\n\n        if (choice != null) {\n            // get the value\n            value = choice.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the bucket value by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket value from the authoring component content\n     */\n    getBucketValueById(id) {\n\n        var value = null;\n\n        // get the bucket\n        var bucket = this.getBucketById(id);\n\n        if (bucket != null) {\n            // get the value\n            value = bucket.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Add a choice to the feedback\n     * @param choiceId the choice id\n     */\n    addChoiceToFeedback(choiceId) {\n\n        // get the feedback array\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through all the elements in the feedback. each element\n             * represents a bucket.\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                // get a bucket\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    // get the choices in the bucket\n                    var choices = bucketFeedback.choices;\n\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    choices.push(feedbackObject);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a bucket to the feedback\n     * @param bucketId the bucket id\n     */\n    addBucketToFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // create a new bucket feedback object\n            var bucket = {};\n            bucket.bucketId = bucketId;\n            bucket.choices = [];\n\n            // get all the choices\n            var choices = this.authoringComponentContent.choices;\n\n            // loop through all the choices and add a choice feedback object to the bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    var choiceId = choice.id;\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    bucket.choices.push(feedbackObject);\n                }\n            }\n\n            // add the feedback bucket\n            feedback.push(bucket);\n        }\n    }\n\n    /**\n     * Create a feedback object\n     * @param choiceId the choice id\n     * @param feedback the feedback\n     * @param isCorrect whether the choice is correct\n     * @param position (optional) the position\n     * @param incorrectPositionFeedback (optional) the feedback for when the\n     * choice is in the correct but wrong position\n     * @returns the feedback object\n     */\n    createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n        var feedbackObject = {};\n        feedbackObject.choiceId = choiceId;\n        feedbackObject.feedback = feedback;\n        feedbackObject.isCorrect = isCorrect;\n        feedbackObject.position = position;\n        feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n        return feedbackObject;\n    }\n\n    /**\n     * Remove a choice from the feedback\n     * @param choiceId the choice id to remove\n     */\n    removeChoiceFromFeedback(choiceId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through each bucket feedback and remove the choice from each\n             * bucket feedback object\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    var choices = bucketFeedback.choices;\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n                            if (choiceId === choice.choiceId) {\n                                // we have found the choice we want to remove\n\n                                // remove the choice feedback object\n                                choices.splice(c, 1);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a bucket from the feedback\n     * @param bucketId the bucket id to remove\n     */\n    removeBucketFromFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // loop through all the bucket feedback objects\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    if (bucketId === bucketFeedback.bucketId) {\n                        // we have found the bucket feedback object we want to remove\n\n                        // remove the bucket feedback object\n                        feedback.splice(f, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nMatchController.$inject = [\n    '$q',\n    '$rootScope',\n    '$scope',\n    'dragulaService',\n    'ConfigService',\n    'MatchService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService',\n    '$mdMedia'\n];\n\nexport default MatchController;\n"]}