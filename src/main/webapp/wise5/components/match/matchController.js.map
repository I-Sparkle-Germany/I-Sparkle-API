{"version":3,"sources":["matchController.es6"],"names":[],"mappings":"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","file":"matchController.js","sourcesContent":["\nclass MatchController {\n    constructor($rootScope,\n                $scope,\n                MatchService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.MatchService = MatchService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // the choices\n        this.choices = [];\n\n        // the buckets\n        this.buckets = [];\n\n        // the number of times the student has submitted\n        this.numberOfSubmits = 0;\n\n        // whether the student has correctly placed the choices\n        this.isCorrect = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * initialize the choices and buckets with the values from the\n                     * component content\n                     */\n                    this.initializeChoices();\n                    this.initializeBuckets();\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                /*\n                 * initialize the choices and buckets with the values from the\n                 * component content\n                 */\n                this.initializeChoices();\n                this.initializeBuckets();\n\n                // get the component state for the show previous work\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                /*\n                 * initialize the choices and buckets with the values from the\n                 * component content\n                 */\n                this.initializeChoices();\n                this.initializeBuckets();\n\n                // get the component state from the scope\n                var componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        this.$scope.options = {\n            accept: function(sourceNode, destNodes, destIndex) {\n                var result = false;\n\n                // get the value of the source node\n                var data = sourceNode.$modelValue;\n\n                // get the type of the nodes in the destination\n                var destType = destNodes.$element.attr('data-type');\n\n                if (data != null) {\n\n                    // check if the types match\n                    if (data.type === destType) {\n                        // the types match so we will accept it\n                        result = true\n                    }\n                }\n\n                return result;\n            }.bind(this),\n            dropped: function(event) {\n                var sourceNode = event.source.nodeScope;\n                var destNodes = event.dest.nodesScope;\n\n                // tell the controller that the student data has changed\n                this.$scope.matchController.studentDataChanged();\n            }.bind(this)\n        };\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.matchController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.matchController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.matchController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n\n                    // check if the student answered correctly\n                    this.checkAnswer();\n                    this.numberOfSubmits++;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n            // do nothing\n        }));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData\n\n            if (studentData != null) {\n\n                // get the buckets and number of submits\n                var componentStateBuckets = studentData.buckets;\n                var componentStateNumberOfSubmits = studentData.numberOfSubmits;\n\n                // set the buckets\n                if (componentStateBuckets != null) {\n                    this.buckets = componentStateBuckets;\n                }\n\n                // set the number of submits\n                if (componentStateNumberOfSubmits != null) {\n                    this.numberOfSubmits = componentStateNumberOfSubmits;\n                }\n            }\n        }\n    };\n\n    /**\n     * Initialize the available choices from the component content\n     */\n    initializeChoices() {\n\n        this.choices = [];\n\n        if(this.componentContent != null && this.componentContent.choices != null) {\n            this.choices = this.componentContent.choices;\n        }\n    };\n\n    /**\n     * Get the choices\n     */\n    getChoices() {\n        return this.choices;\n    };\n\n    /**\n     * Initialize the available buckets from the component content\n     */\n    initializeBuckets() {\n\n        this.buckets = [];\n\n        if(this.componentContent != null && this.componentContent.buckets != null) {\n\n            // get the buckets from the component content\n            var buckets = this.componentContent.buckets;\n\n            /*\n             * create a bucket that will contain the choices when\n             * the student first starts working\n             */\n            var originBucket = {};\n            originBucket.id = 0;\n            originBucket.value = 'Choices';\n            originBucket.type = 'bucket';\n            originBucket.items = [];\n\n            var choices = this.getChoices();\n\n            // add all the choices to the origin bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                originBucket.items.push(choice);\n            }\n\n            // add the origin bucket to our array of buckets\n            this.buckets.push(originBucket);\n\n            // add all the other buckets to our array of buckets\n            for (var b = 0; b < buckets.length; b++) {\n                var bucket = buckets[b];\n\n                bucket.items = [];\n\n                this.buckets.push(bucket);\n            }\n        }\n    };\n\n    /**\n     * Get the buckets\n     */\n    getBuckets() {\n        return this.buckets;\n    };\n\n    /**\n     * Create a copy of the buckets for cases when we want to make\n     * sure we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     * @return a copy of the buckets\n     */\n    getCopyOfBuckets() {\n        var buckets = this.getBuckets();\n\n        // get a JSON string representation of the buckets\n        var bucketsJSONString = angular.toJson(buckets);\n\n        // turn the JSON string back into a JSON array\n        var copyOfBuckets = angular.fromJson(bucketsJSONString);\n\n        return copyOfBuckets;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // check if the student answered correctly\n        this.checkAnswer();\n        this.numberOfSubmits++;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Check if the student has answered correctly\n     */\n    checkAnswer() {\n        var isCorrect = true;\n\n        // get the buckets\n        var buckets = this.getBuckets();\n\n        if (buckets != null) {\n\n            // loop through all the buckets\n            for(var b = 0; b < buckets.length; b++) {\n\n                // get a bucket\n                var bucket = buckets[b];\n\n                if (bucket != null) {\n                    var bucketId = bucket.id;\n                    var items = bucket.items;\n\n                    if (items != null) {\n\n                        // loop through all the items in the bucket\n                        for (var i = 0; i < items.length; i++) {\n                            var item = items[i];\n                            var position = i + 1;\n\n                            if (item != null) {\n                                var choiceId = item.id;\n\n                                // get the feedback object for the bucket and choice\n                                var feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n\n                                if (feedbackObject != null) {\n                                    var feedback = feedbackObject.feedback;\n\n                                    var feedbackPosition = feedbackObject.position;\n                                    var feedbackIsCorrect = feedbackObject.isCorrect;\n\n                                    // set the default feedback if none is authored\n                                    if (feedback == null || feedback == '') {\n                                        if (feedbackIsCorrect) {\n                                            feedback = 'Correct';\n                                        } else {\n                                            feedback = 'Incorrect';\n                                        }\n                                    }\n\n                                    if (!this.componentContent.ordered || feedbackPosition == null) {\n                                        /*\n                                         * position does not matter and the choice may be\n                                         * in the correct or incorrect bucket\n                                         */\n\n                                        // set the feedback into the item\n                                        item.feedback = feedback;\n\n                                        // set whether the choice is in the correct bucket\n                                        item.isCorrect = feedbackIsCorrect;\n\n                                        /*\n                                         * there is no feedback position in the feeback object so\n                                         * position doesn't matter\n                                         */\n                                        item.isIncorrectPosition = false;\n\n                                        // update whether the student has answered the step correctly\n                                        isCorrect = isCorrect && feedbackIsCorrect;\n                                    } else {\n                                        /*\n                                         * position does matter and the choice is in a correct\n                                         * bucket. we know this because a feedback object will\n                                         * only have a non-null position value if the choice is\n                                         * in the correct bucket. if the feedback object is for\n                                         * a choice that is in an incorrect bucket, the position\n                                         * value will be null.\n                                         */\n\n                                        if (position === feedbackPosition) {\n                                            // the item is in the correct position\n\n                                            // set the feedback into the item\n                                            item.feedback = feedback;\n\n                                            // set whether the choice is in the correct bucket\n                                            item.isCorrect = feedbackIsCorrect;\n\n                                            // the choice is in the correct position\n                                            item.isIncorrectPosition = false;\n\n                                            // update whether the student has answered the step correctly\n                                            isCorrect = isCorrect && feedbackIsCorrect;\n                                        } else {\n                                            // item is in the correct bucket but wrong position\n\n                                            /*\n                                             * get the feedback for when the choice is in the correct\n                                             * bucket but wrong position\n                                             */\n                                            var incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n\n                                            // set the default feedback if none is authored\n                                            if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                                                incorrectPositionFeedback = 'Correct bucket but wrong position';\n                                            }\n\n                                            item.feedback = incorrectPositionFeedback;\n\n                                            /*\n                                             * the choice is in the incorrect position so it isn't correct\n                                             */\n                                            item.isCorrect = false;\n\n                                            // the choice is in the incorrect position\n                                            item.isIncorrectPosition = true;\n\n                                            // the student has answered incorrectly\n                                            isCorrect = false;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * set the isCorrect value into the controller\n         * so we can read it later\n         */\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the feedback object for the combination of bucket and choice\n     * @param bucketId the bucket id\n     * @param choiceId the choice id\n     * @return the feedback object for the combination of bucket and choice\n     */\n    getFeedbackObject(bucketId, choiceId) {\n        var feedbackObject = null;\n\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the feedback\n            var feedback = componentContent.feedback;\n\n            if (feedback != null) {\n\n                /*\n                 * loop through the feedback. each element in the feedback represents\n                 * a bucket\n                 */\n                for (var f = 0; f < feedback.length; f++) {\n\n                    // get a bucket feedback object\n                    var bucketFeedback = feedback[f];\n\n                    if (bucketFeedback != null) {\n\n                        // get the bucket id\n                        var tempBucketId = bucketFeedback.bucketId;\n\n                        if (bucketId === tempBucketId) {\n                            // we have found the bucket we are looking for\n\n                            var choices = bucketFeedback.choices;\n\n                            if (choices != null) {\n\n                                // loop through all the choice feedback\n                                for (var c = 0; c < choices.length; c++) {\n                                    var choiceFeedback = choices[c];\n\n                                    if (choiceFeedback != null) {\n                                        var tempChoiceId = choiceFeedback.choiceId;\n\n                                        if (choiceId === tempChoiceId) {\n                                            // we have found the choice we are looking for\n                                            feedbackObject = choiceFeedback;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                if (feedbackObject != null) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return feedbackObject;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the buckets into the student data\n            studentData.buckets = this.getCopyOfBuckets();\n\n            // set the number of submits into the student data\n            studentData.numberOfSubmits = this.numberOfSubmits;\n\n            if (this.isCorrect != null) {\n                // set whether the student was correct\n                studentData.isCorrect = this.isCorrect;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            //set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSaveButton field in the component content\n            if (this.componentContent.showSaveButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MatchService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Add a choice\n     */\n    authoringAddChoice() {\n\n        // create a new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.value = '';\n        newChoice.type = 'choice';\n\n        // add the choice to the array of choices\n        this.authoringComponentContent.choices.push(newChoice);\n\n        // add the choice to the feedback\n        this.addChoiceToFeedback(newChoice.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a bucket\n     */\n    authoringAddBucket() {\n\n        // create a new bucket\n        var newBucket = {};\n        newBucket.id = this.UtilService.generateKey(10);\n        newBucket.value = '';\n        newBucket.type = 'bucket';\n\n        // add the bucket to the array of buckets\n        this.authoringComponentContent.buckets.push(newBucket);\n\n        // add the bucket to the feedback\n        this.addBucketToFeedback(newBucket.id);\n\n        // save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice\n     * @param index the index of the choice in the choice array\n     */\n    authoringDeleteChoice(index) {\n\n        // confirm with the user that they want to delete the choice\n        var answer = confirm('Are you sure you want to delete this choice?');\n\n        if (answer) {\n\n            // remove the choice from the array\n            var deletedChoice = this.authoringComponentContent.choices.splice(index, 1);\n\n            if (deletedChoice != null && deletedChoice.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedChoice = deletedChoice[0];\n\n                // get the choice id\n                var choiceId = deletedChoice.id;\n\n                // remove the choice from the feedback\n                this.removeChoiceFromFeedback(choiceId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Delete a bucket\n     * @param index the index of the bucket in the bucket array\n     */\n    authoringDeleteBucket(index) {\n\n        // confirm with the user tha tthey want to delete the bucket\n        var answer = confirm('Are you sure you want to delete this bucket?');\n\n        if (answer) {\n\n            // remove the bucket from the array\n            var deletedBucket = this.authoringComponentContent.buckets.splice(index, 1);\n\n            if (deletedBucket != null && deletedBucket.length > 0) {\n\n                // splice returns an array so we need to get the element out of it\n                deletedBucket = deletedBucket[0];\n\n                // get the bucket id\n                var bucketId = deletedBucket.id;\n\n                // remove the bucket from the feedback\n                this.removeBucketFromFeedback(bucketId);\n            }\n\n            // save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the choice by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice object from the authoring component content\n     */\n    getChoiceById(id) {\n\n        var choice = null;\n\n        // get the choices\n        var choices = this.authoringComponentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            // get a choice\n            var tempChoice = choices[c];\n\n            if (tempChoice != null) {\n                if (id === tempChoice.id) {\n                    // we have found the choice we want\n                    choice = tempChoice;\n                    break;\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the bucket by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket object from the authoring component content\n     */\n    getBucketById(id) {\n\n        var bucket = null;\n\n        // get the buckets\n        var buckets = this.authoringComponentContent.buckets;\n\n        // loop through the buckets\n        for (var b = 0; b < buckets.length; b++) {\n            var tempBucket = buckets[b];\n\n            if (tempBucket != null) {\n                if (id === tempBucket.id) {\n                    // we have found teh bucket we want\n                    bucket = tempBucket;\n                    break;\n                }\n            }\n        }\n\n        return bucket;\n    }\n\n    /**\n     * Get the choice value by id from the authoring component content\n     * @param id the choice id\n     * @returns the choice value from the authoring component content\n     */\n    getChoiceValueById(id) {\n\n        var value = null;\n\n        // get the choice\n        var choice = this.getChoiceById(id);\n\n        if (choice != null) {\n            // get the value\n            value = choice.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the bucket value by id from the authoring component content\n     * @param id the bucket id\n     * @returns the bucket value from the authoring component content\n     */\n    getBucketValueById(id) {\n\n        var value = null;\n\n        // get the bucket\n        var bucket = this.getBucketById(id);\n\n        if (bucket != null) {\n            // get the value\n            value = bucket.value;\n        }\n\n        return value;\n    }\n\n    /**\n     * Add a choice to the feedback\n     * @param choiceId the choice id\n     */\n    addChoiceToFeedback(choiceId) {\n\n        // get the feedback array\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through all the elements in the feedback. each element\n             * represents a bucket.\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                // get a bucket\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    // get the choices in the bucket\n                    var choices = bucketFeedback.choices;\n\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    choices.push(feedbackObject);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a bucket to the feedback\n     * @param bucketId the bucket id\n     */\n    addBucketToFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // create a new bucket feedback object\n            var bucket = {};\n            bucket.bucketId = bucketId;\n            bucket.choices = [];\n\n            // get all the choices\n            var choices = this.authoringComponentContent.choices;\n\n            // loop through all the choices and add a choice feedback object to the bucket\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    var choiceId = choice.id;\n                    var feedbackText = '';\n                    var isCorrect = false;\n\n                    // create a feedback object\n                    var feedbackObject = this.createFeedbackObject(choiceId, feedbackText, isCorrect);\n\n                    // add the feedback object\n                    bucket.choices.push(feedbackObject);\n                }\n            }\n\n            // add the feedback bucket\n            feedback.push(bucket);\n        }\n    }\n\n    /**\n     * Create a feedback object\n     * @param choiceId the choice id\n     * @param feedback the feedback\n     * @param isCorrect whether the choice is correct\n     * @param position (optional) the position\n     * @param incorrectPositionFeedback (optional) the feedback for when the\n     * choice is in the correct but wrong position\n     * @returns the feedback object\n     */\n    createFeedbackObject(choiceId, feedback, isCorrect, position, incorrectPositionFeedback) {\n\n        var feedbackObject = {};\n        feedbackObject.choiceId = choiceId;\n        feedbackObject.feedback = feedback;\n        feedbackObject.isCorrect = isCorrect;\n        feedbackObject.position = position;\n        feedbackObject.incorrectPositionFeedback = incorrectPositionFeedback;\n\n        return feedbackObject;\n    }\n\n    /**\n     * Remove a choice from the feedback\n     * @param choiceId the choice id to remove\n     */\n    removeChoiceFromFeedback(choiceId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            /*\n             * loop through each bucket feedback and remove the choice from each\n             * bucket feedback object\n             */\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    var choices = bucketFeedback.choices;\n\n                    // loop through all the choices\n                    for (var c = 0; c < choices.length; c++) {\n                        var choice = choices[c];\n\n                        if (choice != null) {\n                            if (choiceId === choice.choiceId) {\n                                // we have found the choice we want to remove\n\n                                // remove the choice feedback object\n                                choices.splice(c, 1);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a bucket from the feedback\n     * @param bucketId the bucket id to remove\n     */\n    removeBucketFromFeedback(bucketId) {\n\n        // get the feedback array. each element in the array represents a bucket.\n        var feedback = this.authoringComponentContent.feedback;\n\n        if (feedback != null) {\n\n            // loop through all the bucket feedback objects\n            for (var f = 0; f < feedback.length; f++) {\n                var bucketFeedback = feedback[f];\n\n                if (bucketFeedback != null) {\n\n                    if (bucketId === bucketFeedback.bucketId) {\n                        // we have found the bucket feedback object we want to remove\n\n                        // remove the bucket feedback object\n                        feedback.splice(f, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // do nothing\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nMatchController.$inject = [\n    '$rootScope',\n    '$scope',\n    'MatchService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MatchController;\n"]}