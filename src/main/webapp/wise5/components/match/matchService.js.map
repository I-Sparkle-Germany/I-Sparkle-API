{"version":3,"sources":["matchService.es6"],"names":["MatchService","$filter","StudentDataService","UtilService","$translate","component","type","choices","buckets","feedback","ordered","componentStates","componentEvents","nodeEvents","node","length","componentState","studentData","isSubmitRequired","isSubmit","showSubmitButton","showSaveButton","componentContent","bucket","items","choice","isCorrect","$inject"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEMA,Y;;;AACJ,wBAAYC,OAAZ,EAAqBC,kBAArB,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,uHAC9CF,OAD8C,EACrCC,kBADqC,EACjBC,WADiB;AAErD;;;;4CAEuB;AACtB,aAAO,KAAKC,UAAL,CAAgB,0BAAhB,CAAP;AACD;;;sCAEiB;AAChB,UAAMC,uIAAN;AACAA,gBAAUC,IAAV,GAAiB,OAAjB;AACAD,gBAAUE,OAAV,GAAoB,EAApB;AACAF,gBAAUG,OAAV,GAAoB,EAApB;AACAH,gBAAUI,QAAV,GAAqB,CAAC,EAAE,YAAY,GAAd,EAAmB,WAAW,EAA9B,EAAD,CAArB;AACAJ,gBAAUK,OAAV,GAAoB,KAApB;AACA,aAAOL,SAAP;AACD;;;gCAEWA,S,EAAWM,e,EAAiBC,e,EAAiBC,U,EAAYC,I,EAAM;AACzE,UAAIH,mBAAmBA,gBAAgBI,MAAhB,GAAyB,CAAhD,EAAmD;AAAA;AAAA;AAAA;;AAAA;AACjD,+BAA2BJ,eAA3B,8HAA4C;AAAA,gBAAnCK,cAAmC;;AAC1C,gBAAMR,UAAUQ,eAAeC,WAAf,CAA2BT,OAA3C;AACA,gBAAIA,WAAWA,QAAQO,MAAR,GAAiB,CAAhC,EAAmC;AACjC,kBAAI,KAAKG,gBAAL,CAAsBJ,IAAtB,EAA4BT,SAA5B,CAAJ,EAA4C;AAC1C,oBAAIW,eAAeG,QAAnB,EAA6B;AAC3B,yBAAO,IAAP;AACD;AACF,eAJD,MAIO;AACL,uBAAO,IAAP;AACD;AACF;AACF;AAZgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalD;AACD,aAAO,KAAP;AACD;;;qCAEgBL,I,EAAMT,S,EAAW;AAChC,aAAOS,KAAKM,gBAAL,IACFf,UAAUe,gBAAV,IAA8B,CAACN,KAAKO,cADzC;AAED;;;iDAE4BL,c,EAAgBM,gB,EAAkB;AAC7D,UAAIN,kBAAkB,IAAtB,EAA4B;AAC1B,YAAMR,UAAUQ,eAAeC,WAAf,CAA2BT,OAA3C;AAD0B;AAAA;AAAA;;AAAA;AAE1B,gCAAmBA,OAAnB,mIAA4B;AAAA,gBAAnBe,MAAmB;;AAC1B,gBAAMC,QAAQD,OAAOC,KAArB;AACA,gBAAIA,SAAS,IAAT,IAAiBA,MAAMT,MAAN,GAAe,CAApC,EAAuC;AACrC,qBAAO,IAAP;AACD;AACF;AAPyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3B;AACD,aAAO,KAAP;AACD;;;qCAEgBV,S,EAAW;AAAA;AAAA;AAAA;;AAAA;AAC1B,8BAAmBA,UAAUI,QAA7B,mIAAuC;AAAA,cAA9Bc,MAA8B;AAAA;AAAA;AAAA;;AAAA;AACrC,kCAAmBA,OAAOhB,OAA1B,mIAAmC;AAAA,kBAA1BkB,MAA0B;;AACjC,kBAAIA,OAAOC,SAAX,EAAsB;AACpB,uBAAO,IAAP;AACD;AACF;AALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMtC;AAPyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ1B,aAAO,KAAP;AACD;;;;;;AAGH1B,aAAa2B,OAAb,GAAuB,CACrB,SADqB,EAErB,oBAFqB,EAGrB,aAHqB,CAAvB;;kBAMe3B,Y","file":"matchService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass MatchService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('match.componentTypeLabel');\n  }\n  \n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Match';\n    component.choices = [];\n    component.buckets = [];\n    component.feedback = [{ 'bucketId': '0', 'choices': [] }];\n    component.ordered = false;\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    if (componentStates && componentStates.length > 0) {\n      for (let componentState of componentStates) {\n        const buckets = componentState.studentData.buckets;\n        if (buckets && buckets.length > 0) {\n          if (this.isSubmitRequired(node, component)) {\n            if (componentState.isSubmit) {\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  isSubmitRequired(node, component) {\n    return node.showSubmitButton ||\n        (component.showSubmitButton && !node.showSaveButton);\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      const buckets = componentState.studentData.buckets;\n      for (let bucket of buckets) {\n        const items = bucket.items;\n        if (items != null && items.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  hasCorrectAnswer(component) {\n    for (let bucket of component.feedback) {\n      for (let choice of bucket.choices) {\n        if (choice.isCorrect) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nMatchService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MatchService;\n"]}