{"version":3,"sources":["matchService.es6"],"names":["MatchService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","choices","buckets","feedback","ordered","componentToCopy","createComponent","length","c","choice","oldChoiceId","newChoiceId","push","f","fc","feedbackChoice","choiceId","b","bucket","oldBucketId","newBucketId","bucketId","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","submitRequired","isSubmit","$inject"],"mappings":"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","file":"matchService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MatchService extends NodeService {\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Create a Match component object\n     * @returns a new Match component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Match';\n        component.prompt = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.choices = [];\n        component.buckets = [];\n        component.feedback = [\n            {\n                \"bucketId\": \"0\",\n                \"choices\": []\n            }\n        ];\n        component.ordered = false;\n\n        return component;\n    }\n\n    /**\n     * Copies an existing Match component object\n     * @returns a copied Match component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.feedback = componentToCopy.feedback;  // Copy the feedback as-is. We'll update the id's below.\n        component.choices = [];\n        // go through the original choices and create new id's\n        if (componentToCopy.choices != null && componentToCopy.choices.length > 0) {\n            for (var c = 0; c < componentToCopy.choices.length; c++) {\n                var choice = componentToCopy.choices[c];\n                var oldChoiceId = choice.id;\n                var newChoiceId = this.UtilService.generateKey();  // generate a new id for this choice.\n                choice.id = newChoiceId;  // update the choice.\n                component.choices.push(choice);\n                // Also update any matching choice in the feedback.\n                if (component.feedback != null && component.feedback.length > 0) {\n                    for (var f = 0; f < component.feedback.length; f++) {\n                        var feedback = component.feedback[f];\n                        if (feedback.choices != null && feedback.choices.length > 0) {\n                            for (var fc = 0; fc < feedback.choices.length; fc++) {\n                                var feedbackChoice = feedback.choices[fc];\n                                if (feedbackChoice.choiceId === oldChoiceId) {\n                                    feedbackChoice.choiceId = newChoiceId;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        component.buckets = [];\n        // go through the original buckets and create new id's\n        if (componentToCopy.buckets != null && componentToCopy.buckets.length > 0) {\n            for (var b = 0; b < componentToCopy.buckets.length; b++) {\n                var bucket = componentToCopy.buckets[b];\n                var oldBucketId = bucket.id;\n                var newBucketId = this.UtilService.generateKey();  // generate a new id for this bucket.\n                bucket.id = newBucketId;  // update the bucket's id\n                component.buckets.push(bucket);\n                // Also update any matching bucket in the feedback.\n                if (component.feedback != null && component.feedback.length > 0) {\n                    for (var f = 0; f < component.feedback.length; f++) {\n                        var feedback = component.feedback[f];\n                        if (feedback.bucketId === oldBucketId) {\n                            feedback.bucketId = newBucketId;\n                        }\n                    }\n                }\n            }\n        }\n        component.ordered = false;\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Match') {\n                // the other component is an Match component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        var result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var buckets = studentData.buckets;\n\n                    if (buckets && buckets.length) {\n                        // there is a bucket, so the student has saved work\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n}\n\nMatchService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MatchService;\n"]}