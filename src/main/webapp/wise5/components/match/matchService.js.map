{"version":3,"sources":["matchService.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAEM;;;AACF,aADE,YACF,CAAY,kBAAZ,EACY,WADZ,EACyB;8BAFvB,cAEuB;;2EAFvB,0BAEuB;;AAErB,cAAK,kBAAL,GAA0B,kBAA1B,CAFqB;AAGrB,cAAK,WAAL,GAAmB,WAAnB,CAHqB;;KADzB;;;;;;;iBADE;;0CAYgB;;AAEd,gBAAI,YAAY,EAAZ,CAFU;AAGd,sBAAU,EAAV,GAAe,KAAK,WAAL,CAAiB,WAAjB,EAAf,CAHc;AAId,sBAAU,IAAV,GAAiB,OAAjB,CAJc;AAKd,sBAAU,MAAV,GAAmB,mBAAnB,CALc;AAMd,sBAAU,cAAV,GAA2B,KAA3B,CANc;AAOd,sBAAU,gBAAV,GAA6B,IAA7B,CAPc;AAQd,sBAAU,OAAV,GAAoB,EAApB,CARc;AASd,sBAAU,OAAV,GAAoB,EAApB,CATc;AAUd,sBAAU,QAAV,GAAqB,EAArB,CAVc;AAWd,sBAAU,OAAV,GAAoB,KAApB,CAXc;;AAad,mBAAO,SAAP,CAbc;;;;;;;;;;;;+CAsBK,kCAAkC;AACrD,gBAAI,iBAAiB,IAAjB,CADiD;;AAGrD,gBAAI,oCAAoC,IAApC,EAA0C;;;AAG1C,iCAAiB,KAAK,kBAAL,CAAwB,oBAAxB,EAAjB;;;AAH0C,oBAMtC,qBAAqB,iCAAiC,aAAjC,CANiB;;AAQ1C,oBAAI,uBAAuB,OAAvB,EAAgC;;;;AAIhC,wBAAI,cAAc,iCAAiC,WAAjC;;;AAJc,wBAO5B,kBAAkB,KAAK,kBAAL,CAAwB,oBAAxB,CAA6C,WAA7C,CAAlB;;;AAP4B,kCAUhC,CAAe,WAAf,GAA6B,eAA7B,CAVgC;iBAApC;aARJ;;AAsBA,mBAAO,cAAP,CAzBqD;;;;;;;;;;;;;;oCAqC7C,WAAW,iBAAiB,iBAAiB,YAAY,MAAM;AACvE,gBAAI,SAAS,KAAT,CADmE;;AAGvE,gBAAI,mBAAmB,gBAAgB,MAAhB,EAAwB;AAC3C,oBAAI,iBAAiB,KAAK,gBAAL,IAA0B,UAAU,gBAAV,IAA8B,CAAC,KAAK,cAAL;;;AADnC,qBAItC,IAAI,IAAI,CAAJ,EAAO,IAAI,gBAAgB,MAAhB,EAAwB,GAA5C,EAAiD;;;AAG7C,wBAAI,iBAAiB,gBAAgB,CAAhB,CAAjB;;;AAHyC,wBAMzC,cAAc,eAAe,WAAf,CAN2B;;AAQ7C,wBAAI,eAAe,IAAf,EAAqB;AACrB,4BAAI,UAAU,YAAY,OAAZ,CADO;;AAGrB,4BAAI,WAAW,QAAQ,MAAR,EAAgB;;AAE3B,gCAAI,cAAJ,EAAoB;;AAEhB,oCAAI,eAAe,QAAf,EAAyB;AACzB,6CAAS,IAAT,CADyB;AAEzB,0CAFyB;iCAA7B;6BAFJ,MAMO;AACH,yCAAS,IAAT,CADG;AAEH,sCAFG;6BANP;yBAFJ;qBAHJ;iBARJ;aAJJ;;AAgCA,mBAAO,MAAP,CAnCuE;;;;WAvEzE;;;AA8GN,aAAa,OAAb,GAAuB,CACnB,oBADmB,EAEnB,aAFmB,CAAvB;;kBAKe","file":"matchService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MatchService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a Match component object\n     * @returns a new Match component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Match';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = true;\n        component.choices = [];\n        component.buckets = [];\n        component.feedback = [];\n        component.ordered = false;\n\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Match') {\n                // the other component is an Match component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        var result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var buckets = studentData.buckets;\n\n                    if (buckets && buckets.length) {\n                        // there is a bucket, so the student has saved work\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nMatchService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MatchService;\n"]}