{"version":3,"sources":["matchService.es6"],"names":["MatchService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","choices","buckets","feedback","ordered","componentToCopy","createComponent","length","c","choice","oldChoiceId","newChoiceId","push","f","fc","feedbackChoice","choiceId","b","bucket","oldBucketId","newBucketId","bucketId","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","submitRequired","isSubmit","componentContent","items","isCorrect","$inject"],"mappings":"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","file":"matchService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MatchService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Match\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('match.componentTypeLabel');\n  }\n\n  /**\n   * Create a Match component object\n   * @returns a new Match component object\n   */\n  createComponent() {\n\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'Match';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.choices = [];\n    component.buckets = [];\n    component.feedback = [\n      {\n        'bucketId': '0',\n        'choices': []\n      }\n    ];\n    component.ordered = false;\n\n    return component;\n  }\n\n  /**\n   * Copies an existing Match component object\n   * @returns a copied Match component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.feedback = componentToCopy.feedback;  // Copy the feedback as-is. We'll update the id's below.\n    component.choices = [];\n    // go through the original choices and create new id's\n    if (componentToCopy.choices != null && componentToCopy.choices.length > 0) {\n      for (var c = 0; c < componentToCopy.choices.length; c++) {\n        var choice = componentToCopy.choices[c];\n        var oldChoiceId = choice.id;\n        var newChoiceId = this.UtilService.generateKey();  // generate a new id for this choice.\n        choice.id = newChoiceId;  // update the choice.\n        component.choices.push(choice);\n        // Also update any matching choice in the feedback.\n        if (component.feedback != null && component.feedback.length > 0) {\n          for (var f = 0; f < component.feedback.length; f++) {\n            var feedback = component.feedback[f];\n            if (feedback.choices != null && feedback.choices.length > 0) {\n              for (var fc = 0; fc < feedback.choices.length; fc++) {\n                var feedbackChoice = feedback.choices[fc];\n                if (feedbackChoice.choiceId === oldChoiceId) {\n                  feedbackChoice.choiceId = newChoiceId;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    component.buckets = [];\n    // go through the original buckets and create new id's\n    if (componentToCopy.buckets != null && componentToCopy.buckets.length > 0) {\n      for (var b = 0; b < componentToCopy.buckets.length; b++) {\n        var bucket = componentToCopy.buckets[b];\n        var oldBucketId = bucket.id;\n        var newBucketId = this.UtilService.generateKey();  // generate a new id for this bucket.\n        bucket.id = newBucketId;  // update the bucket's id\n        component.buckets.push(bucket);\n        // Also update any matching bucket in the feedback.\n        if (component.feedback != null && component.feedback.length > 0) {\n          for (var f = 0; f < component.feedback.length; f++) {\n            var feedback = component.feedback[f];\n            if (feedback.bucketId === oldBucketId) {\n              feedback.bucketId = newBucketId;\n            }\n          }\n        }\n      }\n    }\n    component.ordered = false;\n    return component;\n  }\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'Match') {\n        // the other component is an Match component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    var result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        // the component state\n        var componentState = componentStates[c];\n\n        // get the student data from the component state\n        var studentData = componentState.studentData;\n\n        if (studentData != null) {\n          var buckets = studentData.buckets;\n\n          if (buckets && buckets.length) {\n            // there is a bucket, so the student has saved work\n            if (submitRequired) {\n              // completion requires a submission, so check for isSubmit\n              if (componentState.isSubmit) {\n                result = true;\n                break;\n              }\n            } else {\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        let buckets = studentData.buckets;\n        if (buckets != null) {\n          for (let b = 0; b < buckets.length; b++) {\n            let bucket = buckets[b];\n            if (bucket != null) {\n              let items = bucket.items;\n              if (items != null && items.length > 0) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if a the component has a correct answer.\n   * @param component The component content object.\n   * @return Whether the component has a correct answer.\n   */\n  hasCorrectAnswer(component) {\n    if (component != null) {\n      for (let bucket of component.feedback) {\n        for (let choice of bucket.choices) {\n          if (choice.isCorrect) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\n\nMatchService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MatchService;\n"]}