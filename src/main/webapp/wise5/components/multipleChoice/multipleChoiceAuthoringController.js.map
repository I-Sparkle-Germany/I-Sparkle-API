{"version":3,"sources":["multipleChoiceAuthoringController.es6"],"names":["MultipleChoiceAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","$watch","authoringComponentContent","bind","newValue","oldValue","componentContent","injectAssetPaths","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","targetObject","text","authoringViewComponentChanged","hide","choices","show","componentHasFeedback","setShowSubmitButtonValue","c","length","choice","feedback","isCorrect","newChoice","id","generateKey","push","choiceId","answer","confirm","$translate","tempChoiceId","splice","getAuthoringChoices","showFeedback","feedbackToShow","params","isPopup","$broadcast","$inject"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;;;;;IAEMA,iC;;;AACJ,6CAAYC,OAAZ,EACYC,SADZ,EAEYC,EAFZ,EAGYC,UAHZ,EAIYC,MAJZ,EAKYC,iBALZ,EAMYC,aANZ,EAOYC,qBAPZ,EAQYC,WARZ,EASYC,eATZ,EAUYC,cAVZ,EAWYC,mBAXZ,EAYYC,kBAZZ,EAaYC,WAbZ,EAayB;AAAA;;AAgBvB;AAhBuB,sKACjBb,OADiB,EAErBC,SAFqB,EAGrBC,EAHqB,EAIrBC,UAJqB,EAKrBC,MALqB,EAMrBC,iBANqB,EAOrBC,aAPqB,EAQrBC,qBARqB,EASrBC,WATqB,EAUrBC,eAVqB,EAWrBC,cAXqB,EAYrBC,mBAZqB,EAarBC,kBAbqB,EAcrBC,WAdqB;;AAiBvB,UAAKC,8BAAL,GAAsC,CACpC;AACEC,YAAM;AADR,KADoC,CAAtC;;AAMAX,WAAOY,MAAP,CAAc,YAAW;AACvB,aAAO,KAAKC,yBAAZ;AACD,KAFa,CAEZC,IAFY,OAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACzC,WAAKC,gBAAL,GAAwB,KAAKX,cAAL,CAAoBY,gBAApB,CAAqCH,QAArC,CAAxB;AACA,WAAKI,mBAAL,GAA2B,KAAKF,gBAAL,CAAsBG,cAAjD;AACA,WAAKC,qBAAL,GAA6B,KAAKJ,gBAAL,CAAsBK,gBAAnD;AACD,KAJa,CAIZR,IAJY,OAFd,EAMc,IANd;;AAQA;;;;AAIA,UAAKd,MAAL,CAAYuB,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;;AAEhD,UAAIA,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,YAAIA,KAAKC,MAAL,IAAe,MAAKA,MAApB,IAA8BD,KAAKE,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACtE;AACA,cAAIC,YAAYH,KAAKG,SAArB;;AAEA,cAAIA,aAAa,IAAjB,EAAuB;AACrB,gBAAIC,WAAWD,UAAUC,QAAzB;;AAEA,gBAAIA,YAAY,IAAhB,EAAsB;AACpB;;;;;AAKA,kBAAIC,sBAAsB,MAAK5B,aAAL,CAAmB6B,6BAAnB,EAA1B;AACA,kBAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;;AAEA,kBAAIJ,KAAKQ,MAAL,IAAe,QAAf,IAA2BR,KAAKQ,MAAL,IAAe,QAA9C,EAAwD;AACtD,oBAAIC,eAAe,EAAnB;;AAEA,oBAAIT,KAAKQ,MAAL,IAAe,QAAnB,EAA6B;AAC3B;AACAC,iCAAe,sBAAsB,MAAKR,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACD,iBAHD,MAGO,IAAIF,KAAKQ,MAAL,IAAe,QAAnB,EAA6B;AAClC;AACAC,iCAAe,sBAAsB,MAAKR,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACD;;AAED,oBAAIO,gBAAgB,EAApB,EAAwB;AACtB,sBAAI,MAAKzB,WAAL,CAAiB0B,OAAjB,CAAyBN,QAAzB,CAAJ,EAAwC;AACtC;;;;AAIAO,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,qBAAjC;AACAD,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,cAAjC;;AAEA;AACAD,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACD,mBAVD,MAUO,IAAI,MAAKpB,WAAL,CAAiB6B,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC7C;;;;AAIAO,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,qBAAjC;AACAD,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,cAAjC;;AAEA;AACA,wBAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,iCAAaG,QAAb,GAAwB,MAAxB;AACAH,iCAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAI,sBAAE,MAAMF,YAAR,EAAsBG,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACD;AACF;AACF,eArCD,MAqCO,IAAId,KAAKQ,MAAL,IAAe,QAAnB,EAA6B;AAClC;;AAEA;;;;AAIA,oBAAIW,eAAenB,KAAKmB,YAAxB;;AAEA,oBAAIA,gBAAgB,IAApB,EAA0B;;AAExB;AACA,sBAAIC,OAAO,eAAehB,QAAf,GAA0B,KAArC;;AAEA;AACAe,+BAAaC,IAAb,GAAoBA,IAApB;;AAEA;AACA,wBAAKC,6BAAL;AACD;AACF;AACF;AACF;AACF;AACF;;AAED;AACA,YAAKjD,SAAL,CAAekD,IAAf;AACD,KAtFD;AAnCuB;AA0HxB;;AAED;;;;;;;;0CAIsB;AACpB,UAAIC,UAAU,IAAd;;AAEA;AACA,UAAInC,4BAA4B,KAAKA,yBAArC;;AAEA,UAAIA,6BAA6B,IAAjC,EAAuC;;AAErC;AACAmC,kBAAUnC,0BAA0BmC,OAApC;AACD;;AAED,aAAOA,OAAP;AACD;;;;;AAED;;;mDAG+B;;AAE7B,UAAIC,OAAO,IAAX;;AAEA,UAAI,KAAKC,oBAAL,EAAJ,EAAiC;AAC/B;AACAD,eAAO,IAAP;AACD,OAHD,MAGO;AACL;;;;AAIAA,eAAO,KAAP;AACD;;AAED;AACA,WAAKE,wBAAL,CAA8BF,IAA9B;;AAEA;AACA,WAAKH,6BAAL;AACD;;AAED;;;;;;;;2CAKuB;;AAErB;AACA,UAAIE,UAAU,KAAKnC,yBAAL,CAA+BmC,OAA7C;;AAEA,UAAIA,WAAW,IAAf,EAAqB;;AAEnB;AACA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,QAAQK,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,cAAIE,SAASN,QAAQI,CAAR,CAAb;;AAEA,cAAIE,UAAU,IAAd,EAAoB;;AAElB,gBAAIA,OAAOC,QAAP,IAAmB,IAAnB,IAA2BD,OAAOC,QAAP,IAAmB,EAAlD,EAAsD;AACpD;AACA,qBAAO,IAAP;AACD;;AAED,gBAAID,OAAOE,SAAX,EAAsB;AACpB;AACA,qBAAO,IAAP;AACD;AACF;AACF;AACF;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;gCAGY;;AAEV;AACA,UAAIR,UAAU,KAAKnC,yBAAL,CAA+BmC,OAA7C;;AAEA;AACA,UAAIS,YAAY,EAAhB;AACAA,gBAAUC,EAAV,GAAe,KAAKjD,WAAL,CAAiBkD,WAAjB,CAA6B,EAA7B,CAAf;AACAF,gBAAUZ,IAAV,GAAiB,EAAjB;AACAY,gBAAUF,QAAV,GAAqB,EAArB;AACAE,gBAAUD,SAAV,GAAsB,KAAtB;;AAEA;AACAR,cAAQY,IAAR,CAAaH,SAAb;;AAEA;AACA,WAAKX,6BAAL;AACD;;AAED;;;;;;;iCAIae,Q,EAAU;;AAErB;AACA,UAAIC,SAASC,QAAQ,KAAKC,UAAL,CAAgB,oDAAhB,CAAR,CAAb;;AAEA,UAAIF,MAAJ,EAAY;AACV;;AAEA;AACA,YAAId,UAAU,KAAKnC,yBAAL,CAA+BmC,OAA7C;;AAEA,YAAIA,WAAW,IAAf,EAAqB;;AAEnB;AACA,eAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,QAAQK,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,gBAAIE,SAASN,QAAQI,CAAR,CAAb;;AAEA,gBAAIE,UAAU,IAAd,EAAoB;AAClB,kBAAIW,eAAeX,OAAOI,EAA1B;;AAEA,kBAAIG,aAAaI,YAAjB,EAA+B;AAC7B;AACAjB,wBAAQkB,MAAR,CAAed,CAAf,EAAkB,CAAlB;AACA;AACD;AACF;AACF;AACF;;AAED,aAAKN,6BAAL;AACD;AACF;;AAED;;;;;;;iCAIae,Q,EAAU;;AAErB;AACA,UAAIb,UAAU,KAAKnC,yBAAL,CAA+BmC,OAA7C;;AAEA,UAAIA,WAAW,IAAf,EAAqB;;AAEnB;AACA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,QAAQK,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,cAAIE,SAASN,QAAQI,CAAR,CAAb;;AAEA,cAAIE,UAAU,IAAd,EAAoB;AAClB,gBAAIW,eAAeX,OAAOI,EAA1B;;AAEA,gBAAIG,aAAaI,YAAjB,EAA+B;;AAE7B,kBAAIb,KAAK,CAAT,EAAY;AACV;;;;AAID,eALD,MAKO;AACL;;AAEA;AACAJ,wBAAQkB,MAAR,CAAed,CAAf,EAAkB,CAAlB;;AAEA;AACAJ,wBAAQkB,MAAR,CAAed,IAAI,CAAnB,EAAsB,CAAtB,EAAyBE,MAAzB;AACD;;AAED;AACD;AACF;AACF;AACF;;AAED,WAAKR,6BAAL;AACD;;AAED;;;;;;;mCAIee,Q,EAAU;AACvB;AACA,UAAIb,UAAU,KAAKnC,yBAAL,CAA+BmC,OAA7C;;AAEA,UAAIA,WAAW,IAAf,EAAqB;;AAEnB;AACA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,QAAQK,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,cAAIE,SAASN,QAAQI,CAAR,CAAb;;AAEA,cAAIE,UAAU,IAAd,EAAoB;AAClB,gBAAIW,eAAeX,OAAOI,EAA1B;;AAEA,gBAAIG,aAAaI,YAAjB,EAA+B;;AAE7B,kBAAIb,KAAKJ,QAAQK,MAAR,GAAiB,CAA1B,EAA6B;AAC3B;;;;AAID,eALD,MAKO;AACL;;AAEA;AACAL,wBAAQkB,MAAR,CAAed,CAAf,EAAkB,CAAlB;;AAEA;AACAJ,wBAAQkB,MAAR,CAAed,IAAI,CAAnB,EAAsB,CAAtB,EAAyBE,MAAzB;AACD;;AAED;AACD;AACF;AACF;AACF;AACF;;AAED;;;;;;;;qCAKiB;;AAEf;AACA,UAAIN,UAAU,KAAKmB,mBAAL,EAAd;;AAEA,UAAInB,WAAW,IAAf,EAAqB;;AAEnB;AACA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,QAAQK,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,cAAIE,SAASN,QAAQI,CAAR,CAAb;;AAEA,cAAIE,UAAU,IAAd,EAAoB;AAClB;AACA,mBAAOA,OAAOc,YAAd;AACA,mBAAOd,OAAOe,cAAd;AACD;AACF;AACF;AACF;;AAED;;;;;;;;sCAKkBf,M,EAAQ;AACxB;AACA,UAAIgB,SAAS,EAAb;AACAA,aAAOC,OAAP,GAAiB,IAAjB;AACAD,aAAO5C,MAAP,GAAgB,KAAKA,MAArB;AACA4C,aAAO3C,WAAP,GAAqB,KAAKA,WAA1B;AACA2C,aAAOrC,MAAP,GAAgB,QAAhB;AACAqC,aAAO1B,YAAP,GAAsBU,MAAtB;;AAEA;AACA,WAAKvD,UAAL,CAAgByE,UAAhB,CAA2B,kBAA3B,EAA+CF,MAA/C;AACD;;;;;;AACF;;AAED3E,kCAAkC8E,OAAlC,GAA4C,CAC1C,SAD0C,EAE1C,WAF0C,EAG1C,IAH0C,EAI1C,YAJ0C,EAK1C,QAL0C,EAM1C,mBAN0C,EAO1C,eAP0C,EAQ1C,uBAR0C,EAS1C,aAT0C,EAU1C,iBAV0C,EAW1C,gBAX0C,EAY1C,qBAZ0C,EAa1C,oBAb0C,EAc1C,aAd0C,CAA5C;;kBAiBe9E,iC","file":"multipleChoiceAuthoringController.js","sourcesContent":["'use strict';\n\nimport MultipleChoiceController from \"./multipleChoiceController\";\n\nclass MultipleChoiceAuthoringController extends MultipleChoiceController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              MultipleChoiceService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      MultipleChoiceService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'MultipleChoice'\n      }\n    ];\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              if (args.target == 'prompt' || args.target == 'rubric') {\n                var summernoteId = '';\n\n                if (args.target == 'prompt') {\n                  // the target is the summernote prompt element\n                  summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                } else if (args.target == 'rubric') {\n                  // the target is the summernote rubric element\n                  summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                }\n\n                if (summernoteId != '') {\n                  if (this.UtilService.isImage(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // add the image html\n                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                  } else if (this.UtilService.isVideo(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // insert the video element\n                    var videoElement = document.createElement('video');\n                    videoElement.controls = 'true';\n                    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                  }\n                }\n              } else if (args.target == 'choice') {\n                // the target is a choice\n\n                /*\n                 * get the target object which should be a\n                 * choice object\n                 */\n                var targetObject = args.targetObject;\n\n                if (targetObject != null) {\n\n                  // create the img html\n                  var text = '<img src=\"' + fileName + '\"/>';\n\n                  // set the html into the choice text\n                  targetObject.text = text;\n\n                  // save the component\n                  this.authoringViewComponentChanged();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * Get the available choices from component content\n   * @return the available choices from the component content\n   */\n  getAuthoringChoices() {\n    var choices = null;\n\n    // get the component content\n    var authoringComponentContent = this.authoringComponentContent;\n\n    if (authoringComponentContent != null) {\n\n      // get the choices\n      choices = authoringComponentContent.choices;\n    }\n\n    return choices;\n  };\n\n  /**\n   * The author has changed the feedback so we will enable the submit button\n   */\n  authoringViewFeedbackChanged() {\n\n    var show = true;\n\n    if (this.componentHasFeedback()) {\n      // this component has feedback so we will show the submit button\n      show = true;\n    } else {\n      /*\n       * this component does not have feedback so we will not show the\n       * submit button\n       */\n      show = false;\n    }\n\n    // show or hide the submit button\n    this.setShowSubmitButtonValue(show);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if this component has been authored to have feedback or has a\n   * correct choice\n   * @return whether this component has feedback or has a correct choice\n   */\n  componentHasFeedback() {\n\n    // get the choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n\n          if (choice.feedback != null && choice.feedback != '') {\n            // the choice has feedback\n            return true;\n          }\n\n          if (choice.isCorrect) {\n            // the choice is correct\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Add a choice from within the authoring tool\n   */\n  addChoice() {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    // make the new choice\n    var newChoice = {};\n    newChoice.id = this.UtilService.generateKey(10);\n    newChoice.text = '';\n    newChoice.feedback = '';\n    newChoice.isCorrect = false;\n\n    // add the new choice\n    choices.push(newChoice);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a choice from within the authoring tool\n   * @param choiceId\n   */\n  deleteChoice(choiceId) {\n\n    // ask the author if they are sure they want to delete the choice\n    var answer = confirm(this.$translate('multipleChoice.areYouSureYouWantToDeleteThisChoice'));\n\n    if (answer) {\n      // the author answered yes to delete the choice\n\n      // get the authored choices\n      var choices = this.authoringComponentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            var tempChoiceId = choice.id;\n\n            if (choiceId === tempChoiceId) {\n              // we have found the choice that we want to delete so we will remove it\n              choices.splice(c, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a choice up\n   * @param choiceId the choice to move\n   */\n  moveChoiceUp(choiceId) {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == 0) {\n              /*\n               * the choice is the first choice so we can't move\n               * it up\n               */\n            } else {\n              // we have found the choice that we want to move up\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index back\n              choices.splice(c - 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a choice down\n   * @param choiceId the choice to move\n   */\n  moveChoiceDown(choiceId) {\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == choices.length - 1) {\n              /*\n               * the choice is the last choice so we can't move\n               * it down\n               */\n            } else {\n              // we have found the choice that we want to move down\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index forward\n              choices.splice(c + 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clean up the choice objects. In the authoring tool this is required\n   * because we use the choice objects as ng-model values and inject\n   * fields into the choice objects such as showFeedback and feedbackToShow.\n   */\n  cleanUpChoices() {\n\n    // get the authored choices\n    var choices = this.getAuthoringChoices();\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          // remove the fields we don't want to be saved\n          delete choice.showFeedback;\n          delete choice.feedbackToShow;\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * choice\n   * @param choice the choice object to set the image into\n   */\n  chooseChoiceAsset(choice) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'choice';\n    params.targetObject = choice;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n};\n\nMultipleChoiceAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'MultipleChoiceService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceAuthoringController;\n"]}